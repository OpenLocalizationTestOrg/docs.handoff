{"content":"---\ntitle: \"Take Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QueryTake\"\nhelpviewer_keywords: \n  - \"Take statement [Visual Basic]\"\n  - \"queries [Visual Basic], Take\"\n  - \"Take clause [Visual Basic]\"\nms.assetid: 77bf87b2-1476-4456-957f-fee922fbad8c\n---\n# Take Clause (Visual Basic)\nReturns a specified number of contiguous elements from the start of a collection.  \n  \n## Syntax  \n  \n```  \nTake count  \n```  \n  \n## Parts  \n `count`  \n Required. A value or an expression that evaluates to the number of elements of the sequence to return.  \n  \n## Remarks  \n The `Take` clause causes a query to include a specified number of contiguous elements from the start of a results list. The number of elements to include is specified by the `count` parameter.  \n  \n You can use the `Take` clause with the `Skip` clause to return a range of data from any segment of a query. To do this, pass the index of the first element of the range to the `Skip` clause and the size of the range to the `Take` clause. In this case, the `Take` clause must be specified after the `Skip` clause.  \n  \n When you use the `Take` clause in a query, you may also need to ensure that the results are returned in an order that will enable the `Take` clause to include the intended results. For more information about ordering query results, see [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md).  \n  \n You can use the `TakeWhile` clause to specify that only certain elements be returned, depending on a supplied condition.  \n  \n## Example  \n The following code example uses the `Take` clause together with the `Skip` clause to return data from a query in pages. The GetCustomers function uses the `Skip` clause to bypass the customers in the list until the supplied starting index value, and uses the `Take` clause to return a page of customers starting from that index value.  \n  \n [!code-vb[VbSimpleQuerySamples#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbSimpleQuerySamples/VB/QuerySamples1.vb#1)]  \n  \n## See also\n\n- [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)\n- [Queries](../../../visual-basic/language-reference/queries/index.md)\n- [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)\n- [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)\n- [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)\n- [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)\n- [Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md)\n","nodes":[{"pos":[4,267],"embed":true,"restype":"x-metadata","content":"title: \"Take Clause (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.QueryTake\"\nhelpviewer_keywords: \n  - \"Take statement [Visual Basic]\"\n  - \"queries [Visual Basic], Take\"\n  - \"Take clause [Visual Basic]\"\nms.assetid: 77bf87b2-1476-4456-957f-fee922fbad8c","nodes":[{"content":"Take Clause (Visual Basic)","nodes":[{"pos":[0,26],"content":"Take Clause (Visual Basic)","nodes":[{"content":"Take Clause (Visual Basic)","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[274,300],"content":"Take Clause (Visual Basic)","linkify":"Take Clause (Visual Basic)","nodes":[{"content":"Take Clause (Visual Basic)","pos":[0,26]}]},{"content":"Returns a specified number of contiguous elements from the start of a collection.","pos":[301,382]},{"pos":[391,397],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[434,439],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[454,463]},{"content":"A value or an expression that evaluates to the number of elements of the sequence to return.","pos":[464,556]},{"pos":[565,572],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Take`</ph> clause causes a query to include a specified number of contiguous elements from the start of a results list.","pos":[576,695],"source":"The `Take` clause causes a query to include a specified number of contiguous elements from the start of a results list."},{"content":"The number of elements to include is specified by the <ph id=\"ph1\">`count`</ph> parameter.","pos":[696,768],"source":" The number of elements to include is specified by the `count` parameter."},{"content":"You can use the <ph id=\"ph1\">`Take`</ph> clause with the <ph id=\"ph2\">`Skip`</ph> clause to return a range of data from any segment of a query.","pos":[775,882],"source":"You can use the `Take` clause with the `Skip` clause to return a range of data from any segment of a query."},{"content":"To do this, pass the index of the first element of the range to the <ph id=\"ph1\">`Skip`</ph> clause and the size of the range to the <ph id=\"ph2\">`Take`</ph> clause.","pos":[883,1012],"source":" To do this, pass the index of the first element of the range to the `Skip` clause and the size of the range to the `Take` clause."},{"content":"In this case, the <ph id=\"ph1\">`Take`</ph> clause must be specified after the <ph id=\"ph2\">`Skip`</ph> clause.","pos":[1013,1087],"source":" In this case, the `Take` clause must be specified after the `Skip` clause."},{"content":"When you use the <ph id=\"ph1\">`Take`</ph> clause in a query, you may also need to ensure that the results are returned in an order that will enable the <ph id=\"ph2\">`Take`</ph> clause to include the intended results.","pos":[1094,1274],"source":"When you use the `Take` clause in a query, you may also need to ensure that the results are returned in an order that will enable the `Take` clause to include the intended results."},{"content":"For more information about ordering query results, see <bpt id=\"p1\">[</bpt>Order By Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>.","pos":[1275,1417],"source":" For more information about ordering query results, see [Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)."},{"pos":[1424,1544],"content":"You can use the <ph id=\"ph1\">`TakeWhile`</ph> clause to specify that only certain elements be returned, depending on a supplied condition.","source":"You can use the `TakeWhile` clause to specify that only certain elements be returned, depending on a supplied condition."},{"pos":[1553,1560],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example uses the <ph id=\"ph1\">`Take`</ph> clause together with the <ph id=\"ph2\">`Skip`</ph> clause to return data from a query in pages.","pos":[1564,1683],"source":"The following code example uses the `Take` clause together with the `Skip` clause to return data from a query in pages."},{"content":"The GetCustomers function uses the <ph id=\"ph1\">`Skip`</ph> clause to bypass the customers in the list until the supplied starting index value, and uses the <ph id=\"ph2\">`Take`</ph> clause to return a page of customers starting from that index value.","pos":[1684,1898],"source":" The GetCustomers function uses the `Skip` clause to bypass the customers in the list until the supplied starting index value, and uses the `Take` clause to return a page of customers starting from that index value."},{"pos":[2044,2052],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2056,2182],"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>","source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)"},{"pos":[2185,2253],"content":"<bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/index.md)</ept>","source":"[Queries](../../../visual-basic/language-reference/queries/index.md)"},{"pos":[2256,2338],"content":"<bpt id=\"p1\">[</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept>","source":"[Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)"},{"pos":[2341,2419],"content":"<bpt id=\"p1\">[</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept>","source":"[From Clause](../../../visual-basic/language-reference/queries/from-clause.md)"},{"pos":[2422,2508],"content":"<bpt id=\"p1\">[</bpt>Order By Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/order-by-clause.md)</ept>","source":"[Order By Clause](../../../visual-basic/language-reference/queries/order-by-clause.md)"},{"pos":[2511,2601],"content":"<bpt id=\"p1\">[</bpt>Take While Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/take-while-clause.md)</ept>","source":"[Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)"},{"pos":[2604,2682],"content":"<bpt id=\"p1\">[</bpt>Skip Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/skip-clause.md)</ept>","source":"[Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md)"}]}