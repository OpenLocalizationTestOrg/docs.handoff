{"content":"---\ntitle: \"How to: Read and write to a newly created data file\"\nms.date: \"01/21/2019\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"streams, reading and writing data\"\n  - \"BinaryReader class, examples\"\n  - \"I/O [.NET Framework], reading data\"\n  - \"I/O [.NET Framework], writing data\"\n  - \"BinaryWriter class, examples\"\nms.assetid: e209d949-31e8-44ea-8e38-87f9093f3093\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to: Read and write to a newly created data file\nThe <xref:System.IO.BinaryWriter?displayProperty=nameWithType> and <xref:System.IO.BinaryReader?displayProperty=nameWithType> classes are used for writing and reading data other than character strings. The following example shows how to create an empty file stream, write data to it, and read data from it. \n\nThe example creates a data file called *Test.data* in the current directory, creates the associated <xref:System.IO.BinaryWriter> and <xref:System.IO.BinaryReader> objects, and uses the <xref:System.IO.BinaryWriter> object to write the integers 0 through 10 to *Test.data*, which leaves the file pointer at the end of the file. The <xref:System.IO.BinaryReader> object then sets the file pointer back to the origin and reads out the specified content.  \n  \n> [!NOTE]\n> If *Test.data* already exists in the current directory, an <xref:System.IO.IOException> exception is thrown. Use the file mode option <xref:System.IO.FileMode.Create?displayProperty=nameWithType> rather than <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> to always create a new file without throwing an exception.  \n  \n## Example  \n [!code-csharp[System.IO.BinaryReaderWriter#7](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/CS/source6.cs#7)]\n [!code-vb[System.IO.BinaryReaderWriter#7](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.BinaryReaderWriter/VB/source6.vb#7)]  \n  \n## See also\n\n- <xref:System.IO.BinaryReader>  \n- <xref:System.IO.BinaryWriter>  \n- <xref:System.IO.FileStream>  \n- <xref:System.IO.FileStream.Seek%2A?displayProperty=nameWithType>  \n- <xref:System.IO.SeekOrigin>  \n- [How to: Enumerate directories and files](../../../docs/standard/io/how-to-enumerate-directories-and-files.md)  \n- [How to: Open and append to a log file](../../../docs/standard/io/how-to-open-and-append-to-a-log-file.md)  \n- [How to: Read text from a file](../../../docs/standard/io/how-to-read-text-from-a-file.md)  \n- [How to: Write text to a file](../../../docs/standard/io/how-to-write-text-to-a-file.md)  \n- [How to: Read characters from a string](../../../docs/standard/io/how-to-read-characters-from-a-string.md)  \n- [How to: Write characters to a string](../../../docs/standard/io/how-to-write-characters-to-a-string.md)  \n- [File and stream I/O](../../../docs/standard/io/index.md)\n","nodes":[{"pos":[4,461],"embed":true,"restype":"x-metadata","content":"title: \"How to: Read and write to a newly created data file\"\nms.date: \"01/21/2019\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"streams, reading and writing data\"\n  - \"BinaryReader class, examples\"\n  - \"I/O [.NET Framework], reading data\"\n  - \"I/O [.NET Framework], writing data\"\n  - \"BinaryWriter class, examples\"\nms.assetid: e209d949-31e8-44ea-8e38-87f9093f3093\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Read and write to a newly created data file","nodes":[{"pos":[0,51],"content":"How to: Read and write to a newly created data file","nodes":[{"content":"How to: Read and write to a newly created data file","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[468,519],"content":"How to: Read and write to a newly created data file","linkify":"How to: Read and write to a newly created data file","nodes":[{"content":"How to: Read and write to a newly created data file","pos":[0,51]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.BinaryWriter?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.BinaryReader?displayProperty=nameWithType&gt;</ph> classes are used for writing and reading data other than character strings.","pos":[520,721],"source":"The <xref:System.IO.BinaryWriter?displayProperty=nameWithType> and <xref:System.IO.BinaryReader?displayProperty=nameWithType> classes are used for writing and reading data other than character strings."},{"content":"The following example shows how to create an empty file stream, write data to it, and read data from it.","pos":[722,826]},{"content":"The example creates a data file called <bpt id=\"p1\">*</bpt>Test.data<ept id=\"p1\">*</ept> in the current directory, creates the associated <ph id=\"ph1\">&lt;xref:System.IO.BinaryWriter&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.BinaryReader&gt;</ph> objects, and uses the <ph id=\"ph3\">&lt;xref:System.IO.BinaryWriter&gt;</ph> object to write the integers 0 through 10 to <bpt id=\"p2\">*</bpt>Test.data<ept id=\"p2\">*</ept>, which leaves the file pointer at the end of the file.","pos":[829,1156],"source":"The example creates a data file called *Test.data* in the current directory, creates the associated <xref:System.IO.BinaryWriter> and <xref:System.IO.BinaryReader> objects, and uses the <xref:System.IO.BinaryWriter> object to write the integers 0 through 10 to *Test.data*, which leaves the file pointer at the end of the file."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.BinaryReader&gt;</ph> object then sets the file pointer back to the origin and reads out the specified content.","pos":[1157,1280],"source":" The <xref:System.IO.BinaryReader> object then sets the file pointer back to the origin and reads out the specified content."},{"pos":[1288,1629],"content":"[!NOTE]\nIf *Test.data* already exists in the current directory, an <xref:System.IO.IOException> exception is thrown. Use the file mode option <xref:System.IO.FileMode.Create?displayProperty=nameWithType> rather than <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> to always create a new file without throwing an exception.","leadings":["","> "],"nodes":[{"content":"If *Test.data* already exists in the current directory, an <xref:System.IO.IOException> exception is thrown. Use the file mode option <xref:System.IO.FileMode.Create?displayProperty=nameWithType> rather than <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> to always create a new file without throwing an exception.","pos":[8,339],"nodes":[{"content":"If <bpt id=\"p1\">*</bpt>Test.data<ept id=\"p1\">*</ept> already exists in the current directory, an <ph id=\"ph1\">&lt;xref:System.IO.IOException&gt;</ph> exception is thrown.","pos":[0,108],"source":"If *Test.data* already exists in the current directory, an <xref:System.IO.IOException> exception is thrown."},{"content":"Use the file mode option <ph id=\"ph1\">&lt;xref:System.IO.FileMode.Create?displayProperty=nameWithType&gt;</ph> rather than <ph id=\"ph2\">&lt;xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType&gt;</ph> to always create a new file without throwing an exception.","pos":[109,331],"source":" Use the file mode option <xref:System.IO.FileMode.Create?displayProperty=nameWithType> rather than <xref:System.IO.FileMode.CreateNew?displayProperty=nameWithType> to always create a new file without throwing an exception."}]}]},{"pos":[1638,1645],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1957,1965],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2170,2280],"content":"<bpt id=\"p1\">[</bpt>How to: Enumerate directories and files<ept id=\"p1\">](../../../docs/standard/io/how-to-enumerate-directories-and-files.md)</ept>","source":"[How to: Enumerate directories and files](../../../docs/standard/io/how-to-enumerate-directories-and-files.md)"},{"pos":[2285,2391],"content":"<bpt id=\"p1\">[</bpt>How to: Open and append to a log file<ept id=\"p1\">](../../../docs/standard/io/how-to-open-and-append-to-a-log-file.md)</ept>","source":"[How to: Open and append to a log file](../../../docs/standard/io/how-to-open-and-append-to-a-log-file.md)"},{"pos":[2396,2486],"content":"<bpt id=\"p1\">[</bpt>How to: Read text from a file<ept id=\"p1\">](../../../docs/standard/io/how-to-read-text-from-a-file.md)</ept>","source":"[How to: Read text from a file](../../../docs/standard/io/how-to-read-text-from-a-file.md)"},{"pos":[2491,2579],"content":"<bpt id=\"p1\">[</bpt>How to: Write text to a file<ept id=\"p1\">](../../../docs/standard/io/how-to-write-text-to-a-file.md)</ept>","source":"[How to: Write text to a file](../../../docs/standard/io/how-to-write-text-to-a-file.md)"},{"pos":[2584,2690],"content":"<bpt id=\"p1\">[</bpt>How to: Read characters from a string<ept id=\"p1\">](../../../docs/standard/io/how-to-read-characters-from-a-string.md)</ept>","source":"[How to: Read characters from a string](../../../docs/standard/io/how-to-read-characters-from-a-string.md)"},{"pos":[2695,2799],"content":"<bpt id=\"p1\">[</bpt>How to: Write characters to a string<ept id=\"p1\">](../../../docs/standard/io/how-to-write-characters-to-a-string.md)</ept>","source":"[How to: Write characters to a string](../../../docs/standard/io/how-to-write-characters-to-a-string.md)"},{"pos":[2804,2861],"content":"<bpt id=\"p1\">[</bpt>File and stream I/O<ept id=\"p1\">](../../../docs/standard/io/index.md)</ept>","source":"[File and stream I/O](../../../docs/standard/io/index.md)"}]}