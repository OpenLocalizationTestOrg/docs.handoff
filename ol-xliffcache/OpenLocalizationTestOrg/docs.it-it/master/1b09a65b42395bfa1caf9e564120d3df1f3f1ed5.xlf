<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="numbers-in-csharp-local.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b09a65b42395bfa1caf9e564120d3df1f3f1ed5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\intro-to-csharp\numbers-in-csharp-local.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c002d3c40c3b0ff1c3f0515d72a3a9c0fa42c13e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6f6fcf1eac0c45cbbe1eaae48bba928b3dcb529</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Numbers in C# - Introduction to C# tutorial</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn C# by exploring numeric types, their properties and methods.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Manipulate integral and floating point numbers in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you about the numeric types in C# interactively.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You'll write small amounts of code, then you'll compile and run that code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The tutorial contains a series of lessons that explore numbers and math operations in C#.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These lessons teach you the fundamentals of the C# language.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This tutorial expects you to have a machine you can use for development.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The .NET topic <bpt id="p1">[</bpt>Get Started in 10 minutes<ept id="p1">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A quick overview of the commands you'll use is in the <bpt id="p1">[</bpt>Become familiar with the development tools<ept id="p1">](local-environment.md)</ept> with links to more details.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Explore integer math</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a directory named <bpt id="p1">**</bpt>numbers-quickstart<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Make that the current directory and run <ph id="ph1">`dotnet new console -n NumbersInCSharp -o .`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> in your favorite editor, and replace the line <ph id="ph1">`Console.WriteLine("Hello World!");`</ph> with the following:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Run this code by typing <ph id="ph1">`dotnet run`</ph> in your command window.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You've just seen one of the fundamental math operations with integers.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`int`</ph> type represents an <bpt id="p1">**</bpt>integer<ept id="p1">**</ept>, a positive or negative whole number.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You use the <ph id="ph1">`+`</ph> symbol for addition.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Other common mathematical operations for integers include:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-`</ph> for subtraction</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`*`</ph> for multiplication</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`/`</ph> for division</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Start by exploring those different operations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add these lines after the line that writes the value of <ph id="ph1">`c`</ph>:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Run this code by typing <ph id="ph1">`dotnet run`</ph> in your command window.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Try <ph id="ph1">`c = a + b - 12 * 17;`</ph> for example.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Mixing variables and constant numbers is allowed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As you explore C# (or any programming language), you'll make mistakes when you write code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>compiler<ept id="p1">**</ept> will find those errors and report them to you.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When the output contains error messages, look closely at the example code and the code in your window to see what to fix.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>That exercise will help you learn the structure of C# code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You've finished the first step.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Before you start the next section, let's move the current code into a separate method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>That makes it easier to start working with a new example.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Rename your <ph id="ph1">`Main`</ph> method to <ph id="ph2">`WorkingWithIntegers`</ph> and write a new <ph id="ph3">`Main`</ph> method that calls <ph id="ph4">`WorkingWithIntegers`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you have finished, your code should look like this:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Explore order of operations</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Comment out the call to <ph id="ph1">`WorkingWithIntegers()`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It will make the output less cluttered as you work in this section:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`//`</ph> starts a <bpt id="p1">**</bpt>comment<ept id="p1">**</ept> in C#.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Comments are any text you want to keep in your source code but not execute as code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The compiler does not generate any executable code from comments.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Multiplication and division take precedence over addition and subtraction.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Explore that by adding the following code to your <ph id="ph1">`Main`</ph> method, and executing <ph id="ph2">`dotnet run`</ph>:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The output demonstrates that the multiplication is performed before the addition.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can force a different order of operation by adding parentheses around the operation or operations you want performed first.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Add the following lines and run again:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Explore more by combining many different operations.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Add something like the following lines at the bottom of your <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Try <ph id="ph1">`dotnet run`</ph> again.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You may have noticed an interesting behavior for integers.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you haven't seen this behavior, try the following code at the end of your <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dotnet run`</ph> again to see the results.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Before moving on, let's take all the code you've written in this section and put it in a new method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Call that new method <ph id="ph1">`OrderPrecedence`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You should end up with something like this:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Explore integer precision and limits</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>That last sample showed you that integer division truncates the result.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can get the <bpt id="p1">**</bpt>remainder<ept id="p1">**</ept> by using the <bpt id="p2">**</bpt>modulo<ept id="p2">**</ept> operator, the <ph id="ph1">`%`</ph> character.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Try the following code in your <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The C# integer type differs from mathematical integers in one other way: the <ph id="ph1">`int`</ph> type has minimum and maximum limits.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Add this code to your <ph id="ph1">`Main`</ph> method to see those limits:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If a calculation produces a value that exceeds those limits, you have an <bpt id="p1">**</bpt>underflow<ept id="p1">**</ept> or <bpt id="p2">**</bpt>overflow<ept id="p2">**</ept> condition.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The answer appears to wrap from one limit to the other.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Add these two lines to your <ph id="ph1">`Main`</ph> method to see an example:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Notice that the answer is very close to the minimum (negative) integer.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It's the same as <ph id="ph1">`min + 2`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The addition operation <bpt id="p1">**</bpt>overflowed<ept id="p1">**</ept> the allowed values for integers.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>There are other numeric types with different limits and precision that you would use when the <ph id="ph1">`int`</ph> type doesn't meet your needs.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Let's explore those next.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Once again, let's move the code you wrote in this section into a separate method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Name it <ph id="ph1">`TestLimits`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Work with the double type</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`double`</ph> numeric type represents a double-precision floating point number.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Those terms may be new to you.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>floating point<ept id="p1">**</ept> number is useful to represent non-integral numbers that may be very large or small in magnitude.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Double-precision<ept id="p1">**</ept> means that these numbers are stored using greater precision than <bpt id="p2">**</bpt>single-precision<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>On modern computers, it is more common to use double precision than single precision numbers.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Let's explore.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Add the following code and see the result:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Notice that the answer includes the decimal portion of the quotient.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Try a slightly more complicated expression with doubles:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The range of a double value is much greater than integer values.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Try the following code below what you've written so far:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>These values are printed out in scientific notation.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The number to the left of the <ph id="ph1">`E`</ph> is the significand.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The number to the right is the exponent, as a power of 10.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Just like decimal numbers in math, doubles in C# can have rounding errors.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Try this code:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You know that <ph id="ph1">`0.3`</ph> repeating is not exactly the same as <ph id="ph2">`1/3`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Challenge<ept id="p1">***</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Try other calculations with large numbers, small numbers, multiplication and division using the <ph id="ph1">`double`</ph> type.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Try more complicated calculations.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>After you've spent some time with the challenge, take the code you've written and place it in a new method.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Name that new method <ph id="ph1">`WorkWithDoubles`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Work with fixed point types</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You've seen the basic numeric types in C#: integers and doubles.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>There is one other type to learn: the <ph id="ph1">`decimal`</ph> type.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`decimal`</ph> type has a smaller range but greater precision than <ph id="ph2">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">**</bpt>fixed point<ept id="p1">**</ept> means that the decimal point (or binary point) doesn't move.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Let's take a look:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Notice that the range is smaller than the <ph id="ph1">`double`</ph> type.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can see the greater precision with the decimal type by trying the following code:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`M`</ph> suffix on the numbers is how you indicate that a constant should use the <ph id="ph2">`decimal`</ph> type.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Notice that the math using the decimal type has more digits to the right of the decimal point.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>Challenge<ept id="p1">***</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remember that the area of a circle is the radius squared multiplied by PI.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>One hint: .NET contains a constant for PI, <ph id="ph1">&lt;xref:System.Math.PI?displayProperty=nameWithType&gt;</ph> that you can use for that value.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You should get an answer between 19 and 20.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can check your answer by <bpt id="p1">[</bpt>looking at the finished sample code on GitHub<ept id="p1">](https://github.com/dotnet/samples/tree/master/csharp/numbers-quickstart/Program.cs#L104-L106)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Try some other formulas if you'd like.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You've completed the "Numbers in C#" quickstart.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You can continue with the <bpt id="p1">[</bpt>Branches and loops<ept id="p1">](branches-and-loops-local.md)</ept> quickstart in your own development environment.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can learn more about numbers in C# in the following topics:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integral Types Table<ept id="p1">](../../language-reference/keywords/integral-types-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Floating-Point Types Table<ept id="p1">](../../language-reference/keywords/floating-point-types-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Built-In Types Table<ept id="p1">](../../language-reference/keywords/built-in-types-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](../../language-reference/keywords/implicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicit Numeric Conversions Table<ept id="p1">](../../language-reference/keywords/explicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>