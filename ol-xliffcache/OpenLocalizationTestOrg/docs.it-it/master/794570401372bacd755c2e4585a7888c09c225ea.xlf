<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">794570401372bacd755c2e4585a7888c09c225ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\mpgo-exe-managed-profile-guided-optimization-tool.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">055f484b99a026d90fd4b9bf0d228eb4582ca8c0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9cdd78a8f0f4f87c891b4531df1210c30691fea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Mpgo.exe (Managed Profile Guided Optimization Tool) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Mpgo.exe (Managed Profile Guided Optimization Tool)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Managed Profile Guided Optimization Tool (Mpgo.exe) is a command-line tool that uses common end-user scenarios to optimize the native image assemblies that are created by the <bpt id="p1">[</bpt>Native Image Generator (Ngen.exe)<ept id="p1">](../../../docs/framework/tools/ngen-exe-native-image-generator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tool enables you to run training scenarios that generate profile data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Native Image Generator (Ngen.exe)<ept id="p1">](../../../docs/framework/tools/ngen-exe-native-image-generator.md)</ept> uses this data to optimize its generated native image application assemblies.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A training scenario is a trial run of an expected use of your application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Mpgo.exe is available in Visual Studio Ultimate 2012 and later versions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph>, you can also use Mpgo.exe to optimize <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Profile-guided optimization improves application startup time, memory utilization (working set size), and throughput by gathering data from training scenarios and using it to optimize the layout of native images.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you encounter performance issues with startup time and working set size for Intermediate Language (IL) assemblies, we recommend that you first use Ngen.exe to eliminate just-in-time (JIT) compilation costs and to facilitate code sharing.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you need additional improvements, you can then use Mpgo.exe to further optimize your application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use the performance data from the un-optimized native image assemblies as a baseline to evaluate the performance gains.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using Mpgo.exe may result in faster cold startup times and a smaller working set size.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Mpgo.exe adds information to IL assemblies that Ngen.exe uses to create optimized native image assemblies.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see the entry <bpt id="p1">[</bpt>Improving Launch Performance for your Desktop Applications<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=248943)</ept> in the .NET blog.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This tool is automatically installed with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7) with administrator credentials, and type the following at the command prompt.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For desktop apps:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All arguments to Mpgo.exe are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Commands are prefixed with a dash.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can use either <ph id="ph1">`–Scenario`</ph> or <ph id="ph2">`–Import`</ph> as a required command, but not both.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>None of the required parameters are used if you specify the <ph id="ph1">`–Reset`</ph> option.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Required parameter</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-Scenario`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>command<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>—or—</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-Scenario`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>packageName<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-Import`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>directory<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For desktop apps, use <ph id="ph1">`–Scenario`</ph> to specify the command to run the application you want to optimize, including any command-line arguments.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use three sets of double quotation marks around <bpt id="p1">*</bpt>command<ept id="p1">*</ept> if it specifies a path that includes spaces; for example: <ph id="ph1">`mpgo.exe -scenario """C:\My App\myapp.exe""" -assemblylist """C:\My App\myapp.exe""" -outdir "C:\optimized files"`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Do not use double quotation marks; they will not work correctly if <bpt id="p1">*</bpt>command<ept id="p1">*</ept> includes spaces.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps, use <ph id="ph2">`–Scenario`</ph> to specify the package that you want to generate profile information for.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you specify the package display name or the package family name instead of the full package name, Mpgo.exe will select the package that matches the name you provided if there is only one match.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If multiple packages match the specified name, Mpgo.exe will prompt you to choose a package.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>—or—</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`-Import`</ph> to specify that optimization data from previously optimized assemblies should be used to optimize the assemblies in <ph id="ph2">`-AssemblyList`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>directory<ept id="p1">*</ept> specifies the directory that contains the previously optimized files.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The assemblies specified in <ph id="ph1">`–AssemblyList`</ph> or <ph id="ph2">`–AssemblyListFile`</ph> are the new versions of the assemblies to be optimized using the data from the imported files.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Using optimization data from older version of assemblies enables you to optimize newer versions of assemblies without re-running the scenario.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However, if the imported and target assemblies include significantly different code, the optimization data will be ineffective.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The assembly names specified in <ph id="ph1">`–AssemblyList`</ph> or <ph id="ph2">`–AssemblyListFile`</ph> must be present in the directory specified by <ph id="ph3">`–Import`</ph><bpt id="p1">*</bpt>directory<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use three sets of double quotation marks around <bpt id="p1">*</bpt>directory<ept id="p1">*</ept> if it specifies a path that includes spaces.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You must specify either <ph id="ph1">`–Scenario`</ph> or <ph id="ph2">`–Import`</ph>, but not both parameters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-OutDir`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>directory<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The directory in which to place the optimized assemblies.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If an assembly already exists in the output directory folder, a new copy is created and an index number is appended to its name; for example: <bpt id="p1">*</bpt>assemblyname<ept id="p1">*</ept>-1.exe.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Use double quotation marks around <bpt id="p1">*</bpt>directory<ept id="p1">*</ept> if it specifies a path that contains spaces.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-AssemblyList`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>assembly1 assembly2 ...<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>—or—</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-AssemblyListFile`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>file<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A list of assemblies (including .exe and .dll files), separated by spaces, that you want collect profile information about.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can specify <ph id="ph1">`C:\Dir\*.dll`</ph> or <ph id="ph2">`*.dll`</ph> to select all the assemblies in the designated or current working directory.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See the Remarks section for more information.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>—or—</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A text file that contains the list of assemblies you want to collect profile information about, listed one assembly per line.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If an assembly name begins with a hyphen (-), use an assembly file list or rename the assembly.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-AppID`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>appId<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The ID of the application in the specified package.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you use the wildcard (<ph id="ph1">\*</ph>), Mpgo.exe will try to enumerate the AppIDs in the package and will fall back to <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>package_family_name<ept id="p1">*</ept>&gt;!App if it fails.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you specify a string that is prefixed by an exclamation point (!), Mpgo.exe will concatenate the package family name with the argument provided.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-Timeout`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>seconds<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The amount of time to allow the <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app to run before the app exits.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Optional parameter</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Instruments the assemblies for 64-bit systems.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You must specify this parameter for 64-bit assemblies, even if your assembly declares itself as 64 bit.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-ExeConfig`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>filename<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifies the configuration file that your scenario uses to provide version and loader information.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Forces the inclusion of the profile data in a binary assembly, even if it's signed.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If the assembly is signed, it must be re-signed; otherwise, the assembly will fail to load and run.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Resets the environment to make certain that an aborted profiling session doesn't affect your assemblies, and then quits.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The environment is reset by default before and after a profiling session.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-Timeout`</ph> <ph id="ph2">\&lt;</ph><bpt id="p1">*</bpt>time in seconds<ept id="p1">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Specifies the profiling duration in seconds.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Use a value that is slightly more than your observed startup times for GUI applications.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>At the end of the time-out period, the profile data is recorded although the application continues to run.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If you don't set this option, profiling will continue until application shutdown, at which time the data will be recorded.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Specifies that the instrumented native images shouldn't be removed after running the scenario.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This option is primarily used when you're getting the application that you specified for the scenario running.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It will prevent the recreation of native images for subsequent runs of Mpgo.exe.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When you have finished running your application, there may be orphaned native images in the cache if you specify this option.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In this case, run Mpgo.exe with the same scenario and assembly list and use the <ph id="ph1">`–RemoveNativeImages`</ph> parameter to remove these native images.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Cleans up from a run where <ph id="ph1">`–LeaveNativeImages`</ph> was specified.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If you specify <ph id="ph1">`-RemoveNativeImages`</ph>, Mpgo.exe ignores any arguments except <ph id="ph2">`-64bit`</ph> and <ph id="ph3">`–AssemblyList`</ph>, and exits after removing all instrumented native images.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can use both <ph id="ph1">`–AssemblyList`</ph> and <ph id="ph2">`- AssemblyListFile`</ph> multiple times on the command line.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you do not specify full path names when specifying assemblies, Mpgo.exe looks in the current directory.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If you specify an incorrect path, Mpgo.exe displays an error message but continues to generate data for other assemblies.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you specify an assembly that is not loaded during the training scenario, no training data is generated for that assembly.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If an assembly in the list is in the global assembly cache, it will not be updated to contain the profile information.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remove it from the global assembly cache to collect profile information.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The use of Ngen.exe and Mpgo.exe is recommended only for large managed applications, because the benefit of precompiled native images is typically seen only when it eliminates significant JIT compilation at run time.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Running Mpgo.exe on "Hello World" style applications that aren’t working-set intensive will not provide any benefits, and Mpgo.exe may even fail to gather profile data.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Ngen.exe and Mpgo.exe are not recommended for ASP.NET applications and Windows Communication Foundation (WCF) services.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>To Use Mpgo.exe</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Use a computer that has the Visual Studio Ultimate 2012 and your application installed.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Run Mpgo.exe as an administrator with the necessary parameters.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See the next section for sample commands.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The optimized intermediate language (IL) assemblies are created in the folder specified by the <ph id="ph1">`–OutDir`</ph> parameter (in the examples, this is the <ph id="ph2">`C:\Optimized`</ph> folder).</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Replace the IL assemblies you used for Ngen.exe  with the new IL assemblies that contain the profile information from the directory specified by <ph id="ph1">`–OutDir`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The application setup (using the images provided by Mpgo.exe) will install optimized native images.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Suggested Workflow</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Create a set of optimized IL assemblies by using Mpgo.exe with the <ph id="ph1">`–Scenario`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Check the optimized IL assemblies into source control.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In the build process, call Mpgo.exe with the <ph id="ph1">`–Import`</ph> parameter as a post-build step to generate optimized IL images to pass to Ngen.exe.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This process ensures that all assemblies have optimization data.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If you check in updated optimized assemblies (steps 1 and 2) more frequently, the performance numbers will be more consistent throughout product development.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Using Mpgo.exe from Visual Studio</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can run Mpgo.exe from Visual Studio (see the article <bpt id="p1">[</bpt>How to: Specify Build Events (C#)<ept id="p1">](http://msdn.microsoft.com/library/b4ce1ad9-5215-4b6f-b6a2-798b249aa335)</ept>) with the following restrictions:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>You cannot use quoted paths with trailing slash marks, because Visual Studio macros also use trailing slash marks by default.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>(For example, <ph id="ph1">`–OutDir "C:\Output Folder\"`</ph> is invalid.) To work around this restriction, you can escape the trailing slash.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>(For example, use <ph id="ph1">`-OutDir "$(OutDir)\"`</ph> instead.)</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>By default, Mpgo.exe is not on the Visual Studio build path.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You must either add the path to Visual Studio or specify the full path on the Mpgo command line.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You can use either the <ph id="ph1">`–Scenario`</ph> or the <ph id="ph2">`–Import`</ph> parameter in the post-build event in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>However, the typical process is to use <ph id="ph1">`–Scenario`</ph> one time from a Visual Studio developer command prompt, and then use <ph id="ph2">`–Import`</ph> to update the optimized assemblies after each build; for example:  <ph id="ph3">`"C:\Program Files\Microsoft Visual Studio 11.0\Team Tools\Performance Tools\mpgo.exe" -import "$(OutDir)tmp" -assemblylist "$(TargetPath)" -outdir "$(OutDir)\"`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following Mpgo.exe command from a Visual Studio developer command prompt optimizes a tax application:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The following Mpgo.exe command optimizes a sound application:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following Mpgo.exe command uses data from previously optimized assemblies to optimize newer versions of the assemblies:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Ngen.exe (Native Image Generator)<ept id="p1">](../../../docs/framework/tools/ngen-exe-native-image-generator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Improving Launch Performance for your Desktop Applications<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=248943)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>An Overview of Performance Improvements in .NET 4.5<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=249131)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>