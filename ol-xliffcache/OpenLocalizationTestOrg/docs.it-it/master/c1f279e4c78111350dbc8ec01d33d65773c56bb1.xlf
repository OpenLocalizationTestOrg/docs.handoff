<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1f279e4c78111350dbc8ec01d33d65773c56bb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tutorials\using-on-mac-vs-full-solution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4b42d7c3c5dda901264b538065594586889f2a2a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12140ef8e838c6e72c2488948e24042a6cd7a70d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Building a complete .NET Core solution on macOS using Visual Studio for Mac | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This topic walks you through building a .NET Core solution that includes a reusable library and unit testing.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>.NET, .NET Core, macOS, Mac</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Building a complete .NET Core solution on macOS using Visual Studio for Mac</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac provides a full-featured Integrated Development Environment (IDE) for developing .NET Core applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic walks you through building a .NET Core solution that includes a reusable library and unit testing.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This tutorial shows you how to create an application that accepts a search word and a string of text from the user, counts the number of times the search word appears in the string using a method in a class library, and returns the result to the user.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The solution also includes unit testing for the class library as an introduction to test-driven development (TDD) concepts.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you prefer to proceed through the tutorial with a complete sample, download the <bpt id="p1">[</bpt>sample solution<ept id="p1">](https://github.com/dotnet/docs/blob/master/samples/core/tutorials/using-on-mac-vs-full-solution/WordCounter)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual Studio for Mac is preview software.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As with all preview versions of Microsoft products, your feedback is highly valued.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There are a two ways you can provide feedback to the development team on Visual Studio for Mac:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In Visual Studio for Mac, select <bpt id="p1">**</bpt>Help &gt; Report a Problem<ept id="p1">**</ept> from the menu or <bpt id="p2">**</bpt>Report a Problem<ept id="p2">**</ept> from the Welcome screen, which opens a window for filing a bug report.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To make a suggestion, select <bpt id="p1">**</bpt>Help &gt; Provide a Suggestion<ept id="p1">**</ept> from the menu or <bpt id="p2">**</bpt>Provide a Suggestion<ept id="p2">**</ept> from the Welcome screen, which takes you to the <bpt id="p3">[</bpt>Visual Studio for Mac UserVoice webpage<ept id="p3">](https://visualstudio.uservoice.com/forums/563332-visual-studio-for-mac)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core and OpenSSL<ept id="p1">](https://www.microsoft.com/net/core#macos)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information on prerequisites, see the <bpt id="p1">[</bpt>Prerequisites for .NET Core on Mac<ept id="p1">](../../core/macos-prerequisites.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Getting started</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you've already installed the prerequisites and Visual Studio for Mac, skip this section and proceed to <bpt id="p1">[</bpt>Building a library<ept id="p1">](#building-a-library)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Follow these steps to install the prerequisites and Visual Studio for Mac:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Download and install <bpt id="p1">[</bpt>.NET Core and OpenSSL<ept id="p1">](https://www.microsoft.com/net/core#macos)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Download the <bpt id="p1">[</bpt>Visual Studio for Mac installer<ept id="p1">](https://www.visualstudio.com/vs/visual-studio-mac/)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Run the installer.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Read and accept the license agreement.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>During the install, you're provided the opportunity to install Xamarin, a cross-platform mobile app development technology.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Installing Xamarin and its related components is optional for .NET Core development.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For a walk-through of the Visual Studio for Mac install process, see <bpt id="p1">[</bpt>Introducing Visual Studio for Mac<ept id="p1">](https://developer.xamarin.com/guides/cross-platform/visual-studio-mac/)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the install is complete, start the Visual Studio for Mac IDE.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Building a library</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On the Welcome screen, select <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog under the <bpt id="p2">**</bpt>Multiplatform<ept id="p2">**</ept> node, select the <bpt id="p3">**</bpt>.NET Standard Library<ept id="p3">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>New project dialog</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Name the project "TextUtils" (a short name for "Text Utilities") and the solution "WordCounter".</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Leave <bpt id="p1">**</bpt>Create a project directory within the solution directory<ept id="p1">**</ept> checked.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>New project dialog</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, expand the <ph id="ph1">`TextUtils`</ph> node to reveal the class file provided by the template, <bpt id="p2">*</bpt>Class1.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Right-click the file, select <bpt id="p1">**</bpt>Rename<ept id="p1">**</ept> from the context menu, and rename the file to <bpt id="p2">*</bpt>WordCount.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Open the file and replace the contents with the following code:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Main<ept id="p2">](../../../samples/core/tutorials/using-on-mac-vs-full-solution/WordCounter/TextUtils/WordCount.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Save the file by using using any of three different methods: use the keyboard shortcut <bpt id="p1">&lt;kbd&gt;</bpt>&amp;#8984;<ept id="p1">&lt;/kbd&gt;</ept><ph id="ph1">+</ph><bpt id="p2">&lt;kbd&gt;</bpt>s<ept id="p2">&lt;/kbd&gt;</ept>, select <bpt id="p3">**</bpt>File &gt; Save<ept id="p3">**</ept> from the menu, or right-click on the file's tab and select <bpt id="p4">**</bpt>Save<ept id="p4">**</ept> from the contextual menu.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following image shows the IDE window:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>IDE window showing the TextUtils class library, the WordCount class file, the static class WordCount, and the GetWordCount method</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Errors<ept id="p1">**</ept> in the margin at the bottom of the IDE window to open the <bpt id="p2">**</bpt>Errors<ept id="p2">**</ept> panel.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Build Output<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Bottom margin of the IDE showing the Errors button</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Build &gt; Build All<ept id="p1">**</ept> from the menu.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The solution builds.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The build output panel shows that the build is successful.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Build output pane of the Errors panel displaying the Build successful message</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Creating a test project</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Unit tests provide automated software testing during your development and publishing.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The testing framework that you use in this tutorial is <bpt id="p1">[</bpt>xUnit<ept id="p1">](https://xunit.github.io/)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, right-click the <ph id="ph1">`WordCounter`</ph> solution and select <bpt id="p2">**</bpt>Add &gt; Add New Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>Tests<ept id="p2">**</ept> from the <bpt id="p3">**</bpt>.NET Core<ept id="p3">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>xUnit Test Project<ept id="p1">**</ept> followed by <bpt id="p2">**</bpt>Next<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>New Project dialog creating xUnit test project</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Name the new project "TestLibrary" and select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>New Project dialog providing project name</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In order for the test library to work with the <ph id="ph1">`WordCount`</ph> class, add a reference to the <ph id="ph2">`TextUtils`</ph> project.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, right-click <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> under <bpt id="p3">**</bpt>TestLibrary<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Edit References<ept id="p1">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Edit References<ept id="p1">**</ept> dialog, select the <bpt id="p2">**</bpt>TextUtils<ept id="p2">**</ept> project on the <bpt id="p3">**</bpt>Projects<ept id="p3">**</ept> tab. Select <bpt id="p4">**</bpt>OK<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Edit References dialog</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>TestLibrary<ept id="p1">**</ept> project, rename the <bpt id="p2">*</bpt>UnitTest1.cs<ept id="p2">*</ept> file to <bpt id="p3">*</bpt>TextUtilsTests.cs<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Open the file and replace the code with the following:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following image shows the IDE with the unit test code in place.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Pay attention to the <ph id="ph1">`Assert.NotEquals`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Initial unit test to check GetWordCount in the IDE main window</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Using TDD, it's important to make a new test fail once to confirm its testing logic is correct.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The method passes in the name "Jack" (uppercase) and a string with "Jack" and "jack" (uppercase and lowercase).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`GetWordCount`</ph> method is working properly, it returns a count of two instances of the search word.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In order to fail this test on purpose, you first implement the test asserting that two instances of the search word "Jack" aren't returned by the <ph id="ph1">`GetWordCount`</ph> method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Continue to the next step to fail the test on purpose.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Currently, Visual Studio for Mac doesn't integrate xUnit tests into its built-in test runner, so run xUnit tests in the console.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Right-click the <ph id="ph1">`TestLibrary`</ph> project, and choose <bpt id="p1">**</bpt>Tools &gt; Open in Terminal<ept id="p1">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>At the command prompt, execute <ph id="ph1">`dotnet test`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The test fails, which is the correct result.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The test method asserts that two instances of the <ph id="ph1">`inputString`</ph>, "Jack," aren't returned from the string "Jack jack" provided to the <ph id="ph2">`GetWordCount`</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Since word casing was factored out in the <ph id="ph1">`GetWordCount`</ph> method, two instances are returned.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The assertion that 2 <bpt id="p1">*</bpt>is not equal to<ept id="p1">*</ept> 2 fails.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This is the correct outcome, and the logic of our test is good.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Leave the console window open, as you prepare to modify the test for its final version in the next step.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Test failure in the console window.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Total tests: 1 Passed: 0 Failed: 1.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Test run failed.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`IgnoreCasing`</ph> test method by changing <ph id="ph2">`Assert.NotEqual`</ph> to <ph id="ph3">`Assert.Equal`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Save the file by using the keyboard shortcut <bpt id="p1">&lt;kbd&gt;</bpt>&amp;#8984;<ept id="p1">&lt;/kbd&gt;</ept><ph id="ph1">+</ph><bpt id="p2">&lt;kbd&gt;</bpt>s<ept id="p2">&lt;/kbd&gt;</ept>, <bpt id="p3">**</bpt>File &gt; Save<ept id="p3">**</ept> from the menu, or right-clicking on the file's tab and selecting <bpt id="p4">**</bpt>Save<ept id="p4">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You expect that the <ph id="ph1">`searchWord`</ph> "Jack" returns two instances with <ph id="ph2">`inputString`</ph> "Jack jack" passed into <ph id="ph3">`GetWordCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In the console window, execute <ph id="ph1">`dotnet test`</ph> again.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The test passes.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>There are two instances of "Jack" in the string "Jack jack" (ignoring casing), and the test assertion is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Test pass in the console window.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Total tests: 1 Passed: 1 Failed: 0.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Test run passed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Testing individual return values with a <ph id="ph1">`Fact`</ph> is only the beginning of what you can do with unit testing.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Another powerful technique allows you to test several values at once using a <ph id="ph1">`Theory`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Add the following method to your <ph id="ph1">`TextUtils_GetWordCountShould`</ph> class.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You have two methods in the class after you add this method:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CountInstancesCorrectly`</ph> checks that the <ph id="ph2">`GetWordCount`</ph> method counts correctly.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InlineData`</ph> provides a count, a search word, and an input string to check.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The test method runs once for each line of data.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Note once again that you're asserting a failure first by using <ph id="ph1">`Assert.NotEqual`</ph>, even when you know that the counts in the data are correct and that the values will match the counts returned by the <ph id="ph2">`GetWordCount`</ph> method.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Performing the step of failing the test on purpose might seem like a waste of time at first, but checking the logic of the test by failing it first is an important check on the logic of your tests.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Eventually, you'll probably come across a test method that passes when you expect it to fail and find a bug in the logic of the test.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It's worth the effort to take this step every time you create a test method.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Save the file and execute <ph id="ph1">`dotnet test`</ph> in the console window.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The casing test passes but the three count tests fail.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This is exactly what you expect to happen.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Test failure in the console window.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Total tests: 4 Passed: 1 Failed: 3.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Test run failed.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`CountInstancesCorrectly`</ph> test method by changing <ph id="ph2">`Assert.NotEqual`</ph> to <ph id="ph3">`Assert.Equal`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Execute <ph id="ph1">`dotnet test`</ph> again in the console window.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>All tests pass.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Test pass in the console window.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Total tests: 4 Passed: 4 Failed: 0.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Test run passed.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Adding a console app</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> sidebar, right-click the <ph id="ph1">`WordCounter`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Add a new <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> project by selecting the template from the <bpt id="p2">**</bpt>.NET Core &gt; App<ept id="p2">**</ept> templates.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Next<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Name the project <bpt id="p1">**</bpt>WordCounterApp<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to create the project in the solution.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solutions<ept id="p1">**</ept> sidebar, right-click the <bpt id="p2">**</bpt>Dependencies<ept id="p2">**</ept> node of the new <bpt id="p3">**</bpt>WordCounterApp<ept id="p3">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Edit References<ept id="p1">**</ept> dialog, check <bpt id="p2">**</bpt>TextUtils<ept id="p2">**</ept> and select <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Replace the code with the following:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Main<ept id="p2">](../../../samples/core/tutorials/using-on-mac-vs-full-solution/WordCounter/WordCounterApp/Program.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To run the app in a console window instead of the IDE, right-click the <ph id="ph1">`WordCounterApp`</ph> project, select <bpt id="p1">**</bpt>Options<ept id="p1">**</ept>, and open the <bpt id="p2">**</bpt>Default<ept id="p2">**</ept> node under <bpt id="p3">**</bpt>Configurations<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Check the box for <bpt id="p1">**</bpt>Run on external console<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Leave the <bpt id="p1">**</bpt>Pause console output<ept id="p1">**</ept> option checked.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This setting causes the app to spawn in a console window so that you can type input for the <ph id="ph1">`Console.ReadLine`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If you leave the app to run in the IDE, you can only see output of <ph id="ph1">`Console.WriteLine`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Console.ReadLine`</ph> statements do not work in the IDE's <bpt id="p1">**</bpt>Application Output<ept id="p1">**</ept> panel.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Project Options window</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Because the preview of Visual Studio for Mac cannot currently run the tests when the solution is run, you run the console app directly.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Right-click on the <ph id="ph1">`WordCounterApp`</ph> project and select <bpt id="p1">**</bpt>Run item<ept id="p1">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If you attempt to run the app with the Play button, the test runner and app fail to run.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For more information on the status of the work on this issue, see <bpt id="p1">[</bpt>xunit/xamarinstudio.xunit (#60)<ept id="p1">](https://github.com/xunit/xamarinstudio.xunit/issues/60)</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>When you run the app, provide values for the search word and input string at the prompts in the console window.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The app indicates the number of times the search word appears in the string.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Console window showing the word olives searched in the string, 'Iro ate olives by the lake, and the olives were wonderful.'</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The app responds, 'The search word olives appears 2 times.'</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The last feature to explore is debugging with Visual Studio for Mac.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Set a breakpoint on the <ph id="ph1">`Console.WriteLine`</ph> statement: Select in the left margin of line 23, and you see a red circle appear next to the line of code.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Alternatively, select anywhere on the line of code and select <bpt id="p1">**</bpt>Run &gt; Toggle Breakpoint<ept id="p1">**</ept> from the menu.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Breakpoint is set on line 23, the Console.WriteLine statement</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Right-click the <ph id="ph1">`WordCounterApp`</ph> project.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Start Debugging item<ept id="p1">**</ept> from the context menu.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>When the app runs, enter the search word "cat" and "The dog chased the cat, but the cat escaped."</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>for the string to search.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Console.WriteLine`</ph> statement is reached, program execution halts before the statement is executed.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Locals<ept id="p1">**</ept> tab, you can see the <ph id="ph1">`searchWord`</ph>, <ph id="ph2">`inputString`</ph>, <ph id="ph3">`wordCount`</ph>, and <ph id="ph4">`pluralChar`</ph> values.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Program execution stopped at the Console.WriteLine statement with the Local window showing the values immediately before the Console.WriteLine statement is executed.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Immediate<ept id="p1">**</ept> pane, type "wordCount = 999;" and press Enter.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This assigns a nonsense value of 999 to the <ph id="ph1">`wordCount`</ph> variable showing that you can replace variable values while debugging.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Our breakpoint is hit.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The wordCount is changed to a value of 999 in the Immediate window</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In the toolbar, click the <bpt id="p1">*</bpt>continue<ept id="p1">*</ept> arrow.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Look at the output in the console window.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>It reports the incorrect value of 999 that you set when you were debugging the app.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Continue button in the toolbar</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The search word count is changed to a value of 999 in the app's output</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Explore additional features of Visual Studio for Mac in an <bpt id="p1">[</bpt>Introducing Visual Studio for Mac<ept id="p1">](https://developer.xamarin.com/guides/cross-platform/visual-studio-mac/)</ept> at the Xamarin Developer's website.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>For a more in depth review of Visual Studio for Mac's features, refer to the <bpt id="p1">[</bpt>Xamarin Studio Tour<ept id="p1">](https://developer.xamarin.com/guides/cross-platform/xamarin-studio/ide-tour/)</ept> guide.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>