{"content":"---\ntitle: \"bool keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"bool_CSharpKeyword\"\n  - \"bool\"\nhelpviewer_keywords: \n  - \"bool keyword [C#]\"\nms.assetid: 551cfe35-2632-4343-af49-33ad12da08e2\n---\n# bool (C# Reference)\n\nThe `bool` keyword is an alias of <xref:System.Boolean?displayProperty=nameWithType>. It is used to declare variables to store the Boolean values: [true](true-literal.md) and [false](false-literal.md).\n\n> [!NOTE]\n> If you require a Boolean variable that can also have a value of `null`, use `bool?`. For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article.\n\n## Literals\n\nYou can assign a Boolean value to a `bool` variable. You can also assign an expression that evaluates to `bool` to a `bool` variable.\n\n[!code-csharp[csrefKeywordsTypes#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#1)]\n\nThe default value of a `bool` variable is `false`. The default value of a `bool?` variable is `null`.\n\n## Conversions\n\nIn C++, a value of type `bool` can be converted to a value of type `int`; in other words, `false` is equivalent to zero and `true` is equivalent to nonzero values. In C#, there is no conversion between the `bool` type and other types. For example, the following `if` statement is invalid in C#:\n\n[!code-csharp[csrefKeywordsTypes#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#2)]\n\nTo test a variable of the type `int`, you have to explicitly compare it to a value, such as zero, as follows:\n\n[!code-csharp[csrefKeywordsTypes#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#3)]\n\n## Example\n\nIn this example, you enter a character from the keyboard and the program checks if the input character is a letter. If it is a letter, it checks if it is lowercase or uppercase. These checks are performed with the <xref:System.Char.IsLetter%2A>, and <xref:System.Char.IsLower%2A>, both of which return the `bool` type:\n\n[!code-csharp[csrefKeywordsTypes#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csrefKeywordsTypes/CS/keywordsTypes.cs#4)]\n\n## C# language specification\n\n[!INCLUDE[CSharplangspec](~/includes/csharplangspec-md.md)]\n\n## See also\n\n- [C# Reference](../../../csharp/language-reference/index.md)\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [C# Keywords](../../../csharp/language-reference/keywords/index.md)\n- [Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)\n- [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)\n- [Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)\n","nodes":[{"pos":[4,226],"embed":true,"restype":"x-metadata","content":"title: \"bool keyword - C# Reference\"\nms.custom: seodec18\n\nms.date: 07/20/2015\nf1_keywords: \n  - \"bool_CSharpKeyword\"\n  - \"bool\"\nhelpviewer_keywords: \n  - \"bool keyword [C#]\"\nms.assetid: 551cfe35-2632-4343-af49-33ad12da08e2","nodes":[{"content":"bool keyword - C# Reference","nodes":[{"pos":[0,27],"content":"bool keyword - C# Reference","nodes":[{"content":"bool keyword - C# Reference","pos":[0,27]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[233,252],"content":"bool (C# Reference)","linkify":"bool (C# Reference)","nodes":[{"content":"bool (C# Reference)","pos":[0,19]}]},{"content":"The <ph id=\"ph1\">`bool`</ph> keyword is an alias of <ph id=\"ph2\">&lt;xref:System.Boolean?displayProperty=nameWithType&gt;</ph>.","pos":[254,339],"source":"The `bool` keyword is an alias of <xref:System.Boolean?displayProperty=nameWithType>."},{"content":"It is used to declare variables to store the Boolean values: <bpt id=\"p1\">[</bpt>true<ept id=\"p1\">](true-literal.md)</ept> and <bpt id=\"p2\">[</bpt>false<ept id=\"p2\">](false-literal.md)</ept>.","pos":[340,455],"source":" It is used to declare variables to store the Boolean values: [true](true-literal.md) and [false](false-literal.md)."},{"pos":[459,785],"content":"[!NOTE]\nIf you require a Boolean variable that can also have a value of `null`, use `bool?`. For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article.","leadings":["","> "],"nodes":[{"content":"If you require a Boolean variable that can also have a value of `null`, use `bool?`. For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article.","pos":[8,324],"nodes":[{"content":"If you require a Boolean variable that can also have a value of <ph id=\"ph1\">`null`</ph>, use <ph id=\"ph2\">`bool?`</ph>.","pos":[0,84],"source":"If you require a Boolean variable that can also have a value of `null`, use `bool?`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>The bool? type<ept id=\"p1\">](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type)</ept> section of the <bpt id=\"p2\">[</bpt>Using nullable types<ept id=\"p2\">](../../programming-guide/nullable-types/using-nullable-types.md)</ept> article.","pos":[85,316],"source":" For more information, see [The bool? type](../../programming-guide/nullable-types/using-nullable-types.md#the-bool-type) section of the [Using nullable types](../../programming-guide/nullable-types/using-nullable-types.md) article."}]}]},{"pos":[790,798],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can assign a Boolean value to a <ph id=\"ph1\">`bool`</ph> variable.","pos":[800,852],"source":"You can assign a Boolean value to a `bool` variable."},{"content":"You can also assign an expression that evaluates to <ph id=\"ph1\">`bool`</ph> to a <ph id=\"ph2\">`bool`</ph> variable.","pos":[853,933],"source":" You can also assign an expression that evaluates to `bool` to a `bool` variable."},{"content":"The default value of a <ph id=\"ph1\">`bool`</ph> variable is <ph id=\"ph2\">`false`</ph>.","pos":[1062,1112],"source":"The default value of a `bool` variable is `false`."},{"content":"The default value of a <ph id=\"ph1\">`bool?`</ph> variable is <ph id=\"ph2\">`null`</ph>.","pos":[1113,1163],"source":" The default value of a `bool?` variable is `null`."},{"pos":[1168,1179],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"content":"In C++, a value of type <ph id=\"ph1\">`bool`</ph> can be converted to a value of type <ph id=\"ph2\">`int`</ph>; in other words, <ph id=\"ph3\">`false`</ph> is equivalent to zero and <ph id=\"ph4\">`true`</ph> is equivalent to nonzero values.","pos":[1181,1344],"source":"In C++, a value of type `bool` can be converted to a value of type `int`; in other words, `false` is equivalent to zero and `true` is equivalent to nonzero values."},{"content":"In C#, there is no conversion between the <ph id=\"ph1\">`bool`</ph> type and other types.","pos":[1345,1415],"source":" In C#, there is no conversion between the `bool` type and other types."},{"content":"For example, the following <ph id=\"ph1\">`if`</ph> statement is invalid in C#:","pos":[1416,1475],"source":" For example, the following `if` statement is invalid in C#:"},{"pos":[1604,1713],"content":"To test a variable of the type <ph id=\"ph1\">`int`</ph>, you have to explicitly compare it to a value, such as zero, as follows:","source":"To test a variable of the type `int`, you have to explicitly compare it to a value, such as zero, as follows:"},{"pos":[1845,1852],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, you enter a character from the keyboard and the program checks if the input character is a letter.","pos":[1854,1969]},{"content":"If it is a letter, it checks if it is lowercase or uppercase.","pos":[1970,2031]},{"content":"These checks are performed with the <ph id=\"ph1\">&lt;xref:System.Char.IsLetter%2A&gt;</ph>, and <ph id=\"ph2\">&lt;xref:System.Char.IsLower%2A&gt;</ph>, both of which return the <ph id=\"ph3\">`bool`</ph> type:","pos":[2032,2172],"source":" These checks are performed with the <xref:System.Char.IsLetter%2A>, and <xref:System.Char.IsLower%2A>, both of which return the `bool` type:"},{"pos":[2304,2329],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[2395,2403],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2407,2466],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept>","source":"[C# Reference](../../../csharp/language-reference/index.md)"},{"pos":[2469,2535],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[2538,2605],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept>","source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md)"},{"pos":[2608,2699],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral Types Table](../../../csharp/language-reference/keywords/integral-types-table.md)"},{"pos":[2702,2793],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>","source":"[Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)"},{"pos":[2796,2915],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)"},{"pos":[2918,3037],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)"}]}