{"content":"---\ntitle: Work with collections - Introduction to C# tutorial\ndescription: Learn C# by exploring the List collection in this tutorial.\nms.date: 10/13/2017\nms.custom: mvc\n---\n# Learn to manage data collections using the generic list type\n\nThis introductory tutorial provides an introduction to the C# language and the basics of the <xref:System.Collections.Generic.List%601>\nclass.\n\nThis tutorial expects you to have a machine you can use for development. The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux. A quick overview of the commands you'll use is in [Become familiar with the development tools](local-environment.md), with links to more details.\n\n## A basic list example\n\nCreate a directory named **list-tutorial**. Make that the current directory and run `dotnet new console`.\n\nOpen **Program.cs** in your favorite editor, and replace the existing code with the following:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace list_tutorial\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var names = new List<string> { \"<name>\", \"Ana\", \"Felipe\" };\n            foreach (var name in names)\n            {\n                Console.WriteLine($\"Hello {name.ToUpper()}!\");\n            }\n        }\n    }\n}\n```\n\nReplace `<name>` with your name. Save **Program.cs**. Type `dotnet run` in your console window to try it.\n\nYou've just created a list of strings, added three names to that list, and printed out the names in all CAPS. You're using concepts that you've learned in earlier tutorials to loop through the list.\n\nThe code to display names makes use of the [string interpolation](../../language-reference/tokens/interpolated.md) feature.  When you precede a `string` with the `$` character, you can embed C# code in the string declaration. The actual string replaces that C# code with the value it generates. In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A> method.\n\nLet's keep exploring.\n\n## Modify list contents\n\nThe collection you created uses the <xref:System.Collections.Generic.List%601> type. This type stores sequences of elements. You specify the type of the elements between the angle brackets.\n\nOne important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements. Add this code before the closing `}` in the `Main` method:\n\n```csharp\nConsole.WriteLine();\nnames.Add(\"Maria\");\nnames.Add(\"Bill\");\nnames.Remove(\"Ana\");\nforeach (var name in names)\n{\n    Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nYou've added two more names to the end of the list. You've also removed one as well. Save the file, and type `dotnet run` to try it.\n\nThe <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well. You place the index between `[` and `]` tokens following the list name. C# uses 0 for the first index. Add this code directly below the code you just added and try it:\n\n```csharp\nConsole.WriteLine($\"My name is {names[0]}\");\nConsole.WriteLine($\"I've added {names[2]} and {names[3]} to the list\");\n```\n\nYou cannot access an index beyond the end of the list. Remember that indices start at 0, so the largest valid index is one less than the number of items in the list. You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property. Add the following code at the end of the Main method:\n\n```csharp\nConsole.WriteLine($\"The list has {names.Count} people in it\");\n ```\n\nSave the file, and type `dotnet run` again to see the results.\n\n## Search and sort lists\n\nOur samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands. To find elements in these larger collections, you need to search the list for different items. The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item. Add this code to the bottom of your `Main` method:\n\n```csharp\nvar index = names.IndexOf(\"Felipe\");\nif (index == -1)\n{\n    Console.WriteLine($\"When an item is not found, IndexOf returns {index}\");\n} else\n{\n    Console.WriteLine($\"The name {names[index]} is at index {index}\");\n}\n\nindex = names.IndexOf(\"Not Found\");\nif (index == -1)\n{\n    Console.WriteLine($\"When an item is not found, IndexOf returns {index}\");\n} else\n{\n    Console.WriteLine($\"The name {names[index]} is at index {index}\");\n\n}\n```\n\nThe items in your list can be sorted as well. The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings). Add this code to the bottom of our `Main` method:\n\n```csharp\nnames.Sort();\nforeach (var name in names)\n{\n    Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\nSave the file and type `dotnet run` to try this latest version.\n\nBefore you start the next section, let's move the current code into a separate method. That makes it easier to start working with a new example. Rename your `Main` method to `WorkingWithStrings` and write a new `Main` method that calls `WorkingWithStrings`. When you have finished, your code should look like this:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace list_tutorial\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WorkingWithStrings();\n        }\n\n        public static void WorkingWithStrings()\n        {\n            var names = new List<string> { \"<name>\", \"Ana\", \"Felipe\" };\n            foreach (var name in names)\n            {\n                Console.WriteLine($\"Hello {name.ToUpper()}!\");\n            }\n\n            Console.WriteLine();\n            names.Add(\"Maria\");\n            names.Add(\"Bill\");\n            names.Remove(\"Ana\");\n            foreach (var name in names)\n            {\n                Console.WriteLine($\"Hello {name.ToUpper()}!\");\n            }\n\n            Console.WriteLine($\"My name is {names[0]}\");\n            Console.WriteLine($\"I've added {names[2]} and {names[3]} to the list\");\n\n            Console.WriteLine($\"The list has {names.Count} people in it\");\n\n            var index = names.IndexOf(\"Felipe\");\n            Console.WriteLine($\"The name {names[index]} is at index {index}\");\n\n            var notFound = names.IndexOf(\"Not Found\");\n            Console.WriteLine($\"When an item is not found, IndexOf returns {notFound}\");\n\n            names.Sort();\n            foreach (var name in names)\n            {\n                Console.WriteLine($\"Hello {name.ToUpper()}!\");\n            }\n        }\n    }\n}\n```\n\n## Lists of other types\n\nYou've been using the `string` type in lists so far. Let's make a <xref:System.Collections.Generic.List%601> using a different type. Let's build a set of numbers.\n\nAdd the following to the bottom of your new `Main` method:\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n```\n\nThat creates a list of integers, and sets the first two integers to the value 1. These are the first two values of a *Fibonacci Sequence*, a sequence of numbers. Each next Fibonacci number is found by taking the sum of the previous two numbers. Add this code:\n\n```csharp\nvar previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\nvar previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n\nfibonacciNumbers.Add(previous + previous2);\n\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\nSave the file and type `dotnet run` to see the results.\n\n> [!TIP]\n> To concentrate on just this section, you can comment out the code that calls `WorkingWithStrings();`. Just put two `/` characters in front of the call like this:  `// WorkingWithStrings();`.\n\n## Challenge\n\nSee if you can put together some of the concepts from this and earlier lessons. Expand on what you've built so far with Fibonacci Numbers. Try to write the code to generate the first 20 numbers in the sequence. (As a hint, the 20th Fibonacci number is 6765.)\n\n## Complete challenge\n\nYou can see an example solution by [looking at the finished sample code on GitHub](https://github.com/dotnet/samples/tree/master/csharp/list-quickstart/Program.cs#L13-L23)\n\nWith each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list. The loop repeats until you've added 20 items to the list.\n\nCongratulations, you've completed the list tutorial. You can continue with\nthe [Introduction to classes](introduction-to-classes.md) tutorial in\nyour own development environment.\n\nYou can learn more about working with the `List` type in the\n[.NET Guide](../../../standard/index.md) topic on [collections](../../../standard/collections/index.md). You'll also learn about many other collection types.","nodes":[{"pos":[4,170],"embed":true,"restype":"x-metadata","content":"title: Work with collections - Introduction to C# tutorial\ndescription: Learn C# by exploring the List collection in this tutorial.\nms.date: 10/13/2017\nms.custom: mvc","nodes":[{"content":"Work with collections - Introduction to C# tutorial","nodes":[{"pos":[0,51],"content":"Work with collections - Introduction to C# tutorial","nodes":[{"content":"Work with collections - Introduction to C# tutorial","pos":[0,51]}]}],"path":["title"],"nosxs":false},{"content":"Learn C# by exploring the List collection in this tutorial.","nodes":[{"pos":[0,59],"content":"Learn C# by exploring the List collection in this tutorial.","nodes":[{"content":"Learn C# by exploring the List collection in this tutorial.","pos":[0,59]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[177,237],"content":"Learn to manage data collections using the generic list type","linkify":"Learn to manage data collections using the generic list type","nodes":[{"content":"Learn to manage data collections using the generic list type","pos":[0,60]}]},{"pos":[239,381],"content":"This introductory tutorial provides an introduction to the C# language and the basics of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.","source":"This introductory tutorial provides an introduction to the C# language and the basics of the <xref:System.Collections.Generic.List%601>\nclass."},{"content":"This tutorial expects you to have a machine you can use for development.","pos":[383,455]},{"content":"The .NET topic <bpt id=\"p1\">[</bpt>Get Started in 10 minutes<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.","pos":[456,622],"source":" The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux."},{"content":"A quick overview of the commands you'll use is in <bpt id=\"p1\">[</bpt>Become familiar with the development tools<ept id=\"p1\">](local-environment.md)</ept>, with links to more details.","pos":[623,768],"source":" A quick overview of the commands you'll use is in [Become familiar with the development tools](local-environment.md), with links to more details."},{"pos":[773,793],"content":"A basic list example","linkify":"A basic list example","nodes":[{"content":"A basic list example","pos":[0,20]}]},{"content":"Create a directory named <bpt id=\"p1\">**</bpt>list-tutorial<ept id=\"p1\">**</ept>.","pos":[795,838],"source":"Create a directory named **list-tutorial**."},{"content":"Make that the current directory and run <ph id=\"ph1\">`dotnet new console`</ph>.","pos":[839,900],"source":" Make that the current directory and run `dotnet new console`."},{"pos":[902,996],"content":"Open <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> in your favorite editor, and replace the existing code with the following:","source":"Open **Program.cs** in your favorite editor, and replace the existing code with the following:"},{"content":"Replace <ph id=\"ph1\">`&lt;name&gt;`</ph> with your name.","pos":[1383,1415],"source":"Replace `<name>` with your name."},{"content":"Save <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>.","pos":[1416,1436],"source":" Save **Program.cs**."},{"content":"Type <ph id=\"ph1\">`dotnet run`</ph> in your console window to try it.","pos":[1437,1488],"source":" Type `dotnet run` in your console window to try it."},{"content":"You've just created a list of strings, added three names to that list, and printed out the names in all CAPS.","pos":[1490,1599]},{"content":"You're using concepts that you've learned in earlier tutorials to loop through the list.","pos":[1600,1688]},{"content":"The code to display names makes use of the <bpt id=\"p1\">[</bpt>string interpolation<ept id=\"p1\">](../../language-reference/tokens/interpolated.md)</ept> feature.","pos":[1690,1813],"source":"The code to display names makes use of the [string interpolation](../../language-reference/tokens/interpolated.md) feature."},{"content":"When you precede a <ph id=\"ph1\">`string`</ph> with the <ph id=\"ph2\">`$`</ph> character, you can embed C# code in the string declaration.","pos":[1815,1915],"source":"  When you precede a `string` with the `$` character, you can embed C# code in the string declaration."},{"content":"The actual string replaces that C# code with the value it generates.","pos":[1916,1984]},{"content":"In this example, it replaces the <ph id=\"ph1\">`{name.ToUpper()}`</ph> with each name, converted to capital letters, because you called the <ph id=\"ph2\">&lt;xref:System.String.ToUpper%2A&gt;</ph> method.","pos":[1985,2145],"source":" In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A> method."},{"content":"Let's keep exploring.","pos":[2147,2168]},{"pos":[2173,2193],"content":"Modify list contents","linkify":"Modify list contents","nodes":[{"content":"Modify list contents","pos":[0,20]}]},{"content":"The collection you created uses the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> type.","pos":[2195,2279],"source":"The collection you created uses the <xref:System.Collections.Generic.List%601> type."},{"content":"This type stores sequences of elements.","pos":[2280,2319]},{"content":"You specify the type of the elements between the angle brackets.","pos":[2320,2384]},{"content":"One important aspect of this <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> type is that it can grow or shrink, enabling you to add or remove elements.","pos":[2386,2533],"source":"One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements."},{"content":"Add this code before the closing <ph id=\"ph1\">`}`</ph> in the <ph id=\"ph2\">`Main`</ph> method:","pos":[2534,2592],"source":" Add this code before the closing `}` in the `Main` method:"},{"content":"You've added two more names to the end of the list.","pos":[2773,2824]},{"content":"You've also removed one as well.","pos":[2825,2857]},{"content":"Save the file, and type <ph id=\"ph1\">`dotnet run`</ph> to try it.","pos":[2858,2905],"source":" Save the file, and type `dotnet run` to try it."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> enables you to reference individual items by <bpt id=\"p1\">**</bpt>index<ept id=\"p1\">**</ept> as well.","pos":[2907,3017],"source":"The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well."},{"content":"You place the index between <ph id=\"ph1\">`[`</ph> and <ph id=\"ph2\">`]`</ph> tokens following the list name.","pos":[3018,3089],"source":" You place the index between `[` and `]` tokens following the list name."},{"content":"C# uses 0 for the first index.","pos":[3090,3120]},{"content":"Add this code directly below the code you just added and try it:","pos":[3121,3185]},{"content":"You cannot access an index beyond the end of the list.","pos":[3319,3373]},{"content":"Remember that indices start at 0, so the largest valid index is one less than the number of items in the list.","pos":[3374,3484]},{"content":"You can check how long the list is using the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property.","pos":[3485,3591],"source":" You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property."},{"content":"Add the following code at the end of the Main method:","pos":[3592,3645]},{"pos":[3726,3788],"content":"Save the file, and type <ph id=\"ph1\">`dotnet run`</ph> again to see the results.","source":"Save the file, and type `dotnet run` again to see the results."},{"pos":[3793,3814],"content":"Search and sort lists","linkify":"Search and sort lists","nodes":[{"content":"Search and sort lists","pos":[0,21]}]},{"content":"Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.","pos":[3816,3963]},{"content":"To find elements in these larger collections, you need to search the list for different items.","pos":[3964,4058]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method searches for an item and returns the index of the item.","pos":[4059,4179],"source":" The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item."},{"content":"Add this code to the bottom of your <ph id=\"ph1\">`Main`</ph> method:","pos":[4180,4230],"source":" Add this code to the bottom of your `Main` method:"},{"content":"The items in your list can be sorted as well.","pos":[4680,4725]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method sorts all the items in the list in their normal order (alphabetically in the case of strings).","pos":[4726,4882],"source":" The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings)."},{"content":"Add this code to the bottom of our <ph id=\"ph1\">`Main`</ph> method:","pos":[4883,4932],"source":" Add this code to the bottom of our `Main` method:"},{"pos":[5046,5109],"content":"Save the file and type <ph id=\"ph1\">`dotnet run`</ph> to try this latest version.","source":"Save the file and type `dotnet run` to try this latest version."},{"content":"Before you start the next section, let's move the current code into a separate method.","pos":[5111,5197]},{"content":"That makes it easier to start working with a new example.","pos":[5198,5255]},{"content":"Rename your <ph id=\"ph1\">`Main`</ph> method to <ph id=\"ph2\">`WorkingWithStrings`</ph> and write a new <ph id=\"ph3\">`Main`</ph> method that calls <ph id=\"ph4\">`WorkingWithStrings`</ph>.","pos":[5256,5368],"source":" Rename your `Main` method to `WorkingWithStrings` and write a new `Main` method that calls `WorkingWithStrings`."},{"content":"When you have finished, your code should look like this:","pos":[5369,5425]},{"pos":[6829,6849],"content":"Lists of other types","linkify":"Lists of other types","nodes":[{"content":"Lists of other types","pos":[0,20]}]},{"content":"You've been using the <ph id=\"ph1\">`string`</ph> type in lists so far.","pos":[6851,6903],"source":"You've been using the `string` type in lists so far."},{"content":"Let's make a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> using a different type.","pos":[6904,6983],"source":" Let's make a <xref:System.Collections.Generic.List%601> using a different type."},{"content":"Let's build a set of numbers.","pos":[6984,7013]},{"pos":[7015,7073],"content":"Add the following to the bottom of your new <ph id=\"ph1\">`Main`</ph> method:","source":"Add the following to the bottom of your new `Main` method:"},{"content":"That creates a list of integers, and sets the first two integers to the value 1.","pos":[7135,7215]},{"content":"These are the first two values of a <bpt id=\"p1\">*</bpt>Fibonacci Sequence<ept id=\"p1\">*</ept>, a sequence of numbers.","pos":[7216,7296],"source":" These are the first two values of a *Fibonacci Sequence*, a sequence of numbers."},{"content":"Each next Fibonacci number is found by taking the sum of the previous two numbers.","pos":[7297,7379]},{"content":"Add this code:","pos":[7380,7394]},{"pos":[7647,7702],"content":"Save the file and type <ph id=\"ph1\">`dotnet run`</ph> to see the results.","source":"Save the file and type `dotnet run` to see the results."},{"pos":[7706,7905],"content":"[!TIP]\nTo concentrate on just this section, you can comment out the code that calls `WorkingWithStrings();`. Just put two `/` characters in front of the call like this:  `// WorkingWithStrings();`.","leadings":["","> "],"nodes":[{"content":"To concentrate on just this section, you can comment out the code that calls `WorkingWithStrings();`. Just put two `/` characters in front of the call like this:  `// WorkingWithStrings();`.","pos":[7,197],"nodes":[{"content":"To concentrate on just this section, you can comment out the code that calls <ph id=\"ph1\">`WorkingWithStrings();`</ph>.","pos":[0,101],"source":"To concentrate on just this section, you can comment out the code that calls `WorkingWithStrings();`."},{"content":"Just put two <ph id=\"ph1\">`/`</ph> characters in front of the call like this:  <ph id=\"ph2\">`// WorkingWithStrings();`</ph>.","pos":[102,190],"source":" Just put two `/` characters in front of the call like this:  `// WorkingWithStrings();`."}]}]},{"pos":[7910,7919],"content":"Challenge","linkify":"Challenge","nodes":[{"content":"Challenge","pos":[0,9]}]},{"content":"See if you can put together some of the concepts from this and earlier lessons.","pos":[7921,8000]},{"content":"Expand on what you've built so far with Fibonacci Numbers.","pos":[8001,8059]},{"content":"Try to write the code to generate the first 20 numbers in the sequence.","pos":[8060,8131]},{"content":"(As a hint, the 20th Fibonacci number is 6765.)","pos":[8132,8179]},{"pos":[8184,8202],"content":"Complete challenge","linkify":"Complete challenge","nodes":[{"content":"Complete challenge","pos":[0,18]}]},{"pos":[8204,8375],"content":"You can see an example solution by <bpt id=\"p1\">[</bpt>looking at the finished sample code on GitHub<ept id=\"p1\">](https://github.com/dotnet/samples/tree/master/csharp/list-quickstart/Program.cs#L13-L23)</ept>","source":"You can see an example solution by [looking at the finished sample code on GitHub](https://github.com/dotnet/samples/tree/master/csharp/list-quickstart/Program.cs#L13-L23)"},{"content":"With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.","pos":[8377,8507]},{"content":"The loop repeats until you've added 20 items to the list.","pos":[8508,8565]},{"content":"Congratulations, you've completed the list tutorial.","pos":[8567,8619]},{"content":"You can continue with the <bpt id=\"p1\">[</bpt>Introduction to classes<ept id=\"p1\">](introduction-to-classes.md)</ept> tutorial in your own development environment.","pos":[8620,8745],"source":" You can continue with\nthe [Introduction to classes](introduction-to-classes.md) tutorial in\nyour own development environment."},{"content":"You can learn more about working with the <ph id=\"ph1\">`List`</ph> type in the <bpt id=\"p1\">[</bpt>.NET Guide<ept id=\"p1\">](../../../standard/index.md)</ept> topic on <bpt id=\"p2\">[</bpt>collections<ept id=\"p2\">](../../../standard/collections/index.md)</ept>.","pos":[8747,8912],"source":"You can learn more about working with the `List` type in the\n[.NET Guide](../../../standard/index.md) topic on [collections](../../../standard/collections/index.md)."},{"content":"You'll also learn about many other collection types.","pos":[8913,8965]}]}