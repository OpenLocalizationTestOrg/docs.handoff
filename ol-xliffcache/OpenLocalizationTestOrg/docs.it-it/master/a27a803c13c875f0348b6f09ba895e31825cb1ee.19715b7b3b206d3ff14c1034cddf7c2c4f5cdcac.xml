{"content":"---\ntitle: \"Operators and Expressions in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operators [Visual Basic], operands\"\n  - \"operators [Visual Basic]\"\n  - \"operands, definition\"\n  - \"Visual Basic code, operators\"\n  - \"Visual Basic code, expressions\"\n  - \"operands\"\n  - \"expressions [Visual Basic]\"\nms.assetid: b86f3131-94ee-448f-96cd-79611e028b26\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Operators and Expressions in Visual Basic\nAn *operator* is a code element that performs an operation on one or more code elements that hold values. Value elements include variables, constants, literals, properties, returns from `Function` and `Operator` procedures, and expressions.  \n  \n An *expression* is a series of value elements combined with operators, which yields a new value. The operators act on the value elements by performing calculations, comparisons, or other operations.  \n  \n## Types of Operators  \n [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] provides the following types of operators:  \n  \n-   [Arithmetic Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md) perform familiar calculations on numeric values, including shifting their bit patterns.  \n  \n-   [Comparison Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md) compare two expressions and return a `Boolean` value representing the result of the comparison.  \n  \n-   [Concatenation Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md) join multiple strings into a single string.  \n  \n-   [Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md) combine `Boolean` or numeric values and return a result of the same data type as the values.  \n  \n The value elements that are combined with an operator are called *operands* of that operator. Operators combined with value elements form expressions, except for the assignment operator, which forms a *statement*. For more information, see [Statements](../../../../visual-basic/programming-guide/language-features/statements.md).  \n  \n## Evaluation of Expressions  \n The end result of an expression represents a value, which is typically of a familiar data type such as `Boolean`, `String`, or a numeric type.  \n  \n The following are examples of expressions.  \n  \n `5 + 4`  \n  \n `' The preceding expression evaluates to 9.`  \n  \n `15 * System.Math.Sqrt(9) + x`  \n  \n `' The preceding expression evaluates to 45 plus the value of x.`  \n  \n `\"Concat\" & \"ena\" & \"tion\"`  \n  \n `' The preceding expression evaluates to \"Concatenation\".`  \n  \n `763 < 23`  \n  \n `' The preceding expression evaluates to False.`  \n  \n Several operators can perform actions in a single expression or statement, as the following example illustrates.  \n  \n [!code-vb[VbVbalrOperators#56](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/index_1.vb)]  \n  \n In the preceding example, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs the operations in the expression on the right side of the assignment operator (`=`), then assigns the resulting value to the variable `x` on the left. There is no practical limit to the number of operators that can be combined into an expression, but an understanding of [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md) is necessary to ensure that you get the results you expect.  \n  \n For more information and examples, see [Operator Overloading in Visual Basic 2005](http://go.microsoft.com/fwlink/?LinkId=101703).  \n  \n## See Also  \n [Operators](../../../../visual-basic/language-reference/operators/index.md)   \n [Efficient Combination of Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)   \n [Statements](../../../../visual-basic/language-reference/statements/index.md)","nodes":[{"pos":[4,777],"embed":true,"restype":"x-metadata","content":"title: \"Operators and Expressions in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"operators [Visual Basic], operands\"\n  - \"operators [Visual Basic]\"\n  - \"operands, definition\"\n  - \"Visual Basic code, operators\"\n  - \"Visual Basic code, expressions\"\n  - \"operands\"\n  - \"expressions [Visual Basic]\"\nms.assetid: b86f3131-94ee-448f-96cd-79611e028b26\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Operators and Expressions in Visual Basic | Microsoft Docs","nodes":[{"pos":[0,58],"content":"Operators and Expressions in Visual Basic | Microsoft Docs","nodes":[{"content":"Operators and Expressions in Visual Basic | Microsoft Docs","pos":[0,58]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[784,825],"content":"Operators and Expressions in Visual Basic","linkify":"Operators and Expressions in Visual Basic","nodes":[{"content":"Operators and Expressions in Visual Basic","pos":[0,41]}]},{"content":"An <bpt id=\"p1\">*</bpt>operator<ept id=\"p1\">*</ept> is a code element that performs an operation on one or more code elements that hold values.","pos":[826,931],"source":"An *operator* is a code element that performs an operation on one or more code elements that hold values."},{"content":"Value elements include variables, constants, literals, properties, returns from <ph id=\"ph1\">`Function`</ph> and <ph id=\"ph2\">`Operator`</ph> procedures, and expressions.","pos":[932,1066],"source":" Value elements include variables, constants, literals, properties, returns from `Function` and `Operator` procedures, and expressions."},{"content":"An <bpt id=\"p1\">*</bpt>expression<ept id=\"p1\">*</ept> is a series of value elements combined with operators, which yields a new value.","pos":[1073,1169],"source":"An *expression* is a series of value elements combined with operators, which yields a new value."},{"content":"The operators act on the value elements by performing calculations, comparisons, or other operations.","pos":[1170,1271]},{"pos":[1280,1298],"content":"Types of Operators","linkify":"Types of Operators","nodes":[{"content":"Types of Operators","pos":[0,18]}]},{"pos":[1395,1437],"content":"provides the following types of operators:"},{"pos":[1447,1669],"content":"<bpt id=\"p1\">[</bpt>Arithmetic Operators<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept> perform familiar calculations on numeric values, including shifting their bit patterns.","source":"[Arithmetic Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md) perform familiar calculations on numeric values, including shifting their bit patterns."},{"pos":[1679,1909],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept> compare two expressions and return a <ph id=\"ph1\">`Boolean`</ph> value representing the result of the comparison.","source":"[Comparison Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md) compare two expressions and return a `Boolean` value representing the result of the comparison."},{"pos":[1919,2103],"content":"<bpt id=\"p1\">[</bpt>Concatenation Operators<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept> join multiple strings into a single string.","source":"[Concatenation Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md) join multiple strings into a single string."},{"pos":[2113,2374],"content":"<bpt id=\"p1\">[</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept> combine <ph id=\"ph1\">`Boolean`</ph> or numeric values and return a result of the same data type as the values.","source":"[Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md) combine `Boolean` or numeric values and return a result of the same data type as the values."},{"content":"The value elements that are combined with an operator are called <bpt id=\"p1\">*</bpt>operands<ept id=\"p1\">*</ept> of that operator.","pos":[2381,2474],"source":"The value elements that are combined with an operator are called *operands* of that operator."},{"content":"Operators combined with value elements form expressions, except for the assignment operator, which forms a <bpt id=\"p1\">*</bpt>statement<ept id=\"p1\">*</ept>.","pos":[2475,2594],"source":" Operators combined with value elements form expressions, except for the assignment operator, which forms a *statement*."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/statements.md)</ept>.","pos":[2595,2710],"source":" For more information, see [Statements](../../../../visual-basic/programming-guide/language-features/statements.md)."},{"pos":[2719,2744],"content":"Evaluation of Expressions","linkify":"Evaluation of Expressions","nodes":[{"content":"Evaluation of Expressions","pos":[0,25]}]},{"pos":[2748,2890],"content":"The end result of an expression represents a value, which is typically of a familiar data type such as <ph id=\"ph1\">`Boolean`</ph>, <ph id=\"ph2\">`String`</ph>, or a numeric type.","source":"The end result of an expression represents a value, which is typically of a familiar data type such as `Boolean`, `String`, or a numeric type."},{"content":"The following are examples of expressions.","pos":[2897,2939]},{"content":"Several operators can perform actions in a single expression or statement, as the following example illustrates.","pos":[3291,3403]},{"content":"In the preceding example, <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> performs the operations in the expression on the right side of the assignment operator (<ph id=\"ph2\">`=`</ph>), then assigns the resulting value to the variable <ph id=\"ph3\">`x`</ph> on the left.","pos":[3538,3816],"source":"In the preceding example, [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] performs the operations in the expression on the right side of the assignment operator (`=`), then assigns the resulting value to the variable `x` on the left."},{"content":"There is no practical limit to the number of operators that can be combined into an expression, but an understanding of <bpt id=\"p1\">[</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept> is necessary to ensure that you get the results you expect.","pos":[3817,4112],"source":" There is no practical limit to the number of operators that can be combined into an expression, but an understanding of [Operator Precedence in Visual Basic](../../../../visual-basic/language-reference/operators/operator-precedence.md) is necessary to ensure that you get the results you expect."},{"pos":[4119,4249],"content":"For more information and examples, see <bpt id=\"p1\">[</bpt>Operator Overloading in Visual Basic 2005<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=101703)</ept>.","source":"For more information and examples, see [Operator Overloading in Visual Basic 2005](http://go.microsoft.com/fwlink/?LinkId=101703)."},{"pos":[4258,4266],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Operators<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4270,4346],"source":"[Operators](../../../../visual-basic/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Efficient Combination of Operators<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[4350,4513],"source":"[Efficient Combination of Operators](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/efficient-combination-of-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/index.md)</ept>","pos":[4517,4594],"source":"[Statements](../../../../visual-basic/language-reference/statements/index.md)"}]}