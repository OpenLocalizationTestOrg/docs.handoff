{"content":"---\ntitle: \"Basic Serialization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"binary serialization, basic serialization\"\n  - \"serialization, basic serialization\"\nms.assetid: d899d43c-335a-433e-a589-cd187192984f\ncaps.latest.revision: 7\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Basic Serialization\nThe easiest way to make a class serializable is to mark it with the <xref:System.SerializableAttribute> as follows.  \n  \n```csharp  \n[Serializable]  \npublic class MyObject {  \n  public int n1 = 0;  \n  public int n2 = 0;  \n  public String str = null;  \n}  \n```  \n  \n The code example below shows how an instance of this class can be serialized to a file.  \n  \n```csharp  \nMyObject obj = new MyObject();  \nobj.n1 = 1;  \nobj.n2 = 24;  \nobj.str = \"Some String\";  \nIFormatter formatter = new BinaryFormatter();  \nStream stream = new FileStream(\"MyFile.bin\", FileMode.Create, FileAccess.Write, FileShare.None);  \nformatter.Serialize(stream, obj);  \nstream.Close();  \n```  \n  \n This example uses a binary formatter to do the serialization. All you need to do is create an instance of the stream and the formatter you intend to use, and then call the **Serialize** method on the formatter. The stream and the object to serialize are provided as parameters to this call. Although it is not explicitly demonstrated in this example, all member variables of a class will be serialized—even variables marked as private. In this aspect, binary serialization differs from the [XMLSerializer Class](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx), which only serializes public fields. For information on excluding member variables from binary serialization, see [Selective Serialization](../../../docs/framework/serialization/selective-serialization.md).  \n  \n Restoring the object back to its former state is just as easy. First, create a stream for reading and a <xref:System.Runtime.Serialization.Formatter>, and then instruct the formatter to deserialize the object. The code example below shows how this is done.  \n  \n```csharp  \nIFormatter formatter = new BinaryFormatter();  \nStream stream = new FileStream(\"MyFile.bin\", FileMode.Open, FileAccess.Read, FileShare.Read);  \nMyObject obj = (MyObject) formatter.Deserialize(stream);  \nstream.Close();  \n  \n// Here's the proof.  \nConsole.WriteLine(\"n1: {0}\", obj.n1);  \nConsole.WriteLine(\"n2: {0}\", obj.n2);  \nConsole.WriteLine(\"str: {0}\", obj.str);  \n```  \n  \n The <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> used above is very efficient and produces a compact byte stream. All objects serialized with this formatter can also be deserialized with it, which makes it an ideal tool for serializing objects that will be deserialized on the .NET Framework. It is important to note that constructors are not called when an object is deserialized. This constraint is placed on deserialization for performance reasons. However, this violates some of the usual contracts the runtime makes with the object writer, and developers should ensure that they understand the ramifications when marking an object as serializable.  \n  \n If portability is a requirement, use the <xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter> instead. Simply replace the **BinaryFormatter** in the code above with **SoapFormatter,** and call **Serialize** and **Deserialize** as before. This formatter produces the following output for the example used above.  \n  \n```  \n<SOAP-ENV:Envelope  \n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"   \n  xmlns:SOAP- ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"  \n  xmlns:SOAP- ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"  \n  SOAP-ENV:encodingStyle=  \n  \"http://schemas.microsoft.com/soap/encoding/clr/1.0\"  \n  \"http://schemas.xmlsoap.org/soap/encoding/\"  \n  xmlns:a1=\"http://schemas.microsoft.com/clr/assem/ToFile\">  \n  \n  <SOAP-ENV:Body>  \n    <a1:MyObject id=\"ref-1\">  \n      <n1>1</n1>  \n      <n2>24</n2>  \n      <str id=\"ref-3\">Some String</str>  \n    </a1:MyObject>  \n  </SOAP-ENV:Body>  \n</SOAP-ENV:Envelope>  \n```  \n  \n It is important to note that the **Serializable** attribute cannot be inherited. If you derive a new class from `MyObject`, the new class must be marked with the attribute as well, or it cannot be serialized. For example, when you attempt to serialize an instance of the class below, you will get a <xref:System.Runtime.Serialization.SerializationException> informing you that the `MyStuff` type is not marked as serializable.  \n  \n```csharp  \npublic class MyStuff : MyObject   \n{  \n  public int n3;  \n}  \n```  \n  \n Using the **Serializable** attribute is convenient, but it has limitations as demonstrated above. Refer to the [Serialization Guidelines](../../../docs/framework/serialization/serialization-guidelines.md) for information about when you should mark a class for serialization; serialization cannot be added to a class after it has been compiled.  \n  \n## See Also  \n [Binary Serialization](../../../docs/framework/serialization/binary-serialization.md)   \n [XML and SOAP Serialization](../../../docs/framework/serialization/xml-and-soap-serialization.md)","nodes":[{"pos":[4,474],"nodes":[{"content":"Basic Serialization | Microsoft Docs","nodes":[{"pos":[0,36],"content":"Basic Serialization | Microsoft Docs","nodes":[{"content":"Basic Serialization | Microsoft Docs","pos":[0,36]}]}],"pos":[6,45],"yaml":true}],"content":"title: \"Basic Serialization | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"binary serialization, basic serialization\"\n  - \"serialization, basic serialization\"\nms.assetid: d899d43c-335a-433e-a589-cd187192984f\ncaps.latest.revision: 7\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[481,500],"content":"Basic Serialization","linkify":"Basic Serialization","nodes":[{"content":"Basic Serialization","pos":[0,19]}]},{"content":"The easiest way to make a class serializable is to mark it with the <ph id=\"ph1\">&lt;xref:System.SerializableAttribute&gt;</ph> as follows.","pos":[501,616],"source":"The easiest way to make a class serializable is to mark it with the <xref:System.SerializableAttribute> as follows."},{"content":"The code example below shows how an instance of this class can be serialized to a file.","pos":[767,854]},{"content":"This example uses a binary formatter to do the serialization.","pos":[1172,1233]},{"content":"All you need to do is create an instance of the stream and the formatter you intend to use, and then call the <bpt id=\"p1\">**</bpt>Serialize<ept id=\"p1\">**</ept> method on the formatter.","pos":[1234,1382],"source":" All you need to do is create an instance of the stream and the formatter you intend to use, and then call the **Serialize** method on the formatter."},{"content":"The stream and the object to serialize are provided as parameters to this call.","pos":[1383,1462]},{"content":"Although it is not explicitly demonstrated in this example, all member variables of a class will be serialized—even variables marked as private.","pos":[1463,1607]},{"content":"In this aspect, binary serialization differs from the <bpt id=\"p1\">[</bpt>XMLSerializer Class<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept>, which only serializes public fields.","pos":[1608,1807],"source":" In this aspect, binary serialization differs from the [XMLSerializer Class](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx), which only serializes public fields."},{"content":"For information on excluding member variables from binary serialization, see <bpt id=\"p1\">[</bpt>Selective Serialization<ept id=\"p1\">](../../../docs/framework/serialization/selective-serialization.md)</ept>.","pos":[1808,1977],"source":" For information on excluding member variables from binary serialization, see [Selective Serialization](../../../docs/framework/serialization/selective-serialization.md)."},{"content":"Restoring the object back to its former state is just as easy.","pos":[1984,2046]},{"content":"First, create a stream for reading and a <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph>, and then instruct the formatter to deserialize the object.","pos":[2047,2193],"source":" First, create a stream for reading and a <xref:System.Runtime.Serialization.Formatter>, and then instruct the formatter to deserialize the object."},{"content":"The code example below shows how this is done.","pos":[2194,2240]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph> used above is very efficient and produces a compact byte stream.","pos":[2637,2775],"source":"The <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> used above is very efficient and produces a compact byte stream."},{"content":"All objects serialized with this formatter can also be deserialized with it, which makes it an ideal tool for serializing objects that will be deserialized on the .NET Framework.","pos":[2776,2954]},{"content":"It is important to note that constructors are not called when an object is deserialized.","pos":[2955,3043]},{"content":"This constraint is placed on deserialization for performance reasons.","pos":[3044,3113]},{"content":"However, this violates some of the usual contracts the runtime makes with the object writer, and developers should ensure that they understand the ramifications when marking an object as serializable.","pos":[3114,3314]},{"content":"If portability is a requirement, use the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph> instead.","pos":[3321,3436],"source":"If portability is a requirement, use the <xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter> instead."},{"content":"Simply replace the <bpt id=\"p1\">**</bpt>BinaryFormatter<ept id=\"p1\">**</ept> in the code above with <bpt id=\"p2\">**</bpt>SoapFormatter,<ept id=\"p2\">**</ept> and call <bpt id=\"p3\">**</bpt>Serialize<ept id=\"p3\">**</ept> and <bpt id=\"p4\">**</bpt>Deserialize<ept id=\"p4\">**</ept> as before.","pos":[3437,3571],"source":" Simply replace the **BinaryFormatter** in the code above with **SoapFormatter,** and call **Serialize** and **Deserialize** as before."},{"content":"This formatter produces the following output for the example used above.","pos":[3572,3644]},{"content":"It is important to note that the <bpt id=\"p1\">**</bpt>Serializable<ept id=\"p1\">**</ept> attribute cannot be inherited.","pos":[4318,4398],"source":"It is important to note that the **Serializable** attribute cannot be inherited."},{"content":"If you derive a new class from <ph id=\"ph1\">`MyObject`</ph>, the new class must be marked with the attribute as well, or it cannot be serialized.","pos":[4399,4526],"source":" If you derive a new class from `MyObject`, the new class must be marked with the attribute as well, or it cannot be serialized."},{"content":"For example, when you attempt to serialize an instance of the class below, you will get a <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> informing you that the <ph id=\"ph2\">`MyStuff`</ph> type is not marked as serializable.","pos":[4527,4744],"source":" For example, when you attempt to serialize an instance of the class below, you will get a <xref:System.Runtime.Serialization.SerializationException> informing you that the `MyStuff` type is not marked as serializable."},{"content":"Using the <bpt id=\"p1\">**</bpt>Serializable<ept id=\"p1\">**</ept> attribute is convenient, but it has limitations as demonstrated above.","pos":[4834,4931],"source":"Using the **Serializable** attribute is convenient, but it has limitations as demonstrated above."},{"content":"Refer to the <bpt id=\"p1\">[</bpt>Serialization Guidelines<ept id=\"p1\">](../../../docs/framework/serialization/serialization-guidelines.md)</ept> for information about when you should mark a class for serialization; serialization cannot be added to a class after it has been compiled.","pos":[4932,5177],"source":" Refer to the [Serialization Guidelines](../../../docs/framework/serialization/serialization-guidelines.md) for information about when you should mark a class for serialization; serialization cannot be added to a class after it has been compiled."},{"pos":[5186,5194],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Binary Serialization<ept id=\"p1\">](../../../docs/framework/serialization/binary-serialization.md)</ept><ph id=\"ph1\"> </ph>","pos":[5198,5284],"source":"[Binary Serialization](../../../docs/framework/serialization/binary-serialization.md) "},{"content":"<bpt id=\"p1\">[</bpt>XML and SOAP Serialization<ept id=\"p1\">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept>","pos":[5288,5385],"source":"[XML and SOAP Serialization](../../../docs/framework/serialization/xml-and-soap-serialization.md)"}]}