{"content":"---\ntitle: \"Boxing Nullable Types (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"boxing [C#], nullable types\"\n  - \"unboxing [C#], nullable types\"\n  - \"nullable types [C#], boxing and unboxing\"\nms.assetid: bdb5b626-abc0-405d-8f64-0f0a0bf883a4\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Boxing Nullable Types (C# Programming Guide)\nObjects based on nullable types are only boxed if the object is non-null. If <xref:System.Nullable%601.HasValue%2A> is `false`, the object reference is assigned to `null` instead of boxing. For example:  \n  \n```csharp  \nbool? b = null;  \nobject o = b;  \n// Now o is null.  \n```  \n  \n If the object is non-null -- if <xref:System.Nullable%601.HasValue%2A> is `true` -- then boxing occurs, but only the underlying type that the nullable object is based on is boxed. Boxing a non-null nullable value type boxes the value type itself, not the <xref:System.Nullable%601?displayProperty=fullName> that wraps the value type. For example:  \n  \n```csharp  \nbool? b = false;  \nint? i = 44;  \nobject bBoxed = b; // bBoxed contains a boxed bool.  \nobject iBoxed = i; // iBoxed contains a boxed int.  \n```  \n  \n The two boxed objects are identical to those created by boxing non-nullable types. And, just like non-nullable boxed types, they can be unboxed into nullable types, as in the following example:  \n  \n```csharp  \nbool? b2 = (bool?)bBoxed;  \nint? i2 = (int?)iBoxed;  \n```  \n  \n## Remarks  \n The behavior of nullable types when boxed provides two advantages:  \n  \n1.  Nullable objects and their boxed counterpart can be tested for null:  \n  \n    ```csharp  \n    bool? b = null;  \n    object boxedB = b;  \n    if (b == null)  \n    {  \n      // True.  \n    }  \n    if (boxedB == null)  \n    {  \n      // Also true.  \n    }  \n    ```  \n  \n2.  Boxed nullable types fully support the functionality of the underlying type:  \n  \n    ```csharp  \n    double? d = 44.4;  \n    object iBoxed = d;  \n    // Access IConvertible interface implemented by double.  \n    IConvertible ic = (IConvertible)iBoxed;  \n    int i = ic.ToInt32(null);  \n    string str = ic.ToString();  \n    ```  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Nullable Types](../../../csharp/programming-guide/nullable-types/index.md)   \n [How to: Identify a Nullable Type](../../../csharp/programming-guide/nullable-types/how-to-identify-a-nullable-type.md)","nodes":[{"pos":[4,633],"nodes":[{"content":"Boxing Nullable Types (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,61],"content":"Boxing Nullable Types (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"Boxing Nullable Types (C# Programming Guide) | Microsoft Docs","pos":[0,61]}]}],"pos":[6,70],"yaml":true}],"content":"title: \"Boxing Nullable Types (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"boxing [C#], nullable types\"\n  - \"unboxing [C#], nullable types\"\n  - \"nullable types [C#], boxing and unboxing\"\nms.assetid: bdb5b626-abc0-405d-8f64-0f0a0bf883a4\ncaps.latest.revision: 12\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[640,684],"content":"Boxing Nullable Types (C# Programming Guide)","linkify":"Boxing Nullable Types (C# Programming Guide)","nodes":[{"content":"Boxing Nullable Types (C# Programming Guide)","pos":[0,44]}]},{"content":"Objects based on nullable types are only boxed if the object is non-null.","pos":[685,758]},{"content":"If <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the object reference is assigned to <ph id=\"ph3\">`null`</ph> instead of boxing.","pos":[759,874],"source":" If <xref:System.Nullable%601.HasValue%2A> is `false`, the object reference is assigned to `null` instead of boxing."},{"content":"For example:","pos":[875,887]},{"content":"If the object is non-null -- if <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> -- then boxing occurs, but only the underlying type that the nullable object is based on is boxed.","pos":[969,1148],"source":"If the object is non-null -- if <xref:System.Nullable%601.HasValue%2A> is `true` -- then boxing occurs, but only the underlying type that the nullable object is based on is boxed."},{"content":"Boxing a non-null nullable value type boxes the value type itself, not the <ph id=\"ph1\">&lt;xref:System.Nullable%601?displayProperty=fullName&gt;</ph> that wraps the value type.","pos":[1149,1302],"source":" Boxing a non-null nullable value type boxes the value type itself, not the <xref:System.Nullable%601?displayProperty=fullName> that wraps the value type."},{"content":"For example:","pos":[1303,1315]},{"content":"The two boxed objects are identical to those created by boxing non-nullable types.","pos":[1484,1566]},{"content":"And, just like non-nullable boxed types, they can be unboxed into nullable types, as in the following example:","pos":[1567,1677]},{"pos":[1761,1768],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The behavior of nullable types when boxed provides two advantages:","pos":[1772,1838]},{"content":"Nullable objects and their boxed counterpart can be tested for null:","pos":[1848,1916]},{"content":"Boxed nullable types fully support the functionality of the underlying type:","pos":[2120,2196]},{"pos":[2457,2465],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2469,2536],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Nullable Types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2540,2616],"source":"[Nullable Types](../../../csharp/programming-guide/nullable-types/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Identify a Nullable Type<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/how-to-identify-a-nullable-type.md)</ept>","pos":[2620,2739],"source":"[How to: Identify a Nullable Type](../../../csharp/programming-guide/nullable-types/how-to-identify-a-nullable-type.md)"}]}