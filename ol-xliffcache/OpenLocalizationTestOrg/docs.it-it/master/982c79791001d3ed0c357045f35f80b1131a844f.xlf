<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">982c79791001d3ed0c357045f35f80b1131a844f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\instancing-initialization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c87186497469925aef22b2d91f585e7f373e95ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2fdaed8e505b892b57a583302b87bbb1b0a75e7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Instancing Initialization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Instancing Initialization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample extends the <bpt id="p1">[</bpt>Pooling<ept id="p1">](../../../../docs/framework/wcf/samples/pooling.md)</ept> sample by defining an interface, <ph id="ph1">`IObjectControl`</ph>, which customizes the initialization of an object by activating and deactivating it.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The client invokes methods that return the object to the pool and that do not return the object to the pool.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The setup procedure and build instructions for this sample are located at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Extensibility Points</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The first step in creating a <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> extension is to decide the extensibility point to use.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, the term <bpt id="p1">*</bpt>EndpointDispatcher<ept id="p1">*</ept> refers to a run-time component responsible for converting incoming messages into method invocations on the userâ€™s service and for converting return values from that method to an outgoing message.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service creates an EndpointDispatcher for each endpoint.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The EndpointDispatcher offers endpoint scope (for all messages received or sent by the service) extensibility using the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This class allows you to customize various properties that control the behavior of the EndpointDispatcher.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This sample focuses on the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> property that points to the object that provides the instances of the service class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>IInstanceProvider</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, the EndpointDispatcher creates instances of a service class by using an instance provider that implements the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This interface has only two methods:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph>: When a message arrives, the Dispatcher calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method to create an instance of the service class to process the message.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The frequency of the calls to this method is determined by the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example if the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName&gt;</ph>, a new instance of service class is created to process each message that arrives, so <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> is called whenever a message arrives.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>: When the service instance finishes processing the message, the EndpointDispatcher calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As in the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method, the frequency of the calls to this method is determined by the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The Object Pool</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ObjectPoolInstanceProvider`</ph> class contains the implementation for the object pool.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This class implements the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface to interact with the service model layer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the EndpointDispatcher calls the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method, instead of creating a new instance, the custom implementation looks for an existing object in an in-memory pool.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If one is available, it is returned.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`ObjectPoolInstanceProvider`</ph> checks whether the <ph id="ph2">`ActiveObjectsCount`</ph> property (number of objects returned from the pool) has reached the maximum pool size.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If not, a new instance is created and returned to the caller and <ph id="ph1">`ActiveObjectsCount`</ph> is subsequently incremented.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Otherwise an object creation request is queued for a configured period of time.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The implementation for <ph id="ph1">`GetObjectFromThePool`</ph> is shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The custom <ph id="ph1">`ReleaseInstance`</ph> implementation adds the released instance back to the pool and decrements the <ph id="ph2">`ActiveObjectsCount`</ph> value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The EndpointDispatcher can call these methods from different threads, and therefore synchronized access to the class level members in the <ph id="ph1">`ObjectPoolInstanceProvider`</ph> class is required.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReleaseInstance`</ph> method provides a <bpt id="p1">*</bpt>clean up initialization<ept id="p1">*</ept> feature.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Normally the pool maintains a minimum number of objects for the lifetime of the pool.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, there can be periods of excessive usage that require creating additional objects in the pool to reach the maximum limit specified in the configuration.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Eventually when the pool becomes less active those surplus objects can become an extra overhead.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Therefore when the <ph id="ph1">`activeObjectsCount`</ph> reaches zero an idle timer is started that triggers and performs a clean-up cycle.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>ServiceModel layer extensions are hooked up using the following behaviors:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Service Behaviors: These allow for the customization of the entire service runtime.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Endpoint Behaviors: These allow for the customization of a particular service endpoint, including the EndpointDispatcher.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Contract Behaviors: These allow for the customization of either <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime&gt;</ph> classes on the client or the service respectively.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Operation Behaviors: These allow for the customization of either <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation&gt;</ph> classes on the client or the service respectively.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For the purpose of an object pooling extension, either an endpoint behavior or a service behavior can be created.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In this example, we use a service behavior, which applies object pooling ability to every endpoint of the service.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Service behaviors are created by implementing the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There are several ways to make the ServiceModel aware of the custom behaviors:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Using a custom attribute.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Imperatively adding it to the service descriptionâ€™s behaviors collection.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Extending the configuration file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This sample uses a custom attribute.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> is constructed, it examines the attributes used in the serviceâ€™s type definition and adds the available behaviors to the service descriptionâ€™s behaviors collection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> interface has three methods: <ph id="ph2">&lt;xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A&gt;</ph><ph id="ph3">`,`</ph> <ph id="ph4">&lt;xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A&gt;</ph><ph id="ph5">`,`</ph> and <ph id="ph6">&lt;xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These methods are called by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> when the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> is being initialized.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A?displayProperty=fullName&gt;</ph> is called first; it allows the service to be inspected for inconsistencies.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A?displayProperty=fullName&gt;</ph> is called next; this method is only required in very advanced scenarios.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A?displayProperty=fullName&gt;</ph> is called last and is responsible for configuring the runtime.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following parameters are passed into <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A?displayProperty=fullName&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Description`</ph>: This parameter provides the service description for the entire service.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This can be used to inspect description data about the serviceâ€™s endpoints, contracts, bindings, and other data associated with the service.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ServiceHostBase`</ph>: This parameter provides the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> that is currently being initialized.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the custom <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> implementation, a new instance of <ph id="ph2">`ObjectPoolInstanceProvider`</ph> is instantiated and assigned to the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> property in each <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.EndpointDispatcher&gt;</ph> that is attached to the <ph id="ph5">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In addition to an <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceBehavior&gt;</ph> implementation the <ph id="ph2">`ObjectPoolingAttribute`</ph> class has several members to customize the object pool using the attribute arguments.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>These members include <ph id="ph1">`MaxSize`</ph>, <ph id="ph2">`MinSize`</ph>, <ph id="ph3">`Enabled`</ph> and <ph id="ph4">`CreationTimeout`</ph>, to match the object pooling feature set provided by .NET Enterprise Services.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The object pooling behavior can now be added to a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service by annotating the service implementation with the newly created custom <ph id="ph2">`ObjectPooling`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Hooking Activation and Deactivation</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The primary objective of object pooling is to optimize short-lived objects with relatively expensive creation and initialization.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Therefore it can give a dramatic performance boost to an application if properly used.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because the object is returned from the pool, the constructor is called only once.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, some applications require some level of control so that they can initialize and clean-up the resources used during a single context.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, an object being used for a set of calculations can reset its private fields before processing the next calculation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Enterprise Services enabled this kind of context-specific initialization by letting the object developer override <ph id="ph1">`Activate`</ph> and <ph id="ph2">`Deactivate`</ph> methods from the <ph id="ph3">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> base class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The object pool calls the <ph id="ph1">`Activate`</ph> method just before returning the object from the pool.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Deactivate`</ph> is called when the object returns back to the pool.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph> base class also has a <ph id="ph2">`boolean`</ph> property called <ph id="ph3">`CanBePooled`</ph>, which can be used to notify the pool whether the object can be pooled further.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To mimic this functionality, the sample declares a public interface (<ph id="ph1">`IObjectControl`</ph>) that has the aforementioned members.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This interface is then implemented by service classes intended to provide context specific initialization.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> implementation must be modified to meet these requirements.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Now, each time you get an object by calling the <ph id="ph1">`GetInstance`</ph> method, you must check whether the object implements <ph id="ph2">`IObjectControl.`</ph> If it does, you must call the <ph id="ph3">`Activate`</ph> method appropriately.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When returning an object to the pool, a check is required for the <ph id="ph1">`CanBePooled`</ph> property before adding the object back to the pool.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Because the service developer can decide whether an object can be pooled, the object count in the pool at a given time can go below the minimum size.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Therefore you must check whether the object count has gone below the minimum level and perform the necessary initialization in the clean-up procedure.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When you run the sample, the operation requests and responses are displayed in both the service and client console windows.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Press Enter in each console window to shut down the service and client.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To build the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>