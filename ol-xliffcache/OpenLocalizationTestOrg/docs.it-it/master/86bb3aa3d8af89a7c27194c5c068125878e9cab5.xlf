<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interop-with-other-asynchronous-patterns-and-types.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86bb3aa3d8af89a7c27194c5c068125878e9cab5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\interop-with-other-asynchronous-patterns-and-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">caa5043668816679b9fd1c08f64110c426e3de3b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5705ae725cab38b4d5a358bda5c035595da1c422</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Interop with Other Asynchronous Patterns and Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interop with Other Asynchronous Patterns and Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework 1.0 introduced the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern, otherwise known as the <bpt id="p1">[</bpt>Asynchronous Programming Model (APM)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept>, or the <ph id="ph2">`Begin/End`</ph> pattern.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The .NET Framework 2.0 added the <bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4, the <bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept> supersedes both APM and EAP, but provides the ability to easily build migration routines from the earlier patterns.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this topic:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tasks and APM<ept id="p1">](#APM)</ept> (<bpt id="p2">[</bpt>from APM to TAP<ept id="p2">](#ApmToTap)</ept> or <bpt id="p3">[</bpt>from TAP to APM<ept id="p3">](#TapToApm)</ept>)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tasks and EAP<ept id="p1">](#EAP)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tasks and wait handles<ept id="p1">](#WaitHandles)</ept> (<bpt id="p2">[</bpt>from wait handles to TAP<ept id="p2">](#WHToTap)</ept> or <bpt id="p3">[</bpt>from TAP to wait handles<ept id="p3">](#TapToWH)</ept>)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Tasks and the Asynchronous Programming Model (APM)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>From APM to TAP</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">[</bpt>Asynchronous Programming Model (APM)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept> pattern is very structured, it is quite easy to build a wrapper to expose an APM implementation as a TAP implementation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In fact, the .NET Framework, starting with <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, includes helper routines in the form of <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.FromAsync%2A&gt;</ph> method overloads to provide this translation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Consider the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class and its <ph id="ph2">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> methods, which represent the APM counterpart to the synchronous <ph id="ph4">&lt;xref:System.IO.Stream.Read%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory%601.FromAsync%2A?displayProperty=fullName&gt;</ph> method to implement a TAP wrapper for this operation as follows:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This implementation is similar to the following:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>From TAP to APM</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If your existing infrastructure expects the APM pattern, you'll also want to take a TAP implementation and use it where an APM implementation is expected.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because tasks can be composed and  the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class implements <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, you can use a straightforward helper function to do this.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code uses an extension of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class, but you can use an almost identical function for non-generic tasks.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Now, consider a case where you have the following TAP implementation:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>and you want to provide this APM implementation:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example demonstrates one migration to APM:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Tasks and the Event-based Asynchronous Pattern (EAP)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Wrapping an <bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept> implementation is more involved than wrapping an APM pattern, because the EAP pattern has more variation and less structure than the APM pattern.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To demonstrate, the following code wraps the <ph id="ph1">`DownloadStringAsync`</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DownloadStringAsync`</ph> accepts a URI, raises the <ph id="ph2">`DownloadProgressChanged`</ph> event while downloading in order to report multiple statistics on progress, and raises the <ph id="ph3">`DownloadStringCompleted`</ph> event when it's done.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The final result is a string that contains the contents of the page at the specified URI.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Tasks and Wait Handles</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>From Wait Handles to TAP</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although wait handles don't implement an asynchronous pattern, advanced developers may use the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class and the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName&gt;</ph> method for asynchronous notifications when a wait handle is set.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can wrap the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to enable a task-based alternative to any synchronous wait on a wait handle:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With this method, you can use existing <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> implementations in asynchronous methods.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, if you want to throttle the number of asynchronous operations that are executing at any particular time, you can utilize a semaphore (a <ph id="ph1">&lt;xref:System.Threading.SemaphoreSlim?displayProperty=fullName&gt;</ph> object).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can throttle to <bpt id="p1">*</bpt>N<ept id="p1">*</ept> the number of operations that run concurrently by initializing the semaphore’s count to <bpt id="p2">*</bpt>N<ept id="p2">*</ept>, waiting on the semaphore any time you want to perform an operation, and releasing the semaphore when you’re done with an operation:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can also build an asynchronous semaphore that does not rely on wait handles and instead works completely with tasks.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To do this, you can use techniques such as those discussed in <bpt id="p1">[</bpt>Consuming the Task-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/consuming-the-task-based-asynchronous-pattern.md)</ept> for building data structures on top of <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>From TAP to Wait Handles</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As previously mentioned, the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class implements <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, and that implementation exposes an <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.System%23IAsyncResult%23AsyncWaitHandle%2A&gt;</ph> property that returns a wait handle that will be set when the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task&gt;</ph> completes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can get a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> for a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> as follows:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing the Task-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/implementing-the-task-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Consuming the Task-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/consuming-the-task-based-asynchronous-pattern.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>