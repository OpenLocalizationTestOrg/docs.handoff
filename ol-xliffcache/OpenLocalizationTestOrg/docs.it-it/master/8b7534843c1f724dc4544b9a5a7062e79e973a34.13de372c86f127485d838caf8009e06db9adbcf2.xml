{"content":"---\ntitle: \"How to: Implement an Observer\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"observers [.NET Framework], observer design pattern\"\n  - \"observer design pattern [.NET Framework], implementing observers\"\nms.assetid: 8ecfa9f5-b500-473d-bcf0-5652ffb1e53d\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Implement an Observer\nThe observer design pattern requires a division between an observer, which registers for notifications, and a provider, which monitors data and sends notifications to one or more observers. This topic discusses how to create an observer. A related topic, [How to: Implement a Provider](../../../docs/standard/events/how-to-implement-a-provider.md), discusses how to create an provider.  \n  \n### To create an observer  \n  \n1.  Define the observer, which is a type that implements the <xref:System.IObserver%601?displayProperty=nameWithType> interface. For example, the following code defines a type named `TemperatureReporter` that is a constructed <xref:System.IObserver%601?displayProperty=nameWithType> implementation with a generic type argument of `Temperature`.  \n  \n     [!code-csharp[Conceptual.ObserverDesign.HowTo#8](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#8)]\n     [!code-vb[Conceptual.ObserverDesign.HowTo#8](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#8)]  \n  \n2.  If the observer can stop receiving notifications before the provider calls its <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> implementation, define a private variable that will hold the <xref:System.IDisposable> implementation returned by the provider's <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> method. You should also define a subscription method that calls the provider's <xref:System.IObservable%601.Subscribe%2A> method and stores the returned <xref:System.IDisposable> object. For example, the following code defines a private variable named `unsubscriber` and defines a `Subscribe` method that calls the provider's <xref:System.IObservable%601.Subscribe%2A> method and assigns the returned object to the `unsubscriber` variable.  \n  \n     [!code-csharp[Conceptual.ObserverDesign.HowTo#9](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#9)]\n     [!code-vb[Conceptual.ObserverDesign.HowTo#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#9)]  \n  \n3.  Define a method that enables the observer to stop receiving notifications before the provider calls its <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> implementation, if this feature is required. The following example defines an `Unsubscribe` method.  \n  \n     [!code-csharp[Conceptual.ObserverDesign.HowTo#10](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#10)]\n     [!code-vb[Conceptual.ObserverDesign.HowTo#10](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#10)]  \n  \n4.  Provide implementations of the three methods defined by the <xref:System.IObserver%601> interface: <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType>, <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType>, and <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType>. Depending on the provider and the needs of the application, the <xref:System.IObserver%601.OnError%2A> and <xref:System.IObserver%601.OnCompleted%2A> methods can be stub implementations. Note that the <xref:System.IObserver%601.OnError%2A> method should not handle the passed <xref:System.Exception> object as an exception, and the <xref:System.IObserver%601.OnCompleted%2A> method is free to call the provider's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation. The following example shows the <xref:System.IObserver%601> implementation of the `TemperatureReporter` class.  \n  \n     [!code-csharp[Conceptual.ObserverDesign.HowTo#11](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#11)]\n     [!code-vb[Conceptual.ObserverDesign.HowTo#11](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#11)]  \n  \n## Example  \n The following example contains the complete source code for the `TemperatureReporter` class, which provides the <xref:System.IObserver%601> implementation for a temperature monitoring application.  \n  \n [!code-csharp[Conceptual.ObserverDesign.HowTo#12](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#12)]\n [!code-vb[Conceptual.ObserverDesign.HowTo#12](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#12)]  \n  \n## See also\n\n- <xref:System.IObserver%601>\n- [Observer Design Pattern](../../../docs/standard/events/observer-design-pattern.md)\n- [How to: Implement a Provider](../../../docs/standard/events/how-to-implement-a-provider.md)\n- [Observer Design Pattern Best Practices](../../../docs/standard/events/observer-design-pattern-best-practices.md)\n","nodes":[{"pos":[4,369],"embed":true,"restype":"x-metadata","content":"title: \"How to: Implement an Observer\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"observers [.NET Framework], observer design pattern\"\n  - \"observer design pattern [.NET Framework], implementing observers\"\nms.assetid: 8ecfa9f5-b500-473d-bcf0-5652ffb1e53d\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Implement an Observer","nodes":[{"pos":[0,29],"content":"How to: Implement an Observer","nodes":[{"content":"How to: Implement an Observer","pos":[0,29]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[376,405],"content":"How to: Implement an Observer","linkify":"How to: Implement an Observer","nodes":[{"content":"How to: Implement an Observer","pos":[0,29]}]},{"content":"The observer design pattern requires a division between an observer, which registers for notifications, and a provider, which monitors data and sends notifications to one or more observers.","pos":[406,595]},{"content":"This topic discusses how to create an observer.","pos":[596,643]},{"content":"A related topic, <bpt id=\"p1\">[</bpt>How to: Implement a Provider<ept id=\"p1\">](../../../docs/standard/events/how-to-implement-a-provider.md)</ept>, discusses how to create an provider.","pos":[644,791],"source":" A related topic, [How to: Implement a Provider](../../../docs/standard/events/how-to-implement-a-provider.md), discusses how to create an provider."},{"pos":[801,822],"content":"To create an observer","linkify":"To create an observer","nodes":[{"content":"To create an observer","pos":[0,21]}]},{"content":"Define the observer, which is a type that implements the <ph id=\"ph1\">&lt;xref:System.IObserver%601?displayProperty=nameWithType&gt;</ph> interface.","pos":[832,956],"source":"Define the observer, which is a type that implements the <xref:System.IObserver%601?displayProperty=nameWithType> interface."},{"content":"For example, the following code defines a type named <ph id=\"ph1\">`TemperatureReporter`</ph> that is a constructed <ph id=\"ph2\">&lt;xref:System.IObserver%601?displayProperty=nameWithType&gt;</ph> implementation with a generic type argument of <ph id=\"ph3\">`Temperature`</ph>.","pos":[957,1172],"source":" For example, the following code defines a type named `TemperatureReporter` that is a constructed <xref:System.IObserver%601?displayProperty=nameWithType> implementation with a generic type argument of `Temperature`."},{"pos":[1183,1486],"content":"[!code-csharp[Conceptual.ObserverDesign.HowTo#8](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#8)]\n [!code-vb[Conceptual.ObserverDesign.HowTo#8](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#8)]","leadings":["","    "],"nodes":[]},{"content":"If the observer can stop receiving notifications before the provider calls its <ph id=\"ph1\">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType&gt;</ph> implementation, define a private variable that will hold the <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> implementation returned by the provider's <ph id=\"ph3\">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[1496,1855],"source":"If the observer can stop receiving notifications before the provider calls its <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> implementation, define a private variable that will hold the <xref:System.IDisposable> implementation returned by the provider's <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> method."},{"content":"You should also define a subscription method that calls the provider's <ph id=\"ph1\">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method and stores the returned <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph> object.","pos":[1856,2034],"source":" You should also define a subscription method that calls the provider's <xref:System.IObservable%601.Subscribe%2A> method and stores the returned <xref:System.IDisposable> object."},{"content":"For example, the following code defines a private variable named <ph id=\"ph1\">`unsubscriber`</ph> and defines a <ph id=\"ph2\">`Subscribe`</ph> method that calls the provider's <ph id=\"ph3\">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method and assigns the returned object to the <ph id=\"ph4\">`unsubscriber`</ph> variable.","pos":[2035,2287],"source":" For example, the following code defines a private variable named `unsubscriber` and defines a `Subscribe` method that calls the provider's <xref:System.IObservable%601.Subscribe%2A> method and assigns the returned object to the `unsubscriber` variable."},{"pos":[2298,2601],"content":"[!code-csharp[Conceptual.ObserverDesign.HowTo#9](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#9)]\n [!code-vb[Conceptual.ObserverDesign.HowTo#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#9)]","leadings":["","    "],"nodes":[]},{"content":"Define a method that enables the observer to stop receiving notifications before the provider calls its <ph id=\"ph1\">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType&gt;</ph> implementation, if this feature is required.","pos":[2611,2831],"source":"Define a method that enables the observer to stop receiving notifications before the provider calls its <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> implementation, if this feature is required."},{"content":"The following example defines an <ph id=\"ph1\">`Unsubscribe`</ph> method.","pos":[2832,2886],"source":" The following example defines an `Unsubscribe` method."},{"pos":[2897,3204],"content":"[!code-csharp[Conceptual.ObserverDesign.HowTo#10](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#10)]\n [!code-vb[Conceptual.ObserverDesign.HowTo#10](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#10)]","leadings":["","    "],"nodes":[]},{"content":"Provide implementations of the three methods defined by the <ph id=\"ph1\">&lt;xref:System.IObserver%601&gt;</ph> interface: <ph id=\"ph2\">&lt;xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType&gt;</ph>.","pos":[3214,3526],"source":"Provide implementations of the three methods defined by the <xref:System.IObserver%601> interface: <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType>, <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType>, and <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType>."},{"content":"Depending on the provider and the needs of the application, the <ph id=\"ph1\">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> methods can be stub implementations.","pos":[3527,3713],"source":" Depending on the provider and the needs of the application, the <xref:System.IObserver%601.OnError%2A> and <xref:System.IObserver%601.OnCompleted%2A> methods can be stub implementations."},{"content":"Note that the <ph id=\"ph1\">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph> method should not handle the passed <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph> object as an exception, and the <ph id=\"ph3\">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> method is free to call the provider's <ph id=\"ph4\">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> implementation.","pos":[3714,4021],"source":" Note that the <xref:System.IObserver%601.OnError%2A> method should not handle the passed <xref:System.Exception> object as an exception, and the <xref:System.IObserver%601.OnCompleted%2A> method is free to call the provider's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation."},{"content":"The following example shows the <ph id=\"ph1\">&lt;xref:System.IObserver%601&gt;</ph> implementation of the <ph id=\"ph2\">`TemperatureReporter`</ph> class.","pos":[4022,4132],"source":" The following example shows the <xref:System.IObserver%601> implementation of the `TemperatureReporter` class."},{"pos":[4143,4450],"content":"[!code-csharp[Conceptual.ObserverDesign.HowTo#11](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.observerdesign.howto/cs/observer.cs#11)]\n [!code-vb[Conceptual.ObserverDesign.HowTo#11](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.observerdesign.howto/vb/observer.vb#11)]","leadings":["","    "],"nodes":[]},{"pos":[4459,4466],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4470,4666],"content":"The following example contains the complete source code for the <ph id=\"ph1\">`TemperatureReporter`</ph> class, which provides the <ph id=\"ph2\">&lt;xref:System.IObserver%601&gt;</ph> implementation for a temperature monitoring application.","source":"The following example contains the complete source code for the `TemperatureReporter` class, which provides the <xref:System.IObserver%601> implementation for a temperature monitoring application."},{"pos":[4985,4993],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5027,5110],"content":"<bpt id=\"p1\">[</bpt>Observer Design Pattern<ept id=\"p1\">](../../../docs/standard/events/observer-design-pattern.md)</ept>","source":"[Observer Design Pattern](../../../docs/standard/events/observer-design-pattern.md)"},{"pos":[5113,5205],"content":"<bpt id=\"p1\">[</bpt>How to: Implement a Provider<ept id=\"p1\">](../../../docs/standard/events/how-to-implement-a-provider.md)</ept>","source":"[How to: Implement a Provider](../../../docs/standard/events/how-to-implement-a-provider.md)"},{"pos":[5208,5321],"content":"<bpt id=\"p1\">[</bpt>Observer Design Pattern Best Practices<ept id=\"p1\">](../../../docs/standard/events/observer-design-pattern-best-practices.md)</ept>","source":"[Observer Design Pattern Best Practices](../../../docs/standard/events/observer-design-pattern-best-practices.md)"}]}