{"content":"---\ntitle: \"ICorProfilerInfo::SetILInstrumentedCodeMap Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerInfo.SetILInstrumentedCodeMap\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo::SetILInstrumentedCodeMap\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo::SetILInstrumentedCodeMap method [.NET Framework profiling]\"\n  - \"SetILInstrumentedCodeMap method [.NET Framework profiling]\"\nms.assetid: bce1dcf8-b4ec-4e73-a917-f2df1ad49c8a\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# ICorProfilerInfo::SetILInstrumentedCodeMap Method\nSets a code map for the specified function using the specified Microsoft intermediate language (MSIL) map entries.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, calling `SetILInstrumentedCodeMap` on a `FunctionID` that represents a generic function in a particular application domain will affect all instances of that function in the application domain.  \n  \n## Syntax  \n  \n```  \nHRESULT SetILInstrumentedCodeMap(  \n    [in]  FunctionID functionId,  \n    [in]  BOOL       fStartJit,  \n    [in]  ULONG      cILMapEntries,  \n    [in, size_is(cILMapEntries)] COR_IL_MAP rgILMapEntries[]);  \n```  \n  \n## Parameters  \n `functionId`  \n [in] The ID of the function for which to set the code map.  \n  \n `fStartJit`  \n [in] A Boolean value that indicates whether the call to the `SetILInstrumentedCodeMap` method is the first for a particular `FunctionID`. Set `fStartJit` to `true` in the first call to `SetILInstrumentedCodeMap` for a given `FunctionID`, and to `false` thereafter.  \n  \n `cILMapEntries`  \n [in] The number of elements in the `cILMapEntries` array.  \n  \n `rgILMapEntries`  \n [in] An array of COR_IL_MAP structures, each of which specifies an MSIL offset.  \n  \n## Remarks  \n A profiler often inserts statements within the source code of a method in order to instrument that method (for example, to notify when a given source line is reached). `SetILInstrumentedCodeMap` enables a profiler to map the original MSIL instructions to their new locations. A profiler can use the [ICorProfilerInfo::GetILToNativeMapping](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getiltonativemapping-method.md) method to get the original MSIL offset for a given native offset.  \n  \n The debugger will assume that each old offset refers to an MSIL offset within the original, unmodified MSIL code, and that each new offset refers to the MSIL offset within the new, instrumented code. The map should be sorted in increasing order. For stepping to work properly, follow these guidelines:  \n  \n-   Do not reorder instrumented MSIL code.  \n  \n-   Do not remove the original MSIL code.  \n  \n-   Include entries for all the sequence points from the program database (PDB) file in the map. The map does not interpolate missing entries. So, given the following map:  \n  \n     (0 old, 0 new)  \n  \n     (5 old, 10 new)  \n  \n     (9 old, 20 new)  \n  \n    -   An old offset of 0, 1, 2, 3, or 4 will be mapped to new offset 0.  \n  \n    -   An old offset of 5, 6, 7, or 8 will be mapped to new offset 10.  \n  \n    -   An old offset of 9 or higher will be mapped to new offset 20.  \n  \n    -   A new offset of 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 will be mapped to old offset 0.  \n  \n    -   A new offset of 10, 11, 12, 13, 14, 15, 16, 17, 18, or 19 will be mapped to old offset 5.  \n  \n    -   A new offset of 20 or higher will be mapped to old offset 9.  \n  \n## Requirements  \n **Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md).  \n  \n **Header:** CorProf.idl, CorProf.h  \n  \n **Library:** CorGuids.lib  \n  \n **.NET Framework Versions:** [!INCLUDE[net_current_v11plus](../../../../includes/net-current-v11plus-md.md)]  \n  \n## See also\n\n- [ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)\n","nodes":[{"pos":[4,543],"embed":true,"restype":"x-metadata","content":"title: \"ICorProfilerInfo::SetILInstrumentedCodeMap Method\"\nms.date: \"03/30/2017\"\napi_name: \n  - \"ICorProfilerInfo.SetILInstrumentedCodeMap\"\napi_location: \n  - \"mscorwks.dll\"\napi_type: \n  - \"COM\"\nf1_keywords: \n  - \"ICorProfilerInfo::SetILInstrumentedCodeMap\"\nhelpviewer_keywords: \n  - \"ICorProfilerInfo::SetILInstrumentedCodeMap method [.NET Framework profiling]\"\n  - \"SetILInstrumentedCodeMap method [.NET Framework profiling]\"\nms.assetid: bce1dcf8-b4ec-4e73-a917-f2df1ad49c8a\ntopic_type: \n  - \"apiref\"\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"ICorProfilerInfo::SetILInstrumentedCodeMap Method","nodes":[{"pos":[0,49],"content":"ICorProfilerInfo::SetILInstrumentedCodeMap Method","nodes":[{"content":"ICorProfilerInfo::SetILInstrumentedCodeMap Method","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[550,599],"content":"ICorProfilerInfo::SetILInstrumentedCodeMap Method","linkify":"ICorProfilerInfo::SetILInstrumentedCodeMap Method","nodes":[{"content":"ICorProfilerInfo::SetILInstrumentedCodeMap Method","pos":[0,49]}]},{"content":"Sets a code map for the specified function using the specified Microsoft intermediate language (MSIL) map entries.","pos":[600,714]},{"pos":[722,960],"content":"[!NOTE]\n In the .NET Framework version 2.0, calling `SetILInstrumentedCodeMap` on a `FunctionID` that represents a generic function in a particular application domain will affect all instances of that function in the application domain.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework version 2.0, calling <ph id=\"ph1\">`SetILInstrumentedCodeMap`</ph> on a <ph id=\"ph2\">`FunctionID`</ph> that represents a generic function in a particular application domain will affect all instances of that function in the application domain.","pos":[9,236],"source":"In the .NET Framework version 2.0, calling `SetILInstrumentedCodeMap` on a `FunctionID` that represents a generic function in a particular application domain will affect all instances of that function in the application domain."}]},{"pos":[969,975],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1207,1217],"content":"Parameters","linkify":"Parameters","nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"[in] The ID of the function for which to set the code map.","pos":[1237,1295]},{"content":"[in] A Boolean value that indicates whether the call to the <ph id=\"ph1\">`SetILInstrumentedCodeMap`</ph> method is the first for a particular <ph id=\"ph2\">`FunctionID`</ph>.","pos":[1317,1454],"source":"[in] A Boolean value that indicates whether the call to the `SetILInstrumentedCodeMap` method is the first for a particular `FunctionID`."},{"content":"Set <ph id=\"ph1\">`fStartJit`</ph> to <ph id=\"ph2\">`true`</ph> in the first call to <ph id=\"ph3\">`SetILInstrumentedCodeMap`</ph> for a given <ph id=\"ph4\">`FunctionID`</ph>, and to <ph id=\"ph5\">`false`</ph> thereafter.","pos":[1455,1581],"source":" Set `fStartJit` to `true` in the first call to `SetILInstrumentedCodeMap` for a given `FunctionID`, and to `false` thereafter."},{"content":"[in] The number of elements in the <ph id=\"ph1\">`cILMapEntries`</ph> array.","pos":[1607,1664],"source":"[in] The number of elements in the `cILMapEntries` array."},{"content":"[in] An array of COR_IL_MAP structures, each of which specifies an MSIL offset.","pos":[1691,1770]},{"pos":[1779,1786],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"A profiler often inserts statements within the source code of a method in order to instrument that method (for example, to notify when a given source line is reached).","pos":[1790,1957]},{"content":"<ph id=\"ph1\">`SetILInstrumentedCodeMap`</ph> enables a profiler to map the original MSIL instructions to their new locations.","pos":[1958,2065],"source":"`SetILInstrumentedCodeMap` enables a profiler to map the original MSIL instructions to their new locations."},{"content":"A profiler can use the <bpt id=\"p1\">[</bpt>ICorProfilerInfo::GetILToNativeMapping<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getiltonativemapping-method.md)</ept> method to get the original MSIL offset for a given native offset.","pos":[2066,2295],"source":" A profiler can use the [ICorProfilerInfo::GetILToNativeMapping](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getiltonativemapping-method.md) method to get the original MSIL offset for a given native offset."},{"content":"The debugger will assume that each old offset refers to an MSIL offset within the original, unmodified MSIL code, and that each new offset refers to the MSIL offset within the new, instrumented code.","pos":[2302,2501]},{"content":"The map should be sorted in increasing order.","pos":[2502,2547]},{"content":"For stepping to work properly, follow these guidelines:","pos":[2548,2603]},{"content":"Do not reorder instrumented MSIL code.","pos":[2613,2651]},{"content":"Do not remove the original MSIL code.","pos":[2661,2698]},{"content":"Include entries for all the sequence points from the program database (PDB) file in the map.","pos":[2708,2800]},{"content":"The map does not interpolate missing entries.","pos":[2801,2846]},{"content":"So, given the following map:","pos":[2847,2875]},{"content":"(0 old, 0 new)","pos":[2886,2900]},{"content":"(5 old, 10 new)","pos":[2911,2926]},{"content":"(9 old, 20 new)","pos":[2937,2952]},{"content":"An old offset of 0, 1, 2, 3, or 4 will be mapped to new offset 0.","pos":[2966,3031]},{"content":"An old offset of 5, 6, 7, or 8 will be mapped to new offset 10.","pos":[3045,3108]},{"content":"An old offset of 9 or higher will be mapped to new offset 20.","pos":[3122,3183]},{"content":"A new offset of 0, 1, 2, 3, 4, 5, 6, 7, 8, or 9 will be mapped to old offset 0.","pos":[3197,3276]},{"content":"A new offset of 10, 11, 12, 13, 14, 15, 16, 17, 18, or 19 will be mapped to old offset 5.","pos":[3290,3379]},{"content":"A new offset of 20 or higher will be mapped to old offset 9.","pos":[3393,3453]},{"pos":[3462,3474],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[3478,3582],"content":"<bpt id=\"p1\">**</bpt>Platforms:<ept id=\"p1\">**</ept> See <bpt id=\"p2\">[</bpt>System Requirements<ept id=\"p2\">](../../../../docs/framework/get-started/system-requirements.md)</ept>.","source":"**Platforms:** See [System Requirements](../../../../docs/framework/get-started/system-requirements.md)."},{"pos":[3589,3623],"content":"<bpt id=\"p1\">**</bpt>Header:<ept id=\"p1\">**</ept> CorProf.idl, CorProf.h","source":"**Header:** CorProf.idl, CorProf.h"},{"pos":[3630,3655],"content":"<bpt id=\"p1\">**</bpt>Library:<ept id=\"p1\">**</ept> CorGuids.lib","source":"**Library:** CorGuids.lib"},{"pos":[3662,3770],"content":"<bpt id=\"p1\">**</bpt>.NET Framework Versions:<ept id=\"p1\">**</ept> <ph id=\"ph1\">[!INCLUDE[net_current_v11plus](../../../../includes/net-current-v11plus-md.md)]</ph>","source":"**.NET Framework Versions:** [!INCLUDE[net_current_v11plus](../../../../includes/net-current-v11plus-md.md)]"},{"pos":[3779,3787],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3791,3901],"content":"<bpt id=\"p1\">[</bpt>ICorProfilerInfo Interface<ept id=\"p1\">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept>","source":"[ICorProfilerInfo Interface](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)"}]}