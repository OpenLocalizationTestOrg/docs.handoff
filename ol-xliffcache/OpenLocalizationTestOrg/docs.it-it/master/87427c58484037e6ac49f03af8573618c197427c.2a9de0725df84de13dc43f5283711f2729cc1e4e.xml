{"content":"---\ntitle: \"Accessing Services Using a WCF Client | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"clients [WCF], consuming services\"\nms.assetid: d780af9f-73c5-42db-9e52-077a5e4de7fe\ncaps.latest.revision: 36\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Accessing Services Using a WCF Client\nAfter you create a service, the next step is to create a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client proxy. A client application uses the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client proxy to communicate with the service. Client applications usually import a service's metadata to generate [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client code that can be used to invoke the service.  \n  \n The basic steps for creating a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client include the following:  \n  \n1.  Compile the service code.  \n  \n2.  Generate the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client proxy.  \n  \n3.  Instantiate the WCF client proxy.  \n  \n The WCF client proxy can be generated manually by using the Service Model Metadata Utility Tool (SvcUtil.exe) for more information see, [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md). The WCF client proxy can also be generated within Visual Studio using the Add Service Reference  feature. To generate the WCF client proxy using either method the service must be running. If the service is self-hosted you must run the host. If the service is hosted in IIS/WAS you do not need to do anything else.  \n  \n## ServiceModel Metadata Utility Tool  \n The [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) is a command-line tool for generating code from metadata. The following use is an example of a basic Svcutil.exe command.  \n  \n```  \nSvcutil.exe <service's Metadata Exchange (MEX) address or HTTP GET address>   \n```  \n  \n Alternatively, you can use Svcutil.exe with Web Services Description Language (WSDL) and XML Schema definition language (XSD) files on the file system.  \n  \n```  \nSvcutil.exe <list of WSDL and XSD files on file system>  \n```  \n  \n The result is a code file that contains [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client code that the client application can use to invoke the service.  \n  \n You can also use the tool to generate configuration files.  \n  \n```  \nSvcutil.exe <file1 [,file2]>  \n```  \n  \n If only one file name is given, that is the name of the output file. If two file names are given, then the first file is an input configuration file whose contents are merged with the generated configuration and written out into the second file. [!INCLUDE[crabout](../../../includes/crabout-md.md)] configuration, see [Configuring Bindings for Services](../../../docs/framework/wcf/configuring-bindings-for-wcf-services.md).  \n  \n> [!IMPORTANT]\n>  Unsecured metadata requests pose certain risks in the same way that any unsecured network request does: If you are not certain that the endpoint you are communicating with is who it says it is, the information you retrieve might be metadata from a malicious service.  \n  \n## Add Service Reference in Visual Studio  \n With the service running, right click the project that will contain the WCF client proxy and select **Add Service Reference**. In the **Add Service Reference Dialog** type in the URL to the service you want to call and click the **Go** button. The dialog will display a list of services available at the address you specify. Double click the service to see the contracts and operations available, specify a namespace for the generated code and click the **OK** button.  \n  \n## Example  \n The following code example shows a service contract created for a service.  \n  \n```csharp  \n// Define a service contract.  \n[ServiceContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \npublic interface ICalculator  \n{  \n    [OperationContract]  \n    double Add(double n1, double n2);  \n    // Other methods are not shown here.  \n}  \n```  \n  \n```vb  \n' Define a service contract.  \n<ServiceContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")> _  \nPublic Interface ICalculator  \n    <OperationContract()>  _  \n    Function Add(ByVal n1 As Double, ByVal n2 As Double) As Double   \n    ' Other methods are not shown here.  \nEnd Interface   \n```  \n  \n The ServiceModel Metadata utility tool and Add Service Reference in Visual Studio generates the following [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client class. The class inherits from the generic <xref:System.ServiceModel.ClientBase%601> class and implements the `ICalculator` interface. The tool also generates the `ICalculator` interface (not shown here).  \n  \n```csharp  \npublic partial class CalculatorClient : System.ServiceModel.ClientBase<ICalculator>, ICalculator  \n{  \n    public CalculatorClient(){}  \n  \n    public CalculatorClient(string configurationName) :   \n            base(configurationName)  \n    {}  \n  \n    public CalculatorClient(System.ServiceModel.Binding binding) :   \n            base(binding)  \n    {}  \n  \n    public CalculatorClient(System.ServiceModel.EndpointAddress address,  \n    System.ServiceModel.Binding binding) :   \n            base(address, binding)  \n    {}  \n  \n    public double Add(double n1, double n2)  \n    {  \n        return base.InnerChannel.Add(n1, n2);  \n    }  \n}  \n  \n```  \n  \n```vb  \nPartial Public Class CalculatorClient  \n    Inherits System.ServiceModel.ClientBase(Of ICalculator)  \n    Implements ICalculator  \n  \n    Public Sub New()  \n        MyBase.New  \n    End Sub  \n  \n    Public Sub New(ByVal configurationName As String)  \n        MyBase.New(configurationName)  \n    End Sub  \n  \n    Public Sub New(ByVal binding As System.ServiceModel.Binding)  \n        MyBase.New(binding)  \n    End Sub  \n  \n    Public Sub New(ByVal address As _  \n    System.ServiceModel.EndpointAddress, _  \n    ByVal binding As System.ServiceModel.Binding)  \n        MyBase.New(address, binding)  \n    End Sub  \n  \n    Public Function Add(ByVal n1 As Double, ByVal n2 As Double) As _  \n    Double Implements ICalculator.Add  \n        Return MyBase.InnerChannel.Add(n1, n2)  \n    End Function   \nEnd Class  \n  \n```  \n  \n## Using the WCF Client  \n To use the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client, create an instance of the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client, and then call its methods, as shown in the following code.  \n  \n```csharp  \n// Create a client object with the given client endpoint configuration.  \nCalculatorClient calcClient = new CalculatorClient(\"CalculatorEndpoint\"));  \n// Call the Add service operation.  \ndouble value1 = 100.00D;  \ndouble value2 = 15.99D;  \ndouble result = calcClient.Add(value1, value2);  \nConsole.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result);  \n  \n```  \n  \n```vb  \n' Create a client object with the given client endpoint configuration.  \nDim calcClient As CalculatorClient = _  \nNew CalculatorClient(\"CalculatorEndpoint\")  \n  \n' Call the Add service operation.  \nDim value1 As Double = 100.00D  \nDim value2 As Double = 15.99D  \nDim result As Double = calcClient.Add(value1, value2)  \nConsole.WriteLine(\"Add({0},{1}) = {2}\", value1, value2, result)  \n  \n```  \n  \n## Debugging Exceptions Thrown by a Client  \n Many exceptions thrown by a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client are caused by an exception on the service. Some examples of this are:  \n  \n-   <xref:System.Net.Sockets.SocketException>: An existing connection was forcibly closed by the remote host.  \n  \n-   <xref:System.ServiceModel.CommunicationException>: The underlying connection was closed unexpectedly.  \n  \n-   <xref:System.ServiceModel.CommunicationObjectAbortedException>: The socket connection was aborted. This could be caused by an error processing your message, a receive time-out being exceeded by the remote host, or an underlying network resource issue.  \n  \n When these types of exceptions occur, the best way to solve the problem is to turn on tracing on the service side and determine what exception occurred there. [!INCLUDE[crabout](../../../includes/crabout-md.md)] tracing, see [Tracing](../../../docs/framework/wcf/diagnostics/tracing/index.md) and [Using Tracing to Troubleshoot Your Application](../../../docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).  \n  \n## See Also  \n [How to: Create a Client](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)   \n [How to: Access Services with a Duplex Contract](../../../docs/framework/wcf/feature-details/how-to-access-services-with-a-duplex-contract.md)   \n [How to: Call Service Operations Asynchronously](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)   \n [How to: Access Services with One-Way and Request-Reply Contracts](../../../docs/framework/wcf/feature-details/how-to-access-wcf-services-with-one-way-and-request-reply-contracts.md)   \n [How to: Access a WSE 3.0 Service](../../../docs/framework/wcf/feature-details/how-to-access-a-wse-3-0-service-with-a-wcf-client.md)   \n [Understanding Generated Client Code](../../../docs/framework/wcf/feature-details/understanding-generated-client-code.md)   \n [How to: Improve the Startup Time of WCF Client Applications using the XmlSerializer](../../../docs/framework/wcf/feature-details/startup-time-of-wcf-client-applications-using-the-xmlserializer.md)   \n [Specifying Client Run-Time Behavior](../../../docs/framework/wcf/specifying-client-run-time-behavior.md)   \n [Configuring Client Behaviors](../../../docs/framework/wcf/configuring-client-behaviors.md)","nodes":[{"pos":[4,454],"nodes":[{"content":"Accessing Services Using a WCF Client | Microsoft Docs","nodes":[{"pos":[0,54],"content":"Accessing Services Using a WCF Client | Microsoft Docs","nodes":[{"content":"Accessing Services Using a WCF Client | Microsoft Docs","pos":[0,54]}]}],"pos":[6,63],"yaml":true}],"content":"title: \"Accessing Services Using a WCF Client | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"clients [WCF], consuming services\"\nms.assetid: d780af9f-73c5-42db-9e52-077a5e4de7fe\ncaps.latest.revision: 36\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","yamlblock":true},{"pos":[461,498],"content":"Accessing Services Using a WCF Client","linkify":"Accessing Services Using a WCF Client","nodes":[{"content":"Accessing Services Using a WCF Client","pos":[0,37]}]},{"content":"After you create a service, the next step is to create a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client proxy.","pos":[499,622],"source":"After you create a service, the next step is to create a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client proxy."},{"content":"A client application uses the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client proxy to communicate with the service.","pos":[623,751],"source":" A client application uses the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client proxy to communicate with the service."},{"content":"Client applications usually import a service's metadata to generate <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client code that can be used to invoke the service.","pos":[752,924],"source":" Client applications usually import a service's metadata to generate [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client code that can be used to invoke the service."},{"pos":[931,1044],"content":"The basic steps for creating a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client include the following:","source":"The basic steps for creating a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client include the following:"},{"content":"Compile the service code.","pos":[1054,1079]},{"pos":[1089,1168],"content":"Generate the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client proxy.","source":"Generate the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client proxy."},{"content":"Instantiate the WCF client proxy.","pos":[1178,1211]},{"content":"The WCF client proxy can be generated manually by using the Service Model Metadata Utility Tool (SvcUtil.exe) for more information see, <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.","pos":[1218,1484],"source":"The WCF client proxy can be generated manually by using the Service Model Metadata Utility Tool (SvcUtil.exe) for more information see, [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)."},{"content":"The WCF client proxy can also be generated within Visual Studio using the Add Service Reference  feature.","pos":[1485,1590]},{"content":"To generate the WCF client proxy using either method the service must be running.","pos":[1591,1672]},{"content":"If the service is self-hosted you must run the host.","pos":[1673,1725]},{"content":"If the service is hosted in IIS/WAS you do not need to do anything else.","pos":[1726,1798]},{"pos":[1807,1841],"content":"ServiceModel Metadata Utility Tool","linkify":"ServiceModel Metadata Utility Tool","nodes":[{"content":"ServiceModel Metadata Utility Tool","pos":[0,34]}]},{"content":"The <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> is a command-line tool for generating code from metadata.","pos":[1845,2036],"source":"The [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) is a command-line tool for generating code from metadata."},{"content":"The following use is an example of a basic Svcutil.exe command.","pos":[2037,2100]},{"content":"Alternatively, you can use Svcutil.exe with Web Services Description Language (WSDL) and XML Schema definition language (XSD) files on the file system.","pos":[2201,2352]},{"pos":[2432,2595],"content":"The result is a code file that contains <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client code that the client application can use to invoke the service.","source":"The result is a code file that contains [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client code that the client application can use to invoke the service."},{"content":"You can also use the tool to generate configuration files.","pos":[2602,2660]},{"content":"If only one file name is given, that is the name of the output file.","pos":[2713,2781]},{"content":"If two file names are given, then the first file is an input configuration file whose contents are merged with the generated configuration and written out into the second file.","pos":[2782,2958]},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> configuration, see <bpt id=\"p1\">[</bpt>Configuring Bindings for Services<ept id=\"p1\">](../../../docs/framework/wcf/configuring-bindings-for-wcf-services.md)</ept>.","pos":[2959,3137],"source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)] configuration, see [Configuring Bindings for Services](../../../docs/framework/wcf/configuring-bindings-for-wcf-services.md)."},{"pos":[3145,3427],"content":"[!IMPORTANT]\n Unsecured metadata requests pose certain risks in the same way that any unsecured network request does: If you are not certain that the endpoint you are communicating with is who it says it is, the information you retrieve might be metadata from a malicious service.","leadings":["","> "],"nodes":[{"content":"Unsecured metadata requests pose certain risks in the same way that any unsecured network request does: If you are not certain that the endpoint you are communicating with is who it says it is, the information you retrieve might be metadata from a malicious service.","pos":[14,280]}]},{"pos":[3436,3474],"content":"Add Service Reference in Visual Studio","linkify":"Add Service Reference in Visual Studio","nodes":[{"content":"Add Service Reference in Visual Studio","pos":[0,38]}]},{"content":"With the service running, right click the project that will contain the WCF client proxy and select <bpt id=\"p1\">**</bpt>Add Service Reference<ept id=\"p1\">**</ept>.","pos":[3478,3604],"source":"With the service running, right click the project that will contain the WCF client proxy and select **Add Service Reference**."},{"content":"In the <bpt id=\"p1\">**</bpt>Add Service Reference Dialog<ept id=\"p1\">**</ept> type in the URL to the service you want to call and click the <bpt id=\"p2\">**</bpt>Go<ept id=\"p2\">**</ept> button.","pos":[3605,3721],"source":" In the **Add Service Reference Dialog** type in the URL to the service you want to call and click the **Go** button."},{"content":"The dialog will display a list of services available at the address you specify.","pos":[3722,3802]},{"content":"Double click the service to see the contracts and operations available, specify a namespace for the generated code and click the <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept> button.","pos":[3803,3946],"source":" Double click the service to see the contracts and operations available, specify a namespace for the generated code and click the **OK** button."},{"pos":[3955,3962],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example shows a service contract created for a service.","pos":[3966,4040]},{"content":"The ServiceModel Metadata utility tool and Add Service Reference in Visual Studio generates the following <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client class.","pos":[4631,4803],"source":"The ServiceModel Metadata utility tool and Add Service Reference in Visual Studio generates the following [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client class."},{"content":"The class inherits from the generic <ph id=\"ph1\">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class and implements the <ph id=\"ph2\">`ICalculator`</ph> interface.","pos":[4804,4931],"source":" The class inherits from the generic <xref:System.ServiceModel.ClientBase%601> class and implements the `ICalculator` interface."},{"content":"The tool also generates the <ph id=\"ph1\">`ICalculator`</ph> interface (not shown here).","pos":[4932,5001],"source":" The tool also generates the `ICalculator` interface (not shown here)."},{"pos":[6504,6524],"content":"Using the WCF Client","linkify":"Using the WCF Client","nodes":[{"content":"Using the WCF Client","pos":[0,20]}]},{"pos":[6528,6745],"content":"To use the <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client, create an instance of the <ph id=\"ph2\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client, and then call its methods, as shown in the following code.","source":"To use the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client, create an instance of the [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client, and then call its methods, as shown in the following code."},{"pos":[7541,7580],"content":"Debugging Exceptions Thrown by a Client","linkify":"Debugging Exceptions Thrown by a Client","nodes":[{"content":"Debugging Exceptions Thrown by a Client","pos":[0,39]}]},{"content":"Many exceptions thrown by a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client are caused by an exception on the service.","pos":[7584,7714],"source":"Many exceptions thrown by a [!INCLUDE[indigo2](../../../includes/indigo2-md.md)] client are caused by an exception on the service."},{"content":"Some examples of this are:","pos":[7715,7741]},{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>: An existing connection was forcibly closed by the remote host.","pos":[7751,7856],"source":"<xref:System.Net.Sockets.SocketException>: An existing connection was forcibly closed by the remote host."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>: The underlying connection was closed unexpectedly.","pos":[7866,7967],"source":"<xref:System.ServiceModel.CommunicationException>: The underlying connection was closed unexpectedly."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.CommunicationObjectAbortedException&gt;</ph>: The socket connection was aborted.","pos":[7977,8075],"source":"<xref:System.ServiceModel.CommunicationObjectAbortedException>: The socket connection was aborted."},{"content":"This could be caused by an error processing your message, a receive time-out being exceeded by the remote host, or an underlying network resource issue.","pos":[8076,8228]},{"content":"When these types of exceptions occur, the best way to solve the problem is to turn on tracing on the service side and determine what exception occurred there.","pos":[8235,8393]},{"content":"<ph id=\"ph1\">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> tracing, see <bpt id=\"p1\">[</bpt>Tracing<ept id=\"p1\">](../../../docs/framework/wcf/diagnostics/tracing/index.md)</ept> and <bpt id=\"p2\">[</bpt>Using Tracing to Troubleshoot Your Application<ept id=\"p2\">](../../../docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)</ept>.","pos":[8394,8680],"source":"[!INCLUDE[crabout](../../../includes/crabout-md.md)] tracing, see [Tracing](../../../docs/framework/wcf/diagnostics/tracing/index.md) and [Using Tracing to Troubleshoot Your Application](../../../docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md)."},{"pos":[8689,8697],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>How to: Create a Client<ept id=\"p1\">](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)</ept><ph id=\"ph1\"> </ph>","pos":[8701,8786],"source":"[How to: Create a Client](../../../docs/framework/wcf/how-to-create-a-wcf-client.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Access Services with a Duplex Contract<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-access-services-with-a-duplex-contract.md)</ept><ph id=\"ph1\"> </ph>","pos":[8790,8933],"source":"[How to: Access Services with a Duplex Contract](../../../docs/framework/wcf/feature-details/how-to-access-services-with-a-duplex-contract.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Call Service Operations Asynchronously<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept><ph id=\"ph1\"> </ph>","pos":[8937,9084],"source":"[How to: Call Service Operations Asynchronously](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Access Services with One-Way and Request-Reply Contracts<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-access-wcf-services-with-one-way-and-request-reply-contracts.md)</ept><ph id=\"ph1\"> </ph>","pos":[9088,9271],"source":"[How to: Access Services with One-Way and Request-Reply Contracts](../../../docs/framework/wcf/feature-details/how-to-access-wcf-services-with-one-way-and-request-reply-contracts.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Access a WSE 3.0 Service<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/how-to-access-a-wse-3-0-service-with-a-wcf-client.md)</ept><ph id=\"ph1\"> </ph>","pos":[9275,9408],"source":"[How to: Access a WSE 3.0 Service](../../../docs/framework/wcf/feature-details/how-to-access-a-wse-3-0-service-with-a-wcf-client.md) "},{"content":"<bpt id=\"p1\">[</bpt>Understanding Generated Client Code<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/understanding-generated-client-code.md)</ept><ph id=\"ph1\"> </ph>","pos":[9412,9534],"source":"[Understanding Generated Client Code](../../../docs/framework/wcf/feature-details/understanding-generated-client-code.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Improve the Startup Time of WCF Client Applications using the XmlSerializer<ept id=\"p1\">](../../../docs/framework/wcf/feature-details/startup-time-of-wcf-client-applications-using-the-xmlserializer.md)</ept><ph id=\"ph1\"> </ph>","pos":[9538,9736],"source":"[How to: Improve the Startup Time of WCF Client Applications using the XmlSerializer](../../../docs/framework/wcf/feature-details/startup-time-of-wcf-client-applications-using-the-xmlserializer.md) "},{"content":"<bpt id=\"p1\">[</bpt>Specifying Client Run-Time Behavior<ept id=\"p1\">](../../../docs/framework/wcf/specifying-client-run-time-behavior.md)</ept><ph id=\"ph1\"> </ph>","pos":[9740,9846],"source":"[Specifying Client Run-Time Behavior](../../../docs/framework/wcf/specifying-client-run-time-behavior.md) "},{"content":"<bpt id=\"p1\">[</bpt>Configuring Client Behaviors<ept id=\"p1\">](../../../docs/framework/wcf/configuring-client-behaviors.md)</ept>","pos":[9850,9941],"source":"[Configuring Client Behaviors](../../../docs/framework/wcf/configuring-client-behaviors.md)"}]}