{"content":"---\ntitle: \"do (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"do_CSharpKeyword\"\n  - \"do\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"do keyword [C#]\"\nms.assetid: 50725f79-9ba6-4898-aa78-6e331568a1bb\ncaps.latest.revision: 22\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# do (C# Reference)\nThe `do` statement executes a statement or a block of statements repeatedly until a specified expression evaluates to `false`. The body of the loop must be enclosed in braces, `{}`, unless it consists of a single statement. In that case, the braces are optional.  \n  \n## Example  \n In the following example, the `do-while` loop statements execute as long as the variable `x` is less than 5.  \n  \n [!code-cs[csrefKeywordsIteration#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/do_1.cs)]  \n  \n Unlike the [while](../../../csharp/language-reference/keywords/while.md) statement, a `do-while` loop is executed one time before the conditional expression is evaluated.  \n  \n At any point in the `do-while` block, you can break out of the loop using the [break](../../../csharp/language-reference/keywords/break.md) statement. You can step directly to the `while` expression evaluation statement by using the [continue](../../../csharp/language-reference/keywords/continue.md) statement. If the `while` expression evaluates to true, execution continues at the first statement in the loop. If the expression evaluates to false, execution continues at the first statement after the `do-while` loop.  \n  \n A `do-while` loop can also be exited by the [goto](../../../csharp/language-reference/keywords/goto.md), [return](../../../csharp/language-reference/keywords/return.md), or [throw](../../../csharp/language-reference/keywords/throw.md) statements.  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [do-while Statement (C++)](https://docs.microsoft.com/cpp/cpp/do-while-statement-cpp)   \n [Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)","nodes":[{"pos":[4,552],"nodes":[{"content":"do (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,34],"content":"do (C# Reference) | Microsoft Docs","nodes":[{"content":"do (C# Reference) | Microsoft Docs","pos":[0,34]}]}],"pos":[6,43],"yaml":true}],"content":"title: \"do (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"do_CSharpKeyword\"\n  - \"do\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"do keyword [C#]\"\nms.assetid: 50725f79-9ba6-4898-aa78-6e331568a1bb\ncaps.latest.revision: 22\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[559,576],"content":"do (C# Reference)","linkify":"do (C# Reference)","nodes":[{"content":"do (C# Reference)","pos":[0,17]}]},{"content":"The <ph id=\"ph1\">`do`</ph> statement executes a statement or a block of statements repeatedly until a specified expression evaluates to <ph id=\"ph2\">`false`</ph>.","pos":[577,703],"source":"The `do` statement executes a statement or a block of statements repeatedly until a specified expression evaluates to `false`."},{"content":"The body of the loop must be enclosed in braces, <ph id=\"ph1\">`{}`</ph>, unless it consists of a single statement.","pos":[704,800],"source":" The body of the loop must be enclosed in braces, `{}`, unless it consists of a single statement."},{"content":"In that case, the braces are optional.","pos":[801,839]},{"pos":[848,855],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[859,967],"content":"In the following example, the <ph id=\"ph1\">`do-while`</ph> loop statements execute as long as the variable <ph id=\"ph2\">`x`</ph> is less than 5.","source":"In the following example, the `do-while` loop statements execute as long as the variable `x` is less than 5."},{"pos":[974,1082],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsIteration#1<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/do_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsIteration#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/do_1.cs)]"},{"pos":[1089,1259],"content":"Unlike the <bpt id=\"p1\">[</bpt>while<ept id=\"p1\">](../../../csharp/language-reference/keywords/while.md)</ept> statement, a <ph id=\"ph1\">`do-while`</ph> loop is executed one time before the conditional expression is evaluated.","source":"Unlike the [while](../../../csharp/language-reference/keywords/while.md) statement, a `do-while` loop is executed one time before the conditional expression is evaluated."},{"content":"At any point in the <ph id=\"ph1\">`do-while`</ph> block, you can break out of the loop using the <bpt id=\"p1\">[</bpt>break<ept id=\"p1\">](../../../csharp/language-reference/keywords/break.md)</ept> statement.","pos":[1266,1416],"source":"At any point in the `do-while` block, you can break out of the loop using the [break](../../../csharp/language-reference/keywords/break.md) statement."},{"content":"You can step directly to the <ph id=\"ph1\">`while`</ph> expression evaluation statement by using the <bpt id=\"p1\">[</bpt>continue<ept id=\"p1\">](../../../csharp/language-reference/keywords/continue.md)</ept> statement.","pos":[1417,1577],"source":" You can step directly to the `while` expression evaluation statement by using the [continue](../../../csharp/language-reference/keywords/continue.md) statement."},{"content":"If the <ph id=\"ph1\">`while`</ph> expression evaluates to true, execution continues at the first statement in the loop.","pos":[1578,1678],"source":" If the `while` expression evaluates to true, execution continues at the first statement in the loop."},{"content":"If the expression evaluates to false, execution continues at the first statement after the <ph id=\"ph1\">`do-while`</ph> loop.","pos":[1679,1786],"source":" If the expression evaluates to false, execution continues at the first statement after the `do-while` loop."},{"pos":[1793,2039],"content":"A <ph id=\"ph1\">`do-while`</ph> loop can also be exited by the <bpt id=\"p1\">[</bpt>goto<ept id=\"p1\">](../../../csharp/language-reference/keywords/goto.md)</ept>, <bpt id=\"p2\">[</bpt>return<ept id=\"p2\">](../../../csharp/language-reference/keywords/return.md)</ept>, or <bpt id=\"p3\">[</bpt>throw<ept id=\"p3\">](../../../csharp/language-reference/keywords/throw.md)</ept> statements.","source":"A `do-while` loop can also be exited by the [goto](../../../csharp/language-reference/keywords/goto.md), [return](../../../csharp/language-reference/keywords/return.md), or [throw](../../../csharp/language-reference/keywords/throw.md) statements."},{"pos":[2048,2073],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2187,2195],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2199,2259],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2263,2330],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2334,2402],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>do-while Statement (C++)<ept id=\"p1\">](https://docs.microsoft.com/cpp/cpp/do-while-statement-cpp)</ept><ph id=\"ph1\"> </ph>","pos":[2406,2492],"source":"[do-while Statement (C++)](https://docs.microsoft.com/cpp/cpp/do-while-statement-cpp) "},{"content":"<bpt id=\"p1\">[</bpt>Iteration Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/iteration-statements.md)</ept>","pos":[2496,2587],"source":"[Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)"}]}