<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="async.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8570692c02855cda7a1990f10ef97590449baccd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\async.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8c88f121e37ed089ec1520a2fde9b36ef5b79c1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f02cbf27356588ad573dc41cfbf942ad899cda6b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Asynchronous programming - C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn about the C# language-level asynchronous programming model provided by .NET Core.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Asynchronous programming</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you have any I/O-bound needs (such as requesting data from a network or accessing a database), you'll want to utilize asynchronous programming.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You could also have CPU-bound code, such as performing an expensive calculation, which is also a good scenario for writing async code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>C# has a language-level asynchronous programming model which allows for easily writing asynchronous code without having to juggle callbacks or conform to a library which supports asynchrony.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It follows what is known as the <bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](../standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Basic Overview of the Asynchronous Model</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The core of async programming is the <ph id="ph1">`Task`</ph> and <ph id="ph2">`Task&lt;T&gt;`</ph> objects, which model asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>They are supported by the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The model is fairly simple in most cases:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For I/O-bound code, you <ph id="ph1">`await`</ph> an operation which returns a <ph id="ph2">`Task`</ph> or <ph id="ph3">`Task&lt;T&gt;`</ph> inside of an <ph id="ph4">`async`</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For CPU-bound code, you <ph id="ph1">`await`</ph> an operation which is started on a background thread with the <ph id="ph2">`Task.Run`</ph> method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> keyword is where the magic happens.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It yields control to the caller of the method that performed <ph id="ph1">`await`</ph>, and it ultimately allows a UI to be responsive or a service to be elastic.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are other ways to approach async code than <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> outlined in the TAP article linked above, but this document will focus on the language-level constructs from this point forward.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>I/O-Bound Example: Downloading data from a web service</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You may need to download some data from a web service when a button is pressed, but don’t want to block the UI thread.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It can be accomplished simply like this:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>And that’s it!</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The code expresses the intent (downloading some data asynchronously) without getting bogged down in interacting with Task objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CPU-bound Example: Performing a Calculation for a Game</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Say you're writing a mobile game where pressing a button can inflict damage on many enemies on the screen.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Performing the damage calculation can be expensive, and doing it on the UI thread would make the game appear to pause as the calculation is performed!</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The best way to handle this is to start a background thread which does the work using <ph id="ph1">`Task.Run`</ph>, and <ph id="ph2">`await`</ph> its result.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This will allow the UI to feel smooth as the work is being done.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>And that's it!</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This code cleanly expresses the intent of the button's click event, it doesn't require managing a background thread manually, and it does so in a non-blocking way.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>What happens under the covers</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>There's a lot of moving pieces where asynchronous operations are concerned.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you're curious about what's happening underneath the covers of <ph id="ph1">`Task`</ph> and <ph id="ph2">`Task&lt;T&gt;`</ph>, checkout the <bpt id="p1">[</bpt>Async in-depth<ept id="p1">](../standard/async-in-depth.md)</ept> article for more information.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>On the C# side of things, the compiler transforms your code into a state machine which keeps track of things like yielding execution when an <ph id="ph1">`await`</ph> is reached and resuming execution when a background job has finished.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For the theoretically-inclined, this is an implementation of the <bpt id="p1">[</bpt>Promise Model of asynchrony<ept id="p1">](https://en.wikipedia.org/wiki/Futures_and_promises)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Key Pieces to Understand</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Async code can be used for both I/O-bound and CPU-bound code, but differently for each scenario.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Async code uses <ph id="ph1">`Task&lt;T&gt;`</ph> and <ph id="ph2">`Task`</ph>, which are constructs used to model work being done in the background.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`async`</ph> keyword turns a method into an async method, which allows you to use the <ph id="ph2">`await`</ph> keyword in its body.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`await`</ph> keyword is applied, it suspends the calling method and yields control back to its caller until the awaited task is complete.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`await`</ph> can only be used inside an async method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Recognize CPU-Bound and I/O-Bound Work</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The first two examples of this guide showed how you can use <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> for I/O-bound and CPU-bound work.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It's key that you can identify when a job you need to do is I/O-bound or CPU-bound, because it can greatly affect the performance of your code and could potentially lead to misusing certain constructs.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here are two questions you should ask before you write any code:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Will your code be "waiting" for something, such as data from a database?</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If your answer is "yes", then your work is <bpt id="p1">**</bpt>I/O-bound<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Will your code be performing a very expensive computation?</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you answered "yes", then your work is <bpt id="p1">**</bpt>CPU-bound<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the work you have is <bpt id="p1">**</bpt>I/O-bound<ept id="p1">**</ept>, use <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> <bpt id="p2">*</bpt>without<ept id="p2">*</ept> <ph id="ph3">`Task.Run`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You <bpt id="p1">*</bpt>should not<ept id="p1">*</ept> use the Task Parallel Library.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The reason for this is outlined in the <bpt id="p1">[</bpt>Async in Depth article<ept id="p1">](../standard/async-in-depth.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the work you have is <bpt id="p1">**</bpt>CPU-bound<ept id="p1">**</ept> and you care about responsiveness, use <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> but spawn the work off on another thread <bpt id="p2">*</bpt>with<ept id="p2">*</ept> <ph id="ph3">`Task.Run`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the work is appropriate for concurrency and parallelism, you should also consider using the <bpt id="p1">[</bpt>Task Parallel Library<ept id="p1">](../standard/parallel-programming/task-parallel-library-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Additionally, you should always measure the execution of your code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, you may find yourself in a situation where your CPU-bound work is not costly enough compared with the overhead of context switches when multithreading.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Every choice has its tradeoff, and you should pick the correct tradeoff for your situation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>More Examples</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate various ways you can write async code in C#.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>They cover a few different scenarios you may come across.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Extracting Data from a Network</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This snippet downloads the HTML from the homepage at <bpt id="p1">[</bpt>www.dotnetfoundation.org<ept id="p1">](https://www.dotnetfoundation.org)</ept> and counts the number of times the string ".NET" occurs in the HTML.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It uses ASP.NET MVC to define a web controller method which performs this task, returning the number.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you plan on doing HTML parsing in production code, don't use regular expressions.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use a parsing library instead.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Here's the same scenario written for a Universal Windows App, which performs the same task when a Button is pressed:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Waiting for Multiple Tasks to Complete</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You may find yourself in a situation where you need to retrieve multiple pieces of data concurrently.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Task`</ph> API contains two methods, <ph id="ph2">`Task.WhenAll`</ph> and <ph id="ph3">`Task.WhenAny`</ph> which allow you to write asynchronous code which performs a non-blocking wait on multiple background jobs.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This example shows how you might grab <ph id="ph1">`User`</ph> data for a set of <ph id="ph2">`userId`</ph>s.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Here's another way to write this a bit more succinctly, using LINQ:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Although it's less code, take care when mixing LINQ with asynchronous code.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Because LINQ uses deferred (lazy) execution, async calls won't happen immediately as they do in a <ph id="ph1">`foreach()`</ph> loop unless you force the generated sequence to iterate with a call to <ph id="ph2">`.ToList()`</ph> or <ph id="ph3">`.ToArray()`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Important Info and Advice</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Although async programming is relatively straightforward, there are some details to keep in mind which can prevent unexpected behavior.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`async`</ph> <bpt id="p1">**</bpt>methods need to have an<ept id="p1">**</ept> <ph id="ph2">`await`</ph> <bpt id="p2">**</bpt>keyword in their body or they will never yield!<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is important to keep in mind.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`await`</ph> is not used in the body of an <ph id="ph2">`async`</ph> method, the C# compiler will generate a warning, but the code will compile and run as if it were a normal method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Note that this would also be incredibly inefficient, as the state machine generated by the C# compiler for the async method would not be accomplishing anything.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>You should add "Async" as the suffix of every async method name you write.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is the convention used in .NET to more-easily differentiate synchronous and asynchronous methods.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Note that certain methods which aren’t explicitly called by your code (such as event handlers or web controller methods) don’t necessarily apply.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Because these are not explicitly called by your code, being explicit about their naming isn’t as important.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`async void`</ph> <bpt id="p1">**</bpt>should only be used for event handlers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`async void`</ph> is the only way to allow asynchronous event handlers to work because events do not have return types (thus cannot make use of <ph id="ph2">`Task`</ph> and <ph id="ph3">`Task&lt;T&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Any other use of <ph id="ph1">`async void`</ph> does not follow the TAP model and can be challenging to use, such as:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Exceptions thrown in an <ph id="ph1">`async void`</ph> method can’t be caught outside of that method.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`async void`</ph> methods are very difficult to test.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`async void`</ph> methods can cause bad side effects if the caller isn’t expecting them to be async.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Tread carefully when using async lambdas in LINQ expressions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Lambda expressions in LINQ use deferred execution, meaning code could end up executing at a time when you’re not expecting it to.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The introduction of blocking tasks into this can easily result in a deadlock if not written correctly.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Additionally, the nesting of asynchronous code like this can also make it more difficult to reason about the execution of the code.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Async and LINQ are powerful, but should be used together as carefully and clearly as possible.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Write code that awaits Tasks in a non-blocking manner<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Blocking the current thread as a means to wait for a Task to complete can result in deadlocks and blocked context threads, and can require significantly more complex error-handling.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following table provides guidance on how to deal with waiting for Tasks in a non-blocking way:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Use this...</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Instead of this...</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When wishing to do this</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Task.Wait`</ph> or <ph id="ph2">`Task.Result`</ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Retrieving the result of a background task</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Waiting for any task to complete</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Waiting for all tasks to complete</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Waiting for a period of time</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Write less stateful code<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Don’t depend on the state of global objects or the execution of certain methods.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Instead, depend only on the return values of methods.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Code will be easier to reason about.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Code will be easier to test.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Mixing async and synchronous code is far simpler.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Race conditions can typically be avoided altogether.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Depending on return values makes coordinating async code simple.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>(Bonus) it works really well with dependency injection.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>A recommended goal is to achieve complete or near-complete <bpt id="p1">[</bpt>Referential Transparency<ept id="p1">](https://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29)</ept> in your code.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Doing so will result in an extremely predictable, testable, and maintainable codebase.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Other Resources</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async in-depth<ept id="p1">](../standard/async-in-depth.md)</ept> provides more information about how Tasks work.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous programming with async and await (C#)<ept id="p1">](./programming-guide/concepts/async/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Lucian Wischik's <bpt id="p1">[</bpt>Six Essential Tips for Async<ept id="p1">](https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async)</ept> are a wonderful resource for async programming</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>