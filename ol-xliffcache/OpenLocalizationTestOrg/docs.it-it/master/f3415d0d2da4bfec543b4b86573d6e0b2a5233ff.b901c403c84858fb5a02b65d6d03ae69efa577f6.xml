{"content":"---\ntitle: \"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"wait handles\"\n  - \"threading [.NET Framework], EventWaitHandle class\"\n  - \"event wait handles [.NET Framework]\"\nms.assetid: cd94fc34-ac15-427f-b723-a1240a4fab7d\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"\n---\n# EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent\nEvent wait handles allow threads to synchronize activities by signaling each other and by waiting on each other's signals. These synchronization events are based on Win32 wait handles and can be divided into two types: those that reset automatically when signaled and those that are reset manually.  \n  \n Event wait handles are useful in many of the same synchronization scenarios as the <xref:System.Threading.Monitor> class. Event wait handles are often easier to use than the <xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName> and <xref:System.Threading.Monitor.Pulse%2A?displayProperty=fullName> methods, and they offer more control over signaling. Named event wait handles can also be used to synchronize activities across application domains and processes, whereas monitors are local to an application domain.  \n  \n## In This Section  \n [EventWaitHandle](../../../docs/standard/threading/eventwaithandle.md)  \n The <xref:System.Threading.EventWaitHandle> class can represent either automatic or manual reset events and either local events or named system events.  \n  \n [AutoResetEvent](../../../docs/standard/threading/autoresetevent.md)  \n The <xref:System.Threading.AutoResetEvent> class derives from <xref:System.Threading.EventWaitHandle> and represents a local event that resets automatically.  \n  \n [ManualResetEvent and ManualResetEventSlim](../../../docs/standard/threading/manualresetevent-and-manualreseteventslim.md)  \n The <xref:System.Threading.ManualResetEvent> class derives from <xref:System.Threading.EventWaitHandle> and represents a local event that must be reset manually. The <xref:System.Threading.ManualResetEventSlim> class is a lightweight, faster version that can be used for events within the same process.  \n  \n [CountdownEvent](../../../docs/standard/threading/countdownevent.md)  \n The <xref:System.Threading.CountdownEvent> class provides a simplified way to implement fork/join parallelism patterns in code that uses wait handles.  \n  \n## Related Sections  \n [Wait Handles](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)  \n The <xref:System.Threading.WaitHandle> class is the base class for the <xref:System.Threading.EventWaitHandle>, <xref:System.Threading.Semaphore>, and <xref:System.Threading.Mutex> classes. It contains static methods such as <xref:System.Threading.WaitHandle.SignalAndWait%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> that are useful when working with all types of wait handles.  \n  \n## See Also  \n <xref:System.Threading.EventWaitHandle>   \n <xref:System.Threading.WaitHandle>   \n <xref:System.Threading.AutoResetEvent>   \n <xref:System.Threading.ManualResetEvent>   \n [Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md)   \n [Managed Threading Basics](../../../docs/standard/threading/managed-threading-basics.md)","nodes":[{"pos":[4,518],"embed":true,"restype":"x-metadata","content":"title: \"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: dotnet-standard\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"wait handles\"\n  - \"threading [.NET Framework], EventWaitHandle class\"\n  - \"event wait handles [.NET Framework]\"\nms.assetid: cd94fc34-ac15-427f-b723-a1240a4fab7d\ncaps.latest.revision: 12\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\nmanager: \"wpickett\"","nodes":[{"content":"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent | Microsoft Docs","nodes":[{"pos":[0,82],"content":"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent | Microsoft Docs","nodes":[{"content":"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent | Microsoft Docs","pos":[0,82]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[525,590],"content":"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent","linkify":"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent","nodes":[{"content":"EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent","pos":[0,65]}]},{"content":"Event wait handles allow threads to synchronize activities by signaling each other and by waiting on each other's signals.","pos":[591,713]},{"content":"These synchronization events are based on Win32 wait handles and can be divided into two types: those that reset automatically when signaled and those that are reset manually.","pos":[714,889]},{"content":"Event wait handles are useful in many of the same synchronization scenarios as the <ph id=\"ph1\">&lt;xref:System.Threading.Monitor&gt;</ph> class.","pos":[896,1017],"source":"Event wait handles are useful in many of the same synchronization scenarios as the <xref:System.Threading.Monitor> class."},{"content":"Event wait handles are often easier to use than the <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=fullName&gt;</ph> methods, and they offer more control over signaling.","pos":[1018,1257],"source":" Event wait handles are often easier to use than the <xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName> and <xref:System.Threading.Monitor.Pulse%2A?displayProperty=fullName> methods, and they offer more control over signaling."},{"content":"Named event wait handles can also be used to synchronize activities across application domains and processes, whereas monitors are local to an application domain.","pos":[1258,1420]},{"pos":[1429,1444],"content":"In This Section","linkify":"In This Section","nodes":[{"content":"In This Section","pos":[0,15]}]},{"content":"<bpt id=\"p1\">[</bpt>EventWaitHandle<ept id=\"p1\">](../../../docs/standard/threading/eventwaithandle.md)</ept>","pos":[1448,1518],"source":"[EventWaitHandle](../../../docs/standard/threading/eventwaithandle.md)"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class can represent either automatic or manual reset events and either local events or named system events.","pos":[1522,1673],"source":"The <xref:System.Threading.EventWaitHandle> class can represent either automatic or manual reset events and either local events or named system events."},{"content":"<bpt id=\"p1\">[</bpt>AutoResetEvent<ept id=\"p1\">](../../../docs/standard/threading/autoresetevent.md)</ept>","pos":[1680,1748],"source":"[AutoResetEvent](../../../docs/standard/threading/autoresetevent.md)"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class derives from <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and represents a local event that resets automatically.","pos":[1752,1909],"source":"The <xref:System.Threading.AutoResetEvent> class derives from <xref:System.Threading.EventWaitHandle> and represents a local event that resets automatically."},{"content":"<bpt id=\"p1\">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id=\"p1\">](../../../docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept>","pos":[1916,2038],"source":"[ManualResetEvent and ManualResetEventSlim](../../../docs/standard/threading/manualresetevent-and-manualreseteventslim.md)"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class derives from <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and represents a local event that must be reset manually.","pos":[2042,2203],"source":"The <xref:System.Threading.ManualResetEvent> class derives from <xref:System.Threading.EventWaitHandle> and represents a local event that must be reset manually."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> class is a lightweight, faster version that can be used for events within the same process.","pos":[2204,2344],"source":" The <xref:System.Threading.ManualResetEventSlim> class is a lightweight, faster version that can be used for events within the same process."},{"content":"<bpt id=\"p1\">[</bpt>CountdownEvent<ept id=\"p1\">](../../../docs/standard/threading/countdownevent.md)</ept>","pos":[2351,2419],"source":"[CountdownEvent](../../../docs/standard/threading/countdownevent.md)"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.CountdownEvent&gt;</ph> class provides a simplified way to implement fork/join parallelism patterns in code that uses wait handles.","pos":[2423,2573],"source":"The <xref:System.Threading.CountdownEvent> class provides a simplified way to implement fork/join parallelism patterns in code that uses wait handles."},{"pos":[2582,2598],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"<bpt id=\"p1\">[</bpt>Wait Handles<ept id=\"p1\">](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)</ept>","pos":[2602,2688],"source":"[Wait Handles](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle&gt;</ph> class is the base class for the <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.Semaphore&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Threading.Mutex&gt;</ph> classes.","pos":[2692,2881],"source":"The <xref:System.Threading.WaitHandle> class is the base class for the <xref:System.Threading.EventWaitHandle>, <xref:System.Threading.Semaphore>, and <xref:System.Threading.Mutex> classes."},{"content":"It contains static methods such as <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> that are useful when working with all types of wait handles.","pos":[2882,3079],"source":" It contains static methods such as <xref:System.Threading.WaitHandle.SignalAndWait%2A> and <xref:System.Threading.WaitHandle.WaitAll%2A> that are useful when working with all types of wait handles."},{"pos":[3088,3096],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Threading Objects and Features<ept id=\"p1\">](../../../docs/standard/threading/threading-objects-and-features.md)</ept><ph id=\"ph1\"> </ph>","pos":[3271,3372],"source":"[Threading Objects and Features](../../../docs/standard/threading/threading-objects-and-features.md) "},{"content":"<bpt id=\"p1\">[</bpt>Managed Threading Basics<ept id=\"p1\">](../../../docs/standard/threading/managed-threading-basics.md)</ept>","pos":[3376,3464],"source":"[Managed Threading Basics](../../../docs/standard/threading/managed-threading-basics.md)"}]}