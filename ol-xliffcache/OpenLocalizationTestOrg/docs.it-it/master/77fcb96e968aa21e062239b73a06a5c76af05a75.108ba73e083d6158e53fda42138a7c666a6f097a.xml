{"content":"---\ntitle: \"How to: Create MDI Child Forms | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MDI, creating forms\"\n  - \"child forms\"\nms.assetid: 164b69bb-2eca-4339-ada3-0679eb2c6dda\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Create MDI Child Forms\nMDI child forms are an essential element of [Multiple-Document Interface (MDI) Applications](../../../../docs/framework/winforms/advanced/multiple-document-interface-mdi-applications.md), as these forms are the center of user interaction.  \n  \n In the following procedure, you will create MDI child form that displays a <xref:System.Windows.Forms.RichTextBox> control, similar to most word-processing applications. Substituting the <xref:System.Windows.Forms> control with other controls, such as the <xref:System.Windows.Forms.DataGridView> control, or a mixture of controls enables you to create MDI child windows (and, by extension, MDI applications) with diverse possibilities.  \n  \n> [!NOTE]\n>  The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).  \n  \n### To create MDI child forms  \n  \n1.  Create a new Windows Forms project. In **the Properties Windows** for the form, set its <xref:System.Windows.Forms.Form.IsMdiContainer%2A> property to `true`, and its `WindowsState` property to `Maximized`.  \n  \n     This designates the form as an MDI container for child windows.  \n  \n2.  From the `Toolbox`, drag a <xref:System.Windows.Forms.MenuStrip> control to the form. Set its `Text` property to **File**.  \n  \n3.  Click the ellipses (â€¦) next to the **Items** property, and click **Add** to add two child tool strip menu items. Set the `Text` property for these items to **New** and **Window**.  \n  \n4.  In **Solution Explorer**, right-click the project, point to **Add**, and then select **Add New Item**.  \n  \n5.  In the **Add New Item** dialog box, select **Windows Form** (in [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] or in [!INCLUDE[csprcs](../../../../includes/csprcs-md.md)]) or **Windows Forms Application (.NET)** (in [!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)]) from the **Templates** pane. In the **Name** box, name the form **Form2**. Click the **Open** button to add the form to the project.  \n  \n    > [!NOTE]\n    >  The MDI child form you created in this step is a standard Windows Form. As such, it has an <xref:System.Windows.Forms.Form.Opacity%2A> property, which enables you to control the transparency of the form. However, the <xref:System.Windows.Forms.Form.Opacity%2A> property was designed for top-level windows. Do not use it with MDI child forms, as painting problems can occur.  \n  \n     This form will be the template for your MDI child forms.  \n  \n     The **Windows Forms Designer** opens, displaying **Form2**.  \n  \n6.  From the **Toolbox**, drag a **RichTextBox** control to the form.  \n  \n7.  In the **Properties** window, set the `Anchor` property to **Top, Left** and the `Dock` property to **Fill**.  \n  \n     This causes the <xref:System.Windows.Forms.RichTextBox> control to completely fill the area of the MDI child form, even when the form is resized.  \n  \n8.  Double click the **New** menu item to create a <xref:System.Windows.Forms.Control.Click> event handler for it.  \n  \n9. Insert code similar to the following to create a new MDI child form when the user clicks the **New** menu item.  \n  \n    > [!NOTE]\n    >  In the following example, the event handler handles the <xref:System.Windows.Forms.Control.Click> event for `MenuItem2`. Be aware that, depending on the specifics of your application architecture, your **New** menu item may not be `MenuItem2`.  \n  \n    ```vb  \n    Protected Sub MDIChildNew_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MenuItem2.Click  \n       Dim NewMDIChild As New Form2()  \n       'Set the Parent Form of the Child window.  \n       NewMDIChild.MdiParent = Me  \n       'Display the new form.  \n       NewMDIChild.Show()  \n    End Sub  \n  \n    ```  \n  \n    ```csharp  \n    protected void MDIChildNew_Click(object sender, System.EventArgs e){  \n       Form2 newMDIChild = new Form2();  \n       // Set the Parent Form of the Child window.  \n       newMDIChild.MdiParent = this;  \n       // Display the new form.  \n       newMDIChild.Show();  \n    }  \n  \n    ```  \n  \n    ```cpp  \n    private:  \n       void menuItem2_Click(System::Object ^ sender,  \n          System::EventArgs ^ e)  \n       {  \n          Form2^ newMDIChild = gcnew Form2();  \n          // Set the Parent Form of the Child window.  \n          newMDIChild->MdiParent = this;  \n          // Display the new form.  \n          newMDIChild->Show();  \n       }  \n    ```  \n  \n     In [!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)], add the following `#include` directive at the top of Form1.h:  \n  \n    ```cpp  \n    #include \"Form2.h\"  \n    ```  \n  \n10. In the drop-down list at the top of the **Properties** window, select the menu strip that corresponds to the **File** menu strip and set the <xref:System.Windows.Forms.MenuStrip.MdiWindowListItem%2A> property to the Window <xref:System.Windows.Forms.ToolStripMenuItem>.  \n  \n     This will enable the **Window** menu to maintain a list of open MDI child windows with a check mark next to the active child window.  \n  \n11. Press F5 to run the application. By selecting **New** from the **File** menu, you can create new MDI child forms, which are kept track of in the **Window** menu item.  \n  \n    > [!NOTE]\n    >  When an MDI child form has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items) and it is opened within an MDI parent form that has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items), the menu items will merge automatically if you have set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property (and optionally, the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property). Set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property of both <xref:System.Windows.Forms.MainMenu> components and all of the menu items of the child form to <xref:System.Windows.Forms.MenuMerge>. Additionally, set the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property so that the menu items from both menus appear in the desired order. Moreover, keep in mind that when you close an MDI parent form, each of the MDI child forms raises a <xref:System.Windows.Forms.Form.Closing> event before the <xref:System.Windows.Forms.Form.Closing> event for the MDI parent is raised. Canceling an MDI child's <xref:System.Windows.Forms.Form.Closing> event will not prevent the MDI parent's <xref:System.Windows.Forms.Form.Closing> event from being raised; however, the <xref:System.ComponentModel.CancelEventArgs> argument for the MDI parent's <xref:System.Windows.Forms.Form.Closing> event will now be set to `true`. You can force the MDI parent and all MDI child forms to close by setting the <xref:System.ComponentModel.CancelEventArgs> argument to `false`.  \n  \n## See Also  \n [Multiple-Document Interface (MDI) Applications](../../../../docs/framework/winforms/advanced/multiple-document-interface-mdi-applications.md)   \n [How to: Create MDI Parent Forms](../../../../docs/framework/winforms/advanced/how-to-create-mdi-parent-forms.md)   \n [How to: Determine the Active MDI Child](../../../../docs/framework/winforms/advanced/how-to-determine-the-active-mdi-child.md)   \n [How to: Send Data to the Active MDI Child](../../../../docs/framework/winforms/advanced/how-to-send-data-to-the-active-mdi-child.md)   \n [How to: Arrange MDI Child Forms](../../../../docs/framework/winforms/advanced/how-to-arrange-mdi-child-forms.md)","nodes":[{"pos":[4,456],"nodes":[{"content":"How to: Create MDI Child Forms | Microsoft Docs","nodes":[{"pos":[0,47],"content":"How to: Create MDI Child Forms | Microsoft Docs","nodes":[{"content":"How to: Create MDI Child Forms | Microsoft Docs","pos":[0,47]}]}],"pos":[6,56],"yaml":true}],"content":"title: \"How to: Create MDI Child Forms | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MDI, creating forms\"\n  - \"child forms\"\nms.assetid: 164b69bb-2eca-4339-ada3-0679eb2c6dda\ncaps.latest.revision: 21\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","yamlblock":true},{"pos":[463,493],"content":"How to: Create MDI Child Forms","linkify":"How to: Create MDI Child Forms","nodes":[{"content":"How to: Create MDI Child Forms","pos":[0,30]}]},{"pos":[494,732],"content":"MDI child forms are an essential element of <bpt id=\"p1\">[</bpt>Multiple-Document Interface (MDI) Applications<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/multiple-document-interface-mdi-applications.md)</ept>, as these forms are the center of user interaction.","source":"MDI child forms are an essential element of [Multiple-Document Interface (MDI) Applications](../../../../docs/framework/winforms/advanced/multiple-document-interface-mdi-applications.md), as these forms are the center of user interaction."},{"content":"In the following procedure, you will create MDI child form that displays a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control, similar to most word-processing applications.","pos":[739,908],"source":"In the following procedure, you will create MDI child form that displays a <xref:System.Windows.Forms.RichTextBox> control, similar to most word-processing applications."},{"content":"Substituting the <ph id=\"ph1\">&lt;xref:System.Windows.Forms&gt;</ph> control with other controls, such as the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control, or a mixture of controls enables you to create MDI child windows (and, by extension, MDI applications) with diverse possibilities.","pos":[909,1175],"source":" Substituting the <xref:System.Windows.Forms> control with other controls, such as the <xref:System.Windows.Forms.DataGridView> control, or a mixture of controls enables you to create MDI child windows (and, by extension, MDI applications) with diverse possibilities."},{"pos":[1183,1559],"content":"[!NOTE]\n The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).","leadings":["","> "],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).","pos":[9,374],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.","pos":[0,130]},{"content":"To change your settings, choose <bpt id=\"p1\">**</bpt>Import and Export Settings<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu.","pos":[131,216],"source":" To change your settings, choose **Import and Export Settings** on the **Tools** menu."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Customizing Development Settings in Visual Studio<ept id=\"p1\">](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)</ept>.","pos":[217,365],"source":" For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)."}]}]},{"pos":[1569,1594],"content":"To create MDI child forms","linkify":"To create MDI child forms","nodes":[{"content":"To create MDI child forms","pos":[0,25]}]},{"content":"Create a new Windows Forms project.","pos":[1604,1639]},{"content":"In <bpt id=\"p1\">**</bpt>the Properties Windows<ept id=\"p1\">**</ept> for the form, set its <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.IsMdiContainer%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>, and its <ph id=\"ph3\">`WindowsState`</ph> property to <ph id=\"ph4\">`Maximized`</ph>.","pos":[1640,1810],"source":" In **the Properties Windows** for the form, set its <xref:System.Windows.Forms.Form.IsMdiContainer%2A> property to `true`, and its `WindowsState` property to `Maximized`."},{"content":"This designates the form as an MDI container for child windows.","pos":[1821,1884]},{"content":"From the <ph id=\"ph1\">`Toolbox`</ph>, drag a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.MenuStrip&gt;</ph> control to the form.","pos":[1894,1979],"source":"From the `Toolbox`, drag a <xref:System.Windows.Forms.MenuStrip> control to the form."},{"content":"Set its <ph id=\"ph1\">`Text`</ph> property to <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept>.","pos":[1980,2016],"source":" Set its `Text` property to **File**."},{"content":"Click the ellipses (â€¦) next to the <bpt id=\"p1\">**</bpt>Items<ept id=\"p1\">**</ept> property, and click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> to add two child tool strip menu items.","pos":[2026,2138],"source":"Click the ellipses (â€¦) next to the **Items** property, and click **Add** to add two child tool strip menu items."},{"content":"Set the <ph id=\"ph1\">`Text`</ph> property for these items to <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Window<ept id=\"p2\">**</ept>.","pos":[2139,2205],"source":" Set the `Text` property for these items to **New** and **Window**."},{"pos":[2215,2317],"content":"In <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, right-click the project, point to <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, and then select <bpt id=\"p3\">**</bpt>Add New Item<ept id=\"p3\">**</ept>.","source":"In **Solution Explorer**, right-click the project, point to **Add**, and then select **Add New Item**."},{"content":"In the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box, select <bpt id=\"p2\">**</bpt>Windows Form<ept id=\"p2\">**</ept> (in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph> or in <ph id=\"ph2\">[!INCLUDE[csprcs](../../../../includes/csprcs-md.md)]</ph>) or <bpt id=\"p3\">**</bpt>Windows Forms Application (.NET)<ept id=\"p3\">**</ept> (in <ph id=\"ph3\">[!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)]</ph>) from the <bpt id=\"p4\">**</bpt>Templates<ept id=\"p4\">**</ept> pane.","pos":[2327,2633],"source":"In the **Add New Item** dialog box, select **Windows Form** (in [!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)] or in [!INCLUDE[csprcs](../../../../includes/csprcs-md.md)]) or **Windows Forms Application (.NET)** (in [!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)]) from the **Templates** pane."},{"content":"In the <bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> box, name the form <bpt id=\"p2\">**</bpt>Form2<ept id=\"p2\">**</ept>.","pos":[2634,2679],"source":" In the **Name** box, name the form **Form2**."},{"content":"Click the <bpt id=\"p1\">**</bpt>Open<ept id=\"p1\">**</ept> button to add the form to the project.","pos":[2680,2737],"source":" Click the **Open** button to add the form to the project."},{"pos":[2749,3137],"content":"[!NOTE]\nThe MDI child form you created in this step is a standard Windows Form. As such, it has an <xref:System.Windows.Forms.Form.Opacity%2A> property, which enables you to control the transparency of the form. However, the <xref:System.Windows.Forms.Form.Opacity%2A> property was designed for top-level windows. Do not use it with MDI child forms, as painting problems can occur.","leadings":["","    >  "],"nodes":[{"content":"The MDI child form you created in this step is a standard Windows Form. As such, it has an <xref:System.Windows.Forms.Form.Opacity%2A> property, which enables you to control the transparency of the form. However, the <xref:System.Windows.Forms.Form.Opacity%2A> property was designed for top-level windows. Do not use it with MDI child forms, as painting problems can occur.","pos":[8,381],"nodes":[{"content":"The MDI child form you created in this step is a standard Windows Form.","pos":[0,71]},{"content":"As such, it has an <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.Opacity%2A&gt;</ph> property, which enables you to control the transparency of the form.","pos":[72,203],"source":" As such, it has an <xref:System.Windows.Forms.Form.Opacity%2A> property, which enables you to control the transparency of the form."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.Opacity%2A&gt;</ph> property was designed for top-level windows.","pos":[204,305],"source":" However, the <xref:System.Windows.Forms.Form.Opacity%2A> property was designed for top-level windows."},{"content":"Do not use it with MDI child forms, as painting problems can occur.","pos":[306,373]}]}]},{"content":"This form will be the template for your MDI child forms.","pos":[3148,3204]},{"pos":[3215,3274],"content":"The <bpt id=\"p1\">**</bpt>Windows Forms Designer<ept id=\"p1\">**</ept> opens, displaying <bpt id=\"p2\">**</bpt>Form2<ept id=\"p2\">**</ept>.","source":"The **Windows Forms Designer** opens, displaying **Form2**."},{"pos":[3284,3349],"content":"From the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, drag a <bpt id=\"p2\">**</bpt>RichTextBox<ept id=\"p2\">**</ept> control to the form.","source":"From the **Toolbox**, drag a **RichTextBox** control to the form."},{"pos":[3359,3468],"content":"In the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, set the <ph id=\"ph1\">`Anchor`</ph> property to <bpt id=\"p2\">**</bpt>Top, Left<ept id=\"p2\">**</ept> and the <ph id=\"ph2\">`Dock`</ph> property to <bpt id=\"p3\">**</bpt>Fill<ept id=\"p3\">**</ept>.","source":"In the **Properties** window, set the `Anchor` property to **Top, Left** and the `Dock` property to **Fill**."},{"content":"This causes the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> control to completely fill the area of the MDI child form, even when the form is resized.","pos":[3479,3624],"source":"This causes the <xref:System.Windows.Forms.RichTextBox> control to completely fill the area of the MDI child form, even when the form is resized."},{"pos":[3634,3744],"content":"Double click the <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> menu item to create a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler for it.","source":"Double click the **New** menu item to create a <xref:System.Windows.Forms.Control.Click> event handler for it."},{"pos":[3753,3864],"content":"Insert code similar to the following to create a new MDI child form when the user clicks the <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> menu item.","source":"Insert code similar to the following to create a new MDI child form when the user clicks the **New** menu item."},{"pos":[3876,4134],"content":"[!NOTE]\nIn the following example, the event handler handles the <xref:System.Windows.Forms.Control.Click> event for `MenuItem2`. Be aware that, depending on the specifics of your application architecture, your **New** menu item may not be `MenuItem2`.","leadings":["","    >  "],"nodes":[{"content":"In the following example, the event handler handles the <xref:System.Windows.Forms.Control.Click> event for `MenuItem2`. Be aware that, depending on the specifics of your application architecture, your **New** menu item may not be `MenuItem2`.","pos":[8,251],"nodes":[{"content":"In the following example, the event handler handles the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event for <ph id=\"ph2\">`MenuItem2`</ph>.","pos":[0,120],"source":"In the following example, the event handler handles the <xref:System.Windows.Forms.Control.Click> event for `MenuItem2`."},{"content":"Be aware that, depending on the specifics of your application architecture, your <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> menu item may not be <ph id=\"ph1\">`MenuItem2`</ph>.","pos":[121,243],"source":" Be aware that, depending on the specifics of your application architecture, your **New** menu item may not be `MenuItem2`."}]}]},{"pos":[5178,5297],"content":"In <ph id=\"ph1\">[!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)]</ph>, add the following <ph id=\"ph2\">`#include`</ph> directive at the top of Form1.h:","source":"In [!INCLUDE[vcprvc](../../../../includes/vcprvc-md.md)], add the following `#include` directive at the top of Form1.h:"},{"pos":[5358,5627],"content":"In the drop-down list at the top of the <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> window, select the menu strip that corresponds to the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu strip and set the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MenuStrip.MdiWindowListItem%2A&gt;</ph> property to the Window <ph id=\"ph2\">&lt;xref:System.Windows.Forms.ToolStripMenuItem&gt;</ph>.","source":"In the drop-down list at the top of the **Properties** window, select the menu strip that corresponds to the **File** menu strip and set the <xref:System.Windows.Forms.MenuStrip.MdiWindowListItem%2A> property to the Window <xref:System.Windows.Forms.ToolStripMenuItem>."},{"pos":[5638,5770],"content":"This will enable the <bpt id=\"p1\">**</bpt>Window<ept id=\"p1\">**</ept> menu to maintain a list of open MDI child windows with a check mark next to the active child window.","source":"This will enable the **Window** menu to maintain a list of open MDI child windows with a check mark next to the active child window."},{"content":"Press F5 to run the application.","pos":[5780,5812]},{"content":"By selecting <bpt id=\"p1\">**</bpt>New<ept id=\"p1\">**</ept> from the <bpt id=\"p2\">**</bpt>File<ept id=\"p2\">**</ept> menu, you can create new MDI child forms, which are kept track of in the <bpt id=\"p3\">**</bpt>Window<ept id=\"p3\">**</ept> menu item.","pos":[5813,5946],"source":" By selecting **New** from the **File** menu, you can create new MDI child forms, which are kept track of in the **Window** menu item."},{"pos":[5958,7519],"content":"[!NOTE]\nWhen an MDI child form has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items) and it is opened within an MDI parent form that has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items), the menu items will merge automatically if you have set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property (and optionally, the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property). Set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property of both <xref:System.Windows.Forms.MainMenu> components and all of the menu items of the child form to <xref:System.Windows.Forms.MenuMerge>. Additionally, set the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property so that the menu items from both menus appear in the desired order. Moreover, keep in mind that when you close an MDI parent form, each of the MDI child forms raises a <xref:System.Windows.Forms.Form.Closing> event before the <xref:System.Windows.Forms.Form.Closing> event for the MDI parent is raised. Canceling an MDI child's <xref:System.Windows.Forms.Form.Closing> event will not prevent the MDI parent's <xref:System.Windows.Forms.Form.Closing> event from being raised; however, the <xref:System.ComponentModel.CancelEventArgs> argument for the MDI parent's <xref:System.Windows.Forms.Form.Closing> event will now be set to `true`. You can force the MDI parent and all MDI child forms to close by setting the <xref:System.ComponentModel.CancelEventArgs> argument to `false`.","leadings":["","    >  "],"nodes":[{"content":"When an MDI child form has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items) and it is opened within an MDI parent form that has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items), the menu items will merge automatically if you have set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property (and optionally, the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property). Set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property of both <xref:System.Windows.Forms.MainMenu> components and all of the menu items of the child form to <xref:System.Windows.Forms.MenuMerge>. Additionally, set the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property so that the menu items from both menus appear in the desired order. Moreover, keep in mind that when you close an MDI parent form, each of the MDI child forms raises a <xref:System.Windows.Forms.Form.Closing> event before the <xref:System.Windows.Forms.Form.Closing> event for the MDI parent is raised. Canceling an MDI child's <xref:System.Windows.Forms.Form.Closing> event will not prevent the MDI parent's <xref:System.Windows.Forms.Form.Closing> event from being raised; however, the <xref:System.ComponentModel.CancelEventArgs> argument for the MDI parent's <xref:System.Windows.Forms.Form.Closing> event will now be set to `true`. You can force the MDI parent and all MDI child forms to close by setting the <xref:System.ComponentModel.CancelEventArgs> argument to `false`.","pos":[8,1554],"nodes":[{"content":"When an MDI child form has a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> component (with, usually, a menu structure of menu items) and it is opened within an MDI parent form that has a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> component (with, usually, a menu structure of menu items), the menu items will merge automatically if you have set the <ph id=\"ph3\">&lt;xref:System.Windows.Forms.MenuItem.MergeType%2A&gt;</ph> property (and optionally, the <ph id=\"ph4\">&lt;xref:System.Windows.Forms.MenuItem.MergeOrder%2A&gt;</ph> property).","pos":[0,475],"source":"When an MDI child form has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items) and it is opened within an MDI parent form that has a <xref:System.Windows.Forms.MainMenu> component (with, usually, a menu structure of menu items), the menu items will merge automatically if you have set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property (and optionally, the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property)."},{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MenuItem.MergeType%2A&gt;</ph> property of both <ph id=\"ph2\">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> components and all of the menu items of the child form to <ph id=\"ph3\">&lt;xref:System.Windows.Forms.MenuMerge&gt;</ph>.","pos":[476,684],"source":" Set the <xref:System.Windows.Forms.MenuItem.MergeType%2A> property of both <xref:System.Windows.Forms.MainMenu> components and all of the menu items of the child form to <xref:System.Windows.Forms.MenuMerge>."},{"content":"Additionally, set the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.MenuItem.MergeOrder%2A&gt;</ph> property so that the menu items from both menus appear in the desired order.","pos":[685,834],"source":" Additionally, set the <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> property so that the menu items from both menus appear in the desired order."},{"content":"Moreover, keep in mind that when you close an MDI parent form, each of the MDI child forms raises a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event before the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event for the MDI parent is raised.","pos":[835,1069],"source":" Moreover, keep in mind that when you close an MDI parent form, each of the MDI child forms raises a <xref:System.Windows.Forms.Form.Closing> event before the <xref:System.Windows.Forms.Form.Closing> event for the MDI parent is raised."},{"content":"Canceling an MDI child's <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event will not prevent the MDI parent's <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event from being raised; however, the <ph id=\"ph3\">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument for the MDI parent's <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event will now be set to <ph id=\"ph5\">`true`</ph>.","pos":[1070,1403],"source":" Canceling an MDI child's <xref:System.Windows.Forms.Form.Closing> event will not prevent the MDI parent's <xref:System.Windows.Forms.Form.Closing> event from being raised; however, the <xref:System.ComponentModel.CancelEventArgs> argument for the MDI parent's <xref:System.Windows.Forms.Form.Closing> event will now be set to `true`."},{"content":"You can force the MDI parent and all MDI child forms to close by setting the <ph id=\"ph1\">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument to <ph id=\"ph2\">`false`</ph>.","pos":[1404,1546],"source":" You can force the MDI parent and all MDI child forms to close by setting the <xref:System.ComponentModel.CancelEventArgs> argument to `false`."}]}]},{"pos":[7528,7536],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Multiple-Document Interface (MDI) Applications<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/multiple-document-interface-mdi-applications.md)</ept><ph id=\"ph1\"> </ph>","pos":[7540,7683],"source":"[Multiple-Document Interface (MDI) Applications](../../../../docs/framework/winforms/advanced/multiple-document-interface-mdi-applications.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Create MDI Parent Forms<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-create-mdi-parent-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[7687,7801],"source":"[How to: Create MDI Parent Forms](../../../../docs/framework/winforms/advanced/how-to-create-mdi-parent-forms.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Determine the Active MDI Child<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-determine-the-active-mdi-child.md)</ept><ph id=\"ph1\"> </ph>","pos":[7805,7933],"source":"[How to: Determine the Active MDI Child](../../../../docs/framework/winforms/advanced/how-to-determine-the-active-mdi-child.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Send Data to the Active MDI Child<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-send-data-to-the-active-mdi-child.md)</ept><ph id=\"ph1\"> </ph>","pos":[7937,8071],"source":"[How to: Send Data to the Active MDI Child](../../../../docs/framework/winforms/advanced/how-to-send-data-to-the-active-mdi-child.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Arrange MDI Child Forms<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/how-to-arrange-mdi-child-forms.md)</ept>","pos":[8075,8188],"source":"[How to: Arrange MDI Child Forms](../../../../docs/framework/winforms/advanced/how-to-arrange-mdi-child-forms.md)"}]}