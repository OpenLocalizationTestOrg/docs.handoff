<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="modify-string-contents.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48be71f35634222dd9898199f004ea1190b62f35</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\how-to\modify-string-contents.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37f42faf45b834d40dcd74f39ec32a8ea86cc1ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e31424904da2dd2509b3a752335d0aec4a42f2ad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Modify string contents - C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Modify string contents in C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article demonstrates several techniques to produce a <ph id="ph1">`string`</ph> by modifying an existing <ph id="ph2">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All the techniques demonstrated return the result of the modifications as a new <ph id="ph1">`string`</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To clearly demonstrate this, the examples all store the result in a new variable.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can then examine both the original <ph id="ph1">`string`</ph> and the <ph id="ph2">`string`</ph> resulting from the modification when you run each example.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are several techniques demonstrated in this article.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can replace existing text.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can search for patterns and replace matching text with other text.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can treat a string as a sequence of characters.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can also use convenience methods that remove white space.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You should choose the techniques that most closely match your scenario.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Replace text</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code creates a new string by replacing existing text with a substitute.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The preceding code demonstrates this <bpt id="p1">*</bpt>immutable<ept id="p1">*</ept> property of strings.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can see in the preceding example that the original string, <ph id="ph1">`source`</ph>, is not modified.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String.Replace%2A?displayProperty=nameWithType&gt;</ph> method creates a new <ph id="ph2">`string`</ph> containing the modifications.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph> method can replace either strings or single characters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In both cases, every occurrence of the sought text is replaced.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example replaces all ' ' characters with '<ph id="ph1">\_</ph>':</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The source string is unchanged, and a new string is returned with the replacement.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Trim white space</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.String.Trim%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.String.TrimStart%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.String.TrimEnd%2A?displayProperty=nameWithType&gt;</ph> methods to remove any leading or trailing white space.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code shows an example of each.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The source string does not change; these methods return a new string with the modified contents.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remove text</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can remove text from a string using the <ph id="ph1">&lt;xref:System.String.Remove%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This method removes a number of characters starting at a specific index.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example shows how to use <ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=nameWithType&gt;</ph> followed by <ph id="ph2">&lt;xref:System.String.Remove%2A&gt;</ph> to remove text from a string:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Replace matching patterns</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>regular expressions<ept id="p1">](../../standard/base-types/regular-expressions.md)</ept> to replace text matching patterns with new text, possibly defined by a pattern.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex?displayProperty=nameWithType&gt;</ph> class to find a pattern in a source string and replace it with proper capitalization.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)?displayProperty=nameWithType&gt;</ph> method takes a function that provides the logic of the replacement as one of its arguments.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this example, that function, <ph id="ph1">`LocalReplaceMatchCase`</ph> is a <bpt id="p1">**</bpt>local function<ept id="p1">**</ept> declared inside the sample method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`LocalReplaceMatchCase`</ph> uses the <ph id="ph2">&lt;xref:System.Text.StringBuilder?displayProperty=nameWithType&gt;</ph> class to build the replacement string with proper capitalization.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Regular expressions are most useful for searching and replacing text that follows a pattern, rather than known text.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: search strings<ept id="p1">](search-strings.md)</ept> for more details.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The search pattern, "the\s" searches for the word "the" followed by a white-space character.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>That part of the pattern ensures that it doesn't match "there" in the source string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information on regular expression language elements, see <bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](../../standard/base-types/regular-expression-language-quick-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType&gt;</ph> method returns an immutable string with the contents in the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Modifying individual characters</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can produce a character array from a string, modify the contents of the array, and then create a new string from the modified contents of the array.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example shows how to replace a set of characters in a string.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>First, it uses the <ph id="ph1">&lt;xref:System.String.ToCharArray?displayProperty=nameWithName&gt;</ph> method to create an array of characters.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method to find the starting index of the word "fox."</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The next three characters are replaced with a different word.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Finally, a new string is constructed from the updated character array.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Unsafe modifications to string</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>unsafe<ept id="p1">**</ept> code, you can modify a string "in place" after it has been created.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Unsafe code bypasses many of the features of .NET designed to minimize certain types of bugs in code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You need to use unsafe code to modify a string in place because the string class is designed as an <bpt id="p1">**</bpt>immutable<ept id="p1">**</ept> type.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Once it has been created, its value does not change.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Unsafe code circumvents this property by accessing and modifying the memory used by a <ph id="ph1">`string`</ph> without using normal <ph id="ph2">`string`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example is provided for those rare situations where you want to modify a string in-place using unsafe code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The example shows how to use the <ph id="ph1">`fixed`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`fixed`</ph> keyword prevents the garbage collector (GC) from moving the string object in memory while code accesses the memory using the unsafe pointer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It also demonstrates one possible side effect of unsafe operations on strings that results from the way that the C# compiler stores (interns) strings internally.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In general, you shouldn't use this technique unless it is absolutely necessary.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can learn more in the articles on <bpt id="p1">[</bpt>unsafe<ept id="p1">](../language-reference/keywords/unsafe.md)</ept> and <bpt id="p2">[</bpt>fixed<ept id="p2">](../language-reference/keywords/fixed-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The API reference for <ph id="ph1">&lt;xref:System.String.Intern%2A&gt;</ph> includes information on string interning.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can try these samples by looking at the code in our <bpt id="p1">[</bpt>GitHub repository<ept id="p1">](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Or you can download the samples <bpt id="p1">[</bpt>as a zip file<ept id="p1">](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Regular Expressions<ept id="p1">](../../standard/base-types/regular-expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expression Language - Quick Reference<ept id="p1">](../../standard/base-types/regular-expression-language-quick-reference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>