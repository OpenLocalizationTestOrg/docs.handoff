{"content":"---\ntitle: \"UI Automation of a WPF Custom Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom controls [WPF], applying UI automation\"\n  - \"accessibility [WPF], applying to custom controls\"\n  - \"custom controls [WPF], improving accessibility\"\n  - \"UI Automation [WPF], using with custom controls\"\nms.assetid: 47b310fc-fbd5-4ce2-a606-22d04c6d4911\n---\n# UI Automation of a WPF Custom Control\n[!INCLUDE[TLA#tla_uiautomation](../../../../includes/tlasharptla-uiautomation-md.md)] provides a single, generalized interface that automation clients can use to examine or operate the user interfaces of a variety of platforms and frameworks. [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] enables both quality-assurance (test) code and accessibility applications such as screen readers to examine user-interface elements and simulate user interaction with them from other code. For information about [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] across all platforms, see Accessibility.  \n  \n This topic describes how to implement a server-side UI Automation provider for a custom control that runs in a WPF application. WPF supports [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] through a tree of peer automation objects that parallels the tree of user interface elements. Test code and applications that provide accessibility features can use automation peer objects directly (for in-process code) or through the generalized interface provided by [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)].  \n\n<a name=\"AutomationPeerClasses\"></a>   \n## Automation Peer Classes  \n WPF controls support [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] through a tree of peer classes that derive from <xref:System.Windows.Automation.Peers.AutomationPeer>. By convention, peer class names begin with the control class name and end with \"AutomationPeer\". For example, <xref:System.Windows.Automation.Peers.ButtonAutomationPeer> is the peer class for the <xref:System.Windows.Controls.Button> control class. The peer classes are roughly equivalent to [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] control types but are specific to [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] elements. Automation code that accesses WPF applications through the [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] interface does not use automation peers directly, but automation code in the same process space can use automation peers directly.  \n  \n<a name=\"BuiltInAutomationPeerClasses\"></a>   \n## Built-in Automation Peer Classes  \n Elements implement an automation peer class if they accept interface activity from the user, or if they contain information needed by users of screen-reader applications. Not all WPF visual elements have automation peers. Examples of classes that implement automation peers are <xref:System.Windows.Controls.Button>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.Label>. Examples of classes that do not implement automation peers are classes that derive from <xref:System.Windows.Controls.Decorator>, such as <xref:System.Windows.Controls.Border>, and classes based on <xref:System.Windows.Controls.Panel>, such as <xref:System.Windows.Controls.Grid> and <xref:System.Windows.Controls.Canvas>.  \n  \n The base <xref:System.Windows.Controls.Control> class does not have a corresponding peer class. If you need a peer class to correspond to a custom control that derives from <xref:System.Windows.Controls.Control>, you should derive the custom peer class from <xref:System.Windows.Automation.Peers.FrameworkElementAutomationPeer>.  \n  \n<a name=\"SecurityConsiderations\"></a>   \n## Security Considerations for Derived Peers  \n Automation peers must run in a partial-trust environment. Code in the UIAutomationClient assembly is not configured to run in a partial-trust environment, and automation peer code should not reference that assembly. Instead, you should use the classes in the UIAutomationTypes assembly. For example, you should use the <xref:System.Windows.Automation.AutomationElementIdentifiers> class from the UIAutomationTypes assembly, which corresponds to the <xref:System.Windows.Automation.AutomationElement> class in the UIAutomationClient assembly. It is safe to reference the UIAutomationTypes assembly in automation peer code.  \n  \n<a name=\"PeerNavigation\"></a>   \n## Peer Navigation  \n After locating an automation peer, in-process code can navigate the peer tree by calling the object's <xref:System.Windows.Automation.Peers.AutomationPeer.GetChildren%2A> and <xref:System.Windows.Automation.Peers.AutomationPeer.GetParent%2A> methods. Navigation among [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] elements within a control is supported by the peer's implementation of the <xref:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore%2A> method. The UI Automation system calls this method to build up a tree of subelements contained within a control; for example, list items in a list box. The default <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore%2A?displayProperty=nameWithType> method traverses the visual tree of elements to build the tree of automation peers. Custom controls override this method to expose children elements to automation clients, returning the automation peers of elements that convey information or allow user interaction.  \n  \n<a name=\"Customizations\"></a>   \n## Customizations in a Derived Peer  \n All classes that derive from <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> contain the protected virtual method <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A>. WPF calls <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> to get the automation peer object for each control. Automation code can use the peer to get information about a controlâ€™s characteristics and features and to simulate interactive use. A custom control that supports automation must override <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> and return an instance of a class that derives from <xref:System.Windows.Automation.Peers.AutomationPeer>. For example, if a custom control derives from the <xref:System.Windows.Controls.Primitives.ButtonBase> class, then the object returned by <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> should derive from <xref:System.Windows.Automation.Peers.ButtonBaseAutomationPeer>.  \n  \n When implementing a custom control, you must override the \"Core\" methods from the base automation peer class that describe behavior unique and specific to your custom control.  \n  \n### Override OnCreateAutomationPeer  \n Override the <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> method for your custom control so that it returns your provider object, which must derive directly or indirectly from <xref:System.Windows.Automation.Peers.AutomationPeer>.  \n  \n### Override GetPattern  \n Automation peers simplify some implementation aspects of server-side [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] providers, but custom control automation peers must still handle pattern interfaces. Like non-WPF providers, peers support control patterns by providing implementations of interfaces in the <xref:System.Windows.Automation.Provider?displayProperty=nameWithType> namespace, such as <xref:System.Windows.Automation.Provider.IInvokeProvider>. The control pattern interfaces can be implemented by the peer itself or by another object. The peer's implementation of <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> returns the object that supports the specified pattern. [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] code calls the <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> method and specifies a <xref:System.Windows.Automation.Peers.PatternInterface> enumeration value. Your override of <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> should return the object that implements the specified pattern. If your control does not have a custom implementation of a pattern, you can call the base type's implementation of <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> to retrieve either its implementation or null if the pattern is not supported for this control type. For example, a custom NumericUpDown control can be set to a value within a range, so its [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] peer would implement the <xref:System.Windows.Automation.Provider.IRangeValueProvider> interface. The following example shows how the peer's <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> method is overridden to respond to a <xref:System.Windows.Automation.Peers.PatternInterface.RangeValue?displayProperty=nameWithType> value.  \n  \n [!code-csharp[CustomControlNumericUpDown#GetPattern](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#getpattern)]\n [!code-vb[CustomControlNumericUpDown#GetPattern](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#getpattern)]  \n  \n A <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> method can also specify a subelement as a pattern provider. The following code shows how <xref:System.Windows.Controls.ItemsControl> transfers scroll pattern handling to the peer of its internal <xref:System.Windows.Controls.ScrollViewer> control.  \n  \n```csharp  \npublic override object GetPattern(PatternInterface patternInterface)  \n{  \n    if (patternInterface == PatternInterface.Scroll)  \n    {  \n        ItemsControl owner = (ItemsControl) base.Owner;  \n  \n        // ScrollHost is internal to the ItemsControl class  \n        if (owner.ScrollHost != null)  \n        {  \n            AutomationPeer peer = UIElementAutomationPeer.CreatePeerForElement(owner.ScrollHost);  \n            if ((peer != null) && (peer is IScrollProvider))  \n            {  \n                peer.EventsSource = this;  \n                return (IScrollProvider) peer;  \n            }  \n        }  \n    }  \n    return base.GetPattern(patternInterface);  \n}  \n```  \n  \n```vb  \nPublic Class Class1  \n    Public Overrides Function GetPattern(ByVal patternInterface__1 As PatternInterface) As Object  \n        If patternInterface1 = PatternInterface.Scroll Then  \n            Dim owner As ItemsControl = DirectCast(MyBase.Owner, ItemsControl)  \n  \n            ' ScrollHost is internal to the ItemsControl class  \n            If owner.ScrollHost IsNot Nothing Then  \n                Dim peer As AutomationPeer = UIElementAutomationPeer.CreatePeerForElement(owner.ScrollHost)  \n                If (peer IsNot Nothing) AndAlso (TypeOf peer Is IScrollProvider) Then  \n                    peer.EventsSource = Me  \n                    Return DirectCast(peer, IScrollProvider)  \n                End If  \n            End If  \n        End If  \n        Return MyBase.GetPattern(patternInterface1)  \n    End Function  \nEnd Class  \n```  \n  \n To specify a subelement for pattern handling, this code gets the subelement object, creates a peer by using the <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement%2A> method, sets the <xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A> property of the new peer to the current peer, and returns the new peer. Setting <xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A> on a subelement prevents the subelement from appearing in the automation peer tree and designates all events raised by the subelement as originating from the control specified in <xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A>. The <xref:System.Windows.Controls.ScrollViewer> control does not appear in the automation tree, and scrolling events that it generates appear to originate from the <xref:System.Windows.Controls.ItemsControl> object.  \n  \n### Override \"Core\" Methods  \n Automation code gets information about your control by calling public methods of the peer class. To provide information about your control, override each method whose name ends with \"Core\" when your control implementation differs from that of that provided by the base automation peer class. At a minimum, your control must implement the <xref:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore%2A> and <xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A> methods, as shown in the following example.  \n  \n [!code-csharp[CustomControlNumericUpDown#CoreOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#coreoverrides)]\n [!code-vb[CustomControlNumericUpDown#CoreOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#coreoverrides)]  \n  \n Your implementation of <xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A> describes your control by returning a <xref:System.Windows.Automation.ControlType> value. Although you can return <xref:System.Windows.Automation.ControlType.Custom?displayProperty=nameWithType>, you should return one of the more specific control types if it accurately describes your control. A return value of <xref:System.Windows.Automation.ControlType.Custom?displayProperty=nameWithType> requires extra work for the provider to implement [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)], and [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] client products are unable to anticipate the control structure, keyboard interaction, and possible control patterns.  \n  \n Implement the <xref:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore%2A> and <xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A> methods to indicate whether your control contains data content or fulfills an interactive role in the user interface (or both). By default, both methods return `true`. These settings improve the usability of automation tools such as screen readers, which may use these methods to filter the automation tree. If your <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> method transfers pattern handling to a subelement peer, the subelement peer's <xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A> method can return false to hide the subelement peer from the automation tree. For example, scrolling in a <xref:System.Windows.Controls.ListBox> is handled by a <xref:System.Windows.Controls.ScrollViewer>, and the automation peer for <xref:System.Windows.Automation.Peers.PatternInterface.Scroll?displayProperty=nameWithType> is returned by the <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> method of the <xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer> that is associated with the <xref:System.Windows.Automation.Peers.ListBoxAutomationPeer>.Therefore, the <xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A> method of the <xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer> returns `false`, so that the <xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer> does not appear in the automation tree.  \n  \n Your automation peer should provide appropriate default values for your control. Note that XAML that references your control can override your peer implementations of core methods by including <xref:System.Windows.Automation.AutomationProperties> attributes. For example, the following XAML creates a button that has two customized [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] properties.  \n  \n```xaml  \n<Button AutomationProperties.Name=\"Special\"   \n    AutomationProperties.HelpText=\"This is a special button.\"/>  \n```  \n  \n### Implement Pattern Providers  \n The interfaces implemented by a custom provider are explicitly declared if the owning element derives directly from <xref:System.Windows.Controls.Control>. For example, the following code declares a peer for a <xref:System.Windows.Controls.Control> that implements a range value.  \n  \n```csharp  \npublic class RangePeer1 : FrameworkElementAutomationPeer, IRangeValueProvider { }  \n```  \n  \n```vb  \nPublic Class RangePeer1  \n    Inherits FrameworkElementAutomationPeer  \n    Implements IRangeValueProvider  \nEnd Class  \n```  \n  \n If the owning control derives from a specific type of control such as <xref:System.Windows.Controls.Primitives.RangeBase>, the peer can be derived from an equivalent derived peer class. In this case, the peer would derive from <xref:System.Windows.Automation.Peers.RangeBaseAutomationPeer>, which supplies a base implementation of <xref:System.Windows.Automation.Provider.IRangeValueProvider>. The following code shows the declaration of such a peer.  \n  \n```csharp  \npublic class RangePeer2 : RangeBaseAutomationPeer { }  \n```  \n  \n```vb  \nPublic Class RangePeer2  \n    Inherits RangeBaseAutomationPeer  \nEnd Class  \n```  \n  \n For an example implementation, see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025).  \n  \n### Raise Events  \n Automation clients can subscribe to automation events. Custom controls must report changes to control state by calling the <xref:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent%2A> method. Similarly, when a property value changes, call the <xref:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent%2A> method. The following code shows how to get the peer object from within the control code and call a method to raise an event. As an optimization, the code determines if there are any listeners for this event type. Raising the event only when there are listeners avoids unnecessary overhead and helps the control remain responsive.  \n  \n [!code-csharp[CustomControlNumericUpDown#RaiseEventFromControl](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown.cs#raiseeventfromcontrol)]\n [!code-vb[CustomControlNumericUpDown#RaiseEventFromControl](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown.vb#raiseeventfromcontrol)]  \n  \n## See also\n\n- [UI Automation Overview](../../ui-automation/ui-automation-overview.md)\n- [NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025)\n- [Server-Side UI Automation Provider Implementation](../../ui-automation/server-side-ui-automation-provider-implementation.md)\n","nodes":[{"pos":[4,391],"embed":true,"restype":"x-metadata","content":"title: \"UI Automation of a WPF Custom Control\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"custom controls [WPF], applying UI automation\"\n  - \"accessibility [WPF], applying to custom controls\"\n  - \"custom controls [WPF], improving accessibility\"\n  - \"UI Automation [WPF], using with custom controls\"\nms.assetid: 47b310fc-fbd5-4ce2-a606-22d04c6d4911","nodes":[{"content":"UI Automation of a WPF Custom Control","nodes":[{"pos":[0,37],"content":"UI Automation of a WPF Custom Control","nodes":[{"content":"UI Automation of a WPF Custom Control","pos":[0,37]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[398,435],"content":"UI Automation of a WPF Custom Control","linkify":"UI Automation of a WPF Custom Control","nodes":[{"content":"UI Automation of a WPF Custom Control","pos":[0,37]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA#tla_uiautomation](../../../../includes/tlasharptla-uiautomation-md.md)]</ph> provides a single, generalized interface that automation clients can use to examine or operate the user interfaces of a variety of platforms and frameworks.","pos":[436,678],"source":"[!INCLUDE[TLA#tla_uiautomation](../../../../includes/tlasharptla-uiautomation-md.md)] provides a single, generalized interface that automation clients can use to examine or operate the user interfaces of a variety of platforms and frameworks."},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> enables both quality-assurance (test) code and accessibility applications such as screen readers to examine user-interface elements and simulate user interaction with them from other code.","pos":[679,955],"source":"[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] enables both quality-assurance (test) code and accessibility applications such as screen readers to examine user-interface elements and simulate user interaction with them from other code."},{"content":"For information about <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> across all platforms, see Accessibility.","pos":[956,1106],"source":" For information about [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] across all platforms, see Accessibility."},{"content":"This topic describes how to implement a server-side UI Automation provider for a custom control that runs in a WPF application.","pos":[1113,1240]},{"content":"WPF supports <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> through a tree of peer automation objects that parallels the tree of user interface elements.","pos":[1241,1435],"source":" WPF supports [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] through a tree of peer automation objects that parallels the tree of user interface elements."},{"content":"Test code and applications that provide accessibility features can use automation peer objects directly (for in-process code) or through the generalized interface provided by <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph>.","pos":[1436,1699],"source":" Test code and applications that provide accessibility features can use automation peer objects directly (for in-process code) or through the generalized interface provided by [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]."},{"pos":[1746,1769],"content":"Automation Peer Classes","linkify":"Automation Peer Classes","nodes":[{"content":"Automation Peer Classes","pos":[0,23]}]},{"content":"WPF controls support <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> through a tree of peer classes that derive from <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph>.","pos":[1773,1984],"source":"WPF controls support [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] through a tree of peer classes that derive from <xref:System.Windows.Automation.Peers.AutomationPeer>."},{"content":"By convention, peer class names begin with the control class name and end with \"AutomationPeer\".","pos":[1985,2081]},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.ButtonAutomationPeer&gt;</ph> is the peer class for the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> control class.","pos":[2082,2233],"source":" For example, <xref:System.Windows.Automation.Peers.ButtonAutomationPeer> is the peer class for the <xref:System.Windows.Controls.Button> control class."},{"content":"The peer classes are roughly equivalent to <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> control types but are specific to <ph id=\"ph2\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> elements.","pos":[2234,2478],"source":" The peer classes are roughly equivalent to [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] control types but are specific to [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] elements."},{"content":"Automation code that accesses WPF applications through the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> interface does not use automation peers directly, but automation code in the same process space can use automation peers directly.","pos":[2479,2756],"source":" Automation code that accesses WPF applications through the [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] interface does not use automation peers directly, but automation code in the same process space can use automation peers directly."},{"pos":[2812,2844],"content":"Built-in Automation Peer Classes","linkify":"Built-in Automation Peer Classes","nodes":[{"content":"Built-in Automation Peer Classes","pos":[0,32]}]},{"content":"Elements implement an automation peer class if they accept interface activity from the user, or if they contain information needed by users of screen-reader applications.","pos":[2848,3018]},{"content":"Not all WPF visual elements have automation peers.","pos":[3019,3069]},{"content":"Examples of classes that implement automation peers are <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Label&gt;</ph>.","pos":[3070,3246],"source":" Examples of classes that implement automation peers are <xref:System.Windows.Controls.Button>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.Label>."},{"content":"Examples of classes that do not implement automation peers are classes that derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Decorator&gt;</ph>, such as <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Border&gt;</ph>, and classes based on <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, such as <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Grid&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.","pos":[3247,3569],"source":" Examples of classes that do not implement automation peers are classes that derive from <xref:System.Windows.Controls.Decorator>, such as <xref:System.Windows.Controls.Border>, and classes based on <xref:System.Windows.Controls.Panel>, such as <xref:System.Windows.Controls.Grid> and <xref:System.Windows.Controls.Canvas>."},{"content":"The base <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> class does not have a corresponding peer class.","pos":[3576,3671],"source":"The base <xref:System.Windows.Controls.Control> class does not have a corresponding peer class."},{"content":"If you need a peer class to correspond to a custom control that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph>, you should derive the custom peer class from <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.FrameworkElementAutomationPeer&gt;</ph>.","pos":[3672,3904],"source":" If you need a peer class to correspond to a custom control that derives from <xref:System.Windows.Controls.Control>, you should derive the custom peer class from <xref:System.Windows.Automation.Peers.FrameworkElementAutomationPeer>."},{"pos":[3954,3995],"content":"Security Considerations for Derived Peers","linkify":"Security Considerations for Derived Peers","nodes":[{"content":"Security Considerations for Derived Peers","pos":[0,41]}]},{"content":"Automation peers must run in a partial-trust environment.","pos":[3999,4056]},{"content":"Code in the UIAutomationClient assembly is not configured to run in a partial-trust environment, and automation peer code should not reference that assembly.","pos":[4057,4214]},{"content":"Instead, you should use the classes in the UIAutomationTypes assembly.","pos":[4215,4285]},{"content":"For example, you should use the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.AutomationElementIdentifiers&gt;</ph> class from the UIAutomationTypes assembly, which corresponds to the <ph id=\"ph2\">&lt;xref:System.Windows.Automation.AutomationElement&gt;</ph> class in the UIAutomationClient assembly.","pos":[4286,4540],"source":" For example, you should use the <xref:System.Windows.Automation.AutomationElementIdentifiers> class from the UIAutomationTypes assembly, which corresponds to the <xref:System.Windows.Automation.AutomationElement> class in the UIAutomationClient assembly."},{"content":"It is safe to reference the UIAutomationTypes assembly in automation peer code.","pos":[4541,4620]},{"pos":[4662,4677],"content":"Peer Navigation","linkify":"Peer Navigation","nodes":[{"content":"Peer Navigation","pos":[0,15]}]},{"content":"After locating an automation peer, in-process code can navigate the peer tree by calling the object's <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetChildren%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetParent%2A&gt;</ph> methods.","pos":[4681,4931],"source":"After locating an automation peer, in-process code can navigate the peer tree by calling the object's <xref:System.Windows.Automation.Peers.AutomationPeer.GetChildren%2A> and <xref:System.Windows.Automation.Peers.AutomationPeer.GetParent%2A> methods."},{"content":"Navigation among <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> elements within a control is supported by the peer's implementation of the <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore%2A&gt;</ph> method.","pos":[4932,5174],"source":" Navigation among [!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)] elements within a control is supported by the peer's implementation of the <xref:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore%2A> method."},{"content":"The UI Automation system calls this method to build up a tree of subelements contained within a control; for example, list items in a list box.","pos":[5175,5318]},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore%2A?displayProperty=nameWithType&gt;</ph> method traverses the visual tree of elements to build the tree of automation peers.","pos":[5319,5525],"source":" The default <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetChildrenCore%2A?displayProperty=nameWithType> method traverses the visual tree of elements to build the tree of automation peers."},{"content":"Custom controls override this method to expose children elements to automation clients, returning the automation peers of elements that convey information or allow user interaction.","pos":[5526,5707]},{"pos":[5749,5781],"content":"Customizations in a Derived Peer","linkify":"Customizations in a Derived Peer","nodes":[{"content":"Customizations in a Derived Peer","pos":[0,32]}]},{"content":"All classes that derive from <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> contain the protected virtual method <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph>.","pos":[5785,5982],"source":"All classes that derive from <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement> contain the protected virtual method <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A>."},{"content":"WPF calls <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> to get the automation peer object for each control.","pos":[5983,6102],"source":" WPF calls <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> to get the automation peer object for each control."},{"content":"Automation code can use the peer to get information about a controlâ€™s characteristics and features and to simulate interactive use.","pos":[6103,6234]},{"content":"A custom control that supports automation must override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> and return an instance of a class that derives from <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph>.","pos":[6235,6455],"source":" A custom control that supports automation must override <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> and return an instance of a class that derives from <xref:System.Windows.Automation.Peers.AutomationPeer>."},{"content":"For example, if a custom control derives from the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> class, then the object returned by <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> should derive from <ph id=\"ph3\">&lt;xref:System.Windows.Automation.Peers.ButtonBaseAutomationPeer&gt;</ph>.","pos":[6456,6735],"source":" For example, if a custom control derives from the <xref:System.Windows.Controls.Primitives.ButtonBase> class, then the object returned by <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> should derive from <xref:System.Windows.Automation.Peers.ButtonBaseAutomationPeer>."},{"content":"When implementing a custom control, you must override the \"Core\" methods from the base automation peer class that describe behavior unique and specific to your custom control.","pos":[6742,6917]},{"pos":[6927,6958],"content":"Override OnCreateAutomationPeer","linkify":"Override OnCreateAutomationPeer","nodes":[{"content":"Override OnCreateAutomationPeer","pos":[0,31]}]},{"pos":[6962,7205],"content":"Override the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnCreateAutomationPeer%2A&gt;</ph> method for your custom control so that it returns your provider object, which must derive directly or indirectly from <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer&gt;</ph>.","source":"Override the <xref:System.Windows.UIElement.OnCreateAutomationPeer%2A> method for your custom control so that it returns your provider object, which must derive directly or indirectly from <xref:System.Windows.Automation.Peers.AutomationPeer>."},{"pos":[7215,7234],"content":"Override GetPattern","linkify":"Override GetPattern","nodes":[{"content":"Override GetPattern","pos":[0,19]}]},{"content":"Automation peers simplify some implementation aspects of server-side <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> providers, but custom control automation peers must still handle pattern interfaces.","pos":[7238,7479],"source":"Automation peers simplify some implementation aspects of server-side [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] providers, but custom control automation peers must still handle pattern interfaces."},{"content":"Like non-WPF providers, peers support control patterns by providing implementations of interfaces in the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Provider?displayProperty=nameWithType&gt;</ph> namespace, such as <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Provider.IInvokeProvider&gt;</ph>.","pos":[7480,7733],"source":" Like non-WPF providers, peers support control patterns by providing implementations of interfaces in the <xref:System.Windows.Automation.Provider?displayProperty=nameWithType> namespace, such as <xref:System.Windows.Automation.Provider.IInvokeProvider>."},{"content":"The control pattern interfaces can be implemented by the peer itself or by another object.","pos":[7734,7824]},{"content":"The peer's implementation of <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> returns the object that supports the specified pattern.","pos":[7825,7977],"source":" The peer's implementation of <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> returns the object that supports the specified pattern."},{"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> code calls the <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> method and specifies a <ph id=\"ph3\">&lt;xref:System.Windows.Automation.Peers.PatternInterface&gt;</ph> enumeration value.","pos":[7978,8255],"source":"[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] code calls the <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> method and specifies a <xref:System.Windows.Automation.Peers.PatternInterface> enumeration value."},{"content":"Your override of <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> should return the object that implements the specified pattern.","pos":[8256,8413],"source":" Your override of <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> should return the object that implements the specified pattern."},{"content":"If your control does not have a custom implementation of a pattern, you can call the base type's implementation of <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> to retrieve either its implementation or null if the pattern is not supported for this control type.","pos":[8414,8697],"source":" If your control does not have a custom implementation of a pattern, you can call the base type's implementation of <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> to retrieve either its implementation or null if the pattern is not supported for this control type."},{"content":"For example, a custom NumericUpDown control can be set to a value within a range, so its <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> peer would implement the <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Provider.IRangeValueProvider&gt;</ph> interface.","pos":[8698,8972],"source":" For example, a custom NumericUpDown control can be set to a value within a range, so its [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] peer would implement the <xref:System.Windows.Automation.Provider.IRangeValueProvider> interface."},{"content":"The following example shows how the peer's <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> method is overridden to respond to a <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.PatternInterface.RangeValue?displayProperty=nameWithType&gt;</ph> value.","pos":[8973,9232],"source":" The following example shows how the peer's <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> method is overridden to respond to a <xref:System.Windows.Automation.Peers.PatternInterface.RangeValue?displayProperty=nameWithType> value."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A&gt;</ph> method can also specify a subelement as a pattern provider.","pos":[9612,9750],"source":"A <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.GetPattern%2A> method can also specify a subelement as a pattern provider."},{"content":"The following code shows how <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> transfers scroll pattern handling to the peer of its internal <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control.","pos":[9751,9938],"source":" The following code shows how <xref:System.Windows.Controls.ItemsControl> transfers scroll pattern handling to the peer of its internal <xref:System.Windows.Controls.ScrollViewer> control."},{"content":"To specify a subelement for pattern handling, this code gets the subelement object, creates a peer by using the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement%2A&gt;</ph> method, sets the <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A&gt;</ph> property of the new peer to the current peer, and returns the new peer.","pos":[11496,11853],"source":"To specify a subelement for pattern handling, this code gets the subelement object, creates a peer by using the <xref:System.Windows.Automation.Peers.UIElementAutomationPeer.CreatePeerForElement%2A> method, sets the <xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A> property of the new peer to the current peer, and returns the new peer."},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A&gt;</ph> on a subelement prevents the subelement from appearing in the automation peer tree and designates all events raised by the subelement as originating from the control specified in <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A&gt;</ph>.","pos":[11854,12181],"source":" Setting <xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A> on a subelement prevents the subelement from appearing in the automation peer tree and designates all events raised by the subelement as originating from the control specified in <xref:System.Windows.Automation.Peers.AutomationPeer.EventsSource%2A>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control does not appear in the automation tree, and scrolling events that it generates appear to originate from the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> object.","pos":[12182,12397],"source":" The <xref:System.Windows.Controls.ScrollViewer> control does not appear in the automation tree, and scrolling events that it generates appear to originate from the <xref:System.Windows.Controls.ItemsControl> object."},{"pos":[12407,12430],"content":"Override \"Core\" Methods","linkify":"Override \"Core\" Methods","nodes":[{"content":"Override \"Core\" Methods","pos":[0,23]}]},{"content":"Automation code gets information about your control by calling public methods of the peer class.","pos":[12434,12530]},{"content":"To provide information about your control, override each method whose name ends with \"Core\" when your control implementation differs from that of that provided by the base automation peer class.","pos":[12531,12725]},{"content":"At a minimum, your control must implement the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A&gt;</ph> methods, as shown in the following example.","pos":[12726,12979],"source":" At a minimum, your control must implement the <xref:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore%2A> and <xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A> methods, as shown in the following example."},{"content":"Your implementation of <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A&gt;</ph> describes your control by returning a <ph id=\"ph2\">&lt;xref:System.Windows.Automation.ControlType&gt;</ph> value.","pos":[13371,13569],"source":"Your implementation of <xref:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore%2A> describes your control by returning a <xref:System.Windows.Automation.ControlType> value."},{"content":"Although you can return <ph id=\"ph1\">&lt;xref:System.Windows.Automation.ControlType.Custom?displayProperty=nameWithType&gt;</ph>, you should return one of the more specific control types if it accurately describes your control.","pos":[13570,13773],"source":" Although you can return <xref:System.Windows.Automation.ControlType.Custom?displayProperty=nameWithType>, you should return one of the more specific control types if it accurately describes your control."},{"content":"A return value of <ph id=\"ph1\">&lt;xref:System.Windows.Automation.ControlType.Custom?displayProperty=nameWithType&gt;</ph> requires extra work for the provider to implement <ph id=\"ph2\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph>, and <ph id=\"ph3\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> client products are unable to anticipate the control structure, keyboard interaction, and possible control patterns.","pos":[13774,14220],"source":" A return value of <xref:System.Windows.Automation.ControlType.Custom?displayProperty=nameWithType> requires extra work for the provider to implement [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)], and [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] client products are unable to anticipate the control structure, keyboard interaction, and possible control patterns."},{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A&gt;</ph> methods to indicate whether your control contains data content or fulfills an interactive role in the user interface (or both).","pos":[14227,14528],"source":"Implement the <xref:System.Windows.Automation.Peers.AutomationPeer.IsContentElementCore%2A> and <xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A> methods to indicate whether your control contains data content or fulfills an interactive role in the user interface (or both)."},{"content":"By default, both methods return <ph id=\"ph1\">`true`</ph>.","pos":[14529,14568],"source":" By default, both methods return `true`."},{"content":"These settings improve the usability of automation tools such as screen readers, which may use these methods to filter the automation tree.","pos":[14569,14708]},{"content":"If your <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> method transfers pattern handling to a subelement peer, the subelement peer's <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A&gt;</ph> method can return false to hide the subelement peer from the automation tree.","pos":[14709,15018],"source":" If your <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> method transfers pattern handling to a subelement peer, the subelement peer's <xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A> method can return false to hide the subelement peer from the automation tree."},{"content":"For example, scrolling in a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> is handled by a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>, and the automation peer for <ph id=\"ph3\">&lt;xref:System.Windows.Automation.Peers.PatternInterface.Scroll?displayProperty=nameWithType&gt;</ph> is returned by the <ph id=\"ph4\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A&gt;</ph> method of the <ph id=\"ph5\">&lt;xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer&gt;</ph> that is associated with the <ph id=\"ph6\">&lt;xref:System.Windows.Automation.Peers.ListBoxAutomationPeer&gt;</ph>.Therefore, the <ph id=\"ph7\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A&gt;</ph> method of the <ph id=\"ph8\">&lt;xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer&gt;</ph> returns <ph id=\"ph9\">`false`</ph>, so that the <ph id=\"ph10\">&lt;xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer&gt;</ph> does not appear in the automation tree.","pos":[15019,15830],"source":" For example, scrolling in a <xref:System.Windows.Controls.ListBox> is handled by a <xref:System.Windows.Controls.ScrollViewer>, and the automation peer for <xref:System.Windows.Automation.Peers.PatternInterface.Scroll?displayProperty=nameWithType> is returned by the <xref:System.Windows.Automation.Peers.AutomationPeer.GetPattern%2A> method of the <xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer> that is associated with the <xref:System.Windows.Automation.Peers.ListBoxAutomationPeer>.Therefore, the <xref:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore%2A> method of the <xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer> returns `false`, so that the <xref:System.Windows.Automation.Peers.ScrollViewerAutomationPeer> does not appear in the automation tree."},{"content":"Your automation peer should provide appropriate default values for your control.","pos":[15837,15917]},{"content":"Note that XAML that references your control can override your peer implementations of core methods by including <ph id=\"ph1\">&lt;xref:System.Windows.Automation.AutomationProperties&gt;</ph> attributes.","pos":[15918,16095],"source":" Note that XAML that references your control can override your peer implementations of core methods by including <xref:System.Windows.Automation.AutomationProperties> attributes."},{"content":"For example, the following XAML creates a button that has two customized <ph id=\"ph1\">[!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)]</ph> properties.","pos":[16096,16268],"source":" For example, the following XAML creates a button that has two customized [!INCLUDE[TLA2#tla_uiautomation](../../../../includes/tla2sharptla-uiautomation-md.md)] properties."},{"pos":[16410,16437],"content":"Implement Pattern Providers","linkify":"Implement Pattern Providers","nodes":[{"content":"Implement Pattern Providers","pos":[0,27]}]},{"content":"The interfaces implemented by a custom provider are explicitly declared if the owning element derives directly from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph>.","pos":[16441,16596],"source":"The interfaces implemented by a custom provider are explicitly declared if the owning element derives directly from <xref:System.Windows.Controls.Control>."},{"content":"For example, the following code declares a peer for a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> that implements a range value.","pos":[16597,16720],"source":" For example, the following code declares a peer for a <xref:System.Windows.Controls.Control> that implements a range value."},{"content":"If the owning control derives from a specific type of control such as <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.RangeBase&gt;</ph>, the peer can be derived from an equivalent derived peer class.","pos":[16970,17155],"source":"If the owning control derives from a specific type of control such as <xref:System.Windows.Controls.Primitives.RangeBase>, the peer can be derived from an equivalent derived peer class."},{"content":"In this case, the peer would derive from <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.RangeBaseAutomationPeer&gt;</ph>, which supplies a base implementation of <ph id=\"ph2\">&lt;xref:System.Windows.Automation.Provider.IRangeValueProvider&gt;</ph>.","pos":[17156,17363],"source":" In this case, the peer would derive from <xref:System.Windows.Automation.Peers.RangeBaseAutomationPeer>, which supplies a base implementation of <xref:System.Windows.Automation.Provider.IRangeValueProvider>."},{"content":"The following code shows the declaration of such a peer.","pos":[17364,17420]},{"pos":[17598,17756],"content":"For an example implementation, see <bpt id=\"p1\">[</bpt>NumericUpDown Custom Control with Theme and UI Automation Support Sample<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkID=160025)</ept>.","source":"For an example implementation, see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025)."},{"pos":[17766,17778],"content":"Raise Events","linkify":"Raise Events","nodes":[{"content":"Raise Events","pos":[0,12]}]},{"content":"Automation clients can subscribe to automation events.","pos":[17782,17836]},{"content":"Custom controls must report changes to control state by calling the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent%2A&gt;</ph> method.","pos":[17837,17990],"source":" Custom controls must report changes to control state by calling the <xref:System.Windows.Automation.Peers.AutomationPeer.RaiseAutomationEvent%2A> method."},{"content":"Similarly, when a property value changes, call the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent%2A&gt;</ph> method.","pos":[17991,18132],"source":" Similarly, when a property value changes, call the <xref:System.Windows.Automation.Peers.AutomationPeer.RaisePropertyChangedEvent%2A> method."},{"content":"The following code shows how to get the peer object from within the control code and call a method to raise an event.","pos":[18133,18250]},{"content":"As an optimization, the code determines if there are any listeners for this event type.","pos":[18251,18338]},{"content":"Raising the event only when there are listeners avoids unnecessary overhead and helps the control remain responsive.","pos":[18339,18455]},{"pos":[18881,18889],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[18893,18964],"content":"<bpt id=\"p1\">[</bpt>UI Automation Overview<ept id=\"p1\">](../../ui-automation/ui-automation-overview.md)</ept>","source":"[UI Automation Overview](../../ui-automation/ui-automation-overview.md)"},{"pos":[18967,19089],"content":"<bpt id=\"p1\">[</bpt>NumericUpDown Custom Control with Theme and UI Automation Support Sample<ept id=\"p1\">](https://go.microsoft.com/fwlink/?LinkID=160025)</ept>","source":"[NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025)"},{"pos":[19092,19217],"content":"<bpt id=\"p1\">[</bpt>Server-Side UI Automation Provider Implementation<ept id=\"p1\">](../../ui-automation/server-side-ui-automation-provider-implementation.md)</ept>","source":"[Server-Side UI Automation Provider Implementation](../../ui-automation/server-side-ui-automation-provider-implementation.md)"}]}