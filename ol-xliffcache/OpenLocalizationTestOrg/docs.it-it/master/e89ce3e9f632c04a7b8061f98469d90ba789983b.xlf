<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e89ce3e9f632c04a7b8061f98469d90ba789983b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\connection-string-builders.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1640b869d22ec7f4a3b1b3ad490cd7d75b29e421</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bd811d808b3c6032090bd63543f25c4115b1225</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Connection String Builders | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Connection String Builders</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In earlier versions of <ph id="ph1">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph>, compile-time checking of connection strings with concatenated string values did not occur, so that at run time, an incorrect keyword generated an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> data providers supported different syntax for connection string keywords, which made constructing valid connection strings difficult if done manually.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To address this problem, <ph id="ph1">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph> 2.0 introduced new connection string builders for each <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> data provider.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each data provider includes a strongly typed connection string builder class that inherits from <ph id="ph1">&lt;xref:System.Data.Common.DbConnectionStringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following table lists the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> data providers and their associated connection string builder classes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Provider</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>ConnectionStringBuilder class</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Connection String Injection Attacks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A connection string injection attack can occur when dynamic string concatenation is used to build connection strings that are based on user input.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the string is not validated and malicious text or characters not escaped, an attacker can potentially access sensitive data or other resources on the server.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, an attacker could mount an attack by supplying a semicolon and appending an additional value.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The connection string is parsed by using a "last one wins" algorithm, and the hostile input is substituted for a legitimate value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The connection string builder classes are designed to eliminate guesswork and protect against syntax errors and security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>They provide methods and properties corresponding to the known key/value pairs permitted by each data provider.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each class maintains a fixed collection of synonyms and can translate from a synonym to the corresponding well-known key name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Checks are performed for valid key/value pairs and an invalid pair throws an exception.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In addition, injected values are handled in a safe manner.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt;</ph> handles an inserted extra value for the <ph id="ph2">`Initial Catalog`</ph> setting.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The output shows that the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt;</ph> handled this correctly by escaping the extra value in double quotation marks instead of appending it to the connection string as a new key/value pair.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Building Connection Strings from Configuration Files</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If certain elements of a connection string are known beforehand, they can be stored in a configuration file and retrieved at run time to construct a complete connection string.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the name of the database might be known in advance, but not the name of the server.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Or you might want a user to supply a name and password at run time without being able to inject other values into the connection string.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>One of the overloaded constructors for a connection string builder takes a <ph id="ph1">&lt;xref:System.String&gt;</ph> as an argument, which enables you to supply a partial connection string that can then be completed from user input.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The partial connection string can be stored in a configuration file and retrieved at run time.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration&gt;</ph> namespace allows programmatic access to configuration files that use the <ph id="ph2">&lt;xref:System.Web.Configuration.WebConfigurationManager&gt;</ph> for Web applications and the <ph id="ph3">&lt;xref:System.Configuration.ConfigurationManager&gt;</ph> for Windows applications.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information about working with connection strings and configuration files, see <bpt id="p1">[</bpt>Connection Strings and Configuration Files<ept id="p1">](../../../../docs/framework/data/adonet/connection-strings-and-configuration-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example demonstrates retrieving a partial connection string from a configuration file and completing it by setting the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder.UserID%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder.Password%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The configuration file is defined as follows.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You must set a reference to the <ph id="ph1">`System.Configuration.dll`</ph> in your project for the code to run.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks SqlConnectionStringBuilder.UserNamePwd#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlConnectionStringBuilder.UserNamePwd/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks SqlConnectionStringBuilder.UserNamePwd#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlConnectionStringBuilder.UserNamePwd/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Connection Strings<ept id="p1">](../../../../docs/framework/data/adonet/connection-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Privacy and Data Security<ept id="p1">](../../../../docs/framework/data/adonet/privacy-and-data-security.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>