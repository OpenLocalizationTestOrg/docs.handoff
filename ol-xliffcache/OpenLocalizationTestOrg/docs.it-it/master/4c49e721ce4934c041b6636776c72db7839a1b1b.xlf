<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="denial-of-service.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c49e721ce4934c041b6636776c72db7839a1b1b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\denial-of-service.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">075adef4eef8504bf253375b96fa83b01cdf6b52</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24eb2519701c1b89c2ee1e844d9d605be15dd7c9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Denial of Service</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Denial of Service</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Denial of service occurs when a system is overwhelmed in such a way that messages cannot be processed, or they are processed extremely slowly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Excess Memory Consumption</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A problem can occur when reading an XML document with a large number of unique local names, namespaces, or prefixes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are using a class that derives from <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, and you call either the <ph id="ph2">&lt;xref:System.Xml.XmlReader.LocalName%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlReader.Prefix%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Xml.XmlReader.NamespaceURI%2A&gt;</ph> property for each item, the returned string is added to a <ph id="ph5">&lt;xref:System.Xml.NameTable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The collection held by the <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph> never decreases in size, creating a virtual "memory leak" of the string handles.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Mitigations include:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Derive from the <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph> class and enforce a maximum size quota.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(You cannot prevent the use of a <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph> or switch the <ph id="ph2">&lt;xref:System.Xml.NameTable&gt;</ph> when it is full.)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Avoid using the properties mentioned and instead use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.MoveToAttribute%2A&gt;</ph> method with the <ph id="ph2">&lt;xref:System.Xml.XmlReader.IsStartElement%2A&gt;</ph> method where possible; those methods do not return strings and thus avoid the problem of overfilling the <ph id="ph3">&lt;xref:System.Xml.NameTable&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Malicious Client Sends Excessive License Requests to Service</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a malicious client bombards a service with excessive license requests, it can cause the server to use excessive memory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Mitigation: Use the following properties of the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.LocalServiceSecuritySettings&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.LocalServiceSecuritySettings.MaxCachedCookies%2A&gt;</ph>: controls the maximum number of time-bounded <ph id="ph2">`SecurityContextToken`</ph>s that the server caches after <ph id="ph3">`SPNego`</ph> or <ph id="ph4">`SSL`</ph> negotiation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime%2A&gt;</ph>: controls the lifetime of the <ph id="ph2">`SecurityContextTokens`</ph> that the server issues following <ph id="ph3">`SPNego`</ph> or <ph id="ph4">`SSL`</ph> negotiation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The server caches the <ph id="ph1">`SecurityContextToken`</ph>s for this period of time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.LocalServiceSecuritySettings.MaxPendingSessions%2A&gt;</ph>: controls the maximum number of secure conversations that are established at the server but for which no application messages have been processed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This quota prevents clients from establishing secure conversations at the service, thereby causing the service to maintain state per client, but never using them.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.LocalServiceSecuritySettings.InactivityTimeout%2A&gt;</ph>:  controls the maximum time the service keeps a secure conversation alive without receiving an application message from the client for the conversation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This quota prevents clients from establishing secure conversations at the service, thereby causing the service to maintain state per client, but never using them.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>WSDualHttpBinding or Dual Custom Bindings Require Client Authentication</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph> has security enabled.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It is possible, however, that if the client authentication is disabled by setting the <ph id="ph1">&lt;xref:System.ServiceModel.MessageSecurityOverHttp.ClientCredentialType%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.ServiceModel.MessageCredentialType.None&gt;</ph>, a malicious user can cause a denial of service attack on a third service.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This can occur because a malicious client can direct the service to send a stream of messages to a third service.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To mitigate this, do not set the property to <ph id="ph1">`None`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Also be aware of this possibility when creating a custom binding that has a dual message pattern.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Auditing Event Log Can Be Filled</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If a malicious user understands that auditing is enabled, that attacker can send invalid messages that cause audit entries to be written.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the audit log is filled in this manner, the auditing system fails.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To mitigate this, set the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceSecurityAuditBehavior.SuppressAuditFailure%2A&gt;</ph> property to <ph id="ph2">`true`</ph> and use the properties of the Event Viewer to control the auditing behavior.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about using the Event Viewer to view and manage event logs, see <bpt id="p1">[</bpt>Event Viewer<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=186123)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Auditing<ept id="p1">](../../../../docs/framework/wcf/feature-details/auditing-security-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Invalid Implementations of IAuthorizationPolicy Can Cause Service Hangs</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Calling the <ph id="ph1">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A&gt;</ph> method on a faulty implementation of the <ph id="ph2">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> interface can cause the service to hang.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Mitigation: Use only trusted code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>That is, use only code that you have written and tested, or that comes from a trusted provider.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Do not allow untrusted extensions of <ph id="ph1">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> to be plugged into your code without due consideration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This applies to all extensions used in a service implementation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>WCF does not make any distinction between application code and foreign code that is plugged in using extensibility points.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Kerberos Maximum Token Size May Need Resizing</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a client belongs to a large number of groups (approximately 900, although the actual number varies depending on the groups), a problem may occur when a message header's block exceeds 64 kilobytes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In that case, you can increase the maximum Kerberos token size, as described in the Microsoft Support article "<bpt id="p1">[</bpt>Internet Explorer Kerberos authentication does not work because of an insufficient buffer connecting to IIS<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=89176)</ept>."</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You may also need to increase the maximum WCF message size to accommodate the larger Kerberos token.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Autoenrollment Results in Multiple Certificates with Same Subject Name for Machine</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Autoenrollment<ept id="p1">*</ept> is the capability of <ph id="ph1">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph> to automatically enroll users and computers for certificates.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When a machine is on a domain with the feature enabled, an X.509 certificate with the intended purpose of client authentication is automatically created and inserted into the local computer's Personal certificates store whenever a new machine is joined to the network.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, autoenrollment uses the same subject name for all certificates it creates in the cache.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The impact is that WCF services may fail to open on domains with autoenrollment.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This occurs because the default service X.509 credential search criteria might be ambiguous because multiple certificates with the machine's fully qualified Domain Name System (DNS) name exist.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>One certificate originates from autoenrollment; the other might be a self-issued certificate.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To mitigate this, reference the exact certificate to use by using a more precise search criterion on the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceCredentials&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicecredentials.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, use the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint&gt;</ph> option, and specify the certificate by its unique thumbprint (hash).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information about the autoenrollment feature, see <bpt id="p1">[</bpt>Certificate Autoenrollment in Windows Server 2003<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=95166)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Last of Multiple Alternative Subject Names Used for Authorization</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the rare case when an X.509 certificate contains multiple alternative subject names, and you authorize using the alternative subject name, authorization may fail.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Protect Configuration Files with ACLs</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can specify required and optional claims in code and configuration files for <ph id="ph1">[!INCLUDE[infocard](../../../../includes/infocard-md.md)]</ph> issued tokens.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This results in corresponding elements being emitted in <ph id="ph1">`RequestSecurityToken`</ph> messages that are sent to the security token service.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An attacker can modify code or configuration to remove required or optional claims, potentially getting the security token service to issue a token that does not allow access to the target service.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To mitigate: Require access to the computer to modify the configuration file.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use file access control lists (ACLs) to secure configuration files.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>WCF requires that code be in the application directory or the global assembly cache before it will allow such code to be loaded from configuration.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use directory ACLs to secure directories.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Maximum Number of Secure Sessions for a Service Is Reached</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When a client is successfully authenticated by a service and a secure session is established with the service, the service keeps track of the session until the client cancels it or the session expires.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Every established session counts against the limit for the maximum number of active simultaneous sessions with a service.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When this limit is reached, clients that attempt to create a new session with that service are rejected until one or more active sessions expire or are canceled by a client.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A client can have multiple sessions with a service, and each one of those sessions counts toward the limit.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When you use stateful sessions, the previous paragraph does not apply.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information about stateful sessions, see <bpt id="p1">[</bpt>How to: Create a Security Context Token for a Secure Session<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-security-context-token-for-a-secure-session.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To mitigate this, set the limit for the maximum number of active sessions and the maximum lifetime for a session by setting the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-in-wcf.md)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Information Disclosure<ept id="p1">](../../../../docs/framework/wcf/feature-details/information-disclosure.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Elevation of Privilege<ept id="p1">](../../../../docs/framework/wcf/feature-details/elevation-of-privilege.md)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Denial of Service<ept id="p1">](../../../../docs/framework/wcf/feature-details/denial-of-service.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Replay Attacks<ept id="p1">](../../../../docs/framework/wcf/feature-details/replay-attacks.md)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tampering<ept id="p1">](../../../../docs/framework/wcf/feature-details/tampering.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsupported Scenarios<ept id="p1">](../../../../docs/framework/wcf/feature-details/unsupported-scenarios.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>