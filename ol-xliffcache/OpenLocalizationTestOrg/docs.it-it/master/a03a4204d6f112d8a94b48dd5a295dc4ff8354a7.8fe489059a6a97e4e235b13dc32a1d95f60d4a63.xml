{"content":"---\ntitle: \"Task 3: Create the Toolbox and PropertyGrid Panes\"\nms.date: \"03/30/2017\"\nms.assetid: 72c1546a-eed5-4f0f-a616-719a163414f4\n---\n# Task 3: Create the Toolbox and PropertyGrid Panes\nIn this task, you will create the **Toolbox** and **PropertyGrid** panes and add them to the rehosted [!INCLUDE[wfd1](../../../includes/wfd1-md.md)].  \n  \n For reference, the code that should be in the MainWindow.xaml.cs file after completing the three tasks in the [Rehosting the Workflow Designer](rehosting-the-workflow-designer.md) series of topics is provided at the end of this topic.  \n  \n### To create the Toolbox and add it to the grid  \n  \n1.  Open the HostingApplication project you obtained by following the procedure described in [Task 2: Host the Workflow Designer](task-2-host-the-workflow-designer.md).  \n  \n2.  In the **Solution Explorer** pane, right-click the MainWindow.xaml file and select **View Code**.  \n  \n3.  Add a `GetToolboxControl` method to the `MainWindow` class that creates a <xref:System.Activities.Presentation.Toolbox.ToolboxControl>, adds a new **Toolbox** category to the **Toolbox**, and assigns the <xref:System.Activities.Statements.Assign> and <xref:System.Activities.Statements.Sequence> activity types to that category.  \n  \n    ```csharp  \n    private ToolboxControl GetToolboxControl()  \n    {  \n        // Create the ToolBoxControl.  \n        ToolboxControl ctrl = new ToolboxControl();  \n  \n        // Create a category.  \n        ToolboxCategory category = new ToolboxCategory(\"category1\");  \n  \n        // Create Toolbox items.  \n        ToolboxItemWrapper tool1 =   \n            new ToolboxItemWrapper(\"System.Activities.Statements.Assign\",   \n            typeof(Assign).Assembly.FullName, null, \"Assign\");  \n  \n        ToolboxItemWrapper tool2 = new ToolboxItemWrapper(\"System.Activities.Statements.Sequence\",   \n            typeof(Sequence).Assembly.FullName, null, \"Sequence\");  \n  \n        // Add the Toolbox items to the category.  \n        category.Add(tool1);  \n        category.Add(tool2);  \n  \n        // Add the category to the ToolBox control.  \n        ctrl.Categories.Add(category);  \n        return ctrl;  \n    }  \n    ```  \n  \n4.  Add a private `AddToolbox` method to the `MainWindow` class that places the **Toolbox** in the left column on the grid.  \n  \n    ```csharp  \n    private void AddToolBox()  \n    {  \n        ToolboxControl tc = GetToolboxControl();  \n        Grid.SetColumn(tc, 0);  \n        grid1.Children.Add(tc);  \n    }  \n    ```  \n  \n5.  Add a call to the `AddToolBox` method in the `MainWindow()` class constructor as shown in the following code.  \n  \n    ```csharp  \n    public MainWindow()  \n    {  \n        InitializeComponent();  \n        this.RegisterMetadata();  \n        this.AddDesigner();  \n  \n        this.AddToolBox();  \n    }  \n    ```  \n  \n6.  Press F5 to build and run your solution. The **Toolbox** containing the <xref:System.Activities.Statements.Assign> and <xref:System.Activities.Statements.Sequence> activities should be displayed.  \n  \n### To create the PropertyGrid  \n  \n1.  In the **Solution Explorer** pane, right-click the MainWindow.xaml file and select **View Code**.  \n  \n2.  Add the `AddPropertyInspector` method to the `MainWindow` class to place the **PropertyGrid** pane in the rightmost column on the grid.  \n  \n    ```csharp  \n    private void AddPropertyInspector()  \n    {  \n        Grid.SetColumn(wd.PropertyInspectorView, 2);  \n        grid1.Children.Add(wd.PropertyInspectorView);              \n    }  \n    ```  \n  \n3.  Add a call to the `AddPropertyInspector` method in the `MainWindow()` class constructor as shown in the following code.  \n  \n    ```csharp  \n    public MainWindow()  \n    {  \n        InitializeComponent();  \n        this.RegisterMetadata();  \n        this.AddDesigner();  \n        this.AddToolBox();  \n  \n        this.AddPropertyInspector();   \n    }  \n    ```  \n  \n4.  Press F5 to build and run the solution. The **Toolbox**, workflow design canvas, and **PropertyGrid** panes should all be displayed, and when you drag an <xref:System.Activities.Statements.Assign> activity or a <xref:System.Activities.Statements.Sequence> activity onto the design canvas, the property grid should update depending on the highlighted activity.  \n  \n## Example  \n The MainWindow.xaml.cs file should now contain the following code.  \n  \n```  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Text;  \nusing System.Windows;  \nusing System.Windows.Controls;  \nusing System.Windows.Data;  \nusing System.Windows.Documents;  \nusing System.Windows.Input;  \nusing System.Windows.Media;  \nusing System.Windows.Media.Imaging;  \nusing System.Windows.Navigation;  \nusing System.Windows.Shapes;  \n//dlls added  \nusing System.Activities;  \nusing System.Activities.Core.Presentation;  \nusing System.Activities.Presentation;  \nusing System.Activities.Presentation.Metadata;  \nusing System.Activities.Presentation.Toolbox;  \nusing System.Activities.Statements;  \nusing System.ComponentModel;  \n  \nnamespace HostingApplication  \n{  \n    /// <summary>  \n    /// Interaction logic for MainWindow.xaml  \n    /// </summary>  \n    public partial class MainWindow : Window  \n    {  \n        private WorkflowDesigner wd;  \n  \n        public MainWindow()  \n        {  \n            InitializeComponent();  \n            RegisterMetadata();  \n            AddDesigner();  \n            this.AddToolBox();  \n            this.AddPropertyInspector();  \n        }  \n  \n        private void AddDesigner()  \n        {  \n            //Create an instance of WorkflowDesigner class.  \n            this.wd = new WorkflowDesigner();  \n  \n            //Place the designer canvas in the middle column of the grid.  \n            Grid.SetColumn(this.wd.View, 1);  \n  \n            //Load a new Sequence as default.  \n            this.wd.Load(new Sequence());  \n  \n            //Add the designer canvas to the grid.  \n            grid1.Children.Add(this.wd.View);  \n        }  \n  \n        private void RegisterMetadata()  \n        {  \n            DesignerMetadata dm = new DesignerMetadata();  \n            dm.Register();  \n        }  \n  \n        private ToolboxControl GetToolboxControl()  \n        {  \n            // Create the ToolBoxControl.  \n            ToolboxControl ctrl = new ToolboxControl();  \n  \n            // Create a category.  \n            ToolboxCategory category = new ToolboxCategory(\"category1\");  \n  \n            // Create Toolbox items.  \n            ToolboxItemWrapper tool1 =  \n                new ToolboxItemWrapper(\"System.Activities.Statements.Assign\",  \n                typeof(Assign).Assembly.FullName, null, \"Assign\");  \n  \n            ToolboxItemWrapper tool2 = new ToolboxItemWrapper(\"System.Activities.Statements.Sequence\",  \n                typeof(Sequence).Assembly.FullName, null, \"Sequence\");  \n  \n            // Add the Toolbox items to the category.  \n            category.Add(tool1);  \n            category.Add(tool2);  \n  \n            // Add the category to the ToolBox control.  \n            ctrl.Categories.Add(category);  \n            return ctrl;  \n        }  \n  \n        private void AddToolBox()  \n        {  \n            ToolboxControl tc = GetToolboxControl();  \n            Grid.SetColumn(tc, 0);  \n            grid1.Children.Add(tc);  \n        }  \n  \n        private void AddPropertyInspector()  \n        {  \n            Grid.SetColumn(wd.PropertyInspectorView, 2);  \n            grid1.Children.Add(wd.PropertyInspectorView);  \n        }  \n  \n    }  \n}  \n```  \n  \n## See also\n\n- [Rehosting the Workflow Designer](rehosting-the-workflow-designer.md)\n- [Task 1: Create a New Windows Presentation Foundation Application](task-1-create-a-new-wpf-app.md)\n- [Task 2: Host the Workflow Designer](task-2-host-the-workflow-designer.md)\n","nodes":[{"pos":[4,133],"embed":true,"restype":"x-metadata","content":"title: \"Task 3: Create the Toolbox and PropertyGrid Panes\"\nms.date: \"03/30/2017\"\nms.assetid: 72c1546a-eed5-4f0f-a616-719a163414f4","nodes":[{"content":"Task 3: Create the Toolbox and PropertyGrid Panes","nodes":[{"pos":[0,49],"content":"Task 3: Create the Toolbox and PropertyGrid Panes","nodes":[{"content":"Task 3: Create the Toolbox and PropertyGrid Panes","pos":[0,49]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[140,189],"content":"Task 3: Create the Toolbox and PropertyGrid Panes","linkify":"Task 3: Create the Toolbox and PropertyGrid Panes","nodes":[{"content":"Task 3: Create the Toolbox and PropertyGrid Panes","pos":[0,49]}]},{"pos":[190,339],"content":"In this task, you will create the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>PropertyGrid<ept id=\"p2\">**</ept> panes and add them to the rehosted <ph id=\"ph1\">[!INCLUDE[wfd1](../../../includes/wfd1-md.md)]</ph>.","source":"In this task, you will create the **Toolbox** and **PropertyGrid** panes and add them to the rehosted [!INCLUDE[wfd1](../../../includes/wfd1-md.md)]."},{"pos":[346,580],"content":"For reference, the code that should be in the MainWindow.xaml.cs file after completing the three tasks in the <bpt id=\"p1\">[</bpt>Rehosting the Workflow Designer<ept id=\"p1\">](rehosting-the-workflow-designer.md)</ept> series of topics is provided at the end of this topic.","source":"For reference, the code that should be in the MainWindow.xaml.cs file after completing the three tasks in the [Rehosting the Workflow Designer](rehosting-the-workflow-designer.md) series of topics is provided at the end of this topic."},{"pos":[590,634],"content":"To create the Toolbox and add it to the grid","linkify":"To create the Toolbox and add it to the grid","nodes":[{"content":"To create the Toolbox and add it to the grid","pos":[0,44]}]},{"pos":[644,808],"content":"Open the HostingApplication project you obtained by following the procedure described in <bpt id=\"p1\">[</bpt>Task 2: Host the Workflow Designer<ept id=\"p1\">](task-2-host-the-workflow-designer.md)</ept>.","source":"Open the HostingApplication project you obtained by following the procedure described in [Task 2: Host the Workflow Designer](task-2-host-the-workflow-designer.md)."},{"pos":[818,915],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> pane, right-click the MainWindow.xaml file and select <bpt id=\"p2\">**</bpt>View Code<ept id=\"p2\">**</ept>.","source":"In the **Solution Explorer** pane, right-click the MainWindow.xaml file and select **View Code**."},{"pos":[925,1253],"content":"Add a <ph id=\"ph1\">`GetToolboxControl`</ph> method to the <ph id=\"ph2\">`MainWindow`</ph> class that creates a <ph id=\"ph3\">&lt;xref:System.Activities.Presentation.Toolbox.ToolboxControl&gt;</ph>, adds a new <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept> category to the <bpt id=\"p2\">**</bpt>Toolbox<ept id=\"p2\">**</ept>, and assigns the <ph id=\"ph4\">&lt;xref:System.Activities.Statements.Assign&gt;</ph> and <ph id=\"ph5\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity types to that category.","source":"Add a `GetToolboxControl` method to the `MainWindow` class that creates a <xref:System.Activities.Presentation.Toolbox.ToolboxControl>, adds a new **Toolbox** category to the **Toolbox**, and assigns the <xref:System.Activities.Statements.Assign> and <xref:System.Activities.Statements.Sequence> activity types to that category."},{"pos":[2187,2306],"content":"Add a private <ph id=\"ph1\">`AddToolbox`</ph> method to the <ph id=\"ph2\">`MainWindow`</ph> class that places the <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept> in the left column on the grid.","source":"Add a private `AddToolbox` method to the `MainWindow` class that places the **Toolbox** in the left column on the grid."},{"pos":[2511,2620],"content":"Add a call to the <ph id=\"ph1\">`AddToolBox`</ph> method in the <ph id=\"ph2\">`MainWindow()`</ph> class constructor as shown in the following code.","source":"Add a call to the `AddToolBox` method in the `MainWindow()` class constructor as shown in the following code."},{"content":"Press F5 to build and run your solution.","pos":[2831,2871]},{"content":"The <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept> containing the <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Assign&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activities should be displayed.","pos":[2872,3026],"source":" The **Toolbox** containing the <xref:System.Activities.Statements.Assign> and <xref:System.Activities.Statements.Sequence> activities should be displayed."},{"pos":[3036,3062],"content":"To create the PropertyGrid","linkify":"To create the PropertyGrid","nodes":[{"content":"To create the PropertyGrid","pos":[0,26]}]},{"pos":[3072,3169],"content":"In the <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept> pane, right-click the MainWindow.xaml file and select <bpt id=\"p2\">**</bpt>View Code<ept id=\"p2\">**</ept>.","source":"In the **Solution Explorer** pane, right-click the MainWindow.xaml file and select **View Code**."},{"pos":[3179,3314],"content":"Add the <ph id=\"ph1\">`AddPropertyInspector`</ph> method to the <ph id=\"ph2\">`MainWindow`</ph> class to place the <bpt id=\"p1\">**</bpt>PropertyGrid<ept id=\"p1\">**</ept> pane in the rightmost column on the grid.","source":"Add the `AddPropertyInspector` method to the `MainWindow` class to place the **PropertyGrid** pane in the rightmost column on the grid."},{"pos":[3534,3653],"content":"Add a call to the <ph id=\"ph1\">`AddPropertyInspector`</ph> method in the <ph id=\"ph2\">`MainWindow()`</ph> class constructor as shown in the following code.","source":"Add a call to the `AddPropertyInspector` method in the `MainWindow()` class constructor as shown in the following code."},{"content":"Press F5 to build and run the solution.","pos":[3904,3943]},{"content":"The <bpt id=\"p1\">**</bpt>Toolbox<ept id=\"p1\">**</ept>, workflow design canvas, and <bpt id=\"p2\">**</bpt>PropertyGrid<ept id=\"p2\">**</ept> panes should all be displayed, and when you drag an <ph id=\"ph1\">&lt;xref:System.Activities.Statements.Assign&gt;</ph> activity or a <ph id=\"ph2\">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity onto the design canvas, the property grid should update depending on the highlighted activity.","pos":[3944,4263],"source":" The **Toolbox**, workflow design canvas, and **PropertyGrid** panes should all be displayed, and when you drag an <xref:System.Activities.Statements.Assign> activity or a <xref:System.Activities.Statements.Sequence> activity onto the design canvas, the property grid should update depending on the highlighted activity."},{"pos":[4272,4279],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The MainWindow.xaml.cs file should now contain the following code.","pos":[4283,4349]},{"pos":[7526,7534],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[7538,7607],"content":"<bpt id=\"p1\">[</bpt>Rehosting the Workflow Designer<ept id=\"p1\">](rehosting-the-workflow-designer.md)</ept>","source":"[Rehosting the Workflow Designer](rehosting-the-workflow-designer.md)"},{"pos":[7610,7708],"content":"<bpt id=\"p1\">[</bpt>Task 1: Create a New Windows Presentation Foundation Application<ept id=\"p1\">](task-1-create-a-new-wpf-app.md)</ept>","source":"[Task 1: Create a New Windows Presentation Foundation Application](task-1-create-a-new-wpf-app.md)"},{"pos":[7711,7785],"content":"<bpt id=\"p1\">[</bpt>Task 2: Host the Workflow Designer<ept id=\"p1\">](task-2-host-the-workflow-designer.md)</ept>","source":"[Task 2: Host the Workflow Designer](task-2-host-the-workflow-designer.md)"}]}