<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="partial-trust-best-practices.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0622d4f6667771e15bb872b8136161579f9fbb1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\partial-trust-best-practices.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5371516ad84d412a11065e6e8ca81d4c2f96680</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b355a3b16ffadd93eff3f53d3ed42ee801df36e4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Partial Trust Best Practices | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Partial Trust Best Practices</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes best practices when running <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> in a partial trust environment.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Apply the following practices when using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> in a partially-trusted application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All serializable types must be explicitly marked with the <ph id="ph1">`[DataContract]`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following techniques are not supported in a partial trust environment:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Marking classes to be serialized with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Implementing the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface to allow a class to control its serialization process.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using DataContractSerializer</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All types marked with the <ph id="ph1">`[DataContract]`</ph> attribute must be public.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Non-public types cannot be serialized in a partial trust environment.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">`[DataContract]`</ph> members in a serializable <ph id="ph2">`[DataContract]`</ph> type must be public.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A type with a non-public <ph id="ph1">`[DataMember]`</ph> cannot be serialized in a partial trust environment.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Methods that handle serialization events (such as <ph id="ph1">`OnSerializing`</ph>, <ph id="ph2">`OnSerialized`</ph>, <ph id="ph3">`OnDeserializing`</ph>, and <ph id="ph4">`OnDeserialized`</ph>) must be declared as public.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, both explicit and implicit implementations of <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%28System.Object%29&gt;</ph> are supported.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[DataContract]`</ph> types implemented in assemblies marked with the <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> must not perform security-related actions in the type constructor, as the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> does not call the constructor of the newly-instantiated object during deserialization.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Specifically, the following common security techniques must be avoided for <ph id="ph1">`[DataContract]`</ph> types:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Attempting to restrict partial trust access by making the type's constructor internal or private.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Restricting access to the type by adding a <ph id="ph1">`[LinkDemand]`</ph> to the type's constructor.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Assuming that because the object has been successfully instantiated, any validation checks enforced by the constructor have passed successfully.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using IXmlSerializable</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following best practices apply for types that implement <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> and are serialized using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.GetSchema%2A&gt;</ph> static method implementations must be <ph id="ph2">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The instance methods that implement the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface must be <ph id="ph2">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using WCF from Fully-Trusted Platform Code that Allows Calls from Partially Trusted Callers</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> partial trust security model assumes that any caller of a <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> public method or property is running in the code access security (CAS) context of the hosting application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> also assumes that only one application security context exists for each <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>, and that this context is established at <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph> creation time by a trusted host (for example, by a call to <ph id="ph4">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> or by the ASP.NET Application Manager).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This security model applies to user-written applications that cannot assert additional CAS permissions, such as user code running in a Medium Trust ASP.NET application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, fully-trusted platform code (for example, a third-party assembly that is installed in the global assembly cache and accepts calls from partially-trusted code) must take explicit care when calling into <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> on behalf of a partially-trusted application to avoid introducing application-level security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Full-trust code should avoid altering the CAS permission set of the current thread (by calling <ph id="ph1">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>) prior to calling <ph id="ph4">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> APIs on behalf of partially-trusted code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Asserting, denying, or otherwise creating a thread-specific permission context that is independent of the application-level security context can result in unexpected behavior.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Depending on the application, this behavior may result in application-level security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Code that calls into <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> using a thread-specific permission context must be prepared to handle the following situations that may arise:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The thread-specific security context may not be maintained for the duration of the operation, which results in potential security exceptions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Internal <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> code as well as any user-provided callbacks may run in a different security context than the one under which the call was originally initiated.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These contexts include:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The application permission context.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Any thread-specific permission context previously created by other user threads used to call into <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> during the lifetime of the currently running <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>guarantees that partially-trusted code cannot obtain full-trust permissions unless such permissions are asserted by a fully-trusted component prior to calling into <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> public APIs.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, it does not guarantee that the effects of asserting full trust is isolated to a particular thread, operation, or user action.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As a best practice, avoid creating thread-specific permission context by calling <ph id="ph1">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Instead, grant or deny the privilege to the application itself, so that no <ph id="ph1">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.PermissionSet.Deny%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Security.PermissionSet.PermitOnly%2A&gt;</ph> is required.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>