{"content":"---\ntitle: \"How to: Match a String against a Pattern (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"comparison operators [Visual Basic], comparing strings\"\n  - \"pattern matching\"\n  - \"strings [Visual Basic], comparing\"\n  - \"string comparison [Visual Basic], operators\"\n  - \"Visual Basic code, operators\"\n  - \"pattern matching [Visual Basic], string comparison\"\n  - \"string comparison [Visual Basic]\"\n  - \"Like operator [Visual Basic], pattern matching\"\n  - \"pattern matching, empty strings\"\n  - \"operators [Visual Basic], comparison\"\nms.assetid: 19a83804-b5af-4739-928b-ac93e64e457f\n---\n# How to: Match a String against a Pattern (Visual Basic)\nIf you want to find out if an expression of the [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md) satisfies a pattern, then you can use the [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md).  \n  \n `Like` takes two operands. The left operand is a string expression, and the right operand is a string containing the pattern to be used for matching. `Like` returns a `Boolean` value indicating whether the string expression satisfies the pattern.  \n  \n You can match each character in the string expression against a specific character, a wildcard character, a character list, or a character range. The positions of the specifications in the pattern string correspond to the positions of the characters to be matched in the string expression.  \n  \n### To match a character in the string expression against a specific character  \n  \n-   Put the specific character directly in the pattern string. Certain special characters must be enclosed in brackets (`[ ]`). For more information, see [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md).  \n  \n     The following example tests whether `myString` consists exactly of the single character `H`.  \n  \n     [!code-vb[VbVbalrOperators#70](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#70)]  \n  \n### To match a character in the string expression against a wildcard character  \n  \n-   Put a question mark (`?`) in the pattern string. Any valid character in this position makes a successful match.  \n  \n     The following example tests whether `myString` consists of the single character `W` followed by exactly two characters of any values.  \n  \n     [!code-vb[VbVbalrOperators#71](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#71)]  \n  \n### To match a character in the string expression against a list of characters  \n  \n-   Put brackets (`[ ]`) in the pattern string, and inside the brackets put the list of characters. Do not separate the characters with commas or any other separator. Any single character in the list makes a successful match.  \n  \n     The following example tests whether `myString` consists of any valid character followed by exactly one of the characters `A`, `C`, or `E`.  \n  \n     [!code-vb[VbVbalrOperators#72](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#72)]  \n  \n     Note that this match is case-sensitive.  \n  \n### To match a character in the string expression against a range of characters  \n  \n-   Put brackets (`[ ]`) in the pattern string, and inside the brackets put the lowest and highest characters in the range, separated by a hyphen (`–`). Any single character within the range makes a successful match.  \n  \n     The following example tests whether `myString` consists of the characters `num` followed by exactly one of the characters `i`, `j`, `k`, `l`, `m`, or `n`.  \n  \n     [!code-vb[VbVbalrOperators#73](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#73)]  \n  \n     Note that this match is case-sensitive.  \n  \n## Matching Empty Strings  \n `Like` treats the sequence `[]` as a zero-length string (`\"\"`). You can use `[]` to test whether the entire string expression is empty, but you cannot use it to test if a particular position in the string expression is empty. If an empty position is one of the options you need to test for, you can use `Like` more than once.  \n  \n#### To match a character in the string expression against a list of characters or no character  \n  \n1.  Call the `Like` operator twice on the same string expression, and connect the two calls with either the [Or Operator](../../../../visual-basic/language-reference/operators/or-operator.md) or the [OrElse Operator](../../../../visual-basic/language-reference/operators/orelse-operator.md).  \n  \n2.  In the pattern string for the first `Like` clause, include the character list, enclosed in brackets (`[ ]`).  \n  \n3.  In the pattern string for the second `Like` clause, do not put any character at the position in question.  \n  \n     The following example tests the seven-digit telephone number `phoneNum` for exactly three numeric digits, followed by a space, a hyphen (`–`), a period (`.`), or no character at all, followed by exactly four numeric digits.  \n  \n     [!code-vb[VbVbalrOperators#74](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#74)]  \n  \n## See also\n\n- [Comparison Operators](../../../../visual-basic/language-reference/operators/comparison-operators.md)\n- [Operators and Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)\n- [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md)\n- [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)\n","nodes":[{"pos":[4,598],"embed":true,"restype":"x-metadata","content":"title: \"How to: Match a String against a Pattern (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"comparison operators [Visual Basic], comparing strings\"\n  - \"pattern matching\"\n  - \"strings [Visual Basic], comparing\"\n  - \"string comparison [Visual Basic], operators\"\n  - \"Visual Basic code, operators\"\n  - \"pattern matching [Visual Basic], string comparison\"\n  - \"string comparison [Visual Basic]\"\n  - \"Like operator [Visual Basic], pattern matching\"\n  - \"pattern matching, empty strings\"\n  - \"operators [Visual Basic], comparison\"\nms.assetid: 19a83804-b5af-4739-928b-ac93e64e457f","nodes":[{"content":"How to: Match a String against a Pattern (Visual Basic)","nodes":[{"pos":[0,55],"content":"How to: Match a String against a Pattern (Visual Basic)","nodes":[{"content":"How to: Match a String against a Pattern (Visual Basic)","pos":[0,55]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[605,660],"content":"How to: Match a String against a Pattern (Visual Basic)","linkify":"How to: Match a String against a Pattern (Visual Basic)","nodes":[{"content":"How to: Match a String against a Pattern (Visual Basic)","pos":[0,55]}]},{"pos":[661,934],"content":"If you want to find out if an expression of the <bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept> satisfies a pattern, then you can use the <bpt id=\"p2\">[</bpt>Like Operator<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept>.","source":"If you want to find out if an expression of the [String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md) satisfies a pattern, then you can use the [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md)."},{"content":"<ph id=\"ph1\">`Like`</ph> takes two operands.","pos":[941,967],"source":"`Like` takes two operands."},{"content":"The left operand is a string expression, and the right operand is a string containing the pattern to be used for matching.","pos":[968,1090]},{"content":"<ph id=\"ph1\">`Like`</ph> returns a <ph id=\"ph2\">`Boolean`</ph> value indicating whether the string expression satisfies the pattern.","pos":[1091,1187],"source":"`Like` returns a `Boolean` value indicating whether the string expression satisfies the pattern."},{"content":"You can match each character in the string expression against a specific character, a wildcard character, a character list, or a character range.","pos":[1194,1339]},{"content":"The positions of the specifications in the pattern string correspond to the positions of the characters to be matched in the string expression.","pos":[1340,1483]},{"pos":[1493,1567],"content":"To match a character in the string expression against a specific character","linkify":"To match a character in the string expression against a specific character","nodes":[{"content":"To match a character in the string expression against a specific character","pos":[0,74]}]},{"content":"Put the specific character directly in the pattern string.","pos":[1577,1635]},{"content":"Certain special characters must be enclosed in brackets (<ph id=\"ph1\">`[ ]`</ph>).","pos":[1636,1700],"source":" Certain special characters must be enclosed in brackets (`[ ]`)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Like Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept>.","pos":[1701,1815],"source":" For more information, see [Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md)."},{"pos":[1826,1918],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists exactly of the single character <ph id=\"ph2\">`H`</ph>.","source":"The following example tests whether `myString` consists exactly of the single character `H`."},{"pos":[2056,2130],"content":"To match a character in the string expression against a wildcard character","linkify":"To match a character in the string expression against a wildcard character","nodes":[{"content":"To match a character in the string expression against a wildcard character","pos":[0,74]}]},{"content":"Put a question mark (<ph id=\"ph1\">`?`</ph>) in the pattern string.","pos":[2140,2188],"source":"Put a question mark (`?`) in the pattern string."},{"content":"Any valid character in this position makes a successful match.","pos":[2189,2251]},{"pos":[2262,2395],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists of the single character <ph id=\"ph2\">`W`</ph> followed by exactly two characters of any values.","source":"The following example tests whether `myString` consists of the single character `W` followed by exactly two characters of any values."},{"pos":[2533,2607],"content":"To match a character in the string expression against a list of characters","linkify":"To match a character in the string expression against a list of characters","nodes":[{"content":"To match a character in the string expression against a list of characters","pos":[0,74]}]},{"content":"Put brackets (<ph id=\"ph1\">`[ ]`</ph>) in the pattern string, and inside the brackets put the list of characters.","pos":[2617,2712],"source":"Put brackets (`[ ]`) in the pattern string, and inside the brackets put the list of characters."},{"content":"Do not separate the characters with commas or any other separator.","pos":[2713,2779]},{"content":"Any single character in the list makes a successful match.","pos":[2780,2838]},{"pos":[2849,2987],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists of any valid character followed by exactly one of the characters <ph id=\"ph2\">`A`</ph>, <ph id=\"ph3\">`C`</ph>, or <ph id=\"ph4\">`E`</ph>.","source":"The following example tests whether `myString` consists of any valid character followed by exactly one of the characters `A`, `C`, or `E`."},{"content":"Note that this match is case-sensitive.","pos":[3126,3165]},{"pos":[3175,3250],"content":"To match a character in the string expression against a range of characters","linkify":"To match a character in the string expression against a range of characters","nodes":[{"content":"To match a character in the string expression against a range of characters","pos":[0,75]}]},{"content":"Put brackets (<ph id=\"ph1\">`[ ]`</ph>) in the pattern string, and inside the brackets put the lowest and highest characters in the range, separated by a hyphen (<ph id=\"ph2\">`–`</ph>).","pos":[3260,3408],"source":"Put brackets (`[ ]`) in the pattern string, and inside the brackets put the lowest and highest characters in the range, separated by a hyphen (`–`)."},{"content":"Any single character within the range makes a successful match.","pos":[3409,3472]},{"pos":[3483,3637],"content":"The following example tests whether <ph id=\"ph1\">`myString`</ph> consists of the characters <ph id=\"ph2\">`num`</ph> followed by exactly one of the characters <ph id=\"ph3\">`i`</ph>, <ph id=\"ph4\">`j`</ph>, <ph id=\"ph5\">`k`</ph>, <ph id=\"ph6\">`l`</ph>, <ph id=\"ph7\">`m`</ph>, or <ph id=\"ph8\">`n`</ph>.","source":"The following example tests whether `myString` consists of the characters `num` followed by exactly one of the characters `i`, `j`, `k`, `l`, `m`, or `n`."},{"content":"Note that this match is case-sensitive.","pos":[3776,3815]},{"pos":[3824,3846],"content":"Matching Empty Strings","linkify":"Matching Empty Strings","nodes":[{"content":"Matching Empty Strings","pos":[0,22]}]},{"content":"<ph id=\"ph1\">`Like`</ph> treats the sequence <ph id=\"ph2\">`[]`</ph> as a zero-length string (<ph id=\"ph3\">`\"\"`</ph>).","pos":[3850,3913],"source":"`Like` treats the sequence `[]` as a zero-length string (`\"\"`)."},{"content":"You can use <ph id=\"ph1\">`[]`</ph> to test whether the entire string expression is empty, but you cannot use it to test if a particular position in the string expression is empty.","pos":[3914,4075],"source":" You can use `[]` to test whether the entire string expression is empty, but you cannot use it to test if a particular position in the string expression is empty."},{"content":"If an empty position is one of the options you need to test for, you can use <ph id=\"ph1\">`Like`</ph> more than once.","pos":[4076,4175],"source":" If an empty position is one of the options you need to test for, you can use `Like` more than once."},{"pos":[4186,4276],"content":"To match a character in the string expression against a list of characters or no character","linkify":"To match a character in the string expression against a list of characters or no character","nodes":[{"content":"To match a character in the string expression against a list of characters or no character","pos":[0,90]}]},{"pos":[4286,4573],"content":"Call the <ph id=\"ph1\">`Like`</ph> operator twice on the same string expression, and connect the two calls with either the <bpt id=\"p1\">[</bpt>Or Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/or-operator.md)</ept> or the <bpt id=\"p2\">[</bpt>OrElse Operator<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/orelse-operator.md)</ept>.","source":"Call the `Like` operator twice on the same string expression, and connect the two calls with either the [Or Operator](../../../../visual-basic/language-reference/operators/or-operator.md) or the [OrElse Operator](../../../../visual-basic/language-reference/operators/orelse-operator.md)."},{"pos":[4583,4691],"content":"In the pattern string for the first <ph id=\"ph1\">`Like`</ph> clause, include the character list, enclosed in brackets (<ph id=\"ph2\">`[ ]`</ph>).","source":"In the pattern string for the first `Like` clause, include the character list, enclosed in brackets (`[ ]`)."},{"pos":[4701,4806],"content":"In the pattern string for the second <ph id=\"ph1\">`Like`</ph> clause, do not put any character at the position in question.","source":"In the pattern string for the second `Like` clause, do not put any character at the position in question."},{"pos":[4817,5040],"content":"The following example tests the seven-digit telephone number <ph id=\"ph1\">`phoneNum`</ph> for exactly three numeric digits, followed by a space, a hyphen (<ph id=\"ph2\">`–`</ph>), a period (<ph id=\"ph3\">`.`</ph>), or no character at all, followed by exactly four numeric digits.","source":"The following example tests the seven-digit telephone number `phoneNum` for exactly three numeric digits, followed by a space, a hyphen (`–`), a period (`.`), or no character at all, followed by exactly four numeric digits."},{"pos":[5177,5185],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5189,5290],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/comparison-operators.md)</ept>","source":"[Comparison Operators](../../../../visual-basic/language-reference/operators/comparison-operators.md)"},{"pos":[5293,5417],"content":"<bpt id=\"p1\">[</bpt>Operators and Expressions<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept>","source":"[Operators and Expressions](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)"},{"pos":[5420,5507],"content":"<bpt id=\"p1\">[</bpt>Like Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/like-operator.md)</ept>","source":"[Like Operator](../../../../visual-basic/language-reference/operators/like-operator.md)"},{"pos":[5510,5604],"content":"<bpt id=\"p1\">[</bpt>String Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/string-data-type.md)</ept>","source":"[String Data Type](../../../../visual-basic/language-reference/data-types/string-data-type.md)"}]}