<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="lambda-expressions.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dd9b77a90030a96d17104c8c0e48964b6a85d165</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\lambda-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e733204e5a8aa5fc486b9667f5965ff217417ea6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8976e5e6926a84ddeb23b481efd09685baf1d558</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Lambda expressions - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Lambda expressions (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>lambda expression<ept id="p1">*</ept> is a block of code (an expression or a statement block) that is treated as an object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It can be passed as an argument to methods, and it can also be returned by method calls.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Lambda expressions are used extensively for:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Passing the code that is to be executed to asynchronous methods, such as <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run(System.Action)?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Writing <bpt id="p1">[</bpt>LINQ query expressions<ept id="p1">](../../linq/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating <bpt id="p1">[</bpt>expression trees<ept id="p1">](../concepts/expression-trees/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Lambda expressions are code that can be represented either as a delegate, or as an expression tree that compiles to a delegate.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The specific delegate type of a lambda expression depends on its parameters and return value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Lambda expressions that don't return a value correspond to a specific <ph id="ph1">`Action`</ph> delegate, depending on its number of parameters.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Lambda expressions that return a value correspond to a specific <ph id="ph1">`Func`</ph> delegate, depending on its number of parameters.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, a lambda expression that has two parameters but returns no value corresponds to an <ph id="ph1">&lt;xref:System.Action%602&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A lambda expression that has one parameter and returns a value corresponds to <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A lambda expression uses <ph id="ph1">`=&gt;`</ph>, the <bpt id="p1">[</bpt>lambda declaration operator<ept id="p1">](../../language-reference/operators/lambda-operator.md)</ept>, to separate the lambda's parameter list from its executable code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To create a lambda expression, you specify input parameters (if any) on the left side of the lambda operator, and you put the expression or statement block on the other side.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, the single-line lambda expression <ph id="ph1">`x =&gt; x * x`</ph> specifies a parameter thatâ€™s named <ph id="ph2">`x`</ph> and returns the value of <ph id="ph3">`x`</ph> squared.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can assign this expression to a delegate type, as the following example shows:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You also can assign a lambda expression to an expression tree type:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Or you can pass it directly as a method argument:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you use method-based syntax to call the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType&gt;</ph> method in the <ph id="ph2">&lt;xref:System.Linq.Enumerable?displayProperty=nameWithType&gt;</ph> class (as you do in LINQ to Objects and LINQ to XML) the parameter is a delegate type <ph id="ph3">&lt;xref:System.Func%602?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A lambda expression is the most convenient way to create that delegate.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">&lt;xref:System.Linq.Queryable.Select%2A?displayProperty=nameWithType&gt;</ph> method in the <ph id="ph2">&lt;xref:System.Linq.Queryable?displayProperty=nameWithType&gt;</ph> class (as you do in LINQ to SQL) the parameter type is an expression tree type <bpt id="p1">[</bpt><ph id="ph3">`Expression&lt;Func&lt;TSource,TResult&gt;&gt;`</ph><ept id="p1">](&lt;xref:System.Linq.Expressions.Expression%601&gt;)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Again, a lambda expression is just a very concise way to construct that expression tree.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The lambdas allow the <ph id="ph1">`Select`</ph> calls to look similar although in fact the type of object created from the lambda is different.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>All restrictions that apply to <bpt id="p1">[</bpt>anonymous methods<ept id="p1">](anonymous-methods.md)</ept> also apply to lambda expressions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Expression lambdas</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A lambda expression with an expression on the right side of the <ph id="ph1">`=&gt;`</ph> operator is called an <bpt id="p1">*</bpt>expression lambda<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Expression lambdas are used extensively in the construction of <bpt id="p1">[</bpt>expression trees<ept id="p1">](../concepts/expression-trees/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An expression lambda returns the result of the expression and takes the following basic form:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The parentheses are optional only if the lambda has one input parameter; otherwise they are required.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specify zero input parameters with empty parentheses:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Two or more input parameters are separated by commas enclosed in parentheses:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Sometimes it's impossible for the compiler to infer the input types.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can specify the types explicitly as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Input parameter types must be all explicit or all implicit; otherwise, a <bpt id="p1">[</bpt>CS0748<ept id="p1">](../../misc/cs0748.md)</ept> compiler error occurs.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The body of an expression lambda can consist of a method call.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, if you are creating expression trees that are evaluated outside the context of the .NET common language runtime, such as in SQL Server, you should not use method calls in lambda expressions.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The methods will have no meaning outside the context of the .NET common language runtime.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Statement lambdas</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A statement lambda resembles an expression lambda except that the statement(s) is enclosed in braces:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The body of a statement lambda can consist of any number of statements; however, in practice there are typically no more than two or three.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Statement lambdas, like anonymous methods, cannot be used to create expression trees.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Async lambdas</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can easily create lambda expressions and statements that incorporate asynchronous processing by using the <bpt id="p1">[</bpt>async<ept id="p1">](../../language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>await<ept id="p2">](../../language-reference/keywords/await.md)</ept> keywords.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, the following Windows Forms example contains an event handler that calls and awaits an async method, <ph id="ph1">`ExampleMethodAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can add the same event handler by using an async lambda.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To add this handler, add an <ph id="ph1">`async`</ph> modifier before the lambda parameter list, as the following example shows:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information about how to create and use async methods, see <bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Lambda expressions and tuples</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, the C# language provides built-in support for <bpt id="p1">[</bpt>tuples<ept id="p1">](../../tuples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can provide a tuple as an argument to a lambda expression, and your lambda expression can also return a tuple.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In some cases, the C# compiler uses type inference to determine the types of tuple components.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You define a tuple by enclosing a comma-delimited list of its components in parentheses.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example uses tuple with three components to pass a sequence of numbers to a lambda expression, which doubles each value and returns a tuple with three components that contains the result of the multiplications.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Ordinarily, the fields of a tuple are named <ph id="ph1">`Item1`</ph>, <ph id="ph2">`Item2`</ph>, etc. You can, however, define a tuple with named components, as the following example does.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information about C# tuples, see <bpt id="p1">[</bpt>C# tuple types<ept id="p1">](../../tuples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Lambdas with the standard query operators</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>LINQ to Objects, among other implementations, have an input parameter whose type is one of the <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> family of generic delegates.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>These delegates use type parameters to define the number and type of input parameters, and the return type of the delegate.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Func`</ph> delegates are very useful for encapsulating user-defined expressions that are applied to each element in a set of source data.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, consider the <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate type:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The delegate can be instantiated as a <ph id="ph1">`Func&lt;int, bool&gt;`</ph> instance where <ph id="ph2">`int`</ph> is an input parameter and <ph id="ph3">`bool`</ph> is the return value.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The return value is always specified in the last type parameter.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`Func&lt;int, string, bool&gt;`</ph> defines a delegate with two input parameters, <ph id="ph2">`int`</ph> and <ph id="ph3">`string`</ph>, and a return type of <ph id="ph4">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`Func`</ph> delegate, when it's invoked, returns Boolean value that indicates whether the input parameter is equal to five:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can also supply a lambda expression when the argument type is an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, for example in the standard query operators that are defined in the <ph id="ph2">&lt;xref:System.Linq.Queryable&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you specify an <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> argument, the lambda is compiled to an expression tree.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> standard query operator:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The compiler can infer the type of the input parameter, or you can also specify it explicitly.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This particular lambda expression counts those integers (<ph id="ph1">`n`</ph>) which when divided by two have a remainder of 1.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example produces a sequence that contains all elements in the <ph id="ph1">`numbers`</ph> array that precede the 9, because that's the first number in the sequence that doesn't meet the condition:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following example specifies multiple input parameters by enclosing them in parentheses.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The method returns all the elements in the <ph id="ph1">`numbers`</ph> array until it encounters a number whose value is less than its ordinal position in the array:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Type inference in lambda expressions</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When writing lambdas, you often don't have to specify a type for the input parameters because the compiler can infer the type based on the lambda body, the parameter types, and other factors as described in the C# language specification.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For most of the standard query operators, the first input is the type of the elements in the source sequence.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If you are querying an <ph id="ph1">`IEnumerable&lt;Customer&gt;`</ph>, then the input variable is inferred to be a <ph id="ph2">`Customer`</ph> object, which means you have access to its methods and properties:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The general rules for type inference for lambdas are as follows:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The lambda must contain the same number of parameters as the delegate type.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Each input parameter in the lambda must be implicitly convertible to its corresponding delegate parameter.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The return value of the lambda (if any) must be implicitly convertible to the delegate's return type.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Note that lambda expressions in themselves don't have a type because the common type system has no intrinsic concept of "lambda expression."</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>However, it's sometimes convenient to speak informally of the "type" of a lambda expression.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In these cases the type refers to the delegate type or <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression&gt;</ph> type to which the lambda expression is converted.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Variable scope in lambda expressions</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Lambdas can refer to <bpt id="p1">*</bpt>outer variables<ept id="p1">*</ept> (see <bpt id="p2">[</bpt>Anonymous methods<ept id="p2">](anonymous-methods.md)</ept>) that are in scope in the method that defines the lambda expression, or in scope in the type that contains the lambda expression.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Variables that are captured in this manner are stored for use in the lambda expression even if the variables would otherwise go out of scope and be garbage collected.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>An outer variable must be definitely assigned before it can be consumed in a lambda expression.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example demonstrates these rules:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following rules apply to variable scope in lambda expressions:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>A variable that is captured will not be garbage-collected until the delegate that references it becomes eligible for garbage collection.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Variables introduced within a lambda expression are not visible in the enclosing method.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A lambda expression cannot directly capture an <bpt id="p1">[</bpt>in<ept id="p1">](../../language-reference/keywords/in-parameter-modifier.md)</ept>, <bpt id="p2">[</bpt>ref<ept id="p2">](../../language-reference/keywords/ref.md)</ept>, or <bpt id="p3">[</bpt>out<ept id="p3">](../../language-reference/keywords/out-parameter-modifier.md)</ept> parameter from the enclosing method.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>return<ept id="p1">](../../language-reference/keywords/return.md)</ept> statement in a lambda expression doesn't cause the enclosing method to return.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A lambda expression cannot contain a <bpt id="p1">[</bpt>goto<ept id="p1">](../../language-reference/keywords/goto.md)</ept>, <bpt id="p2">[</bpt>break<ept id="p2">](../../language-reference/keywords/break.md)</ept>, or <bpt id="p3">[</bpt>continue<ept id="p3">](../../language-reference/keywords/continue.md)</ept> statement if the target of that jump statement is outside the lambda expression block.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It's also an error to have a jump statement outside the lambda expression block if the target is inside the block.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Anonymous function expressions<ept id="p1">](~/_csharplang/spec/expressions.md#anonymous-function-expressions)</ept> section of the <bpt id="p2">[</bpt>C# language specification<ept id="p2">](~/_csharplang/spec/introduction.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Featured book chapter</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates, Events, and Lambda Expressions<ept id="p1">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/ff518994%28v=orm.10%29)</ept> in <bpt id="p2">[</bpt>C# 3.0 Cookbook, Third Edition: More than 250 solutions for C# 3.0 programmers<ept id="p2">](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2008/ff518995%28v=orm.10%29)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ (Language-Integrated Query)<ept id="p1">](../concepts/linq/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](anonymous-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression Trees<ept id="p1">](../concepts/expression-trees/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local functions compared to lambda expressions<ept id="p1">](../../local-functions-vs-lambdas.md)</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicitly typed lambda expressions<ept id="p1">](../../implicitly-typed-lambda-expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2008 C# Samples (see LINQ Sample Queries files and XQuery program)<ept id="p1">](https://code.msdn.microsoft.com/Visual-Studio-2008-C-d295cdba)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Recursive lambda expressions<ept id="p1">](https://blogs.msdn.microsoft.com/madst/2007/05/11/recursive-lambda-expressions/)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>