{"content":"---\ntitle: \"How to: Join Two Collections (LINQ to XML) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 7b817ede-911a-4cff-9dd3-639c3fc228c9\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Join Two Collections (LINQ to XML) (C#)\nAn element or attribute in an XML document can sometimes refer to another element or attribute. For example, the [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md) XML document contains a list of customers and a list of orders. Each `Customer` element contains a `CustomerID` attribute. Each `Order` element contains a `CustomerID` element. The `CustomerID` element in each order refers to the `CustomerID` attribute in a customer.  \n  \n The topic [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md) contains an XSD that can be used to validate this document. It uses the `xs:key` and `xs:keyref` features of XSD to establish that the `CustomerID` attribute of the `Customer` element is a key, and to establish a relationship between the `CustomerID` element in each `Order` element and the `CustomerID` attribute in each `Customer` element.  \n  \n With [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)], you can take advantage of this relationship by using the `join` clause.  \n  \n Note that because there is no index available, such joining will have poor runtime performance.  \n  \n For more detailed information about `join`, see [Join Operations (C#)](../../../../csharp/programming-guide/concepts/linq/join-operations.md).  \n  \n## Example  \n The following example joins the `Customer` elements to the `Order` elements, and generates a new XML document that includes the `CompanyName` element in the orders.  \n  \n Before executing the query, the example validates that the document complies with the schema in [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md). This ensures that the join clause will always work.  \n  \n This query first retrieves all `Customer` elements, and then joins them to the `Order` elements. It selects only the orders for customers with a `CustomerID` greater than \"K\". It then projects a new `Order` element that contains the customer information within each order.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md).  \n  \n This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md).  \n  \n Note that joining in this fashion will not perform very well. Joins are performed via a linear search. There are no hash tables or indexes to help with performance.  \n  \n```csharp  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", \"CustomersOrders.xsd\");  \n  \nConsole.Write(\"Attempting to validate, \");  \nXDocument custOrdDoc = XDocument.Load(\"CustomersOrders.xml\");  \n  \nbool errors = false;  \ncustOrdDoc.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrdDoc {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nif (!errors)  \n{  \n    // Join customers and orders, and create a new XML document with  \n    // a different shape.  \n  \n    // The new document contains orders only for customers with a  \n    // CustomerID > 'K'  \n    XElement custOrd = custOrdDoc.Element(\"Root\");  \n    XElement newCustOrd = new XElement(\"Root\",  \n        from c in custOrd.Element(\"Customers\").Elements(\"Customer\")  \n        join o in custOrd.Element(\"Orders\").Elements(\"Order\")  \n                   on (string)c.Attribute(\"CustomerID\") equals  \n                      (string)o.Element(\"CustomerID\")  \n        where ((string)c.Attribute(\"CustomerID\")).CompareTo(\"K\") > 0  \n        select new XElement(\"Order\",  \n            new XElement(\"CustomerID\", (string)c.Attribute(\"CustomerID\")),  \n            new XElement(\"CompanyName\", (string)c.Element(\"CompanyName\")),  \n            new XElement(\"ContactName\", (string)c.Element(\"ContactName\")),  \n            new XElement(\"EmployeeID\", (string)o.Element(\"EmployeeID\")),  \n            new XElement(\"OrderDate\", (DateTime)o.Element(\"OrderDate\"))  \n        )  \n    );  \n    Console.WriteLine(newCustOrd);  \n}  \n```  \n  \n This code produces the following output:  \n  \n```  \nAttempting to validate, custOrdDoc validated  \n<Root>  \n  <Order>  \n    <CustomerID>LAZYK</CustomerID>  \n    <CompanyName>Lazy K Kountry Store</CompanyName>  \n    <ContactName>John Steel</ContactName>  \n    <EmployeeID>1</EmployeeID>  \n    <OrderDate>1997-03-21T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LAZYK</CustomerID>  \n    <CompanyName>Lazy K Kountry Store</CompanyName>  \n    <ContactName>John Steel</ContactName>  \n    <EmployeeID>8</EmployeeID>  \n    <OrderDate>1997-05-22T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>1</EmployeeID>  \n    <OrderDate>1997-06-25T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>8</EmployeeID>  \n    <OrderDate>1997-10-27T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>6</EmployeeID>  \n    <OrderDate>1997-11-10T00:00:00</OrderDate>  \n  </Order>  \n  <Order>  \n    <CustomerID>LETSS</CustomerID>  \n    <CompanyName>Let's Stop N Shop</CompanyName>  \n    <ContactName>Jaime Yorres</ContactName>  \n    <EmployeeID>4</EmployeeID>  \n    <OrderDate>1998-02-12T00:00:00</OrderDate>  \n  </Order>  \n</Root>  \n```  \n  \n## See Also  \n [Advanced Query Techniques (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)","nodes":[{"pos":[12,76],"content":"How to: Join Two Collections (LINQ to XML) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Join Two Collections (LINQ to XML) (C#) | Microsoft Docs","pos":[0,64]}]},{"pos":[361,408],"content":"How to: Join Two Collections (LINQ to XML) (C#)","linkify":"How to: Join Two Collections (LINQ to XML) (C#)","nodes":[{"content":"How to: Join Two Collections (LINQ to XML) (C#)","pos":[0,47]}]},{"content":"An element or attribute in an XML document can sometimes refer to another element or attribute.","pos":[409,504]},{"content":"For example, the <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept> XML document contains a list of customers and a list of orders.","pos":[505,745],"source":" For example, the [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md) XML document contains a list of customers and a list of orders."},{"content":"Each <ph id=\"ph1\">`Customer`</ph> element contains a <ph id=\"ph2\">`CustomerID`</ph> attribute.","pos":[746,804],"source":" Each `Customer` element contains a `CustomerID` attribute."},{"content":"Each <ph id=\"ph1\">`Order`</ph> element contains a <ph id=\"ph2\">`CustomerID`</ph> element.","pos":[805,858],"source":" Each `Order` element contains a `CustomerID` element."},{"content":"The <ph id=\"ph1\">`CustomerID`</ph> element in each order refers to the <ph id=\"ph2\">`CustomerID`</ph> attribute in a customer.","pos":[859,949],"source":" The `CustomerID` element in each order refers to the `CustomerID` attribute in a customer."},{"content":"The topic <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)</ept> contains an XSD that can be used to validate this document.","pos":[956,1158],"source":"The topic [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md) contains an XSD that can be used to validate this document."},{"content":"It uses the <ph id=\"ph1\">`xs:key`</ph> and <ph id=\"ph2\">`xs:keyref`</ph> features of XSD to establish that the <ph id=\"ph3\">`CustomerID`</ph> attribute of the <ph id=\"ph4\">`Customer`</ph> element is a key, and to establish a relationship between the <ph id=\"ph5\">`CustomerID`</ph> element in each <ph id=\"ph6\">`Order`</ph> element and the <ph id=\"ph7\">`CustomerID`</ph> attribute in each <ph id=\"ph8\">`Customer`</ph> element.","pos":[1159,1440],"source":" It uses the `xs:key` and `xs:keyref` features of XSD to establish that the `CustomerID` attribute of the `Customer` element is a key, and to establish a relationship between the `CustomerID` element in each `Order` element and the `CustomerID` attribute in each `Customer` element."},{"pos":[1447,1627],"content":"With <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>, you can take advantage of this relationship by using the <ph id=\"ph2\">`join`</ph> clause.","source":"With [!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)], you can take advantage of this relationship by using the `join` clause."},{"content":"Note that because there is no index available, such joining will have poor runtime performance.","pos":[1634,1729]},{"pos":[1736,1878],"content":"For more detailed information about <ph id=\"ph1\">`join`</ph>, see <bpt id=\"p1\">[</bpt>Join Operations (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/join-operations.md)</ept>.","source":"For more detailed information about `join`, see [Join Operations (C#)](../../../../csharp/programming-guide/concepts/linq/join-operations.md)."},{"pos":[1887,1894],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1898,2062],"content":"The following example joins the <ph id=\"ph1\">`Customer`</ph> elements to the <ph id=\"ph2\">`Order`</ph> elements, and generates a new XML document that includes the <ph id=\"ph3\">`CompanyName`</ph> element in the orders.","source":"The following example joins the `Customer` elements to the `Order` elements, and generates a new XML document that includes the `CompanyName` element in the orders."},{"content":"Before executing the query, the example validates that the document complies with the schema in <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)</ept>.","pos":[2069,2298],"source":"Before executing the query, the example validates that the document complies with the schema in [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)."},{"content":"This ensures that the join clause will always work.","pos":[2299,2350]},{"content":"This query first retrieves all <ph id=\"ph1\">`Customer`</ph> elements, and then joins them to the <ph id=\"ph2\">`Order`</ph> elements.","pos":[2357,2453],"source":"This query first retrieves all `Customer` elements, and then joins them to the `Order` elements."},{"content":"It selects only the orders for customers with a <ph id=\"ph1\">`CustomerID`</ph> greater than \"K\".","pos":[2454,2532],"source":" It selects only the orders for customers with a `CustomerID` greater than \"K\"."},{"content":"It then projects a new <ph id=\"ph1\">`Order`</ph> element that contains the customer information within each order.","pos":[2533,2629],"source":" It then projects a new `Order` element that contains the customer information within each order."},{"pos":[2636,2842],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)."},{"pos":[2849,3026],"content":"This example uses the following XSD schema: <bpt id=\"p1\">[</bpt>Sample XSD File: Customers and Orders<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)</ept>.","source":"This example uses the following XSD schema: [Sample XSD File: Customers and Orders](../../../../csharp/programming-guide/concepts/linq/sample-xsd-file-customers-and-orders1.md)."},{"content":"Note that joining in this fashion will not perform very well.","pos":[3033,3094]},{"content":"Joins are performed via a linear search.","pos":[3095,3135]},{"content":"There are no hash tables or indexes to help with performance.","pos":[3136,3197]},{"content":"This code produces the following output:","pos":[4858,4898]},{"pos":[6436,6444],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6448,6587],"content":"<bpt id=\"p1\">[</bpt>Advanced Query Techniques (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)</ept>","source":"[Advanced Query Techniques (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/advanced-query-techniques-linq-to-xml.md)"}]}