{"content":"---\ntitle: \"How to: Convert Between Hexadecimal Strings and Numeric Types - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"hexadecimal strings [C#], converting to numeric type\"\n  - \"conversions [C#], hexidecimal strings\"\n  - \"strings [C#], converting hexadecimal strings\"\n  - \"hexadecimal strings [C#]\"\nms.assetid: 7115c49f-7d1d-40c3-8bd9-aae0cc1d46b6\n---\n# How to: Convert Between Hexadecimal Strings and Numeric Types (C# Programming Guide)\nThese examples show you how to perform the following tasks:  \n  \n-   Obtain the hexadecimal value of each character in a [string](../../../csharp/language-reference/keywords/string.md).  \n  \n-   Obtain the [char](../../../csharp/language-reference/keywords/char.md) that corresponds to each value in a hexadecimal string.  \n  \n-   Convert a hexadecimal `string` to an [int](../../../csharp/language-reference/keywords/int.md).  \n  \n-   Convert a hexadecimal `string` to a [float](../../../csharp/language-reference/keywords/float.md).  \n  \n-   Convert a [byte](../../../csharp/language-reference/keywords/byte.md) array to a hexadecimal `string`.  \n  \n## Example  \n This example outputs the hexadecimal value of each character in a `string`. First it parses the `string` to an array of characters. Then it calls <xref:System.Convert.ToInt32%28System.Char%29> on each character to obtain its numeric value. Finally, it formats the number as its hexadecimal representation in a `string`.  \n  \n [!code-csharp[csProgGuideTypes#30](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#30)]  \n  \n## Example  \n This example parses a `string` of hexadecimal values and outputs the character corresponding to each hexadecimal value. First it calls the [Split(Char\\[\\])](xref:System.String.Split(System.Char[])) method to obtain each hexadecimal value as an individual `string` in an array. Then it calls <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> to convert the hexadecimal value to a decimal value represented as an [int](../../../csharp/language-reference/keywords/int.md). It shows two different ways to obtain the character corresponding to that character code. The first technique uses <xref:System.Char.ConvertFromUtf32%28System.Int32%29>, which returns the character corresponding to the integer argument as a `string`. The second technique explicitly casts the `int` to a [char](../../../csharp/language-reference/keywords/char.md).  \n  \n [!code-csharp[csProgGuideTypes#31](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#31)]  \n  \n## Example  \n This example shows another way to convert a hexadecimal `string` to an integer, by calling the <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method.  \n  \n [!code-csharp[csProgGuideTypes#32](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#32)]  \n  \n## Example  \n The following example shows how to convert a hexadecimal `string` to a [float](../../../csharp/language-reference/keywords/float.md) by using the <xref:System.BitConverter?displayProperty=nameWithType> class and the <xref:System.UInt32.Parse%2A?displayProperty=nameWithType> method.  \n  \n [!code-csharp[csProgGuideTypes#39](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#39)]  \n  \n## Example  \n The following example shows how to convert a [byte](../../../csharp/language-reference/keywords/byte.md) array to a hexadecimal string by using the <xref:System.BitConverter?displayProperty=nameWithType> class.  \n  \n [!code-csharp[csProgGuideTypes#38](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsProgGuideTypes/CS/Class1.cs#38)]  \n  \n## See also\n\n- [Standard Numeric Format Strings](../../../standard/base-types/standard-numeric-format-strings.md)\n- [Types](../../../csharp/programming-guide/types/index.md)\n- [How to: Determine Whether a String Represents a Numeric Value](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)\n","nodes":[{"pos":[4,393],"embed":true,"restype":"x-metadata","content":"title: \"How to: Convert Between Hexadecimal Strings and Numeric Types - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"hexadecimal strings [C#], converting to numeric type\"\n  - \"conversions [C#], hexidecimal strings\"\n  - \"strings [C#], converting hexadecimal strings\"\n  - \"hexadecimal strings [C#]\"\nms.assetid: 7115c49f-7d1d-40c3-8bd9-aae0cc1d46b6","nodes":[{"content":"How to: Convert Between Hexadecimal Strings and Numeric Types - C# Programming Guide","nodes":[{"pos":[0,84],"content":"How to: Convert Between Hexadecimal Strings and Numeric Types - C# Programming Guide","nodes":[{"content":"How to: Convert Between Hexadecimal Strings and Numeric Types - C# Programming Guide","pos":[0,84]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[400,484],"content":"How to: Convert Between Hexadecimal Strings and Numeric Types (C# Programming Guide)","linkify":"How to: Convert Between Hexadecimal Strings and Numeric Types (C# Programming Guide)","nodes":[{"content":"How to: Convert Between Hexadecimal Strings and Numeric Types (C# Programming Guide)","pos":[0,84]}]},{"content":"These examples show you how to perform the following tasks:","pos":[485,544]},{"pos":[554,670],"content":"Obtain the hexadecimal value of each character in a <bpt id=\"p1\">[</bpt>string<ept id=\"p1\">](../../../csharp/language-reference/keywords/string.md)</ept>.","source":"Obtain the hexadecimal value of each character in a [string](../../../csharp/language-reference/keywords/string.md)."},{"pos":[680,806],"content":"Obtain the <bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](../../../csharp/language-reference/keywords/char.md)</ept> that corresponds to each value in a hexadecimal string.","source":"Obtain the [char](../../../csharp/language-reference/keywords/char.md) that corresponds to each value in a hexadecimal string."},{"pos":[816,911],"content":"Convert a hexadecimal <ph id=\"ph1\">`string`</ph> to an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>.","source":"Convert a hexadecimal `string` to an [int](../../../csharp/language-reference/keywords/int.md)."},{"pos":[921,1019],"content":"Convert a hexadecimal <ph id=\"ph1\">`string`</ph> to a <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept>.","source":"Convert a hexadecimal `string` to a [float](../../../csharp/language-reference/keywords/float.md)."},{"pos":[1029,1131],"content":"Convert a <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](../../../csharp/language-reference/keywords/byte.md)</ept> array to a hexadecimal <ph id=\"ph1\">`string`</ph>.","source":"Convert a [byte](../../../csharp/language-reference/keywords/byte.md) array to a hexadecimal `string`."},{"pos":[1140,1147],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example outputs the hexadecimal value of each character in a <ph id=\"ph1\">`string`</ph>.","pos":[1151,1226],"source":"This example outputs the hexadecimal value of each character in a `string`."},{"content":"First it parses the <ph id=\"ph1\">`string`</ph> to an array of characters.","pos":[1227,1282],"source":" First it parses the `string` to an array of characters."},{"content":"Then it calls <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.Char%29&gt;</ph> on each character to obtain its numeric value.","pos":[1283,1390],"source":" Then it calls <xref:System.Convert.ToInt32%28System.Char%29> on each character to obtain its numeric value."},{"content":"Finally, it formats the number as its hexadecimal representation in a <ph id=\"ph1\">`string`</ph>.","pos":[1391,1470],"source":" Finally, it formats the number as its hexadecimal representation in a `string`."},{"pos":[1602,1609],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example parses a <ph id=\"ph1\">`string`</ph> of hexadecimal values and outputs the character corresponding to each hexadecimal value.","pos":[1613,1732],"source":"This example parses a `string` of hexadecimal values and outputs the character corresponding to each hexadecimal value."},{"content":"First it calls the <bpt id=\"p1\">[</bpt>Split(Char<ph id=\"ph1\">\\[</ph><ph id=\"ph2\">\\]</ph>)<ept id=\"p1\">](xref:System.String.Split(System.Char[]))</ept> method to obtain each hexadecimal value as an individual <ph id=\"ph3\">`string`</ph> in an array.","pos":[1733,1889],"source":" First it calls the [Split(Char\\[\\])](xref:System.String.Split(System.Char[])) method to obtain each hexadecimal value as an individual `string` in an array."},{"content":"Then it calls <ph id=\"ph1\">&lt;xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29&gt;</ph> to convert the hexadecimal value to a decimal value represented as an <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>. It shows two different ways to obtain the character corresponding to that character code.","pos":[1890,2186],"source":" Then it calls <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29> to convert the hexadecimal value to a decimal value represented as an [int](../../../csharp/language-reference/keywords/int.md). It shows two different ways to obtain the character corresponding to that character code."},{"content":"The first technique uses <ph id=\"ph1\">&lt;xref:System.Char.ConvertFromUtf32%28System.Int32%29&gt;</ph>, which returns the character corresponding to the integer argument as a <ph id=\"ph2\">`string`</ph>.","pos":[2187,2347],"source":" The first technique uses <xref:System.Char.ConvertFromUtf32%28System.Int32%29>, which returns the character corresponding to the integer argument as a `string`."},{"content":"The second technique explicitly casts the <ph id=\"ph1\">`int`</ph> to a <bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](../../../csharp/language-reference/keywords/char.md)</ept>.","pos":[2348,2461],"source":" The second technique explicitly casts the `int` to a [char](../../../csharp/language-reference/keywords/char.md)."},{"pos":[2593,2600],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2604,2787],"content":"This example shows another way to convert a hexadecimal <ph id=\"ph1\">`string`</ph> to an integer, by calling the <ph id=\"ph2\">&lt;xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29&gt;</ph> method.","source":"This example shows another way to convert a hexadecimal `string` to an integer, by calling the <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method."},{"pos":[2919,2926],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2930,3212],"content":"The following example shows how to convert a hexadecimal <ph id=\"ph1\">`string`</ph> to a <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](../../../csharp/language-reference/keywords/float.md)</ept> by using the <ph id=\"ph2\">&lt;xref:System.BitConverter?displayProperty=nameWithType&gt;</ph> class and the <ph id=\"ph3\">&lt;xref:System.UInt32.Parse%2A?displayProperty=nameWithType&gt;</ph> method.","source":"The following example shows how to convert a hexadecimal `string` to a [float](../../../csharp/language-reference/keywords/float.md) by using the <xref:System.BitConverter?displayProperty=nameWithType> class and the <xref:System.UInt32.Parse%2A?displayProperty=nameWithType> method."},{"pos":[3344,3351],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3355,3565],"content":"The following example shows how to convert a <bpt id=\"p1\">[</bpt>byte<ept id=\"p1\">](../../../csharp/language-reference/keywords/byte.md)</ept> array to a hexadecimal string by using the <ph id=\"ph1\">&lt;xref:System.BitConverter?displayProperty=nameWithType&gt;</ph> class.","source":"The following example shows how to convert a [byte](../../../csharp/language-reference/keywords/byte.md) array to a hexadecimal string by using the <xref:System.BitConverter?displayProperty=nameWithType> class."},{"pos":[3697,3705],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3709,3807],"content":"<bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](../../../standard/base-types/standard-numeric-format-strings.md)</ept>","source":"[Standard Numeric Format Strings](../../../standard/base-types/standard-numeric-format-strings.md)"},{"pos":[3810,3867],"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/programming-guide/types/index.md)</ept>","source":"[Types](../../../csharp/programming-guide/types/index.md)"},{"pos":[3870,4040],"content":"<bpt id=\"p1\">[</bpt>How to: Determine Whether a String Represents a Numeric Value<ept id=\"p1\">](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)</ept>","source":"[How to: Determine Whether a String Represents a Numeric Value](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)"}]}