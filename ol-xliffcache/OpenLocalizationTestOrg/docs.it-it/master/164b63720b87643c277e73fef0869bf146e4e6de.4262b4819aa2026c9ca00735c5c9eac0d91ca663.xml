{"content":"---\ntitle: \"How to: Hit Test Geometry in a Visual | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"hit tests, on visual objects comprising Geometry objects\"\n  - \"visual objects, hit tests on\"\n  - \"Geometry objects, visual objects comprising\"\nms.assetid: 8bf2643f-d7f9-4cb4-9ea6-5b893c23200d\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Hit Test Geometry in a Visual\nThis example shows how to perform a hit test on a visual object that is composed of one or more <xref:System.Windows.Media.Geometry> objects.  \n  \n## Example  \n The following example shows how to retrieve the <xref:System.Windows.Media.DrawingGroup> from a visual object that uses the <xref:System.Windows.Media.VisualTreeHelper.GetDrawing%2A> method. A hit test is then performed on the rendered content of each drawing in the <xref:System.Windows.Media.DrawingGroup> to determine which geometry was hit.  \n  \n> [!NOTE]\n>  In most cases, you would use the <xref:System.Windows.Media.VisualTreeHelper.HitTest%2A> method to determine whether a point intersects any of the rendered content of a visual.  \n  \n [!code-csharp[VisualsOverview#VisualsOverviewSnippet4](../../../../samples/snippets/csharp/VS_Snippets_Wpf/VisualsOverview/CSharp/Window1.xaml.cs#visualsoverviewsnippet4)]\n [!code-vb[VisualsOverview#VisualsOverviewSnippet4](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/VisualsOverview/visualbasic/window1.xaml.vb#visualsoverviewsnippet4)]  \n  \n The <xref:System.Windows.Media.Geometry.FillContains%2A> method is an overloaded method that allows you to hit test by using a specified <xref:System.Windows.Point> or <xref:System.Windows.Media.Geometry>. If a geometry is stroked, the stroke can extend outside the fill bounds. In which case, you may want to call <xref:System.Windows.Media.Geometry.StrokeContains%2A> in addition to <xref:System.Windows.Media.Geometry.FillContains%2A>.  \n  \n You can also provide a <xref:System.Windows.Media.ToleranceType> that is used for the purposes of Bezier flattening.  \n  \n> [!NOTE]\n>  This sample does not take into account any transforms or clipping that may be applied to the geometry. In addition, this sample will not work with a styled control, since it does not have any drawings directly associated with it.  \n  \n## See Also  \n [Hit Testing in the Visual Layer](../../../../docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)   \n [Hit Test Using Geometry as a Parameter](../../../../docs/framework/wpf/graphics-multimedia/how-to-hit-test-using-geometry-as-a-parameter.md)","nodes":[{"pos":[4,537],"embed":true,"restype":"x-metadata","content":"title: \"How to: Hit Test Geometry in a Visual | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"hit tests, on visual objects comprising Geometry objects\"\n  - \"visual objects, hit tests on\"\n  - \"Geometry objects, visual objects comprising\"\nms.assetid: 8bf2643f-d7f9-4cb4-9ea6-5b893c23200d\ncaps.latest.revision: 12\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Hit Test Geometry in a Visual | Microsoft Docs","nodes":[{"pos":[0,54],"content":"How to: Hit Test Geometry in a Visual | Microsoft Docs","nodes":[{"content":"How to: Hit Test Geometry in a Visual | Microsoft Docs","pos":[0,54]}]}],"path":["title"]}],"yml":true},{"pos":[544,581],"content":"How to: Hit Test Geometry in a Visual","linkify":"How to: Hit Test Geometry in a Visual","nodes":[{"content":"How to: Hit Test Geometry in a Visual","pos":[0,37]}]},{"content":"This example shows how to perform a hit test on a visual object that is composed of one or more <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects.","pos":[582,723],"source":"This example shows how to perform a hit test on a visual object that is composed of one or more <xref:System.Windows.Media.Geometry> objects."},{"pos":[732,739],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to retrieve the <ph id=\"ph1\">&lt;xref:System.Windows.Media.DrawingGroup&gt;</ph> from a visual object that uses the <ph id=\"ph2\">&lt;xref:System.Windows.Media.VisualTreeHelper.GetDrawing%2A&gt;</ph> method.","pos":[743,933],"source":"The following example shows how to retrieve the <xref:System.Windows.Media.DrawingGroup> from a visual object that uses the <xref:System.Windows.Media.VisualTreeHelper.GetDrawing%2A> method."},{"content":"A hit test is then performed on the rendered content of each drawing in the <ph id=\"ph1\">&lt;xref:System.Windows.Media.DrawingGroup&gt;</ph> to determine which geometry was hit.","pos":[934,1087],"source":" A hit test is then performed on the rendered content of each drawing in the <xref:System.Windows.Media.DrawingGroup> to determine which geometry was hit."},{"pos":[1095,1282],"content":"[!NOTE]\n In most cases, you would use the <xref:System.Windows.Media.VisualTreeHelper.HitTest%2A> method to determine whether a point intersects any of the rendered content of a visual.","leadings":["","> "],"nodes":[{"content":"In most cases, you would use the <ph id=\"ph1\">&lt;xref:System.Windows.Media.VisualTreeHelper.HitTest%2A&gt;</ph> method to determine whether a point intersects any of the rendered content of a visual.","pos":[9,185],"source":"In most cases, you would use the <xref:System.Windows.Media.VisualTreeHelper.HitTest%2A> method to determine whether a point intersects any of the rendered content of a visual."}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry.FillContains%2A&gt;</ph> method is an overloaded method that allows you to hit test by using a specified <ph id=\"ph2\">&lt;xref:System.Windows.Point&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Media.Geometry&gt;</ph>.","pos":[1646,1851],"source":"The <xref:System.Windows.Media.Geometry.FillContains%2A> method is an overloaded method that allows you to hit test by using a specified <xref:System.Windows.Point> or <xref:System.Windows.Media.Geometry>."},{"content":"If a geometry is stroked, the stroke can extend outside the fill bounds.","pos":[1852,1924]},{"content":"In which case, you may want to call <ph id=\"ph1\">&lt;xref:System.Windows.Media.Geometry.StrokeContains%2A&gt;</ph> in addition to <ph id=\"ph2\">&lt;xref:System.Windows.Media.Geometry.FillContains%2A&gt;</ph>.","pos":[1925,2084],"source":" In which case, you may want to call <xref:System.Windows.Media.Geometry.StrokeContains%2A> in addition to <xref:System.Windows.Media.Geometry.FillContains%2A>."},{"content":"You can also provide a <ph id=\"ph1\">&lt;xref:System.Windows.Media.ToleranceType&gt;</ph> that is used for the purposes of Bezier flattening.","pos":[2091,2207],"source":"You can also provide a <xref:System.Windows.Media.ToleranceType> that is used for the purposes of Bezier flattening."},{"pos":[2215,2455],"content":"[!NOTE]\n This sample does not take into account any transforms or clipping that may be applied to the geometry. In addition, this sample will not work with a styled control, since it does not have any drawings directly associated with it.","leadings":["","> "],"nodes":[{"content":"This sample does not take into account any transforms or clipping that may be applied to the geometry. In addition, this sample will not work with a styled control, since it does not have any drawings directly associated with it.","pos":[9,238],"nodes":[{"content":"This sample does not take into account any transforms or clipping that may be applied to the geometry.","pos":[0,102]},{"content":"In addition, this sample will not work with a styled control, since it does not have any drawings directly associated with it.","pos":[103,229]}]}]},{"pos":[2464,2472],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Hit Testing in the Visual Layer<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)</ept><ph id=\"ph1\"> </ph>","pos":[2476,2597],"source":"[Hit Testing in the Visual Layer](../../../../docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md) "},{"content":"<bpt id=\"p1\">[</bpt>Hit Test Using Geometry as a Parameter<ept id=\"p1\">](../../../../docs/framework/wpf/graphics-multimedia/how-to-hit-test-using-geometry-as-a-parameter.md)</ept>","pos":[2601,2742],"source":"[Hit Test Using Geometry as a Parameter](../../../../docs/framework/wpf/graphics-multimedia/how-to-hit-test-using-geometry-as-a-parameter.md)"}]}