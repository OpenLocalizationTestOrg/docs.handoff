<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="feature-specifics.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d9c68c1ba08ea447a3f6c573d41111cb007a057</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\feature-specifics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8099b92c7c5cddaa83d79af3372c30f75d343e58</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc003109b845218c7e9eeea092e6c59db71d28e5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Windows Workflow Foundation Feature Specifics | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation Feature Specifics</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[netfx40_long](../../../includes/netfx40-long-md.md)]</ph> adds a number of features to Windows Workflow Foundation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This document describes a number of the new features, and gives details about scenarios in which they may be useful.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Messaging Activities</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The messaging activities (<ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph>) are used to send and receive <ph id="ph5">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> messages from your workflow.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activities are used to form a <ph id="ph3">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> service operation that is exposed via WSDL just like standard <ph id="ph4">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> web services.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> are used to consume a web service similar to a WCF <ph id="ph3">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph>; an <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept> experience also exists for Workflow Foundation that generates pre-configured activities.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Getting Started with Messaging Activities</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>, create a WCF Workflow Service Application project.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> pair will be placed on your canvas.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Right-click on the project and select <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Point to an existing web service WSDL and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Build your project to show the generated activities (implemented using <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph>) in your toolbox.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Samples for these activities can be found in the following sections:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Basic: <bpt id="p1">[</bpt>Services<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/services.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Scenarios: <bpt id="p1">[</bpt>Services<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/services.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conceptual documentation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204801)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Messaging activities designer documentation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204802)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Messaging Activities Example Scenario</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`BestPriceFinder`</ph> service calls out to multiple airline services to find the best ticket price for a particular route.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Implementing this scenario would require you to use the message activities to receive the price request, retrieve the prices from the back-end services, and reply to the price request with the best price.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It would also require you to use other out-of-box activities to create the business logic for calculating the best price.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>WorkflowServiceHost</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> is the out-of-box workflow host that supports multiple instances, configuration, and <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> messaging (although the workflows aren’t required to use messaging in order to be hosted).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It also integrates with persistence, tracking, and instance control through a set of service behaviors.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Just like <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph>’s <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>, the <ph id="ph3">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> can be self-hosted in a console/WinForms/WPF application or Windows service, or web-hosted (as a .xamlx file) in IIS or WAS.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Getting Started with Workflow Service Host</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In Visual Studio 2010, create a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> Workflow Service Application project: this project will be set up to use <ph id="ph2">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> in a web-host environment.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In order to host a non-messaging workflow, add a custom <ph id="ph1">&lt;xref:System.ServiceModel.Activities.WorkflowHostingEndpoint&gt;</ph> that will create the instance based on a message.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Workflow instances can be controlled (e.g. suspended or terminated) by adding a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.WorkflowControlEndpoint&gt;</ph> to the <ph id="ph2">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> and then using a <ph id="ph3">&lt;xref:System.ServiceModel.Activities.WorkflowControlClient&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Samples for the <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> can be found in the following sections:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Execution<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/execution.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Basic: <bpt id="p1">[</bpt>Services<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/services.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Scenarios: <bpt id="p1">[</bpt>Services<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/services.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Application: <bpt id="p1">[</bpt>Suspended Instance Management<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/suspended-instance-management.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WorkflowServiceHost Conceptual Documentation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204807)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>WorkflowServiceHost Scenario</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A BestPriceFinder service calls out to multiple airline services to find the best ticket price for a particular route.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Implementing this scenario would require you to host the workflow in <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It would also use the message activities to receive the price request, retrieve the prices from the back-end services, and reply to the price request with the best price.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Correlation</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A correlation is one of two things:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A way of grouping messages together; that is, the relationship between a request message and its reply.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A way of mapping a piece of data to a service instance</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To get started with correlation, create a new project in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Create a variable of type <ph id="ph1">&lt;xref:System.ServiceModel.Activities.CorrelationHandle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An example of correlation used to group messages together is a Request-Reply correlation that groups messages together.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>On a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity, click on the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Receive.CorrelationInitializers%2A&gt;</ph> property and add a a <ph id="ph3">&lt;xref:System.ServiceModel.Activities.RequestReplyCorrelationInitializer&gt;</ph> using the CorrelationHandle created in the first step above.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activity by right-clicking on the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and clicking "Create SendReply".</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Paste it into your workflow after the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>An example of mapping a piece of data to a service instance is content-based correlation which maps a piece of data (for example, an order ID) to a particular workflow instance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>On any messaging activity, click on the <ph id="ph1">`CorrelationInitializers`</ph> property and add a <ph id="ph2">&lt;xref:System.ServiceModel.Activities.QueryCorrelationInitializer&gt;</ph> using the <ph id="ph3">&lt;xref:System.ServiceModel.Activities.CorrelationHandle&gt;</ph> variable created above.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Double-click on the desired property on the message (e.g. OrderID) from the drop-down menu.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`CorrelatesWith`</ph> property to the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.CorrelationHandle&gt;</ph> variable used above.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Samples:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Basic: <bpt id="p1">[</bpt>Services<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/services.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Scenarios: <bpt id="p1">[</bpt>Services<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/services.md)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Correlation Conceptual Documentation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204939)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Correlation Scenario</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An order-processing workflow is used to handle new order creation and updating existing orders that are in process.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Implementing this scenario would require you to host the workflow in <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> and use the messaging activities.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It would also require correlation based on the <ph id="ph1">`orderId`</ph> to ensure that updates are made to the correct workflow.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Simplified Configuration</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> configuration schema is complex and provides users with many hard to find features.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph>, we have focused on helping <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> users configure their services with the following features:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Removing the need for explicit per-service configuration.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you do not configure any <ph id="ph1">\&lt;</ph>service&gt; elements for your service, and your service does not define programmatically any endpoint, then a set of endpoints will be automatically added to your service, one per service base address and per contract implemented by your service.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Enables the user to define default values for WCF bindings and behaviors, which will be applied to services with no explicit configuration.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Standard endpoints define reusable preconfigured endpoints, which have fixed values for one or more of the endpoint properties (address, binding and contract), and allow defining custom properties.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Finally, the <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.ConfigurationChannelFactory%601&gt;</ph> allows you to do central management of <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client configuration, useful in scenarios in which configuration is selected or changed after the application domain load time.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>A Developer's Guide to WCF 4.0<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204940)</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Configuration Channel Factory<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204941)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Endpoint Element<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204942)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service configuration improvements in .Net Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204943)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Common User Mistake in .NET 4: Mistyping the WF/WCF Service Configuration Name<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204944)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Simplified Configuration Scenarios</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An experienced ASMX developer wants to start using <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> seems way too complicated!</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>What is all that information that I need to write in a configuration file?</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In .NET 4, you can even decide to not have a configuration file at all.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An existing set of WCF services are very difficult to configure and maintain.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The configuration file has thousands of lines of XML code that are extremely dangerous to touch.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Help is needed to reduce that amount of code to something more manageable.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Data Contract Resolver</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In .NET 3.5, there were a few limitations in the design of known types:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Adding known types dynamically, during serialization or deserialization, was not possible.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Serializers could not deal with unknown xsi:type information.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It was not possible for users to specify what xsi:type they would like to have appear on the wire to, for instance, make the size of a serialization instance on the wire smaller.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DataContractResolver<ept id="p1">](../../../docs/framework/wcf/samples/datacontractresolver.md)</ept> solves these issues in .NET 4.5.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Contract Resolver API documentation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204946)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introducing the Data Contract Resolver<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204947)</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Samples:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataContractResolver<ept id="p1">](../../../docs/framework/wcf/samples/datacontractresolver.md)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>KnownAssemblyAttribute<ept id="p1">](../../../docs/framework/wcf/samples/knownassemblyattribute.md)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Data Contract Resolver Scenarios</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Avoiding having to declare tens of <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> objects in a service.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Reducing the size of the XML blob.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Flowchart</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Flowchart is a well-known paradigm to visually represent domain problems.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It is a new control flow style we’re introducing in .NET 4.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A core characteristic of Flowchart is that only one activity is executed at any given time.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Flowcharts can express loops and alternative outcomes, but cannot natively express concurrent execution of multiple nodes.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>, create a workflow console application.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Add a Flowchart in the workflow designer.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The flowchart feature uses the following classes:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Samples:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fault Handling in a Flowchart Activity Using TryCatch<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>StateMachine Scenario Using a Combination of FlowChart and Pick<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/statemachine-scenario-using-a-combination-of-flowchart-and-pick.md)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hiring Process<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/hiring-process.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Designer Documentation:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Flowchart Activity Designers<ept id="p1">](/visualstudio/workflow-designer/flowchart-activity-designers)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Flowchart Scenarios</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A flowchart activity can be used to implement a guessing game.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The guessing game is very simple: the computer selects a random number and the player has to guess that number.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When the player submits each guess, the computer shows him a hint (i.e. "try a lower number").</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If the player finds the number in less than 7 attempts, he receives a special congratulation from the computer.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This game can be implemented with a combination of the following procedural activities:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Procedural activities (Sequence, If, ForEach, Switch, Assign, DoWhile, While)</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Procedural activities provide a mechanism to model sequential control flow using concepts that are familiar to programmers.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>These activities enable traditionally structured programming language constructs and, when appropriate, provide language parity with common procedural languages such as C#/VB.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>, create a workflow console application.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Add procedural activities in the workflow designer.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Samples:</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hiring Process<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/hiring-process.md)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Corporate Purchase Process<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Designer Documentation:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Activity Designer<ept id="p1">](/visualstudio/workflow-designer/parallel-activity-designer)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ParallelForEach<ph id="ph1">\&lt;</ph>T&gt; Activity Designer<ept id="p1">](/visualstudio/workflow-designer/parallelforeach-t-activity-designer)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Procedural Activity Scenarios</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Statements.Parallel&gt;</ph>Parallel: An intranet document management system has a document approval workflow.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Documents need to be approved by people in several departments before they can be published to the intranet.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>There isn’t an established order for the approvals; they can occur at any time while the document is in the "approval pending" phase.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>When a user submits a document for review it must be approved by her direct manager, the intranet administrator, and the internal communications manager.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph>: A WF application manages corporate buys within a large company.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The corporate rules dictate that before planning any purchase operation, the valuations of three different vendors is required.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An employee from the buying department selects three vendors from the company’s vendor list.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>After these vendors have been selected and notified, the company will wait for their economic proposals.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The proposals can come in any order.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>To implement this scenario in WF, we use a <ph id="ph1">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> that will iterate through our collection of vendors and ask for their economic proposals.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>After all offers are gathered, the best one is selected and displayed.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>InvokeMethod</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity allows invoking public methods in objects or types in scope.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It supports invoking instance and static methods with or without parameters (including parameter arrays), and generic methods.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>It also allows executing method synchronously and asynchronously.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>, create a workflow console application.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Add an <ph id="ph1">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> activity in the workflow designer, and configure static and instance methods on it.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Samples:</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>InvokeMethod<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/invokemethod.md)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Designer Documentation: <bpt id="p1">[</bpt>InvokeMethod Activity Designer<ept id="p1">](/visualstudio/workflow-designer/invokemethod-activity-designer)</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>InvokeMethod Scenarios</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>A method in an object in scope needs to be invoked.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For example, a value needs to be added to a dictionary.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The Add method of the instance of the dictionary is invoked, and the key and value are provided.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A method needs to be invoked on a legacy CLR object.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Instead of creating a custom activity to wrap the call to that legacy class, if it is in scope during the workflow execution, <ph id="ph1">&lt;xref:System.Activities.Statements.InvokeMethod&gt;</ph> can be used.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Error handling activities</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity provides a mechanism for catching exceptions that occur during the execution of a set of contained activities (similar to the Try/Catch construct in C#/VB).</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> provides exception handling at the workflow level.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>When an unhandled exception is thrown, the workflow is aborted and the Finally block won’t be executed.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This behavior is consistent with C#.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>, create a workflow console application.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">&lt;xref:System.Activities.Statements.TryCatch&gt;</ph> activity in the workflow designer.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Samples:</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fault Handling in a Flowchart Activity Using TryCatch<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md)</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Procedural Activities<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/using-procedural-activities.md)</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Designer Documentation: <bpt id="p1">[</bpt>Error Handling Activity Designers<ept id="p1">](/visualstudio/workflow-designer/error-handling-activity-designers)</ept></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Error handling scenarios</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A set of activities needs to be executed, and specific logic needs to be executed when an error occurs.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>If during that error handling logic it is found that the error is not recoverable, the exception will be rethrown, and the parent activity (or the host) will deal with the problem.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Pick activity</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.Pick&gt;</ph> Activity provides event-based control flow modeling in WF.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Statements.Pick&gt;</ph> contains many branches where each branch waits for a particular event to occur before running.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>In this setup, a <ph id="ph1">&lt;xref:System.Activities.Statements.Pick&gt;</ph> behaves similar to a <ph id="ph2">&lt;xref:System.Activities.Statements.Switch%601&gt;</ph> to which the Activity will execute only one of the set of events it is listening.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Each branch is event driven and the event that occurs runs the corresponding branch first.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>All other branches cancel and stop listening for events.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>, create a workflow console application.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">&lt;xref:System.Activities.Statements.Pick&gt;</ph> activity in the workflow designer.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Sample: <bpt id="p1">[</bpt>Using the Pick Activity<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/using-the-pick-activity.md)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Designer documentation: <bpt id="p1">[</bpt>Pick Activity Designer<ept id="p1">](/visualstudio/workflow-designer/pick-activity-designer)</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Pick Scenario</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A user needs to be prompted for input.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, the developer would use a method call like <ph id="ph1">&lt;xref:System.Console.ReadLine%2A&gt;</ph> to prompt for a user’s input.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The problem with this setup is that the program waits until the user enters something.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>In this scenario, a time-out is needed to unblock a blocking activity.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A common scenario is one that requires a task to be completed within a given time duration.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Timing out a blocking activity is a scenario where Pick adds a lot of value.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>WCF Routing Service</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The Routing Service is designed to be a generic software Router that allows you to control how <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph>messages flow in between your clients and services.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The Routing Service allows you to decouple your clients from your services, which gives you much more freedom in terms of the configurations that you can support and the flexibility you have when considering how to host your services.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In .NET 3.5, clients and services were tightly coupled; a client had to know about all of the services it needed to talk to and where they were located.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In addition, WCF in .Net Framework 3.5 had the following limitations:</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Error handling was complex, as this logic had to be hard-coded into the client.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Clients and services had to always use the same bindings.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Services were rarely well factored: it is easier to have the client talk to one service which implements everything, rather than needing to choose between multiple services.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The routing service in .Net 4 is designed to make these problems easier to solve.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The new routing service has the following features:</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Content based routing (<ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilter&gt;</ph> objects examine a message to determine where it should be sent.)</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Protocol bridging (transport &amp; message)</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Error handling (the router catches communication exceptions and fails over to backup endpoints)</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Dynamic (in memory) update of <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.MessageFilterTable%601&gt;</ph> and Routing Configuration.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Documentation: <bpt id="p1">[</bpt>Routing<ept id="p1">](../../../docs/framework/wcf/feature-details/routing.md)</ept></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Samples: <bpt id="p1">[</bpt>Routing Services &amp;#91;WCF Samples&amp;#93;<ept id="p1">](../../../docs/framework/wcf/samples/routing-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Blog: <bpt id="p1">[</bpt>Routing Rules!<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204956)</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Routing Scenarios</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The routing service is useful in the following scenarios:</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Clients can talk to multiple services without having to address them all directly.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Clients can perform additional logic on a client request to determine where to route it</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Decompose the operations a client performs into multiple service implementations without refactoring the client.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Clients and services can speak different bindings with different security settings.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Clients can be enabled to be more robust against failure or the unavailability of services.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>WCF Discovery</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> Discovery is a framework technology that allows you to incorporate a discovery mechanism to your application infrastructure.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>You can use this to make your service discoverable, and configure your clients to search for services.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Clients no longer need to be hard coded with endpoint, making your application more robust and fault tolerant.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Discovery is the perfect platform to build auto-configuration capabilities into your application.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The product is built on top of the WS-Discovery standard.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>It’s designed to be interoperable, extensible, and generic.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The product supports two modes of operation:</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Managed: where there is an entity on the network knowledgeable about existing services, clients query it directly for information.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This is analogous to Active Directory.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Ad-hoc: where clients use multicast messages to locate services.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Furthermore, discovery messages are network protocol agnostic; you can use them on top any protocol that supports the mode requirements.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For example, discovery multicast messages can be sent over the UDP channel or any other network that supports multicast messaging.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>These design points, combined with feature flexibility, allow you to adapt the discovery specifically to your solution.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Documentation: <bpt id="p1">[</bpt>WCF Discovery<ept id="p1">](../../../docs/framework/wcf/feature-details/wcf-discovery.md)</ept></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Samples: <bpt id="p1">[</bpt>Discovery (Samples)<ept id="p1">](../../../docs/framework/wcf/samples/discovery-samples.md)</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Discovery Scenarios</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A developer doesn't want to hard code endpoints, since it is unknown when my service will be available.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Instead, the developer wants to choose a service at runtime.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>More decoupling, robustness, and auto-configuration is needed between the components in the application.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Tracking</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Workflow tracking provides insight into the execution of a workflow instance.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The tracking events are emitted from a workflow at the workflow instance level and when activities within the workflow execute.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>A workflow tracking participant needs to be added to the workflow host to subscribe to tracking records.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The tracking records are filtered using a tracking profile.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The .Net Framework provides an ETW (Event Tracing for Windows) tracking participant, and a basic profile is installed in the machine.config file.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]</ph>, create a WCF Workflow Service Application project.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> pair will be placed on your canvas to start.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Open the web.config and add an ETW tracking behavior with no profile.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The default profile is used.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Open event viewer and enable the analytic channel in the following node: <bpt id="p1">**</bpt>Event Viewer<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Applications and Services Logs<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Microsoft<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Application Server-Applications<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Analytic<ept id="p1">**</ept> and select <bpt id="p2">**</bpt>Enable Log<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Run the workflow service.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Observe the workflow tracking events in event viewer.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Samples: <bpt id="p1">[</bpt>Tracking<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/tracking.md)</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Conceptual documentation: <bpt id="p1">[</bpt>Workflow Tracking and Tracing<ept id="p1">](../../../docs/framework/windows-workflow-foundation/workflow-tracking-and-tracing.md)</ept></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>SQL Workflow Instance Store</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph> is a SQL Server-based implementation of an instance store.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>An instance store stores the state of a running instance together with all data necessary to load and resume that instance.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The service host instructs the instance store to save the instance state if the workflow persists, and it instructs the instance store to load the instance state when a message arrives for that instance or a delay activity expires.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph>, create a Workflow that contains an implicit or explicit <ph id="ph2">&lt;xref:System.Activities.Statements.Persist&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">&lt;xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore&gt;</ph> behavior to your workflow service host.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>This can be done in code or in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Samples: <bpt id="p1">[</bpt>Persistence<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/persistence.md)</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Conceptual documentation: <bpt id="p1">[</bpt>SQL Workflow Instance Store<ept id="p1">](../../../docs/framework/windows-workflow-foundation/sql-workflow-instance-store.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>