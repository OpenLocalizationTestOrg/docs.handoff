{"content":"---\ntitle: \"new Modifier (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"new modifier keyword [C#]\"\nms.assetid: a2e20856-33b9-4620-b535-a60dbce8349b\ncaps.latest.revision: 28\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# new Modifier (C# Reference)\nWhen used as a declaration modifier, the `new` keyword explicitly hides a member that is inherited from a base class. When you hide an inherited member, the derived version of the member replaces the base class version. Although you can hide members without using the `new` modifier, you get a compiler warning. If you use `new` to explicitly hide a member, it suppresses this warning.  \n  \n To hide an inherited member, declare it in the derived class by using the same member name, and modify it with the `new` keyword. For example:  \n  \n [!code-cs[csrefKeywordsOperator#8](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_1.cs)]  \n  \n In this example, `BaseC.Invoke` is hidden by `DerivedC.Invoke`. The field `x` is not affected because it is not hidden by a similar name.  \n  \n Name hiding through inheritance takes one of the following forms:  \n  \n-   Generally, a constant, field, property, or type that is introduced in a class or struct hides all base class members that share its name.  There are special cases.  For example, if you declare a new field with name `N` to have a type that is not invocable, and a base type declares `N` to be a method, the new field does not hide the base declaration in invocation syntax.  See the [C# language specification](http://go.microsoft.com/fwlink/?LinkId=199552) for details (see section \"Member Lookup\" in section \"Expressions\").  \n  \n-   A method introduced in a class or struct hides properties, fields, and types that share that name in the base class. It also hides all base class methods that have the same signature.  \n  \n-   An indexer introduced in a class or struct hides all base class indexers that have the same signature.  \n  \n It is an error to use both `new` and [override](../../../csharp/language-reference/keywords/override.md) on the same member, because the two modifiers have mutually exclusive meanings. The `new` modifier creates a new member with the same name and causes the original member to become hidden. The `override` modifier extends the implementation for an inherited member.  \n  \n Using the `new` modifier in a declaration that does not hide an inherited member generates a warning.  \n  \n## Example  \n In this example, a base class, `BaseC`, and a derived class, `DerivedC`, use the same field name `x`, which hides the value of the inherited field. The example demonstrates the use of the `new` modifier. It also demonstrates how to access the hidden members of the base class by using their fully qualified names.  \n  \n [!code-cs[csrefKeywordsOperator#9](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_2.cs)]  \n  \n## Example  \n In this example, a nested class hides a class that has the same name in the base class. The example demonstrates how to use the `new` modifier to eliminate the warning message and how to access the hidden class members by using their fully qualified names.  \n  \n [!code-cs[csrefKeywordsOperator#10](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_3.cs)]  \n  \n If you remove the `new` modifier, the program will still compile and run, but you will get the following warning:  \n  \n```  \nThe keyword new is required on 'MyDerivedC.x' because it hides inherited member 'MyBaseC.x'.  \n```  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)   \n [Modifiers](../../../csharp/language-reference/keywords/modifiers.md)   \n [Versioning with the Override and New Keywords](../../../csharp/programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)   \n [Knowing When to Use Override and New Keywords](../../../csharp/programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)","nodes":[{"pos":[12,56],"content":"new Modifier (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"new Modifier (C# Reference) | Microsoft Docs","pos":[0,44]}]},{"pos":[533,560],"content":"new Modifier (C# Reference)","linkify":"new Modifier (C# Reference)","nodes":[{"content":"new Modifier (C# Reference)","pos":[0,27]}]},{"content":"When used as a declaration modifier, the <ph id=\"ph1\">`new`</ph> keyword explicitly hides a member that is inherited from a base class.","pos":[561,678],"source":"When used as a declaration modifier, the `new` keyword explicitly hides a member that is inherited from a base class."},{"content":"When you hide an inherited member, the derived version of the member replaces the base class version.","pos":[679,780]},{"content":"Although you can hide members without using the <ph id=\"ph1\">`new`</ph> modifier, you get a compiler warning.","pos":[781,872],"source":" Although you can hide members without using the `new` modifier, you get a compiler warning."},{"content":"If you use <ph id=\"ph1\">`new`</ph> to explicitly hide a member, it suppresses this warning.","pos":[873,946],"source":" If you use `new` to explicitly hide a member, it suppresses this warning."},{"content":"To hide an inherited member, declare it in the derived class by using the same member name, and modify it with the <ph id=\"ph1\">`new`</ph> keyword.","pos":[953,1082],"source":"To hide an inherited member, declare it in the derived class by using the same member name, and modify it with the `new` keyword."},{"content":"For example:","pos":[1083,1095]},{"pos":[1102,1219],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsOperator#8<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsOperator#8](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_1.cs)]"},{"content":"In this example, <ph id=\"ph1\">`BaseC.Invoke`</ph> is hidden by <ph id=\"ph2\">`DerivedC.Invoke`</ph>.","pos":[1226,1289],"source":"In this example, `BaseC.Invoke` is hidden by `DerivedC.Invoke`."},{"content":"The field <ph id=\"ph1\">`x`</ph> is not affected because it is not hidden by a similar name.","pos":[1290,1363],"source":" The field `x` is not affected because it is not hidden by a similar name."},{"content":"Name hiding through inheritance takes one of the following forms:","pos":[1370,1435]},{"content":"Generally, a constant, field, property, or type that is introduced in a class or struct hides all base class members that share its name.","pos":[1445,1582]},{"content":"There are special cases.","pos":[1584,1608]},{"content":"For example, if you declare a new field with name <ph id=\"ph1\">`N`</ph> to have a type that is not invocable, and a base type declares <ph id=\"ph2\">`N`</ph> to be a method, the new field does not hide the base declaration in invocation syntax.","pos":[1610,1817],"source":"  For example, if you declare a new field with name `N` to have a type that is not invocable, and a base type declares `N` to be a method, the new field does not hide the base declaration in invocation syntax."},{"content":"See the <bpt id=\"p1\">[</bpt>C# language specification<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=199552)</ept> for details (see section \"Member Lookup\" in section \"Expressions\").","pos":[1819,1969],"source":"  See the [C# language specification](http://go.microsoft.com/fwlink/?LinkId=199552) for details (see section \"Member Lookup\" in section \"Expressions\")."},{"content":"A method introduced in a class or struct hides properties, fields, and types that share that name in the base class.","pos":[1979,2095]},{"content":"It also hides all base class methods that have the same signature.","pos":[2096,2162]},{"content":"An indexer introduced in a class or struct hides all base class indexers that have the same signature.","pos":[2172,2274]},{"content":"It is an error to use both <ph id=\"ph1\">`new`</ph> and <bpt id=\"p1\">[</bpt>override<ept id=\"p1\">](../../../csharp/language-reference/keywords/override.md)</ept> on the same member, because the two modifiers have mutually exclusive meanings.","pos":[2281,2465],"source":"It is an error to use both `new` and [override](../../../csharp/language-reference/keywords/override.md) on the same member, because the two modifiers have mutually exclusive meanings."},{"content":"The <ph id=\"ph1\">`new`</ph> modifier creates a new member with the same name and causes the original member to become hidden.","pos":[2466,2573],"source":" The `new` modifier creates a new member with the same name and causes the original member to become hidden."},{"content":"The <ph id=\"ph1\">`override`</ph> modifier extends the implementation for an inherited member.","pos":[2574,2649],"source":" The `override` modifier extends the implementation for an inherited member."},{"pos":[2656,2757],"content":"Using the <ph id=\"ph1\">`new`</ph> modifier in a declaration that does not hide an inherited member generates a warning.","source":"Using the `new` modifier in a declaration that does not hide an inherited member generates a warning."},{"pos":[2766,2773],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a base class, <ph id=\"ph1\">`BaseC`</ph>, and a derived class, <ph id=\"ph2\">`DerivedC`</ph>, use the same field name <ph id=\"ph3\">`x`</ph>, which hides the value of the inherited field.","pos":[2777,2924],"source":"In this example, a base class, `BaseC`, and a derived class, `DerivedC`, use the same field name `x`, which hides the value of the inherited field."},{"content":"The example demonstrates the use of the <ph id=\"ph1\">`new`</ph> modifier.","pos":[2925,2980],"source":" The example demonstrates the use of the `new` modifier."},{"content":"It also demonstrates how to access the hidden members of the base class by using their fully qualified names.","pos":[2981,3090]},{"pos":[3097,3214],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsOperator#9<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsOperator#9](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_2.cs)]"},{"pos":[3223,3230],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a nested class hides a class that has the same name in the base class.","pos":[3234,3321]},{"content":"The example demonstrates how to use the <ph id=\"ph1\">`new`</ph> modifier to eliminate the warning message and how to access the hidden class members by using their fully qualified names.","pos":[3322,3490],"source":" The example demonstrates how to use the `new` modifier to eliminate the warning message and how to access the hidden class members by using their fully qualified names."},{"pos":[3497,3615],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsOperator#10<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsOperator#10](../../../csharp/language-reference/keywords/codesnippet/CSharp/new-modifier_3.cs)]"},{"pos":[3622,3735],"content":"If you remove the <ph id=\"ph1\">`new`</ph> modifier, the program will still compile and run, but you will get the following warning:","source":"If you remove the `new` modifier, the program will still compile and run, but you will get the following warning:"},{"pos":[3854,3879],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[3993,4001],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4005,4065],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4068,4136],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4139,4208],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[4211,4298],"source":" [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Modifiers<ept id=\"p1\">](../../../csharp/language-reference/keywords/modifiers.md)</ept><ph id=\"ph1\"> </ph>","pos":[4301,4372],"source":" [Modifiers](../../../csharp/language-reference/keywords/modifiers.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Versioning with the Override and New Keywords<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[4375,4528],"source":" [Versioning with the Override and New Keywords](../../../csharp/programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Knowing When to Use Override and New Keywords<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)</ept>","pos":[4531,4683],"source":" [Knowing When to Use Override and New Keywords](../../../csharp/programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)"}]}