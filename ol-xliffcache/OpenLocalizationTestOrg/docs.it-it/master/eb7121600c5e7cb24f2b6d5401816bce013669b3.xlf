<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb7121600c5e7cb24f2b6d5401816bce013669b3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\accessing-operationcontext.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aeaf751b03b15944c278a84f5b6d538dedf2a7e9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88b29625b8a0dc3d74b984fc3f13c34cf99e231e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessing OperationContext | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing OperationContext</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how the messaging activities (<ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph>and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph>) can be used with a custom scope activity to access <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph> and attach or retrieve a custom message header within an outgoing or incoming message.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Demonstrates</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Messaging Activities, <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ISendMessageCallback&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Activities.IReceiveMessageCallback&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Discussion</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This sample shows how to use extensibility points (<ph id="ph1">&lt;xref:System.ServiceModel.Activities.ISendMessageCallback&gt;</ph>) <ph id="ph2">&lt;xref:System.ServiceModel.Activities.IReceiveMessageCallback&gt;</ph>) in the messaging activities to access <ph id="ph3">&lt;xref:System.ServiceModel.OperationContext.Current%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The callbacks are registered within the workflow runtime as an implementation of <ph id="ph1">&lt;xref:System.Activities.IExecutionProperty&gt;</ph> that is picked up by the messaging activities upon execution.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any messaging activity in the same scope as that <ph id="ph1">&lt;xref:System.Activities.IExecutionProperty&gt;</ph> implementation is affected.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In particular, this sample uses a custom scope activity to enforce the callback behavior.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ISendMessageCallback&gt;</ph> is used in the client workflow to include the workflowâ€™s <ph id="ph2">&lt;xref:System.Activities.WorkflowApplication.Id%2A&gt;</ph> as an outgoing <ph id="ph3">&lt;xref:System.ServiceModel.Channels.MessageHeader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This header is then picked up in the service using the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.IReceiveMessageCallback&gt;</ph> and the value of the header is printed out to the console.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This sample exposes a workflow service using HTTP endpoints.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To run this sample, proper URL ACLs must be added (see <bpt id="p1">[</bpt>Configuring HTTP and HTTPS<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=70353)</ept> for details), either by running Visual Studio as Administrator or by executing the following command at an elevated prompt to add the appropriate ACLs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Ensure that your Domain and Username are substituted.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Once the URL ACLs are added, use the following steps.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Build the solution.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Set multiple start-up projects by right-clicking the solution and selecting <bpt id="p1">**</bpt>Set Startup Projects<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add <bpt id="p1">**</bpt>Service<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Client<ept id="p2">**</ept> (in that order) as multiple start-up projects.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Run the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The client console shows a workflow running twice and the Service window shows the instance ID of those workflows.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>