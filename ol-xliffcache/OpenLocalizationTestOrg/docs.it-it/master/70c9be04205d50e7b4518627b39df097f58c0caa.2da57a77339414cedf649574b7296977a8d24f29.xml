{"content":"---\ntitle: \"IsTrue Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.istrue\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"IsTrue operator\"\n  - \"OrElse operator [Visual Basic]\"\nms.assetid: b6cec0f2-61b1-4331-a7f0-4d07ee3179d6\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# IsTrue Operator (Visual Basic)\nDetermines whether an expression is `True`.  \n  \n You cannot call `IsTrue` explicitly in your code, but the Visual Basic compiler can use it to generate code from `OrElse` clauses. If you define a class or structure and then use a variable of that type in an `OrElse` clause, you must define `IsTrue` on that class or structure.  \n  \n The compiler considers the `IsTrue` and `IsFalse` operators as a *matched pair*. This means that if you define one of them, you must also define the other one.  \n  \n## Compiler Use of IsTrue  \n When you have defined a class or structure, you can use a variable of that type in a `For`, `If`, `Else``If`, or `While` statement, or in a `When` clause. If you do this, the compiler requires an operator that converts your type into a `Boolean` value so it can test a condition. It searches for a suitable operator in the following order:  \n  \n1.  A widening conversion operator from your class or structure to `Boolean`.  \n  \n2.  A widening conversion operator from your class or structure to `Boolean?`.  \n  \n3.  The `IsTrue` operator on your class or structure.  \n  \n4.  A narrowing conversion to `Boolean?` that does not involve a conversion from `Boolean` to `Boolean?`.  \n  \n5.  A narrowing conversion operator from your class or structure to `Boolean`.  \n  \n If you have not defined any conversion to `Boolean` or an `IsTrue` operator, the compiler signals an error.  \n  \n> [!NOTE]\n>  The `IsTrue` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following code example defines the outline of a structure that includes definitions for the `IsFalse` and `IsTrue` operators.  \n  \n [!code-vb[VbVbalrOperators#28](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/istrue-operator_1.vb)]  \n  \n## See Also  \n [IsFalse Operator](../../../visual-basic/language-reference/operators/isfalse-operator.md)   \n [How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)   \n [OrElse Operator](../../../visual-basic/language-reference/operators/orelse-operator.md)","nodes":[{"pos":[4,623],"embed":true,"restype":"x-metadata","content":"title: \"IsTrue Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.istrue\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"IsTrue operator\"\n  - \"OrElse operator [Visual Basic]\"\nms.assetid: b6cec0f2-61b1-4331-a7f0-4d07ee3179d6\ncaps.latest.revision: 17\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"IsTrue Operator (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,47],"content":"IsTrue Operator (Visual Basic) | Microsoft Docs","nodes":[{"content":"IsTrue Operator (Visual Basic) | Microsoft Docs","pos":[0,47]}]}],"path":["title"]}],"yml":true},{"pos":[630,660],"content":"IsTrue Operator (Visual Basic)","linkify":"IsTrue Operator (Visual Basic)","nodes":[{"content":"IsTrue Operator (Visual Basic)","pos":[0,30]}]},{"pos":[661,704],"content":"Determines whether an expression is <ph id=\"ph1\">`True`</ph>.","source":"Determines whether an expression is `True`."},{"content":"You cannot call <ph id=\"ph1\">`IsTrue`</ph> explicitly in your code, but the Visual Basic compiler can use it to generate code from <ph id=\"ph2\">`OrElse`</ph> clauses.","pos":[711,841],"source":"You cannot call `IsTrue` explicitly in your code, but the Visual Basic compiler can use it to generate code from `OrElse` clauses."},{"content":"If you define a class or structure and then use a variable of that type in an <ph id=\"ph1\">`OrElse`</ph> clause, you must define <ph id=\"ph2\">`IsTrue`</ph> on that class or structure.","pos":[842,989],"source":" If you define a class or structure and then use a variable of that type in an `OrElse` clause, you must define `IsTrue` on that class or structure."},{"content":"The compiler considers the <ph id=\"ph1\">`IsTrue`</ph> and <ph id=\"ph2\">`IsFalse`</ph> operators as a <bpt id=\"p1\">*</bpt>matched pair<ept id=\"p1\">*</ept>.","pos":[996,1076],"source":"The compiler considers the `IsTrue` and `IsFalse` operators as a *matched pair*."},{"content":"This means that if you define one of them, you must also define the other one.","pos":[1077,1155]},{"pos":[1164,1186],"content":"Compiler Use of IsTrue","linkify":"Compiler Use of IsTrue","nodes":[{"content":"Compiler Use of IsTrue","pos":[0,22]}]},{"content":"When you have defined a class or structure, you can use a variable of that type in a <ph id=\"ph1\">`For`</ph>, <ph id=\"ph2\">`If`</ph>, <ph id=\"ph3\">`Else``If`</ph>, or <ph id=\"ph4\">`While`</ph> statement, or in a <ph id=\"ph5\">`When`</ph> clause.","pos":[1190,1344],"source":"When you have defined a class or structure, you can use a variable of that type in a `For`, `If`, `Else``If`, or `While` statement, or in a `When` clause."},{"content":"If you do this, the compiler requires an operator that converts your type into a <ph id=\"ph1\">`Boolean`</ph> value so it can test a condition.","pos":[1345,1469],"source":" If you do this, the compiler requires an operator that converts your type into a `Boolean` value so it can test a condition."},{"content":"It searches for a suitable operator in the following order:","pos":[1470,1529]},{"pos":[1539,1612],"content":"A widening conversion operator from your class or structure to <ph id=\"ph1\">`Boolean`</ph>.","source":"A widening conversion operator from your class or structure to `Boolean`."},{"pos":[1622,1696],"content":"A widening conversion operator from your class or structure to <ph id=\"ph1\">`Boolean?`</ph>.","source":"A widening conversion operator from your class or structure to `Boolean?`."},{"pos":[1706,1755],"content":"The <ph id=\"ph1\">`IsTrue`</ph> operator on your class or structure.","source":"The `IsTrue` operator on your class or structure."},{"pos":[1765,1866],"content":"A narrowing conversion to <ph id=\"ph1\">`Boolean?`</ph> that does not involve a conversion from <ph id=\"ph2\">`Boolean`</ph> to <ph id=\"ph3\">`Boolean?`</ph>.","source":"A narrowing conversion to `Boolean?` that does not involve a conversion from `Boolean` to `Boolean?`."},{"pos":[1876,1950],"content":"A narrowing conversion operator from your class or structure to <ph id=\"ph1\">`Boolean`</ph>.","source":"A narrowing conversion operator from your class or structure to `Boolean`."},{"pos":[1957,2064],"content":"If you have not defined any conversion to <ph id=\"ph1\">`Boolean`</ph> or an <ph id=\"ph2\">`IsTrue`</ph> operator, the compiler signals an error.","source":"If you have not defined any conversion to `Boolean` or an `IsTrue` operator, the compiler signals an error."},{"pos":[2072,2498],"content":"[!NOTE]\n The `IsTrue` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":"The `IsTrue` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[9,424],"nodes":[{"content":"The <ph id=\"ph1\">`IsTrue`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure.","pos":[0,164],"source":"The `IsTrue` operator can be *overloaded*, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[165,273]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[274,415],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[2507,2514],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2518,2647],"content":"The following code example defines the outline of a structure that includes definitions for the <ph id=\"ph1\">`IsFalse`</ph> and <ph id=\"ph2\">`IsTrue`</ph> operators.","source":"The following code example defines the outline of a structure that includes definitions for the `IsFalse` and `IsTrue` operators."},{"pos":[2791,2799],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>IsFalse Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/isfalse-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2803,2894],"source":"[IsFalse Operator](../../../visual-basic/language-reference/operators/isfalse-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Define an Operator<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[2898,3026],"source":"[How to: Define an Operator](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>OrElse Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/orelse-operator.md)</ept>","pos":[3030,3118],"source":"[OrElse Operator](../../../visual-basic/language-reference/operators/orelse-operator.md)"}]}