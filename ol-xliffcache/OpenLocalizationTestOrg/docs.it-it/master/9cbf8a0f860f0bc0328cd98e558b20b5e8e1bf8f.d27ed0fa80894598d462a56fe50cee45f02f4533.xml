{"content":"---\ntitle: \"Null-conditional operators - C# Reference\"\nms.custom: seodec18\nms.date: 04/03/2015\nhelpviewer_keywords:\n  - \"null-conditional operators [C#]\"\n  - \"?. operator [C#]\"\n  - \"?[] operator [C#]\"\nms.assetid: 9c7b2c8f-a785-44ca-836c-407bfb6d27f5\n---\n# ?. and ?[] null-conditional operators (C# Reference)\n\nTests the value of the left-hand operand for null before performing a member access (`?.`) or index (`?[]`) operation; returns `null` if the left-hand operand evaluates to `null`.\n\nThese operators help you write less code to handle null checks, especially for descending into data structures.\n\n```csharp\nint? length = customers?.Length; // null if customers is null\nCustomer first = customers?[0];  // null if customers is null\nint? count = customers?[0]?.Orders?.Count();  // null if customers, the first customer, or Orders is null\n```\n\nThe null-conditional operators are short-circuiting.  If one operation in a chain of conditional member access and index operations returns null, the rest of the chain’s execution stops.  In the following example, `E` doesn't execute if `A`, `B`, or `C` evaluates to null.\n\n```csharp\nA?.B?.C?.Do(E);\nA?.B?.C?[E];\n```\n\nAnother use for the null-conditional member access is invoking delegates in a thread-safe way with much less code.  The old way requires code like the following:\n\n```csharp\nvar handler = this.PropertyChanged;\nif (handler != null)\n    handler(…);\n```\n\nThe new way is much simpler:\n\n```csharp\nPropertyChanged?.Invoke(…)\n```\n\nThe new way is thread-safe because the compiler generates code to evaluate `PropertyChanged` one time only, keeping the result in a temporary variable. You need to explicitly call the `Invoke` method because there is no null-conditional delegate invocation syntax `PropertyChanged?(e)`.\n\n## Language specifications\n\nFor more information, see [Null-conditional operator](~/_csharplang/spec/expressions.md#null-conditional-operator) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- [?? (null-coalescing operator)](null-coalescing-operator.md)\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)","nodes":[{"pos":[4,249],"embed":true,"restype":"x-metadata","content":"title: \"Null-conditional operators - C# Reference\"\nms.custom: seodec18\nms.date: 04/03/2015\nhelpviewer_keywords:\n  - \"null-conditional operators [C#]\"\n  - \"?. operator [C#]\"\n  - \"?[] operator [C#]\"\nms.assetid: 9c7b2c8f-a785-44ca-836c-407bfb6d27f5","nodes":[{"content":"Null-conditional operators - C# Reference","nodes":[{"pos":[0,41],"content":"Null-conditional operators - C# Reference","nodes":[{"content":"Null-conditional operators - C# Reference","pos":[0,41]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[256,308],"content":"?. and ?[] null-conditional operators (C# Reference)","linkify":"?. and ?[] null-conditional operators (C# Reference)","nodes":[{"content":"?. and ?[] null-conditional operators (C# Reference)","pos":[0,52],"nodes":[{"content":"?.","pos":[0,2]},{"content":"and ?[] null-conditional operators (C# Reference)","pos":[3,52]}]}]},{"pos":[310,489],"content":"Tests the value of the left-hand operand for null before performing a member access (<ph id=\"ph1\">`?.`</ph>) or index (<ph id=\"ph2\">`?[]`</ph>) operation; returns <ph id=\"ph3\">`null`</ph> if the left-hand operand evaluates to <ph id=\"ph4\">`null`</ph>.","source":"Tests the value of the left-hand operand for null before performing a member access (`?.`) or index (`?[]`) operation; returns `null` if the left-hand operand evaluates to `null`."},{"content":"These operators help you write less code to handle null checks, especially for descending into data structures.","pos":[491,602]},{"content":"The null-conditional operators are short-circuiting.","pos":[849,901]},{"content":"If one operation in a chain of conditional member access and index operations returns null, the rest of the chain’s execution stops.","pos":[903,1035]},{"content":"In the following example, <ph id=\"ph1\">`E`</ph> doesn't execute if <ph id=\"ph2\">`A`</ph>, <ph id=\"ph3\">`B`</ph>, or <ph id=\"ph4\">`C`</ph> evaluates to null.","pos":[1037,1121],"source":"  In the following example, `E` doesn't execute if `A`, `B`, or `C` evaluates to null."},{"content":"Another use for the null-conditional member access is invoking delegates in a thread-safe way with much less code.","pos":[1167,1281]},{"content":"The old way requires code like the following:","pos":[1283,1328]},{"content":"The new way is much simpler:","pos":[1418,1446]},{"content":"The new way is thread-safe because the compiler generates code to evaluate <ph id=\"ph1\">`PropertyChanged`</ph> one time only, keeping the result in a temporary variable.","pos":[1490,1641],"source":"The new way is thread-safe because the compiler generates code to evaluate `PropertyChanged` one time only, keeping the result in a temporary variable."},{"content":"You need to explicitly call the <ph id=\"ph1\">`Invoke`</ph> method because there is no null-conditional delegate invocation syntax <ph id=\"ph2\">`PropertyChanged?(e)`</ph>.","pos":[1642,1776],"source":" You need to explicitly call the `Invoke` method because there is no null-conditional delegate invocation syntax `PropertyChanged?(e)`."},{"pos":[1781,1804],"content":"Language specifications","linkify":"Language specifications","nodes":[{"content":"Language specifications","pos":[0,23]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Null-conditional operator<ept id=\"p1\">](~/_csharplang/spec/expressions.md#null-conditional-operator)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[1806,1992],"source":"For more information, see [Null-conditional operator](~/_csharplang/spec/expressions.md#null-conditional-operator) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[1993,2069]},{"pos":[2074,2082],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2086,2146],"content":"<bpt id=\"p1\">[</bpt>?? (null-coalescing operator)<ept id=\"p1\">](null-coalescing-operator.md)</ept>","source":"[?? (null-coalescing operator)](null-coalescing-operator.md)"},{"pos":[2149,2176],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[2179,2235],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"}]}