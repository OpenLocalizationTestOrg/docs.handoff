{"content":"---\ntitle: \"sizeof (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"sizeof_CSharpKeyword\"\n  - \"sizeof\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"sizeof keyword [C#]\"\nms.assetid: c548592c-677c-4f40-a4ce-e613f7529141\ncaps.latest.revision: 20\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# sizeof (C# Reference)\nUsed to obtain the size in bytes for an unmanaged type. Unmanaged types include the built-in types that are listed in the table that follows, and also the following:  \n  \n-   Enum types  \n  \n-   Pointer types  \n  \n-   User-defined structs that do not contain any fields or properties that are reference types  \n  \n The following example shows how to retrieve the size of an `int`:  \n  \n```csharp  \n// Constant value 4:  \nint intSize = sizeof(int);   \n```  \n  \n## Remarks  \n Starting with version 2.0 of C#, applying `sizeof` to built-in types no longer requires that [unsafe](../../../csharp/language-reference/keywords/unsafe.md) mode be used.  \n  \n The `sizeof` operator cannot be overloaded. The values returned by the `sizeof` operator are of type `int`. The following table shows the constant values that are substituted for `sizeof` expressions that have certain built-in types as operands.  \n  \n|Expression|Constant value|  \n|----------------|--------------------|  \n|`sizeof(sbyte)`|1|  \n|`sizeof(byte)`|1|  \n|`sizeof(short)`|2|  \n|`sizeof(ushort)`|2|  \n|`sizeof(int)`|4|  \n|`sizeof(uint)`|4|  \n|`sizeof(long)`|8|  \n|`sizeof(ulong)`|8|  \n|`sizeof(char)`|2 (Unicode)|  \n|`sizeof(float)`|4|  \n|`sizeof(double)`|8|  \n|`sizeof(decimal)`|16|  \n|`sizeof(bool)`|1|  \n  \n For all other types, including structs, the `sizeof` operator can be used only in unsafe code blocks. Although you can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> method, the value returned by this method is not always the same as the value returned by `sizeof`. <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> returns the size after the type has been marshaled, whereas `sizeof` returns the size as it has been allocated by the common language runtime, including any padding.  \n  \n## Example  \n [!code-cs[csrefKeywordsOperator#11](../../../csharp/language-reference/keywords/codesnippet/CSharp/sizeof_1.cs)]  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md)   \n [enum](../../../csharp/language-reference/keywords/enum.md)   \n [Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md)   \n [Structs](../../../csharp/programming-guide/classes-and-structs/structs.md)   \n [Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)","nodes":[{"pos":[4,568],"nodes":[{"content":"sizeof (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,38],"content":"sizeof (C# Reference) | Microsoft Docs","nodes":[{"content":"sizeof (C# Reference) | Microsoft Docs","pos":[0,38]}]}],"pos":[6,47],"yaml":true}],"content":"title: \"sizeof (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"sizeof_CSharpKeyword\"\n  - \"sizeof\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"sizeof keyword [C#]\"\nms.assetid: c548592c-677c-4f40-a4ce-e613f7529141\ncaps.latest.revision: 20\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[575,596],"content":"sizeof (C# Reference)","linkify":"sizeof (C# Reference)","nodes":[{"content":"sizeof (C# Reference)","pos":[0,21]}]},{"content":"Used to obtain the size in bytes for an unmanaged type.","pos":[597,652]},{"content":"Unmanaged types include the built-in types that are listed in the table that follows, and also the following:","pos":[653,762]},{"content":"Enum types","pos":[772,782]},{"content":"Pointer types","pos":[792,805]},{"content":"User-defined structs that do not contain any fields or properties that are reference types","pos":[815,905]},{"pos":[912,977],"content":"The following example shows how to retrieve the size of an <ph id=\"ph1\">`int`</ph>:","source":"The following example shows how to retrieve the size of an `int`:"},{"pos":[1060,1067],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1071,1241],"content":"Starting with version 2.0 of C#, applying <ph id=\"ph1\">`sizeof`</ph> to built-in types no longer requires that <bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept> mode be used.","source":"Starting with version 2.0 of C#, applying `sizeof` to built-in types no longer requires that [unsafe](../../../csharp/language-reference/keywords/unsafe.md) mode be used."},{"content":"The <ph id=\"ph1\">`sizeof`</ph> operator cannot be overloaded.","pos":[1248,1291],"source":"The `sizeof` operator cannot be overloaded."},{"content":"The values returned by the <ph id=\"ph1\">`sizeof`</ph> operator are of type <ph id=\"ph2\">`int`</ph>.","pos":[1292,1355],"source":" The values returned by the `sizeof` operator are of type `int`."},{"content":"The following table shows the constant values that are substituted for <ph id=\"ph1\">`sizeof`</ph> expressions that have certain built-in types as operands.","pos":[1356,1493],"source":" The following table shows the constant values that are substituted for `sizeof` expressions that have certain built-in types as operands."},{"content":"Expression","pos":[1500,1510]},{"content":"Constant value","pos":[1511,1525]},{"content":"1","pos":[1588,1589]},{"content":"1","pos":[1609,1610]},{"content":"2","pos":[1631,1632]},{"content":"2","pos":[1654,1655]},{"content":"4","pos":[1674,1675]},{"content":"4","pos":[1695,1696]},{"content":"8","pos":[1716,1717]},{"content":"8","pos":[1738,1739]},{"content":"2 (Unicode)","pos":[1759,1770]},{"content":"4","pos":[1791,1792]},{"content":"8","pos":[1814,1815]},{"content":"16","pos":[1838,1840]},{"content":"1","pos":[1860,1861]},{"content":"For all other types, including structs, the <ph id=\"ph1\">`sizeof`</ph> operator can be used only in unsafe code blocks.","pos":[1869,1970],"source":"For all other types, including structs, the `sizeof` operator can be used only in unsafe code blocks."},{"content":"Although you can use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName&gt;</ph> method, the value returned by this method is not always the same as the value returned by <ph id=\"ph2\">`sizeof`</ph>.","pos":[1971,2176],"source":" Although you can use the <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> method, the value returned by this method is not always the same as the value returned by `sizeof`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName&gt;</ph> returns the size after the type has been marshaled, whereas <ph id=\"ph2\">`sizeof`</ph> returns the size as it has been allocated by the common language runtime, including any padding.","pos":[2177,2423],"source":" <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> returns the size after the type has been marshaled, whereas `sizeof` returns the size as it has been allocated by the common language runtime, including any padding."},{"pos":[2432,2439],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2443,2555],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csrefKeywordsOperator#11<ept id=\"p2\">](../../../csharp/language-reference/keywords/codesnippet/CSharp/sizeof_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csrefKeywordsOperator#11](../../../csharp/language-reference/keywords/codesnippet/CSharp/sizeof_1.cs)]"},{"pos":[2564,2589],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[2703,2711],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2715,2775],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2779,2846],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2850,2918],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Operator Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[2922,3008],"source":"[Operator Keywords](../../../csharp/language-reference/keywords/operator-keywords.md) "},{"content":"<bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../../../csharp/language-reference/keywords/enum.md)</ept><ph id=\"ph1\"> </ph>","pos":[3012,3072],"source":"[enum](../../../csharp/language-reference/keywords/enum.md) "},{"content":"<bpt id=\"p1\">[</bpt>Unsafe Code and Pointers<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3076,3168],"source":"[Unsafe Code and Pointers](../../../csharp/programming-guide/unsafe-code-pointers/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept><ph id=\"ph1\"> </ph>","pos":[3172,3248],"source":"[Structs](../../../csharp/programming-guide/classes-and-structs/structs.md) "},{"content":"<bpt id=\"p1\">[</bpt>Constants<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/constants.md)</ept>","pos":[3252,3331],"source":"[Constants](../../../csharp/programming-guide/classes-and-structs/constants.md)"}]}