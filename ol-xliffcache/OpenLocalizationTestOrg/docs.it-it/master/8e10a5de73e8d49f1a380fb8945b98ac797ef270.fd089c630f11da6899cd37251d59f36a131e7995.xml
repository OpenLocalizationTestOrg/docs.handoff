{"content":"---\ntitle: \"Default value expressions - C# Programming Guide\"\nms.custom: seodec18\ndescription: \"Default value expressions produce the default value for any reference type or value type\"\nms.date: 04/25/2018\nhelpviewer_keywords: \n  - \"generics [C#], default keyword\"\n  - \"default keyword [C#], generic programming\"\n---\n# default value expressions (C# programming guide)\n\nA default value expression `default(T)` produces the default value of a type `T`. The following table shows which values are produced for various types:\n\n|Type|Default value|\n|---------|---------|\n|Any reference type|`null`|\n|Numeric value type|Zero|\n|[bool](../../language-reference/keywords/bool.md)|`false`|\n|[char](../../language-reference/keywords/char.md)|`'\\0'`|\n|[enum](../../language-reference/keywords/enum.md)|The value produced by the expression `(E)0`, where `E` is the enum identifier.|\n|[struct](../../language-reference/keywords/struct.md)|The value produced by setting all value type fields to their default value and all reference type fields to `null`.|\n|Nullable type|An instance for which the <xref:System.Nullable%601.HasValue%2A> property is `false` and the <xref:System.Nullable%601.Value%2A> property is undefined.|\n\nDefault value expressions are particularly useful in generic classes and methods. One issue that arises using generics is how to assign a default value of a parameterized type `T` when you don't know the following in advance:\n\n- Whether `T` is a reference type or a value type.\n- If `T` is a value type, whether it's a numeric value or a struct.\n\n Given a variable `t` of a parameterized type `T`, the statement `t = null` is only valid if `T` is a reference type. The assignment `t = 0` only works for numeric value types but not for structs. To solve that, use a default value expression:\n\n```csharp\nT t = default(T);\n```\n\nThe `default(T)` expression is not limited to generic classes and methods. Default value expressions can be used with any managed type. Any of these expressions are valid:\n\n [!code-csharp[csProgGuideGenerics#1](../../../../samples/snippets/csharp/programming-guide/statements-expressions-operators/default-value-expressions.cs)]\n\n The following example from the `GenericList<T>` class shows how to use the `default(T)` operator in a generic class. For more information, see [Introduction to Generics](../generics/introduction-to-generics.md).\n\n [!code-csharp[csProgGuideGenerics#2](../../../../samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideGenerics/CS/Generics.cs#Snippet41)]\n\n## default literal and type inference\n\nBeginning with C# 7.1, the `default` literal can be used for default value expressions when the compiler can infer the type of the expression. The `default` literal produces the same value as the equivalent `default(T)` where `T` is the inferred type. This can make code more concise by reducing the redundancy of declaring a type more than once. The `default` literal can be used in any of the following locations:\n\n- variable initializer\n- variable assignment\n- declaring the default value for an optional parameter\n- providing the value for a method call argument\n- return statement (or expression in an expression bodied member)\n\nThe following example shows many usages of the `default` literal in a default value expression:\n\n[!code-csharp[csProgGuideGenerics#3](../../../../samples/snippets/csharp/programming-guide/statements-expressions-operators/default-literal.cs)]\n\n## See also\n\n- <xref:System.Collections.Generic>\n- [C# Programming Guide](../index.md)\n- [Generics (C# Programming Guide)](../generics/index.md)\n- [Generic Methods](../generics/generic-methods.md)\n- [Generics in .NET](~/docs/standard/generics/index.md)\n- [Default values table](../../language-reference/keywords/default-values-table.md)\n","nodes":[{"pos":[4,312],"embed":true,"restype":"x-metadata","content":"title: \"Default value expressions - C# Programming Guide\"\nms.custom: seodec18\ndescription: \"Default value expressions produce the default value for any reference type or value type\"\nms.date: 04/25/2018\nhelpviewer_keywords: \n  - \"generics [C#], default keyword\"\n  - \"default keyword [C#], generic programming\"","nodes":[{"content":"Default value expressions - C# Programming Guide","nodes":[{"pos":[0,48],"content":"Default value expressions - C# Programming Guide","nodes":[{"content":"Default value expressions - C# Programming Guide","pos":[0,48]}]}],"path":["title"],"nosxs":false},{"content":"Default value expressions produce the default value for any reference type or value type","nodes":[{"pos":[0,88],"content":"Default value expressions produce the default value for any reference type or value type","nodes":[{"content":"Default value expressions produce the default value for any reference type or value type","pos":[0,88]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[319,367],"content":"default value expressions (C# programming guide)","linkify":"default value expressions (C# programming guide)","nodes":[{"content":"default value expressions (C# programming guide)","pos":[0,48]}]},{"content":"A default value expression <ph id=\"ph1\">`default(T)`</ph> produces the default value of a type <ph id=\"ph2\">`T`</ph>.","pos":[369,450],"source":"A default value expression `default(T)` produces the default value of a type `T`."},{"content":"The following table shows which values are produced for various types:","pos":[451,521]},{"content":"Type","pos":[524,528]},{"content":"Default value","pos":[529,542]},{"content":"Any reference type","pos":[567,585]},{"content":"Numeric value type","pos":[595,613]},{"content":"Zero","pos":[614,618]},{"pos":[621,670],"content":"<bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../language-reference/keywords/bool.md)</ept>","source":"[bool](../../language-reference/keywords/bool.md)"},{"pos":[681,730],"content":"<bpt id=\"p1\">[</bpt>char<ept id=\"p1\">](../../language-reference/keywords/char.md)</ept>","source":"[char](../../language-reference/keywords/char.md)"},{"pos":[740,789],"content":"<bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../../language-reference/keywords/enum.md)</ept>","source":"[enum](../../language-reference/keywords/enum.md)"},{"pos":[790,868],"content":"The value produced by the expression <ph id=\"ph1\">`(E)0`</ph>, where <ph id=\"ph2\">`E`</ph> is the enum identifier.","source":"The value produced by the expression `(E)0`, where `E` is the enum identifier."},{"pos":[871,924],"content":"<bpt id=\"p1\">[</bpt>struct<ept id=\"p1\">](../../language-reference/keywords/struct.md)</ept>","source":"[struct](../../language-reference/keywords/struct.md)"},{"pos":[925,1040],"content":"The value produced by setting all value type fields to their default value and all reference type fields to <ph id=\"ph1\">`null`</ph>.","source":"The value produced by setting all value type fields to their default value and all reference type fields to `null`."},{"content":"Nullable type","pos":[1043,1056]},{"pos":[1057,1208],"content":"An instance for which the <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph> and the <ph id=\"ph3\">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property is undefined.","source":"An instance for which the <xref:System.Nullable%601.HasValue%2A> property is `false` and the <xref:System.Nullable%601.Value%2A> property is undefined."},{"content":"Default value expressions are particularly useful in generic classes and methods.","pos":[1211,1292]},{"content":"One issue that arises using generics is how to assign a default value of a parameterized type <ph id=\"ph1\">`T`</ph> when you don't know the following in advance:","pos":[1293,1436],"source":" One issue that arises using generics is how to assign a default value of a parameterized type `T` when you don't know the following in advance:"},{"pos":[1440,1488],"content":"Whether <ph id=\"ph1\">`T`</ph> is a reference type or a value type.","source":"Whether `T` is a reference type or a value type."},{"pos":[1491,1556],"content":"If <ph id=\"ph1\">`T`</ph> is a value type, whether it's a numeric value or a struct.","source":"If `T` is a value type, whether it's a numeric value or a struct."},{"content":"Given a variable <ph id=\"ph1\">`t`</ph> of a parameterized type <ph id=\"ph2\">`T`</ph>, the statement <ph id=\"ph3\">`t = null`</ph> is only valid if <ph id=\"ph4\">`T`</ph> is a reference type.","pos":[1559,1675],"source":"Given a variable `t` of a parameterized type `T`, the statement `t = null` is only valid if `T` is a reference type."},{"content":"The assignment <ph id=\"ph1\">`t = 0`</ph> only works for numeric value types but not for structs.","pos":[1676,1754],"source":" The assignment `t = 0` only works for numeric value types but not for structs."},{"content":"To solve that, use a default value expression:","pos":[1755,1801]},{"content":"The <ph id=\"ph1\">`default(T)`</ph> expression is not limited to generic classes and methods.","pos":[1836,1910],"source":"The `default(T)` expression is not limited to generic classes and methods."},{"content":"Default value expressions can be used with any managed type.","pos":[1911,1971]},{"content":"Any of these expressions are valid:","pos":[1972,2007]},{"content":"The following example from the <ph id=\"ph1\">`GenericList&lt;T&gt;`</ph> class shows how to use the <ph id=\"ph2\">`default(T)`</ph> operator in a generic class.","pos":[2167,2283],"source":"The following example from the `GenericList<T>` class shows how to use the `default(T)` operator in a generic class."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Introduction to Generics<ept id=\"p1\">](../generics/introduction-to-generics.md)</ept>.","pos":[2284,2378],"source":" For more information, see [Introduction to Generics](../generics/introduction-to-generics.md)."},{"pos":[2526,2560],"content":"default literal and type inference","linkify":"default literal and type inference","nodes":[{"content":"default literal and type inference","pos":[0,34]}]},{"content":"Beginning with C# 7.1, the <ph id=\"ph1\">`default`</ph> literal can be used for default value expressions when the compiler can infer the type of the expression.","pos":[2562,2704],"source":"Beginning with C# 7.1, the `default` literal can be used for default value expressions when the compiler can infer the type of the expression."},{"content":"The <ph id=\"ph1\">`default`</ph> literal produces the same value as the equivalent <ph id=\"ph2\">`default(T)`</ph> where <ph id=\"ph3\">`T`</ph> is the inferred type.","pos":[2705,2813],"source":" The `default` literal produces the same value as the equivalent `default(T)` where `T` is the inferred type."},{"content":"This can make code more concise by reducing the redundancy of declaring a type more than once.","pos":[2814,2908]},{"content":"The <ph id=\"ph1\">`default`</ph> literal can be used in any of the following locations:","pos":[2909,2977],"source":" The `default` literal can be used in any of the following locations:"},{"content":"variable initializer","pos":[2981,3001]},{"content":"variable assignment","pos":[3004,3023]},{"content":"declaring the default value for an optional parameter","pos":[3026,3079]},{"content":"providing the value for a method call argument","pos":[3082,3128]},{"content":"return statement (or expression in an expression bodied member)","pos":[3131,3194]},{"pos":[3196,3291],"content":"The following example shows many usages of the <ph id=\"ph1\">`default`</ph> literal in a default value expression:","source":"The following example shows many usages of the `default` literal in a default value expression:"},{"pos":[3442,3450],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3490,3525],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../index.md)</ept>","source":"[C# Programming Guide](../index.md)"},{"pos":[3528,3583],"content":"<bpt id=\"p1\">[</bpt>Generics (C# Programming Guide)<ept id=\"p1\">](../generics/index.md)</ept>","source":"[Generics (C# Programming Guide)](../generics/index.md)"},{"pos":[3586,3635],"content":"<bpt id=\"p1\">[</bpt>Generic Methods<ept id=\"p1\">](../generics/generic-methods.md)</ept>","source":"[Generic Methods](../generics/generic-methods.md)"},{"pos":[3638,3691],"content":"<bpt id=\"p1\">[</bpt>Generics in .NET<ept id=\"p1\">](~/docs/standard/generics/index.md)</ept>","source":"[Generics in .NET](~/docs/standard/generics/index.md)"},{"pos":[3694,3775],"content":"<bpt id=\"p1\">[</bpt>Default values table<ept id=\"p1\">](../../language-reference/keywords/default-values-table.md)</ept>","source":"[Default values table](../../language-reference/keywords/default-values-table.md)"}]}