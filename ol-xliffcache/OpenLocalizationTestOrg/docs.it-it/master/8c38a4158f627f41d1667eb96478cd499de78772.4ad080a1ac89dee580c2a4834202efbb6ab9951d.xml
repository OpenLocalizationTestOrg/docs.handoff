{"content":"---\ntitle: \"short - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/14/2017\nf1_keywords: \n  - \"short\"\n  - \"short_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"short keyword [C#]\"\nms.assetid: 04c10688-e51a-4a87-bfec-83f7fb42ff11\n---\n# short (C# Reference)\n\n`short` denotes an integral data type that stores values according to the size and range shown in the following table.\n\n|Type|Range|Size|.NET type|\n|----------|-----------|----------|-------------------------|\n|`short`|-32,768 to 32,767|Signed 16-bit integer|<xref:System.Int16?displayProperty=nameWithType>|\n\n## Literals\n\nYou can declare and initialize a `short` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.  If the integer literal is outside the range of `short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int16.MaxValue?displayProperty=nameWithType>), a compilation error occurs.\n\nIn the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](int.md) to `short` values.\n\n[!code-csharp[Short](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#Short)]\n\n> [!NOTE]\n> You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.\n\nStarting with C# 7.0, a couple of features have been added to enhance readability.\n\n- C# 7.0 allows the usage of the underscore character, `_`, as a digit separator.\n- C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix. A decimal literal isn't permitted to have a leading underscore.\n\nSome examples are shown below.\n\n[!code-csharp[Short](~/samples/snippets/csharp/language-reference/keywords/numeric-literals.cs#ShortS)]\n\n## Compiler overload resolution\n\nA cast must be used when calling overloaded methods. Consider, for example, the following overloaded methods that use `short` and [int](int.md) parameters:\n\n```csharp\npublic static void SampleMethod(int i) {}\npublic static void SampleMethod(short s) {}\n```\n\nUsing the `short` cast guarantees that the correct type is called, for example:\n\n```csharp\nSampleMethod(5);         // Calling the method with the int parameter\nSampleMethod((short)5);  // Calling the method with the short parameter\n```\n\n## Conversions\n\nThere is a predefined implicit conversion from `short` to [int](int.md), [long](long.md), [float](float.md), [double](double.md), or [decimal](decimal.md).\n\nYou cannot implicitly convert nonliteral numeric types of larger storage size to `short` (see [Integral Types Table](integral-types-table.md) for the storage sizes of integral types). Consider, for example, the following two `short` variables `x` and `y`:\n\n```csharp\nshort x = 5, y = 12;\n```\n\nThe following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to [int](int.md) by default.\n\n```csharp\nshort z  = x + y;        // Compiler error CS0266: no conversion from int to short\n```\n\nTo fix this problem, use a cast:\n\n```csharp\nshort z  = (short)(x + y);   // Explicit conversion\n```\n\nIt is also possible to use the following statements, where the destination variable has the same storage size or a larger storage size:\n\n```csharp\nint m = x + y;\nlong n = x + y;\n```\n\nThere is no implicit conversion from floating-point types to `short`. For example, the following statement generates a compiler error unless an explicit cast is used:\n\n```csharp\nshort x = 3.0;          // Error: no implicit conversion from double\nshort y = (short)3.0;   // OK: explicit conversion\n```\n\nFor information on arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md).\n\nFor more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md).\n\n## C# language specification\n\nFor more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md). The language specification is the definitive source for C# syntax and usage.\n\n## See also\n\n- <xref:System.Int16>\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Keywords](index.md)\n- [Integral Types Table](integral-types-table.md)\n- [Built-In Types Table](built-in-types-table.md)\n- [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)\n- [Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)","nodes":[{"pos":[4,222],"embed":true,"restype":"x-metadata","content":"title: \"short - C# Reference\"\nms.custom: seodec18\n\nms.date: 03/14/2017\nf1_keywords: \n  - \"short\"\n  - \"short_CSharpKeyword\"\nhelpviewer_keywords: \n  - \"short keyword [C#]\"\nms.assetid: 04c10688-e51a-4a87-bfec-83f7fb42ff11","nodes":[{"content":"short - C# Reference","nodes":[{"pos":[0,20],"content":"short - C# Reference","nodes":[{"content":"short - C# Reference","pos":[0,20]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[229,249],"content":"short (C# Reference)","linkify":"short (C# Reference)","nodes":[{"content":"short (C# Reference)","pos":[0,20]}]},{"pos":[251,369],"content":"<ph id=\"ph1\">`short`</ph> denotes an integral data type that stores values according to the size and range shown in the following table.","source":"`short` denotes an integral data type that stores values according to the size and range shown in the following table."},{"content":"Type","pos":[372,376]},{"content":"Range","pos":[377,382]},{"content":"Size","pos":[383,387]},{"content":".NET type","pos":[388,397]},{"content":"-32,768 to 32,767","pos":[470,487]},{"content":"Signed 16-bit integer","pos":[488,509]},{"pos":[564,572],"content":"Literals","linkify":"Literals","nodes":[{"content":"Literals","pos":[0,8]}]},{"content":"You can declare and initialize a <ph id=\"ph1\">`short`</ph> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it.","pos":[574,728],"source":"You can declare and initialize a `short` variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7.0) a binary literal to it."},{"content":"If the integer literal is outside the range of <ph id=\"ph1\">`short`</ph> (that is, if it is less than <ph id=\"ph2\">&lt;xref:System.Int16.MinValue?displayProperty=nameWithType&gt;</ph> or greater than <ph id=\"ph3\">&lt;xref:System.Int16.MaxValue?displayProperty=nameWithType&gt;</ph>), a compilation error occurs.","pos":[730,975],"source":"  If the integer literal is outside the range of `short` (that is, if it is less than <xref:System.Int16.MinValue?displayProperty=nameWithType> or greater than <xref:System.Int16.MaxValue?displayProperty=nameWithType>), a compilation error occurs."},{"pos":[977,1155],"content":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept> to <ph id=\"ph1\">`short`</ph> values.","source":"In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from [int](int.md) to `short` values."},{"pos":[1263,1425],"content":"[!NOTE]\nYou use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","leadings":["","> "],"nodes":[{"content":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal. Decimal literals have no prefix.","pos":[8,160],"nodes":[{"content":"You use the prefix <ph id=\"ph1\">`0x`</ph> or <ph id=\"ph2\">`0X`</ph> to denote a hexadecimal literal and the prefix <ph id=\"ph3\">`0b`</ph> or <ph id=\"ph4\">`0B`</ph> to denote a binary literal.","pos":[0,119],"source":"You use the prefix `0x` or `0X` to denote a hexadecimal literal and the prefix `0b` or `0B` to denote a binary literal."},{"content":"Decimal literals have no prefix.","pos":[120,152]}]}]},{"content":"Starting with C# 7.0, a couple of features have been added to enhance readability.","pos":[1427,1509]},{"pos":[1513,1592],"content":"C# 7.0 allows the usage of the underscore character, <ph id=\"ph1\">`_`</ph>, as a digit separator.","source":"C# 7.0 allows the usage of the underscore character, `_`, as a digit separator."},{"content":"C# 7.2 allows <ph id=\"ph1\">`_`</ph> to be used as a digit separator for a binary or hexadecimal literal, after the prefix.","pos":[1595,1699],"source":"C# 7.2 allows `_` to be used as a digit separator for a binary or hexadecimal literal, after the prefix."},{"content":"A decimal literal isn't permitted to have a leading underscore.","pos":[1700,1763]},{"content":"Some examples are shown below.","pos":[1765,1795]},{"pos":[1905,1933],"content":"Compiler overload resolution","linkify":"Compiler overload resolution","nodes":[{"content":"Compiler overload resolution","pos":[0,28]}]},{"content":"A cast must be used when calling overloaded methods.","pos":[1935,1987]},{"content":"Consider, for example, the following overloaded methods that use <ph id=\"ph1\">`short`</ph> and <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept> parameters:","pos":[1988,2090],"source":" Consider, for example, the following overloaded methods that use `short` and [int](int.md) parameters:"},{"pos":[2193,2272],"content":"Using the <ph id=\"ph1\">`short`</ph> cast guarantees that the correct type is called, for example:","source":"Using the `short` cast guarantees that the correct type is called, for example:"},{"pos":[2434,2445],"content":"Conversions","linkify":"Conversions","nodes":[{"content":"Conversions","pos":[0,11]}]},{"pos":[2447,2602],"content":"There is a predefined implicit conversion from <ph id=\"ph1\">`short`</ph> to <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept>, <bpt id=\"p2\">[</bpt>long<ept id=\"p2\">](long.md)</ept>, <bpt id=\"p3\">[</bpt>float<ept id=\"p3\">](float.md)</ept>, <bpt id=\"p4\">[</bpt>double<ept id=\"p4\">](double.md)</ept>, or <bpt id=\"p5\">[</bpt>decimal<ept id=\"p5\">](decimal.md)</ept>.","source":"There is a predefined implicit conversion from `short` to [int](int.md), [long](long.md), [float](float.md), [double](double.md), or [decimal](decimal.md)."},{"content":"You cannot implicitly convert nonliteral numeric types of larger storage size to <ph id=\"ph1\">`short`</ph> (see <bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](integral-types-table.md)</ept> for the storage sizes of integral types).","pos":[2604,2787],"source":"You cannot implicitly convert nonliteral numeric types of larger storage size to `short` (see [Integral Types Table](integral-types-table.md) for the storage sizes of integral types)."},{"content":"Consider, for example, the following two <ph id=\"ph1\">`short`</ph> variables <ph id=\"ph2\">`x`</ph> and <ph id=\"ph3\">`y`</ph>:","pos":[2788,2859],"source":" Consider, for example, the following two `short` variables `x` and `y`:"},{"pos":[2897,3083],"content":"The following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](int.md)</ept> by default.","source":"The following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to [int](int.md) by default."},{"content":"To fix this problem, use a cast:","pos":[3183,3215]},{"content":"It is also possible to use the following statements, where the destination variable has the same storage size or a larger storage size:","pos":[3284,3419]},{"content":"There is no implicit conversion from floating-point types to <ph id=\"ph1\">`short`</ph>.","pos":[3467,3536],"source":"There is no implicit conversion from floating-point types to `short`."},{"content":"For example, the following statement generates a compiler error unless an explicit cast is used:","pos":[3537,3633]},{"pos":[3770,3910],"content":"For information on arithmetic expressions with mixed floating-point types and integral types, see <bpt id=\"p1\">[</bpt>float<ept id=\"p1\">](float.md)</ept> and <bpt id=\"p2\">[</bpt>double<ept id=\"p2\">](double.md)</ept>.","source":"For information on arithmetic expressions with mixed floating-point types and integral types, see [float](float.md) and [double](double.md)."},{"pos":[3912,4055],"content":"For more information on implicit numeric conversion rules, see the <bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>.","source":"For more information on implicit numeric conversion rules, see the [Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)."},{"pos":[4060,4085],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](~/_csharplang/spec/types.md#integral-types)</ept> in the <bpt id=\"p2\">[</bpt>C# Language Specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","pos":[4087,4245],"source":"For more information, see [Integral types](~/_csharplang/spec/types.md#integral-types) in the [C# Language Specification](../language-specification/index.md)."},{"content":"The language specification is the definitive source for C# syntax and usage.","pos":[4246,4322]},{"pos":[4327,4335],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4361,4388],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[4391,4447],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[4450,4473],"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](index.md)</ept>","source":"[C# Keywords](index.md)"},{"pos":[4476,4523],"content":"<bpt id=\"p1\">[</bpt>Integral Types Table<ept id=\"p1\">](integral-types-table.md)</ept>","source":"[Integral Types Table](integral-types-table.md)"},{"pos":[4526,4573],"content":"<bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](built-in-types-table.md)</ept>","source":"[Built-In Types Table](built-in-types-table.md)"},{"pos":[4576,4651],"content":"<bpt id=\"p1\">[</bpt>Implicit Numeric Conversions Table<ept id=\"p1\">](implicit-numeric-conversions-table.md)</ept>","source":"[Implicit Numeric Conversions Table](implicit-numeric-conversions-table.md)"},{"pos":[4654,4729],"content":"<bpt id=\"p1\">[</bpt>Explicit Numeric Conversions Table<ept id=\"p1\">](explicit-numeric-conversions-table.md)</ept>","source":"[Explicit Numeric Conversions Table](explicit-numeric-conversions-table.md)"}]}