{"content":"---\ntitle: \".NET Performance Tips | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"C# language, performance\"\n  - \"performance [C#]\"\n  - \"Visual Basic, performance\"\n  - \"performance [Visual Basic]\"\nms.assetid: ae275793-857d-4102-9095-b4c2a02d57f4\ncaps.latest.revision: 36\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\nmanager: \"wpickett\"\n---\n# .NET Performance Tips\nThe term *performance* generally refers to the execution speed of a program. You can sometimes increase execution speed by following certain basic rules in your source code. In some programs, it is important to examine code closely and use profilers to make sure that it is running as fast as possible. In other programs, you do not have to perform such optimization because the code is running acceptably fast as it is written. This article lists some common areas where performance can suffer and tips for improving it as well as links to additional performance topics. For more information about planning and measuring for performance, see [Performance](../../../docs/framework/performance/index.md)  \n  \n## Boxing and Unboxing  \n It is best to avoid using value types in situations where they must be boxed a high number of times, for example in non-generic collections classes such as <xref:System.Collections.ArrayList?displayProperty=fullName>. You can avoid boxing of value types by using generic collections such as <xref:System.Collections.Generic.List%601?displayProperty=fullName>. Boxing and unboxing are computationally expensive processes. When a value type is boxed, an entirely new object must be created. This can take up to 20 times longer than a simple reference assignment. When unboxing, the casting process can take four times as long as an assignment. For more information, see [Boxing and Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md).  \n  \n## Strings  \n When you concatenate a large number of string variables, for example in a tight loop, use <xref:System.Text.StringBuilder?displayProperty=fullName> instead of the C# [+ operator](~/docs/csharp/language-reference/operators/addition-operator.md) or the Visual Basic [Concatenation Operators](~/docs/visual-basic/language-reference/operators/concatenation-operators.md). For more information, see [How to: Concatenate Multiple Strings](~/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md) and [Concatenation Operators in Visual Basic](~/docs/visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md).  \n  \n## Destructors  \n Empty destructors should not be used. When a class contains a destructor, an entry is created in the Finalize queue. When the destructor is called, the garbage collector is invoked to process the queue. If the destructor is empty, this simply results in a loss of performance. For more information, see [Destructors](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) and [Object Lifetime: How Objects Are Created and Destroyed](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md).  \n  \n## Other Resources  \n  \n-   [Writing Faster Managed Code: Know What Things Cost](http://go.microsoft.com/fwlink/?LinkId=99294)  \n  \n-   [Writing High-Performance Managed Applications: A Primer](http://go.microsoft.com/fwlink/?LinkId=99295)  \n  \n-   [Garbage Collector Basics and Performance Hints](http://go.microsoft.com/fwlink/?LinkId=99296)  \n  \n-   [Performance Tips and Tricks in .NET Applications](http://go.microsoft.com/fwlink/?LinkId=99297)  \n  \n-   [Inside Diagnostic Tools for .NET](http://go.microsoft.com/fwlink/?LinkId=112407)  \n  \n-   [Rico Mariani's Performance Tidbits](http://go.microsoft.com/fwlink/?LinkId=115679)  \n  \n## See Also  \n [Performance](../../../docs/framework/performance/index.md)   \n [Programming Concepts](http://msdn.microsoft.com/library/65c12cca-af4f-4017-886e-2dbc00a189d6)   \n [Visual Basic Programming Guide](../../visual-basic/programming-guide/index.md)   \n [C# Programming Guide](http://msdn.microsoft.com/library/ac0f23a2-6bf3-4077-be99-538ae5fd3bc5)","nodes":[{"pos":[4,489],"nodes":[{"content":".NET Performance Tips | Microsoft Docs","nodes":[{"pos":[0,38],"content":".NET Performance Tips | Microsoft Docs","nodes":[{"content":".NET Performance Tips | Microsoft Docs","pos":[0,38]}]}],"pos":[6,47],"yaml":true}],"content":"title: \".NET Performance Tips | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"C# language, performance\"\n  - \"performance [C#]\"\n  - \"Visual Basic, performance\"\n  - \"performance [Visual Basic]\"\nms.assetid: ae275793-857d-4102-9095-b4c2a02d57f4\ncaps.latest.revision: 36\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[496,517],"content":".NET Performance Tips","linkify":".NET Performance Tips","nodes":[{"content":".NET Performance Tips","pos":[0,21]}]},{"content":"The term <bpt id=\"p1\">*</bpt>performance<ept id=\"p1\">*</ept> generally refers to the execution speed of a program.","pos":[518,594],"source":"The term *performance* generally refers to the execution speed of a program."},{"content":"You can sometimes increase execution speed by following certain basic rules in your source code.","pos":[595,691]},{"content":"In some programs, it is important to examine code closely and use profilers to make sure that it is running as fast as possible.","pos":[692,820]},{"content":"In other programs, you do not have to perform such optimization because the code is running acceptably fast as it is written.","pos":[821,946]},{"content":"This article lists some common areas where performance can suffer and tips for improving it as well as links to additional performance topics.","pos":[947,1089]},{"content":"For more information about planning and measuring for performance, see <bpt id=\"p1\">[</bpt>Performance<ept id=\"p1\">](../../../docs/framework/performance/index.md)</ept>","pos":[1090,1220],"source":" For more information about planning and measuring for performance, see [Performance](../../../docs/framework/performance/index.md)"},{"pos":[1229,1248],"content":"Boxing and Unboxing","linkify":"Boxing and Unboxing","nodes":[{"content":"Boxing and Unboxing","pos":[0,19]}]},{"content":"It is best to avoid using value types in situations where they must be boxed a high number of times, for example in non-generic collections classes such as <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList?displayProperty=fullName&gt;</ph>.","pos":[1252,1469],"source":"It is best to avoid using value types in situations where they must be boxed a high number of times, for example in non-generic collections classes such as <xref:System.Collections.ArrayList?displayProperty=fullName>."},{"content":"You can avoid boxing of value types by using generic collections such as <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph>.","pos":[1470,1611],"source":" You can avoid boxing of value types by using generic collections such as <xref:System.Collections.Generic.List%601?displayProperty=fullName>."},{"content":"Boxing and unboxing are computationally expensive processes.","pos":[1612,1672]},{"content":"When a value type is boxed, an entirely new object must be created.","pos":[1673,1740]},{"content":"This can take up to 20 times longer than a simple reference assignment.","pos":[1741,1812]},{"content":"When unboxing, the casting process can take four times as long as an assignment.","pos":[1813,1893]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Boxing and Unboxing<ept id=\"p1\">](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md)</ept>.","pos":[1894,2004],"source":" For more information, see [Boxing and Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md)."},{"pos":[2013,2020],"content":"Strings","linkify":"Strings","nodes":[{"content":"Strings","pos":[0,7]}]},{"content":"When you concatenate a large number of string variables, for example in a tight loop, use <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder?displayProperty=fullName&gt;</ph> instead of the C# <bpt id=\"p1\">[</bpt>+ operator<ept id=\"p1\">](~/docs/csharp/language-reference/operators/addition-operator.md)</ept> or the Visual Basic <bpt id=\"p2\">[</bpt>Concatenation Operators<ept id=\"p2\">](~/docs/visual-basic/language-reference/operators/concatenation-operators.md)</ept>.","pos":[2024,2391],"source":"When you concatenate a large number of string variables, for example in a tight loop, use <xref:System.Text.StringBuilder?displayProperty=fullName> instead of the C# [+ operator](~/docs/csharp/language-reference/operators/addition-operator.md) or the Visual Basic [Concatenation Operators](~/docs/visual-basic/language-reference/operators/concatenation-operators.md)."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Concatenate Multiple Strings<ept id=\"p1\">](~/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Concatenation Operators in Visual Basic<ept id=\"p2\">](~/docs/visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)</ept>.","pos":[2392,2693],"source":" For more information, see [How to: Concatenate Multiple Strings](~/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md) and [Concatenation Operators in Visual Basic](~/docs/visual-basic/programming-guide/language-features/operators-and-expressions/concatenation-operators.md)."},{"pos":[2702,2713],"content":"Destructors","linkify":"Destructors","nodes":[{"content":"Destructors","pos":[0,11]}]},{"content":"Empty destructors should not be used.","pos":[2717,2754]},{"content":"When a class contains a destructor, an entry is created in the Finalize queue.","pos":[2755,2833]},{"content":"When the destructor is called, the garbage collector is invoked to process the queue.","pos":[2834,2919]},{"content":"If the destructor is empty, this simply results in a loss of performance.","pos":[2920,2993]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Destructors<ept id=\"p1\">](~/docs/csharp/programming-guide/classes-and-structs/destructors.md)</ept> and <bpt id=\"p2\">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id=\"p2\">](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept>.","pos":[2994,3297],"source":" For more information, see [Destructors](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) and [Object Lifetime: How Objects Are Created and Destroyed](~/docs/visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)."},{"pos":[3306,3321],"content":"Other Resources","linkify":"Other Resources","nodes":[{"content":"Other Resources","pos":[0,15]}]},{"pos":[3331,3429],"content":"<bpt id=\"p1\">[</bpt>Writing Faster Managed Code: Know What Things Cost<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=99294)</ept>","source":"[Writing Faster Managed Code: Know What Things Cost](http://go.microsoft.com/fwlink/?LinkId=99294)"},{"pos":[3439,3542],"content":"<bpt id=\"p1\">[</bpt>Writing High-Performance Managed Applications: A Primer<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=99295)</ept>","source":"[Writing High-Performance Managed Applications: A Primer](http://go.microsoft.com/fwlink/?LinkId=99295)"},{"pos":[3552,3646],"content":"<bpt id=\"p1\">[</bpt>Garbage Collector Basics and Performance Hints<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=99296)</ept>","source":"[Garbage Collector Basics and Performance Hints](http://go.microsoft.com/fwlink/?LinkId=99296)"},{"pos":[3656,3752],"content":"<bpt id=\"p1\">[</bpt>Performance Tips and Tricks in .NET Applications<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=99297)</ept>","source":"[Performance Tips and Tricks in .NET Applications](http://go.microsoft.com/fwlink/?LinkId=99297)"},{"pos":[3762,3843],"content":"<bpt id=\"p1\">[</bpt>Inside Diagnostic Tools for .NET<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=112407)</ept>","source":"[Inside Diagnostic Tools for .NET](http://go.microsoft.com/fwlink/?LinkId=112407)"},{"pos":[3853,3936],"content":"<bpt id=\"p1\">[</bpt>Rico Mariani's Performance Tidbits<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=115679)</ept>","source":"[Rico Mariani's Performance Tidbits](http://go.microsoft.com/fwlink/?LinkId=115679)"},{"pos":[3945,3953],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Performance<ept id=\"p1\">](../../../docs/framework/performance/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3957,4017],"source":"[Performance](../../../docs/framework/performance/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Programming Concepts<ept id=\"p1\">](http://msdn.microsoft.com/library/65c12cca-af4f-4017-886e-2dbc00a189d6)</ept><ph id=\"ph1\"> </ph>","pos":[4021,4116],"source":"[Programming Concepts](http://msdn.microsoft.com/library/65c12cca-af4f-4017-886e-2dbc00a189d6) "},{"content":"<bpt id=\"p1\">[</bpt>Visual Basic Programming Guide<ept id=\"p1\">](../../visual-basic/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4120,4200],"source":"[Visual Basic Programming Guide](../../visual-basic/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](http://msdn.microsoft.com/library/ac0f23a2-6bf3-4077-be99-538ae5fd3bc5)</ept>","pos":[4204,4298],"source":"[C# Programming Guide](http://msdn.microsoft.com/library/ac0f23a2-6bf3-4077-be99-538ae5fd3bc5)"}]}