{"content":"---\ntitle: \"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"COM interop, Windows Forms\"\n  - \"COM [Windows Forms]\"\n  - \"Windows Forms, unmanaged\"\n  - \"ActiveX controls [Windows Forms], COM interop\"\n  - \"Windows Forms, interop\"\nms.assetid: a9e04765-d2de-4389-a494-a9a6d07aa6ee\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread\nYou can resolve COM interoperability problems by displaying your form on a [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] message loop, which you can create by using the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method.  \n  \n To make a Windows Form work correctly from a COM client application, you must run the form on a Windows Forms message loop. To do this, use one of the following approaches:  \n  \n-   Use the <xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName> method to display the Windows Form. For more information, see [How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method](../../../../docs/framework/winforms/advanced/com-interop-by-displaying-a-windows-form-shadow.md).  \n  \n-   Display each Windows Form on a separate thread.  \n  \n There is extensive support for this feature in [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)].  \n  \n Also see [Walkthrough: Supporting COM Interop by Displaying Each Windows Form on Its Own Thread](http://msdn.microsoft.com/library/ms233639\\(v=vs.110\\)).  \n  \n## Example  \n The following code example demonstrates how to display the form on a separate thread and call the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method to start a Windows Forms message pump on that thread. To use this approach, you must marshal any calls to the form from the unmanaged application by using the <xref:System.Windows.Forms.Control.Invoke%2A> method.  \n  \n This approach requires that each instance of a form runs on its own thread by using its own message loop. You cannot have more than one message loop running per thread. Therefore, you cannot change the client application's message loop. However, you can modify the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] component to start a new thread that uses its own message loop.  \n  \n [!code-vb[System.Windows.Forms.ComInterop#1](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ComInterop/VB/COMForm.vb#1)]  \n  \n [!code-vb[System.Windows.Forms.ComInterop#10](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ComInterop/VB/FormManager.vb#10)]  \n  \n [!code-vb[System.Windows.Forms.ComInterop#100](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ComInterop/VB/Form1.vb#100)]  \n  \n## Compiling the Code  \n  \n-   Compile the `COMForm`, `Form1`, and `FormManager` types into an assembly called `COMWinform.dll`. Register the assembly for COM interop by using one of the methods described in [Packaging an Assembly for COM](../../../../docs/framework/interop/packaging-an-assembly-for-com.md). You can now use the assembly and its corresponding type library (.tlb) file in unmanaged applications. For example, you can use the type library as a reference in a Visual Basic 6.0 executable project.  \n  \n## See Also  \n [Exposing .NET Framework Components to COM](../../../../docs/framework/interop/exposing-dotnet-components-to-com.md)   \n [Packaging an Assembly for COM](../../../../docs/framework/interop/packaging-an-assembly-for-com.md)   \n [Registering Assemblies with COM](../../../../docs/framework/interop/registering-assemblies-with-com.md)   \n [How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method](../../../../docs/framework/winforms/advanced/com-interop-by-displaying-a-windows-form-shadow.md)   \n [Windows Forms and Unmanaged Applications Overview](../../../../docs/framework/winforms/advanced/windows-forms-and-unmanaged-applications-overview.md)","nodes":[{"pos":[4,629],"embed":true,"restype":"x-metadata","content":"title: \"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"COM interop, Windows Forms\"\n  - \"COM [Windows Forms]\"\n  - \"Windows Forms, unmanaged\"\n  - \"ActiveX controls [Windows Forms], COM interop\"\n  - \"Windows Forms, interop\"\nms.assetid: a9e04765-d2de-4389-a494-a9a6d07aa6ee\ncaps.latest.revision: 9\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread | Microsoft Docs","nodes":[{"pos":[0,94],"content":"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread | Microsoft Docs","nodes":[{"content":"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread | Microsoft Docs","pos":[0,94]}]}],"path":["title"]}],"yml":true},{"pos":[636,713],"content":"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread","linkify":"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread","nodes":[{"content":"How to: Support COM Interop by Displaying Each Windows Form on Its Own Thread","pos":[0,77]}]},{"pos":[714,980],"content":"You can resolve COM interoperability problems by displaying your form on a <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> message loop, which you can create by using the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> method.","source":"You can resolve COM interoperability problems by displaying your form on a [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] message loop, which you can create by using the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method."},{"content":"To make a Windows Form work correctly from a COM client application, you must run the form on a Windows Forms message loop.","pos":[987,1110]},{"content":"To do this, use one of the following approaches:","pos":[1111,1159]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName&gt;</ph> method to display the Windows Form.","pos":[1169,1284],"source":"Use the <xref:System.Windows.Forms.Form.ShowDialog%2A?displayProperty=fullName> method to display the Windows Form."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/com-interop-by-displaying-a-windows-form-shadow.md)</ept>.","pos":[1285,1494],"source":" For more information, see [How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method](../../../../docs/framework/winforms/advanced/com-interop-by-displaying-a-windows-form-shadow.md)."},{"content":"Display each Windows Form on a separate thread.","pos":[1504,1551]},{"pos":[1558,1659],"content":"There is extensive support for this feature in <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)]</ph>.","source":"There is extensive support for this feature in [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)]."},{"pos":[1666,1819],"content":"Also see <bpt id=\"p1\">[</bpt>Walkthrough: Supporting COM Interop by Displaying Each Windows Form on Its Own Thread<ept id=\"p1\">](http://msdn.microsoft.com/library/ms233639\\(v=vs.110\\))</ept>.","source":"Also see [Walkthrough: Supporting COM Interop by Displaying Each Windows Form on Its Own Thread](http://msdn.microsoft.com/library/ms233639\\(v=vs.110\\))."},{"pos":[1828,1835],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example demonstrates how to display the form on a separate thread and call the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> method to start a Windows Forms message pump on that thread.","pos":[1839,2069],"source":"The following code example demonstrates how to display the form on a separate thread and call the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method to start a Windows Forms message pump on that thread."},{"content":"To use this approach, you must marshal any calls to the form from the unmanaged application by using the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method.","pos":[2070,2228],"source":" To use this approach, you must marshal any calls to the form from the unmanaged application by using the <xref:System.Windows.Forms.Control.Invoke%2A> method."},{"content":"This approach requires that each instance of a form runs on its own thread by using its own message loop.","pos":[2235,2340]},{"content":"You cannot have more than one message loop running per thread.","pos":[2341,2403]},{"content":"Therefore, you cannot change the client application's message loop.","pos":[2404,2471]},{"content":"However, you can modify the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> component to start a new thread that uses its own message loop.","pos":[2472,2627],"source":" However, you can modify the [!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)] component to start a new thread that uses its own message loop."},{"pos":[3133,3151],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Compile the <ph id=\"ph1\">`COMForm`</ph>, <ph id=\"ph2\">`Form1`</ph>, and <ph id=\"ph3\">`FormManager`</ph> types into an assembly called <ph id=\"ph4\">`COMWinform.dll`</ph>.","pos":[3161,3258],"source":"Compile the `COMForm`, `Form1`, and `FormManager` types into an assembly called `COMWinform.dll`."},{"content":"Register the assembly for COM interop by using one of the methods described in <bpt id=\"p1\">[</bpt>Packaging an Assembly for COM<ept id=\"p1\">](../../../../docs/framework/interop/packaging-an-assembly-for-com.md)</ept>.","pos":[3259,3439],"source":" Register the assembly for COM interop by using one of the methods described in [Packaging an Assembly for COM](../../../../docs/framework/interop/packaging-an-assembly-for-com.md)."},{"content":"You can now use the assembly and its corresponding type library (.tlb) file in unmanaged applications.","pos":[3440,3542]},{"content":"For example, you can use the type library as a reference in a Visual Basic 6.0 executable project.","pos":[3543,3641]},{"pos":[3650,3658],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Exposing .NET Framework Components to COM<ept id=\"p1\">](../../../../docs/framework/interop/exposing-dotnet-components-to-com.md)</ept><ph id=\"ph1\"> </ph>","pos":[3662,3779],"source":"[Exposing .NET Framework Components to COM](../../../../docs/framework/interop/exposing-dotnet-components-to-com.md) "},{"content":"<bpt id=\"p1\">[</bpt>Packaging an Assembly for COM<ept id=\"p1\">](../../../../docs/framework/interop/packaging-an-assembly-for-com.md)</ept><ph id=\"ph1\"> </ph>","pos":[3783,3884],"source":"[Packaging an Assembly for COM](../../../../docs/framework/interop/packaging-an-assembly-for-com.md) "},{"content":"<bpt id=\"p1\">[</bpt>Registering Assemblies with COM<ept id=\"p1\">](../../../../docs/framework/interop/registering-assemblies-with-com.md)</ept><ph id=\"ph1\"> </ph>","pos":[3888,3993],"source":"[Registering Assemblies with COM](../../../../docs/framework/interop/registering-assemblies-with-com.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/com-interop-by-displaying-a-windows-form-shadow.md)</ept><ph id=\"ph1\"> </ph>","pos":[3997,4180],"source":"[How to: Support COM Interop by Displaying a Windows Form with the ShowDialog Method](../../../../docs/framework/winforms/advanced/com-interop-by-displaying-a-windows-form-shadow.md) "},{"content":"<bpt id=\"p1\">[</bpt>Windows Forms and Unmanaged Applications Overview<ept id=\"p1\">](../../../../docs/framework/winforms/advanced/windows-forms-and-unmanaged-applications-overview.md)</ept>","pos":[4184,4334],"source":"[Windows Forms and Unmanaged Applications Overview](../../../../docs/framework/winforms/advanced/windows-forms-and-unmanaged-applications-overview.md)"}]}