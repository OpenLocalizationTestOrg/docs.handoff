{"content":"---\ntitle: Port code from .NET Framework to .NET Core\ndescription: Understand the porting process and discover tools you may find helpful when porting a .NET Framework project to .NET Core.\nauthor: cartermp\nms.date: 12/07/2018\nms.custom: seodec18\n---\n# Port your code from .NET Framework to .NET Core\n\nIf you've got code that runs on the .NET Framework, you may be interested in running your code on .NET Core, too. Here's an overview of the porting process and a list of the tools you may find helpful when porting your code to .NET Core.\n\n## Overview of the porting process\n\nThis is the process we recommend you take when porting your project to .NET Core. Each step of the process is covered in more detail in further articles.\n\n1. Identify and account for your third-party dependencies.\n\n   This step involves understanding what your third-party dependencies are, how you depend on them, how to check if they also run on .NET Core, and steps you can take if they don't. It also covers how you can migrate your dependencies over to the [PackageReference](/nuget/consume-packages/package-references-in-project-files) format that is used in .NET Core.\n\n2. Retarget all projects you wish to port to target the .NET Framework 4.7.2 or higher.\n\n   This step ensures that you can use API alternatives for .NET Framework-specific targets when .NET Core doesn't support a particular API.\n\n3. Use the [.NET Portability Analyzer](../../standard/analyzers/portability-analyzer.md) to analyze your assemblies and develop a plan to port based on its results.\n\n   The API Portability Analyzer tool analyzes your compiled assemblies and generates a report that shows a high-level portability summary and a breakdown of each API you're using that isn't available on .NET Core. You can use this report alongside an analysis of your codebase to develop a plan for how you'll port your code over.\n\n4. Port your tests code.\n\n   Because porting to .NET Core is such a significant change to your codebase, it's highly recommended to get your tests ported, so that you can run tests as you port your code over. MSTest, xUnit, and NUnit all support .NET Core.\n\n5. Execute your plan for porting!\n\nThe following list shows tools you might find helpful to use during the porting process:\n\n* .NET Portability Analyzer - [command line tool](https://github.com/Microsoft/dotnet-apiport/releases) or [Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=ConnieYau.NETPortabilityAnalyzer), a toolchain that can generate a report of how portable your code is between .NET Framework and .NET Core, with an assembly-by-assembly breakdown of issues. For more information, see [.NET Portability Analyzer](../../standard/analyzers/portability-analyzer.md).\n* .NET API analyzer - A Roslyn analyzer that discovers potential compatibility risks for C# APIs on different platforms and detects calls to deprecated APIs. For more information, see [.NET API analyzer](../../standard/analyzers/api-analyzer.md).\n* Reverse Package Search - A [useful web service](https://packagesearch.azurewebsites.net) that allows you to search for a type and find packages containing that type.\n\nAdditionally, you can attempt to port smaller solutions or individual projects to the .NET Core project file format with the [CsprojToVs2017](https://github.com/hvanbakel/CsprojToVs2017) tool.\n\n> [!WARNING] \n> CsprojToVs2017 is a third-party tool. There is no guarantee that it will work for all of your projects, and it may cause subtle changes in behavior that you depend on. CsprojToVs2017 should be used as a _starting point_ that automates the basic things that can be automated. It is not a guaranteed solution to migrating project file formats.\n\n>[!div class=\"step-by-step\"]\n>[Next](net-framework-tech-unavailable.md)\n","nodes":[{"pos":[4,246],"embed":true,"restype":"x-metadata","content":"title: Port code from .NET Framework to .NET Core\ndescription: Understand the porting process and discover tools you may find helpful when porting a .NET Framework project to .NET Core.\nauthor: cartermp\nms.date: 12/07/2018\nms.custom: seodec18","nodes":[{"content":"Port code from .NET Framework to .NET Core","nodes":[{"pos":[0,42],"content":"Port code from .NET Framework to .NET Core","nodes":[{"content":"Port code from .NET Framework to .NET Core","pos":[0,42]}]}],"path":["title"],"nosxs":false},{"content":"Understand the porting process and discover tools you may find helpful when porting a .NET Framework project to .NET Core.","nodes":[{"pos":[0,122],"content":"Understand the porting process and discover tools you may find helpful when porting a .NET Framework project to .NET Core.","nodes":[{"content":"Understand the porting process and discover tools you may find helpful when porting a .NET Framework project to .NET Core.","pos":[0,122]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[253,300],"content":"Port your code from .NET Framework to .NET Core","linkify":"Port your code from .NET Framework to .NET Core","nodes":[{"content":"Port your code from .NET Framework to .NET Core","pos":[0,47]}]},{"content":"If you've got code that runs on the .NET Framework, you may be interested in running your code on .NET Core, too.","pos":[302,415]},{"content":"Here's an overview of the porting process and a list of the tools you may find helpful when porting your code to .NET Core.","pos":[416,539]},{"pos":[544,575],"content":"Overview of the porting process","linkify":"Overview of the porting process","nodes":[{"content":"Overview of the porting process","pos":[0,31]}]},{"content":"This is the process we recommend you take when porting your project to .NET Core.","pos":[577,658]},{"content":"Each step of the process is covered in more detail in further articles.","pos":[659,730]},{"content":"Identify and account for your third-party dependencies.","pos":[735,790]},{"content":"This step involves understanding what your third-party dependencies are, how you depend on them, how to check if they also run on .NET Core, and steps you can take if they don't.","pos":[795,973]},{"content":"It also covers how you can migrate your dependencies over to the <bpt id=\"p1\">[</bpt>PackageReference<ept id=\"p1\">](/nuget/consume-packages/package-references-in-project-files)</ept> format that is used in .NET Core.","pos":[974,1152],"source":" It also covers how you can migrate your dependencies over to the [PackageReference](/nuget/consume-packages/package-references-in-project-files) format that is used in .NET Core."},{"content":"Retarget all projects you wish to port to target the .NET Framework 4.7.2 or higher.","pos":[1157,1241]},{"content":"This step ensures that you can use API alternatives for .NET Framework-specific targets when .NET Core doesn't support a particular API.","pos":[1246,1382]},{"pos":[1387,1548],"content":"Use the <bpt id=\"p1\">[</bpt>.NET Portability Analyzer<ept id=\"p1\">](../../standard/analyzers/portability-analyzer.md)</ept> to analyze your assemblies and develop a plan to port based on its results.","source":"Use the [.NET Portability Analyzer](../../standard/analyzers/portability-analyzer.md) to analyze your assemblies and develop a plan to port based on its results."},{"content":"The API Portability Analyzer tool analyzes your compiled assemblies and generates a report that shows a high-level portability summary and a breakdown of each API you're using that isn't available on .NET Core.","pos":[1553,1763]},{"content":"You can use this report alongside an analysis of your codebase to develop a plan for how you'll port your code over.","pos":[1764,1880]},{"content":"Port your tests code.","pos":[1885,1906]},{"content":"Because porting to .NET Core is such a significant change to your codebase, it's highly recommended to get your tests ported, so that you can run tests as you port your code over.","pos":[1911,2090]},{"content":"MSTest, xUnit, and NUnit all support .NET Core.","pos":[2091,2138]},{"content":"Execute your plan for porting!","pos":[2143,2173]},{"content":"The following list shows tools you might find helpful to use during the porting process:","pos":[2175,2263]},{"content":".NET Portability Analyzer - <bpt id=\"p1\">[</bpt>command line tool<ept id=\"p1\">](https://github.com/Microsoft/dotnet-apiport/releases)</ept> or <bpt id=\"p2\">[</bpt>Visual Studio Extension<ept id=\"p2\">](https://marketplace.visualstudio.com/items?itemName=ConnieYau.NETPortabilityAnalyzer)</ept>, a toolchain that can generate a report of how portable your code is between .NET Framework and .NET Core, with an assembly-by-assembly breakdown of issues.","pos":[2267,2640],"source":".NET Portability Analyzer - [command line tool](https://github.com/Microsoft/dotnet-apiport/releases) or [Visual Studio Extension](https://marketplace.visualstudio.com/items?itemName=ConnieYau.NETPortabilityAnalyzer), a toolchain that can generate a report of how portable your code is between .NET Framework and .NET Core, with an assembly-by-assembly breakdown of issues."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>.NET Portability Analyzer<ept id=\"p1\">](../../standard/analyzers/portability-analyzer.md)</ept>.","pos":[2641,2745],"source":" For more information, see [.NET Portability Analyzer](../../standard/analyzers/portability-analyzer.md)."},{"content":".NET API analyzer - A Roslyn analyzer that discovers potential compatibility risks for C# APIs on different platforms and detects calls to deprecated APIs.","pos":[2748,2903]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>.NET API analyzer<ept id=\"p1\">](../../standard/analyzers/api-analyzer.md)</ept>.","pos":[2904,2992],"source":" For more information, see [.NET API analyzer](../../standard/analyzers/api-analyzer.md)."},{"pos":[2995,3160],"content":"Reverse Package Search - A <bpt id=\"p1\">[</bpt>useful web service<ept id=\"p1\">](https://packagesearch.azurewebsites.net)</ept> that allows you to search for a type and find packages containing that type.","source":"Reverse Package Search - A [useful web service](https://packagesearch.azurewebsites.net) that allows you to search for a type and find packages containing that type."},{"pos":[3162,3354],"content":"Additionally, you can attempt to port smaller solutions or individual projects to the .NET Core project file format with the <bpt id=\"p1\">[</bpt>CsprojToVs2017<ept id=\"p1\">](https://github.com/hvanbakel/CsprojToVs2017)</ept> tool.","source":"Additionally, you can attempt to port smaller solutions or individual projects to the .NET Core project file format with the [CsprojToVs2017](https://github.com/hvanbakel/CsprojToVs2017) tool."},{"pos":[3358,3713],"content":"[!WARNING] \nCsprojToVs2017 is a third-party tool. There is no guarantee that it will work for all of your projects, and it may cause subtle changes in behavior that you depend on. CsprojToVs2017 should be used as a _starting point_ that automates the basic things that can be automated. It is not a guaranteed solution to migrating project file formats.","leadings":["","> "],"nodes":[{"content":"CsprojToVs2017 is a third-party tool. There is no guarantee that it will work for all of your projects, and it may cause subtle changes in behavior that you depend on. CsprojToVs2017 should be used as a _starting point_ that automates the basic things that can be automated. It is not a guaranteed solution to migrating project file formats.","pos":[12,353],"nodes":[{"content":"CsprojToVs2017 is a third-party tool.","pos":[0,37]},{"content":"There is no guarantee that it will work for all of your projects, and it may cause subtle changes in behavior that you depend on.","pos":[38,167]},{"content":"CsprojToVs2017 should be used as a <bpt id=\"p1\">_</bpt>starting point<ept id=\"p1\">_</ept> that automates the basic things that can be automated.","pos":[168,274],"source":" CsprojToVs2017 should be used as a _starting point_ that automates the basic things that can be automated."},{"content":"It is not a guaranteed solution to migrating project file formats.","pos":[275,341]}]}]},{"pos":[3716,3786],"content":"[!div class=\"step-by-step\"]\n[Next](net-framework-tech-unavailable.md)","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">[</bpt>Next<ept id=\"p1\">](net-framework-tech-unavailable.md)</ept>","pos":[28,69],"source":"[Next](net-framework-tech-unavailable.md)"}]}]}