<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ca9b9fcee55030244fce601ebf7da304589674a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\metadata-and-self-describing-components.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c17d05fe921b153b859eb15d200efc2b6d30943c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac063407e2a589a647f149f57962316a70030c36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Metadata and Self-Describing Components | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Metadata and Self-Describing Components</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In the past, a software component (.exe or .dll) that was written in one language could not easily use a software component that was written in another language.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>COM provided a step towards solving this problem.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Framework makes component interoperation even easier by allowing compilers to emit additional declarative information into all modules and assemblies.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This information, called metadata, helps components to interact seamlessly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Metadata is binary information describing your program that is stored either in a common language runtime portable executable (PE) file or in memory.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you compile your code into a PE file, metadata is inserted into one portion of the file, and your code is converted to Microsoft intermediate language (MSIL) and inserted into another portion of the file.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Every type and member that is defined and referenced in a module or assembly is described within metadata.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When code is executed, the runtime loads metadata into memory and references it to discover information about your code's classes, members, inheritance, and so on.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Metadata describes every type and member defined in your code in a language-neutral manner.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Metadata stores the following information:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description of the assembly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Identity (name, version, culture, public key).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The types that are exported.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Other assemblies that this assembly depends on.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Security permissions needed to run.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description of types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Name, visibility, base class, and interfaces implemented.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Members (methods, fields, properties, events, nested types).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Attributes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Additional descriptive elements that modify types and members.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Benefits of Metadata</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Metadata is the key to a simpler programming model, and eliminates the need for Interface Definition Language (IDL) files, header files, or any external method of component reference.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Metadata enables .NET Framework languages to describe themselves automatically in a language-neutral manner, unseen by both the developer and the user.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Additionally, metadata is extensible through the use of attributes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Metadata provides the following major benefits:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Self-describing files.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Common language runtime modules and assemblies are self-describing.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A module's metadata contains everything needed to interact with another module.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Metadata automatically provides the functionality of IDL in COM, so you can use one file for both definition and implementation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Runtime modules and assemblies do not even require registration with the operating system.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As a result, the descriptions used by the runtime always reflect the actual code in your compiled file, which increases application reliability.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Language interoperability and easier component-based design.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Metadata provides all the information required about compiled code for you to inherit a class from a PE file written in a different language.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can create an instance of any class written in any managed language (any language that targets the common language runtime) without worrying about explicit marshaling or using custom interoperability code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Attributes.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The .NET Framework lets you declare specific kinds of metadata, called attributes, in your compiled file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Attributes can be found throughout the .NET Framework and are used to control in more detail how your program behaves at run time.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Additionally, you can emit your own custom metadata into .NET Framework files through user-defined custom attributes.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](../../docs/standard/attributes/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Metadata and the PE File Structure</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Metadata is stored in one section of a .NET Framework portable executable (PE) file, while Microsoft intermediate language (MSIL) is stored in another section of the PE file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The metadata portion of the file contains a series of table and heap data structures.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The MSIL portion contains MSIL and metadata tokens that reference the metadata portion of the PE file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You might encounter metadata tokens when you use tools such as the <bpt id="p1">[</bpt>MSIL Disassembler (Ildasm.exe)<ept id="p1">](../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to view your code's MSIL, for example.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Metadata Tables and Heaps</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each metadata table holds information about the elements of your program.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, one metadata table describes the classes in your code, another table describes the fields, and so on.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you have ten classes in your code, the class table will have tens rows, one for each class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Metadata tables reference other tables and heaps.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, the metadata table for classes references the table for methods.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Metadata also stores information in four heap structures: string, blob, user string, and GUID.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>All the strings used to name types and members are stored in the string heap.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, a method table does not directly store the name of a particular method, but points to the method's name stored in the string heap.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Metadata Tokens</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Each row of each metadata table is uniquely identified in the MSIL portion of the PE file by a metadata token.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Metadata tokens are conceptually similar to pointers, persisted in MSIL, that reference a particular metadata table.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A metadata token is a four-byte number.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The top byte denotes the metadata table to which a particular token refers (method, type, and so on).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The remaining three bytes specify the row in the metadata table that corresponds to the programming element being described.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you define a method in C# and compile it into a PE file, the following metadata token might exist in the MSIL portion of the PE file:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The top byte (<ph id="ph1">`0x06`</ph>) indicates that this is a <bpt id="p1">**</bpt>MethodDef<ept id="p1">**</ept> token.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The lower three bytes (<ph id="ph1">`000004`</ph>) tells the common language runtime to look in the fourth row of the <bpt id="p1">**</bpt>MethodDef<ept id="p1">**</ept> table for the information that describes this method definition.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Metadata within a PE File</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When a program is compiled for the common language runtime, it is converted to a PE file that consists of three parts.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following table describes the contents of each part.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>PE section</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Contents of PE section</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>PE header</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The index of the PE file's main sections and the address of the entry point.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The runtime uses this information to identify the file as a PE file and to determine where execution starts when loading the program into memory.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>MSIL instructions</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The Microsoft intermediate language instructions (MSIL) that make up your code.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Many MSIL instructions are accompanied by metadata tokens.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Metadata</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Metadata tables and heaps.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The runtime uses this section to record information about every type and member in your code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This section also includes custom attributes and security information.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Run-Time Use of Metadata</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To better understand metadata and its role in the common language runtime, it might be helpful to construct a simple program and illustrate how metadata affects its run-time life.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following code example shows two methods inside a class called <ph id="ph1">`MyApp`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main`</ph> method is the program entry point, while the <ph id="ph2">`Add`</ph> method simply returns the sum of two integer arguments.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When the code runs, the runtime loads the module into memory and consults the metadata for this class.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Once loaded, the runtime performs extensive analysis of the method's Microsoft intermediate language (MSIL) stream to convert it to fast native machine instructions.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The runtime uses a just-in-time (JIT) compiler to convert the MSIL instructions to native machine code one method at a time as needed.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example shows part of the MSIL produced from the previous code's <ph id="ph1">`Main`</ph> function.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can view the MSIL and metadata from any .NET Framework application using the <bpt id="p1">[</bpt>MSIL Disassembler (Ildasm.exe)<ept id="p1">](../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The JIT compiler reads the MSIL for the whole method, analyzes it thoroughly, and generates efficient native instructions for the method.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>At <ph id="ph1">`IL_000d`</ph>, a metadata token for the <ph id="ph2">`Add`</ph> method (<ph id="ph3">`/*`</ph> <ph id="ph4">`06000003 */`</ph>) is encountered and the runtime uses the token to consult the third row of the <bpt id="p1">**</bpt>MethodDef<ept id="p1">**</ept> table.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following table shows part of the <bpt id="p1">**</bpt>MethodDef<ept id="p1">**</ept> table referenced by the metadata token that describes the <ph id="ph1">`Add`</ph> method.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>While other metadata tables exist in this assembly and have their own unique values, only this table is discussed.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Row</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Relative Virtual Address (RVA)</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>ImplFlags</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Flags</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>(Points to string heap.)</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Signature (Points to blob heap.)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>0x00002050</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>IL</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Managed</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Public</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>ReuseSlot</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>SpecialName</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>RTSpecialName</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>.ctor</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>.ctor (constructor)</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>0x00002058</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>IL</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Managed</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Public</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Static</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>ReuseSlot</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Main</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>String</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>0x0000208c</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>IL</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Managed</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Public</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Static</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>ReuseSlot</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Add</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>int, int, int</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Each column of the table contains important information about your code.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RVA<ept id="p1">**</ept> column allows the runtime to calculate the starting memory address of the MSIL that defines this method.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ImplFlags<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Flags<ept id="p2">**</ept> columns contain bitmasks that describe the method (for example, whether the method is public or private).</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> column indexes the name of the method from the string heap.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Signature<ept id="p1">**</ept> column indexes the definition of the method's signature in the blob heap.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The runtime calculates the desired offset address from the <bpt id="p1">**</bpt>RVA<ept id="p1">**</ept> column in the third row and returns this address to the JIT compiler, which then proceeds to the new address.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The JIT compiler continues to process MSIL at the new address until it encounters another metadata token and the process is repeated.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Using metadata, the runtime has access to all the information it needs to load your code and process it into native machine instructions.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this manner, metadata enables self-describing files and, together with the common type system, cross-language inheritance.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](../../docs/standard/attributes/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Describes how to apply attributes, write custom attributes, and retrieve information that is stored in attributes.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>