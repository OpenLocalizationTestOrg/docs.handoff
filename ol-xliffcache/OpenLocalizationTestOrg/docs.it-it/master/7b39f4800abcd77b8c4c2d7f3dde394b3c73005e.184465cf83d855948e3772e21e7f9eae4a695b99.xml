{"content":"---\ntitle: \"Compiler Warning (level 2) CS1701\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1701\"\nhelpviewer_keywords: \n  - \"CS1701\"\nms.assetid: adbaf99e-c283-49a7-b940-4c9b84ebcb03\n---\n# Compiler Warning (level 2) CS1701\nAssuming assembly reference \"Assembly Name #1\" matches \"Assembly Name #2\", you may need to supply runtime policy  \n  \n The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly, as demonstrated in the following example code.  \n  \n## Example  \n The following multifile sample references an assembly using two different external aliases. This first sample builds the older version of the code that creates assembly CS1701_d.  \n  \n```csharp  \n// CS1701_a.cs  \n// compile with: /target:library /out:cs1701_d.dll /keyfile:mykey.snk  \nusing System.Reflection;  \n[assembly:AssemblyVersion(\"1.0\")]  \npublic class A {  \n   public void M1() {}  \n}  \n  \npublic class C1 {}  \n```  \n  \n## Example  \n This is the code that creates the newer version of assembly CS1701_d. Note that it compiles into a different directory than the older version, necessary since the output files have the same names.  \n  \n```csharp  \n// CS1701_b.cs  \n// compile with: /target:library /out:c:\\\\cs1701_d.dll /keyfile:mykey.snk  \nusing System.Reflection;  \n[assembly:AssemblyVersion(\"2.0\")]  \npublic class A {  \n   public void M2() {}  \n   public void M1() {}  \n}  \n  \npublic class C2 {}  \npublic class C1 {}  \n```  \n  \n## Example  \n This sample sets up the external aliases A1 and A2.  \n  \n```csharp  \n// CS1701_c.cs  \n// compile with: /target:library /reference:A2=c:\\\\cs1701_d.dll /reference:A1=cs1701_d.dll  \n  \nextern alias A1;  \nextern alias A2;  \n// using System;  \nusing a1 = A1::A;  \nusing a2 = A2::A;  \n  \npublic class Ref {  \n   public static a1 A1() { return new a1(); }  \n   public static a2 A2() { return new a2(); }  \n  \n   public static A1::C1 M1() { return new A1::C1(); }  \n   public static A2::C2 M2() { return new A2::C2(); }  \n}  \n```  \n  \n## Example  \n This sample calls methods using two different aliases of A. The following sample generates C1701.  \n  \n```csharp  \n// CS1701_d.cs  \n// compile with: /reference:c:\\\\CS1701_d.dll /reference:CS1701_c.dll  \n// CS1701 expected  \nclass Tester {  \n   public static void Main() {  \n      Ref.A1().M1();  \n      Ref.A2().M2();  \n   }  \n}  \n```\n","nodes":[{"pos":[4,177],"embed":true,"restype":"x-metadata","content":"title: \"Compiler Warning (level 2) CS1701\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"CS1701\"\nhelpviewer_keywords: \n  - \"CS1701\"\nms.assetid: adbaf99e-c283-49a7-b940-4c9b84ebcb03","nodes":[{"content":"Compiler Warning (level 2) CS1701","nodes":[{"pos":[0,33],"content":"Compiler Warning (level 2) CS1701","nodes":[{"content":"Compiler Warning (level 2) CS1701","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[184,217],"content":"Compiler Warning (level 2) CS1701","linkify":"Compiler Warning (level 2) CS1701","nodes":[{"content":"Compiler Warning (level 2) CS1701","pos":[0,33]}]},{"content":"Assuming assembly reference \"Assembly Name #1\" matches \"Assembly Name #2\", you may need to supply runtime policy","pos":[218,330]},{"content":"The two assemblies differ in release and/or version number.","pos":[337,396]},{"content":"For unification to occur, you must specify directives in the application's .config file, and you must provide the correct strong name of an assembly, as demonstrated in the following example code.","pos":[397,593]},{"pos":[602,609],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following multifile sample references an assembly using two different external aliases.","pos":[613,704]},{"content":"This first sample builds the older version of the code that creates assembly CS1701_d.","pos":[705,791]},{"pos":[1045,1052],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This is the code that creates the newer version of assembly CS1701_d.","pos":[1056,1125]},{"content":"Note that it compiles into a different directory than the older version, necessary since the output files have the same names.","pos":[1126,1252]},{"pos":[1556,1563],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample sets up the external aliases A1 and A2.","pos":[1567,1618]},{"pos":[2097,2104],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This sample calls methods using two different aliases of A. The following sample generates C1701.","pos":[2108,2205]}]}