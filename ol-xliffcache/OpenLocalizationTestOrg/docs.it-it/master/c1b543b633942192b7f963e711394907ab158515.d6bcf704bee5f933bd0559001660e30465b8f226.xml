{"content":"---\ntitle: \"Custom Tracking | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2d191c9f-62f4-4c63-92dd-cda917fcf254\ncaps.latest.revision: 16\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Custom Tracking\nThis sample demonstrates how to create a custom tracking participant and write the contents of the tracking data to console. In addition, the sample demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects populated with user defined data. The console-based tracking participant filters the <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow using a tracking profile object created in code.  \n  \n## Sample Details  \n [!INCLUDE[wf](../../../../includes/wf-md.md)] provides a tracking infrastructure to track execution of a workflow instance. The tracking runtime implements a workflow instance to emit events related to the workflow lifecycle, events from workflow activities and custom tracking events. The following table details the primary components of the tracking infrastructure.  \n  \n|Component|Description|  \n|---------------|-----------------|  \n|Tracking runtime|Provides the infrastructure to emit tracking records.|  \n|Tracking participants|Consumes the tracking records. [!INCLUDE[netfx40_short](../../../../includes/netfx40-short-md.md)] ships with a tracking participant that writes tracking records as Event Tracing for Windows (ETW) events.|  \n|Tracking profile|A filtering mechanism that allows a tracking participant to subscribe for a subset of the tracking records emitted from a workflow instance.|  \n  \n The following table details the tracking records that the workflow runtime emits.  \n  \n|Tracking Record|Description|  \n|---------------------|-----------------|  \n|Workflow instance tracking records.|Describes the life cycle of the workflow instance. For example, an instance record is emitted when the workflow starts or completes.|  \n|Activity state Tracking Records.|Details activity execution. These records indicate the state of a workflow activity such as when an activity is scheduled or when the activity completes or when a fault is thrown.|  \n|Bookmark resumption record.|Emitted whenever a bookmark within a workflow instance is resumed.|  \n|Custom Tracking Records.|A workflow author can create Custom Tracking Records and emit them within the custom activity.|  \n  \n The tracking participant subscribes for a subset of the emitted <xref:System.Activities.Tracking.TrackingRecord> objects using tracking profiles. A tracking profile contains tracking queries that allow subscribing for a particular tracking record type. Tracking profiles can be specified in code or in configuration.  \n  \n### Custom Tracking Participant  \n The tracking participant API allows extension of the tracking runtime with a user provided tracking participant that can include custom logic to handle <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow runtime.  \n  \n To write a tracking participant the user must implement <xref:System.Activities.Tracking.TrackingParticipant>. Specifically, the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method has to be implemented by the custom participant. This method is called when a <xref:System.Activities.Tracking.TrackingRecord> is emitted by the workflow runtime.  \n  \n```csharp  \npublic abstract class TrackingParticipant  \n{  \n    protected TrackingParticipant();  \n  \n    public virtual TrackingProfile TrackingProfile { get; set; }  \n    public abstract void Track(TrackingRecord record, TimeSpan timeout);  \n}  \n  \n```  \n  \n The complete tracking participant is implemented in the ConsoleTrackingParticipant.cs file.The following code example is the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method for the custom tracking participant.  \n  \n```csharp  \nprotected override void Track(TrackingRecord record, TimeSpan timeout)  \n{  \n    ...             \n    WorkflowInstanceRecord workflowInstanceRecord = record as WorkflowInstanceRecord;  \n    if (workflowInstanceRecord != null)  \n    {  \n        Console.WriteLine(String.Format(CultureInfo.InvariantCulture,  \n            \" Workflow InstanceID: {0} Workflow instance state: {1}\",  \n            record.InstanceId, workflowInstanceRecord.State));  \n    }  \n  \n    ActivityStateRecord activityStateRecord = record as ActivityStateRecord;  \n    if (activityStateRecord != null)  \n    {  \n        IDictionary<String, object> variables = activityStateRecord.Variables;  \n        StringBuilder vars = new StringBuilder();  \n  \n        if (variables.Count > 0)  \n        {  \n            vars.AppendLine(\"\\n\\tVariables:\");  \n            foreach (KeyValuePair<string, object> variable in variables)  \n            {     \n                vars.AppendLine(String.Format(  \n                    \"\\t\\tName: {0} Value: {1}\", variable.Key, variable.Value));  \n            }  \n        }  \n        Console.WriteLine(String.Format(CultureInfo.InvariantCulture,  \n            \" :Activity DisplayName: {0} :ActivityInstanceState: {1} {2}\",  \n                activityStateRecord.Activity.Name, activityStateRecord.State,  \n            ((variables.Count > 0) ? vars.ToString() : String.Empty)));  \n    }  \n  \n    CustomTrackingRecord customTrackingRecord = record as CustomTrackingRecord;  \n  \n    if ((customTrackingRecord != null) && (customTrackingRecord.Data.Count > 0))  \n    {  \n        ...  \n    }  \n    Console.WriteLine();  \n  \n}  \n  \n```  \n  \n The following code example adds the console participant to the workflow invoker.  \n  \n```csharp  \nConsoleTrackingParticipant customTrackingParticipant = new ConsoleTrackingParticipant()  \n{  \n    ...  \n    // The tracking profile is set here, refer to Program.CS  \n...  \n}  \n  \nWorkflowInvoker invoker = new WorkflowInvoker(BuildSampleWorkflow());  \ninvoker.Extensions.Add(customTrackingParticipant);  \n  \n```  \n  \n### Emitting Custom Tracking Records  \n This sample also demonstrates the ability to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects from a custom workflow activity:  \n  \n-   The <xref:System.Activities.Tracking.CustomTrackingRecord> objects are created and populated with user-defined data that is desired to be emitted with the record.  \n  \n-   The <xref:System.Activities.Tracking.CustomTrackingRecord> is emitted by calling the track method of the <xref:System.Activities.ActivityContext>.  \n  \n The following example demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects within a custom activity.  \n  \n```csharp  \n// Create the Custom Tracking Record  \nCustomTrackingRecord customRecord = new CustomTrackingRecord(\"OrderIn\")  \n{  \n    Data =   \n    {  \n        {\"OrderId\", 200},  \n        {\"OrderDate\", \"20 Aug 2001\"}  \n    }  \n};  \n  \n// Emit custom tracking record  \ncontext.Track(customRecord);  \n  \n```  \n  \n#### To use this sample  \n  \n1.  Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the CustomTrackingSample.sln solution file.  \n  \n2.  To build the solution, press CTRL+SHIFT+B.  \n  \n3.  To run the solution, press CTRL+F5.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WF\\Basic\\Tracking\\CustomTracking`  \n  \n## See Also  \n [AppFabric Monitoring Samples](http://go.microsoft.com/fwlink/?LinkId=193959)","nodes":[{"pos":[4,303],"embed":true,"restype":"x-metadata","content":"title: \"Custom Tracking | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 2d191c9f-62f4-4c63-92dd-cda917fcf254\ncaps.latest.revision: 16\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"","nodes":[{"content":"Custom Tracking | Microsoft Docs","nodes":[{"pos":[0,32],"content":"Custom Tracking | Microsoft Docs","nodes":[{"content":"Custom Tracking | Microsoft Docs","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[310,325],"content":"Custom Tracking","linkify":"Custom Tracking","nodes":[{"content":"Custom Tracking","pos":[0,15]}]},{"content":"This sample demonstrates how to create a custom tracking participant and write the contents of the tracking data to console.","pos":[326,450]},{"content":"In addition, the sample demonstrates how to emit <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects populated with user defined data.","pos":[451,596],"source":" In addition, the sample demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects populated with user defined data."},{"content":"The console-based tracking participant filters the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects emitted by the workflow using a tracking profile object created in code.","pos":[597,777],"source":" The console-based tracking participant filters the <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow using a tracking profile object created in code."},{"pos":[786,800],"content":"Sample Details","linkify":"Sample Details","nodes":[{"content":"Sample Details","pos":[0,14]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[wf](../../../../includes/wf-md.md)]</ph> provides a tracking infrastructure to track execution of a workflow instance.","pos":[804,927],"source":"[!INCLUDE[wf](../../../../includes/wf-md.md)] provides a tracking infrastructure to track execution of a workflow instance."},{"content":"The tracking runtime implements a workflow instance to emit events related to the workflow lifecycle, events from workflow activities and custom tracking events.","pos":[928,1089]},{"content":"The following table details the primary components of the tracking infrastructure.","pos":[1090,1172]},{"content":"Component","pos":[1179,1188]},{"content":"Description","pos":[1189,1200]},{"content":"Tracking runtime","pos":[1243,1259]},{"content":"Provides the infrastructure to emit tracking records.","pos":[1260,1313]},{"content":"Tracking participants","pos":[1318,1339]},{"content":"Consumes the tracking records.","pos":[1340,1370]},{"content":"<ph id=\"ph1\">[!INCLUDE[netfx40_short](../../../../includes/netfx40-short-md.md)]</ph> ships with a tracking participant that writes tracking records as Event Tracing for Windows (ETW) events.","pos":[1371,1544],"source":"[!INCLUDE[netfx40_short](../../../../includes/netfx40-short-md.md)] ships with a tracking participant that writes tracking records as Event Tracing for Windows (ETW) events."},{"content":"Tracking profile","pos":[1549,1565]},{"content":"A filtering mechanism that allows a tracking participant to subscribe for a subset of the tracking records emitted from a workflow instance.","pos":[1566,1706]},{"content":"The following table details the tracking records that the workflow runtime emits.","pos":[1714,1795]},{"content":"Tracking Record","pos":[1802,1817]},{"content":"Description","pos":[1818,1829]},{"content":"Workflow instance tracking records.","pos":[1878,1913]},{"content":"Describes the life cycle of the workflow instance.","pos":[1914,1964]},{"content":"For example, an instance record is emitted when the workflow starts or completes.","pos":[1965,2046]},{"content":"Activity state Tracking Records.","pos":[2051,2083]},{"content":"Details activity execution.","pos":[2084,2111]},{"content":"These records indicate the state of a workflow activity such as when an activity is scheduled or when the activity completes or when a fault is thrown.","pos":[2112,2263]},{"content":"Bookmark resumption record.","pos":[2268,2295]},{"content":"Emitted whenever a bookmark within a workflow instance is resumed.","pos":[2296,2362]},{"content":"Custom Tracking Records.","pos":[2367,2391]},{"content":"A workflow author can create Custom Tracking Records and emit them within the custom activity.","pos":[2392,2486]},{"content":"The tracking participant subscribes for a subset of the emitted <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects using tracking profiles.","pos":[2494,2639],"source":"The tracking participant subscribes for a subset of the emitted <xref:System.Activities.Tracking.TrackingRecord> objects using tracking profiles."},{"content":"A tracking profile contains tracking queries that allow subscribing for a particular tracking record type.","pos":[2640,2746]},{"content":"Tracking profiles can be specified in code or in configuration.","pos":[2747,2810]},{"pos":[2820,2847],"content":"Custom Tracking Participant","linkify":"Custom Tracking Participant","nodes":[{"content":"Custom Tracking Participant","pos":[0,27]}]},{"content":"The tracking participant API allows extension of the tracking runtime with a user provided tracking participant that can include custom logic to handle <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> objects emitted by the workflow runtime.","pos":[2851,3092],"source":"The tracking participant API allows extension of the tracking runtime with a user provided tracking participant that can include custom logic to handle <xref:System.Activities.Tracking.TrackingRecord> objects emitted by the workflow runtime."},{"content":"To write a tracking participant the user must implement <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingParticipant&gt;</ph>.","pos":[3099,3209],"source":"To write a tracking participant the user must implement <xref:System.Activities.Tracking.TrackingParticipant>."},{"content":"Specifically, the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingParticipant.Track%2A&gt;</ph> method has to be implemented by the custom participant.","pos":[3210,3346],"source":" Specifically, the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method has to be implemented by the custom participant."},{"content":"This method is called when a <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingRecord&gt;</ph> is emitted by the workflow runtime.","pos":[3347,3460],"source":" This method is called when a <xref:System.Activities.Tracking.TrackingRecord> is emitted by the workflow runtime."},{"content":"The complete tracking participant is implemented in the ConsoleTrackingParticipant.cs file.The following code example is the <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.TrackingParticipant.Track%2A&gt;</ph> method for the custom tracking participant.","pos":[3727,3958],"source":"The complete tracking participant is implemented in the ConsoleTrackingParticipant.cs file.The following code example is the <xref:System.Activities.Tracking.TrackingParticipant.Track%2A> method for the custom tracking participant."},{"content":"The following code example adds the console participant to the workflow invoker.","pos":[5602,5682]},{"pos":[6021,6053],"content":"Emitting Custom Tracking Records","linkify":"Emitting Custom Tracking Records","nodes":[{"content":"Emitting Custom Tracking Records","pos":[0,32]}]},{"content":"This sample also demonstrates the ability to emit <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects from a custom workflow activity:","pos":[6057,6202],"source":"This sample also demonstrates the ability to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects from a custom workflow activity:"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects are created and populated with user-defined data that is desired to be emitted with the record.","pos":[6212,6374],"source":"The <xref:System.Activities.Tracking.CustomTrackingRecord> objects are created and populated with user-defined data that is desired to be emitted with the record."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> is emitted by calling the track method of the <ph id=\"ph2\">&lt;xref:System.Activities.ActivityContext&gt;</ph>.","pos":[6384,6530],"source":"The <xref:System.Activities.Tracking.CustomTrackingRecord> is emitted by calling the track method of the <xref:System.Activities.ActivityContext>."},{"content":"The following example demonstrates how to emit <ph id=\"ph1\">&lt;xref:System.Activities.Tracking.CustomTrackingRecord&gt;</ph> objects within a custom activity.","pos":[6537,6672],"source":"The following example demonstrates how to emit <xref:System.Activities.Tracking.CustomTrackingRecord> objects within a custom activity."},{"pos":[6993,7011],"content":"To use this sample","linkify":"To use this sample","nodes":[{"content":"To use this sample","pos":[0,18]}]},{"pos":[7021,7130],"content":"Using <ph id=\"ph1\">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>, open the CustomTrackingSample.sln solution file.","source":"Using [!INCLUDE[vs2010](../../../../includes/vs2010-md.md)], open the CustomTrackingSample.sln solution file."},{"content":"To build the solution, press CTRL+SHIFT+B.","pos":[7140,7182]},{"content":"To run the solution, press CTRL+F5.","pos":[7192,7227]},{"pos":[7235,7368],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":"The samples may already be installed on your computer. Check for the following (default) directory before continuing.","pos":[14,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[0,54]},{"content":"Check for the following (default) directory before continuing.","pos":[55,117]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[7422,7748],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[7749,7799]},{"pos":[7884,7892],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[7896,7973],"content":"<bpt id=\"p1\">[</bpt>AppFabric Monitoring Samples<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=193959)</ept>","source":"[AppFabric Monitoring Samples](http://go.microsoft.com/fwlink/?LinkId=193959)"}]}