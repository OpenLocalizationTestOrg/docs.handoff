{"content":"---\ntitle: \"How to: Traverse a Binary Tree with Parallel Tasks\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, how to traverse a tree\"\nms.assetid: 4265d169-6c69-4f36-b10d-b7ae7f72f4df\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# How to: Traverse a Binary Tree with Parallel Tasks\nThe following example shows two ways in which parallel tasks can be used to traverse a tree data structure. The creation of the tree itself is left as an exercise.  \n  \n## Example  \n [!code-csharp[TPL#16](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl/cs/tpl.cs#16)]\n [!code-vb[TPL#16](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl/vb/treewalk.vb#16)]  \n  \n The two methods shown are functionally equivalent. By using the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method to create and run the tasks, you get a handle back from the tasks which can be used to wait on the tasks and handle exceptions.  \n  \n## See also\n\n- [Task Parallel Library (TPL)](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)\n","nodes":[{"pos":[4,297],"embed":true,"restype":"x-metadata","content":"title: \"How to: Traverse a Binary Tree with Parallel Tasks\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, how to traverse a tree\"\nms.assetid: 4265d169-6c69-4f36-b10d-b7ae7f72f4df\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"How to: Traverse a Binary Tree with Parallel Tasks","nodes":[{"pos":[0,50],"content":"How to: Traverse a Binary Tree with Parallel Tasks","nodes":[{"content":"How to: Traverse a Binary Tree with Parallel Tasks","pos":[0,50]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[304,354],"content":"How to: Traverse a Binary Tree with Parallel Tasks","linkify":"How to: Traverse a Binary Tree with Parallel Tasks","nodes":[{"content":"How to: Traverse a Binary Tree with Parallel Tasks","pos":[0,50]}]},{"content":"The following example shows two ways in which parallel tasks can be used to traverse a tree data structure.","pos":[355,462]},{"content":"The creation of the tree itself is left as an exercise.","pos":[463,518]},{"pos":[527,534],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The two methods shown are functionally equivalent.","pos":[733,783]},{"content":"By using the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method to create and run the tasks, you get a handle back from the tasks which can be used to wait on the tasks and handle exceptions.","pos":[784,985],"source":" By using the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method to create and run the tasks, you get a handle back from the tasks which can be used to wait on the tasks and handle exceptions."},{"pos":[994,1002],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1006,1109],"content":"<bpt id=\"p1\">[</bpt>Task Parallel Library (TPL)<ept id=\"p1\">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept>","source":"[Task Parallel Library (TPL)](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)"}]}