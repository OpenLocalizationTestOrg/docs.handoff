{"content":"---\ntitle: \"virtualCERCall MDA | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MDAs (managed debugging assistants), CER calls\"\n  - \"virtualCERCall MDA\"\n  - \"virtual CER calls\"\n  - \"constrained execution regions\"\n  - \"CER calls\"\n  - \"managed debugging assistants (MDAs), CER calls\"\nms.assetid: 1eb18c7a-f5e0-443f-80fb-67bfbb047da2\ncaps.latest.revision: 13\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"\n---\n# virtualCERCall MDA\nThe `virtualCERCall` managed debugging assistant (MDA) is activated as a warning indicating that a call site within a constrained execution region (CER) call graph refers to a virtual target, that is, a virtual call to a non-final virtual method or a call using an interface. The common language runtime (CLR) cannot predict the destination method of these calls from the intermediate language and metadata analysis alone. As a result, the call tree cannot be prepared as part of the CER graph and thread aborts in that subtree cannot be automatically blocked. This MDA warns of cases where a CER might need to be extended by using explicit calls to the <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod%2A> method once the additional information required to compute the call target is known at run time.  \n  \n## Symptoms  \n CERs that do not run when a thread is aborted or an application domain is unloaded.  \n  \n## Cause  \n A CER contains a call to a virtual method that cannot be prepared automatically.  \n  \n## Resolution  \n Call <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod%2A> for the virtual method.  \n  \n## Effect on the Runtime  \n This MDA has no effect on the CLR.  \n  \n## Output  \n  \n```  \nMethod 'MethodWithCer', while executing within a constrained execution region, makes a call  \nat IL offset 0x0024 to 'VirtualMethod', which is virtual and cannot be prepared automatically  \nat compile time. The caller must ensure this method is prepared explicitly at  \nruntime before entering the constrained execution region.  \nmethod name=\"VirtualMethod\"  \ndeclaringType name=\"VirtualCERCall+MyClass\"  \n  declaringModule name=\"mda\"  \n    callsite name=\"MethodWithCer\" offset=\"0x0024\"  \n```  \n  \n## Configuration  \n  \n```  \n<mdaConfig>  \n  <assistants>  \n    < VirtualCERCall />  \n  </assistants>  \n</mdaConfig>  \n```  \n  \n## Example  \n  \n```  \nclass MyClass  \n{  \n    [ReliabilityContract(Consistency.MayCorruptProcess, CER.None)]  \n    virtual void VirtualMethod()  \n    {  \n        ...  \n    }  \n}  \n  \nclass MyDerivedClass : MyClass  \n{  \n    [ReliabilityContract(Consistency.MayCorruptProcess, CER.None)]  \n    override void VirtualMethod()  \n    {  \n        ...  \n    }  \n}  \n  \nvoid MethodWithCer(MyClass object)  \n{  \n    RuntimeHelpers.PrepareConstrainedRegions();  \n    try  \n    {  \n        ...  \n    }  \n    finally  \n    {  \n        // Start of the CER.  \n  \n        // Cannot tell at analysis time whether object is a MyClass  \n        // or a MyDerivedClass, so we do not know which version of   \n        // VirtualMethod we are going to call.  \n        object.VirtualMethod();  \n    }  \n}  \n```  \n  \n## See Also  \n <xref:System.Runtime.InteropServices.MarshalAsAttribute>   \n [Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)   \n [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)","nodes":[{"pos":[4,627],"nodes":[{"content":"virtualCERCall MDA | Microsoft Docs","nodes":[{"pos":[0,35],"content":"virtualCERCall MDA | Microsoft Docs","nodes":[{"content":"virtualCERCall MDA | Microsoft Docs","pos":[0,35]}]}],"pos":[6,44],"yaml":true}],"content":"title: \"virtualCERCall MDA | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"MDAs (managed debugging assistants), CER calls\"\n  - \"virtualCERCall MDA\"\n  - \"virtual CER calls\"\n  - \"constrained execution regions\"\n  - \"CER calls\"\n  - \"managed debugging assistants (MDAs), CER calls\"\nms.assetid: 1eb18c7a-f5e0-443f-80fb-67bfbb047da2\ncaps.latest.revision: 13\nauthor: \"mairaw\"\nms.author: \"mairaw\"\nmanager: \"wpickett\"","yamlblock":true},{"pos":[634,652],"content":"virtualCERCall MDA","linkify":"virtualCERCall MDA","nodes":[{"content":"virtualCERCall MDA","pos":[0,18]}]},{"content":"The <ph id=\"ph1\">`virtualCERCall`</ph> managed debugging assistant (MDA) is activated as a warning indicating that a call site within a constrained execution region (CER) call graph refers to a virtual target, that is, a virtual call to a non-final virtual method or a call using an interface.","pos":[653,928],"source":"The `virtualCERCall` managed debugging assistant (MDA) is activated as a warning indicating that a call site within a constrained execution region (CER) call graph refers to a virtual target, that is, a virtual call to a non-final virtual method or a call using an interface."},{"content":"The common language runtime (CLR) cannot predict the destination method of these calls from the intermediate language and metadata analysis alone.","pos":[929,1075]},{"content":"As a result, the call tree cannot be prepared as part of the CER graph and thread aborts in that subtree cannot be automatically blocked.","pos":[1076,1213]},{"content":"This MDA warns of cases where a CER might need to be extended by using explicit calls to the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod%2A&gt;</ph> method once the additional information required to compute the call target is known at run time.","pos":[1214,1474],"source":" This MDA warns of cases where a CER might need to be extended by using explicit calls to the <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod%2A> method once the additional information required to compute the call target is known at run time."},{"pos":[1483,1491],"content":"Symptoms","linkify":"Symptoms","nodes":[{"content":"Symptoms","pos":[0,8]}]},{"content":"CERs that do not run when a thread is aborted or an application domain is unloaded.","pos":[1495,1578]},{"pos":[1587,1592],"content":"Cause","linkify":"Cause","nodes":[{"content":"Cause","pos":[0,5]}]},{"content":"A CER contains a call to a virtual method that cannot be prepared automatically.","pos":[1596,1676]},{"pos":[1685,1695],"content":"Resolution","linkify":"Resolution","nodes":[{"content":"Resolution","pos":[0,10]}]},{"content":"Call <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod%2A&gt;</ph> for the virtual method.","pos":[1699,1798],"source":"Call <xref:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod%2A> for the virtual method."},{"pos":[1807,1828],"content":"Effect on the Runtime","linkify":"Effect on the Runtime","nodes":[{"content":"Effect on the Runtime","pos":[0,21]}]},{"content":"This MDA has no effect on the CLR.","pos":[1832,1866]},{"pos":[1875,1881],"content":"Output","linkify":"Output","nodes":[{"content":"Output","pos":[0,6]}]},{"pos":[2394,2407],"content":"Configuration","linkify":"Configuration","nodes":[{"content":"Configuration","pos":[0,13]}]},{"pos":[2521,2528],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3314,3322],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph>","pos":[3326,3382],"source":"<xref:System.Runtime.InteropServices.MarshalAsAttribute> "},{"content":"<bpt id=\"p1\">[</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id=\"p1\">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept><ph id=\"ph1\"> </ph>","pos":[3387,3541],"source":"[Diagnosing Errors with Managed Debugging Assistants](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md) "},{"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","pos":[3545,3620],"source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}