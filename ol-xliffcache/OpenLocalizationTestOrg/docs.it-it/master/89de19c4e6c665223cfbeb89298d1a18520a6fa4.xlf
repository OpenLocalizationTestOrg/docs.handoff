<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89de19c4e6c665223cfbeb89298d1a18520a6fa4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\exit-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">971d6b533d911307b4c27aab47fec1eb5b1a9c88</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95e40cd6c2c3c6d804ea2f4c193c63f11d2e67c5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exit Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exit Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Exits a procedure or block and transfers control immediately to the statement following the procedure call or the block definition.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Statements</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`Do`</ph> loop in which it appears.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Execution continues with the statement following the <ph id="ph1">`Loop`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Do`</ph> can be used only inside a <ph id="ph2">`Do`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`Do`</ph> loops, <ph id="ph2">`Exit Do`</ph> exits the innermost loop and transfers control to the next higher level of nesting.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`For`</ph> loop in which it appears.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Execution continues with the statement following the <ph id="ph1">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit For`</ph> can be used only inside a <ph id="ph2">`For`</ph>...<ph id="ph3">`Next`</ph> or <ph id="ph4">`For Each`</ph>...<ph id="ph5">`Next`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`For`</ph> loops, <ph id="ph2">`Exit For`</ph> exits the innermost loop and transfers control to the next higher level of nesting.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`Function`</ph> procedure in which it appears.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Execution continues with the statement following the statement that called the <ph id="ph1">`Function`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Function`</ph> can be used only inside a <ph id="ph2">`Function`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To specify a return value, you can assign the value to the function name on a line before the <ph id="ph1">`Exit Function`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To assign the return value and exit the function in one statement, you can instead use the <bpt id="p1">[</bpt>Return Statement<ept id="p1">](../../../visual-basic/language-reference/statements/return-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`Property`</ph> procedure in which it appears.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Execution continues with the statement that called the <ph id="ph1">`Property`</ph> procedure, that is, with the statement requesting or setting the property's value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Property`</ph> can be used only inside a property's <ph id="ph2">`Get`</ph> or <ph id="ph3">`Set`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To specify a return value in a <ph id="ph1">`Get`</ph> procedure, you can assign the value to the function name on a line before the <ph id="ph2">`Exit Property`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To assign the return value and exit the <ph id="ph1">`Get`</ph> procedure in one statement, you can instead use the <ph id="ph2">`Return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`Set`</ph> procedure, the <ph id="ph2">`Exit Property`</ph> statement is equivalent to the <ph id="ph3">`Return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`Select Case`</ph> block in which it appears.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Execution continues with the statement following the <ph id="ph1">`End Select`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Select`</ph> can be used only inside a <ph id="ph2">`Select Case`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`Sub`</ph> procedure in which it appears.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Execution continues with the statement following the statement that called the <ph id="ph1">`Sub`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Sub`</ph> can be used only inside a <ph id="ph2">`Sub`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`Sub`</ph> procedure, the <ph id="ph2">`Exit Sub`</ph> statement is equivalent to the <ph id="ph3">`Return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`Try`</ph> or <ph id="ph2">`Catch`</ph> block in which it appears.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Execution continues with the <ph id="ph1">`Finally`</ph> block if there is one, or with the statement following the <ph id="ph2">`End Try`</ph> statement otherwise.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit Try`</ph> can be used only inside a <ph id="ph2">`Try`</ph> or <ph id="ph3">`Catch`</ph> block, and not inside a <ph id="ph4">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Immediately exits the <ph id="ph1">`While`</ph> loop in which it appears.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Execution continues with the statement following the <ph id="ph1">`End While`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit While`</ph> can be used only inside a <ph id="ph2">`While`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`While`</ph> loops, <ph id="ph2">`Exit While`</ph> transfers control to the loop that is one nested level above the loop where <ph id="ph3">`Exit While`</ph> occurs.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Do not confuse <ph id="ph1">`Exit`</ph> statements with <ph id="ph2">`End`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit`</ph> does not define the end of a statement.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the following example, the loop condition stops the loop when the <ph id="ph1">`index`</ph> variable is greater than 100.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`If`</ph> statement in the loop, however, causes the <ph id="ph2">`Exit Do`</ph> statement to stop the loop when the index variable is greater than 10.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#133<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/exit-statement_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example assigns the return value to the function name <ph id="ph1">`myFunction`</ph>, and then uses <ph id="ph2">`Exit Function`</ph> to return from the function.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#23<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/exit-statement_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">[</bpt>Return Statement<ept id="p1">](../../../visual-basic/language-reference/statements/return-statement.md)</ept> to assign the return value and exit the function.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#24<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/exit-statement_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Continue Statement<ept id="p1">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>End Statement<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Return Statement<ept id="p1">](../../../visual-basic/language-reference/statements/return-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Stop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/stop-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>