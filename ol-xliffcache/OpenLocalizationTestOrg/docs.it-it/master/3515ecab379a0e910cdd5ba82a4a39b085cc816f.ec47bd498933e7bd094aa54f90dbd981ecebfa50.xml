{"content":"---\ntitle: \"How to: Catch a non-CLS Exception | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"exceptions [C#], non-CLS\"\nms.assetid: db4630b3-5240-471a-b3a7-c7ff6ab31e8d\ncaps.latest.revision: 8\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Catch a non-CLS Exception\nSome .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <xref:System.Exception>. Such exceptions are called *non-CLS exceptions* or *non-Exceptions*. In [!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)] you cannot throw non-CLS exceptions, but you can catch them in two ways:  \n  \n-   Within a `catch (Exception e)` block as a <xref:System.Runtime.CompilerServices.RuntimeWrappedException>.  \n  \n     By default, a [!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)] assembly catches non-CLS exceptions as wrapped exceptions. Use this method if you need access to the original exception, which can be accessed through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property. The procedure later in this topic explains how to catch exceptions in this manner.  \n  \n-   Within a general catch block (a catch block without an exception type specified) that is put after a `catch (Exception)` or `catch (Exception e)` block.  \n  \n     Use this method when you want to perform some action (such as writing to a log file) in response to non-CLS exceptions, and you do not need access to the exception information. By default the common language runtime wraps all exceptions. To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: `[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]`.  \n  \n### To catch a non-CLS exception  \n  \n1.  Within a `catch(Exception e) block`, use the `as` keyword to test whether `e` can be cast to a <xref:System.Runtime.CompilerServices.RuntimeWrappedException>.  \n  \n2.  Access the original exception through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property.  \n  \n## Example  \n The following example shows how to catch a non-CLS exception that was thrown from a class library written in C++/CLR. Note that in this example, the [!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)] client code knows in advance that the exception type being thrown is a <xref:System.String?displayProperty=fullName>. You can cast the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property back its original type as long as that type is accessible from your code.  \n  \n```  \n// Class library written in C++/CLR.  \n   ThrowNonCLS.Class1 myClass = new ThrowNonCLS.Class1();  \n  \n   try  \n   {  \n    // throws gcnew System::String(  \n    // \"I do not derive from System.Exception!\");  \n    myClass.TestThrow();   \n   }  \n  \n   catch (Exception e)  \n   {  \n    RuntimeWrappedException rwe = e as RuntimeWrappedException;  \n    if (rwe != null)      \n    {  \n      String s = rwe.WrappedException as String;  \n      if (s != null)  \n      {  \n        Console.WriteLine(s);  \n      }  \n    }  \n    else  \n    {  \n       // Handle other System.Exception types.  \n    }  \n   }             \n```  \n  \n## See Also  \n <xref:System.Runtime.CompilerServices.RuntimeWrappedException>   \n [Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)","nodes":[{"pos":[4,535],"nodes":[{"content":"How to: Catch a non-CLS Exception | Microsoft Docs","nodes":[{"pos":[0,50],"content":"How to: Catch a non-CLS Exception | Microsoft Docs","nodes":[{"content":"How to: Catch a non-CLS Exception | Microsoft Docs","pos":[0,50]}]}],"pos":[6,59],"yaml":true}],"content":"title: \"How to: Catch a non-CLS Exception | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"exceptions [C#], non-CLS\"\nms.assetid: db4630b3-5240-471a-b3a7-c7ff6ab31e8d\ncaps.latest.revision: 8\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[542,575],"content":"How to: Catch a non-CLS Exception","linkify":"How to: Catch a non-CLS Exception","nodes":[{"content":"How to: Catch a non-CLS Exception","pos":[0,33]}]},{"content":"Some .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[576,698],"source":"Some .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <xref:System.Exception>."},{"content":"Such exceptions are called <bpt id=\"p1\">*</bpt>non-CLS exceptions<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>non-Exceptions<ept id=\"p2\">*</ept>.","pos":[699,767],"source":" Such exceptions are called *non-CLS exceptions* or *non-Exceptions*."},{"content":"In <ph id=\"ph1\">[!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)]</ph> you cannot throw non-CLS exceptions, but you can catch them in two ways:","pos":[768,901],"source":" In [!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)] you cannot throw non-CLS exceptions, but you can catch them in two ways:"},{"pos":[911,1016],"content":"Within a <ph id=\"ph1\">`catch (Exception e)`</ph> block as a <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph>.","source":"Within a `catch (Exception e)` block as a <xref:System.Runtime.CompilerServices.RuntimeWrappedException>."},{"content":"By default, a <ph id=\"ph1\">[!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)]</ph> assembly catches non-CLS exceptions as wrapped exceptions.","pos":[1027,1157],"source":"By default, a [!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)] assembly catches non-CLS exceptions as wrapped exceptions."},{"content":"Use this method if you need access to the original exception, which can be accessed through the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A&gt;</ph> property.","pos":[1158,1346],"source":" Use this method if you need access to the original exception, which can be accessed through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property."},{"content":"The procedure later in this topic explains how to catch exceptions in this manner.","pos":[1347,1429]},{"pos":[1439,1591],"content":"Within a general catch block (a catch block without an exception type specified) that is put after a <ph id=\"ph1\">`catch (Exception)`</ph> or <ph id=\"ph2\">`catch (Exception e)`</ph> block.","source":"Within a general catch block (a catch block without an exception type specified) that is put after a `catch (Exception)` or `catch (Exception e)` block."},{"content":"Use this method when you want to perform some action (such as writing to a log file) in response to non-CLS exceptions, and you do not need access to the exception information.","pos":[1602,1778]},{"content":"By default the common language runtime wraps all exceptions.","pos":[1779,1839]},{"content":"To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: <ph id=\"ph1\">`[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]`</ph>.","pos":[1840,2029],"source":" To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: `[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]`."},{"pos":[2039,2067],"content":"To catch a non-CLS exception","linkify":"To catch a non-CLS exception","nodes":[{"content":"To catch a non-CLS exception","pos":[0,28]}]},{"pos":[2077,2235],"content":"Within a <ph id=\"ph1\">`catch(Exception e) block`</ph>, use the <ph id=\"ph2\">`as`</ph> keyword to test whether <ph id=\"ph3\">`e`</ph> can be cast to a <ph id=\"ph4\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph>.","source":"Within a `catch(Exception e) block`, use the `as` keyword to test whether `e` can be cast to a <xref:System.Runtime.CompilerServices.RuntimeWrappedException>."},{"content":"Access the original exception through the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A&gt;</ph> property.","pos":[2245,2379],"source":"Access the original exception through the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property."},{"pos":[2388,2395],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows how to catch a non-CLS exception that was thrown from a class library written in C++/CLR.","pos":[2399,2516]},{"content":"Note that in this example, the <ph id=\"ph1\">[!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)]</ph> client code knows in advance that the exception type being thrown is a <ph id=\"ph2\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[2517,2723],"source":" Note that in this example, the [!INCLUDE[csprcs](../../../csharp/includes/csprcs_md.md)] client code knows in advance that the exception type being thrown is a <xref:System.String?displayProperty=fullName>."},{"content":"You can cast the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A&gt;</ph> property back its original type as long as that type is accessible from your code.","pos":[2724,2906],"source":" You can cast the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property back its original type as long as that type is accessible from your code."},{"pos":[3537,3545],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph>","pos":[3549,3611],"source":"<xref:System.Runtime.CompilerServices.RuntimeWrappedException> "},{"content":"<bpt id=\"p1\">[</bpt>Exceptions and Exception Handling<ept id=\"p1\">](../../../csharp/programming-guide/exceptions/index.md)</ept>","pos":[3616,3706],"source":"[Exceptions and Exception Handling](../../../csharp/programming-guide/exceptions/index.md)"}]}