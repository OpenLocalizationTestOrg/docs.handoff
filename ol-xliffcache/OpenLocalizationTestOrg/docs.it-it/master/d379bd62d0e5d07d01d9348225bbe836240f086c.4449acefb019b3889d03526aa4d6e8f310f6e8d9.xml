{"content":"---\ntitle: \"SQL-CLR Type Mismatches | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0a90c33f-7ed7-4501-ad5f-6224c5da8e9b\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# SQL-CLR Type Mismatches\n[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] automates much of the translation between the object model and SQL Server. Nevertheless, some situations prevent exact translation. These key mismatches between the common language runtime (CLR) types and the SQL Server database types are summarized in the following sections. You can find more details about specific type mappings and function translation at [SQL-CLR Type Mapping](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md) and [Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md).  \n  \n## Data Types  \n Translation between the CLR and SQL Server occurs when a query is being sent to the database, and when the results are sent back to your object model. For example, the following Transact-SQL query requires two value conversions:  \n  \n```  \nSelect DateOfBirth From Customer Where CustomerId = @id     \n```  \n  \n Before the query can be executed on SQL Server, the value for the Transact-SQL parameter must be specified. In this example, the `id` parameter value must first be translated from a CLR <xref:System.Int32?displayProperty=fullName> type to a SQL Server `INT` type so that the database can understand what the value is. Then to retrieve the results, the SQL Server `DateOfBirth` column must be translated from a SQL Server `DATETIME` type to a CLR <xref:System.DateTime?displayProperty=fullName> type for use in the object model. In this example, the types in the CLR object model and SQL Server database have natural mappings. But, this is not always the case.  \n  \n### Missing Counterparts  \n The following types do not have reasonable counterparts.  \n  \n-   Mismatches in the CLR <xref:System> namespace:  \n  \n    -   **Unsigned integers**. These types are typically mapped to their signed counterparts of larger size to avoid overflow. Literals can be converted to a signed numeric of the same or smaller size, based on value.  \n  \n    -   **Boolean**. These types can be mapped to a bit or larger numeric or string. A literal can be mapped to an expression that evaluates to the same value (for example, `1=1` in SQL for `True` in CLS).  \n  \n    -   **TimeSpan**. This type represents the difference between two `DateTime` values and does not correspond to the `timestamp` of SQL Server. The CLR <xref:System.TimeSpan?displayProperty=fullName> may also map to the SQL Server `TIME` type in some cases. The SQL Server `TIME` type was only intended to represent positive values less than 24 hours. The CLR <xref:System.TimeSpan> has a much larger range.  \n  \n    > [!NOTE]\n    >  SQL Server-specific [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] types in <xref:System.Data.SqlTypes> are not included in this comparison.  \n  \n-   Mismatches in SQL Server:  \n  \n    -   **Fixed length character types**. Transact-SQL distinguishes between Unicode and non-Unicode categories and has three distinct types in each category: fixed length `nchar`/`char`, variable length `nvarchar`/`varchar`, and larger-sized `ntext`/`text`. The fixed length character types could be mapped to the CLR <xref:System.Char?displayProperty=fullName> type for retrieving characters, but they do not really correspond to the same type in conversions and behavior.  \n  \n    -   **Bit**. Although the `bit` domain has the same number of values as `Nullable<Boolean>`, the two are different types. `Bit` takes values `1` and `0` instead of `true`/`false`, and cannot be used as an equivalent to Boolean expressions.  \n  \n    -   **Timestamp**. Unlike the CLR <xref:System.TimeSpan?displayProperty=fullName> type, the SQL Server `TIMESTAMP` type represents an 8-byte number generated by the database that is unique for each update and is not based on the difference between <xref:System.DateTime> values.  \n  \n    -   **Money** and **SmallMoney**. These types can be mapped to <xref:System.Decimal> but are basically different types and are treated as such by server-based functions and conversions.  \n  \n### Multiple Mappings  \n There are many SQL Server data types that you can map to one or more CLR data types. There are also many CLR types that you can map to one or more SQL Server types. Although a mapping may be supported by LINQ to SQL, it does not mean that the two types mapped between the CLR and SQL Server are a perfect match in precision, range, and semantics. Some mappings may include differences in any or all of these dimensions. You can find details about these potential differences for the various mapping possibilities at [SQL-CLR Type Mapping](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md).  \n  \n### User-defined Types  \n User-defined CLR types are designed to help bridge the type system gap. Nevertheless they surface interesting issues about type versioning. A change in the version on the client might not be matched by a change in the type stored on the database server. Any such change causes another type mismatch where the type semantics might not match and the version gap is likely to become visible. Further complications occur as inheritance hierarchies are refactored in successive versions.  \n  \n## Expression Semantics  \n In addition to the pairwise mismatch between CLR and database types, expressions add complexity to the mismatch. Mismatches in operator semantics, function semantics, implicit type conversion, and precedence rules must be considered.  \n  \n The following subsections illustrate the mismatch between apparently similar expressions. It might be possible to generate SQL expressions that are semantically equivalent to a given CLR expression. However, it is not clear whether the semantic differences between apparently similar expressions are evident to a CLR user, and therefore whether the changes that are required for semantic equivalence are intended or not. This is an especially critical issue when an expression is evaluated for a set of values. The visibility of the difference might depend on data- and be hard to identify during coding and debugging.  \n  \n### Null Semantics  \n SQL expressions provide three-valued logic for Boolean expressions. The result can be true, false, or null. By contrast, CLR specifies two-valued Boolean result for comparisons involving null values. Consider the following code:  \n  \n [!code-csharp[DLinqMismatch#2](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#2)]\n [!code-vb[DLinqMismatch#2](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#2)]  \n  \n```  \n-- Assume col1 and col2 are integer columns with null values.   \n-- Assume that ANSI null behavior has not been explicitly  \n--    turned off.  \nSelect …  \nFrom …  \nWhere col1 = col2  \n-- Evaluates to null, not true and the corresponding row is not  \n--     selected.  \n-- To obtain matching behavior (i -> col1, j -> col2) change  \n--     the query to the following:  \nSelect …  \nFrom …  \nWhere  \n    col1 = col2   \nor (col1 is null and col2 is null)  \n-- (Visual Basic 'Nothing'.)  \n```  \n  \n A similar problem occurs with the assumption about two-valued results.  \n  \n [!code-csharp[DLinqMismatch#3](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#3)]\n [!code-vb[DLinqMismatch#3](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#3)]  \n  \n```  \n-- Assume col1 and col2 are nullable columns.  \n-- Assume that ANSI null behavior has not been explicitly  \n--     turned off.  \nSelect …  \nFrom …  \nWhere  \n    col1 = col2        \nor col1 != col2  \n-- Visual Basic: col1 <> col2.  \n  \n-- Excludes the case where the boolean expression evaluates  \n--     to null. Therefore the where clause does not always  \n--     evaluate to true.  \n```  \n  \n In the previous case, you can get equivalent behavior in generating SQL, but the translation might not accurately reflect your intention.  \n  \n [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] does not impose C# `null` or [!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)] `nothing` comparison semantics on SQL. Comparison operators are syntactically translated to their SQL equivalents. The semantics reflect SQL semantics as defined by server or connection settings. Two null values are considered unequal under default SQL Server settings (although you can change the settings to change the semantics). Regardless, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] does not consider server settings in query translation.  \n  \n A comparison with the literal `null` (`nothing`) is translated to the appropriate SQL version (`is null` or `is not null`).  \n  \n The value of `null` (`nothing`) in collation is defined by SQL Server; [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] does not change the collation.  \n  \n### Type Conversion and Promotion  \n SQL supports a rich set of implicit conversions in expressions. Similar expressions in C# would require an explicit cast. For example:  \n  \n-   `Nvarchar` and `DateTime` types can be compared in SQL without any explicit casts; C# requires explicit conversion.  \n  \n-   `Decimal` is implicitly converted to `DateTime` in SQL. C# does not allow for an implicit conversion.  \n  \n Likewise, type precedence in Transact-SQL differs from type precedence in C# because the underlying set of types is different. In fact, there is no clear subset/superset relationship between the precedence lists. For example, comparing an `nvarchar` with a `varchar` causes the implicit conversion of the `varchar` expression to `nvarchar`. The CLR provides no equivalent promotion.  \n  \n In simple cases, these differences cause CLR expressions with casts to be redundant for a corresponding SQL expression. More importantly, the intermediate results of a SQL expression might be implicitly promoted to a type that has no accurate counterpart in C#, and vice versa. Overall, the testing, debugging, and validation of such expressions adds significant burden on the user.  \n  \n### Collation  \n Transact-SQL supports explicit collations as annotations to character string types. These collations determine the validity of certain comparisons. For example, comparing two columns with different explicit collations is an error. The use of much simplified CTS string type does not cause such errors. Consider the following example:  \n  \n```  \ncreate table T2 (  \n    Col1 nvarchar(10),  \n    Col2      nvarchar(10) collate Latin_general_ci_as  \n)  \n```  \n  \n [!code-csharp[DLinqMismatch#4](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#4)]\n [!code-vb[DLinqMismatch#4](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#4)]  \n  \n```  \nSelect …  \nFrom …  \nWhere Col1 = Col2  \n-- Error, collation conflict.  \n```  \n  \n In effect, the collation subclause creates a *restricted type* that is not substitutable.  \n  \n Similarly, the sort order can be significantly different across the type systems. This difference affects the sorting of results. <xref:System.Guid> is sorted on all 16 bytes by lexicographic order (`IComparable()`), whereas T-SQL compares GUIDs in the following order: node(10-15), clock-seq(8-9), time-high(6-7), time-mid(4-5), time-low(0-3). This ordering was done in SQL 7.0 when NT-generated GUIDs had such an octet order. The approach ensured that GUIDs generated at the same node cluster came together in sequential order according to timestamp. The approach was also useful for building indexes (inserts become appends instead of random IOs). The order was scrambled later in Windows because of privacy concerns, but SQL must maintain compatibility. A workaround is to use <xref:System.Data.SqlTypes.SqlGuid> instead of <xref:System.Guid>.  \n  \n### Operator and Function Differences  \n Operators and functions that are essentially comparable have subtly different semantics. For example:  \n  \n-   C# specifies short circuit semantics based on lexical order of operands for logical operators `&&` and `||`. SQL on the other hand is targeted for set-based queries and therefore provides more freedom for the optimizer to decide the order of execution. Some of the implications include the following:  \n  \n    -   Semantically equivalent translation would require \"`CASE` … `WHEN` … `THEN`\" construct in SQL to avoid reordering of operand execution.  \n  \n    -   A loose translation to `AND`/`OR` operators could cause unexpected errors if the C# expression relies on evaluation the second operand being based on the result of the evaluation of the first operand.  \n  \n-   `Round()` function has different semantics in [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] and in T-SQL.  \n  \n-   Starting index for strings is 0 in the CLR but 1 in SQL. Therefore, any function that has index needs index translation.  \n  \n-   The CLR supports modulus (‘%’) operator for floating point numbers but SQL does not.  \n  \n-   The `Like` operator effectively acquires automatic overloads based on implicit conversions. Although the `Like` operator is defined to operate on character string types, implicit conversion from numeric types or `DateTime` types allows for those non-string types to be used with `Like` just as well. In CTS, comparable implicit conversions do not exist. Therefore, additional overloads are needed.  \n  \n    > [!NOTE]\n    >  This `Like` operator behavior applies to C# only; the Visual Basic `Like` keyword is unchanged.  \n  \n-   Overflow is always checked in SQL but it has to be explicitly specified in C# (not in [!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]) to avoid wraparound. Given integer columns C1, C2 and C3, if C1+C2 is stored in C3 (Update T Set C3 = C1 + C2).  \n  \n    ```  \n    create table T3 (  \n        Col1      integer,  \n        Col2      integer  \n    )  \n    insert into T3 (col1, col2) values (2147483647, 5)  \n    -- Valid values: max integer value and 5.  \n    select * from T3 where col1 + col2 < 0  \n    -- Produces arithmetic overflow error.  \n    ```  \n  \n [!code-csharp[DLinqMismatch#5](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#5)]\n [!code-vb[DLinqMismatch#5](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#5)]  \n  \n-   SQL performs symmetric arithmetic rounding while [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] uses banker’s rounding. See Knowledgebase article 196652 for additional details.  \n  \n-   By default, for common locales, character-string comparisons are case-insensitive in SQL. In Visual Basic and in C#, they are case-sensitive. For example, `s == \"Food\"` (`s = \"Food\"` in [!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]) and `s == \"Food\"` can yield different results if `s` is `food`.  \n  \n    ```  \n    -- Assume default US-English locale (case insensitive).  \n    create table T4 (  \n        Col1      nvarchar (256)  \n    )  \n    insert into T4 values (‘Food’)   \n    insert into T4 values (‘FOOD’)  \n    select * from T4 where Col1 = ‘food’  \n    -- Both the rows are returned because of case-insensitive matching.  \n    ```  \n  \n [!code-csharp[DLinqMismatch#6](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#6)]\n [!code-vb[DLinqMismatch#6](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#6)]  \n  \n-   Operators/ functions applied to fixed length character type arguments in SQL have significantly different semantics than the same operators/functions applied to the CLR <xref:System.String?displayProperty=fullName>. This could also be viewed as an extension of the missing counterpart problem discussed in the section about types.  \n  \n    ```  \n    create table T4 (  \n        Col1      nchar(4)  \n    )  \n    Insert into T5(Col1) values ('21');  \n    Insert into T5(Col1) values ('1021');  \n    Select * from T5 where Col1 like '%1'  \n    -- Only the second row with Col1 = '1021' is returned.  \n    -- Not the first row!  \n    ```  \n  \n     [!code-csharp[DLinqMismatch#7](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#7)]\n     [!code-vb[DLinqMismatch#7](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#7)]  \n  \n     A similar problem occurs with string concatenation.  \n  \n    ```  \n    create table T6 (  \n        Col1      nchar(4)  \n        Col2       nchar(4)  \n    )  \n    Insert into T6 values ('a', 'b');  \n    Select Col1+Col2 from T6  \n    -- Returns concatenation of padded strings \"a   b   \" and not \"ab\".  \n    ```  \n  \n In summary, a convoluted translation might be required for CLR expressions and additional operators/functions may be necessary to expose SQL functionality.  \n  \n### Type Casting  \n In C# and in SQL, users can override the default semantics of expressions by using explicit type casts (`Cast` and `Convert`). However, exposing this capability across the type system boundary poses a dilemma. A SQL cast that provides the desired semantics cannot be easily translated to a corresponding C# cast. On the other hand, a C# cast cannot be directly translated into an equivalent SQL cast because of type mismatches, missing counterparts, and different type precedence hierarchies. There is a trade-off between exposing the type system mismatch and losing significant power of expression.  \n  \n In other cases, type casting might not be needed in either domain for validation of an expression but might be required to make sure that a non-default mapping is correctly applied to the expression.  \n  \n```  \n-- Example from \"Non-default Mapping\" section extended  \ncreate table T5 (  \n    Col1      nvarchar(10),  \n    Col2      nvarchar(10)  \n)  \nInsert into T5(col1, col2) values (‘3’, ‘2’);  \n```  \n  \n [!code-csharp[DLinqMismatch#8](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#8)]\n [!code-vb[DLinqMismatch#8](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#8)]  \n  \n```  \nSelect *  \nFrom T5  \nWhere Col1 + Col2 > 4     \n-- \"Col1 + Col2\" expr evaluates to '32'   \n```  \n  \n## Performance Issues  \n Accounting for some SQL Server-CLR type differences may resut in a decrease in performance when crossing between the CLR and SQL Server type systems. Examples of scenarios impacting performance include the following:  \n  \n-   Forced order of evaluation for logical and/or operators  \n  \n-   Generating SQL to enforce order of predicate evaluation restricts the SQL optimizer’s ability.  \n  \n-   Type conversions, whether introduced by a CLR compiler or by an Object-Relational query implementation, may curtail index usage.  \n  \n     For example,  \n  \n    ```  \n    -- Table DDL  \n    create table T5 (  \n        Col1      varchar(100)  \n    )  \n    ```  \n  \n     [!code-csharp[DLinqMismatch#9](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#9)]\n     [!code-vb[DLinqMismatch#9](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#9)]  \n  \n     Consider the translation of expression `(s = SOME_STRING_CONSTANT)`.  \n  \n    ```  \n    -- Corresponding part of SQL where clause  \n    Where …  \n    Col1 = SOME_STRING_CONSTANT  \n    -- This expression is of the form <varchar> = <nvarchar>.  \n    -- Hence SQL introduces a conversion from varchar to nvarchar,  \n    --     resulting in  \n    Where …  \n    Convert(nvarchar(100), Col1) = SOME_STRING_CONSTANT  \n    -- Cannot use the index for column Col1 for some implementations.  \n    ```  \n  \n In addition to semantic differences, it is important to consider impacts to performance when crossing between the SQL Server and CLR type systems. For large data sets, such performance issues can determine whether an application is deployable.  \n  \n## See Also  \n [Background Information](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)","nodes":[{"pos":[4,354],"embed":true,"restype":"x-metadata","content":"title: \"SQL-CLR Type Mismatches | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 0a90c33f-7ed7-4501-ad5f-6224c5da8e9b\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"SQL-CLR Type Mismatches | Microsoft Docs","nodes":[{"pos":[0,40],"content":"SQL-CLR Type Mismatches | Microsoft Docs","nodes":[{"content":"SQL-CLR Type Mismatches | Microsoft Docs","pos":[0,40]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[361,384],"content":"SQL-CLR Type Mismatches","linkify":"SQL-CLR Type Mismatches","nodes":[{"content":"SQL-CLR Type Mismatches","pos":[0,23]}]},{"content":"automates much of the translation between the object model and SQL Server.","pos":[453,527]},{"content":"Nevertheless, some situations prevent exact translation.","pos":[528,584]},{"content":"These key mismatches between the common language runtime (CLR) types and the SQL Server database types are summarized in the following sections.","pos":[585,729]},{"content":"You can find more details about specific type mappings and function translation at <bpt id=\"p1\">[</bpt>SQL-CLR Type Mapping<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept> and <bpt id=\"p2\">[</bpt>Data Types and Functions<ept id=\"p2\">](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)</ept>.","pos":[730,1029],"source":" You can find more details about specific type mappings and function translation at [SQL-CLR Type Mapping](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md) and [Data Types and Functions](../../../../../../docs/framework/data/adonet/sql/linq/data-types-and-functions.md)."},{"pos":[1038,1048],"content":"Data Types","linkify":"Data Types","nodes":[{"content":"Data Types","pos":[0,10]}]},{"content":"Translation between the CLR and SQL Server occurs when a query is being sent to the database, and when the results are sent back to your object model.","pos":[1052,1202]},{"content":"For example, the following Transact-SQL query requires two value conversions:","pos":[1203,1280]},{"content":"Before the query can be executed on SQL Server, the value for the Transact-SQL parameter must be specified.","pos":[1363,1470]},{"content":"In this example, the <ph id=\"ph1\">`id`</ph> parameter value must first be translated from a CLR <ph id=\"ph2\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph> type to a SQL Server <ph id=\"ph3\">`INT`</ph> type so that the database can understand what the value is.","pos":[1471,1680],"source":" In this example, the `id` parameter value must first be translated from a CLR <xref:System.Int32?displayProperty=fullName> type to a SQL Server `INT` type so that the database can understand what the value is."},{"content":"Then to retrieve the results, the SQL Server <ph id=\"ph1\">`DateOfBirth`</ph> column must be translated from a SQL Server <ph id=\"ph2\">`DATETIME`</ph> type to a CLR <ph id=\"ph3\">&lt;xref:System.DateTime?displayProperty=fullName&gt;</ph> type for use in the object model.","pos":[1681,1890],"source":" Then to retrieve the results, the SQL Server `DateOfBirth` column must be translated from a SQL Server `DATETIME` type to a CLR <xref:System.DateTime?displayProperty=fullName> type for use in the object model."},{"content":"In this example, the types in the CLR object model and SQL Server database have natural mappings.","pos":[1891,1988]},{"content":"But, this is not always the case.","pos":[1989,2022]},{"pos":[2032,2052],"content":"Missing Counterparts","linkify":"Missing Counterparts","nodes":[{"content":"Missing Counterparts","pos":[0,20]}]},{"content":"The following types do not have reasonable counterparts.","pos":[2056,2112]},{"content":"Mismatches in the CLR <ph id=\"ph1\">&lt;xref:System&gt;</ph> namespace:","pos":[2122,2168],"source":"Mismatches in the CLR <xref:System> namespace:"},{"content":"<bpt id=\"p1\">**</bpt>Unsigned integers<ept id=\"p1\">**</ept>.","pos":[2182,2204],"source":"**Unsigned integers**."},{"content":"These types are typically mapped to their signed counterparts of larger size to avoid overflow.","pos":[2205,2300]},{"content":"Literals can be converted to a signed numeric of the same or smaller size, based on value.","pos":[2301,2391]},{"content":"<bpt id=\"p1\">**</bpt>Boolean<ept id=\"p1\">**</ept>.","pos":[2405,2417],"source":"**Boolean**."},{"content":"These types can be mapped to a bit or larger numeric or string.","pos":[2418,2481]},{"content":"A literal can be mapped to an expression that evaluates to the same value (for example, <ph id=\"ph1\">`1=1`</ph> in SQL for <ph id=\"ph2\">`True`</ph> in CLS).","pos":[2482,2602],"source":" A literal can be mapped to an expression that evaluates to the same value (for example, `1=1` in SQL for `True` in CLS)."},{"content":"<bpt id=\"p1\">**</bpt>TimeSpan<ept id=\"p1\">**</ept>.","pos":[2616,2629],"source":"**TimeSpan**."},{"content":"This type represents the difference between two <ph id=\"ph1\">`DateTime`</ph> values and does not correspond to the <ph id=\"ph2\">`timestamp`</ph> of SQL Server.","pos":[2630,2753],"source":" This type represents the difference between two `DateTime` values and does not correspond to the `timestamp` of SQL Server."},{"content":"The CLR <ph id=\"ph1\">&lt;xref:System.TimeSpan?displayProperty=fullName&gt;</ph> may also map to the SQL Server <ph id=\"ph2\">`TIME`</ph> type in some cases.","pos":[2754,2867],"source":" The CLR <xref:System.TimeSpan?displayProperty=fullName> may also map to the SQL Server `TIME` type in some cases."},{"content":"The SQL Server <ph id=\"ph1\">`TIME`</ph> type was only intended to represent positive values less than 24 hours.","pos":[2868,2961],"source":" The SQL Server `TIME` type was only intended to represent positive values less than 24 hours."},{"content":"The CLR <ph id=\"ph1\">&lt;xref:System.TimeSpan&gt;</ph> has a much larger range.","pos":[2962,3017],"source":" The CLR <xref:System.TimeSpan> has a much larger range."},{"pos":[3029,3207],"content":"[!NOTE]\nSQL Server-specific [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] types in <xref:System.Data.SqlTypes> are not included in this comparison.","leadings":["","    >  "],"nodes":[{"content":"SQL Server-specific <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> types in <ph id=\"ph2\">&lt;xref:System.Data.SqlTypes&gt;</ph> are not included in this comparison.","pos":[8,171],"source":"SQL Server-specific [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] types in <xref:System.Data.SqlTypes> are not included in this comparison."}]},{"content":"Mismatches in SQL Server:","pos":[3217,3242]},{"content":"<bpt id=\"p1\">**</bpt>Fixed length character types<ept id=\"p1\">**</ept>.","pos":[3256,3289],"source":"**Fixed length character types**."},{"content":"Transact-SQL distinguishes between Unicode and non-Unicode categories and has three distinct types in each category: fixed length <ph id=\"ph1\">`nchar`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`char`</ph>, variable length <ph id=\"ph4\">`nvarchar`</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">`varchar`</ph>, and larger-sized <ph id=\"ph7\">`ntext`</ph><ph id=\"ph8\">/</ph><ph id=\"ph9\">`text`</ph>.","pos":[3290,3506],"source":" Transact-SQL distinguishes between Unicode and non-Unicode categories and has three distinct types in each category: fixed length `nchar`/`char`, variable length `nvarchar`/`varchar`, and larger-sized `ntext`/`text`."},{"content":"The fixed length character types could be mapped to the CLR <ph id=\"ph1\">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> type for retrieving characters, but they do not really correspond to the same type in conversions and behavior.","pos":[3507,3722],"source":" The fixed length character types could be mapped to the CLR <xref:System.Char?displayProperty=fullName> type for retrieving characters, but they do not really correspond to the same type in conversions and behavior."},{"content":"<bpt id=\"p1\">**</bpt>Bit<ept id=\"p1\">**</ept>.","pos":[3736,3744],"source":"**Bit**."},{"content":"Although the <ph id=\"ph1\">`bit`</ph> domain has the same number of values as <ph id=\"ph2\">`Nullable&lt;Boolean&gt;`</ph>, the two are different types.","pos":[3745,3853],"source":" Although the `bit` domain has the same number of values as `Nullable<Boolean>`, the two are different types."},{"content":"<ph id=\"ph1\">`Bit`</ph> takes values <ph id=\"ph2\">`1`</ph> and <ph id=\"ph3\">`0`</ph> instead of <ph id=\"ph4\">`true`</ph><ph id=\"ph5\">/</ph><ph id=\"ph6\">`false`</ph>, and cannot be used as an equivalent to Boolean expressions.","pos":[3854,3971],"source":"`Bit` takes values `1` and `0` instead of `true`/`false`, and cannot be used as an equivalent to Boolean expressions."},{"content":"<bpt id=\"p1\">**</bpt>Timestamp<ept id=\"p1\">**</ept>.","pos":[3985,3999],"source":"**Timestamp**."},{"content":"Unlike the CLR <ph id=\"ph1\">&lt;xref:System.TimeSpan?displayProperty=fullName&gt;</ph> type, the SQL Server <ph id=\"ph2\">`TIMESTAMP`</ph> type represents an 8-byte number generated by the database that is unique for each update and is not based on the difference between <ph id=\"ph3\">&lt;xref:System.DateTime&gt;</ph> values.","pos":[4000,4259],"source":" Unlike the CLR <xref:System.TimeSpan?displayProperty=fullName> type, the SQL Server `TIMESTAMP` type represents an 8-byte number generated by the database that is unique for each update and is not based on the difference between <xref:System.DateTime> values."},{"content":"<bpt id=\"p1\">**</bpt>Money<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>SmallMoney<ept id=\"p2\">**</ept>.","pos":[4273,4302],"source":"**Money** and **SmallMoney**."},{"content":"These types can be mapped to <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> but are basically different types and are treated as such by server-based functions and conversions.","pos":[4303,4454],"source":" These types can be mapped to <xref:System.Decimal> but are basically different types and are treated as such by server-based functions and conversions."},{"pos":[4464,4481],"content":"Multiple Mappings","linkify":"Multiple Mappings","nodes":[{"content":"Multiple Mappings","pos":[0,17]}]},{"content":"There are many SQL Server data types that you can map to one or more CLR data types.","pos":[4485,4569]},{"content":"There are also many CLR types that you can map to one or more SQL Server types.","pos":[4570,4649]},{"content":"Although a mapping may be supported by LINQ to SQL, it does not mean that the two types mapped between the CLR and SQL Server are a perfect match in precision, range, and semantics.","pos":[4650,4831]},{"content":"Some mappings may include differences in any or all of these dimensions.","pos":[4832,4904]},{"content":"You can find details about these potential differences for the various mapping possibilities at <bpt id=\"p1\">[</bpt>SQL-CLR Type Mapping<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)</ept>.","pos":[4905,5103],"source":" You can find details about these potential differences for the various mapping possibilities at [SQL-CLR Type Mapping](../../../../../../docs/framework/data/adonet/sql/linq/sql-clr-type-mapping.md)."},{"pos":[5113,5131],"content":"User-defined Types","linkify":"User-defined Types","nodes":[{"content":"User-defined Types","pos":[0,18]}]},{"content":"User-defined CLR types are designed to help bridge the type system gap.","pos":[5135,5206]},{"content":"Nevertheless they surface interesting issues about type versioning.","pos":[5207,5274]},{"content":"A change in the version on the client might not be matched by a change in the type stored on the database server.","pos":[5275,5388]},{"content":"Any such change causes another type mismatch where the type semantics might not match and the version gap is likely to become visible.","pos":[5389,5523]},{"content":"Further complications occur as inheritance hierarchies are refactored in successive versions.","pos":[5524,5617]},{"pos":[5626,5646],"content":"Expression Semantics","linkify":"Expression Semantics","nodes":[{"content":"Expression Semantics","pos":[0,20]}]},{"content":"In addition to the pairwise mismatch between CLR and database types, expressions add complexity to the mismatch.","pos":[5650,5762]},{"content":"Mismatches in operator semantics, function semantics, implicit type conversion, and precedence rules must be considered.","pos":[5763,5883]},{"content":"The following subsections illustrate the mismatch between apparently similar expressions.","pos":[5890,5979]},{"content":"It might be possible to generate SQL expressions that are semantically equivalent to a given CLR expression.","pos":[5980,6088]},{"content":"However, it is not clear whether the semantic differences between apparently similar expressions are evident to a CLR user, and therefore whether the changes that are required for semantic equivalence are intended or not.","pos":[6089,6310]},{"content":"This is an especially critical issue when an expression is evaluated for a set of values.","pos":[6311,6400]},{"content":"The visibility of the difference might depend on data- and be hard to identify during coding and debugging.","pos":[6401,6508]},{"pos":[6518,6532],"content":"Null Semantics","linkify":"Null Semantics","nodes":[{"content":"Null Semantics","pos":[0,14]}]},{"content":"SQL expressions provide three-valued logic for Boolean expressions.","pos":[6536,6603]},{"content":"The result can be true, false, or null.","pos":[6604,6643]},{"content":"By contrast, CLR specifies two-valued Boolean result for comparisons involving null values.","pos":[6644,6735]},{"content":"Consider the following code:","pos":[6736,6764]},{"content":"A similar problem occurs with the assumption about two-valued results.","pos":[7523,7593]},{"content":"In the previous case, you can get equivalent behavior in generating SQL, but the translation might not accurately reflect your intention.","pos":[8252,8389]},{"content":"does not impose C# <ph id=\"ph1\">`null`</ph> or <ph id=\"ph2\">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> <ph id=\"ph3\">`nothing`</ph> comparison semantics on SQL.","pos":[8464,8591],"source":" does not impose C# `null` or [!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)] `nothing` comparison semantics on SQL."},{"content":"Comparison operators are syntactically translated to their SQL equivalents.","pos":[8592,8667]},{"content":"The semantics reflect SQL semantics as defined by server or connection settings.","pos":[8668,8748]},{"content":"Two null values are considered unequal under default SQL Server settings (although you can change the settings to change the semantics).","pos":[8749,8885]},{"content":"Regardless, <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not consider server settings in query translation.","pos":[8886,9021],"source":" Regardless, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] does not consider server settings in query translation."},{"pos":[9028,9151],"content":"A comparison with the literal <ph id=\"ph1\">`null`</ph> (<ph id=\"ph2\">`nothing`</ph>) is translated to the appropriate SQL version (<ph id=\"ph3\">`is null`</ph> or <ph id=\"ph4\">`is not null`</ph>).","source":"A comparison with the literal `null` (`nothing`) is translated to the appropriate SQL version (`is null` or `is not null`)."},{"pos":[9158,9327],"content":"The value of <ph id=\"ph1\">`null`</ph> (<ph id=\"ph2\">`nothing`</ph>) in collation is defined by SQL Server; <ph id=\"ph3\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> does not change the collation.","source":"The value of `null` (`nothing`) in collation is defined by SQL Server; [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] does not change the collation."},{"pos":[9337,9366],"content":"Type Conversion and Promotion","linkify":"Type Conversion and Promotion","nodes":[{"content":"Type Conversion and Promotion","pos":[0,29]}]},{"content":"SQL supports a rich set of implicit conversions in expressions.","pos":[9370,9433]},{"content":"Similar expressions in C# would require an explicit cast.","pos":[9434,9491]},{"content":"For example:","pos":[9492,9504]},{"pos":[9514,9629],"content":"<ph id=\"ph1\">`Nvarchar`</ph> and <ph id=\"ph2\">`DateTime`</ph> types can be compared in SQL without any explicit casts; C# requires explicit conversion.","source":"`Nvarchar` and `DateTime` types can be compared in SQL without any explicit casts; C# requires explicit conversion."},{"content":"<ph id=\"ph1\">`Decimal`</ph> is implicitly converted to <ph id=\"ph2\">`DateTime`</ph> in SQL.","pos":[9639,9694],"source":"`Decimal` is implicitly converted to `DateTime` in SQL."},{"content":"C# does not allow for an implicit conversion.","pos":[9695,9740]},{"content":"Likewise, type precedence in Transact-SQL differs from type precedence in C# because the underlying set of types is different.","pos":[9747,9873]},{"content":"In fact, there is no clear subset/superset relationship between the precedence lists.","pos":[9874,9959]},{"content":"For example, comparing an <ph id=\"ph1\">`nvarchar`</ph> with a <ph id=\"ph2\">`varchar`</ph> causes the implicit conversion of the <ph id=\"ph3\">`varchar`</ph> expression to <ph id=\"ph4\">`nvarchar`</ph>.","pos":[9960,10087],"source":" For example, comparing an `nvarchar` with a `varchar` causes the implicit conversion of the `varchar` expression to `nvarchar`."},{"content":"The CLR provides no equivalent promotion.","pos":[10088,10129]},{"content":"In simple cases, these differences cause CLR expressions with casts to be redundant for a corresponding SQL expression.","pos":[10136,10255]},{"content":"More importantly, the intermediate results of a SQL expression might be implicitly promoted to a type that has no accurate counterpart in C#, and vice versa.","pos":[10256,10413]},{"content":"Overall, the testing, debugging, and validation of such expressions adds significant burden on the user.","pos":[10414,10518]},{"pos":[10528,10537],"content":"Collation","linkify":"Collation","nodes":[{"content":"Collation","pos":[0,9]}]},{"content":"Transact-SQL supports explicit collations as annotations to character string types.","pos":[10541,10624]},{"content":"These collations determine the validity of certain comparisons.","pos":[10625,10688]},{"content":"For example, comparing two columns with different explicit collations is an error.","pos":[10689,10771]},{"content":"The use of much simplified CTS string type does not cause such errors.","pos":[10772,10842]},{"content":"Consider the following example:","pos":[10843,10874]},{"pos":[11341,11430],"content":"In effect, the collation subclause creates a <bpt id=\"p1\">*</bpt>restricted type<ept id=\"p1\">*</ept> that is not substitutable.","source":"In effect, the collation subclause creates a *restricted type* that is not substitutable."},{"content":"Similarly, the sort order can be significantly different across the type systems.","pos":[11437,11518]},{"content":"This difference affects the sorting of results.","pos":[11519,11566]},{"content":"<ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> is sorted on all 16 bytes by lexicographic order (<ph id=\"ph2\">`IComparable()`</ph>), whereas T-SQL compares GUIDs in the following order: node(10-15), clock-seq(8-9), time-high(6-7), time-mid(4-5), time-low(0-3).","pos":[11567,11781],"source":" <xref:System.Guid> is sorted on all 16 bytes by lexicographic order (`IComparable()`), whereas T-SQL compares GUIDs in the following order: node(10-15), clock-seq(8-9), time-high(6-7), time-mid(4-5), time-low(0-3)."},{"content":"This ordering was done in SQL 7.0 when NT-generated GUIDs had such an octet order.","pos":[11782,11864]},{"content":"The approach ensured that GUIDs generated at the same node cluster came together in sequential order according to timestamp.","pos":[11865,11989]},{"content":"The approach was also useful for building indexes (inserts become appends instead of random IOs).","pos":[11990,12087]},{"content":"The order was scrambled later in Windows because of privacy concerns, but SQL must maintain compatibility.","pos":[12088,12194]},{"content":"A workaround is to use <ph id=\"ph1\">&lt;xref:System.Data.SqlTypes.SqlGuid&gt;</ph> instead of <ph id=\"ph2\">&lt;xref:System.Guid&gt;</ph>.","pos":[12195,12284],"source":" A workaround is to use <xref:System.Data.SqlTypes.SqlGuid> instead of <xref:System.Guid>."},{"pos":[12294,12327],"content":"Operator and Function Differences","linkify":"Operator and Function Differences","nodes":[{"content":"Operator and Function Differences","pos":[0,33]}]},{"content":"Operators and functions that are essentially comparable have subtly different semantics.","pos":[12331,12419]},{"content":"For example:","pos":[12420,12432]},{"content":"C# specifies short circuit semantics based on lexical order of operands for logical operators <ph id=\"ph1\">`&amp;&amp;`</ph> and <ph id=\"ph2\">`||`</ph>.","pos":[12442,12550],"source":"C# specifies short circuit semantics based on lexical order of operands for logical operators `&&` and `||`."},{"content":"SQL on the other hand is targeted for set-based queries and therefore provides more freedom for the optimizer to decide the order of execution.","pos":[12551,12694]},{"content":"Some of the implications include the following:","pos":[12695,12742]},{"content":"Semantically equivalent translation would require \"<ph id=\"ph1\">`CASE`</ph> …","pos":[12756,12815],"source":"Semantically equivalent translation would require \"`CASE` …"},{"content":"<ph id=\"ph1\">`WHEN`</ph> …","pos":[12816,12824],"source":"`WHEN` …"},{"content":"<ph id=\"ph1\">`THEN`</ph>\" construct in SQL to avoid reordering of operand execution.","pos":[12825,12891],"source":"`THEN`\" construct in SQL to avoid reordering of operand execution."},{"pos":[12905,13105],"content":"A loose translation to <ph id=\"ph1\">`AND`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`OR`</ph> operators could cause unexpected errors if the C# expression relies on evaluation the second operand being based on the result of the evaluation of the first operand.","source":"A loose translation to `AND`/`OR` operators could cause unexpected errors if the C# expression relies on evaluation the second operand being based on the result of the evaluation of the first operand."},{"pos":[13115,13244],"content":"<ph id=\"ph1\">`Round()`</ph> function has different semantics in <ph id=\"ph2\">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> and in T-SQL.","source":"`Round()` function has different semantics in [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] and in T-SQL."},{"content":"Starting index for strings is 0 in the CLR but 1 in SQL.","pos":[13254,13310]},{"content":"Therefore, any function that has index needs index translation.","pos":[13311,13374]},{"content":"The CLR supports modulus (‘%’) operator for floating point numbers but SQL does not.","pos":[13384,13468]},{"content":"The <ph id=\"ph1\">`Like`</ph> operator effectively acquires automatic overloads based on implicit conversions.","pos":[13478,13569],"source":"The `Like` operator effectively acquires automatic overloads based on implicit conversions."},{"content":"Although the <ph id=\"ph1\">`Like`</ph> operator is defined to operate on character string types, implicit conversion from numeric types or <ph id=\"ph2\">`DateTime`</ph> types allows for those non-string types to be used with <ph id=\"ph3\">`Like`</ph> just as well.","pos":[13570,13777],"source":" Although the `Like` operator is defined to operate on character string types, implicit conversion from numeric types or `DateTime` types allows for those non-string types to be used with `Like` just as well."},{"content":"In CTS, comparable implicit conversions do not exist.","pos":[13778,13831]},{"content":"Therefore, additional overloads are needed.","pos":[13832,13875]},{"pos":[13887,13997],"content":"[!NOTE]\nThis `Like` operator behavior applies to C# only; the Visual Basic `Like` keyword is unchanged.","leadings":["","    >  "],"nodes":[{"content":"This <ph id=\"ph1\">`Like`</ph> operator behavior applies to C# only; the Visual Basic <ph id=\"ph2\">`Like`</ph> keyword is unchanged.","pos":[8,103],"source":"This `Like` operator behavior applies to C# only; the Visual Basic `Like` keyword is unchanged."}]},{"content":"Overflow is always checked in SQL but it has to be explicitly specified in C# (not in <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph>) to avoid wraparound.","pos":[14007,14174],"source":"Overflow is always checked in SQL but it has to be explicitly specified in C# (not in [!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]) to avoid wraparound."},{"content":"Given integer columns C1, C2 and C3, if C1+C2 is stored in C3 (Update T Set C3 = C1 + C2).","pos":[14175,14265]},{"pos":[14579,14824],"content":"[!code-csharp[DLinqMismatch#5](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#5)]\n[!code-vb[DLinqMismatch#5](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#5)]","leadings":[""," "],"nodes":[]},{"content":"SQL performs symmetric arithmetic rounding while <ph id=\"ph1\">[!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)]</ph> uses banker’s rounding.","pos":[14834,14976],"source":"SQL performs symmetric arithmetic rounding while [!INCLUDE[dnprdnshort](../../../../../../includes/dnprdnshort-md.md)] uses banker’s rounding."},{"content":"See Knowledgebase article 196652 for additional details.","pos":[14977,15033]},{"content":"By default, for common locales, character-string comparisons are case-insensitive in SQL.","pos":[15043,15132]},{"content":"In Visual Basic and in C#, they are case-sensitive.","pos":[15133,15184]},{"content":"For example, <ph id=\"ph1\">`s == \"Food\"`</ph> (<ph id=\"ph2\">`s = \"Food\"`</ph> in <ph id=\"ph3\">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph>) and <ph id=\"ph4\">`s == \"Food\"`</ph> can yield different results if <ph id=\"ph5\">`s`</ph> is <ph id=\"ph6\">`food`</ph>.","pos":[15185,15353],"source":" For example, `s == \"Food\"` (`s = \"Food\"` in [!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]) and `s == \"Food\"` can yield different results if `s` is `food`."},{"pos":[15704,15949],"content":"[!code-csharp[DLinqMismatch#6](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#6)]\n[!code-vb[DLinqMismatch#6](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#6)]","leadings":[""," "],"nodes":[]},{"content":"Operators/ functions applied to fixed length character type arguments in SQL have significantly different semantics than the same operators/functions applied to the CLR <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>.","pos":[15959,16174],"source":"Operators/ functions applied to fixed length character type arguments in SQL have significantly different semantics than the same operators/functions applied to the CLR <xref:System.String?displayProperty=fullName>."},{"content":"This could also be viewed as an extension of the missing counterpart problem discussed in the section about types.","pos":[16175,16289]},{"pos":[16603,16852],"content":"[!code-csharp[DLinqMismatch#7](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#7)]\n [!code-vb[DLinqMismatch#7](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#7)]","leadings":["","    "],"nodes":[]},{"content":"A similar problem occurs with string concatenation.","pos":[16863,16914]},{"content":"In summary, a convoluted translation might be required for CLR expressions and additional operators/functions may be necessary to expose SQL functionality.","pos":[17180,17335]},{"pos":[17345,17357],"content":"Type Casting","linkify":"Type Casting","nodes":[{"content":"Type Casting","pos":[0,12]}]},{"content":"In C# and in SQL, users can override the default semantics of expressions by using explicit type casts (<ph id=\"ph1\">`Cast`</ph> and <ph id=\"ph2\">`Convert`</ph>).","pos":[17361,17487],"source":"In C# and in SQL, users can override the default semantics of expressions by using explicit type casts (`Cast` and `Convert`)."},{"content":"However, exposing this capability across the type system boundary poses a dilemma.","pos":[17488,17570]},{"content":"A SQL cast that provides the desired semantics cannot be easily translated to a corresponding C# cast.","pos":[17571,17673]},{"content":"On the other hand, a C# cast cannot be directly translated into an equivalent SQL cast because of type mismatches, missing counterparts, and different type precedence hierarchies.","pos":[17674,17853]},{"content":"There is a trade-off between exposing the type system mismatch and losing significant power of expression.","pos":[17854,17960]},{"content":"In other cases, type casting might not be needed in either domain for validation of an expression but might be required to make sure that a non-default mapping is correctly applied to the expression.","pos":[17967,18166]},{"pos":[18736,18754],"content":"Performance Issues","linkify":"Performance Issues","nodes":[{"content":"Performance Issues","pos":[0,18]}]},{"content":"Accounting for some SQL Server-CLR type differences may resut in a decrease in performance when crossing between the CLR and SQL Server type systems.","pos":[18758,18907]},{"content":"Examples of scenarios impacting performance include the following:","pos":[18908,18974]},{"content":"Forced order of evaluation for logical and/or operators","pos":[18984,19039]},{"content":"Generating SQL to enforce order of predicate evaluation restricts the SQL optimizer’s ability.","pos":[19049,19143]},{"content":"Type conversions, whether introduced by a CLR compiler or by an Object-Relational query implementation, may curtail index usage.","pos":[19153,19281]},{"content":"For example,","pos":[19292,19304]},{"pos":[19422,19671],"content":"[!code-csharp[DLinqMismatch#9](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqMismatch/cs/Program.cs#9)]\n [!code-vb[DLinqMismatch#9](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqMismatch/vb/Module1.vb#9)]","leadings":["","    "],"nodes":[]},{"pos":[19682,19750],"content":"Consider the translation of expression <ph id=\"ph1\">`(s = SOME_STRING_CONSTANT)`</ph>.","source":"Consider the translation of expression `(s = SOME_STRING_CONSTANT)`."},{"content":"In addition to semantic differences, it is important to consider impacts to performance when crossing between the SQL Server and CLR type systems.","pos":[20179,20325]},{"content":"For large data sets, such performance issues can determine whether an application is deployable.","pos":[20326,20422]},{"pos":[20431,20439],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[20443,20548],"content":"<bpt id=\"p1\">[</bpt>Background Information<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)</ept>","source":"[Background Information](../../../../../../docs/framework/data/adonet/sql/linq/background-information.md)"}]}