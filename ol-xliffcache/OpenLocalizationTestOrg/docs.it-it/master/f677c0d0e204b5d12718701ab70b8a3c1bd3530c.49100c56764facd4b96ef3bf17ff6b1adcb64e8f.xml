{"content":"---\ntitle: \"Functional Construction (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: feac4273-39ab-43ae-bab7-4059c807a785\n---\n# Functional Construction (LINQ to XML) (Visual Basic)\n[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides a powerful way to create XML elements called *functional construction*. Functional construction is the ability to create an XML tree in a single statement.  \n  \n There are several key features of the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming interface that enable functional construction:  \n  \n-   The <xref:System.Xml.Linq.XElement> constructor takes various types of arguments for content. For example, you can pass another <xref:System.Xml.Linq.XElement> object, which becomes a child element. You can pass an <xref:System.Xml.Linq.XAttribute> object, which becomes an attribute of the element. Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.  \n  \n-   The <xref:System.Xml.Linq.XElement> constructor takes a `params` array of type <xref:System.Object>, so that you can pass any number of objects to the constructor. This enables you to create an element that has complex content.  \n  \n-   If an object implements <xref:System.Collections.Generic.IEnumerable%601>, the collection in the object is enumerated, and all items in the collection are added. If the collection contains <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> objects, each item in the collection is added separately. This is important because it lets you pass the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the constructor.  \n  \n The following is an example:  \n  \n These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries when you create an XML tree:  \n  \n```vb  \nDim srcTree As XElement = _  \n    <Root>  \n        <Element>1</Element>  \n        <Element>2</Element>  \n        <Element>3</Element>  \n        <Element>4</Element>  \n        <Element>5</Element>  \n    </Root>  \nDim xmlTree As XElement = _  \n    <Root>  \n        <Child>1</Child>  \n        <Child>2</Child>  \n        <%= From el In srcTree.Elements() _  \n            Where CInt(el) > 2 _  \n            Select el %>  \n    </Root>  \nConsole.WriteLine(xmlTree)  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Child>1</Child>  \n  <Child>2</Child>  \n  <Element>3</Element>  \n  <Element>4</Element>  \n  <Element>5</Element>  \n</Root>  \n```  \n  \n## See also\n\n- [Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)\n","nodes":[{"pos":[4,134],"embed":true,"restype":"x-metadata","content":"title: \"Functional Construction (LINQ to XML) (Visual Basic)\"\nms.date: 07/20/2015\nms.assetid: feac4273-39ab-43ae-bab7-4059c807a785","nodes":[{"content":"Functional Construction (LINQ to XML) (Visual Basic)","nodes":[{"pos":[0,52],"content":"Functional Construction (LINQ to XML) (Visual Basic)","nodes":[{"content":"Functional Construction (LINQ to XML) (Visual Basic)","pos":[0,52]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[141,193],"content":"Functional Construction (LINQ to XML) (Visual Basic)","linkify":"Functional Construction (LINQ to XML) (Visual Basic)","nodes":[{"content":"Functional Construction (LINQ to XML) (Visual Basic)","pos":[0,52]}]},{"content":"<ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> provides a powerful way to create XML elements called <bpt id=\"p1\">*</bpt>functional construction<ept id=\"p1\">*</ept>.","pos":[194,328],"source":"[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] provides a powerful way to create XML elements called *functional construction*."},{"content":"Functional construction is the ability to create an XML tree in a single statement.","pos":[329,412]},{"pos":[419,569],"content":"There are several key features of the <ph id=\"ph1\">[!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)]</ph> programming interface that enable functional construction:","source":"There are several key features of the [!INCLUDE[sqltecxlinq](~/includes/sqltecxlinq-md.md)] programming interface that enable functional construction:"},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes various types of arguments for content.","pos":[579,672],"source":"The <xref:System.Xml.Linq.XElement> constructor takes various types of arguments for content."},{"content":"For example, you can pass another <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object, which becomes a child element.","pos":[673,777],"source":" For example, you can pass another <xref:System.Xml.Linq.XElement> object, which becomes a child element."},{"content":"You can pass an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> object, which becomes an attribute of the element.","pos":[778,878],"source":" You can pass an <xref:System.Xml.Linq.XAttribute> object, which becomes an attribute of the element."},{"content":"Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.","pos":[879,996]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> constructor takes a <ph id=\"ph2\">`params`</ph> array of type <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph>, so that you can pass any number of objects to the constructor.","pos":[1006,1169],"source":"The <xref:System.Xml.Linq.XElement> constructor takes a `params` array of type <xref:System.Object>, so that you can pass any number of objects to the constructor."},{"content":"This enables you to create an element that has complex content.","pos":[1170,1233]},{"content":"If an object implements <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, the collection in the object is enumerated, and all items in the collection are added.","pos":[1243,1404],"source":"If an object implements <xref:System.Collections.Generic.IEnumerable%601>, the collection in the object is enumerated, and all items in the collection are added."},{"content":"If the collection contains <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, each item in the collection is added separately.","pos":[1405,1558],"source":" If the collection contains <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> objects, each item in the collection is added separately."},{"content":"This is important because it lets you pass the results of a <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query to the constructor.","pos":[1559,1694],"source":" This is important because it lets you pass the results of a [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] query to the constructor."},{"content":"The following is an example:","pos":[1701,1729]},{"pos":[1736,1952],"content":"These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of <ph id=\"ph1\">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> queries when you create an XML tree:","source":"These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] queries when you create an XML tree:"},{"content":"This example produces the following output:","pos":[2436,2479]},{"pos":[2642,2650],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2654,2769],"content":"<bpt id=\"p1\">[</bpt>Creating XML Trees (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)</ept>","source":"[Creating XML Trees (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/creating-xml-trees.md)"}]}