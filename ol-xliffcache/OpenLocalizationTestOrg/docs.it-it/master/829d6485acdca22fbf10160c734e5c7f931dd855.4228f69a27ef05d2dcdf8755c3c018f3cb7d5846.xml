{"content":"---\ntitle: \"Validating Passwords Complexity (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"String data type [Visual Basic], validation\"\nms.assetid: 5d9a918f-6c1f-41a3-a019-b5c2b8ce0381\n---\n# Walkthrough: Validating That Passwords Are Complex (Visual Basic)\nThis method checks for some strong-password characteristics and updates a string parameter with information about which checks the password fails.  \n  \n Passwords can be used in a secure system to authorize a user. However, the passwords must be difficult for unauthorized users to guess. Attackers can use a *dictionary attack* program, which iterates through all of the words in a dictionary (or multiple dictionaries in different languages) and tests whether any of the words work as a user's password. Weak passwords such as \"Yankees\" or \"Mustang\" can be guessed quickly. Stronger passwords, such as \"?You'L1N3vaFiNdMeyeP@sSWerd!\", are much less likely to be guessed. A password-protected system should ensure that users choose strong passwords.  \n  \n A strong password is complex (containing a mixture of uppercase, lowercase, numeric, and special characters) and is not a word. This example demonstrates how to verify complexity.  \n  \n## Example  \n  \n### Code  \n [!code-vb[VbVbcnRegEx#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbcnRegEx/VB/Class1.vb#1)]  \n  \n## Compiling the Code  \n Call this method by passing the string that contains that password.  \n  \n This example requires:  \n  \n-   Access to the members of the <xref:System.Text.RegularExpressions> namespace. Add an `Imports` statement if you are not fully qualifying member names in your code. For more information, see [Imports Statement (.NET Namespace and Type)](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md).  \n  \n## Security  \n If you're moving the password across a network, you need to use a secure method for transferring data. For more information, see [ASP.NET Web Application Security](https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100)).\n  \n You can improve the accuracy of the `ValidatePassword` function by adding additional complexity checks:  \n  \n-   Compare the password and its substrings against the user's name, user identifier, and an application-defined dictionary. In addition, treat visually similar characters as equivalent when performing the comparisons. For example, treat the letters \"l\" and \"e\" as equivalent to the numerals \"1\" and \"3\".  \n  \n-   If there is only one uppercase character, make sure it is not the password's first character.  \n  \n-   Make sure that the last two characters of the password are letter characters.  \n  \n-   Do not allow passwords in which all the symbols are entered from the keyboard's top row.  \n  \n## See also\n\n- <xref:System.Text.RegularExpressions.Regex>\n- [ASP.NET Web Application Security](https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100))\n","nodes":[{"pos":[4,200],"embed":true,"restype":"x-metadata","content":"title: \"Validating Passwords Complexity (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"String data type [Visual Basic], validation\"\nms.assetid: 5d9a918f-6c1f-41a3-a019-b5c2b8ce0381","nodes":[{"content":"Validating Passwords Complexity (Visual Basic)","nodes":[{"pos":[0,46],"content":"Validating Passwords Complexity (Visual Basic)","nodes":[{"content":"Validating Passwords Complexity (Visual Basic)","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[207,272],"content":"Walkthrough: Validating That Passwords Are Complex (Visual Basic)","linkify":"Walkthrough: Validating That Passwords Are Complex (Visual Basic)","nodes":[{"content":"Walkthrough: Validating That Passwords Are Complex (Visual Basic)","pos":[0,65]}]},{"content":"This method checks for some strong-password characteristics and updates a string parameter with information about which checks the password fails.","pos":[273,419]},{"content":"Passwords can be used in a secure system to authorize a user.","pos":[426,487]},{"content":"However, the passwords must be difficult for unauthorized users to guess.","pos":[488,561]},{"content":"Attackers can use a <bpt id=\"p1\">*</bpt>dictionary attack<ept id=\"p1\">*</ept> program, which iterates through all of the words in a dictionary (or multiple dictionaries in different languages) and tests whether any of the words work as a user's password.","pos":[562,778],"source":" Attackers can use a *dictionary attack* program, which iterates through all of the words in a dictionary (or multiple dictionaries in different languages) and tests whether any of the words work as a user's password."},{"content":"Weak passwords such as \"Yankees\" or \"Mustang\" can be guessed quickly.","pos":[779,848]},{"content":"Stronger passwords, such as \"?You'<ph id=\"ph1\">L1N3vaFiNdMeyeP@sSWerd</ph>!\", are much less likely to be guessed.","pos":[849,944],"source":" Stronger passwords, such as \"?You'L1N3vaFiNdMeyeP@sSWerd!\", are much less likely to be guessed."},{"content":"A password-protected system should ensure that users choose strong passwords.","pos":[945,1022]},{"content":"A strong password is complex (containing a mixture of uppercase, lowercase, numeric, and special characters) and is not a word.","pos":[1029,1156]},{"content":"This example demonstrates how to verify complexity.","pos":[1157,1208]},{"pos":[1217,1224],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1234,1238],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[1356,1374],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"content":"Call this method by passing the string that contains that password.","pos":[1378,1445]},{"content":"This example requires:","pos":[1452,1474]},{"content":"Access to the members of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions&gt;</ph> namespace.","pos":[1484,1561],"source":"Access to the members of the <xref:System.Text.RegularExpressions> namespace."},{"content":"Add an <ph id=\"ph1\">`Imports`</ph> statement if you are not fully qualifying member names in your code.","pos":[1562,1647],"source":" Add an `Imports` statement if you are not fully qualifying member names in your code."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Imports Statement (.NET Namespace and Type)<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept>.","pos":[1648,1820],"source":" For more information, see [Imports Statement (.NET Namespace and Type)](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)."},{"pos":[1829,1837],"content":"Security","linkify":"Security","nodes":[{"content":"Security","pos":[0,8]}]},{"content":"If you're moving the password across a network, you need to use a secure method for transferring data.","pos":[1841,1943]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ASP.NET Web Application Security<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100))</ept>.","pos":[1944,2077],"source":" For more information, see [ASP.NET Web Application Security](https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100))."},{"pos":[2082,2185],"content":"You can improve the accuracy of the <ph id=\"ph1\">`ValidatePassword`</ph> function by adding additional complexity checks:","source":"You can improve the accuracy of the `ValidatePassword` function by adding additional complexity checks:"},{"content":"Compare the password and its substrings against the user's name, user identifier, and an application-defined dictionary.","pos":[2195,2315]},{"content":"In addition, treat visually similar characters as equivalent when performing the comparisons.","pos":[2316,2409]},{"content":"For example, treat the letters \"l\" and \"e\" as equivalent to the numerals \"1\" and \"3\".","pos":[2410,2495]},{"content":"If there is only one uppercase character, make sure it is not the password's first character.","pos":[2505,2598]},{"content":"Make sure that the last two characters of the password are letter characters.","pos":[2608,2685]},{"content":"Do not allow passwords in which all the symbols are entered from the keyboard's top row.","pos":[2695,2783]},{"pos":[2792,2800],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2850,2956],"content":"<bpt id=\"p1\">[</bpt>ASP.NET Web Application Security<ept id=\"p1\">](https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100))</ept>","source":"[ASP.NET Web Application Security](https://docs.microsoft.com/previous-versions/aspnet/330a99hc(v=vs.100))"}]}