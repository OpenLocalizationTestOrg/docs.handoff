{"content":"---\ntitle: \"= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Assign\"\n  - \"vb.=\"\nhelpviewer_keywords: \n  - \"= operator [Visual Basic]\"\n  - \"= assignment statements [Visual Basic]\"\nms.assetid: 2dac2e49-86c8-42f8-80c1-458452fb5e29\n---\n# = Operator (Visual Basic)\nAssigns a value to a variable or property.  \n  \n## Syntax  \n  \n```  \nvariableorproperty = value  \n```  \n  \n## Parts  \n `variableorproperty`  \n Any writable variable or any property.  \n  \n `value`  \n Any literal, constant, or expression.  \n  \n## Remarks  \n The element on the left side of the equal sign (`=`) can be a simple scalar variable, a property, or an element of an array. The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md). The `=` operator assigns the value on its right to the variable or property on its left.  \n  \n> [!NOTE]\n>  The `=` operator is also used as a comparison operator. For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md).  \n  \n## Overloading  \n The `=` operator can be overloaded only as a relational comparison operator, not as an assignment operator. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example demonstrates the assignment operator. The value on the right is assigned to the variable on the left.  \n  \n [!code-vb[VbVbalrOperators#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrOperators/VB/Class1.vb#9)]  \n  \n## See also\n\n- [&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md)\n- [*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)\n- [+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)\n- [-= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)\n- [/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)\n- [\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)\n- [^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)\n- [Statements](../../../visual-basic/programming-guide/language-features/statements.md)\n- [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md)\n- [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)\n- [Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)\n","nodes":[{"pos":[4,247],"embed":true,"restype":"x-metadata","content":"title: \"= Operator (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.Assign\"\n  - \"vb.=\"\nhelpviewer_keywords: \n  - \"= operator [Visual Basic]\"\n  - \"= assignment statements [Visual Basic]\"\nms.assetid: 2dac2e49-86c8-42f8-80c1-458452fb5e29","nodes":[{"content":"= Operator (Visual Basic)","nodes":[{"pos":[0,25],"content":"= Operator (Visual Basic)","nodes":[{"content":"= Operator (Visual Basic)","pos":[0,25]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[254,279],"content":"= Operator (Visual Basic)","linkify":"= Operator (Visual Basic)","nodes":[{"content":"= Operator (Visual Basic)","pos":[0,25]}]},{"content":"Assigns a value to a variable or property.","pos":[280,322]},{"pos":[331,337],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[390,395],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Any writable variable or any property.","pos":[423,461]},{"content":"Any literal, constant, or expression.","pos":[479,516]},{"pos":[525,532],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The element on the left side of the equal sign (<ph id=\"ph1\">`=`</ph>) can be a simple scalar variable, a property, or an element of an array.","pos":[536,660],"source":"The element on the left side of the equal sign (`=`) can be a simple scalar variable, a property, or an element of an array."},{"content":"The variable or property cannot be <bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>.","pos":[661,771],"source":" The variable or property cannot be [ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)."},{"content":"The <ph id=\"ph1\">`=`</ph> operator assigns the value on its right to the variable or property on its left.","pos":[772,860],"source":" The `=` operator assigns the value on its right to the variable or property on its left."},{"pos":[868,1051],"content":"[!NOTE]\n The `=` operator is also used as a comparison operator. For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md).","leadings":["","> "],"nodes":[{"content":"The `=` operator is also used as a comparison operator. For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md).","pos":[9,181],"nodes":[{"content":"The <ph id=\"ph1\">`=`</ph> operator is also used as a comparison operator.","pos":[0,55],"source":"The `=` operator is also used as a comparison operator."},{"content":"For details, see <bpt id=\"p1\">[</bpt>Comparison Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept>.","pos":[56,172],"source":" For details, see [Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md)."}]}]},{"pos":[1060,1071],"content":"Overloading","linkify":"Overloading","nodes":[{"content":"Overloading","pos":[0,11]}]},{"content":"The <ph id=\"ph1\">`=`</ph> operator can be overloaded only as a relational comparison operator, not as an assignment operator.","pos":[1075,1182],"source":"The `=` operator can be overloaded only as a relational comparison operator, not as an assignment operator."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[1183,1324],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."},{"pos":[1333,1340],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the assignment operator.","pos":[1344,1403]},{"content":"The value on the right is assigned to the variable on the left.","pos":[1404,1467]},{"pos":[1598,1606],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1610,1702],"content":"<bpt id=\"p1\">[</bpt>&amp;= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/and-assignment-operator.md)</ept>","source":"[&= Operator](../../../visual-basic/language-reference/operators/and-assignment-operator.md)"},{"pos":[1705,1808],"content":"<bpt id=\"p1\">[</bpt>*= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)</ept>","source":"[*= Operator](../../../visual-basic/language-reference/operators/multiplication-assignment-operator.md)"},{"pos":[1811,1908],"content":"<bpt id=\"p1\">[</bpt>+= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)</ept>","source":"[+= Operator](../../../visual-basic/language-reference/operators/addition-assignment-operator.md)"},{"pos":[1911,2026],"content":"<bpt id=\"p1\">[</bpt>-= Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)</ept>","source":"[-= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/subtraction-assignment-operator.md)"},{"pos":[2029,2156],"content":"<bpt id=\"p1\">[</bpt>/= Operator (Visual Basic)<ept id=\"p1\">](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)</ept>","source":"[/= Operator (Visual Basic)](../../../visual-basic/language-reference/operators/floating-point-division-assignment-operator.md)"},{"pos":[2159,2265],"content":"<bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\\\</ph>= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)</ept>","source":"[\\\\= Operator](../../../visual-basic/language-reference/operators/integer-division-assignment-operator.md)"},{"pos":[2268,2371],"content":"<bpt id=\"p1\">[</bpt>^= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)</ept>","source":"[^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)"},{"pos":[2374,2459],"content":"<bpt id=\"p1\">[</bpt>Statements<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/statements.md)</ept>","source":"[Statements](../../../visual-basic/programming-guide/language-features/statements.md)"},{"pos":[2462,2560],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/comparison-operators.md)</ept>","source":"[Comparison Operators](../../../visual-basic/language-reference/operators/comparison-operators.md)"},{"pos":[2563,2637],"content":"<bpt id=\"p1\">[</bpt>ReadOnly<ept id=\"p1\">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>","source":"[ReadOnly](../../../visual-basic/language-reference/modifiers/readonly.md)"},{"pos":[2640,2755],"content":"<bpt id=\"p1\">[</bpt>Local Type Inference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept>","source":"[Local Type Inference](../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)"}]}