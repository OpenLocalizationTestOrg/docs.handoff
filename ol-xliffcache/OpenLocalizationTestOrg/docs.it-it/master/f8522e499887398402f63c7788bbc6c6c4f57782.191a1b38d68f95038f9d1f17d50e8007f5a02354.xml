{"content":"---\ntitle: \"How to: use a dictionary to store event instances - C# Programming Guide\"\nms.custom: seodec18\nms.date: 03/11/2019\nhelpviewer_keywords: \n  - \"events [C#], storing instances in a Dictionary\"\nms.assetid: 9512c64d-5aaf-40cd-b941-ca2a592f0064\n---\n# How to: use a dictionary to store event instances (C# Programming Guide)\n\nOne use for the `add` and `remove` custom event accessors is to expose many events without allocating a field for each event, but instead using a <xref:System.Collections.Generic.Dictionary%602> instance to store the event instances, as the example below demonstrates. This is only useful if a type has many events, but you expect that most of the events will not be subscribed to.\n\n[!code-csharp[csProgGuideEvents#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideEvents/CS/Events.cs#9)]\n\nThis implementation conforms to the behavior for [adding and removing delegates](~/_csharplang/spec/delegates.md#delegate-invocation) in the C# language specification.\n\nNote that the [lock](../../language-reference/keywords/lock-statement.md) statement is used only to *access* the dictionary with event handlers. Don't invoke an event handler inside the body of the `lock` statement, as it could lead to deadlocks or lock contention.\n\n## See also\n\n- [C# Programming Guide](../../../csharp/programming-guide/index.md)\n- [Events](../../../csharp/programming-guide/events/index.md)\n- [Delegates](../../../csharp/programming-guide/delegates/index.md)\n","nodes":[{"pos":[4,249],"embed":true,"restype":"x-metadata","content":"title: \"How to: use a dictionary to store event instances - C# Programming Guide\"\nms.custom: seodec18\nms.date: 03/11/2019\nhelpviewer_keywords: \n  - \"events [C#], storing instances in a Dictionary\"\nms.assetid: 9512c64d-5aaf-40cd-b941-ca2a592f0064","nodes":[{"content":"How to: use a dictionary to store event instances - C# Programming Guide","nodes":[{"pos":[0,72],"content":"How to: use a dictionary to store event instances - C# Programming Guide","nodes":[{"content":"How to: use a dictionary to store event instances - C# Programming Guide","pos":[0,72]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[256,328],"content":"How to: use a dictionary to store event instances (C# Programming Guide)","linkify":"How to: use a dictionary to store event instances (C# Programming Guide)","nodes":[{"content":"How to: use a dictionary to store event instances (C# Programming Guide)","pos":[0,72]}]},{"content":"One use for the <ph id=\"ph1\">`add`</ph> and <ph id=\"ph2\">`remove`</ph> custom event accessors is to expose many events without allocating a field for each event, but instead using a <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> instance to store the event instances, as the example below demonstrates.","pos":[330,598],"source":"One use for the `add` and `remove` custom event accessors is to expose many events without allocating a field for each event, but instead using a <xref:System.Collections.Generic.Dictionary%602> instance to store the event instances, as the example below demonstrates."},{"content":"This is only useful if a type has many events, but you expect that most of the events will not be subscribed to.","pos":[599,711]},{"pos":[831,998],"content":"This implementation conforms to the behavior for <bpt id=\"p1\">[</bpt>adding and removing delegates<ept id=\"p1\">](~/_csharplang/spec/delegates.md#delegate-invocation)</ept> in the C# language specification.","source":"This implementation conforms to the behavior for [adding and removing delegates](~/_csharplang/spec/delegates.md#delegate-invocation) in the C# language specification."},{"content":"Note that the <bpt id=\"p1\">[</bpt>lock<ept id=\"p1\">](../../language-reference/keywords/lock-statement.md)</ept> statement is used only to <bpt id=\"p2\">*</bpt>access<ept id=\"p2\">*</ept> the dictionary with event handlers.","pos":[1000,1144],"source":"Note that the [lock](../../language-reference/keywords/lock-statement.md) statement is used only to *access* the dictionary with event handlers."},{"content":"Don't invoke an event handler inside the body of the <ph id=\"ph1\">`lock`</ph> statement, as it could lead to deadlocks or lock contention.","pos":[1145,1265],"source":" Don't invoke an event handler inside the body of the `lock` statement, as it could lead to deadlocks or lock contention."},{"pos":[1270,1278],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1282,1348],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../../csharp/programming-guide/index.md)"},{"pos":[1351,1410],"content":"<bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](../../../csharp/programming-guide/events/index.md)</ept>","source":"[Events](../../../csharp/programming-guide/events/index.md)"},{"pos":[1413,1478],"content":"<bpt id=\"p1\">[</bpt>Delegates<ept id=\"p1\">](../../../csharp/programming-guide/delegates/index.md)</ept>","source":"[Delegates](../../../csharp/programming-guide/delegates/index.md)"}]}