{"content":"---\ntitle: \"How to: Send Data Using the WebRequest Class | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\n  - \"C++\"\n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"WebRequest class, sending data to a host\"\n  - \"Sending data to a host, using WebRequest class\"\nms.assetid: 66686878-38ac-4aa6-bf42-ffb568ffc459\ncaps.latest.revision: 12\nauthor: \"mcleblanc\"\nms.author: \"markl\"\nmanager: \"markl\"\n---\n# How to: Send Data Using the WebRequest Class\nThe following procedure describes the steps used to send data to a server. This procedure is commonly used to post data to a Web page.  \n  \n### To send data to a host server  \n  \n1.  Create a <xref:System.Net.WebRequest> instance by calling <xref:System.Net.WebRequest.Create%2A> with the URI of the resource that accepts data, for example, a script or ASP.NET page.  \n  \n    ```csharp  \n    WebRequest request = WebRequest.Create(\"http://www.contoso.com/\");  \n    ```  \n  \n    ```vb  \n    Dim request as WebRequest = WebRequest.Create(\"http://www.contoso.com/\")  \n  \n    ```  \n  \n    > [!NOTE]\n    >  The .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\". To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**. For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) .  \n  \n2.  Set any property values that you need in the **WebRequest**. For example, to enable authentication, set the **Credentials** property to an instance of the <xref:System.Net.NetworkCredential> class.  \n  \n    ```csharp  \n    request.Credentials = CredentialCache.DefaultCredentials;  \n    ```  \n  \n    ```vb  \n    request.Credentials = CredentialCache.DefaultCredentials  \n  \n    ```  \n  \n     In most cases, the **WebRequest** instance itself is sufficient to send data. However, if you need to set protocol-specific properties, you must cast the **WebRequest** to the protocol-specific type. For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebRequest>, cast the **WebRequest** to an **HttpWebRequest** reference. The following code example shows how to set the HTTP-specific <xref:System.Net.HttpWebRequest.UserAgent%2A> property.  \n  \n    ```csharp  \n    ((HttpWebRequest)request).UserAgent = \".NET Framework Example Client\";  \n    ```  \n  \n    ```vb  \n    Ctype(request,HttpWebRequest).UserAgent = \".NET Framework Example Client\"  \n    ```  \n  \n3.  Specify a protocol method that permits data to be sent with a request, such as the HTTP **POST** method.  \n  \n    ```csharp  \n    request.Method = \"POST\";  \n    ```  \n  \n    ```vb  \n    request.Method = \"POST\"  \n    ```  \n  \n4.  Set the **ContentLength** property.  \n  \n    ```csharp  \n    request.ContentLength = byteArray.Length;  \n    ```  \n  \n    ```vb  \n    request.ContentLength = byteArray.Length  \n    ```  \n  \n5.  Set the **ContentType** property to an appropriate value.  \n  \n    ```csharp  \n    request.ContentType = \"application/x-www-form-urlencoded\";  \n    ```  \n  \n    ```vb  \n    request.ContentType = \"application/x-www-form-urlencoded\"  \n    ```  \n  \n6.  Get the stream that holds request data by calling the <xref:System.Net.WebRequest.GetRequestStream%2A> method.  \n  \n    ```csharp  \n    Stream dataStream = request.GetRequestStream ();  \n    ```  \n  \n    ```vb  \n    Stream dataStream = request.GetRequestStream ()  \n    ```  \n  \n7.  Write the data to the <xref:System.IO.Stream> object returned by this method.  \n  \n    ```csharp  \n    dataStream.Write (byteArray, 0, byteArray.Length);  \n    ```  \n  \n    ```vb  \n    dataStream.Write (byteArray, 0, byteArray.Length)  \n    ```  \n  \n8.  Close the request stream by calling the **Stream.Close** method.  \n  \n    ```csharp  \n    dataStream.Close ();  \n    ```  \n  \n    ```vb  \n    dataStream.Close ()  \n    ```  \n  \n9. Send the request to the server by calling <xref:System.Net.WebRequest.GetResponse%2A>. This method returns an object containing the server's response. The returned <xref:System.Net.WebResponse> object's type is determined by the scheme of the request's URI.  \n  \n    ```csharp  \n    WebResponse response = request.GetResponse();  \n    ```  \n  \n    ```vb  \n    Dim response As WebResponse = request.GetResponse()  \n  \n    ```  \n  \n    > [!NOTE]\n    >  After you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method. Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method. If you do not close the response or the stream, your application can run out of connections to the server and become unable to process additional requests.  \n  \n10. You can access the properties of the **WebResponse** or cast the **WebResponse** to a protocol-specific instance to read protocol-specific properties. For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebResponse>, cast the **WebResponse** to an **HttpWebResponse** reference.  \n  \n    ```csharp  \n    Console.WriteLine (((HttpWebResponse)response).StatusDescription);  \n    ```  \n  \n    ```vb  \n    Console.WriteLine(CType(response, HttpWebResponse).StatusDescription)  \n    ```  \n  \n11. To get the stream containing response data sent by the server, call the <xref:System.Net.WebResponse.GetResponseStream%2A> method of the **WebResponse**.  \n  \n    ```csharp  \n    Stream data = response.GetResponseStream;  \n    ```  \n  \n    ```vb  \n    Dim data As Stream = response.GetResponseStream  \n    ```  \n  \n12. After reading the data from the response, you must either close the response stream using the **Stream.Close** method or close the response using the **WebResponse.Close** method. It is not necessary to call the **Close** method on both the response stream and the **WebResponse**, but doing so is not harmful.  \n  \n    ```csharp  \n    response.Close();  \n    ```  \n  \n    ```vb  \n    response.Close()  \n  \n    ```  \n  \n## Example  \n  \n```csharp  \nusing System;  \nusing System.IO;  \nusing System.Net;  \nusing System.Text;  \n  \nnamespace Examples.System.Net  \n{  \n    public class WebRequestPostExample  \n    {  \n        public static void Main ()  \n        {  \n            // Create a request using a URL that can receive a post.   \n            WebRequest request = WebRequest.Create (\"http://www.contoso.com/PostAccepter.aspx \");  \n            // Set the Method property of the request to POST.  \n            request.Method = \"POST\";  \n            // Create POST data and convert it to a byte array.  \n            string postData = \"This is a test that posts this string to a Web server.\";  \n            byte[] byteArray = Encoding.UTF8.GetBytes (postData);  \n            // Set the ContentType property of the WebRequest.  \n            request.ContentType = \"application/x-www-form-urlencoded\";  \n            // Set the ContentLength property of the WebRequest.  \n            request.ContentLength = byteArray.Length;  \n            // Get the request stream.  \n            Stream dataStream = request.GetRequestStream ();  \n            // Write the data to the request stream.  \n            dataStream.Write (byteArray, 0, byteArray.Length);  \n            // Close the Stream object.  \n            dataStream.Close ();  \n            // Get the response.  \n            WebResponse response = request.GetResponse ();  \n            // Display the status.  \n            Console.WriteLine (((HttpWebResponse)response).StatusDescription);  \n            // Get the stream containing content returned by the server.  \n            dataStream = response.GetResponseStream ();  \n            // Open the stream using a StreamReader for easy access.  \n            StreamReader reader = new StreamReader (dataStream);  \n            // Read the content.  \n            string responseFromServer = reader.ReadToEnd ();  \n            // Display the content.  \n            Console.WriteLine (responseFromServer);  \n            // Clean up the streams.  \n            reader.Close ();  \n            dataStream.Close ();  \n            response.Close ();  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System  \nImports System.IO  \nImports System.Net  \nImports System.Text  \nNamespace Examples.System.Net  \n    Public Class WebRequestPostExample  \n  \n        Public Shared Sub Main()  \n            ' Create a request using a URL that can receive a post.   \n            Dim request As WebRequest = WebRequest.Create(\"http://www.contoso.com/PostAccepter.aspx \")  \n            ' Set the Method property of the request to POST.  \n            request.Method = \"POST\"  \n            ' Create POST data and convert it to a byte array.  \n            Dim postData As String = \"This is a test that posts this string to a Web server.\"  \n            Dim byteArray As Byte() = Encoding.UTF8.GetBytes(postData)  \n            ' Set the ContentType property of the WebRequest.  \n            request.ContentType = \"application/x-www-form-urlencoded\"  \n            ' Set the ContentLength property of the WebRequest.  \n            request.ContentLength = byteArray.Length  \n            ' Get the request stream.  \n            Dim dataStream As Stream = request.GetRequestStream()  \n            ' Write the data to the request stream.  \n            dataStream.Write(byteArray, 0, byteArray.Length)  \n            ' Close the Stream object.  \n            dataStream.Close()  \n            ' Get the response.  \n            Dim response As WebResponse = request.GetResponse()  \n            ' Display the status.  \n            Console.WriteLine(CType(response, HttpWebResponse).StatusDescription)  \n            ' Get the stream containing content returned by the server.  \n            dataStream = response.GetResponseStream()  \n            ' Open the stream using a StreamReader for easy access.  \n            Dim reader As New StreamReader(dataStream)  \n            ' Read the content.  \n            Dim responseFromServer As String = reader.ReadToEnd()  \n            ' Display the content.  \n            Console.WriteLine(responseFromServer)  \n            ' Clean up the streams.  \n            reader.Close()  \n            dataStream.Close()  \n            response.Close()  \n        End Sub  \n    End Class  \nEnd Namespace  \n  \n```  \n  \n## See Also  \n [Creating Internet Requests](../../../docs/framework/network-programming/creating-internet-requests.md)   \n [Using Streams on the Network](../../../docs/framework/network-programming/using-streams-on-the-network.md)   \n [Accessing the Internet Through a Proxy](../../../docs/framework/network-programming/accessing-the-internet-through-a-proxy.md)   \n [Requesting Data](../../../docs/framework/network-programming/requesting-data.md)   \n [How to: Request Data Using the WebRequest Class](../../../docs/framework/network-programming/how-to-request-data-using-the-webrequest-class.md)","nodes":[{"pos":[12,73],"content":"How to: Send Data Using the WebRequest Class | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Send Data Using the WebRequest Class | Microsoft Docs","pos":[0,61]}]},{"pos":[519,563],"content":"How to: Send Data Using the WebRequest Class","linkify":"How to: Send Data Using the WebRequest Class","nodes":[{"content":"How to: Send Data Using the WebRequest Class","pos":[0,44]}]},{"content":"The following procedure describes the steps used to send data to a server.","pos":[564,638]},{"content":"This procedure is commonly used to post data to a Web page.","pos":[639,698]},{"pos":[708,737],"content":"To send data to a host server","linkify":"To send data to a host server","nodes":[{"content":"To send data to a host server","pos":[0,29]}]},{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.WebRequest&gt;</ph> instance by calling <ph id=\"ph2\">&lt;xref:System.Net.WebRequest.Create%2A&gt;</ph> with the URI of the resource that accepts data, for example, a script or ASP.NET page.","pos":[747,930],"source":"Create a <xref:System.Net.WebRequest> instance by calling <xref:System.Net.WebRequest.Create%2A> with the URI of the resource that accepts data, for example, a script or ASP.NET page."},{"pos":[1151,1616],"content":"[!NOTE]\nThe .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\". To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**. For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) .","leadings":["","    >  "],"nodes":[{"content":"The .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\". To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**. For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) .","pos":[8,458],"nodes":[{"content":"The .NET Framework provides protocol-specific classes derived from <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept> for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\".","pos":[0,167],"source":"The .NET Framework provides protocol-specific classes derived from **WebRequest** and **WebResponse** for URIs that begin with \"http:\", \"https:'', \"ftp:\", and \"file:\"."},{"content":"To access resources using other protocols, you must implement protocol-specific classes that derive from <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept>.","pos":[168,308],"source":" To access resources using other protocols, you must implement protocol-specific classes that derive from **WebRequest** and **WebResponse**."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Programming Pluggable Protocols<ept id=\"p1\">](../../../docs/framework/network-programming/programming-pluggable-protocols.md)</ept> .","pos":[309,450],"source":" For more information, see [Programming Pluggable Protocols](../../../docs/framework/network-programming/programming-pluggable-protocols.md) ."}]}]},{"content":"Set any property values that you need in the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept>.","pos":[1626,1686],"source":"Set any property values that you need in the **WebRequest**."},{"content":"For example, to enable authentication, set the <bpt id=\"p1\">**</bpt>Credentials<ept id=\"p1\">**</ept> property to an instance of the <ph id=\"ph1\">&lt;xref:System.Net.NetworkCredential&gt;</ph> class.","pos":[1687,1823],"source":" For example, to enable authentication, set the **Credentials** property to an instance of the <xref:System.Net.NetworkCredential> class."},{"content":"In most cases, the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> instance itself is sufficient to send data.","pos":[2018,2095],"source":"In most cases, the **WebRequest** instance itself is sufficient to send data."},{"content":"However, if you need to set protocol-specific properties, you must cast the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> to the protocol-specific type.","pos":[2096,2217],"source":" However, if you need to set protocol-specific properties, you must cast the **WebRequest** to the protocol-specific type."},{"content":"For example, to access the HTTP-specific properties of <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph>, cast the <bpt id=\"p1\">**</bpt>WebRequest<ept id=\"p1\">**</ept> to an <bpt id=\"p2\">**</bpt>HttpWebRequest<ept id=\"p2\">**</ept> reference.","pos":[2218,2366],"source":" For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebRequest>, cast the **WebRequest** to an **HttpWebRequest** reference."},{"content":"The following code example shows how to set the HTTP-specific <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.UserAgent%2A&gt;</ph> property.","pos":[2367,2484],"source":" The following code example shows how to set the HTTP-specific <xref:System.Net.HttpWebRequest.UserAgent%2A> property."},{"pos":[2705,2809],"content":"Specify a protocol method that permits data to be sent with a request, such as the HTTP <bpt id=\"p1\">**</bpt>POST<ept id=\"p1\">**</ept> method.","source":"Specify a protocol method that permits data to be sent with a request, such as the HTTP **POST** method."},{"pos":[2934,2969],"content":"Set the <bpt id=\"p1\">**</bpt>ContentLength<ept id=\"p1\">**</ept> property.","source":"Set the **ContentLength** property."},{"pos":[3128,3185],"content":"Set the <bpt id=\"p1\">**</bpt>ContentType<ept id=\"p1\">**</ept> property to an appropriate value.","source":"Set the **ContentType** property to an appropriate value."},{"content":"Get the stream that holds request data by calling the <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.GetRequestStream%2A&gt;</ph> method.","pos":[3378,3488],"source":"Get the stream that holds request data by calling the <xref:System.Net.WebRequest.GetRequestStream%2A> method."},{"content":"Write the data to the <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object returned by this method.","pos":[3661,3738],"source":"Write the data to the <xref:System.IO.Stream> object returned by this method."},{"pos":[3915,3979],"content":"Close the request stream by calling the <bpt id=\"p1\">**</bpt>Stream.Close<ept id=\"p1\">**</ept> method.","source":"Close the request stream by calling the **Stream.Close** method."},{"content":"Send the request to the server by calling <ph id=\"ph1\">&lt;xref:System.Net.WebRequest.GetResponse%2A&gt;</ph>.","pos":[4095,4181],"source":"Send the request to the server by calling <xref:System.Net.WebRequest.GetResponse%2A>."},{"content":"This method returns an object containing the server's response.","pos":[4182,4245]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Net.WebResponse&gt;</ph> object's type is determined by the scheme of the request's URI.","pos":[4246,4352],"source":" The returned <xref:System.Net.WebResponse> object's type is determined by the scheme of the request's URI."},{"pos":[4531,5035],"content":"[!NOTE]\nAfter you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method. Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method. If you do not close the response or the stream, your application can run out of connections to the server and become unable to process additional requests.","leadings":["","    >  "],"nodes":[{"content":"After you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method. Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method. If you do not close the response or the stream, your application can run out of connections to the server and become unable to process additional requests.","pos":[8,497],"nodes":[{"content":"After you are finished with a <ph id=\"ph1\">&lt;xref:System.Net.WebResponse&gt;</ph> object, you must close it by calling the <ph id=\"ph2\">&lt;xref:System.Net.WebResponse.Close%2A&gt;</ph> method.","pos":[0,147],"source":"After you are finished with a <xref:System.Net.WebResponse> object, you must close it by calling the <xref:System.Net.WebResponse.Close%2A> method."},{"content":"Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A?displayProperty=fullName&gt;</ph> method.","pos":[148,333],"source":" Alternatively, if you have gotten the response stream from the response object, you can close the stream by calling the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method."},{"content":"If you do not close the response or the stream, your application can run out of connections to the server and become unable to process additional requests.","pos":[334,489]}]}]},{"content":"You can access the properties of the <bpt id=\"p1\">**</bpt>WebResponse<ept id=\"p1\">**</ept> or cast the <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept> to a protocol-specific instance to read protocol-specific properties.","pos":[5045,5195],"source":"You can access the properties of the **WebResponse** or cast the **WebResponse** to a protocol-specific instance to read protocol-specific properties."},{"content":"For example, to access the HTTP-specific properties of <ph id=\"ph1\">&lt;xref:System.Net.HttpWebResponse&gt;</ph>, cast the <bpt id=\"p1\">**</bpt>WebResponse<ept id=\"p1\">**</ept> to an <bpt id=\"p2\">**</bpt>HttpWebResponse<ept id=\"p2\">**</ept> reference.","pos":[5196,5347],"source":" For example, to access the HTTP-specific properties of <xref:System.Net.HttpWebResponse>, cast the **WebResponse** to an **HttpWebResponse** reference."},{"pos":[5560,5713],"content":"To get the stream containing response data sent by the server, call the <ph id=\"ph1\">&lt;xref:System.Net.WebResponse.GetResponseStream%2A&gt;</ph> method of the <bpt id=\"p1\">**</bpt>WebResponse<ept id=\"p1\">**</ept>.","source":"To get the stream containing response data sent by the server, call the <xref:System.Net.WebResponse.GetResponseStream%2A> method of the **WebResponse**."},{"content":"After reading the data from the response, you must either close the response stream using the <bpt id=\"p1\">**</bpt>Stream.Close<ept id=\"p1\">**</ept> method or close the response using the <bpt id=\"p2\">**</bpt>WebResponse.Close<ept id=\"p2\">**</ept> method.","pos":[5879,6058],"source":"After reading the data from the response, you must either close the response stream using the **Stream.Close** method or close the response using the **WebResponse.Close** method."},{"content":"It is not necessary to call the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> method on both the response stream and the <bpt id=\"p2\">**</bpt>WebResponse<ept id=\"p2\">**</ept>, but doing so is not harmful.","pos":[6059,6189],"source":" It is not necessary to call the **Close** method on both the response stream and the **WebResponse**, but doing so is not harmful."},{"pos":[6302,6309],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[10579,10587],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Creating Internet Requests<ept id=\"p1\">](../../../docs/framework/network-programming/creating-internet-requests.md)</ept><ph id=\"ph1\"> </ph>","pos":[10591,10695],"source":"[Creating Internet Requests](../../../docs/framework/network-programming/creating-internet-requests.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Using Streams on the Network<ept id=\"p1\">](../../../docs/framework/network-programming/using-streams-on-the-network.md)</ept><ph id=\"ph1\"> </ph>","pos":[10698,10807],"source":" [Using Streams on the Network](../../../docs/framework/network-programming/using-streams-on-the-network.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Accessing the Internet Through a Proxy<ept id=\"p1\">](../../../docs/framework/network-programming/accessing-the-internet-through-a-proxy.md)</ept><ph id=\"ph1\"> </ph>","pos":[10810,10939],"source":" [Accessing the Internet Through a Proxy](../../../docs/framework/network-programming/accessing-the-internet-through-a-proxy.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Requesting Data<ept id=\"p1\">](../../../docs/framework/network-programming/requesting-data.md)</ept><ph id=\"ph1\"> </ph>","pos":[10942,11025],"source":" [Requesting Data](../../../docs/framework/network-programming/requesting-data.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Request Data Using the WebRequest Class<ept id=\"p1\">](../../../docs/framework/network-programming/how-to-request-data-using-the-webrequest-class.md)</ept>","pos":[11028,11173],"source":" [How to: Request Data Using the WebRequest Class](../../../docs/framework/network-programming/how-to-request-data-using-the-webrequest-class.md)"}]}