<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="method-based-query-syntax-examples-set-operators.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48aa6044f39be93f144b6c4af5137b131dda0b30</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\method-based-query-syntax-examples-set-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12077f755262536b5332266bac57d1ad99c6b255</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09309708fa89d959f7a31e61d4f6685f58c68f42</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Method-Based Query Syntax Examples: Set Operators (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Method-Based Query Syntax Examples: Set Operators (LINQ to DataSet)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The examples in this topic demonstrate how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> operators to perform value-based comparison operations on sets of data rows.<bpt id="p1">[</bpt>Loading Data Into a DataSet<ept id="p1">](../../../../docs/framework/data/adonet/loading-data-into-a-dataset.md)</ept> See <bpt id="p2">[</bpt>Comparing DataRows<ept id="p2">](../../../../docs/framework/data/adonet/comparing-datarows-linq-to-dataset.md)</ept> for more information on <ph id="ph5">&lt;xref:System.Data.DataRowComparer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FillDataSet`</ph> method used in these examples is specified in <bpt id="p1">[</bpt>Loading Data Into a DataSet<ept id="p1">](../../../../docs/framework/data/adonet/loading-data-into-a-dataset.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The examples in this topic use the Contact, Address, Product, SalesOrderHeader, and SalesOrderDetail tables in the AdventureWorks sample database.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The examples in this topic use the following <ph id="ph1">`using`</ph><ph id="ph2">/</ph><ph id="ph3">`Imports`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create a LINQ to DataSet Project In Visual Studio<ept id="p1">](../../../../docs/framework/data/adonet/how-to-create-a-linq-to-dataset-project-in-vs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Distinct</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Distinct%2A&gt;</ph> method to remove duplicate elements in a sequence.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Except</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Except%2A&gt;</ph> method to return contacts that appear in the first table but not in the second.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Intersect</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Intersect%2A&gt;</ph> method to return contacts that appear in both tables.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Union</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Union%2A&gt;</ph> method to return unique contacts from either of the two tables.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loading Data Into a DataSet<ept id="p1">](../../../../docs/framework/data/adonet/loading-data-into-a-dataset.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to DataSet Examples<ept id="p1">](../../../../docs/framework/data/adonet/linq-to-dataset-examples.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Query Operators Overview (C#)<ept id="p1">](../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Query Operators Overview (Visual Basic)<ept id="p1">](../../../visual-basic/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>