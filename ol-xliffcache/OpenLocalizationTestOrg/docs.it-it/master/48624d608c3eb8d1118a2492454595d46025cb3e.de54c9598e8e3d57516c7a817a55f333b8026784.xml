{"content":"---\ntitle: \"Basic LINQ Query Operations (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"orderby clause [LINQ in C#]\"\n  - \"ordering data [LINQ in C#]\"\n  - \"selecting data [LINQ in C#]\"\n  - \"queries [LINQ in C#], basic operations\"\n  - \"grouping data [LINQ in C#]\"\n  - \"data sources [LINQ in C#]\"\n  - \"sorting data [LINQ in C#]\"\n  - \"projections [LINQ in C#]\"\n  - \"filtering data [LINQ in C#]\"\n  - \"joining data [LINQ in C#]\"\n  - \"select clause [LINQ in C#]\"\n  - \"LINQ [C#], basic query operations\"\n  - \"join clause [LINQ in C#]\"\n  - \"group clause [LINQ in C#]\"\nms.assetid: a7ea3421-1cf4-4df7-832a-aa22fe6379e9\ncaps.latest.revision: 39\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Basic LINQ Query Operations (C#)\nThis topic gives a brief introduction to [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions and some of the typical kinds of operations that you perform in a query. More detailed information is in the following topics:  \n  \n [LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md)  \n  \n [Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)  \n  \n [Walkthrough: Writing Queries in C#](../../../../csharp/programming-guide/concepts/linq/walkthrough-writing-queries-linq.md)  \n  \n> [!NOTE]\n>  If you already are familiar with a query language such as SQL or XQuery, you can skip most of this topic. Read about the \"`from` clause\" in the next section to learn about the order of clauses in [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions.  \n  \n## Obtaining a Data Source  \n In a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query, the first step is to specify the data source. In C# as in most programming languages a variable must be declared before it can be used. In a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query, the `from` clause comes first in order to introduce the data source (`customers`) and the *range variable* (`cust`).  \n  \n [!code-cs[csLINQGettingStarted#23](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_1.cs)]  \n  \n The range variable is like the iteration variable in a `foreach` loop except that no actual iteration occurs in a query expression. When the query is executed, the range variable will serve as a reference to each successive element in `customers`. Because the compiler can infer the type of `cust`, you do not have to specify it explicitly. Additional range variables can be introduced by a `let` clause. For more information, see [let clause](../../../../csharp/language-reference/keywords/let-clause.md).  \n  \n> [!NOTE]\n>  For non-generic data sources such as <xref:System.Collections.ArrayList>, the range variable must be explicitly typed. For more information, see [How to: Query an ArrayList with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md) and [from clause](../../../../csharp/language-reference/keywords/from-clause.md).  \n  \n## Filtering  \n Probably the most common query operation is to apply a filter in the form of a Boolean expression. The filter causes the query to return only those elements for which the expression is true. The result is produced by using the `where` clause. The filter in effect specifies which elements to exclude from the source sequence. In the following example, only those `customers` who have an address in London are returned.  \n  \n [!code-cs[csLINQGettingStarted#24](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_2.cs)]  \n  \n You can use the familiar C# logical `AND` and `OR` operators to apply as many filter expressions as necessary in the `where` clause. For example, to return only customers from \"London\" `AND` whose name is \"Devon\" you would write the following code:  \n  \n [!code-cs[csLINQGettingStarted#25](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_3.cs)]  \n  \n To return customers from London or Paris, you would write the following code:  \n  \n [!code-cs[csLINQGettingStarted#26](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_4.cs)]  \n  \n For more information, see [where clause](../../../../csharp/language-reference/keywords/where-clause.md).  \n  \n## Ordering  \n Often it is convenient to sort the returned data. The `orderby` clause will cause the elements in the returned sequence to be sorted according to the default comparer for the type being sorted. For example, the following query can be extended to sort the results based on the `Name` property. Because `Name` is a string, the default comparer performs an alphabetical sort from A to Z.  \n  \n [!code-cs[csLINQGettingStarted#27](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_5.cs)]  \n  \n To order the results in reverse order, from Z to A, use the `orderbyâ€¦descending` clause.  \n  \n For more information, see [orderby clause](../../../../csharp/language-reference/keywords/orderby-clause.md).  \n  \n## Grouping  \n The `group` clause enables you to group your results based on a key that you specify. For example you could specify that the results should be grouped by the `City` so that all customers from London or Paris are in individual groups. In this case, `cust.City` is the key.  \n  \n [!code-cs[csLINQGettingStarted#28](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_6.cs)]  \n  \n When you end a query with a `group` clause, your results take the form of a list of lists. Each element in the list is an object that has a `Key` member and a list of elements that are grouped under that key. When you iterate over a query that produces a sequence of groups, you must use a nested `foreach` loop. The outer loop iterates over each group, and the inner loop iterates over each group's members.  \n  \n If you must refer to the results of a group operation, you can use the `into` keyword to create an identifier that can be queried further. The following query returns only those groups that contain more than two customers:  \n  \n [!code-cs[csLINQGettingStarted#29](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_7.cs)]  \n  \n For more information, see [group clause](../../../../csharp/language-reference/keywords/group-clause.md).  \n  \n## Joining  \n Join operations create associations between sequences that are not explicitly modeled in the data sources. For example you can perform a join to find all the customers and distributors who have the same location. In [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] the `join` clause always works against object collections instead of database tables directly.  \n  \n [!code-cs[csLINQGettingStarted#36](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_8.cs)]  \n  \n In [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] you do not have to use `join` as often as you do in SQL because foreign keys in [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] are represented in the object model as properties that hold a collection of items. For example, a `Customer` object contains a collection of `Order` objects. Rather than performing a join, you access the orders by using dot notation:  \n  \n```  \nfrom order in Customer.Orders...  \n```  \n  \n For more information, see [join clause](../../../../csharp/language-reference/keywords/join-clause.md).  \n  \n## Selecting (Projections)  \n The `select` clause produces the results of the query and specifies the \"shape\" or type of each returned element. For example, you can specify whether your results will consist of complete `Customer` objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When the `select` clause produces something other than a copy of the source element, the operation is called a *projection*. The use of projections to transform data is a powerful capability of [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions. For more information, see [Data Transformations with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/data-transformations-with-linq.md) and [select clause](../../../../csharp/language-reference/keywords/select-clause.md).  \n  \n## See Also  \n [Getting Started with LINQ in C#](../../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)   \n [LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md)   \n [Walkthrough: Writing Queries in C#](../../../../csharp/programming-guide/concepts/linq/walkthrough-writing-queries-linq.md)   \n [Query Keywords (LINQ)](../../../../csharp/language-reference/keywords/query-keywords.md)   \n [Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)","nodes":[{"pos":[12,61],"content":"Basic LINQ Query Operations (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Basic LINQ Query Operations (C#) | Microsoft Docs","pos":[0,49]}]},{"pos":[1053,1085],"content":"Basic LINQ Query Operations (C#)","linkify":"Basic LINQ Query Operations (C#)","nodes":[{"content":"Basic LINQ Query Operations (C#)","pos":[0,32]}]},{"content":"This topic gives a brief introduction to <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query expressions and some of the typical kinds of operations that you perform in a query.","pos":[1086,1284],"source":"This topic gives a brief introduction to [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions and some of the typical kinds of operations that you perform in a query."},{"content":"More detailed information is in the following topics:","pos":[1285,1338]},{"pos":[1345,1439],"content":"<bpt id=\"p1\">[</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/index.md)</ept>","source":"[LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md)"},{"pos":[1446,1575],"content":"<bpt id=\"p1\">[</bpt>Standard Query Operators Overview (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>","source":"[Standard Query Operators Overview (C#)](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)"},{"pos":[1582,1706],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Writing Queries in C#<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/walkthrough-writing-queries-linq.md)</ept>","source":"[Walkthrough: Writing Queries in C#](../../../../csharp/programming-guide/concepts/linq/walkthrough-writing-queries-linq.md)"},{"pos":[1714,2006],"content":"[!NOTE]\n If you already are familiar with a query language such as SQL or XQuery, you can skip most of this topic. Read about the \"`from` clause\" in the next section to learn about the order of clauses in [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions.","leadings":["","> "],"nodes":[{"content":" If you already are familiar with a query language such as SQL or XQuery, you can skip most of this topic. Read about the \"`from` clause\" in the next section to learn about the order of clauses in [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions.","pos":[8,290],"nodes":[{"content":"If you already are familiar with a query language such as SQL or XQuery, you can skip most of this topic.","pos":[1,106]},{"content":"Read about the \"<ph id=\"ph1\">`from`</ph> clause\" in the next section to learn about the order of clauses in <ph id=\"ph2\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query expressions.","pos":[107,282],"source":" Read about the \"`from` clause\" in the next section to learn about the order of clauses in [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions."}]}]},{"pos":[2015,2038],"content":"Obtaining a Data Source","linkify":"Obtaining a Data Source","nodes":[{"content":"Obtaining a Data Source","pos":[0,23]}]},{"content":"In a <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query, the first step is to specify the data source.","pos":[2042,2166],"source":"In a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query, the first step is to specify the data source."},{"content":"In C# as in most programming languages a variable must be declared before it can be used.","pos":[2167,2256]},{"content":"In a <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query, the <ph id=\"ph2\">`from`</ph> clause comes first in order to introduce the data source (<ph id=\"ph3\">`customers`</ph>) and the <bpt id=\"p1\">*</bpt>range variable<ept id=\"p1\">*</ept> (<ph id=\"ph4\">`cust`</ph>).","pos":[2257,2452],"source":" In a [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query, the `from` clause comes first in order to introduce the data source (`customers`) and the *range variable* (`cust`)."},{"pos":[2459,2598],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#23<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#23](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_1.cs)]"},{"content":"The range variable is like the iteration variable in a <ph id=\"ph1\">`foreach`</ph> loop except that no actual iteration occurs in a query expression.","pos":[2605,2736],"source":"The range variable is like the iteration variable in a `foreach` loop except that no actual iteration occurs in a query expression."},{"content":"When the query is executed, the range variable will serve as a reference to each successive element in <ph id=\"ph1\">`customers`</ph>.","pos":[2737,2852],"source":" When the query is executed, the range variable will serve as a reference to each successive element in `customers`."},{"content":"Because the compiler can infer the type of <ph id=\"ph1\">`cust`</ph>, you do not have to specify it explicitly.","pos":[2853,2945],"source":" Because the compiler can infer the type of `cust`, you do not have to specify it explicitly."},{"content":"Additional range variables can be introduced by a <ph id=\"ph1\">`let`</ph> clause.","pos":[2946,3009],"source":" Additional range variables can be introduced by a `let` clause."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>let clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/let-clause.md)</ept>.","pos":[3010,3111],"source":" For more information, see [let clause](../../../../csharp/language-reference/keywords/let-clause.md)."},{"pos":[3119,3491],"content":"[!NOTE]\n For non-generic data sources such as <xref:System.Collections.ArrayList>, the range variable must be explicitly typed. For more information, see [How to: Query an ArrayList with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md) and [from clause](../../../../csharp/language-reference/keywords/from-clause.md).","leadings":["","> "],"nodes":[{"content":" For non-generic data sources such as <xref:System.Collections.ArrayList>, the range variable must be explicitly typed. For more information, see [How to: Query an ArrayList with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md) and [from clause](../../../../csharp/language-reference/keywords/from-clause.md).","pos":[8,370],"nodes":[{"content":"For non-generic data sources such as <ph id=\"ph1\">&lt;xref:System.Collections.ArrayList&gt;</ph>, the range variable must be explicitly typed.","pos":[1,119],"source":" For non-generic data sources such as <xref:System.Collections.ArrayList>, the range variable must be explicitly typed."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Query an ArrayList with LINQ (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md)</ept> and <bpt id=\"p2\">[</bpt>from clause<ept id=\"p2\">](../../../../csharp/language-reference/keywords/from-clause.md)</ept>.","pos":[120,362],"source":" For more information, see [How to: Query an ArrayList with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq.md) and [from clause](../../../../csharp/language-reference/keywords/from-clause.md)."}]}]},{"pos":[3500,3509],"content":"Filtering","linkify":"Filtering","nodes":[{"content":"Filtering","pos":[0,9]}]},{"content":"Probably the most common query operation is to apply a filter in the form of a Boolean expression.","pos":[3513,3611]},{"content":"The filter causes the query to return only those elements for which the expression is true.","pos":[3612,3703]},{"content":"The result is produced by using the <ph id=\"ph1\">`where`</ph> clause.","pos":[3704,3755],"source":" The result is produced by using the `where` clause."},{"content":"The filter in effect specifies which elements to exclude from the source sequence.","pos":[3756,3838]},{"content":"In the following example, only those <ph id=\"ph1\">`customers`</ph> who have an address in London are returned.","pos":[3839,3931],"source":" In the following example, only those `customers` who have an address in London are returned."},{"pos":[3938,4077],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#24<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#24](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_2.cs)]"},{"content":"You can use the familiar C# logical <ph id=\"ph1\">`AND`</ph> and <ph id=\"ph2\">`OR`</ph> operators to apply as many filter expressions as necessary in the <ph id=\"ph3\">`where`</ph> clause.","pos":[4084,4216],"source":"You can use the familiar C# logical `AND` and `OR` operators to apply as many filter expressions as necessary in the `where` clause."},{"content":"For example, to return only customers from \"London\" <ph id=\"ph1\">`AND`</ph> whose name is \"Devon\" you would write the following code:","pos":[4217,4332],"source":" For example, to return only customers from \"London\" `AND` whose name is \"Devon\" you would write the following code:"},{"pos":[4339,4478],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#25<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#25](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_3.cs)]"},{"content":"To return customers from London or Paris, you would write the following code:","pos":[4485,4562]},{"pos":[4569,4708],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#26<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_4.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#26](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_4.cs)]"},{"pos":[4715,4820],"content":"For more information, see <bpt id=\"p1\">[</bpt>where clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/where-clause.md)</ept>.","source":"For more information, see [where clause](../../../../csharp/language-reference/keywords/where-clause.md)."},{"pos":[4829,4837],"content":"Ordering","linkify":"Ordering","nodes":[{"content":"Ordering","pos":[0,8]}]},{"content":"Often it is convenient to sort the returned data.","pos":[4841,4890]},{"content":"The <ph id=\"ph1\">`orderby`</ph> clause will cause the elements in the returned sequence to be sorted according to the default comparer for the type being sorted.","pos":[4891,5034],"source":" The `orderby` clause will cause the elements in the returned sequence to be sorted according to the default comparer for the type being sorted."},{"content":"For example, the following query can be extended to sort the results based on the <ph id=\"ph1\">`Name`</ph> property.","pos":[5035,5133],"source":" For example, the following query can be extended to sort the results based on the `Name` property."},{"content":"Because <ph id=\"ph1\">`Name`</ph> is a string, the default comparer performs an alphabetical sort from A to Z.","pos":[5134,5225],"source":" Because `Name` is a string, the default comparer performs an alphabetical sort from A to Z."},{"pos":[5232,5371],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#27<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_5.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#27](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_5.cs)]"},{"pos":[5378,5466],"content":"To order the results in reverse order, from Z to A, use the <ph id=\"ph1\">`orderbyâ€¦descending`</ph> clause.","source":"To order the results in reverse order, from Z to A, use the `orderbyâ€¦descending` clause."},{"pos":[5473,5582],"content":"For more information, see <bpt id=\"p1\">[</bpt>orderby clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/orderby-clause.md)</ept>.","source":"For more information, see [orderby clause](../../../../csharp/language-reference/keywords/orderby-clause.md)."},{"pos":[5591,5599],"content":"Grouping","linkify":"Grouping","nodes":[{"content":"Grouping","pos":[0,8]}]},{"content":"The <ph id=\"ph1\">`group`</ph> clause enables you to group your results based on a key that you specify.","pos":[5603,5688],"source":"The `group` clause enables you to group your results based on a key that you specify."},{"content":"For example you could specify that the results should be grouped by the <ph id=\"ph1\">`City`</ph> so that all customers from London or Paris are in individual groups.","pos":[5689,5836],"source":" For example you could specify that the results should be grouped by the `City` so that all customers from London or Paris are in individual groups."},{"content":"In this case, <ph id=\"ph1\">`cust.City`</ph> is the key.","pos":[5837,5874],"source":" In this case, `cust.City` is the key."},{"pos":[5881,6020],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#28<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_6.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#28](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_6.cs)]"},{"content":"When you end a query with a <ph id=\"ph1\">`group`</ph> clause, your results take the form of a list of lists.","pos":[6027,6117],"source":"When you end a query with a `group` clause, your results take the form of a list of lists."},{"content":"Each element in the list is an object that has a <ph id=\"ph1\">`Key`</ph> member and a list of elements that are grouped under that key.","pos":[6118,6235],"source":" Each element in the list is an object that has a `Key` member and a list of elements that are grouped under that key."},{"content":"When you iterate over a query that produces a sequence of groups, you must use a nested <ph id=\"ph1\">`foreach`</ph> loop.","pos":[6236,6339],"source":" When you iterate over a query that produces a sequence of groups, you must use a nested `foreach` loop."},{"content":"The outer loop iterates over each group, and the inner loop iterates over each group's members.","pos":[6340,6435]},{"content":"If you must refer to the results of a group operation, you can use the <ph id=\"ph1\">`into`</ph> keyword to create an identifier that can be queried further.","pos":[6442,6580],"source":"If you must refer to the results of a group operation, you can use the `into` keyword to create an identifier that can be queried further."},{"content":"The following query returns only those groups that contain more than two customers:","pos":[6581,6664]},{"pos":[6671,6810],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#29<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_7.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#29](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_7.cs)]"},{"pos":[6817,6922],"content":"For more information, see <bpt id=\"p1\">[</bpt>group clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/group-clause.md)</ept>.","source":"For more information, see [group clause](../../../../csharp/language-reference/keywords/group-clause.md)."},{"pos":[6931,6938],"content":"Joining","linkify":"Joining","nodes":[{"content":"Joining","pos":[0,7]}]},{"content":"Join operations create associations between sequences that are not explicitly modeled in the data sources.","pos":[6942,7048]},{"content":"For example you can perform a join to find all the customers and distributors who have the same location.","pos":[7049,7154]},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> the <ph id=\"ph2\">`join`</ph> clause always works against object collections instead of database tables directly.","pos":[7155,7319],"source":" In [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] the `join` clause always works against object collections instead of database tables directly."},{"pos":[7326,7465],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csLINQGettingStarted#36<ept id=\"p2\">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_8.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csLINQGettingStarted#36](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/basic-linq-query-operations_8.cs)]"},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> you do not have to use <ph id=\"ph2\">`join`</ph> as often as you do in SQL because foreign keys in <ph id=\"ph3\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> are represented in the object model as properties that hold a collection of items.","pos":[7472,7771],"source":"In [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] you do not have to use `join` as often as you do in SQL because foreign keys in [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] are represented in the object model as properties that hold a collection of items."},{"content":"For example, a <ph id=\"ph1\">`Customer`</ph> object contains a collection of <ph id=\"ph2\">`Order`</ph> objects.","pos":[7772,7846],"source":" For example, a `Customer` object contains a collection of `Order` objects."},{"content":"Rather than performing a join, you access the orders by using dot notation:","pos":[7847,7922]},{"pos":[7979,8082],"content":"For more information, see <bpt id=\"p1\">[</bpt>join clause<ept id=\"p1\">](../../../../csharp/language-reference/keywords/join-clause.md)</ept>.","source":"For more information, see [join clause](../../../../csharp/language-reference/keywords/join-clause.md)."},{"pos":[8091,8114],"content":"Selecting (Projections)","linkify":"Selecting (Projections)","nodes":[{"content":"Selecting (Projections)","pos":[0,23]}]},{"content":"The <ph id=\"ph1\">`select`</ph> clause produces the results of the query and specifies the \"shape\" or type of each returned element.","pos":[8118,8231],"source":"The `select` clause produces the results of the query and specifies the \"shape\" or type of each returned element."},{"content":"For example, you can specify whether your results will consist of complete <ph id=\"ph1\">`Customer`</ph> objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation.","pos":[8232,8452],"source":" For example, you can specify whether your results will consist of complete `Customer` objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation."},{"content":"When the <ph id=\"ph1\">`select`</ph> clause produces something other than a copy of the source element, the operation is called a <bpt id=\"p1\">*</bpt>projection<ept id=\"p1\">*</ept>.","pos":[8453,8577],"source":" When the `select` clause produces something other than a copy of the source element, the operation is called a *projection*."},{"content":"The use of projections to transform data is a powerful capability of <ph id=\"ph1\">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query expressions.","pos":[8578,8732],"source":" The use of projections to transform data is a powerful capability of [!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)] query expressions."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Data Transformations with LINQ (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/data-transformations-with-linq.md)</ept> and <bpt id=\"p2\">[</bpt>select clause<ept id=\"p2\">](../../../../csharp/language-reference/keywords/select-clause.md)</ept>.","pos":[8733,8968],"source":" For more information, see [Data Transformations with LINQ (C#)](../../../../csharp/programming-guide/concepts/linq/data-transformations-with-linq.md) and [select clause](../../../../csharp/language-reference/keywords/select-clause.md)."},{"pos":[8977,8985],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Getting Started with LINQ in C#<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[8989,9104],"source":"[Getting Started with LINQ in C#](../../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md) "},{"content":"<bpt id=\"p1\"> [</bpt>LINQ Query Expressions<ept id=\"p1\">](../../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[9107,9203],"source":" [LINQ Query Expressions](../../../../csharp/programming-guide/linq-query-expressions/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Walkthrough: Writing Queries in C#<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/walkthrough-writing-queries-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[9206,9332],"source":" [Walkthrough: Writing Queries in C#](../../../../csharp/programming-guide/concepts/linq/walkthrough-writing-queries-linq.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Query Keywords (LINQ)<ept id=\"p1\">](../../../../csharp/language-reference/keywords/query-keywords.md)</ept><ph id=\"ph1\"> </ph>","pos":[9335,9426],"source":" [Query Keywords (LINQ)](../../../../csharp/language-reference/keywords/query-keywords.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Anonymous Types<ept id=\"p1\">](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>","pos":[9429,9524],"source":" [Anonymous Types](../../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)"}]}