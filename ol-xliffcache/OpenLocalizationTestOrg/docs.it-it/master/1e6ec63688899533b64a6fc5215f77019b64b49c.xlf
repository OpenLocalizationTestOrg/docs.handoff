<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-declare-enumerations.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e6ec63688899533b64a6fc5215f77019b64b49c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\constants-enums\how-to-declare-enumerations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1a9bfe8a8aa92f66c13e0852c69e0a33346a48e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0547849c370aaf1cd64a8123e7d14ff6cf7aec06</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Declare Enumerations (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Declare Enumerations (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You create an enumeration with the <ph id="ph1">`Enum`</ph> statement in the declarations section of a class or module.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You cannot declare an enumeration within a method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To specify the appropriate level of access, use <ph id="ph1">`Private`</ph>, <ph id="ph2">`Protected`</ph>, <ph id="ph3">`Friend`</ph>, or <ph id="ph4">`Public`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Enum`</ph> type has a name, an underlying type, and a set of fields, each representing a constant.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The name must be a valid Visual Basic .NET qualifier.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The underlying type must be one of the integer types—<ph id="ph1">`Byte`</ph>, <ph id="ph2">`Short`</ph>, <ph id="ph3">`Long`</ph> or <ph id="ph4">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Integer`</ph> is the default.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Enumerations are always strongly typed and are not interchangeable with integer number types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Enumerations cannot have floating-point values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an enumeration is assigned a floating-point value with <ph id="ph1">`Option Strict On`</ph>, a compiler error results.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Option Strict`</ph> is <ph id="ph2">`Off`</ph>, the value is automatically converted to the <ph id="ph3">`Enum`</ph> type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For information on names, and how to use the <ph id="ph1">`Imports`</ph> statement to make name qualification unnecessary, see <bpt id="p1">[</bpt>Enumerations and Name Qualification<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To declare an enumeration</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Write a declaration that includes a code access level, the <ph id="ph1">`Enum`</ph> keyword, and a valid name, as in the following examples, each of which declares a different <ph id="ph2">`Enum`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Define the constants in the enumeration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By default, the first constant in an enumeration is initialized to <ph id="ph1">`0`</ph>, and subsequent constants are initialized to a value of one more than the previous constant.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the following enumeration, <ph id="ph1">`Days`</ph>, contains a constant named <ph id="ph2">`Sunday`</ph> with the value <ph id="ph3">`0`</ph>, a constant named <ph id="ph4">`Monday`</ph> with the value <ph id="ph5">`1`</ph>, a constant named <ph id="ph6">`Tuesday`</ph> with the value of <ph id="ph7">`2`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can explicitly assign values to constants in an enumeration by using an assignment statement.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can assign any integer value, including negative numbers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, you may want constants with values less than zero to represent error conditions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the following enumeration, the constant <ph id="ph1">`Invalid`</ph> is explicitly assigned the value <ph id="ph2">`–1`</ph>, and the constant <ph id="ph3">`Sunday`</ph> is assigned the value <ph id="ph4">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because it is the first constant in the enumeration, <ph id="ph1">`Saturday`</ph> is also initialized to the value <ph id="ph2">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`Monday`</ph> is <ph id="ph2">`1`</ph> (one more than the value of <ph id="ph3">`Sunday`</ph>); the value of <ph id="ph4">`Tuesday`</ph> is <ph id="ph5">`2`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To declare an enumeration as an explicit type</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specify the type of the enum by using the <ph id="ph1">`As`</ph> clause, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumerations and Name Qualification<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Refer to an Enumeration Member<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-refer-to-an-enumeration-member.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Iterate Through An Enumeration in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-iterate-through-an-enumeration.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Determine the String Associated with an Enumeration Value<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-determine-the-string-associated-with-an-enumeration-value.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>When to Use an Enumeration<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/when-to-use-an-enumeration.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constants Overview<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constant and Literal Data Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constants and Enumerations<ept id="p1">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>