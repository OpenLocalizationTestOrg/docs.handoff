{"content":"---\ntitle: \"Concatenation Operators in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"& operator [Visual Basic], concatenation\"\n  - \"concatenation operators\"\n  - \"operators [Visual Basic], concatenation\"\n  - \"Visual Basic code, operators\"\n  - \"+ operator [Visual Basic], concatenation\"\n  - \"concatenation operators, Visual Basic strings\"\nms.assetid: e59908c3-89e0-41ae-933d-3e8826c16a04\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Concatenation Operators in Visual Basic\nConcatenation operators join multiple strings into a single string. There are two concatenation operators, `+` and `&`. Both carry out the basic concatenation operation, as the following example shows.  \n  \n```vb\nDim x As String = \"Mic\" & \"ro\" & \"soft\" \nDim y As String = \"Mic\" + \"ro\" + \"soft\" \n' The preceding statements set both x and y to \"Microsoft\".\n```  \n  \n These operators can also concatenate `String` variables, as the following example shows.  \n  \n [!code-vb[VbVbalrOperators#76](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/concatenation-operators_1.vb)]  \n  \n## Differences Between the Two Concatenation Operators  \n The [+ Operator](../../../../visual-basic/language-reference/operators/addition-operator.md) has the primary purpose of adding two numbers. However, it can also concatenate numeric operands with string operands. The `+` operator has a complex set of rules that determine whether to add, concatenate, signal a compiler error, or throw a run-time <xref:System.InvalidCastException> exception.  \n  \n The [& Operator](../../../../visual-basic/language-reference/operators/concatenation-operator.md) is defined only for `String` operands, and it always widens its operands to `String`, regardless of the setting of `Option Strict`. The `&` operator is recommended for string concatenation because it is defined exclusively for strings and reduces your chances of generating an unintended conversion.  \n  \n## Performance: String and StringBuilder  \n If you do a significant number of manipulations on a string, such as concatenations, deletions, and replacements, your performance might profit from the <xref:System.Text.StringBuilder> class in the <xref:System.Text> namespace. It takes an extra instruction to create and initialize a <xref:System.Text.StringBuilder> object, and another instruction to convert its final value to a `String`, but you might recover this time because <xref:System.Text.StringBuilder> can perform faster.  \n  \n## See Also  \n [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)   \n [Types of String Manipulation Methods in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/types-of-string-manipulation-methods.md)   \n [Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)   \n [Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)   \n [Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)","nodes":[{"pos":[12,68],"content":"Concatenation Operators in Visual Basic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Concatenation Operators in Visual Basic | Microsoft Docs","pos":[0,56]}]},{"pos":[820,859],"content":"Concatenation Operators in Visual Basic","linkify":"Concatenation Operators in Visual Basic","nodes":[{"content":"Concatenation Operators in Visual Basic","pos":[0,39]}]},{"content":"Concatenation operators join multiple strings into a single string.","pos":[860,927]},{"content":"There are two concatenation operators, <ph id=\"ph1\">`+`</ph> and <ph id=\"ph2\">`&amp;`</ph>.","pos":[928,979],"source":" There are two concatenation operators, `+` and `&`."},{"content":"Both carry out the basic concatenation operation, as the following example shows.","pos":[980,1061]},{"pos":[1225,1313],"content":"These operators can also concatenate <ph id=\"ph1\">`String`</ph> variables, as the following example shows.","source":"These operators can also concatenate `String` variables, as the following example shows."},{"pos":[1320,1459],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#76<ept id=\"p2\">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/concatenation-operators_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#76](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/concatenation-operators_1.vb)]"},{"pos":[1468,1519],"content":"Differences Between the Two Concatenation Operators","linkify":"Differences Between the Two Concatenation Operators","nodes":[{"content":"Differences Between the Two Concatenation Operators","pos":[0,51]}]},{"content":"The <bpt id=\"p1\">[</bpt>+ Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/addition-operator.md)</ept> has the primary purpose of adding two numbers.","pos":[1523,1662],"source":"The [+ Operator](../../../../visual-basic/language-reference/operators/addition-operator.md) has the primary purpose of adding two numbers."},{"content":"However, it can also concatenate numeric operands with string operands.","pos":[1663,1734]},{"content":"The <ph id=\"ph1\">`+`</ph> operator has a complex set of rules that determine whether to add, concatenate, signal a compiler error, or throw a run-time <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph> exception.","pos":[1735,1913],"source":" The `+` operator has a complex set of rules that determine whether to add, concatenate, signal a compiler error, or throw a run-time <xref:System.InvalidCastException> exception."},{"content":"The <bpt id=\"p1\">[</bpt>&amp; Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/concatenation-operator.md)</ept> is defined only for <ph id=\"ph1\">`String`</ph> operands, and it always widens its operands to <ph id=\"ph2\">`String`</ph>, regardless of the setting of <ph id=\"ph3\">`Option Strict`</ph>.","pos":[1920,2149],"source":"The [& Operator](../../../../visual-basic/language-reference/operators/concatenation-operator.md) is defined only for `String` operands, and it always widens its operands to `String`, regardless of the setting of `Option Strict`."},{"content":"The <ph id=\"ph1\">`&amp;`</ph> operator is recommended for string concatenation because it is defined exclusively for strings and reduces your chances of generating an unintended conversion.","pos":[2150,2317],"source":" The `&` operator is recommended for string concatenation because it is defined exclusively for strings and reduces your chances of generating an unintended conversion."},{"pos":[2326,2363],"content":"Performance: String and StringBuilder","linkify":"Performance: String and StringBuilder","nodes":[{"content":"Performance: String and StringBuilder","pos":[0,37]}]},{"content":"If you do a significant number of manipulations on a string, such as concatenations, deletions, and replacements, your performance might profit from the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class in the <ph id=\"ph2\">&lt;xref:System.Text&gt;</ph> namespace.","pos":[2367,2595],"source":"If you do a significant number of manipulations on a string, such as concatenations, deletions, and replacements, your performance might profit from the <xref:System.Text.StringBuilder> class in the <xref:System.Text> namespace."},{"content":"It takes an extra instruction to create and initialize a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and another instruction to convert its final value to a <ph id=\"ph2\">`String`</ph>, but you might recover this time because <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> can perform faster.","pos":[2596,2852],"source":" It takes an extra instruction to create and initialize a <xref:System.Text.StringBuilder> object, and another instruction to convert its final value to a `String`, but you might recover this time because <xref:System.Text.StringBuilder> can perform faster."},{"pos":[2861,2869],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2873,2982],"source":"[Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Types of String Manipulation Methods in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/strings/types-of-string-manipulation-methods.md)</ept><ph id=\"ph1\"> </ph>","pos":[2985,3151],"source":" [Types of String Manipulation Methods in Visual Basic](../../../../visual-basic/programming-guide/language-features/strings/types-of-string-manipulation-methods.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3154,3306],"source":" [Arithmetic Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3309,3461],"source":" [Comparison Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Logical and Bitwise Operators in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)</ept>","pos":[3464,3633],"source":" [Logical and Bitwise Operators in Visual Basic](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/logical-and-bitwise-operators.md)"}]}