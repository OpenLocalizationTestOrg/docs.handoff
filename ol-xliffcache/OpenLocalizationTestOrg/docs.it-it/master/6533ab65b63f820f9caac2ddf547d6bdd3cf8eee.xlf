<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-the-invokepowershell-activity.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5ae97a8" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6533ab65b63f820f9caac2ddf547d6bdd3cf8eee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\using-the-invokepowershell-activity.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5fcc1a70abc0a5f70093269c67c168c82b12c554</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d55acd9dfc973aea301de4047ebdd6e27eb3fe6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using the InvokePowerShell Activity | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the InvokePowerShell Activity</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The InvokePowerShell sample demonstrates how to invoke Windows PowerShell commands using the <ph id="ph1">`InvokePowerShell`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Demonstrates</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Simple innovation of Windows PowerShell commands.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Retrieve values from the Windows PowerShell output pipeline and store them in workflow variables.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pass data into windows PowerShell as input pipeline for an executing command.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Discussion</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This sample contains the following three projects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Project Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Main Files</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>CodedClient</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A sample client application that uses the PowerShell activity.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>: Programmatically creates a sequence-based workflow that calls the InvokePowerShell activity.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>DesignerClient</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A set of custom activities that contain the <ph id="ph1">`InvokePowerShell`</ph> custom activity and other miscellaneous custom activities, and a workflow that uses them.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Activities:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PrintCollection.cs<ept id="p1">**</ept>: A helper activity that prints all the items in a collection to the console.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ReadLine.cs<ept id="p1">**</ept>: A helper activity for reading input from the console.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>File System:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Copy.xaml<ept id="p1">**</ept>: An activity that copies a file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CreateFile.xaml<ept id="p1">**</ept>: An activity that creates a file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DeleteFile.xaml<ept id="p1">**</ept>: An activity that deletes a file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MakeDir.xaml<ept id="p1">**</ept>: An activity that creates a directory.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Move.xaml<ept id="p1">**</ept>: An activity that moves a file.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ReadFile.xaml<ept id="p1">**</ept>: An activity that reads a file and returns its contents.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TestPath.xaml<ept id="p1">**</ept>: An activity that tests for the existence of a path.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Process:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetProcess.xaml<ept id="p1">**</ept>: An activity that gets a list of running processes.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StopProcess.xaml<ept id="p1">**</ept>: An activity that stops a specific process.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>: Calls the Sequence1 workflow.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sequence1.xaml<ept id="p1">**</ept>: A sequence-based workflow.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>PowerShell</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InvokePowerShell`</ph> activity and its associated designers.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Activity Files</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>ExecutePowerShell.cs<ept id="p1">**</ept>: The main execution logic of the activity.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>InvokePowerShell.cs<ept id="p1">**</ept>: The wrapper around the main execution logic, which contains a generic (return value) version and a non-generic (non-return value) version.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is the public interface for the activity.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">**</bpt>NoPersistZone.cs<ept id="p1">**</ept>: This activity prevents any child activities from persisting.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This class is used within the <ph id="ph1">`InvokePowerShell`</ph> activity implementation to prevent the activity from being persisted mid-execution.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Designer files:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>1.  <bpt id="p1">**</bpt>ArgumentDictionaryEditor.cs<ept id="p1">**</ept>: A Windows dialog that allows the user to edit the arguments of the <ph id="ph1">`InvokePowerShell`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>2.  <bpt id="p1">**</bpt>GenericInvokePowerShellDesigner.xaml<ept id="p1">**</ept> and <bpt id="p2">**</bpt>GenericInvokePowerShellDesigner.xaml.cs<ept id="p2">**</ept>: Defines the appearance of the generic <ph id="ph1">`InvokePowerShell`</ph> activity in <ph id="ph2">[!INCLUDE[wfd2](../../../../includes/wfd2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>3.  <bpt id="p1">**</bpt>InvokePowerShellDesigner.xaml<ept id="p1">**</ept> and <bpt id="p2">**</bpt>InvokePowerShellDesigner.cs<ept id="p2">**</ept>: Defines the appearance of the non-generic <ph id="ph1">`InvokePowerShell`</ph> activity in <ph id="ph2">[!INCLUDE[wfd2](../../../../includes/wfd2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The client projects are discussed first, as it is easier to understand the internal functionality of the PowerShell activity once its use is understood.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Using This Sample</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following sections describe how to use the three projects in the sample.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Using the Coded Client Project</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The sample client programmatically creates a sequence activity, which contains examples of several different methods of using the <ph id="ph1">`InvokePowerShell`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The first invocation launches Notepad.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The second invocation gets a list of the processes running on the local machine.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Output`</ph> is the variable used to store the output of the command.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The next call demonstrates how to run a post-processing step on each individual output of the PowerShell invocation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InitializationAction`</ph> is set to the function that outputs a string representation for each process.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The collection of these strings is returned in the <ph id="ph1">`Output`</ph> variable by the <ph id="ph2">`InvokePowerShell&lt;string&gt;`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The succeeding <ph id="ph1">`InvokePowerShell`</ph> calls demonstrate passing data into the activity and getting outputs and errors out.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Using the Designer Client Project</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The DesignerClient project consists of a set of custom activities, almost all of which are built containing the <ph id="ph1">`InvokePowerShell`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Most of the activities call the non-generic version of the <ph id="ph1">`InvokePowerShell`</ph> activity, and do not expect a return value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Other activities use the generic version of the <ph id="ph1">`InvokePowerShell`</ph> activity, and use the <ph id="ph2">`InitializationAction`</ph> argument to post-process the results.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Using the PowerShell Project</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The main action of the activity takes place in the <ph id="ph1">`ExecutePowerShell`</ph> class.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the execution of PowerShell commands should not block the main workflow thread, the activity is created to be an asynchronous activity by inheriting from the <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> method is called by the workflow runtime to begin running the activity.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It starts by calling PowerShell APIs to create a PowerShell pipeline.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It then creates a PowerShell command and populates it with parameters and variables.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The inputs piped in are also sent to the pipeline at this point.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Finally, the pipeline is wrapped in a <ph id="ph1">`PipelineInvokerAsyncResult`</ph> object and returned.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PipelineInvokerAsyncResult`</ph> object registers a listener and invokes the pipeline.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When execution finishes, output and errors are stored within the same <ph id="ph1">`PipelineInvokerAsyncResult`</ph> object, and control is handed back to the workflow runtime by calling the callback method originally passed to <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>At the end of the method's execution, the workflow runtime calls the activity’s <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity.EndExecute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InvokePowerShell`</ph> class wraps the <ph id="ph2">`ExecutePowerShellCommand`</ph> class and creates two versions of the activity; a generic version and a non-generic version.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The non-generic version returns the output of the PowerShell execution directly, whereas the generic version transforms the individual results to the generic type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The generic version of the activity is implemented as a sequential workflow that calls <ph id="ph1">`ExecutePowerShellCommand`</ph> and post-processes its results.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For each element in the result collection, the post-processing step calls <ph id="ph1">`InitializationAction`</ph> if it is set.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Otherwise, it does a simple cast.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For each of the two <ph id="ph1">`InvokePowerShell`</ph> activities (generic, and non-generic), a designer was created.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>InvokePowerShellDesigner.xaml and its associated .cs file define the appearance in <ph id="ph1">[!INCLUDE[wfd2](../../../../includes/wfd2-md.md)]</ph> for the non-generic version of the <ph id="ph2">`InvokePowerShell`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Inside InvokePowerShellDesigner.xaml, a <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> is used to represent the graphical interface.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`Text`</ph> property of the text box is a two-way binding that ensures that the value of the activity’s <ph id="ph2">`CommandText`</ph> property is equivalent to the value input into the designer.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>GenericInvokePowerShellDesigner.xaml and its associated .cs file define the graphical interface for the generic <ph id="ph1">`InvokePowerShell`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The designer is slightly more complicated because it allows users to set an <ph id="ph1">`InitializationAction`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The key element is the usage of <ph id="ph1">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> to allow drag and drop of child activities onto the <ph id="ph2">`InvokePowerShell`</ph> designer surface.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The designer customization does not stop with the .xaml files that define the appearance of the activity on the design canvas.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The dialog boxes used to display the parameters of the activity can also be customized.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>These parameters and PowerShell variables affect the behavior of PowerShell commands.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The activity exposes them as</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`System.Collections.Generic.Dictionary`</ph> types.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ArgumentDictionaryEditor.cs, PropertyEditorResources.xaml and PropertyEditorResources.cs define the dialog box that allows you to edit these types.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You must install Windows PowerShell to run this sample.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Windows PowerShell can be installed from this location: <bpt id="p1">[</bpt>Windows PowerShell<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150383)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To run the coded client</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Open PowerShell.sln using <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Right-click the solution and build it.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>CodedClient<ept id="p1">**</ept> project and select <bpt id="p2">**</bpt>Set as Startup Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Press CTRL+F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To run the designer client</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Open PowerShell.sln using <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Right-click the solution and build it.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>DesignerClient<ept id="p1">**</ept> project and select <bpt id="p2">**</bpt>Set as Startup Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Press CTRL+F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If referencing the <ph id="ph1">`InvokePowerShell`</ph> activity assembly or project from another project results in a build error, you may need to manually add the <ph id="ph2">`&lt;SpecificVersion&gt;True&lt;/SpecificVersion&gt;`</ph> element to the .csproj file of the new project under the line that references <ph id="ph3">`InvokePowerShell`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If Windows PowerShell is not installed, the following error message is displayed in Visual Studio as soon as you add an <ph id="ph1">`InvokePowerShell`</ph> activity onto a workflow: <ph id="ph2">`Workflow Designer encountered problems with your document. Could not load file or assembly ‘System.Management.Automation’ ... or one of its dependencies. The system cannot find the file specified.`</ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In Windows PowerShell 2.0, programmatically calling <ph id="ph1">`$input.MoveNext()`</ph> fails and scripts using <ph id="ph2">`$input.MoveNext()`</ph> produce unintended errors and results.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To work around this issue, consider using the PowerShell verb <ph id="ph1">`foreach`</ph> instead of calling <ph id="ph2">`MoveNext()`</ph> when iterating an array.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>