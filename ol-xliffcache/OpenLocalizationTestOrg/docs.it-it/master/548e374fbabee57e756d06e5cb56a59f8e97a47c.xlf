<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="updating-data-sources-with-dataadapters.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">548e374fbabee57e756d06e5cb56a59f8e97a47c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\updating-data-sources-with-dataadapters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f854e8b11c8d6d89ca4c4622866b5852ee62b83d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">218bcbd83fb0c69eab907fa6eef89e07288d91d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Updating Data Sources with DataAdapters</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Updating Data Sources with DataAdapters</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Update`</ph> method of the <ph id="ph2">&lt;xref:System.Data.Common.DataAdapter&gt;</ph> is called to resolve changes from a <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> back to the data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Update`</ph> method, like the <ph id="ph2">`Fill`</ph> method, takes as arguments an instance of a <ph id="ph3">`DataSet`</ph>, and an optional <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph> object or <ph id="ph5">`DataTable`</ph> name.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> instance is the <ph id="ph2">`DataSet`</ph> that contains the changes that have been made, and the <ph id="ph3">`DataTable`</ph> identifies the table from which to retrieve the changes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`DataTable`</ph> is specified, the first <ph id="ph2">`DataTable`</ph> in the <ph id="ph3">`DataSet`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">`Update`</ph> method, the <ph id="ph2">`DataAdapter`</ph> analyzes the changes that have been made and executes the appropriate command (INSERT, UPDATE, or DELETE).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`DataAdapter`</ph> encounters a change to a <ph id="ph2">&lt;xref:System.Data.DataRow&gt;</ph>, it uses the <ph id="ph3">&lt;xref:System.Data.Common.DbDataAdapter.InsertCommand%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A&gt;</ph> to process the change.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This allows you to maximize the performance of your ADO.NET application by specifying command syntax at design time and, where possible, through the use of stored procedures.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You must explicitly set the commands before calling <ph id="ph1">`Update`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Update`</ph> is called and the appropriate command does not exist for a particular update (for example, no <ph id="ph2">`DeleteCommand`</ph> for deleted rows), an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you are using SQL Server stored procedures to edit or delete data using a <ph id="ph1">`DataAdapter`</ph>, make sure that you do not use SET NOCOUNT ON in the stored procedure definition.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This causes the rows affected count returned to be zero, which the <ph id="ph1">`DataAdapter`</ph> interprets as a concurrency conflict.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this event, a <ph id="ph1">&lt;xref:System.Data.DBConcurrencyException&gt;</ph> will be thrown.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Command parameters can be used to specify input and output values for an SQL statement or stored procedure for each modified row in a <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>DataAdapter Parameters<ept id="p1">](../../../../docs/framework/data/adonet/dataadapter-parameters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is important to understand the difference between deleting a row in a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> and removing the row.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">`Remove`</ph> or <ph id="ph2">`RemoveAt`</ph> method, the row is removed immediately.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Any corresponding rows in the back end data source will not be affected if you then pass the <ph id="ph1">`DataTable`</ph> or <ph id="ph2">`DataSet`</ph> to a <ph id="ph3">`DataAdapter`</ph> and call <ph id="ph4">`Update`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you use the <ph id="ph1">`Delete`</ph> method, the row remains in the <ph id="ph2">`DataTable`</ph> and is marked for deletion.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you then pass the <ph id="ph1">`DataTable`</ph> or <ph id="ph2">`DataSet`</ph> to a <ph id="ph3">`DataAdapter`</ph> and call <ph id="ph4">`Update`</ph>, the corresponding row in the back end data source is deleted.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">`DataTable`</ph> maps to or is generated from a single database table, you can take advantage of the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> object to automatically generate the <ph id="ph3">`DeleteCommand`</ph>, <ph id="ph4">`InsertCommand`</ph>, and <ph id="ph5">`UpdateCommand`</ph> objects for the <ph id="ph6">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generating Commands with CommandBuilders<ept id="p1">](../../../../docs/framework/data/adonet/generating-commands-with-commandbuilders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Using UpdatedRowSource to Map Values to a DataSet</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can control how the values returned from the data source are mapped back to the <ph id="ph1">`DataTable`</ph> following a call to the Update method of a <ph id="ph2">`DataAdapter`</ph>, by using the <ph id="ph3">&lt;xref:System.Data.Common.DbCommand.UpdatedRowSource%2A&gt;</ph> property of a <ph id="ph4">&lt;xref:System.Data.Common.DbCommand&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>By setting the <ph id="ph1">`UpdatedRowSource`</ph> property to one of the <ph id="ph2">&lt;xref:System.Data.UpdateRowSource&gt;</ph> enumeration values, you can control whether output parameters returned by the <ph id="ph3">`DataAdapter`</ph> commands are ignored or applied to the changed row in the <ph id="ph4">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also specify whether the first returned row (if it exists) is applied to the changed row in the <ph id="ph1">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following table describes the different values of the <ph id="ph1">`UpdateRowSource`</ph> enumeration and how they affect the behavior of a command used with a <ph id="ph2">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>UpdatedRowSource Enumeration</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Both the output parameters and the first row of a returned result set may be mapped to the changed row in the <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Only the data in the first row of a returned result set may be mapped to the changed row in the <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Any output parameters or rows of a returned result set are ignored.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Only output parameters may be mapped to the changed row in the <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Update`</ph> method resolves your changes back to the data source; however other clients may have modified data at the data source since the last time you filled the <ph id="ph2">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To refresh your <ph id="ph1">`DataSet`</ph> with current data, use the <ph id="ph2">`DataAdapter`</ph> and <ph id="ph3">`Fill`</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>New rows will be added to the table, and updated information will be incorporated into existing rows.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Fill`</ph> method determines whether a new row will be added or an existing row will be updated by examining the primary key values of the rows in the <ph id="ph2">`DataSet`</ph> and the rows returned by the <ph id="ph3">`SelectCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Fill`</ph> method encounters a primary key value for a row in the <ph id="ph2">`DataSet`</ph> that matches a primary key value from a row in the results returned by the <ph id="ph3">`SelectCommand`</ph>, it updates the existing row with the information from the row returned by the <ph id="ph4">`SelectCommand`</ph> and sets the <ph id="ph5">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> of the existing row to <ph id="ph6">`Unchanged`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a row returned by the <ph id="ph1">`SelectCommand`</ph> has a primary key value that does not match any of the primary key values of the rows in the <ph id="ph2">`DataSet`</ph>, the <ph id="ph3">`Fill`</ph> method adds a new row with a <ph id="ph4">`RowState`</ph> of <ph id="ph5">`Unchanged`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id="ph2">`DataAdapter`</ph> will not set a <ph id="ph3">`PrimaryKey`</ph> value for the resulting <ph id="ph4">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You must define the <ph id="ph1">`PrimaryKey`</ph> yourself to ensure that duplicate rows are resolved correctly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Primary Keys<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To handle exceptions that may occur when calling the <ph id="ph1">`Update`</ph> method, you can use the <ph id="ph2">`RowUpdated`</ph> event to respond to row update errors as they occur (see <bpt id="p1">[</bpt>Handling DataAdapter Events<ept id="p1">](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>), or you can set <ph id="ph3">`DataAdapter.ContinueUpdateOnError`</ph> to <ph id="ph4">`true`</ph> before calling <ph id="ph5">`Update`</ph>, and respond to the error information stored in the <ph id="ph6">`RowError`</ph> property of a particular row when the update is complete (see <bpt id="p2">[</bpt>Row Error Information<ept id="p2">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-error-information.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Calling <ph id="ph1">`AcceptChanges`</ph> on the <ph id="ph2">`DataSet`</ph>, <ph id="ph3">`DataTable`</ph>, or <ph id="ph4">`DataRow`</ph> will cause all <ph id="ph5">`Original`</ph> values for a <ph id="ph6">`DataRow`</ph> to be overwritten with the <ph id="ph7">`Current`</ph> values for the <ph id="ph8">`DataRow`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the field values that identify the row as unique have been modified, after calling <ph id="ph1">`AcceptChanges`</ph> the <ph id="ph2">`Original`</ph> values will no longer match the values in the data source.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AcceptChanges`</ph> is called automatically for each row during a call to the Update method of a <ph id="ph2">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can preserve the original values during a call to the Update method by first setting the <ph id="ph1">`AcceptChangesDuringUpdate`</ph> property of the <ph id="ph2">`DataAdapter`</ph> to false, or by creating an event handler for the <ph id="ph3">`RowUpdated`</ph> event and setting the <ph id="ph4">&lt;xref:System.Data.Common.RowUpdatedEventArgs.Status%2A&gt;</ph> to <ph id="ph5">&lt;xref:System.Data.UpdateStatus.SkipCurrentRow&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Merging DataSet Contents<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/merging-dataset-contents.md)</ept> and <bpt id="p2">[</bpt>Handling DataAdapter Events<ept id="p2">](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate how to perform updates to modified rows by explicitly setting the <ph id="ph1">`UpdateCommand`</ph> of a <ph id="ph2">`DataAdapter`</ph> and calling its <ph id="ph3">`Update`</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Notice that the parameter specified in the WHERE clause of the UPDATE statement is set to use the <ph id="ph1">`Original`</ph> value of the <ph id="ph2">`SourceColumn`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is important, because the <ph id="ph1">`Current`</ph> value may have been modified and may not match the value in the data source.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Original`</ph> value is the value that was used to populate the <ph id="ph2">`DataTable`</ph> from the data source.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>AutoIncrement Columns</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the tables from your data source have auto-incrementing columns, you can fill the columns in your <ph id="ph1">`DataSet`</ph> either by returning the auto-increment value as an output parameter of a stored procedure and mapping that to a column in a table, by returning the auto-increment value in the first row of a result set returned by a stored procedure or SQL statement, or by using the <ph id="ph2">`RowUpdated`</ph> event of the <ph id="ph3">`DataAdapter`</ph> to execute an additional SELECT statement.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information and an example, see <bpt id="p1">[</bpt>Retrieving Identity or Autonumber Values<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-identity-or-autonumber-values.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Ordering of Inserts, Updates, and Deletes</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In many circumstances, the order in which changes made through the <ph id="ph1">`DataSet`</ph> are sent to the data source is important.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example, if a primary key value for an existing row is updated, and a new row has been added with the new primary key value as a foreign key, it is important to process the update before the insert.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Select`</ph> method of the <ph id="ph2">`DataTable`</ph> to return a <ph id="ph3">`DataRow`</ph> array that only references rows with a particular <ph id="ph4">`RowState`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can then pass the returned <ph id="ph1">`DataRow`</ph> array to the <ph id="ph2">`Update`</ph> method of the <ph id="ph3">`DataAdapter`</ph> to process the modified rows.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>By specifying a subset of rows to be updated, you can control the order in which inserts, updates, and deletes are processed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example, the following code ensures that the deleted rows of the table are processed first, then the updated rows, and then the inserted rows.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Use a DataAdapter to Retrieve and Update Data</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can use a DataAdapter to retrieve and update the data.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The sample uses DataAdapter.AcceptChangesDuringFill to clone the data in the database.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the property is set as false, AcceptChanges is not called when filling the table, and the newly added rows are treated as inserted rows.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>So, the sample uses these rows to insert the new rows into the database.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The samples uses DataAdapter.TableMappings to define the mapping between the source table and DataTable.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The sample uses DataAdapter.FillLoadOption to determine how the adapter fills the DataTable from the DbDataReader.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When you create a DataTable, you can only write the data from database to the current version or the original version by setting the property as the LoadOption.Upsert or the LoadOption.PreserveChanges.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The sample will also update the table by using DbDataAdapter.UpdateBatchSize to perform batch operations.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Before you compile and run the sample, you need to create the sample database:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C# and Visual Basic projects with this code sample can be found on <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](https://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&amp;f%5B0%5D.Value=How%20to%20use%20DataAdapter%20to%20retrieve%20and%20update%20data&amp;f%5B1%5D)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataAdapters and DataReaders<ept id="p1">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Row States and Row Versions<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AcceptChanges and RejectChanges<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/acceptchanges-and-rejectchanges.md)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Merging DataSet Contents<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/merging-dataset-contents.md)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving Identity or Autonumber Values<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-identity-or-autonumber-values.md)</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](https://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>