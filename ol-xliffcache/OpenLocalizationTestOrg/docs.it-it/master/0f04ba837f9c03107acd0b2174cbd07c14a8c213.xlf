<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="addition-operator.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f04ba837f9c03107acd0b2174cbd07c14a8c213</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\addition-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d57c77d5cfb6f3c585096d272cc9a4d550a1a32f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cd85792be0b982d5ec3eeb37199c66d97149e84</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Operator - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>+ Operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`+`</ph> operator is supported in two forms: a unary plus operator or a binary addition operator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unary plus operator</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The unary <ph id="ph1">`+`</ph> operator returns the value of its operand.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It's supported by all numeric types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Numeric addition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For numeric types, the <ph id="ph1">`+`</ph> operator computes the sum of its operands:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about arithmetic operators, see <bpt id="p1">[</bpt>Arithmetic operators<ept id="p1">](arithmetic-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>String concatenation</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When one or both operands are of type <bpt id="p1">[</bpt>string<ept id="p1">](../keywords/string.md)</ept>, the <ph id="ph1">`+`</ph> operator concatenates the string representations of its operands:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Starting with C# 6, <bpt id="p1">[</bpt>string interpolation<ept id="p1">](../tokens/interpolated.md)</ept> provides a more convenient way to format strings:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Delegate combination</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">[</bpt>delegate<ept id="p1">](../keywords/delegate.md)</ept> types, the <ph id="ph1">`+`</ph> operator returns a new delegate instance that, when invoked, invokes the first operand and then invokes the second operand.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If any of the operands is <ph id="ph1">`null`</ph>, the <ph id="ph2">`+`</ph> operator returns the value of another operand (which also might be <ph id="ph3">`null`</ph>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example shows how delegates can be combined with the <ph id="ph1">`+`</ph> operator:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about delegate types, see <bpt id="p1">[</bpt>Delegates<ept id="p1">](../../programming-guide/delegates/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>User-defined types can <bpt id="p1">[</bpt>overload<ept id="p1">](../keywords/operator.md)</ept> the unary and binary <ph id="ph1">`+`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When a binary <ph id="ph1">`+`</ph> operator is overloaded, the <bpt id="p1">[</bpt>addition assignment operator<ept id="p1">](addition-assignment-operator.md)</ept> <ph id="ph2">`+=`</ph> is also implicitly overloaded.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Unary plus operator<ept id="p1">](~/_csharplang/spec/expressions.md#unary-plus-operator)</ept> and <bpt id="p2">[</bpt>Addition operator<ept id="p2">](~/_csharplang/spec/expressions.md#addition-operator)</ept> sections of the <bpt id="p3">[</bpt>C# language specification<ept id="p3">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String interpolation<ept id="p1">](../tokens/interpolated.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Concatenate Multiple Strings<ept id="p1">](../../how-to/concatenate-multiple-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../../programming-guide/delegates/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Checked and unchecked<ept id="p1">](../keywords/checked-and-unchecked.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>