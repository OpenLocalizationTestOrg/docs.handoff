{"content":"---\ntitle: \"Take While Clause (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.QueryTakeWhile\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Take While\"\n  - \"Take While clause\"\n  - \"Take While statement\"\nms.assetid: db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Take While Clause (Visual Basic)\nIncludes elements in a collection as long as a specified condition is `true` and bypasses the remaining elements.  \n  \n## Syntax  \n  \n```  \nTake While expression  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`expression`|Required. An expression that represents a condition to test elements for. The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`.|  \n  \n## Remarks  \n The `Take While` clause includes elements from the start of a query result until the supplied `expression` returns `false`. After the `expression` returns `false`, the query will bypass all remaining elements. The `expression` is ignored for the remaining results.  \n  \n The `Take While` clause differs from the `Where` clause in that the `Where` clause can be used to include all elements from a query that meet a particular condition. The `Take While` clause includes elements only until the first time that the condition is not satisfied. The `Take While` clause is most useful when you are working with an ordered query result.  \n  \n## Example  \n The following code example uses the `Take While` clause to retrieve results until the first customer without any orders is found.  \n  \n [!code-vb[VbSimpleQuerySamples#2](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/take-while-clause_1.vb)]  \n  \n## See Also  \n [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)   \n [Queries](../../../visual-basic/language-reference/queries/queries.md)   \n [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)   \n [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)   \n [Take Clause](../../../visual-basic/language-reference/queries/take-clause.md)   \n [Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md)   \n [Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)","nodes":[{"pos":[4,666],"nodes":[{"content":"Take While Clause (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,49],"content":"Take While Clause (Visual Basic) | Microsoft Docs","nodes":[{"content":"Take While Clause (Visual Basic) | Microsoft Docs","pos":[0,49]}]}],"pos":[6,58],"yaml":true}],"content":"title: \"Take While Clause (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.QueryTakeWhile\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"queries [Visual Basic], Take While\"\n  - \"Take While clause\"\n  - \"Take While statement\"\nms.assetid: db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[673,705],"content":"Take While Clause (Visual Basic)","linkify":"Take While Clause (Visual Basic)","nodes":[{"content":"Take While Clause (Visual Basic)","pos":[0,32]}]},{"pos":[706,819],"content":"Includes elements in a collection as long as a specified condition is <ph id=\"ph1\">`true`</ph> and bypasses the remaining elements.","source":"Includes elements in a collection as long as a specified condition is `true` and bypasses the remaining elements."},{"pos":[828,834],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[882,887],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[894,898]},{"content":"Definition","pos":[899,909]},{"content":"Required.","pos":[939,948]},{"content":"An expression that represents a condition to test elements for.","pos":[949,1012]},{"content":"The expression must return a <ph id=\"ph1\">`Boolean`</ph> value or a functional equivalent, such as an <ph id=\"ph2\">`Integer`</ph> to be evaluated as a <ph id=\"ph3\">`Boolean`</ph>.","pos":[1013,1138],"source":" The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`."},{"pos":[1148,1155],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause includes elements from the start of a query result until the supplied <ph id=\"ph2\">`expression`</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[1159,1282],"source":"The `Take While` clause includes elements from the start of a query result until the supplied `expression` returns `false`."},{"content":"After the <ph id=\"ph1\">`expression`</ph> returns <ph id=\"ph2\">`false`</ph>, the query will bypass all remaining elements.","pos":[1283,1368],"source":" After the `expression` returns `false`, the query will bypass all remaining elements."},{"content":"The <ph id=\"ph1\">`expression`</ph> is ignored for the remaining results.","pos":[1369,1423],"source":" The `expression` is ignored for the remaining results."},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause differs from the <ph id=\"ph2\">`Where`</ph> clause in that the <ph id=\"ph3\">`Where`</ph> clause can be used to include all elements from a query that meet a particular condition.","pos":[1430,1595],"source":"The `Take While` clause differs from the `Where` clause in that the `Where` clause can be used to include all elements from a query that meet a particular condition."},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause includes elements only until the first time that the condition is not satisfied.","pos":[1596,1700],"source":" The `Take While` clause includes elements only until the first time that the condition is not satisfied."},{"content":"The <ph id=\"ph1\">`Take While`</ph> clause is most useful when you are working with an ordered query result.","pos":[1701,1790],"source":" The `Take While` clause is most useful when you are working with an ordered query result."},{"pos":[1799,1806],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1810,1939],"content":"The following code example uses the <ph id=\"ph1\">`Take While`</ph> clause to retrieve results until the first customer without any orders is found.","source":"The following code example uses the `Take While` clause to retrieve results until the first customer without any orders is found."},{"pos":[1946,2077],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbSimpleQuerySamples#2<ept id=\"p2\">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/take-while-clause_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbSimpleQuerySamples#2](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/take-while-clause_1.vb)]"},{"pos":[2086,2094],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[2098,2225],"source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/queries.md)</ept><ph id=\"ph1\"> </ph>","pos":[2229,2300],"source":"[Queries](../../../visual-basic/language-reference/queries/queries.md) "},{"content":"<bpt id=\"p1\">[</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2304,2387],"source":"[Select Clause](../../../visual-basic/language-reference/queries/select-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2391,2470],"source":"[From Clause](../../../visual-basic/language-reference/queries/from-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>Take Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/take-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2474,2553],"source":"[Take Clause](../../../visual-basic/language-reference/queries/take-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>Skip While Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2557,2648],"source":"[Skip While Clause](../../../visual-basic/language-reference/queries/skip-while-clause.md) "},{"content":"<bpt id=\"p1\">[</bpt>Where Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/where-clause.md)</ept>","pos":[2652,2732],"source":"[Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)"}]}