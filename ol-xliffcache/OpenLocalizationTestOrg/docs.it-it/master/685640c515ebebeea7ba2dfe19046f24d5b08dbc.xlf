<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">685640c515ebebeea7ba2dfe19046f24d5b08dbc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\misc\bc30983.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2985c3894235fe5f46218b8be475786cddcd7618</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">341c44864d2b20d1d13a1efb53e1539435b47e12</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type of &amp;#39;<ph id="ph1">&amp;lt;</ph>variablename<ph id="ph2">&amp;gt;</ph>&amp;#39; is ambiguous because the loop bounds and the step variable do not widen to the same type | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type of &amp;#39;<ph id="ph1">&amp;lt;</ph>variablename<ph id="ph2">&amp;gt;</ph>&amp;#39; is ambiguous because the loop bounds and the step variable do not widen to the same type</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Your code contains a <ph id="ph1">`For...Next`</ph> loop in which the compiler cannot infer a data type for the loop control variable because the following conditions is true:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The data type of the loop control variable is not specified with an <ph id="ph1">`As`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The loop bounds and step variable contain at least two data types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>More than one possible conversion exists between the data types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There is no best type among the candidates, so that the choice of type for the loop control variable is ambiguous.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the following loop has one loop bound of type <ph id="ph1">`Integer`</ph> and one loop bound of type <ph id="ph2">`UInteger`</ph>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There is a possible conversion between <ph id="ph1">`Integer`</ph> and <ph id="ph2">`UInteger`</ph>, and a possible conversion between <ph id="ph3">`UInteger`</ph> and <ph id="ph4">`Integer`</ph>, but both are narrowing conversions so neither is the best choice.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the next example, a third variable of type <ph id="ph1">`Double`</ph> is added.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`Integer`</ph> and <ph id="ph2">`UInteger`</ph> have standard widening conversions to <ph id="ph3">`Double`</ph>, which makes conversion to <ph id="ph4">`Double`</ph> the best choice.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Type inference assigns to loop control variable <ph id="ph1">`i`</ph> the data type <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Error ID:<ept id="p1">**</ept> BC30983</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To correct this error</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Explicitly convert one of the variables to a type that the others have a widening conversion to, for example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use an <ph id="ph1">`As`</ph> clause to specify the type of the control variable:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicit and Explicit Conversions<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Infer Statement<ept id="p1">](../../visual-basic/language-reference/statements/option-infer-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>