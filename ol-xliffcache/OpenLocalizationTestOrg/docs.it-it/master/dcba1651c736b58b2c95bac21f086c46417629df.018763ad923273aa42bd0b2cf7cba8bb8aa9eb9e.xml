{"content":"---\ntitle: \"How to: Determine Whether a String Represents a Numeric Value - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"numeric strings [C#]\"\n  - \"validating numeric input [C#]\"\n  - \"strings [C#], numeric\"\nms.assetid: a4e84e10-ea0a-489f-a868-503dded9d85f\n---\n# How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)\nTo determine whether a string is a valid representation of a specified numeric type, use the static `TryParse` method that is implemented by all primitive numeric types and also by types such as <xref:System.DateTime> and <xref:System.Net.IPAddress>. The following example shows how to determine whether \"108\" is a valid [int](../../../csharp/language-reference/keywords/int.md).  \n  \n```  \nint i = 0;   \nstring s = \"108\";  \nbool result = int.TryParse(s, out i); //i now = 108  \n```  \n  \n If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, `TryParse` returns false and sets the out parameter to zero. Otherwise, it returns true and sets the out parameter to the numeric value of the string.  \n  \n> [!NOTE]\n>  A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use. For example, \"256\" is not a valid value for `byte` but it is valid for `int`. \"98.6\" is not a valid value for `int` but it is a valid `decimal`.  \n  \n## Example  \n The following examples show how to use `TryParse` with string representations of `long`, `byte`, and `decimal` values.  \n  \n [!code-csharp[csProgGuideStrings#14](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideStrings/CS/Strings.cs#14)]  \n  \n## Robust Programming  \n Primitive numeric types also implement the `Parse` static method, which throws an exception if the string is not a valid number. `TryParse` is generally more efficient because it just returns false if the number is not valid.  \n  \n## .NET Framework Security  \n Always use the `TryParse` or `Parse` methods to validate user input from controls such as text boxes and combo boxes.  \n  \n## See also\n\n- [How to: Convert a byte Array to an int](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)\n- [How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)\n- [How to: Convert Between Hexadecimal Strings and Numeric Types](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)\n- [Parsing Numeric Strings](../../../standard/base-types/parsing-numeric.md)\n- [Formatting Types](../../../standard/base-types/formatting-types.md)\n","nodes":[{"pos":[4,299],"embed":true,"restype":"x-metadata","content":"title: \"How to: Determine Whether a String Represents a Numeric Value - C# Programming Guide\"\nms.custom: seodec18\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"numeric strings [C#]\"\n  - \"validating numeric input [C#]\"\n  - \"strings [C#], numeric\"\nms.assetid: a4e84e10-ea0a-489f-a868-503dded9d85f","nodes":[{"content":"How to: Determine Whether a String Represents a Numeric Value - C# Programming Guide","nodes":[{"pos":[0,84],"content":"How to: Determine Whether a String Represents a Numeric Value - C# Programming Guide","nodes":[{"content":"How to: Determine Whether a String Represents a Numeric Value - C# Programming Guide","pos":[0,84]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[306,390],"content":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)","linkify":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)","nodes":[{"content":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)","pos":[0,84]}]},{"content":"To determine whether a string is a valid representation of a specified numeric type, use the static <ph id=\"ph1\">`TryParse`</ph> method that is implemented by all primitive numeric types and also by types such as <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Net.IPAddress&gt;</ph>.","pos":[391,641],"source":"To determine whether a string is a valid representation of a specified numeric type, use the static `TryParse` method that is implemented by all primitive numeric types and also by types such as <xref:System.DateTime> and <xref:System.Net.IPAddress>."},{"content":"The following example shows how to determine whether \"108\" is a valid <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept>.","pos":[642,770],"source":" The following example shows how to determine whether \"108\" is a valid [int](../../../csharp/language-reference/keywords/int.md)."},{"content":"If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, <ph id=\"ph1\">`TryParse`</ph> returns false and sets the out parameter to zero.","pos":[880,1076],"source":"If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, `TryParse` returns false and sets the out parameter to zero."},{"content":"Otherwise, it returns true and sets the out parameter to the numeric value of the string.","pos":[1077,1166]},{"pos":[1174,1448],"content":"[!NOTE]\n A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use. For example, \"256\" is not a valid value for `byte` but it is valid for `int`. \"98.6\" is not a valid value for `int` but it is a valid `decimal`.","leadings":["","> "],"nodes":[{"content":"A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use. For example, \"256\" is not a valid value for `byte` but it is valid for `int`. \"98.6\" is not a valid value for `int` but it is a valid `decimal`.","pos":[9,272],"nodes":[{"content":"A string may contain only numeric characters and still not be valid for the type whose <ph id=\"ph1\">`TryParse`</ph> method that you use.","pos":[0,118],"source":"A string may contain only numeric characters and still not be valid for the type whose `TryParse` method that you use."},{"content":"For example, \"256\" is not a valid value for <ph id=\"ph1\">`byte`</ph> but it is valid for <ph id=\"ph2\">`int`</ph>.","pos":[119,196],"source":" For example, \"256\" is not a valid value for `byte` but it is valid for `int`."},{"content":"\"98.6\" is not a valid value for <ph id=\"ph1\">`int`</ph> but it is a valid <ph id=\"ph2\">`decimal`</ph>.","pos":[197,263],"source":" \"98.6\" is not a valid value for `int` but it is a valid `decimal`."}]}]},{"pos":[1457,1464],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1468,1586],"content":"The following examples show how to use <ph id=\"ph1\">`TryParse`</ph> with string representations of <ph id=\"ph2\">`long`</ph>, <ph id=\"ph3\">`byte`</ph>, and <ph id=\"ph4\">`decimal`</ph> values.","source":"The following examples show how to use `TryParse` with string representations of `long`, `byte`, and `decimal` values."},{"pos":[1723,1741],"content":"Robust Programming","linkify":"Robust Programming","nodes":[{"content":"Robust Programming","pos":[0,18]}]},{"content":"Primitive numeric types also implement the <ph id=\"ph1\">`Parse`</ph> static method, which throws an exception if the string is not a valid number.","pos":[1745,1873],"source":"Primitive numeric types also implement the `Parse` static method, which throws an exception if the string is not a valid number."},{"content":"<ph id=\"ph1\">`TryParse`</ph> is generally more efficient because it just returns false if the number is not valid.","pos":[1874,1970],"source":"`TryParse` is generally more efficient because it just returns false if the number is not valid."},{"pos":[1979,2002],"content":".NET Framework Security","linkify":".NET Framework Security","nodes":[{"content":".NET Framework Security","pos":[0,23]}]},{"pos":[2006,2123],"content":"Always use the <ph id=\"ph1\">`TryParse`</ph> or <ph id=\"ph2\">`Parse`</ph> methods to validate user input from controls such as text boxes and combo boxes.","source":"Always use the `TryParse` or `Parse` methods to validate user input from controls such as text boxes and combo boxes."},{"pos":[2132,2140],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2144,2266],"content":"<bpt id=\"p1\">[</bpt>How to: Convert a byte Array to an int<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)</ept>","source":"[How to: Convert a byte Array to an int](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)"},{"pos":[2269,2387],"content":"<bpt id=\"p1\">[</bpt>How to: Convert a String to a Number<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept>","source":"[How to: Convert a String to a Number](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)"},{"pos":[2390,2558],"content":"<bpt id=\"p1\">[</bpt>How to: Convert Between Hexadecimal Strings and Numeric Types<ept id=\"p1\">](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)</ept>","source":"[How to: Convert Between Hexadecimal Strings and Numeric Types](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)"},{"pos":[2561,2635],"content":"<bpt id=\"p1\">[</bpt>Parsing Numeric Strings<ept id=\"p1\">](../../../standard/base-types/parsing-numeric.md)</ept>","source":"[Parsing Numeric Strings](../../../standard/base-types/parsing-numeric.md)"},{"pos":[2638,2706],"content":"<bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](../../../standard/base-types/formatting-types.md)</ept>","source":"[Formatting Types](../../../standard/base-types/formatting-types.md)"}]}