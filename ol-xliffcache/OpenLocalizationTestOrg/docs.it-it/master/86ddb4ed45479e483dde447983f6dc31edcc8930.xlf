<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="performing-culture-insensitive-string-operations-in-collections.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86ddb4ed45479e483dde447983f6dc31edcc8930</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\globalization-localization\performing-culture-insensitive-string-operations-in-collections.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3670cf8713eb4abb333394ac8cc1fc78471db853</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c64af77cc018bdad799ce252ba01ea75b4c7111f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Performing Culture-Insensitive String Operations in Collections</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Performing Culture-Insensitive String Operations in Collections</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are classes and members in the <ph id="ph1">&lt;xref:System.Collections&gt;</ph> namespace that provide culture-sensitive behavior by default.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The default constructors for the <ph id="ph1">&lt;xref:System.Collections.CaseInsensitiveComparer&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.CaseInsensitiveHashCodeProvider&gt;</ph> classes initialize a new instance using the <ph id="ph3">&lt;xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>All overloads of the <ph id="ph1">&lt;xref:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable%2A?displayProperty=nameWithType&gt;</ph> method create a new instance of the <ph id="ph2">&lt;xref:System.Collections.Hashtable&gt;</ph> class using the <ph id="ph3">`Thread.CurrentCulture`</ph> property by default.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overloads of the <ph id="ph1">&lt;xref:System.Collections.ArrayList.Sort%2A?displayProperty=nameWithType&gt;</ph> method perform culture-sensitive sorts by default using <ph id="ph2">`Thread.CurrentCulture`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Sorting and lookup in a <ph id="ph1">&lt;xref:System.Collections.SortedList&gt;</ph> can be affected by <ph id="ph2">`Thread.CurrentCulture`</ph> when strings are used as the keys.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Follow the usage recommendations provided in this section to obtain culture-insensitive results from these classes and methods in the <ph id="ph1">`Collections`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Passing <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph> to a comparison method does perform a culture-insensitive comparison.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, it does not cause a non-linguistic comparison, for example, for file paths, registry keys, and environment variables.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Neither does it support security decisions based on the comparison result.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For a non-linguistic comparison or support for result-based security decisions, the application should use a comparison method that accepts a <ph id="ph1">&lt;xref:System.StringComparison&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The application should then pass <ph id="ph1">&lt;xref:System.StringComparison&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using the CaseInsensitiveComparer and CaseInsensitiveHashCodeProvider Classes</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The default constructors for <ph id="ph1">`CaseInsensitiveHashCodeProvider`</ph> and <ph id="ph2">`CaseInsensitiveComparer`</ph> initialize a new instance of the class using the <ph id="ph3">`Thread.CurrentCulture`</ph>, resulting in culture-sensitive behavior.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates the constructor for a <ph id="ph1">`Hashtable`</ph> that is culture-sensitive because it uses the default constructors for <ph id="ph2">`CaseInsensitiveHashCodeProvider`</ph> and <ph id="ph3">`CaseInsensitiveComparer`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you want to create a culture-insensitive <ph id="ph1">`Hashtable`</ph> using the <ph id="ph2">`CaseInsensitiveComparer`</ph> and <ph id="ph3">`CaseInsensitiveHashCodeProvider`</ph> classes, initialize new instances of these classes using the constructors that accept a <ph id="ph4">`culture`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`culture`</ph> parameter, specify <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates the constructor for a culture-insensitive <ph id="ph1">`Hashtable`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using the CollectionsUtil.CreateCaseInsensitiveHashTable Method</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CollectionsUtil.CreateCaseInsensitiveHashTable`</ph> method is a useful shortcut for creating a new instance of the <ph id="ph2">`Hashtable`</ph> class that ignores the case of strings.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, all overloads of the <ph id="ph1">`CollectionsUtil.CreateCaseInsensitiveHashTable`</ph> method are culture-sensitive because they use the <ph id="ph2">`Thread.CurrentCulture`</ph> property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You cannot create a culture-insensitive <ph id="ph1">`Hashtable`</ph> using this method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To create a culture-insensitive <ph id="ph1">`Hashtable`</ph>, use the <ph id="ph2">`Hashtable`</ph> constructor that accepts a <ph id="ph3">`culture`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`culture`</ph> parameter, specify <ph id="ph2">`CultureInfo.InvariantCulture`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates the constructor for a culture-insensitive <ph id="ph1">`Hashtable`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using the SortedList Class</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SortedList`</ph> represents a collection of key-and-value pairs that are sorted by the keys and are accessible by key and by index.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you use a <ph id="ph1">`SortedList`</ph> where strings are the keys, the sorting and lookup can be affected by the <ph id="ph2">`Thread.CurrentCulture`</ph> property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To obtain culture-insensitive behavior from a <ph id="ph1">`SortedList`</ph>, create a <ph id="ph2">`SortedList`</ph> using one of the constructors that accepts a <ph id="ph3">`comparer`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`comparer`</ph> parameter specifies the <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation to use when comparing keys.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For the parameter, specify a custom comparer class that uses <ph id="ph1">`CultureInfo.InvariantCulture`</ph> to compare keys.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example illustrates a custom culture-insensitive comparer class that you can specify as the <ph id="ph1">`comparer`</ph> parameter to a <ph id="ph2">`SortedList`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In general, if you use a <ph id="ph1">`SortedList`</ph> on strings without specifying a custom invariant comparer, a change to <ph id="ph2">`Thread.CurrentCulture`</ph> after the list has been populated can invalidate the list.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Using the ArrayList.Sort Method</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Overloads of the <ph id="ph1">`ArrayList.Sort`</ph> method perform culture-sensitive sorts by default using the <ph id="ph2">`Thread.CurrentCulture`</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Results can vary by culture due to different sort orders.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To eliminate culture-sensitive behavior, use the overloads of this method that accept an <ph id="ph1">`IComparer`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`comparer`</ph> parameter, specify a custom invariant comparer class that uses <ph id="ph2">`CultureInfo.InvariantCulture`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An example of a custom invariant comparer class is provided in the <bpt id="p1">[</bpt>Using the SortedList Class<ept id="p1">](#cpconperformingculture-insensitivestringoperationsincollectionsanchor1)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing Culture-Insensitive String Operations<ept id="p1">](../../../docs/standard/globalization-localization/performing-culture-insensitive-string-operations.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>