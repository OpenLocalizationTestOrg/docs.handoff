<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c1f34b3d09dc08b1ebe4f9822be184112c60eaf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\xaml-related-clr-attributes-for-custom-types-and-libraries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e45e4b4fe28eee46a932427df0256425924d3a84</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8905a13a3d744822a5c41efd45ac10d1b071ff30</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XAML-Related CLR Attributes for Custom Types and Libraries | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAML-Related CLR Attributes for Custom Types and Libraries</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the common language runtime (CLR) attributes that are defined by .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It also describes other CLR attributes that are defined in the .NET Framework that have a XAML-related scenario for application to assemblies or types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Attributing assemblies, types, or members with these CLR attributes provides XAML type system information related to your types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Information is provided to any XAML consumer that uses .NET Framework XAML Services for processing the XAML node stream directly or through the dedicated XAML readers and XAML writers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XAML-Related CLR Attributes for Custom Types and Custom Members</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using CLR attributes entails that you are using the overall CLR to define your types, otherwise such attributes are not available.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you use the CLR to define type backing, then the default XAML schema context used by .NET  Framework XAML Services XAML writers can read CLR attribution through reflection against backing assemblies.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following sections describe the XAML-related attributes that you can apply to custom types or custom members.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each CLR attribute communicates information that is relevant to a XAML type system.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the load path, the attributed information either helps the XAML reader form a valid XAML node stream, or it helps the XAML writer produce a valid object graph.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the save path, the attributed information either helps the XAML reader form a valid XAML node stream that reconstitutes XAML type system information; or it declares serialization hints or requirements for the XAML writer or other XAML consumers.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>AmbientAttribute</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class, property, or <ph id="ph1">`get`</ph> accessor members that support attachable properties.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> None</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.AmbientAttribute&gt;</ph> indicates that the property, or all properties that take the attributed type, should be interpreted under the ambient property concept in XAML.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The ambient concept relates to how XAML processors determine type owners of members.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An ambient property is a property where the value is expected to be available in the parser context when creating an object graph, but where typical type-member lookup is suspended for the immediate XAML node set being created.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The ambient concept can be applied to attachable members, which are not represented as properties in terms of how CLR attribution defines <ph id="ph1">&lt;xref:System.AttributeTargets&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The method attribution usage should be applied only in the case of a <ph id="ph1">`get`</ph> accessor that supports attachable usage for XAML.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>ConstructorArgumentAttribute</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A string that specifies the name of the property that matches a single constructor argument.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute&gt;</ph> specifies that an object can be initialized by using a non-default constructor syntax, and that a property of the specified name supplies construction information.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This information is primarily for XAML serialization.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Markup.ConstructorArgumentAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ContentPropertyAttribute</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A string that specifies the name of a member of the attributed type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> indicates that the property as named by the argument should serve as the XAML content property for that type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The XAML content property definition inherits to all derived types that are assignable to the defining type.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can override the definition on a specific derived type by applying <ph id="ph1">&lt;xref:System.Windows.Markup.ContentPropertyAttribute&gt;</ph> on the specific derived type.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For the property that serves as the XAML content property, property element tagging for the property can be omitted in the XAML usage.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Typically, you designate XAML content properties that promote a streamlined XAML markup for your content and containment models.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Because only one member can be designated as the XAML content property, you sometimes have design choices to make regarding which of several container properties of a type should be designated as the XAML content property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The other container properties must be used with explicit property elements.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the XAML node stream, XAML content properties still produce <ph id="ph1">`StartMember`</ph> and <ph id="ph2">`EndMember`</ph> nodes, using the name of the property for the <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To determine whether a member is the XAML content property, examine the <ph id="ph1">&lt;xref:System.Xaml.XamlType&gt;</ph> value from the <ph id="ph2">`StartObject`</ph> position and obtain the value of <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>ContentWrapperAttribute</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class, specifically collection types.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A <ph id="ph1">&lt;xref:System.Type&gt;</ph> that specifies the type to use as the content wrapper type for foreign content.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.ContentWrapperAttribute&gt;</ph> specifies one or more types on the associated collection type that will be used to wrap foreign content.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Foreign content refers to cases where the type system constraints on the type of the content property do not capture all of the possible content cases that XAML usage for the owning type would support.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, XAML support for content of a particular type might support strings in a strongly typed generic <ph id="ph1">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Content wrappers are useful for migrating preexisting markup conventions into XAML's conception of assignable values for collections, such as migrating text-related content models.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To specify more than one content wrapper type, apply the attribute multiple times.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>DependsOnAttribute</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Property</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A string that specifies the name of another member of the attributed type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> indicates that the attributed property depends on the value of another property.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Applying this attribute to a property definition ensures that the dependent properties are processed first in XAML object writing.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Usages of <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> specify the exceptional cases of properties on types where a specific order of parsing must be followed for valid object creation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can apply multiple <ph id="ph1">&lt;xref:System.Windows.Markup.DependsOnAttribute&gt;</ph> cases to a property definition.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>MarkupExtensionReturnTypeAttribute</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class, which is expected to be a <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> derived type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A <ph id="ph1">&lt;xref:System.Type&gt;</ph> that specifies the most precise type to expect as the <ph id="ph2">`ProvideValue`</ph> result of the attributed <ph id="ph3">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](../../../docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>NameScopePropertyAttribute</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> Supports two forms of attribution:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A string that specifies the name of a property on the attributed type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A string that specifies the name of a property, and a <ph id="ph1">&lt;xref:System.Type&gt;</ph> for the type that defines the named property.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This form is for specifying an attachable member as the XAML namescope property.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.NameScopePropertyAttribute&gt;</ph> specifies a property that provides the XAML namescope value for the attributed class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The XAML namescope property is expected to reference an object that implements <ph id="ph1">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> and holds the actual XAML namescope, its store, and its behavior.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>RuntimeNamePropertyAttribute</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.RuntimeNamePropertyAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A string that specifies the name of the run-time name property on the attributed type.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.RuntimeNamePropertyAttribute&gt;</ph> reports a property of the attributed type that maps to the XAML <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../../../docs/framework/xaml-services/x-name-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The property must be of type <ph id="ph1">&lt;xref:System.String&gt;</ph> and must be read/write.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The definition inherits to all derived types that are assignable to the defining type.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can override the definition on a specific derived type by applying <ph id="ph1">&lt;xref:System.Windows.Markup.RuntimeNamePropertyAttribute&gt;</ph> on the specific derived type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>TrimSurroundingWhitespaceAttribute</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Types</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> None.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph> is applied to specific types that might appear as child elements within whitespace significant content (content held by a collection that has <ph id="ph2">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph> is mainly relevant to the save path, but is available in the XAML type system in the load path by examining <ph id="ph2">&lt;xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Whitespace Processing in XAML<ept id="p1">](../../../docs/framework/xaml-services/whitespace-processing-in-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>TypeConverterAttribute</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class, property, method (the only XAML-valid method case is a <ph id="ph1">`get`</ph> accessor that supports an attachable member).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> The <ph id="ph1">&lt;xref:System.Type&gt;</ph> of the <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> in a XAML context references a custom <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> provides type conversion behavior for custom types, or members of that type.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You apply the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attribute to your type, referencing your type converter implementation.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can define type converters for XAML on classes, structures, or interfaces.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You do not need to provide type conversion for enumerations, that conversion is enabled natively.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Your type converter should be able to convert from a string that is used for attributes or initialization text in markup, into your intended destination type.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>TypeConverters and XAML<ept id="p1">](../../../docs/framework/wpf/advanced/typeconverters-and-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In this case, you apply <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the property definition (the outer definition, not the specific <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> definitions).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A type converter behavior for XAML usage of a custom attachable member can be assigned by applying <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> to the <ph id="ph2">`get`</ph> method accessor that supports the XAML usage.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Similar to <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> existed in the .NET Framework prior to the existence of XAML, and the type converter model served other purposes.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In order to reference and use <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph>, you must fully qualify it or provide a <ph id="ph2">`using`</ph> statement for <ph id="ph3">&lt;xref:System.ComponentModel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You must also include the System assembly in your project.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>UidPropertyAttribute</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.UidPropertyAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A string that references the relevant property by name.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Indicates the CLR property of a class that aliases the <bpt id="p1">[</bpt>x:Uid Directive<ept id="p1">](../../../docs/framework/xaml-services/x-uid-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>UsableDuringInitializationAttribute</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A Boolean.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If used for the attribute's intended purpose, this should always be specified as <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Indicates whether this type is built top-down during XAML object graph creation.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This is an advanced concept, which is probably closely related to the definition of your programming model.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Markup.UsableDuringInitializationAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>ValueSerializerAttribute</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class, property, method (the only XAML-valid method case is a <ph id="ph1">`get`</ph> accessor that supports an attachable member).</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A <ph id="ph1">&lt;xref:System.Type&gt;</ph> that specifies the value serializer support class to use when serializing all properties of the attributed type, or the specific attributed property.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> specifies a value serialization class that requires more state and context than a <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> does.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> can be associated with an attachable member by applying the <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attribute on the static <ph id="ph3">`get`</ph> accessor method for the attachable member.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Value serialization is also applicable for enumerations, interfaces and structures, but not for delegates.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>WhitespaceSignificantCollectionAttribute</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class, specifically collection types that are expected to host mixed content, where white space around object elements might be significant for UI representation.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> None.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph> indicates that a collection type should be processed as whitespace significant by a XAML processor, which influences the construction of the XAML node stream's value nodes within the collection.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Whitespace Processing in XAML<ept id="p1">](../../../docs/framework/xaml-services/whitespace-processing-in-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>XamlDeferLoadAttribute</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class, property.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> Supports two attribution forms types as strings, or types as <ph id="ph1">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Markup.XamlDeferLoadAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Indicates that a class or property has a deferred load usage for XAML (such as a template behavior), and reports the class that enables the deferring behavior and its destination/content type.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>XamlSetMarkupExtensionAttribute</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> Names the callback.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Indicates that a class can use a markup extension to provide a value for one or more of its properties, and references a handler that a XAML writer should call before performing a markup extension set operation on any property of the class.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>XamlSetTypeConverterAttribute</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.XamlSetTypeConverterAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> Names the callback.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Indicates that a class can use a type converter to provide a value for one or more of its properties, and references a handler that a XAML writer should call before performing a type converter set operation on any property of the class.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>XmlLangPropertyAttribute</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.XmlLangPropertyAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Applies to:<ept id="p1">**</ept> Class</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept> A string that specifies the name of the property to alias to <ph id="ph1">`xml:lang`</ph> on the attributed type.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XmlLangPropertyAttribute&gt;</ph> reports a property of the attributed type that maps to the XML <ph id="ph2">`lang`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The property is not necessarily of type <ph id="ph1">&lt;xref:System.String&gt;</ph>, but must be assignable from a string (this could be accomplished by associating a type converter with the property's type, or with the specific property).</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The property must be read/write.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The scenario for mapping <ph id="ph1">`xml:lang`</ph> is so that a runtime object model has access to XML-specified language information without specifically processing with an XMLDOM.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The definition inherits to all derived types that are assignable to the defining type.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can override the definition on a specific derived type by applying <ph id="ph1">&lt;xref:System.Windows.Markup.XmlLangPropertyAttribute&gt;</ph> on the specific derived type, although that is an uncommon scenario.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>XAML-Related CLR Attributes at the Assembly Level</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The following sections describe the XAML-related attributes that are not applied to types or member definitions, but are instead applied to assemblies.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>These attributes are pertinent to the overall goal of defining a library that contains custom types to use in XAML.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Some of the attributes do not necessarily influence the XAML node stream directly, but are passed on in the node stream for other consumers to use.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Consumers for the information include design environments or serialization processes that need XAML namespace information and associated prefix information.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A XAML schema context (including the .NET Framework XAML Services default) also uses this information.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>XmlnsCompatibleWithAttribute</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsCompatibleWithAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A string that specifies the identifier of the XAML namespace to subsume.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A string that specifies the identifier of the XAML namespace that can subsume the XAML namespace from the previous argument.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsCompatibleWithAttribute&gt;</ph> specifies that a XAML namespace can be subsumed by another XAML namespace.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Typically, the subsuming XAML namespace is indicated in a previously defined <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>This technique can be used for versioning a XAML vocabulary in a library and to make it compatible with previously defined markup against the earlier versioned vocabulary.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>XmlnsDefinitionAttribute</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>A string that specifies the identifier of the XAML namespace to define.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A string that names a CLR namespace.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The CLR namespace should define public types in your assembly, and at least one of the CLR namespace types should be intended for XAML usage.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> specifies a mapping on a per-assembly basis between a XAML namespace and a CLR namespace, which is then used for type resolution by a XAML object writer or XAML schema context.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>More than one <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> can be applied to an assembly.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This might be done for any combination of the following reasons:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The library design contains multiple CLR namespaces for logical organization of run-time API access; however, you want all types in those namespaces to be XAML-usable by referencing the same XAML namespace.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In this case, you apply several <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> attributes using the same <ph id="ph2">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace%2A&gt;</ph> value but different <ph id="ph3">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace%2A&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This is especially useful if you are defining mappings for the XAML namespace that your framework or application intends to be the default XAML namespace in common usage.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The library design contains multiple CLR namespaces, and you want a deliberate XAML namespace separation between the usages of types in those CLR namespaces.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>You define a CLR namespace in the assembly, and you want it to be accessible through more than one XAML namespace.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This scenario occurs when you are supporting multiple vocabularies with the same codebase.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>You define XAML language support in one or more CLR namespaces.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>For these, the <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace%2A&gt;</ph> value should be <ph id="ph2">`http://schemas.microsoft.com/winfx/2006/xaml`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>XmlnsPrefixAttribute</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Documentation:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arguments:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>A string that specifies the identifier of a XAML namespace.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A string that specifies a recommended prefix.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> specifies a recommended prefix to use for a XAML namespace.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The prefix is useful when writing elements and attributes in a XAML file that is serialized by the .NET Framework XAML Services <ph id="ph1">&lt;xref:System.Xaml.XamlXmlWriter&gt;</ph>, or when a XAML-implementing library interacts with a design environment that has XAML editing features.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>More than one <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsPrefixAttribute&gt;</ph> can be applied to an assembly.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This might be done for any combination of the following reasons:</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Your assembly defines types for more than one XAML namespace.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In this case you should define different prefix values for each XAML namespace.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>You are supporting multiple vocabularies, and you use different prefixes for each vocabulary and XAML namespace.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>You define XAML language support in the assembly and have a <ph id="ph1">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> for <ph id="ph2">`http://schemas.microsoft.com/winfx/2006/xaml`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In this case, you typically should promote the prefix <ph id="ph1">`x`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>.NET Framework XAML Services also defines the XAML-related attribute <ph id="ph1">&lt;xref:System.Windows.Markup.RootNamespaceAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>This attribute is an assembly-level attribute for project system support, and it is not relevant for XAML custom types.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Attribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Defining Custom Types for Use with .NET Framework XAML Services<ept id="p1">](../../../docs/framework/xaml-services/defining-custom-types-for-use-with-net-framework-xaml-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>