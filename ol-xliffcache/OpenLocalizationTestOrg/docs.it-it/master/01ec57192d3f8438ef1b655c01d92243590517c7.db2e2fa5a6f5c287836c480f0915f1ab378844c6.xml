{"content":"---\ntitle: \"How to: Obtain the Address of a Variable (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"variables [C#], address of\"\n  - \"pointers [C#], & operator\"\n  - \"pointer expressions [C#], address-of operator\"\nms.assetid: 44fe2cd9-a64f-4ef5-be2a-09ce807c0182\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Obtain the Address of a Variable (C# Programming Guide)\nTo obtain the address of a unary expression, which evaluates to a fixed variable, use the address-of operator:  \n  \n```  \nint number;  \nint* p = &number; //address-of operator &  \n```  \n  \n The address-of operator can only be applied to a variable. If the variable is a moveable variable, you can use the [fixed statement](../../../csharp/language-reference/keywords/fixed-statement.md) to temporarily fix the variable before obtaining its address.  \n  \n It is your responsibility to ensure that the variable is initialized. The compiler will not issue an error message if the variable is not initialized.  \n  \n You cannot get the address of a constant or a value.  \n  \n## Example  \n In this example, a pointer to `int`, `p`, is declared and assigned the address of an integer variable, `number`. The variable `number` is initialized as a result of the assignment to *p. If you make this assignment statement a comment, the initialization of the variable `number` will be removed, but no compile-time error is issued. Notice the use of the [Member Access](../../../csharp/programming-guide/unsafe-code-pointers/how-to-access-a-member-with-a-pointer.md) operator `->` to obtain and display the address stored in the pointer.  \n  \n [!code-cs[csProgGuidePointers#7](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-obtain-the-address-of-a-variable_1.cs)]  \n  \n [!code-cs[csProgGuidePointers#8](../../../csharp/programming-guide/unsafe-code-pointers/codesnippet/CSharp/how-to-obtain-the-address-of-a-variable_2.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)   \n [Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)   \n [Types](../../../csharp/language-reference/keywords/types.md)   \n [unsafe](../../../csharp/language-reference/keywords/unsafe.md)   \n [fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md)   \n [stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)","nodes":[{"pos":[4,652],"embed":true,"restype":"x-metadata","content":"title: \"How to: Obtain the Address of a Variable (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"variables [C#], address of\"\n  - \"pointers [C#], & operator\"\n  - \"pointer expressions [C#], address-of operator\"\nms.assetid: 44fe2cd9-a64f-4ef5-be2a-09ce807c0182\ncaps.latest.revision: 19\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Obtain the Address of a Variable (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,80],"content":"How to: Obtain the Address of a Variable (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Obtain the Address of a Variable (C# Programming Guide) | Microsoft Docs","pos":[0,80]}]}],"path":["title"]}],"yml":true},{"pos":[659,722],"content":"How to: Obtain the Address of a Variable (C# Programming Guide)","linkify":"How to: Obtain the Address of a Variable (C# Programming Guide)","nodes":[{"content":"How to: Obtain the Address of a Variable (C# Programming Guide)","pos":[0,63]}]},{"content":"To obtain the address of a unary expression, which evaluates to a fixed variable, use the address-of operator:","pos":[723,833]},{"content":"The address-of operator can only be applied to a variable.","pos":[913,971]},{"content":"If the variable is a moveable variable, you can use the <bpt id=\"p1\">[</bpt>fixed statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept> to temporarily fix the variable before obtaining its address.","pos":[972,1171],"source":" If the variable is a moveable variable, you can use the [fixed statement](../../../csharp/language-reference/keywords/fixed-statement.md) to temporarily fix the variable before obtaining its address."},{"content":"It is your responsibility to ensure that the variable is initialized.","pos":[1178,1247]},{"content":"The compiler will not issue an error message if the variable is not initialized.","pos":[1248,1328]},{"content":"You cannot get the address of a constant or a value.","pos":[1335,1387]},{"pos":[1396,1403],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a pointer to <ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`p`</ph>, is declared and assigned the address of an integer variable, <ph id=\"ph3\">`number`</ph>.","pos":[1407,1519],"source":"In this example, a pointer to `int`, `p`, is declared and assigned the address of an integer variable, `number`."},{"content":"The variable <ph id=\"ph1\">`number`</ph> is initialized as a result of the assignment to *p.","pos":[1520,1593],"source":" The variable `number` is initialized as a result of the assignment to *p."},{"content":"If you make this assignment statement a comment, the initialization of the variable <ph id=\"ph1\">`number`</ph> will be removed, but no compile-time error is issued.","pos":[1594,1740],"source":" If you make this assignment statement a comment, the initialization of the variable `number` will be removed, but no compile-time error is issued."},{"content":"Notice the use of the <bpt id=\"p1\">[</bpt>Member Access<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/how-to-access-a-member-with-a-pointer.md)</ept> operator <ph id=\"ph1\">`-&gt;`</ph> to obtain and display the address stored in the pointer.","pos":[1741,1946],"source":" Notice the use of the [Member Access](../../../csharp/programming-guide/unsafe-code-pointers/how-to-access-a-member-with-a-pointer.md) operator `->` to obtain and display the address stored in the pointer."},{"pos":[2275,2283],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2287,2354],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Pointer Expressions<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[2358,2459],"source":"[Pointer Expressions](../../../csharp/programming-guide/unsafe-code-pointers/pointer-expressions.md) "},{"content":"<bpt id=\"p1\">[</bpt>Pointer types<ept id=\"p1\">](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2463,2552],"source":"[Pointer types](../../../csharp/programming-guide/unsafe-code-pointers/pointer-types.md) "},{"content":"<bpt id=\"p1\">[</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept><ph id=\"ph1\"> </ph>","pos":[2556,2618],"source":"[Types](../../../csharp/language-reference/keywords/types.md) "},{"content":"<bpt id=\"p1\">[</bpt>unsafe<ept id=\"p1\">](../../../csharp/language-reference/keywords/unsafe.md)</ept><ph id=\"ph1\"> </ph>","pos":[2622,2686],"source":"[unsafe](../../../csharp/language-reference/keywords/unsafe.md) "},{"content":"<bpt id=\"p1\">[</bpt>fixed Statement<ept id=\"p1\">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2690,2772],"source":"[fixed Statement](../../../csharp/language-reference/keywords/fixed-statement.md) "},{"content":"<bpt id=\"p1\">[</bpt>stackalloc<ept id=\"p1\">](../../../csharp/language-reference/keywords/stackalloc.md)</ept>","pos":[2776,2847],"source":"[stackalloc](../../../csharp/language-reference/keywords/stackalloc.md)"}]}