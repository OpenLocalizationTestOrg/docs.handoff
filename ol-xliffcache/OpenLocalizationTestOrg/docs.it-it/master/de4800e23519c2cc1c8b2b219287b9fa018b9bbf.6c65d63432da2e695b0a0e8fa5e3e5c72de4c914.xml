{"content":"---\ntitle: \"Differences Between Properties and Variables in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"property values [Visual Basic]\"\n  - \"variables [Visual Basic]\"\n  - \"Visual Basic code, procedures\"\n  - \"values [Visual Basic], properties\"\n  - \"variables [Visual Basic], definition\"\n  - \"Visual Basic code, variables\"\n  - \"Visual Basic code, properties\"\n  - \"properties [Visual Basic], values\"\n  - \"properties [Visual Basic], defined\"\n  - \"variables [Visual Basic], and properties\"\n  - \"properties [Visual Basic], and variables\"\nms.assetid: 7a03a8be-5381-431f-bd7c-16e887e4e07b\n---\n# Differences Between Properties and Variables in Visual Basic\nVariables and properties both represent values that you can access. However, there are differences in storage and implementation.  \n  \n## Variables  \n A *variable* corresponds directly to a memory location. You define a variable with a single declaration statement. A variable can be a *local variable*, defined inside a procedure and available only within that procedure, or it can be a *member variable*, defined in a module, class, or structure but not inside any procedure. A member variable is also called a *field*.  \n  \n## Properties  \n A *property* is a data element defined on a module, class, or structure. You define a property with a code block between the `Property` and `End Property` statements. The code block contains a `Get` procedure, a `Set` procedure, or both. These procedures are called *property procedures* or *property accessors*. In addition to retrieving or storing the property's value, they can also perform custom actions, such as updating an access counter.  \n  \n## Differences  \n The following table shows some important differences between variables and properties.  \n  \n|Point of difference|Variable|Property|  \n|-------------------------|--------------|--------------|  \n|Declaration|Single declaration statement|Series of statements in a code block|  \n|Implementation|Single storage location|Executable code (property procedures)|  \n|Storage|Directly associated with variable's value|Typically has internal storage not available outside the property's containing class or module<br /><br /> Property's value might or might not exist as a stored element <sup>1</sup>|  \n|Executable code|None|Must have at least one procedure|  \n|Read and write access|Read/write or read-only|Read/write, read-only, or write-only|  \n|Custom actions (in addition to accepting or returning value)|Not possible|Can be performed as part of setting or retrieving property value|  \n  \n <sup>1</sup> Unlike a variable, the value of a property might not correspond directly to a single item of storage. The storage might be split into pieces for convenience or security, or the value might be stored in an encrypted form. In these cases the `Get` procedure would assemble the pieces or decrypt the stored value, and the `Set` procedure would encrypt the new value or split it into the constituent storage. A property value might be ephemeral, like time of day, in which case the `Get` procedure would calculate it on the fly each time you access the property.  \n  \n## See also\n\n- [Property Procedures](./property-procedures.md)\n- [Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)\n- [Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md)\n- [Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)\n- [How to: Create a Property](./how-to-create-a-property.md)\n- [How to: Declare a Property with Mixed Access Levels](./how-to-declare-a-property-with-mixed-access-levels.md)\n- [How to: Call a Property Procedure](./how-to-call-a-property-procedure.md)\n- [How to: Declare and Call a Default Property in Visual Basic](./how-to-declare-and-call-a-default-property.md)\n- [How to: Put a Value in a Property](./how-to-put-a-value-in-a-property.md)\n- [How to: Get a Value from a Property](./how-to-get-a-value-from-a-property.md)\n","nodes":[{"pos":[4,597],"embed":true,"restype":"x-metadata","content":"title: \"Differences Between Properties and Variables in Visual Basic\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"property values [Visual Basic]\"\n  - \"variables [Visual Basic]\"\n  - \"Visual Basic code, procedures\"\n  - \"values [Visual Basic], properties\"\n  - \"variables [Visual Basic], definition\"\n  - \"Visual Basic code, variables\"\n  - \"Visual Basic code, properties\"\n  - \"properties [Visual Basic], values\"\n  - \"properties [Visual Basic], defined\"\n  - \"variables [Visual Basic], and properties\"\n  - \"properties [Visual Basic], and variables\"\nms.assetid: 7a03a8be-5381-431f-bd7c-16e887e4e07b","nodes":[{"content":"Differences Between Properties and Variables in Visual Basic","nodes":[{"pos":[0,60],"content":"Differences Between Properties and Variables in Visual Basic","nodes":[{"content":"Differences Between Properties and Variables in Visual Basic","pos":[0,60]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[604,664],"content":"Differences Between Properties and Variables in Visual Basic","linkify":"Differences Between Properties and Variables in Visual Basic","nodes":[{"content":"Differences Between Properties and Variables in Visual Basic","pos":[0,60]}]},{"content":"Variables and properties both represent values that you can access.","pos":[665,732]},{"content":"However, there are differences in storage and implementation.","pos":[733,794]},{"pos":[803,812],"content":"Variables","linkify":"Variables","nodes":[{"content":"Variables","pos":[0,9]}]},{"content":"A <bpt id=\"p1\">*</bpt>variable<ept id=\"p1\">*</ept> corresponds directly to a memory location.","pos":[816,871],"source":"A *variable* corresponds directly to a memory location."},{"content":"You define a variable with a single declaration statement.","pos":[872,930]},{"content":"A variable can be a <bpt id=\"p1\">*</bpt>local variable<ept id=\"p1\">*</ept>, defined inside a procedure and available only within that procedure, or it can be a <bpt id=\"p2\">*</bpt>member variable<ept id=\"p2\">*</ept>, defined in a module, class, or structure but not inside any procedure.","pos":[931,1142],"source":" A variable can be a *local variable*, defined inside a procedure and available only within that procedure, or it can be a *member variable*, defined in a module, class, or structure but not inside any procedure."},{"content":"A member variable is also called a <bpt id=\"p1\">*</bpt>field<ept id=\"p1\">*</ept>.","pos":[1143,1186],"source":" A member variable is also called a *field*."},{"pos":[1195,1205],"content":"Properties","linkify":"Properties","nodes":[{"content":"Properties","pos":[0,10]}]},{"content":"A <bpt id=\"p1\">*</bpt>property<ept id=\"p1\">*</ept> is a data element defined on a module, class, or structure.","pos":[1209,1281],"source":"A *property* is a data element defined on a module, class, or structure."},{"content":"You define a property with a code block between the <ph id=\"ph1\">`Property`</ph> and <ph id=\"ph2\">`End Property`</ph> statements.","pos":[1282,1375],"source":" You define a property with a code block between the `Property` and `End Property` statements."},{"content":"The code block contains a <ph id=\"ph1\">`Get`</ph> procedure, a <ph id=\"ph2\">`Set`</ph> procedure, or both.","pos":[1376,1446],"source":" The code block contains a `Get` procedure, a `Set` procedure, or both."},{"content":"These procedures are called <bpt id=\"p1\">*</bpt>property procedures<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>property accessors<ept id=\"p2\">*</ept>.","pos":[1447,1521],"source":" These procedures are called *property procedures* or *property accessors*."},{"content":"In addition to retrieving or storing the property's value, they can also perform custom actions, such as updating an access counter.","pos":[1522,1654]},{"pos":[1663,1674],"content":"Differences","linkify":"Differences","nodes":[{"content":"Differences","pos":[0,11]}]},{"content":"The following table shows some important differences between variables and properties.","pos":[1678,1764]},{"content":"Point of difference","pos":[1771,1790]},{"content":"Variable","pos":[1791,1799]},{"content":"Property","pos":[1800,1808]},{"content":"Declaration","pos":[1873,1884]},{"content":"Single declaration statement","pos":[1885,1913]},{"content":"Series of statements in a code block","pos":[1914,1950]},{"content":"Implementation","pos":[1955,1969]},{"content":"Single storage location","pos":[1970,1993]},{"content":"Executable code (property procedures)","pos":[1994,2031]},{"content":"Storage","pos":[2036,2043]},{"content":"Directly associated with variable's value","pos":[2044,2085]},{"content":"Typically has internal storage not available outside the property's containing class or module","pos":[2086,2180]},{"content":"Property's value might or might not exist as a stored element <bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept>","pos":[2193,2267],"source":"Property's value might or might not exist as a stored element <sup>1</sup>"},{"content":"Executable code","pos":[2272,2287]},{"content":"None","pos":[2288,2292]},{"content":"Must have at least one procedure","pos":[2293,2325]},{"content":"Read and write access","pos":[2330,2351]},{"content":"Read/write or read-only","pos":[2352,2375]},{"content":"Read/write, read-only, or write-only","pos":[2376,2412]},{"content":"Custom actions (in addition to accepting or returning value)","pos":[2417,2477]},{"content":"Not possible","pos":[2478,2490]},{"content":"Can be performed as part of setting or retrieving property value","pos":[2491,2555]},{"content":"<bpt id=\"p1\">&lt;sup&gt;</bpt>1<ept id=\"p1\">&lt;/sup&gt;</ept> Unlike a variable, the value of a property might not correspond directly to a single item of storage.","pos":[2563,2677],"source":"<sup>1</sup> Unlike a variable, the value of a property might not correspond directly to a single item of storage."},{"content":"The storage might be split into pieces for convenience or security, or the value might be stored in an encrypted form.","pos":[2678,2796]},{"content":"In these cases the <ph id=\"ph1\">`Get`</ph> procedure would assemble the pieces or decrypt the stored value, and the <ph id=\"ph2\">`Set`</ph> procedure would encrypt the new value or split it into the constituent storage.","pos":[2797,2980],"source":" In these cases the `Get` procedure would assemble the pieces or decrypt the stored value, and the `Set` procedure would encrypt the new value or split it into the constituent storage."},{"content":"A property value might be ephemeral, like time of day, in which case the <ph id=\"ph1\">`Get`</ph> procedure would calculate it on the fly each time you access the property.","pos":[2981,3134],"source":" A property value might be ephemeral, like time of day, in which case the `Get` procedure would calculate it on the fly each time you access the property."},{"pos":[3143,3151],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3155,3202],"content":"<bpt id=\"p1\">[</bpt>Property Procedures<ept id=\"p1\">](./property-procedures.md)</ept>","source":"[Property Procedures](./property-procedures.md)"},{"pos":[3205,3282],"content":"<bpt id=\"p1\">[</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](./procedure-parameters-and-arguments.md)</ept>","source":"[Procedure Parameters and Arguments](./procedure-parameters-and-arguments.md)"},{"pos":[3285,3383],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[3386,3474],"content":"<bpt id=\"p1\">[</bpt>Dim Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept>","source":"[Dim Statement](../../../../visual-basic/language-reference/statements/dim-statement.md)"},{"pos":[3477,3535],"content":"<bpt id=\"p1\">[</bpt>How to: Create a Property<ept id=\"p1\">](./how-to-create-a-property.md)</ept>","source":"[How to: Create a Property](./how-to-create-a-property.md)"},{"pos":[3538,3648],"content":"<bpt id=\"p1\">[</bpt>How to: Declare a Property with Mixed Access Levels<ept id=\"p1\">](./how-to-declare-a-property-with-mixed-access-levels.md)</ept>","source":"[How to: Declare a Property with Mixed Access Levels](./how-to-declare-a-property-with-mixed-access-levels.md)"},{"pos":[3651,3725],"content":"<bpt id=\"p1\">[</bpt>How to: Call a Property Procedure<ept id=\"p1\">](./how-to-call-a-property-procedure.md)</ept>","source":"[How to: Call a Property Procedure](./how-to-call-a-property-procedure.md)"},{"pos":[3728,3838],"content":"<bpt id=\"p1\">[</bpt>How to: Declare and Call a Default Property in Visual Basic<ept id=\"p1\">](./how-to-declare-and-call-a-default-property.md)</ept>","source":"[How to: Declare and Call a Default Property in Visual Basic](./how-to-declare-and-call-a-default-property.md)"},{"pos":[3841,3915],"content":"<bpt id=\"p1\">[</bpt>How to: Put a Value in a Property<ept id=\"p1\">](./how-to-put-a-value-in-a-property.md)</ept>","source":"[How to: Put a Value in a Property](./how-to-put-a-value-in-a-property.md)"},{"pos":[3918,3996],"content":"<bpt id=\"p1\">[</bpt>How to: Get a Value from a Property<ept id=\"p1\">](./how-to-get-a-value-from-a-property.md)</ept>","source":"[How to: Get a Value from a Property](./how-to-get-a-value-from-a-property.md)"}]}