{"content":"---\ntitle: \"Data Display Modes in the Windows Forms DataGridView Control | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"data [Windows Forms], display modes\"\n  - \"data grids, display modes\"\n  - \"DataGridView control [Windows Forms], display modes\"\nms.assetid: 9755a030-3f3f-4705-a661-ba5a48a81875\ncaps.latest.revision: 13\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# Data Display Modes in the Windows Forms DataGridView Control\nThe <xref:System.Windows.Forms.DataGridView> control can display data in three distinct modes: bound, unbound, and virtual. Choose the most suitable mode based on your requirements.  \n  \n## Unbound  \n Unbound mode is suitable for displaying relatively small amounts of data that you manage programmatically. You do not attach the <xref:System.Windows.Forms.DataGridView> control directly to a data source as in bound mode. Instead, you must populate the control yourself, typically by using the <xref:System.Windows.Forms.DataGridViewRowCollection.Add%2A?displayProperty=fullName> method.  \n  \n Unbound mode can be particularly useful for static, read-only data, or when you want to provide your own code that interacts with an external data store. When you want your users to interact with an external data source, however, you will typically use bound mode.  \n  \n For an example that uses a read-only unbound <xref:System.Windows.Forms.DataGridView>, see [How to: Create an Unbound Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/how-to-create-an-unbound-windows-forms-datagridview-control.md).  \n  \n## Bound  \n Bound mode is suitable for managing data using automatic interaction with the data store. You can attach the <xref:System.Windows.Forms.DataGridView> control directly to its data source by setting the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property. When the control is data bound, data rows are pushed and pulled without the need of explicit management on your part. When the <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> property is `true`, each column in your data source will cause a corresponding column to be created in the control. If you prefer to create your own columns, you can set this property to `false` and use the <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A> property to bind each column when you configure it. This is useful when you want to use a column type other than the types that are generated by default. For more information, see [Column Types in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/column-types-in-the-windows-forms-datagridview-control.md).  \n  \n For an example that uses a bound <xref:System.Windows.Forms.DataGridView> control, see [Walkthrough: Validating Data in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/walkthrough-validating-data-in-the-windows-forms-datagridview-control.md).  \n  \n You can also add unbound columns to a <xref:System.Windows.Forms.DataGridView> control in bound mode. This is useful when you want to display a column of buttons or links that enable users to perform actions on specific rows. It is also useful to display columns with values calculated from bound columns. You can populate the cell values for calculated columns in a handler for the <xref:System.Windows.Forms.DataGridView.CellFormatting> event. If you are using a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> as the data source, however, you might want to use the <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName> property to create a calculated column instead. In this case, the <xref:System.Windows.Forms.DataGridView> control will treat calculated column just like any other column in the data source.  \n  \n Sorting by unbound columns in bound mode is not supported. If you create an unbound column in bound mode that contains user-editable values, you must implement virtual mode to maintain these values when the control is sorted by a bound column.  \n  \n## Virtual  \n With virtual mode, you can implement your own data management operations. This is necessary to maintain the values of unbound columns in bound mode when the control is sorted by bound columns. The primary use of virtual mode, however, is to optimize performance when interacting with large amounts of data.  \n  \n You attach the <xref:System.Windows.Forms.DataGridView> control to a cache that you manage, and your code controls when data rows are pushed and pulled. To keep the memory footprint small, the cache should be similar in size to the number of rows currently displayed. When the user scrolls new rows into view, your code requests new data from the cache and optionally flushes old data from memory.  \n  \n When you are implementing virtual mode, you will need to track when a new row is needed in the data model and when to rollback the addition of the new row. The exact implementation of this functionality will depend on the implementation of the data model and the transaction semantics of the data model; whether commit scope is at the cell or row level.  \n  \n For more information about virtual mode, see [Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control.md). For an example that shows how to use virtual mode events, see [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control.md).  \n  \n## See Also  \n <xref:System.Windows.Forms.DataGridView>   \n <xref:System.Windows.Forms.DataGridView.DataSource%2A?displayProperty=fullName>   \n <xref:System.Windows.Forms.DataGridView.VirtualMode%2A?displayProperty=fullName>   \n <xref:System.Windows.Forms.BindingSource>   \n <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName>   \n [Displaying Data in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/displaying-data-in-the-windows-forms-datagridview-control.md)   \n [Column Types in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/column-types-in-the-windows-forms-datagridview-control.md)   \n [Walkthrough: Creating an Unbound Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/walkthrough-creating-an-unbound-windows-forms-datagridview-control.md)   \n [How to: Bind Data to the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/how-to-bind-data-to-the-windows-forms-datagridview-control.md)   \n [Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control.md)   \n [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control.md)","nodes":[{"pos":[12,89],"content":"Data Display Modes in the Windows Forms DataGridView Control | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Data Display Modes in the Windows Forms DataGridView Control | Microsoft Docs","pos":[0,77]}]},{"pos":[581,641],"content":"Data Display Modes in the Windows Forms DataGridView Control","linkify":"Data Display Modes in the Windows Forms DataGridView Control","nodes":[{"content":"Data Display Modes in the Windows Forms DataGridView Control","pos":[0,60]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control can display data in three distinct modes: bound, unbound, and virtual.","pos":[642,765],"source":"The <xref:System.Windows.Forms.DataGridView> control can display data in three distinct modes: bound, unbound, and virtual."},{"content":"Choose the most suitable mode based on your requirements.","pos":[766,823]},{"pos":[832,839],"content":"Unbound","linkify":"Unbound","nodes":[{"content":"Unbound","pos":[0,7]}]},{"content":"Unbound mode is suitable for displaying relatively small amounts of data that you manage programmatically.","pos":[843,949]},{"content":"You do not attach the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control directly to a data source as in bound mode.","pos":[950,1064],"source":" You do not attach the <xref:System.Windows.Forms.DataGridView> control directly to a data source as in bound mode."},{"content":"Instead, you must populate the control yourself, typically by using the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewRowCollection.Add%2A?displayProperty=fullName&gt;</ph> method.","pos":[1065,1230],"source":" Instead, you must populate the control yourself, typically by using the <xref:System.Windows.Forms.DataGridViewRowCollection.Add%2A?displayProperty=fullName> method."},{"content":"Unbound mode can be particularly useful for static, read-only data, or when you want to provide your own code that interacts with an external data store.","pos":[1237,1390]},{"content":"When you want your users to interact with an external data source, however, you will typically use bound mode.","pos":[1391,1501]},{"pos":[1508,1771],"content":"For an example that uses a read-only unbound <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>, see <bpt id=\"p1\">[</bpt>How to: Create an Unbound Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-create-an-unbound-windows-forms-datagridview-control.md)</ept>.","source":"For an example that uses a read-only unbound <xref:System.Windows.Forms.DataGridView>, see [How to: Create an Unbound Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/how-to-create-an-unbound-windows-forms-datagridview-control.md)."},{"pos":[1780,1785],"content":"Bound","linkify":"Bound","nodes":[{"content":"Bound","pos":[0,5]}]},{"content":"Bound mode is suitable for managing data using automatic interaction with the data store.","pos":[1789,1878]},{"content":"You can attach the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control directly to its data source by setting the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridView.DataSource%2A&gt;</ph> property.","pos":[1879,2054],"source":" You can attach the <xref:System.Windows.Forms.DataGridView> control directly to its data source by setting the <xref:System.Windows.Forms.DataGridView.DataSource%2A> property."},{"content":"When the control is data bound, data rows are pushed and pulled without the need of explicit management on your part.","pos":[2055,2172]},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, each column in your data source will cause a corresponding column to be created in the control.","pos":[2173,2361],"source":" When the <xref:System.Windows.Forms.DataGridView.AutoGenerateColumns%2A> property is `true`, each column in your data source will cause a corresponding column to be created in the control."},{"content":"If you prefer to create your own columns, you can set this property to <ph id=\"ph1\">`false`</ph> and use the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A&gt;</ph> property to bind each column when you configure it.","pos":[2362,2571],"source":" If you prefer to create your own columns, you can set this property to `false` and use the <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A> property to bind each column when you configure it."},{"content":"This is useful when you want to use a column type other than the types that are generated by default.","pos":[2572,2673]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Column Types in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/column-types-in-the-windows-forms-datagridview-control.md)</ept>.","pos":[2674,2861],"source":" For more information, see [Column Types in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/column-types-in-the-windows-forms-datagridview-control.md)."},{"pos":[2868,3147],"content":"For an example that uses a bound <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control, see <bpt id=\"p1\">[</bpt>Walkthrough: Validating Data in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/walkthrough-validating-data-in-the-windows-forms-datagridview-control.md)</ept>.","source":"For an example that uses a bound <xref:System.Windows.Forms.DataGridView> control, see [Walkthrough: Validating Data in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/walkthrough-validating-data-in-the-windows-forms-datagridview-control.md)."},{"content":"You can also add unbound columns to a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control in bound mode.","pos":[3154,3255],"source":"You can also add unbound columns to a <xref:System.Windows.Forms.DataGridView> control in bound mode."},{"content":"This is useful when you want to display a column of buttons or links that enable users to perform actions on specific rows.","pos":[3256,3379]},{"content":"It is also useful to display columns with values calculated from bound columns.","pos":[3380,3459]},{"content":"You can populate the cell values for calculated columns in a handler for the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView.CellFormatting&gt;</ph> event.","pos":[3460,3599],"source":" You can populate the cell values for calculated columns in a handler for the <xref:System.Windows.Forms.DataGridView.CellFormatting> event."},{"content":"If you are using a <ph id=\"ph1\">&lt;xref:System.Data.DataSet&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Data.DataTable&gt;</ph> as the data source, however, you might want to use the <ph id=\"ph3\">&lt;xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName&gt;</ph> property to create a calculated column instead.","pos":[3600,3849],"source":" If you are using a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> as the data source, however, you might want to use the <xref:System.Data.DataColumn.Expression%2A?displayProperty=fullName> property to create a calculated column instead."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control will treat calculated column just like any other column in the data source.","pos":[3850,3992],"source":" In this case, the <xref:System.Windows.Forms.DataGridView> control will treat calculated column just like any other column in the data source."},{"content":"Sorting by unbound columns in bound mode is not supported.","pos":[3999,4057]},{"content":"If you create an unbound column in bound mode that contains user-editable values, you must implement virtual mode to maintain these values when the control is sorted by a bound column.","pos":[4058,4242]},{"pos":[4251,4258],"content":"Virtual","linkify":"Virtual","nodes":[{"content":"Virtual","pos":[0,7]}]},{"content":"With virtual mode, you can implement your own data management operations.","pos":[4262,4335]},{"content":"This is necessary to maintain the values of unbound columns in bound mode when the control is sorted by bound columns.","pos":[4336,4454]},{"content":"The primary use of virtual mode, however, is to optimize performance when interacting with large amounts of data.","pos":[4455,4568]},{"content":"You attach the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control to a cache that you manage, and your code controls when data rows are pushed and pulled.","pos":[4575,4727],"source":"You attach the <xref:System.Windows.Forms.DataGridView> control to a cache that you manage, and your code controls when data rows are pushed and pulled."},{"content":"To keep the memory footprint small, the cache should be similar in size to the number of rows currently displayed.","pos":[4728,4842]},{"content":"When the user scrolls new rows into view, your code requests new data from the cache and optionally flushes old data from memory.","pos":[4843,4972]},{"content":"When you are implementing virtual mode, you will need to track when a new row is needed in the data model and when to rollback the addition of the new row.","pos":[4979,5134]},{"content":"The exact implementation of this functionality will depend on the implementation of the data model and the transaction semantics of the data model; whether commit scope is at the cell or row level.","pos":[5135,5332]},{"content":"For more information about virtual mode, see <bpt id=\"p1\">[</bpt>Virtual Mode in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control.md)</ept>.","pos":[5339,5545],"source":"For more information about virtual mode, see [Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control.md)."},{"content":"For an example that shows how to use virtual mode events, see <bpt id=\"p1\">[</bpt>Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control.md)</ept>.","pos":[5546,5790],"source":" For an example that shows how to use virtual mode events, see [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control.md)."},{"pos":[5799,5807],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>","pos":[5811,5851],"source":"<xref:System.Windows.Forms.DataGridView> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView.DataSource%2A?displayProperty=fullName&gt;</ph>","pos":[5856,5935],"source":" <xref:System.Windows.Forms.DataGridView.DataSource%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridView.VirtualMode%2A?displayProperty=fullName&gt;</ph>","pos":[5940,6020],"source":" <xref:System.Windows.Forms.DataGridView.VirtualMode%2A?displayProperty=fullName> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.BindingSource&gt;</ph>","pos":[6025,6066],"source":" <xref:System.Windows.Forms.BindingSource> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName&gt;</ph>","pos":[6071,6162],"source":" <xref:System.Windows.Forms.DataGridViewColumn.DataPropertyName%2A?displayProperty=fullName> "},{"content":"<bpt id=\"p1\"> [</bpt>Displaying Data in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/displaying-data-in-the-windows-forms-datagridview-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[6166,6334],"source":" [Displaying Data in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/displaying-data-in-the-windows-forms-datagridview-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Column Types in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/column-types-in-the-windows-forms-datagridview-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[6337,6499],"source":" [Column Types in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/column-types-in-the-windows-forms-datagridview-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Walkthrough: Creating an Unbound Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/walkthrough-creating-an-unbound-windows-forms-datagridview-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[6502,6689],"source":" [Walkthrough: Creating an Unbound Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/walkthrough-creating-an-unbound-windows-forms-datagridview-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Bind Data to the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-bind-data-to-the-windows-forms-datagridview-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[6692,6863],"source":" [How to: Bind Data to the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/how-to-bind-data-to-the-windows-forms-datagridview-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Virtual Mode in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control.md)</ept><ph id=\"ph1\"> </ph>","pos":[6866,7028],"source":" [Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control<ept id=\"p1\">](../../../../docs/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control.md)</ept>","pos":[7031,7213],"source":" [Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control](../../../../docs/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control.md)"}]}