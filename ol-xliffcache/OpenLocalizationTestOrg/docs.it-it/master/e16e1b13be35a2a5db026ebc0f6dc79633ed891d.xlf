<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="icorprofilerinfo2-dostacksnapshot-method.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e16e1b13be35a2a5db026ebc0f6dc79633ed891d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\profiling\icorprofilerinfo2-dostacksnapshot-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfa4252e74fc1878e511d40fa92a8682453a8d40</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0166cfbf27a16a396b631ade5da101373a8e6633</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ICorProfilerInfo2::DoStackSnapshot Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ICorProfilerInfo2::DoStackSnapshot Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Walks the managed frames on the stack for the specified thread, and sends information to the profiler through a callback.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] The ID of the target thread.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Passing null in <ph id="ph1">`thread`</ph> yields a snapshot of the current thread.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`ThreadID`</ph> of a different thread is passed, the common language runtime (CLR) suspends that thread, performs the snapshot, and resumes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the implementation of the <bpt id="p1">[</bpt>StackSnapshotCallback<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/stacksnapshotcallback-function.md)</ept> method, which is called by the CLR to provide the profiler with information on each managed frame and each run of unmanaged frames.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StackSnapshotCallback`</ph> method is implemented by the profiler writer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>[in] A value of the <bpt id="p1">[</bpt>COR_PRF_SNAPSHOT_INFO<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-snapshot-info-enumeration.md)</ept> enumeration, which specifies the amount of data to be passed back for each frame by <ph id="ph1">`StackSnapshotCallback`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the client data, which is passed straight through to the <ph id="ph1">`StackSnapshotCallback`</ph> callback function.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[in] A pointer to a Win32 <ph id="ph1">`CONTEXT`</ph> structure, which is used to seed the stack walk.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Win32 <ph id="ph1">`CONTEXT`</ph> structure contains values of the CPU registers and represents the state of the CPU at a particular moment in time.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The seed helps the CLR determine where to begin the stack walk, if the top of the stack is unmanaged helper code; otherwise, the seed is ignored.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A seed must be supplied for an asynchronous walk.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are doing a synchronous walk, no seed is necessary.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`context`</ph> parameter is valid only if the COR_PRF_SNAPSHOT_CONTEXT flag was passed in the <ph id="ph2">`infoFlags`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>[in] The size of the <ph id="ph1">`CONTEXT`</ph> structure, which is referenced by the <ph id="ph2">`context`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Passing null for <ph id="ph1">`thread`</ph> yields a snapshot of the current thread.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Snapshots can be taken of other threads only if the target thread is suspended at the time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When the profiler wants to walk the stack, it calls <ph id="ph1">`DoStackSnapshot`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Before the CLR returns from that call, it calls your <ph id="ph1">`StackSnapshotCallback`</ph> several times, once for each managed frame (or run of unmanaged frames) on the stack.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When unmanaged frames are encountered, you must walk them yourself.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The order in which the stack is walked is the reverse of how the frames were pushed onto the stack: leaf (last-pushed) frame first, main (first-pushed) frame last.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information about how to program the profiler to walk managed stacks, see <bpt id="p1">[</bpt>Profiler Stack Walking in the .NET Framework 2.0: Basics and Beyond<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=73638)</ept> in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A stack walk can be synchronous or asynchronous, as explained in the following sections.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Synchronous Stack Walk</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A synchronous stack walk involves walking the stack of the current thread in response to a callback.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It does not require seeding or suspending.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You make a synchronous call when, in response to the CLR calling one of your profiler's <bpt id="p1">[</bpt>ICorProfilerCallback<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept> (or <bpt id="p2">[</bpt>ICorProfilerCallback2<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-interface.md)</ept>) methods, you call <ph id="ph1">`DoStackSnapshot`</ph> to walk the stack of the current thread.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is useful when you want to see what the stack looks like at a notification such as <bpt id="p1">[</bpt>ICorProfilerCallback::ObjectAllocated<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectallocated-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You just call <ph id="ph1">`DoStackSnapshot`</ph> from within your <ph id="ph2">`ICorProfilerCallback`</ph> method, passing null in the <ph id="ph3">`context`</ph> and <ph id="ph4">`thread`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Asynchronous Stack Walk</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An asynchronous stack walk entails walking the stack of a different thread, or walking the stack of the current thread, not in response to a callback, but by hijacking the current thread's instruction pointer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An asynchronous walk requires a seed if the top of the stack is unmanaged code that is not part of a platform invoke (PInvoke) or COM call, but helper code in the CLR itself.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, code that does just-in-time (JIT) compiling or garbage collection is helper code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You obtain a seed by directly suspending the target thread and walking its stack yourself, until you find the topmost managed frame.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>After the target thread is suspended, get the target thread's current register context.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Next, determine whether the register context points to unmanaged code by calling <bpt id="p1">[</bpt>ICorProfilerInfo::GetFunctionFromIP<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getfunctionfromip-method.md)</ept> — if it returns a <ph id="ph1">`FunctionID`</ph> equal to zero, the frame is unmanaged code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Now, walk the stack until you reach the first managed frame, and then calculate the seed context based on the register context for that frame.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`DoStackSnapshot`</ph> with your seed context to begin the asynchronous stack walk.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you do not supply a seed, <ph id="ph1">`DoStackSnapshot`</ph> might skip managed frames at the top of the stack and, consequently, will give you an incomplete stack walk.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you do supply a seed, it must point to JIT-compiled or Native Image Generator (Ngen.exe)-generated code; otherwise, <ph id="ph1">`DoStackSnapshot`</ph> returns the failure code, CORPROF_E_STACKSNAPSHOT_UNMANAGED_CTX.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Asynchronous stack walks can easily cause deadlocks or access violations, unless you follow these guidelines:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you directly suspend threads, remember that only a thread that has never run managed code can suspend another thread.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Always block in your <bpt id="p1">[</bpt>ICorProfilerCallback::ThreadDestroyed<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-threaddestroyed-method.md)</ept> callback until that thread's stack walk is complete.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Do not hold a lock while your profiler calls into a CLR function that can trigger a garbage collection.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>That is, do not hold a lock if the owning thread might make a call that triggers a garbage collection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>There is also a risk of deadlock if you call <ph id="ph1">`DoStackSnapshot`</ph> from a thread that your profiler has created so that you can walk the stack of a separate target thread.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The first time the thread you created enters certain <ph id="ph1">`ICorProfilerInfo*`</ph> methods (including <ph id="ph2">`DoStackSnapshot`</ph>), the CLR will perform per-thread, CLR-specific initialization on that thread.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If your profiler has suspended the target thread whose stack you are trying to walk, and if that target thread happened to own a lock necessary for performing this per-thread initialization, a deadlock will occur.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To avoid this deadlock, make an initial call into <ph id="ph1">`DoStackSnapshot`</ph> from your profiler-created thread to walk a separate target thread, but do not suspend the target thread first.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This initial call ensures that the per-thread initialization can complete without deadlock.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`DoStackSnapshot`</ph> succeeds and reports at least one frame, after that point, it will be safe for that profiler-created thread to suspend any target thread and call <ph id="ph2">`DoStackSnapshot`</ph> to walk the stack of that target thread.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorProf.idl, CorProf.h</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorProfilerInfo Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorProfilerInfo2 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-interface.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>