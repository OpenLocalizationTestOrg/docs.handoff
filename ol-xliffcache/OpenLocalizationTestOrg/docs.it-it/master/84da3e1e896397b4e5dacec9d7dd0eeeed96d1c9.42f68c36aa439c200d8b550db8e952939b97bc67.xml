{"content":"---\ntitle: \"Task Cancellation\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, cancellation\"\n  - \"asynchronous task cancellation\"\nms.assetid: 3ecf1ea9-e399-4a6a-a0d6-8475f48dcb28\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Task Cancellation\nThe <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Task%601?displayProperty=nameWithType> classes support cancellation through the use of cancellation tokens in the .NET Framework. For more information, see [Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md). In the Task classes, cancellation involves cooperation between the user delegate, which represents a cancelable operation and the code that requested the cancellation.  A successful cancellation involves the requesting code calling the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method, and the user delegate terminating the operation in a timely manner. You can terminate the operation by using one of these options:  \n  \n-   By simply returning from the delegate. In many scenarios this is sufficient; however, a task instance that is canceled in this way transitions to the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion?displayProperty=nameWithType> state, not to the <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType> state.  \n  \n-   By throwing a <xref:System.OperationCanceledException> and passing it the token on which cancellation was requested. The preferred way to do this is to use the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method. A task that is canceled in this way transitions to the Canceled state, which the calling code can use to verify that the task responded to its cancellation request.  \n  \n The following example shows the basic pattern for task cancellation that throws the exception. Note that the token is passed to the user delegate and to the task instance itself.  \n  \n [!code-csharp[TPL_Cancellation#02](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_cancellation/cs/snippet02.cs#02)]\n [!code-vb[TPL_Cancellation#02](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_cancellation/vb/module1.vb#02)]  \n  \n For a more complete example, see [How to: Cancel a Task and Its Children](../../../docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).  \n  \n When a task instance observes an <xref:System.OperationCanceledException> thrown by user code, it compares the exception's token to its associated token (the one that was passed to the API that created the Task). If they are the same and the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns true, the task interprets this as acknowledging cancellation and transitions to the Canceled state. If you do not use a <xref:System.Threading.Tasks.Task.Wait%2A> or <xref:System.Threading.Tasks.Task.WaitAll%2A> method to wait for the task, then the task just sets its status to <xref:System.Threading.Tasks.TaskStatus.Canceled>.  \n  \n If you are waiting on a Task that transitions to the Canceled state, a <xref:System.Threading.Tasks.TaskCanceledException?displayProperty=nameWithType> exception (wrapped in an <xref:System.AggregateException> exception) is thrown. Note that this exception indicates successful cancellation instead of a faulty situation. Therefore, the task's <xref:System.Threading.Tasks.Task.Exception%2A> property returns `null`.  \n  \n If the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns false or if the exception's token does not match the Task's token, the <xref:System.OperationCanceledException> is treated like a normal exception, causing the Task to transition to the Faulted state. Also note that the presence of other exceptions will also cause the Task to transition to the Faulted state. You can get the status of the completed task in the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n It is possible that a task may continue to process some items after cancellation is requested.  \n  \n## See also\n\n- [Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md)\n- [How to: Cancel a Task and Its Children](../../../docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)\n","nodes":[{"pos":[4,291],"embed":true,"restype":"x-metadata","content":"title: \"Task Cancellation\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"tasks, cancellation\"\n  - \"asynchronous task cancellation\"\nms.assetid: 3ecf1ea9-e399-4a6a-a0d6-8475f48dcb28\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Task Cancellation","nodes":[{"pos":[0,17],"content":"Task Cancellation","nodes":[{"content":"Task Cancellation","pos":[0,17]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[298,315],"content":"Task Cancellation","linkify":"Task Cancellation","nodes":[{"content":"Task Cancellation","pos":[0,17]}]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task?displayProperty=nameWithType&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601?displayProperty=nameWithType&gt;</ph> classes support cancellation through the use of cancellation tokens in the .NET Framework.","pos":[316,546],"source":"The <xref:System.Threading.Tasks.Task?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Task%601?displayProperty=nameWithType> classes support cancellation through the use of cancellation tokens in the .NET Framework."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cancellation in Managed Threads<ept id=\"p1\">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept>.","pos":[547,676],"source":" For more information, see [Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md)."},{"content":"In the Task classes, cancellation involves cooperation between the user delegate, which represents a cancelable operation and the code that requested the cancellation.","pos":[677,844]},{"content":"A successful cancellation involves the requesting code calling the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType&gt;</ph> method, and the user delegate terminating the operation in a timely manner.","pos":[846,1075],"source":"  A successful cancellation involves the requesting code calling the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method, and the user delegate terminating the operation in a timely manner."},{"content":"You can terminate the operation by using one of these options:","pos":[1076,1138]},{"content":"By simply returning from the delegate.","pos":[1148,1186]},{"content":"In many scenarios this is sufficient; however, a task instance that is canceled in this way transitions to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.RanToCompletion?displayProperty=nameWithType&gt;</ph> state, not to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType&gt;</ph> state.","pos":[1187,1487],"source":" In many scenarios this is sufficient; however, a task instance that is canceled in this way transitions to the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion?displayProperty=nameWithType> state, not to the <xref:System.Threading.Tasks.TaskStatus.Canceled?displayProperty=nameWithType> state."},{"content":"By throwing a <ph id=\"ph1\">&lt;xref:System.OperationCanceledException&gt;</ph> and passing it the token on which cancellation was requested.","pos":[1497,1613],"source":"By throwing a <xref:System.OperationCanceledException> and passing it the token on which cancellation was requested."},{"content":"The preferred way to do this is to use the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A&gt;</ph> method.","pos":[1614,1738],"source":" The preferred way to do this is to use the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method."},{"content":"A task that is canceled in this way transitions to the Canceled state, which the calling code can use to verify that the task responded to its cancellation request.","pos":[1739,1903]},{"content":"The following example shows the basic pattern for task cancellation that throws the exception.","pos":[1910,2004]},{"content":"Note that the token is passed to the user delegate and to the task instance itself.","pos":[2005,2088]},{"pos":[2095,2340],"content":"[!code-csharp[TPL_Cancellation#02](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_cancellation/cs/snippet02.cs#02)]\n[!code-vb[TPL_Cancellation#02](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_cancellation/vb/module1.vb#02)]","leadings":[""," "],"nodes":[]},{"pos":[2347,2507],"content":"For a more complete example, see <bpt id=\"p1\">[</bpt>How to: Cancel a Task and Its Children<ept id=\"p1\">](../../../docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)</ept>.","source":"For a more complete example, see [How to: Cancel a Task and Its Children](../../../docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)."},{"content":"When a task instance observes an <ph id=\"ph1\">&lt;xref:System.OperationCanceledException&gt;</ph> thrown by user code, it compares the exception's token to its associated token (the one that was passed to the API that created the Task).","pos":[2514,2726],"source":"When a task instance observes an <xref:System.OperationCanceledException> thrown by user code, it compares the exception's token to its associated token (the one that was passed to the API that created the Task)."},{"content":"If they are the same and the token's <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property returns true, the task interprets this as acknowledging cancellation and transitions to the Canceled state.","pos":[2727,2949],"source":" If they are the same and the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns true, the task interprets this as acknowledging cancellation and transitions to the Canceled state."},{"content":"If you do not use a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.WaitAll%2A&gt;</ph> method to wait for the task, then the task just sets its status to <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph>.","pos":[2950,3179],"source":" If you do not use a <xref:System.Threading.Tasks.Task.Wait%2A> or <xref:System.Threading.Tasks.Task.WaitAll%2A> method to wait for the task, then the task just sets its status to <xref:System.Threading.Tasks.TaskStatus.Canceled>."},{"content":"If you are waiting on a Task that transitions to the Canceled state, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskCanceledException?displayProperty=nameWithType&gt;</ph> exception (wrapped in an <ph id=\"ph2\">&lt;xref:System.AggregateException&gt;</ph> exception) is thrown.","pos":[3186,3417],"source":"If you are waiting on a Task that transitions to the Canceled state, a <xref:System.Threading.Tasks.TaskCanceledException?displayProperty=nameWithType> exception (wrapped in an <xref:System.AggregateException> exception) is thrown."},{"content":"Note that this exception indicates successful cancellation instead of a faulty situation.","pos":[3418,3507]},{"content":"Therefore, the task's <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property returns <ph id=\"ph2\">`null`</ph>.","pos":[3508,3602],"source":" Therefore, the task's <xref:System.Threading.Tasks.Task.Exception%2A> property returns `null`."},{"content":"If the token's <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property returns false or if the exception's token does not match the Task's token, the <ph id=\"ph2\">&lt;xref:System.OperationCanceledException&gt;</ph> is treated like a normal exception, causing the Task to transition to the Faulted state.","pos":[3609,3910],"source":"If the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns false or if the exception's token does not match the Task's token, the <xref:System.OperationCanceledException> is treated like a normal exception, causing the Task to transition to the Faulted state."},{"content":"Also note that the presence of other exceptions will also cause the Task to transition to the Faulted state.","pos":[3911,4019]},{"content":"You can get the status of the completed task in the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[4020,4126],"source":" You can get the status of the completed task in the <xref:System.Threading.Tasks.Task.Status%2A> property."},{"content":"It is possible that a task may continue to process some items after cancellation is requested.","pos":[4133,4227]},{"pos":[4236,4244],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4248,4350],"content":"<bpt id=\"p1\">[</bpt>Cancellation in Managed Threads<ept id=\"p1\">](../../../docs/standard/threading/cancellation-in-managed-threads.md)</ept>","source":"[Cancellation in Managed Threads](../../../docs/standard/threading/cancellation-in-managed-threads.md)"},{"pos":[4353,4479],"content":"<bpt id=\"p1\">[</bpt>How to: Cancel a Task and Its Children<ept id=\"p1\">](../../../docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)</ept>","source":"[How to: Cancel a Task and Its Children](../../../docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)"}]}