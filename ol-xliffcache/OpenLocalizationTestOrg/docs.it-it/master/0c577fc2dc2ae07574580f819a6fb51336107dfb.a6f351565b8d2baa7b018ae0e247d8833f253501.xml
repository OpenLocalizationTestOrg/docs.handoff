{"content":"---\ntitle: \"How to: Query for Characters in a String (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 727a1be7-dbec-4ab8-b414-bc2d56feb6ff\n---\n# How to: Query for Characters in a String (LINQ) (C#)\nBecause the <xref:System.String> class implements the generic <xref:System.Collections.Generic.IEnumerable%601> interface, any string can be queried as a sequence of characters. However, this is not a common use of LINQ. For complex pattern matching operations, use the <xref:System.Text.RegularExpressions.Regex> class.  \n  \n## Example  \n The following example queries a string to determine the number of numeric digits it contains. Note that the query is \"reused\" after it is executed the first time. This is possible because the query itself does not store any actual results.  \n  \n```csharp  \nclass QueryAString  \n{  \n    static void Main()  \n    {  \n        string aString = \"ABCDE99F-J74-12-89A\";  \n  \n        // Select only those characters that are numbers  \n        IEnumerable<char> stringQuery =  \n          from ch in aString  \n          where Char.IsDigit(ch)  \n          select ch;  \n  \n        // Execute the query  \n        foreach (char c in stringQuery)  \n            Console.Write(c + \" \");  \n  \n        // Call the Count method on the existing query.  \n        int count = stringQuery.Count();  \n        Console.WriteLine(\"Count = {0}\", count);  \n  \n        // Select all characters before the first '-'  \n        IEnumerable<char> stringQuery2 = aString.TakeWhile(c => c != '-');  \n  \n        // Execute the second query  \n        foreach (char c in stringQuery2)  \n            Console.Write(c);  \n  \n        Console.WriteLine(System.Environment.NewLine + \"Press any key to exit\");  \n        Console.ReadKey();  \n    }  \n}  \n/* Output:  \n  Output: 9 9 7 4 1 2 8 9  \n  Count = 8  \n  ABCDE99F  \n*/  \n```  \n  \n## Compiling the Code  \n Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces.  \n  \n## See also\n\n- [LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)\n- [How to: Combine LINQ Queries with Regular Expressions (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-combine-linq-queries-with-regular-expressions.md)\n","nodes":[{"pos":[4,134],"embed":true,"restype":"x-metadata","content":"title: \"How to: Query for Characters in a String (LINQ) (C#)\"\nms.date: 07/20/2015\nms.assetid: 727a1be7-dbec-4ab8-b414-bc2d56feb6ff","nodes":[{"content":"How to: Query for Characters in a String (LINQ) (C#)","nodes":[{"pos":[0,52],"content":"How to: Query for Characters in a String (LINQ) (C#)","nodes":[{"content":"How to: Query for Characters in a String (LINQ) (C#)","pos":[0,52]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[141,193],"content":"How to: Query for Characters in a String (LINQ) (C#)","linkify":"How to: Query for Characters in a String (LINQ) (C#)","nodes":[{"content":"How to: Query for Characters in a String (LINQ) (C#)","pos":[0,52]}]},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class implements the generic <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, any string can be queried as a sequence of characters.","pos":[194,371],"source":"Because the <xref:System.String> class implements the generic <xref:System.Collections.Generic.IEnumerable%601> interface, any string can be queried as a sequence of characters."},{"content":"However, this is not a common use of LINQ.","pos":[372,414]},{"content":"For complex pattern matching operations, use the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class.","pos":[415,514],"source":" For complex pattern matching operations, use the <xref:System.Text.RegularExpressions.Regex> class."},{"pos":[523,530],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example queries a string to determine the number of numeric digits it contains.","pos":[534,627]},{"content":"Note that the query is \"reused\" after it is executed the first time.","pos":[628,696]},{"content":"This is possible because the query itself does not store any actual results.","pos":[697,773]},{"pos":[1825,1843],"content":"Compiling the Code","linkify":"Compiling the Code","nodes":[{"content":"Compiling the Code","pos":[0,18]}]},{"pos":[1847,2024],"content":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id=\"ph1\">`using`</ph> directives for the System.Linq and System.IO namespaces.","source":"Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and `using` directives for the System.Linq and System.IO namespaces."},{"pos":[2033,2041],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2045,2140],"content":"<bpt id=\"p1\">[</bpt>LINQ and Strings (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept>","source":"[LINQ and Strings (C#)](../../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)"},{"pos":[2143,2311],"content":"<bpt id=\"p1\">[</bpt>How to: Combine LINQ Queries with Regular Expressions (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/how-to-combine-linq-queries-with-regular-expressions.md)</ept>","source":"[How to: Combine LINQ Queries with Regular Expressions (C#)](../../../../csharp/programming-guide/concepts/linq/how-to-combine-linq-queries-with-regular-expressions.md)"}]}