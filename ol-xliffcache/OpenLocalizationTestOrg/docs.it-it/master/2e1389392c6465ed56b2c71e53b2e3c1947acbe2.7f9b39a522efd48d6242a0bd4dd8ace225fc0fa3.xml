{"content":"---\ntitle: \"How to: Set a Property After Animating It with a Storyboard\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"animation [WPF], changing property values after\"\nms.assetid: 79466556-4dbf-40bd-9c1e-a77613b07077\n---\n# How to: Set a Property After Animating It with a Storyboard\nIn some cases, it might appear that you can't change the value of a property after it has been animated.  \n  \n## Example  \n In the following example, a <xref:System.Windows.Media.Animation.Storyboard> is used to animate the color of a <xref:System.Windows.Media.SolidColorBrush>. The storyboard is triggered when the button is clicked. The <xref:System.Windows.Media.Animation.Timeline.Completed> event is handled so that the program is notified when the <xref:System.Windows.Media.Animation.ColorAnimation> completes.  \n  \n [!code-xaml[timingbehaviors_snip#GraphicsMMButton1Declaration](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml#graphicsmmbutton1declaration)]  \n  \n## Example  \n After the <xref:System.Windows.Media.Animation.ColorAnimation> completes, the program attempts to change the brush's color to blue.  \n  \n [!code-csharp[timingbehaviors_snip#GraphicsMMButton1Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml.cs#graphicsmmbutton1handler)]\n [!code-vb[timingbehaviors_snip#GraphicsMMButton1Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_snip/visualbasic/animatethensetpropertyexample.xaml.vb#graphicsmmbutton1handler)]  \n  \n The previous code doesn't appear to do anything: the brush remains yellow, which is the value supplied by the <xref:System.Windows.Media.Animation.ColorAnimation> that animated the brush. The underlying property value (the base value) is actually changed to blue. However, the effective, or current, value remains yellow because the <xref:System.Windows.Media.Animation.ColorAnimation> is still overriding the base value. If you want the base value to become the effective value again, you must stop the animation from influencing the property. There are three ways to do this with storyboard animations:  \n  \n-   Set the animation's <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> property to <xref:System.Windows.Media.Animation.FillBehavior.Stop>  \n  \n-   Remove the entire Storyboard.  \n  \n-   Remove the animation from the individual property.  \n  \n## Set the animation's FillBehavior property to Stop  \n By setting <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> to <xref:System.Windows.Media.Animation.FillBehavior.Stop>, you tell the animation to stop affecting its target property after it reaches the end of its active period.  \n  \n [!code-xaml[timingbehaviors_snip#GraphicsMMButton2Declaration](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml#graphicsmmbutton2declaration)]  \n  \n [!code-csharp[timingbehaviors_snip#GraphicsMMButton2Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml.cs#graphicsmmbutton2handler)]\n [!code-vb[timingbehaviors_snip#GraphicsMMButton2Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_snip/visualbasic/animatethensetpropertyexample.xaml.vb#graphicsmmbutton2handler)]  \n  \n## Remove the entire storyboard  \n By using a <xref:System.Windows.Media.Animation.RemoveStoryboard> trigger or the <xref:System.Windows.Media.Animation.Storyboard.Remove%2A?displayProperty=nameWithType> method, you tell the storyboard animations to stop affecting their target properties. The difference between this approach and setting the <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> property is that you can remove the storyboard at anytime, while the <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> property only has an effect when the animation reaches the end of its active period.  \n  \n [!code-xaml[timingbehaviors_snip#GraphicsMMButton3Declaration](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml#graphicsmmbutton3declaration)]  \n  \n [!code-csharp[timingbehaviors_snip#GraphicsMMButton3Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml.cs#graphicsmmbutton3handler)]\n [!code-vb[timingbehaviors_snip#GraphicsMMButton3Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_snip/visualbasic/animatethensetpropertyexample.xaml.vb#graphicsmmbutton3handler)]  \n  \n## Remove an animation from an individual property  \n Another technique to stop an animation from affecting a property is to use the <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the object being animated. Specify the property being animated as the first parameter and `null` as the second.  \n  \n [!code-xaml[timingbehaviors_snip#GraphicsMMButton4Declaration](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml#graphicsmmbutton4declaration)]  \n  \n [!code-csharp[timingbehaviors_snip#GraphicsMMButton4Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_snip/CSharp/AnimateThenSetPropertyExample.xaml.cs#graphicsmmbutton4handler)]\n [!code-vb[timingbehaviors_snip#GraphicsMMButton4Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_snip/visualbasic/animatethensetpropertyexample.xaml.vb#graphicsmmbutton4handler)]  \n  \n This technique also works for non-storyboard animations.  \n  \n## See also\n\n- <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>\n- <xref:System.Windows.Media.Animation.Storyboard.Remove%2A?displayProperty=nameWithType>\n- <xref:System.Windows.Media.Animation.RemoveStoryboard>\n- [Animation Overview](animation-overview.md)\n- [Property Animation Techniques Overview](property-animation-techniques-overview.md)\n","nodes":[{"pos":[4,253],"embed":true,"restype":"x-metadata","content":"title: \"How to: Set a Property After Animating It with a Storyboard\"\nms.date: \"03/30/2017\"\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"animation [WPF], changing property values after\"\nms.assetid: 79466556-4dbf-40bd-9c1e-a77613b07077","nodes":[{"content":"How to: Set a Property After Animating It with a Storyboard","nodes":[{"pos":[0,59],"content":"How to: Set a Property After Animating It with a Storyboard","nodes":[{"content":"How to: Set a Property After Animating It with a Storyboard","pos":[0,59]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[260,319],"content":"How to: Set a Property After Animating It with a Storyboard","linkify":"How to: Set a Property After Animating It with a Storyboard","nodes":[{"content":"How to: Set a Property After Animating It with a Storyboard","pos":[0,59]}]},{"content":"In some cases, it might appear that you can't change the value of a property after it has been animated.","pos":[320,424]},{"pos":[433,440],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In the following example, a <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> is used to animate the color of a <ph id=\"ph2\">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>.","pos":[444,599],"source":"In the following example, a <xref:System.Windows.Media.Animation.Storyboard> is used to animate the color of a <xref:System.Windows.Media.SolidColorBrush>."},{"content":"The storyboard is triggered when the button is clicked.","pos":[600,655]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.Completed&gt;</ph> event is handled so that the program is notified when the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.ColorAnimation&gt;</ph> completes.","pos":[656,838],"source":" The <xref:System.Windows.Media.Animation.Timeline.Completed> event is handled so that the program is notified when the <xref:System.Windows.Media.Animation.ColorAnimation> completes."},{"pos":[1052,1059],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1063,1194],"content":"After the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.ColorAnimation&gt;</ph> completes, the program attempts to change the brush's color to blue.","source":"After the <xref:System.Windows.Media.Animation.ColorAnimation> completes, the program attempts to change the brush's color to blue."},{"content":"The previous code doesn't appear to do anything: the brush remains yellow, which is the value supplied by the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.ColorAnimation&gt;</ph> that animated the brush.","pos":[1606,1793],"source":"The previous code doesn't appear to do anything: the brush remains yellow, which is the value supplied by the <xref:System.Windows.Media.Animation.ColorAnimation> that animated the brush."},{"content":"The underlying property value (the base value) is actually changed to blue.","pos":[1794,1869]},{"content":"However, the effective, or current, value remains yellow because the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.ColorAnimation&gt;</ph> is still overriding the base value.","pos":[1870,2027],"source":" However, the effective, or current, value remains yellow because the <xref:System.Windows.Media.Animation.ColorAnimation> is still overriding the base value."},{"content":"If you want the base value to become the effective value again, you must stop the animation from influencing the property.","pos":[2028,2150]},{"content":"There are three ways to do this with storyboard animations:","pos":[2151,2210]},{"pos":[2220,2370],"content":"Set the animation's <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> property to <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.FillBehavior.Stop&gt;</ph>","source":"Set the animation's <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> property to <xref:System.Windows.Media.Animation.FillBehavior.Stop>"},{"content":"Remove the entire Storyboard.","pos":[2380,2409]},{"content":"Remove the animation from the individual property.","pos":[2419,2469]},{"pos":[2478,2527],"content":"Set the animation's FillBehavior property to Stop","linkify":"Set the animation's FillBehavior property to Stop","nodes":[{"content":"Set the animation's FillBehavior property to Stop","pos":[0,49]}]},{"pos":[2531,2772],"content":"By setting <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.FillBehavior.Stop&gt;</ph>, you tell the animation to stop affecting its target property after it reaches the end of its active period.","source":"By setting <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> to <xref:System.Windows.Media.Animation.FillBehavior.Stop>, you tell the animation to stop affecting its target property after it reaches the end of its active period."},{"pos":[3391,3419],"content":"Remove the entire storyboard","linkify":"Remove the entire storyboard","nodes":[{"content":"Remove the entire storyboard","pos":[0,28]}]},{"content":"By using a <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.RemoveStoryboard&gt;</ph> trigger or the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.Storyboard.Remove%2A?displayProperty=nameWithType&gt;</ph> method, you tell the storyboard animations to stop affecting their target properties.","pos":[3423,3677],"source":"By using a <xref:System.Windows.Media.Animation.RemoveStoryboard> trigger or the <xref:System.Windows.Media.Animation.Storyboard.Remove%2A?displayProperty=nameWithType> method, you tell the storyboard animations to stop affecting their target properties."},{"content":"The difference between this approach and setting the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> property is that you can remove the storyboard at anytime, while the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> property only has an effect when the animation reaches the end of its active period.","pos":[3678,4010],"source":" The difference between this approach and setting the <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> property is that you can remove the storyboard at anytime, while the <xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A> property only has an effect when the animation reaches the end of its active period."},{"pos":[4629,4676],"content":"Remove an animation from an individual property","linkify":"Remove an animation from an individual property","nodes":[{"content":"Remove an animation from an individual property","pos":[0,47]}]},{"content":"Another technique to stop an animation from affecting a property is to use the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the object being animated.","pos":[4680,4949],"source":"Another technique to stop an animation from affecting a property is to use the <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the object being animated."},{"content":"Specify the property being animated as the first parameter and <ph id=\"ph1\">`null`</ph> as the second.","pos":[4950,5034],"source":" Specify the property being animated as the first parameter and `null` as the second."},{"content":"This technique also works for non-storyboard animations.","pos":[5651,5707]},{"pos":[5716,5724],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[5940,5983],"content":"<bpt id=\"p1\">[</bpt>Animation Overview<ept id=\"p1\">](animation-overview.md)</ept>","source":"[Animation Overview](animation-overview.md)"},{"pos":[5986,6069],"content":"<bpt id=\"p1\">[</bpt>Property Animation Techniques Overview<ept id=\"p1\">](property-animation-techniques-overview.md)</ept>","source":"[Property Animation Techniques Overview](property-animation-techniques-overview.md)"}]}