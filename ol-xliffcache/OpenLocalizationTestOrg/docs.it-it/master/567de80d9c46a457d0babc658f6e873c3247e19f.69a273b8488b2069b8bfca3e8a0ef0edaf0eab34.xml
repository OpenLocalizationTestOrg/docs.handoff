{"content":"---\ntitle: \"'New' cannot be used on a type parameter that does not have a 'New' constraint\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32046\"\n  - \"vbc32046\"\nhelpviewer_keywords: \n  - \"BC32046\"\nms.assetid: 7ec6b52d-6fd5-47a0-b4a2-163bfd3dae35\n---\n# 'New' cannot be used on a type parameter that does not have a 'New' constraint\nA declaration statement uses a [New Operator](../../visual-basic/language-reference/operators/new-operator.md) clause specifying a type parameter as the type to be created, and the type parameter is declared without a `New` constraint.  \n  \n A *constraint* on a type parameter imposes a requirement on any type argument passed to that type parameter when the generic type is created. The `New` constraint specifies that the type argument must expose a parameterless constructor that the creating code can access. This is what allows a `New` clause in a declaration statement to create an instance of that type.  \n  \n **Error ID:** BC32046  \n  \n## To correct this error  \n  \n-   If you can require the type argument to expose an accessible parameterless constructor, add the `New` constraint to the declaration of the type parameter.  \n  \n-   If you cannot require the type argument to expose an accessible parameterless constructor, remove the `New` clause from the declaration statement. You cannot guarantee that any type argument passed to that type parameter permits creation of an instance.  \n  \n## See also\n\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [Type List](../../visual-basic/language-reference/statements/type-list.md)\n","nodes":[{"pos":[4,239],"embed":true,"restype":"x-metadata","content":"title: \"'New' cannot be used on a type parameter that does not have a 'New' constraint\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"bc32046\"\n  - \"vbc32046\"\nhelpviewer_keywords: \n  - \"BC32046\"\nms.assetid: 7ec6b52d-6fd5-47a0-b4a2-163bfd3dae35","nodes":[{"content":"'New' cannot be used on a type parameter that does not have a 'New' constraint","nodes":[{"pos":[0,78],"content":"'New' cannot be used on a type parameter that does not have a 'New' constraint","nodes":[{"content":"'New' cannot be used on a type parameter that does not have a 'New' constraint","pos":[0,78]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[246,324],"content":"'New' cannot be used on a type parameter that does not have a 'New' constraint","linkify":"'New' cannot be used on a type parameter that does not have a 'New' constraint","nodes":[{"content":"'New' cannot be used on a type parameter that does not have a 'New' constraint","pos":[0,78]}]},{"pos":[325,560],"content":"A declaration statement uses a <bpt id=\"p1\">[</bpt>New Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/new-operator.md)</ept> clause specifying a type parameter as the type to be created, and the type parameter is declared without a <ph id=\"ph1\">`New`</ph> constraint.","source":"A declaration statement uses a [New Operator](../../visual-basic/language-reference/operators/new-operator.md) clause specifying a type parameter as the type to be created, and the type parameter is declared without a `New` constraint."},{"content":"A <bpt id=\"p1\">*</bpt>constraint<ept id=\"p1\">*</ept> on a type parameter imposes a requirement on any type argument passed to that type parameter when the generic type is created.","pos":[567,708],"source":"A *constraint* on a type parameter imposes a requirement on any type argument passed to that type parameter when the generic type is created."},{"content":"The <ph id=\"ph1\">`New`</ph> constraint specifies that the type argument must expose a parameterless constructor that the creating code can access.","pos":[709,837],"source":" The `New` constraint specifies that the type argument must expose a parameterless constructor that the creating code can access."},{"content":"This is what allows a <ph id=\"ph1\">`New`</ph> clause in a declaration statement to create an instance of that type.","pos":[838,935],"source":" This is what allows a `New` clause in a declaration statement to create an instance of that type."},{"pos":[942,963],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32046","source":"**Error ID:** BC32046"},{"pos":[972,993],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1003,1157],"content":"If you can require the type argument to expose an accessible parameterless constructor, add the <ph id=\"ph1\">`New`</ph> constraint to the declaration of the type parameter.","source":"If you can require the type argument to expose an accessible parameterless constructor, add the `New` constraint to the declaration of the type parameter."},{"content":"If you cannot require the type argument to expose an accessible parameterless constructor, remove the <ph id=\"ph1\">`New`</ph> clause from the declaration statement.","pos":[1167,1313],"source":"If you cannot require the type argument to expose an accessible parameterless constructor, remove the `New` clause from the declaration statement."},{"content":"You cannot guarantee that any type argument passed to that type parameter permits creation of an instance.","pos":[1314,1420]},{"pos":[1429,1437],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1441,1556],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[1559,1633],"content":"<bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept>","source":"[Type List](../../visual-basic/language-reference/statements/type-list.md)"}]}