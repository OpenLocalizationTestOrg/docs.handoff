<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-control-the-fill-of-a-composite-shape.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b3ab1f7b81c296aa1ee766136b6c95b82cab105</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\how-to-control-the-fill-of-a-composite-shape.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d59b8a7a1bba44c19c77aa75ebeb94376e2cb58</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">629da05999b55c932f4a140efd529b38fa59dc10</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Control the Fill of a Composite Shape</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Control the Fill of a Composite Shape</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.GeometryGroup.FillRule%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Media.GeometryGroup&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>, specifies a "rule" which the composite shape uses to determine whether a given point is part of the geometry.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are two possible values for <ph id="ph1">&lt;xref:System.Windows.Media.FillRule&gt;</ph>: <ph id="ph2">&lt;xref:System.Windows.Media.FillRule.EvenOdd&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Media.FillRule.Nonzero&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following sections will describe how to use these two rules.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EvenOdd:<ept id="p1">**</ept> This rule determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction and counting the number of path segments within the given shape that the ray crosses.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If this number is odd, the point is inside; if even, the point is outside.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the XAML below creates a composite shape made up of a series of concentric rings (target) with a <ph id="ph1">&lt;xref:System.Windows.Media.GeometryGroup.FillRule%2A&gt;</ph> set to <ph id="ph2">&lt;xref:System.Windows.Media.FillRule.EvenOdd&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following illustration shows the shape created in the previous example.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: FillRule Property of EvenOdd<ept id="p1">]</ept><bpt id="p2">(./media/fillruleevenoddfirstone.png "</bpt>FillRuleEvenOddFirstOne<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the illustration above, notice that the center and 3rd ring are not filled.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is because a ray drawn from any point within either of those two rings passes through an even number of segments.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See illustration below:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: FillRule property value of EvenOdd<ept id="p1">]</ept><bpt id="p2">(./media/fillruleevenodd2.png "</bpt>FillRuleEvenOdd2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NonZero:<ept id="p1">**</ept> This rule determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Starting with a count of zero, add one each time a Segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>After counting the crossings, if the result is zero then the point is outside the path.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Otherwise, it is inside.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using the example above, a value of <ph id="ph1">&lt;xref:System.Windows.Media.FillRule.Nonzero&gt;</ph> for <ph id="ph2">&lt;xref:System.Windows.Media.GeometryGroup.FillRule%2A&gt;</ph> gives the following illustration as a result:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: FillRule value of NonZero<ept id="p1">]</ept><bpt id="p2">(./media/fillrulenonzero1.png "</bpt>FillRuleNonZero1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As you can see, all the rings are filled.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is because all the segments are running in the same direction and so a ray drawn from any point will cross one or more segments and the sum of the crossings will not equal zero.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, in the illustration below, the red arrows represent the direction the segments are drawn and the white arrow represents an arbitrary ray running from a point in the innermost ring.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Starting with a value of zero, for each segment that the ray crosses, a value of one is added because the segment crosses the ray from left to right.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: FillRule property value equal to NonZero<ept id="p1">]</ept><bpt id="p2">(./media/fillrulenonzero2.png "</bpt>FillRuleNonZero2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To better demonstrate the behavior of <ph id="ph1">&lt;xref:System.Windows.Media.FillRule.Nonzero&gt;</ph> rule a more complex shape with segments running in different directions is required.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The XAML code below creates a similar shape as the previous example except that it is created with a <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> rather then a <ph id="ph2">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> which creates four concentric arcs rather then fully closed concentric circles.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following illustration shows the shape created in the previous example.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: FillRule property value of NonZero<ept id="p1">]</ept><bpt id="p2">(./media/fillrulenonzero3.png "</bpt>FillRuleNonZero3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Notice that the third arc from the center is not filled.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The illustration below shows why this is.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the illustration, the red arrows represent the direction the segments are drawn.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The two white arrows represent two arbitrary rays that move out from a point in the "non-filled" region.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As can be seen from the illustration, the sum of the values from a given ray crossing the segments in its path is zero.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>As defined above, a sum of zero means that the point is not part of the geometry (not part of the fill) while a sum that is <bpt id="p1">*</bpt>not<ept id="p1">*</ept> zero, including a negative value, is part of the geometry.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: FillRule property value of NonZero<ept id="p1">]</ept><bpt id="p2">(./media/fillrulenonzero4.png "</bpt>FillRuleNonZero4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> For the purposes of <ph id="ph1">&lt;xref:System.Windows.Media.FillRule&gt;</ph>, all shapes are considered closed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If there is a gap in a segment, draw an imaginary line to close it.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the example above, there are small gaps in the rings.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Given this, one might expect a ray that runs through the gap to give a different result then a ray running in another direction.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Below is an enlarged illustration of one of these gaps and the "imaginary segment" (segment that is drawn for purposes of applying the <ph id="ph1">&lt;xref:System.Windows.Media.FillRule&gt;</ph>) that closes it.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: For FillRule, segments are always closed<ept id="p1">]</ept><bpt id="p2">(./media/fillruleclosedshapes.png "</bpt>FillRuleClosedShapes<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Composite Shape<ept id="p1">](how-to-create-a-composite-shape.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Geometry Overview<ept id="p1">](geometry-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>