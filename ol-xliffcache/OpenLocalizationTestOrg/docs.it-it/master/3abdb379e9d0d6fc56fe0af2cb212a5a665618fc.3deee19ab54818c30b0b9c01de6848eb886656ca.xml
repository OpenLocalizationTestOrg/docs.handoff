{"content":"---\ntitle: \"How to: Work with Dictionaries Using LINQ to XML (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 6cb3f969-1986-414a-b850-87418712edea\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\n---\n# How to: Work with Dictionaries Using LINQ to XML (Visual Basic)\nIt is often convenient to convert varieties of data structures to XML, and XML back to other data structures. This topic shows a specific implementation of this general approach by converting a <xref:System.Collections.Generic.Dictionary%602> to XML and back.  \n  \n## Example  \n This example uses XML literals and a query in an embedded expression. The query projects new <xref:System.Xml.Linq.XElement> objects, which then become the new content for the `Root` <xref:System.Xml.Linq.XElement> object.  \n  \n```vb  \nDim dict As Dictionary(Of String, String) = New Dictionary(Of String, String)()  \ndict.Add(\"Child1\", \"Value1\")  \ndict.Add(\"Child2\", \"Value2\")  \ndict.Add(\"Child3\", \"Value3\")  \ndict.Add(\"Child4\", \"Value4\")  \nDim root As XElement = _  \n    <Root>  \n        <%= From keyValue In dict _  \n            Select New XElement(keyValue.Key, keyValue.Value) %>  \n    </Root>  \nConsole.WriteLine(root)  \n```  \n  \n This code produces the following output:  \n  \n```xml  \n  \n          <Root>  \n  <Child1>Value1</Child1>  \n  <Child2>Value2</Child2>  \n  <Child3>Value3</Child3>  \n  <Child4>Value4</Child4>  \n</Root>  \n```  \n  \n## Example  \n The following code creates a dictionary from XML.  \n  \n```vb  \nDim root As XElement = _  \n        <Root>  \n            <Child1>Value1</Child1>  \n            <Child2>Value2</Child2>  \n            <Child3>Value3</Child3>  \n            <Child4>Value4</Child4>  \n        </Root>  \n  \nDim dict As Dictionary(Of String, String) = New Dictionary(Of String, String)  \nFor Each el As XElement In root.Elements  \n    dict.Add(el.Name.LocalName, el.Value)  \nNext  \nFor Each str As String In dict.Keys  \n    Console.WriteLine(\"{0}:{1}\", str, dict(str))  \nNext  \n```  \n  \n This code produces the following output:  \n  \n```  \nChild1:Value1  \nChild2:Value2  \nChild3:Value3  \nChild4:Value4  \n```  \n  \n## See Also  \n [Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)","nodes":[{"pos":[12,92],"content":"How to: Work with Dictionaries Using LINQ to XML (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Work with Dictionaries Using LINQ to XML (Visual Basic) | Microsoft Docs","pos":[0,80]}]},{"pos":[399,462],"content":"How to: Work with Dictionaries Using LINQ to XML (Visual Basic)","linkify":"How to: Work with Dictionaries Using LINQ to XML (Visual Basic)","nodes":[{"content":"How to: Work with Dictionaries Using LINQ to XML (Visual Basic)","pos":[0,63]}]},{"content":"It is often convenient to convert varieties of data structures to XML, and XML back to other data structures.","pos":[463,572]},{"content":"This topic shows a specific implementation of this general approach by converting a <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> to XML and back.","pos":[573,722],"source":" This topic shows a specific implementation of this general approach by converting a <xref:System.Collections.Generic.Dictionary%602> to XML and back."},{"pos":[731,738],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example uses XML literals and a query in an embedded expression.","pos":[742,811]},{"content":"The query projects new <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects, which then become the new content for the <ph id=\"ph2\">`Root`</ph> <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> object.","pos":[812,964],"source":" The query projects new <xref:System.Xml.Linq.XElement> objects, which then become the new content for the `Root` <xref:System.Xml.Linq.XElement> object."},{"content":"This code produces the following output:","pos":[1379,1419]},{"pos":[1590,1597],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code creates a dictionary from XML.","pos":[1601,1650]},{"content":"This code produces the following output:","pos":[2161,2201]},{"pos":[2289,2297],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[2301,2468],"content":"<bpt id=\"p1\">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept>","source":"[Projections and Transformations (LINQ to XML) (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)"}]}