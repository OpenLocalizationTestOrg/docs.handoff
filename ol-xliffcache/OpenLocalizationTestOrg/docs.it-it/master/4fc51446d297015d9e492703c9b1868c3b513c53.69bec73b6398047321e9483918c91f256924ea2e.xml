{"content":"---\ntitle: \"#if (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"#if\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"#if directive [C#]\"\nms.assetid: 48cabbff-ca82-491f-a56a-eeccd528c7c2\ncaps.latest.revision: 17\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# #if (C# Reference)\nWhen the C# compiler encounters an `#if` directive, followed eventually by an [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md) directive, it will compile the code between the directives only if the specified symbol is defined.  Unlike C and C++, you cannot assign a numeric value to a symbol; the #if statement in C# is Boolean and only tests whether the symbol has been defined or not. For example,  \n  \n```  \n#define DEBUG  \n// ...  \n#if DEBUG  \n    Console.WriteLine(\"Debug version\");  \n#endif  \n```  \n  \n You can use the operators [==](../../../csharp/language-reference/operators/equality-comparison-operator.md) (equality), [!=](../../../csharp/language-reference/operators/not-equal-operator.md) (inequality) only to test for [true](../../../csharp/language-reference/keywords/true.md) or [false](../../../csharp/language-reference/keywords/false.md) . True means the symbol is defined. The statement `#if DEBUG` has the same meaning as `#if (DEBUG == true)`. You can use the operators [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) (and), [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) (or), and [!](../../../csharp/language-reference/operators/logical-negation-operator.md) (not) to evaluate whether multiple symbols have been defined. You can also group symbols and operators with parentheses.  \n  \n## Remarks  \n `#if`, along with the [#else](../../../csharp/language-reference/preprocessor-directives/preprocessor-else.md), [#elif](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md), [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md), [#define](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md), and [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md) directives, lets you include or exclude code based on the existence of one or more symbols. This can be useful when compiling code for a debug build or when compiling for a specific configuration.  \n  \n A conditional directive beginning with a `#if` directive must explicitly be terminated with a `#endif` directive.  \n  \n `#define` lets you define a symbol, such that, by using the symbol as the expression passed to the `#if` directive, the expression will evaluate to `true`.  \n  \n You can also define a symbol with the [/define](../../../csharp/language-reference/compiler-options/define-compiler-option.md) compiler option. You can undefine a symbol with [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md).  \n  \n A symbol that you define with `/define` or with `#define` does not conflict with a variable of the same name. That is, a variable name should not be passed to a preprocessor directive and a symbol can only be evaluated by a preprocessor directive.  \n  \n The scope of a symbol created with `#define` is the file in which it was defined.  \n  \n## Example  \n  \n```  \n// preprocessor_if.cs  \n#define DEBUG#define MYTEST  \nusing System;  \npublic class MyClass   \n{  \n    static void Main()   \n    {  \n#if (DEBUG && !MYTEST)  \n        Console.WriteLine(\"DEBUG is defined\");  \n#elif (!DEBUG && MYTEST)  \n        Console.WriteLine(\"MYTEST is defined\");  \n#elif (DEBUG && MYTEST)  \n        Console.WriteLine(\"DEBUG and MYTEST are defined\");  \n#else  \n        Console.WriteLine(\"DEBUG and MYTEST are not defined\");  \n#endif  \n    }  \n}  \n```  \n  \n **DEBUG and MYTEST are defined**   \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Preprocessor Directives](../../../csharp/language-reference/preprocessor-directives/index.md)","nodes":[{"pos":[12,47],"content":"#if (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"if (C# Reference) | Microsoft Docs","pos":[1,35]}]},{"pos":[541,559],"content":"#if (C# Reference)","linkify":"#if (C# Reference)","nodes":[{"content":"#if (C# Reference)","pos":[0,18]}]},{"content":"When the C# compiler encounters an <ph id=\"ph1\">`#if`</ph> directive, followed eventually by an <bpt id=\"p1\">[</bpt>#endif<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md)</ept> directive, it will compile the code between the directives only if the specified symbol is defined.","pos":[560,828],"source":"When the C# compiler encounters an `#if` directive, followed eventually by an [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md) directive, it will compile the code between the directives only if the specified symbol is defined."},{"content":"Unlike C and C++, you cannot assign a numeric value to a symbol; the #if statement in C# is Boolean and only tests whether the symbol has been defined or not.","pos":[830,988]},{"content":"For example,","pos":[989,1001]},{"content":"You can use the operators <bpt id=\"p1\">[</bpt><ph id=\"ph1\">==</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/equality-comparison-operator.md)</ept> (equality), <bpt id=\"p2\">[</bpt>!=<ept id=\"p2\">](../../../csharp/language-reference/operators/not-equal-operator.md)</ept> (inequality) only to test for <bpt id=\"p3\">[</bpt>true<ept id=\"p3\">](../../../csharp/language-reference/keywords/true.md)</ept> or <bpt id=\"p4\">[</bpt>false<ept id=\"p4\">](../../../csharp/language-reference/keywords/false.md)</ept> .","pos":[1111,1461],"source":"You can use the operators [==](../../../csharp/language-reference/operators/equality-comparison-operator.md) (equality), [!=](../../../csharp/language-reference/operators/not-equal-operator.md) (inequality) only to test for [true](../../../csharp/language-reference/keywords/true.md) or [false](../../../csharp/language-reference/keywords/false.md) ."},{"content":"True means the symbol is defined.","pos":[1462,1495]},{"content":"The statement <ph id=\"ph1\">`#if DEBUG`</ph> has the same meaning as <ph id=\"ph2\">`#if (DEBUG == true)`</ph>.","pos":[1496,1568],"source":" The statement `#if DEBUG` has the same meaning as `#if (DEBUG == true)`."},{"content":"You can use the operators <bpt id=\"p1\">[</bpt><ph id=\"ph1\">&amp;&amp;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept> (and), <bpt id=\"p2\">[</bpt>&amp;#124;&amp;#124;<ept id=\"p2\">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept> (or), and <bpt id=\"p3\">[</bpt>!<ept id=\"p3\">](../../../csharp/language-reference/operators/logical-negation-operator.md)</ept>","pos":[1569,1857],"source":" You can use the operators [&&](../../../csharp/language-reference/operators/conditional-and-operator.md) (and), [&#124;&#124;](../../../csharp/language-reference/operators/conditional-or-operator.md) (or), and [!](../../../csharp/language-reference/operators/logical-negation-operator.md)"},{"content":"(not) to evaluate whether multiple symbols have been defined.","pos":[1858,1919]},{"content":"You can also group symbols and operators with parentheses.","pos":[1920,1978]},{"pos":[1987,1994],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"<ph id=\"ph1\">`#if`</ph>, along with the <bpt id=\"p1\">[</bpt>#else<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-else.md)</ept>, <bpt id=\"p2\">[</bpt>#elif<ept id=\"p2\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md)</ept>, <bpt id=\"p3\">[</bpt>#endif<ept id=\"p3\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md)</ept>, <bpt id=\"p4\">[</bpt>#define<ept id=\"p4\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md)</ept>, and <bpt id=\"p5\">[</bpt>#undef<ept id=\"p5\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept> directives, lets you include or exclude code based on the existence of one or more symbols.","pos":[1998,2572],"source":"`#if`, along with the [#else](../../../csharp/language-reference/preprocessor-directives/preprocessor-else.md), [#elif](../../../csharp/language-reference/preprocessor-directives/preprocessor-elif.md), [#endif](../../../csharp/language-reference/preprocessor-directives/preprocessor-endif.md), [#define](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md), and [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md) directives, lets you include or exclude code based on the existence of one or more symbols."},{"content":"This can be useful when compiling code for a debug build or when compiling for a specific configuration.","pos":[2573,2677]},{"pos":[2684,2797],"content":"A conditional directive beginning with a <ph id=\"ph1\">`#if`</ph> directive must explicitly be terminated with a <ph id=\"ph2\">`#endif`</ph> directive.","source":"A conditional directive beginning with a `#if` directive must explicitly be terminated with a `#endif` directive."},{"pos":[2804,2959],"content":"<ph id=\"ph1\">`#define`</ph> lets you define a symbol, such that, by using the symbol as the expression passed to the <ph id=\"ph2\">`#if`</ph> directive, the expression will evaluate to <ph id=\"ph3\">`true`</ph>.","source":"`#define` lets you define a symbol, such that, by using the symbol as the expression passed to the `#if` directive, the expression will evaluate to `true`."},{"content":"You can also define a symbol with the <bpt id=\"p1\">[</bpt>/define<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/define-compiler-option.md)</ept> compiler option.","pos":[2966,3109],"source":"You can also define a symbol with the [/define](../../../csharp/language-reference/compiler-options/define-compiler-option.md) compiler option."},{"content":"You can undefine a symbol with <bpt id=\"p1\">[</bpt>#undef<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)</ept>.","pos":[3110,3232],"source":" You can undefine a symbol with [#undef](../../../csharp/language-reference/preprocessor-directives/preprocessor-undef.md)."},{"content":"A symbol that you define with <ph id=\"ph1\">`/define`</ph> or with <ph id=\"ph2\">`#define`</ph> does not conflict with a variable of the same name.","pos":[3239,3348],"source":"A symbol that you define with `/define` or with `#define` does not conflict with a variable of the same name."},{"content":"That is, a variable name should not be passed to a preprocessor directive and a symbol can only be evaluated by a preprocessor directive.","pos":[3349,3486]},{"pos":[3493,3574],"content":"The scope of a symbol created with <ph id=\"ph1\">`#define`</ph> is the file in which it was defined.","source":"The scope of a symbol created with `#define` is the file in which it was defined."},{"pos":[3583,3590],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4076,4108],"content":"<bpt id=\"p1\">**</bpt>DEBUG and MYTEST are defined<ept id=\"p1\">**</ept>","source":"**DEBUG and MYTEST are defined**"},{"pos":[4115,4123],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4127,4187],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4190,4258],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Preprocessor Directives<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/index.md)</ept>","pos":[4261,4359],"source":" [C# Preprocessor Directives](../../../csharp/language-reference/preprocessor-directives/index.md)"}]}