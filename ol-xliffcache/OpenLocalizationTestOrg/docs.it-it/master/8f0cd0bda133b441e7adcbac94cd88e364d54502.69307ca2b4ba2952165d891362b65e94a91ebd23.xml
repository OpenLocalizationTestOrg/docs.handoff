{"content":"---\ntitle: \"Compiler Error CS0075 | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"CS0075\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"CS0075\"\nms.assetid: 5084d260-705e-4ff5-8f7a-7f74052fcbbb\ncaps.latest.revision: 7\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"ru-ru\"\n  - \"zh-cn\"\n  - \"zh-tw\"\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Compiler Error CS0075\nTo cast a negative value, you must enclose the value in parentheses  \n  \n If you are casting using a keyword that identifies a predefined type, then you do not need parentheses. Otherwise, you must put the parentheses because (x) –y will not be considered a cast expression. From the C# Specification, Section 7.6.6:  \n  \n *From the disambiguation rule it follows that, if x and y are identifiers, (x)y, (x)(y), and (x)(-y) are cast-expressions, but (x)-y is not, even if x identifies a type. However, if x is a keyword that identifies a predefined type (such as int), then all four forms are cast-expressions (because such a keyword could not possibly be an expression by itself).*  \n  \n The following code generates CS0075:  \n  \n```  \n// CS0075  \nnamespace MyNamespace  \n{  \n    enum MyEnum { }  \n    public class MyClass  \n    {  \n        public static void Main()  \n        {  \n            // To fix the error, place the negative  \n            // values below in parentheses  \n            int i = (System.Int32) - 4; //CS0075  \n            MyEnum e = (MyEnum) - 1;    //CS0075  \n            System.Console.WriteLine(i); //to avoid warning  \n            System.Console.WriteLine(e); //to avoid warning  \n        }  \n    }  \n}  \n```  \n  \n## See Also  \n [Casting and Type Conversions](../../csharp/programming-guide/types/casting-and-type-conversions.md)","nodes":[{"pos":[12,50],"content":"Compiler Error CS0075 | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Compiler Error CS0075 | Microsoft Docs","pos":[0,38]}]},{"pos":[565,586],"content":"Compiler Error CS0075","linkify":"Compiler Error CS0075","nodes":[{"content":"Compiler Error CS0075","pos":[0,21]}]},{"content":"To cast a negative value, you must enclose the value in parentheses","pos":[587,654]},{"content":"If you are casting using a keyword that identifies a predefined type, then you do not need parentheses.","pos":[661,764]},{"content":"Otherwise, you must put the parentheses because (x) –y will not be considered a cast expression.","pos":[765,861]},{"content":"From the C# Specification, Section 7.6.6:","pos":[862,903]},{"pos":[910,1269],"content":"<bpt id=\"p1\">*</bpt>From the disambiguation rule it follows that, if x and y are identifiers, (x)y, (x)(y), and (x)(-y) are cast-expressions, but (x)-y is not, even if x identifies a type. However, if x is a keyword that identifies a predefined type (such as int), then all four forms are cast-expressions (because such a keyword could not possibly be an expression by itself).<ept id=\"p1\">*</ept>","source":"*From the disambiguation rule it follows that, if x and y are identifiers, (x)y, (x)(y), and (x)(-y) are cast-expressions, but (x)-y is not, even if x identifies a type. However, if x is a keyword that identifies a predefined type (such as int), then all four forms are cast-expressions (because such a keyword could not possibly be an expression by itself).*"},{"content":"The following code generates CS0075:","pos":[1276,1312]},{"pos":[1830,1838],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1842,1942],"content":"<bpt id=\"p1\">[</bpt>Casting and Type Conversions<ept id=\"p1\">](../../csharp/programming-guide/types/casting-and-type-conversions.md)</ept>","source":"[Casting and Type Conversions](../../csharp/programming-guide/types/casting-and-type-conversions.md)"}]}