{"content":"---\ntitle: \"SqlClient Streaming Support | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: c449365b-470b-4edb-9d61-8353149f5531\ncaps.latest.revision: 14\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# SqlClient Streaming Support\nStreaming support between [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] and an application (new in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]) supports unstructured data on the server (documents, images, and media files). A [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] database can store binary large objects (BLOBs), but retrieving BLOBS can use a lot of memory.  \n  \n Streaming support to and from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] simplifies writing applications that stream data, without having to fully load the data into memory, resulting in fewer memory overflow exceptions.  \n  \n Streaming support will also enable middle-tier applications to scale better, especially in scenarios where business objects connect to SQL Azure in order to send, retrieve, and manipulate large BLOBs.  \n  \n> [!WARNING]\n>  Asynchronous calls are not supported if an application also uses the `Context Connection` connection string keyword.  \n>   \n>  The members added to support streaming are used to retrieve data from queries and to pass parameters to queries and stored procedures. The streaming feature addresses basic OLTP and data migration scenarios and is applicable to on premise and off premise data migrations.environments.  \n  \n## Streaming Support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]  \n Streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] introduces new functionality in the <xref:System.Data.Common.DbDataReader> and in the <xref:System.Data.SqlClient.SqlDataReader> classes in order to get <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>, and <xref:System.IO.TextReader> objects and react to them.  These classes are used to retrieve data from queries. As a result, Streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] addresses OLTP scenarios and applies to on-premise and off-premise environments.  \n  \n The following members were added to <xref:System.Data.SqlClient.SqlDataReader> to enable streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]:  \n  \n1.  <xref:System.Data.SqlClient.SqlDataReader.IsDBNullAsync%2A>  \n  \n2.  <xref:System.Data.SqlClient.SqlDataReader.GetFieldValue%2A?displayProperty=fullName>  \n  \n3.  <xref:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync%2A>  \n  \n4.  <xref:System.Data.SqlClient.SqlDataReader.GetStream%2A>  \n  \n5.  <xref:System.Data.SqlClient.SqlDataReader.GetTextReader%2A>  \n  \n6.  <xref:System.Data.SqlClient.SqlDataReader.GetXmlReader%2A>  \n  \n The following members were added to <xref:System.Data.Common.DbDataReader> to enable streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]:  \n  \n1.  <xref:System.Data.Common.DbDataReader.GetFieldValue%2A>  \n  \n2.  <xref:System.Data.Common.DbDataReader.GetStream%2A>  \n  \n3.  <xref:System.Data.Common.DbDataReader.GetTextReader%2A>  \n  \n## Streaming Support to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]  \n Streaming support to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] introduces new functionality in the <xref:System.Data.SqlClient.SqlParameter> class so it can accept and react to <xref:System.Xml.XmlReader>, <xref:System.IO.Stream>, and <xref:System.IO.TextReader> objects. <xref:System.Data.SqlClient.SqlParameter> is used to pass parameters to queries and stored procedures.  \n  \n Disposing a <xref:System.Data.SqlClient.SqlCommand> object or calling <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> must cancel any streaming operation. If an application sends <xref:System.Threading.CancellationToken>, cancellation is not guaranteed.  \n  \n The following <xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A> types will accept a <xref:System.Data.SqlClient.SqlParameter.Value%2A> of <xref:System.IO.Stream>:  \n  \n-   **Binary**  \n  \n-   **VarBinary**  \n  \n The following <xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A> types will accept a <xref:System.Data.SqlClient.SqlParameter.Value%2A> of <xref:System.IO.TextReader>:  \n  \n-   **Char**  \n  \n-   **NChar**  \n  \n-   **NVarChar**  \n  \n-   **Xml**  \n  \n The **Xml**<xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A> type will accept a <xref:System.Data.SqlClient.SqlParameter.Value%2A> of <xref:System.Xml.XmlReader>.  \n  \n <xref:System.Data.SqlClient.SqlParameter.SqlValue%2A> can accept values of type <xref:System.Xml.XmlReader>, <xref:System.IO.TextReader>, and <xref:System.IO.Stream>.  \n  \n The <xref:System.Xml.XmlReader>, <xref:System.IO.TextReader>, and <xref:System.IO.Stream> object will be transferred up to the value defined by the <xref:System.Data.SqlClient.SqlParameter.Size%2A>.  \n  \n## Sample -- Streaming from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]  \n Use the following [!INCLUDE[tsql](../../../../includes/tsql-md.md)] to create the sample database:  \n  \n```  \nCREATE DATABASE [Demo]  \nGO  \nUSE [Demo]  \nGO  \nCREATE TABLE [Streams] (  \n[id] INT PRIMARY KEY IDENTITY(1, 1),  \n[textdata] NVARCHAR(MAX),  \n[bindata] VARBINARY(MAX),  \n[xmldata] XML)  \nGO  \nINSERT INTO [Streams] (textdata, bindata, xmldata) VALUES (N'This is a test', 0x48656C6C6F, N'<test>value</test>')  \nINSERT INTO [Streams] (textdata, bindata, xmldata) VALUES (N'Hello, World!', 0x54657374696E67, N'<test>value2</test>')  \nINSERT INTO [Streams] (textdata, bindata, xmldata) VALUES (N'Another row', 0x666F6F626172, N'<fff>bbb</fff><fff>bbc</fff>')  \nGO  \n```  \n  \n The sample shows how to do the following:  \n  \n-   Avoid blocking a user-interface thread by providing an asynchronous way to retrieve large files.  \n  \n-   Transfer a large text file from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)].  \n  \n-   Transfer a large XML file from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)].  \n  \n-   Retrieve data from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)].  \n  \n-   Transfer large files (BLOBs) from one [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] database to another without running out of memory.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \nusing System.IO;  \nusing System.Threading.Tasks;  \nusing System.Xml;  \n  \nnamespace StreamingFromServer {  \n   class Program {  \n      // Replace the connection string if needed, for instance to connect to SQL Express: @\"Server=(local)\\SQLEXPRESS;Database=Demo;Integrated Security=true\"  \n      private const string connectionString = @\"Server=(localdb)\\V11.0;Database=Demo\";  \n  \n      static void Main(string[] args) {  \n         CopyBinaryValueToFile().Wait();  \n         PrintTextValues().Wait();  \n         PrintXmlValues().Wait();  \n         PrintXmlValuesViaNVarChar().Wait();  \n  \n         Console.WriteLine(\"Done\");  \n      }  \n  \n      // Application retrieving a large BLOB from SQL Server in .NET 4.5 using the new asynchronous capability  \n      private static async Task CopyBinaryValueToFile() {  \n         string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), \"binarydata.bin\");  \n  \n         using (SqlConnection connection = new SqlConnection(connectionString)) {  \n            await connection.OpenAsync();  \n            using (SqlCommand command = new SqlCommand(\"SELECT [bindata] FROM [Streams] WHERE [id]=@id\", connection)) {  \n               command.Parameters.AddWithValue(\"id\", 1);  \n  \n               // The reader needs to be executed with the SequentialAccess behavior to enable network streaming  \n               // Otherwise ReadAsync will buffer the entire BLOB into memory which can cause scalability issues or even OutOfMemoryExceptions  \n               using (SqlDataReader reader = await command.ExecuteReaderAsync(CommandBehavior.SequentialAccess)) {  \n                  if (await reader.ReadAsync()) {  \n                     if (!(await reader.IsDBNullAsync(0))) {  \n                        using (FileStream file = new FileStream(filePath, FileMode.Create, FileAccess.Write)) {  \n                           using (Stream data = reader.GetStream(0)) {  \n  \n                              // Asynchronously copy the stream from the server to the file we just created  \n                              await data.CopyToAsync(file);  \n                           }  \n                        }  \n                     }  \n                  }  \n               }  \n            }  \n         }  \n      }  \n  \n      // Application transferring a large Text File from SQL Server in .NET 4.5  \n      private static async Task PrintTextValues() {  \n         using (SqlConnection connection = new SqlConnection(connectionString)) {  \n            await connection.OpenAsync();  \n            using (SqlCommand command = new SqlCommand(\"SELECT [id], [textdata] FROM [Streams]\", connection)) {  \n  \n               // The reader needs to be executed with the SequentialAccess behavior to enable network streaming  \n               // Otherwise ReadAsync will buffer the entire text document into memory which can cause scalability issues or even OutOfMemoryExceptions  \n               using (SqlDataReader reader = await command.ExecuteReaderAsync(CommandBehavior.SequentialAccess)) {  \n                  while (await reader.ReadAsync()) {  \n                     Console.Write(\"{0}: \", reader.GetInt32(0));  \n  \n                     if (await reader.IsDBNullAsync(1)) {  \n                        Console.Write(\"(NULL)\");  \n                     }  \n                     else {  \n                        char[] buffer = new char[4096];  \n                        int charsRead = 0;  \n                        using (TextReader data = reader.GetTextReader(1)) {  \n                           do {  \n                              // Grab each chunk of text and write it to the console  \n                              // If you are writing to a TextWriter you should use WriteAsync or WriteLineAsync  \n                              charsRead = await data.ReadAsync(buffer, 0, buffer.Length);  \n                              Console.Write(buffer, 0, charsRead);  \n                           } while (charsRead > 0);  \n                        }  \n                     }  \n  \n                     Console.WriteLine();  \n                  }  \n               }  \n            }  \n         }  \n      }  \n  \n      // Application transferring a large Xml Document from SQL Server in .NET 4.5  \n      private static async Task PrintXmlValues() {  \n         using (SqlConnection connection = new SqlConnection(connectionString)) {  \n            await connection.OpenAsync();  \n            using (SqlCommand command = new SqlCommand(\"SELECT [id], [xmldata] FROM [Streams]\", connection)) {  \n  \n               // The reader needs to be executed with the SequentialAccess behavior to enable network streaming  \n               // Otherwise ReadAsync will buffer the entire Xml Document into memory which can cause scalability issues or even OutOfMemoryExceptions  \n               using (SqlDataReader reader = await command.ExecuteReaderAsync(CommandBehavior.SequentialAccess)) {  \n                  while (await reader.ReadAsync()) {  \n                     Console.WriteLine(\"{0}: \", reader.GetInt32(0));  \n  \n                     if (await reader.IsDBNullAsync(1)) {  \n                        Console.WriteLine(\"\\t(NULL)\");  \n                     }  \n                     else {  \n                        using (XmlReader xmlReader = reader.GetXmlReader(1)) {  \n                           int depth = 1;  \n                           // NOTE: The XmlReader returned by GetXmlReader does NOT support async operations  \n                           // See the example below (PrintXmlValuesViaNVarChar) for how to get an XmlReader with asynchronous capabilities  \n                           while (xmlReader.Read()) {  \n                              switch (xmlReader.NodeType) {  \n                                 case XmlNodeType.Element:  \n                                    Console.WriteLine(\"{0}<{1}>\", new string('\\t', depth), xmlReader.Name);  \n                                    depth++;  \n                                    break;  \n                                 case XmlNodeType.Text:  \n                                    Console.WriteLine(\"{0}{1}\", new string('\\t', depth), xmlReader.Value);  \n                                    break;  \n                                 case XmlNodeType.EndElement:  \n                                    depth--;  \n                                    Console.WriteLine(\"{0}</{1}>\", new string('\\t', depth), xmlReader.Name);  \n                                    break;  \n                              }  \n                           }  \n                        }  \n                     }  \n                  }  \n               }  \n            }  \n         }  \n      }  \n  \n      // Application transferring a large Xml Document from SQL Server in .NET 4.5  \n      // This goes via NVarChar and TextReader to enable asynchronous reading  \n      private static async Task PrintXmlValuesViaNVarChar() {  \n         XmlReaderSettings xmlSettings = new XmlReaderSettings() {  \n            // Async must be explicitly enabled in the XmlReaderSettings otherwise the XmlReader will throw exceptions when async methods are called  \n            Async = true,  \n            // Since we will immediately wrap the TextReader we are creating in an XmlReader, we will permit the XmlReader to take care of closing\\disposing it  \n            CloseInput = true,  \n            // If the Xml you are reading is not a valid document (as per http://msdn.microsoft.com/library/6bts1x50.aspx) you will need to set the conformance level to Fragment  \n            ConformanceLevel = ConformanceLevel.Fragment  \n         };  \n  \n         using (SqlConnection connection = new SqlConnection(connectionString)) {  \n            await connection.OpenAsync();  \n  \n            // Cast the XML into NVarChar to enable GetTextReader - trying to use GetTextReader on an XML type will throw an exception  \n            using (SqlCommand command = new SqlCommand(\"SELECT [id], CAST([xmldata] AS NVARCHAR(MAX)) FROM [Streams]\", connection)) {  \n  \n               // The reader needs to be executed with the SequentialAccess behavior to enable network streaming  \n               // Otherwise ReadAsync will buffer the entire Xml Document into memory which can cause scalability issues or even OutOfMemoryExceptions  \n               using (SqlDataReader reader = await command.ExecuteReaderAsync(CommandBehavior.SequentialAccess)) {  \n                  while (await reader.ReadAsync()) {  \n                     Console.WriteLine(\"{0}:\", reader.GetInt32(0));  \n  \n                     if (await reader.IsDBNullAsync(1)) {  \n                        Console.WriteLine(\"\\t(NULL)\");  \n                     }  \n                     else {  \n                        // Grab the row as a TextReader, then create an XmlReader on top of it  \n                        // We are not keeping a reference to the TextReader since the XmlReader is created with the \"CloseInput\" setting (so it will close the TextReader when needed)  \n                        using (XmlReader xmlReader = XmlReader.Create(reader.GetTextReader(1), xmlSettings)) {  \n                           int depth = 1;  \n                           // The XmlReader above now supports asynchronous operations, so we can use ReadAsync here  \n                           while (await xmlReader.ReadAsync()) {  \n                              switch (xmlReader.NodeType) {  \n                                 case XmlNodeType.Element:  \n                                    Console.WriteLine(\"{0}<{1}>\", new string('\\t', depth), xmlReader.Name);  \n                                    depth++;  \n                                    break;  \n                                 case XmlNodeType.Text:  \n                                    // Depending on what your data looks like, you should either use Value or GetValueAsync  \n                                    // Value has less overhead (since it doesn't create a Task), but it may also block if additional data is required  \n                                    Console.WriteLine(\"{0}{1}\", new string('\\t', depth), await xmlReader.GetValueAsync());  \n                                    break;  \n                                 case XmlNodeType.EndElement:  \n                                    depth--;  \n                                    Console.WriteLine(\"{0}</{1}>\", new string('\\t', depth), xmlReader.Name);  \n                                    break;  \n                              }  \n                           }  \n                        }  \n                     }  \n                  }  \n               }  \n            }  \n         }  \n      }  \n   }  \n}  \n  \n```  \n  \n## Sample -- Streaming to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]  \n Use the following [!INCLUDE[tsql](../../../../includes/tsql-md.md)] to create the sample database:  \n  \n```  \nCREATE DATABASE [Demo2]  \nGO  \nUSE [Demo2]  \nGO  \nCREATE TABLE [BinaryStreams] (  \n[id] INT PRIMARY KEY IDENTITY(1, 1),  \n[bindata] VARBINARY(MAX))  \nGO  \nCREATE TABLE [TextStreams] (  \n[id] INT PRIMARY KEY IDENTITY(1, 1),  \n[textdata] NVARCHAR(MAX))  \nGO  \nCREATE TABLE [BinaryStreamsCopy] (  \n[id] INT PRIMARY KEY IDENTITY(1, 1),  \n[bindata] VARBINARY(MAX))  \nGO  \n```  \n  \n The sample shows how to do the following:  \n  \n-   Transferring a large BLOB to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)].  \n  \n-   Transferring a large text file to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)].  \n  \n-   Using the new asynchronous feature to transfer a large BLOB.  \n  \n-   Using the new asynchronous feature and the await keyword to transfer a large BLOB.  \n  \n-   Cancelling the transfer of a large BLOB..  \n  \n-   Streaming from one [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] to another using the new asynchronous feature.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \nusing System.IO;  \nusing System.Threading;  \nusing System.Threading.Tasks;  \n  \nnamespace StreamingToServer {  \n   class Program {  \n      // Replace the connection string if needed, for instance to connect to SQL Express: @\"Server=(local)\\SQLEXPRESS;Database=Demo2;Integrated Security=true\"  \n      private const string connectionString = @\"Server=(localdb)\\V11.0;Database=Demo2\";  \n  \n      static void Main(string[] args) {  \n         CreateDemoFiles();  \n  \n         StreamBLOBToServer().Wait();  \n         StreamTextToServer().Wait();  \n  \n         // Create a CancellationTokenSource that will be cancelled after 100ms  \n         // Typically this token source will be cancelled by a user request (e.g. a Cancel button)  \n         CancellationTokenSource tokenSource = new CancellationTokenSource();  \n         tokenSource.CancelAfter(100);  \n         try {  \n            CancelBLOBStream(tokenSource.Token).Wait();  \n         }  \n         catch (AggregateException ex) {  \n            // Cancelling an async operation will throw an exception  \n            // Since we are using the Task's Wait method, this exception will be wrapped in an AggregateException  \n            // If you were using the 'await' keyword, the compiler would take care of unwrapping the AggregateException  \n            // Depending on when the cancellation occurs, you can either get an error from SQL Server or from .Net  \n            if ((ex.InnerException is SqlException) || (ex.InnerException is TaskCanceledException)) {  \n               // This is an expected exception  \n               Console.WriteLine(\"Got expected exception: {0}\", ex.InnerException.Message);  \n            }  \n            else {  \n               // Did not expect this exception - re-throw it  \n               throw;  \n            }  \n         }  \n  \n         Console.WriteLine(\"Done\");  \n      }  \n  \n      // This is used to generate the files which are used by the other sample methods  \n      private static void CreateDemoFiles() {  \n         Random rand = new Random();  \n         byte[] data = new byte[1024];  \n         rand.NextBytes(data);  \n  \n         using (FileStream file = File.Open(\"binarydata.bin\", FileMode.Create)) {  \n            file.Write(data, 0, data.Length);  \n         }  \n  \n         using (StreamWriter writer = new StreamWriter(File.Open(\"textdata.txt\", FileMode.Create))) {  \n            writer.Write(Convert.ToBase64String(data));  \n         }  \n      }  \n  \n      // Application transferring a large BLOB to SQL Server in .Net 4.5  \n      private static async Task StreamBLOBToServer() {  \n         using (SqlConnection conn = new SqlConnection(connectionString)) {  \n            await conn.OpenAsync();  \n            using (SqlCommand cmd = new SqlCommand(\"INSERT INTO [BinaryStreams] (bindata) VALUES (@bindata)\", conn)) {  \n               using (FileStream file = File.Open(\"binarydata.bin\", FileMode.Open)) {  \n  \n                  // Add a parameter which uses the FileStream we just opened  \n                  // Size is set to -1 to indicate \"MAX\"  \n                  cmd.Parameters.Add(\"@bindata\", SqlDbType.Binary, -1).Value = file;  \n  \n                  // Send the data to the server asynchronously  \n                  await cmd.ExecuteNonQueryAsync();  \n               }  \n            }  \n         }  \n      }  \n  \n      // Application transferring a large Text File to SQL Server in .Net 4.5  \n      private static async Task StreamTextToServer() {  \n         using (SqlConnection conn = new SqlConnection(connectionString)) {  \n            await conn.OpenAsync();  \n            using (SqlCommand cmd = new SqlCommand(\"INSERT INTO [TextStreams] (textdata) VALUES (@textdata)\", conn)) {  \n               using (StreamReader file = File.OpenText(\"textdata.txt\")) {  \n  \n                  // Add a parameter which uses the StreamReader we just opened  \n                  // Size is set to -1 to indicate \"MAX\"  \n                  cmd.Parameters.Add(\"@textdata\", SqlDbType.NVarChar, -1).Value = file;  \n  \n                  // Send the data to the server asynchronously  \n                  await cmd.ExecuteNonQueryAsync();  \n               }  \n            }  \n         }  \n      }  \n  \n      // Cancelling the transfer of a large BLOB  \n      private static async Task CancelBLOBStream(CancellationToken cancellationToken) {  \n         using (SqlConnection conn = new SqlConnection(connectionString)) {  \n            // We can cancel not only sending the data to the server, but also opening the connection  \n            await conn.OpenAsync(cancellationToken);  \n  \n            // Artifically delay the command by 100ms  \n            using (SqlCommand cmd = new SqlCommand(\"WAITFOR DELAY '00:00:00:100';INSERT INTO [BinaryStreams] (bindata) VALUES (@bindata)\", conn)) {  \n               using (FileStream file = File.Open(\"binarydata.bin\", FileMode.Open)) {  \n  \n                  // Add a parameter which uses the FileStream we just opened  \n                  // Size is set to -1 to indicate \"MAX\"  \n                  cmd.Parameters.Add(\"@bindata\", SqlDbType.Binary, -1).Value = file;  \n  \n                  // Send the data to the server asynchronously  \n                  // Pass the cancellation token such that the command will be cancelled if needed  \n                  await cmd.ExecuteNonQueryAsync(cancellationToken);  \n               }  \n            }  \n         }  \n      }  \n   }  \n}  \n  \n```  \n  \n## Sample -- Streaming From One [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] to Another [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]  \n This sample demonstrates how to asynchronously stream a large BLOB from one [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] to another, with support for cancellation.  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \nusing System.IO;  \nusing System.Threading;  \nusing System.Threading.Tasks;  \n  \nnamespace StreamingFromServerToAnother {  \n   class Program {  \n      // Replace the connection string if needed, for instance to connect to SQL Express: @\"Server=(local)\\SQLEXPRESS;Database=Demo2;Integrated Security=true\"  \n      private const string connectionString = @\"Server=(localdb)\\V11.0;Database=Demo2\";  \n  \n      static void Main(string[] args) {  \n         // For this example, we don't want to cancel  \n         // So we can pass in a \"blank\" cancellation token  \n         E2EStream(CancellationToken.None).Wait();  \n  \n         Console.WriteLine(\"Done\");  \n      }  \n  \n      // Streaming from one SQL Server to Another One using the new Async.NET  \n      private static async Task E2EStream(CancellationToken cancellationToken) {  \n         using (SqlConnection readConn = new SqlConnection(connectionString)) {  \n            using (SqlConnection writeConn = new SqlConnection(connectionString)) {  \n  \n               // Note that we are using the same cancellation token for calls to both connections\\commands  \n               // Also we can start both the connection opening asynchronously, and then wait for both to complete  \n               Task openReadConn = readConn.OpenAsync(cancellationToken);  \n               Task openWriteConn = writeConn.OpenAsync(cancellationToken);  \n               await Task.WhenAll(openReadConn, openWriteConn);  \n  \n               using (SqlCommand readCmd = new SqlCommand(\"SELECT [bindata] FROM [BinaryStreams]\", readConn)) {  \n                  using (SqlCommand writeCmd = new SqlCommand(\"INSERT INTO [BinaryStreamsCopy] (bindata) VALUES (@bindata)\", writeConn)) {  \n  \n                     // Add an empty parameter to the write command which will be used for the streams we are copying  \n                     // Size is set to -1 to indicate \"MAX\"  \n                     SqlParameter streamParameter = writeCmd.Parameters.Add(\"@bindata\", SqlDbType.Binary, -1);  \n  \n                     // The reader needs to be executed with the SequentialAccess behavior to enable network streaming  \n                     // Otherwise ReadAsync will buffer the entire BLOB into memory which can cause scalability issues or even OutOfMemoryExceptions  \n                     using (SqlDataReader reader = await readCmd.ExecuteReaderAsync(CommandBehavior.SequentialAccess, cancellationToken)) {  \n                        while (await reader.ReadAsync(cancellationToken)) {  \n                           // Grab a stream to the binary data in the source database  \n                           using (Stream dataStream = reader.GetStream(0)) {  \n  \n                              // Set the parameter value to the stream source that was opened  \n                              streamParameter.Value = dataStream;  \n  \n                              // Asynchronously send data from one database to another  \n                              await writeCmd.ExecuteNonQueryAsync(cancellationToken);  \n                           }  \n                        }  \n                     }  \n                  }  \n               }  \n            }  \n         }  \n      }  \n   }  \n}  \n  \n```  \n  \n## See Also  \n [Retrieving and Modifying Data in ADO.NET](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)","nodes":[{"pos":[12,56],"content":"SqlClient Streaming Support | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"SqlClient Streaming Support | Microsoft Docs","pos":[0,44]}]},{"pos":[366,393],"content":"SqlClient Streaming Support","linkify":"SqlClient Streaming Support","nodes":[{"content":"SqlClient Streaming Support","pos":[0,27]}]},{"content":"Streaming support between <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> and an application (new in <ph id=\"ph2\">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>) supports unstructured data on the server (documents, images, and media files).","pos":[394,646],"source":"Streaming support between [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] and an application (new in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]) supports unstructured data on the server (documents, images, and media files)."},{"content":"A <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> database can store binary large objects (BLOBs), but retrieving BLOBS can use a lot of memory.","pos":[647,807],"source":" A [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] database can store binary large objects (BLOBs), but retrieving BLOBS can use a lot of memory."},{"pos":[814,1055],"content":"Streaming support to and from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> simplifies writing applications that stream data, without having to fully load the data into memory, resulting in fewer memory overflow exceptions.","source":"Streaming support to and from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] simplifies writing applications that stream data, without having to fully load the data into memory, resulting in fewer memory overflow exceptions."},{"content":"Streaming support will also enable middle-tier applications to scale better, especially in scenarios where business objects connect to SQL Azure in order to send, retrieve, and manipulate large BLOBs.","pos":[1062,1262]},{"pos":[1270,1400],"content":"[!WARNING]\n Asynchronous calls are not supported if an application also uses the `Context Connection` connection string keyword.","leadings":["","> "],"nodes":[{"content":"Asynchronous calls are not supported if an application also uses the <ph id=\"ph1\">`Context Connection`</ph> connection string keyword.","pos":[12,128],"source":" Asynchronous calls are not supported if an application also uses the `Context Connection` connection string keyword."}]},{"content":"The members added to support streaming are used to retrieve data from queries and to pass parameters to queries and stored procedures.","pos":[1411,1545]},{"content":"The streaming feature addresses basic OLTP and data migration scenarios and is applicable to on premise and off premise data migrations.environments.","pos":[1546,1695]},{"pos":[1704,1790],"content":"Streaming Support from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>","linkify":"Streaming Support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]","source":"Streaming Support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]"},{"content":"Streaming support from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> introduces new functionality in the <ph id=\"ph2\">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> and in the <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> classes in order to get <ph id=\"ph4\">&lt;xref:System.IO.Stream&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Xml.XmlReader&gt;</ph>, and <ph id=\"ph6\">&lt;xref:System.IO.TextReader&gt;</ph> objects and react to them.","pos":[1794,2146],"source":"Streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] introduces new functionality in the <xref:System.Data.Common.DbDataReader> and in the <xref:System.Data.SqlClient.SqlDataReader> classes in order to get <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>, and <xref:System.IO.TextReader> objects and react to them."},{"content":"These classes are used to retrieve data from queries.","pos":[2148,2201]},{"content":"As a result, Streaming support from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> addresses OLTP scenarios and applies to on-premise and off-premise environments.","pos":[2202,2382],"source":" As a result, Streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] addresses OLTP scenarios and applies to on-premise and off-premise environments."},{"pos":[2389,2565],"content":"The following members were added to <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> to enable streaming support from <ph id=\"ph2\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>:","source":"The following members were added to <xref:System.Data.SqlClient.SqlDataReader> to enable streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]:"},{"pos":[3011,3183],"content":"The following members were added to <ph id=\"ph1\">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> to enable streaming support from <ph id=\"ph2\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>:","source":"The following members were added to <xref:System.Data.Common.DbDataReader> to enable streaming support from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]:"},{"pos":[3383,3467],"content":"Streaming Support to <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>","linkify":"Streaming Support to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]","source":"Streaming Support to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]"},{"content":"Streaming support to <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> introduces new functionality in the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> class so it can accept and react to <ph id=\"ph3\">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.TextReader&gt;</ph> objects.","pos":[3471,3764],"source":"Streaming support to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] introduces new functionality in the <xref:System.Data.SqlClient.SqlParameter> class so it can accept and react to <xref:System.Xml.XmlReader>, <xref:System.IO.Stream>, and <xref:System.IO.TextReader> objects."},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> is used to pass parameters to queries and stored procedures.","pos":[3765,3867],"source":"<xref:System.Data.SqlClient.SqlParameter> is used to pass parameters to queries and stored procedures."},{"content":"Disposing a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> object or calling <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlCommand.Cancel%2A&gt;</ph> must cancel any streaming operation.","pos":[3874,4030],"source":"Disposing a <xref:System.Data.SqlClient.SqlCommand> object or calling <xref:System.Data.SqlClient.SqlCommand.Cancel%2A> must cancel any streaming operation."},{"content":"If an application sends <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph>, cancellation is not guaranteed.","pos":[4031,4129],"source":" If an application sends <xref:System.Threading.CancellationToken>, cancellation is not guaranteed."},{"content":"The following <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt;</ph> types will accept a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt;</ph> of <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph>:","pos":[4136,4303],"source":"The following <xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A> types will accept a <xref:System.Data.SqlClient.SqlParameter.Value%2A> of <xref:System.IO.Stream>:"},{"pos":[4313,4323],"content":"<bpt id=\"p1\">**</bpt>Binary<ept id=\"p1\">**</ept>","source":"**Binary**"},{"pos":[4333,4346],"content":"<bpt id=\"p1\">**</bpt>VarBinary<ept id=\"p1\">**</ept>","source":"**VarBinary**"},{"content":"The following <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt;</ph> types will accept a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt;</ph> of <ph id=\"ph3\">&lt;xref:System.IO.TextReader&gt;</ph>:","pos":[4353,4524],"source":"The following <xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A> types will accept a <xref:System.Data.SqlClient.SqlParameter.Value%2A> of <xref:System.IO.TextReader>:"},{"pos":[4534,4542],"content":"<bpt id=\"p1\">**</bpt>Char<ept id=\"p1\">**</ept>","source":"**Char**"},{"pos":[4552,4561],"content":"<bpt id=\"p1\">**</bpt>NChar<ept id=\"p1\">**</ept>","source":"**NChar**"},{"pos":[4571,4583],"content":"<bpt id=\"p1\">**</bpt>NVarChar<ept id=\"p1\">**</ept>","source":"**NVarChar**"},{"pos":[4593,4600],"content":"<bpt id=\"p1\">**</bpt>Xml<ept id=\"p1\">**</ept>","source":"**Xml**"},{"pos":[4607,4774],"content":"The <bpt id=\"p1\">**</bpt>Xml<ept id=\"p1\">**</ept><ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt;</ph> type will accept a <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlParameter.Value%2A&gt;</ph> of <ph id=\"ph3\">&lt;xref:System.Xml.XmlReader&gt;</ph>.","source":"The **Xml**<xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A> type will accept a <xref:System.Data.SqlClient.SqlParameter.Value%2A> of <xref:System.Xml.XmlReader>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlParameter.SqlValue%2A&gt;</ph> can accept values of type <ph id=\"ph2\">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.TextReader&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.IO.Stream&gt;</ph>.","pos":[4781,4947],"source":"<xref:System.Data.SqlClient.SqlParameter.SqlValue%2A> can accept values of type <xref:System.Xml.XmlReader>, <xref:System.IO.TextReader>, and <xref:System.IO.Stream>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.TextReader&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.Stream&gt;</ph> object will be transferred up to the value defined by the <ph id=\"ph4\">&lt;xref:System.Data.SqlClient.SqlParameter.Size%2A&gt;</ph>.","pos":[4954,5152],"source":"The <xref:System.Xml.XmlReader>, <xref:System.IO.TextReader>, and <xref:System.IO.Stream> object will be transferred up to the value defined by the <xref:System.Data.SqlClient.SqlParameter.Size%2A>."},{"pos":[5161,5249],"content":"Sample -- Streaming from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>","linkify":"Sample -- Streaming from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]","source":"Sample -- Streaming from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]"},{"pos":[5253,5351],"content":"Use the following <ph id=\"ph1\">[!INCLUDE[tsql](../../../../includes/tsql-md.md)]</ph> to create the sample database:","source":"Use the following [!INCLUDE[tsql](../../../../includes/tsql-md.md)] to create the sample database:"},{"content":"The sample shows how to do the following:","pos":[5934,5975]},{"content":"Avoid blocking a user-interface thread by providing an asynchronous way to retrieve large files.","pos":[5985,6081]},{"pos":[6091,6246],"content":"Transfer a large text file from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> in <ph id=\"ph2\">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>.","source":"Transfer a large text file from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]."},{"pos":[6256,6410],"content":"Transfer a large XML file from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> in <ph id=\"ph2\">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>.","source":"Transfer a large XML file from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]."},{"pos":[6420,6503],"content":"Retrieve data from <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>.","source":"Retrieve data from [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]."},{"pos":[6513,6665],"content":"Transfer large files (BLOBs) from one <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> database to another without running out of memory.","source":"Transfer large files (BLOBs) from one [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] database to another without running out of memory."},{"pos":[17366,17452],"content":"Sample -- Streaming to <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>","linkify":"Sample -- Streaming to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]","source":"Sample -- Streaming to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]"},{"pos":[17456,17554],"content":"Use the following <ph id=\"ph1\">[!INCLUDE[tsql](../../../../includes/tsql-md.md)]</ph> to create the sample database:","source":"Use the following [!INCLUDE[tsql](../../../../includes/tsql-md.md)] to create the sample database:"},{"content":"The sample shows how to do the following:","pos":[17943,17984]},{"pos":[17994,18146],"content":"Transferring a large BLOB to <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> in <ph id=\"ph2\">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>.","source":"Transferring a large BLOB to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]."},{"pos":[18156,18313],"content":"Transferring a large text file to <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> in <ph id=\"ph2\">[!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]</ph>.","source":"Transferring a large text file to [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] in [!INCLUDE[net_v45](../../../../includes/net-v45-md.md)]."},{"content":"Using the new asynchronous feature to transfer a large BLOB.","pos":[18323,18383]},{"content":"Using the new asynchronous feature and the await keyword to transfer a large BLOB.","pos":[18393,18475]},{"content":"Cancelling the transfer of a large BLOB..","pos":[18485,18526]},{"pos":[18536,18665],"content":"Streaming from one <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> to another using the new asynchronous feature.","source":"Streaming from one [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] to another using the new asynchronous feature."},{"pos":[24165,24332],"content":"Sample -- Streaming From One <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> to Another <ph id=\"ph2\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>","linkify":"Sample -- Streaming From One [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] to Another [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]","source":"Sample -- Streaming From One [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] to Another [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]"},{"pos":[24336,24518],"content":"This sample demonstrates how to asynchronously stream a large BLOB from one <ph id=\"ph1\">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph> to another, with support for cancellation.","source":"This sample demonstrates how to asynchronously stream a large BLOB from one [!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)] to another, with support for cancellation."},{"pos":[27798,27806],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[27810,27925],"content":"<bpt id=\"p1\">[</bpt>Retrieving and Modifying Data in ADO.NET<ept id=\"p1\">](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept>","source":"[Retrieving and Modifying Data in ADO.NET](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)"}]}