{"content":"---\ntitle: \"'Is' operand of type '<typeparametername>' can be compared only to 'Nothing' because '<typeparametername>' is a type parameter with no class constraint\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc32052\"\n  - \"bc32052\"\nhelpviewer_keywords: \n  - \"BC32052\"\nms.assetid: 0bbf2249-eb0d-4b74-a555-8868c7ebe91d\n---\n# 'Is' operand of type '\\<typeparametername>' can be compared only to 'Nothing' because '\\<typeparametername>' is a type parameter with no class constraint\nA type parameter is used as an operand for the [Is Operator](../../visual-basic/language-reference/operators/is-operator.md) when the type parameter is defined without either the [Class (Visual Basic)](../../visual-basic/language-reference/statements/class-statement.md) keyword or a specific class name in its constraint list.  \n  \n `Is` compares two reference types to determine whether they point to the same object instance in memory. It cannot take an operand that is not a reference type unless the other operand is [Nothing](../../visual-basic/language-reference/nothing.md).  \n  \n **Error ID:** BC32052  \n  \n## To correct this error  \n  \n-   If you can require that the type argument supplied to this type parameter always be a reference type, add either the `Class` keyword or a specific class name to the constraint list for the type parameter.  \n  \n-   If you cannot require that the type argument supplied to this type parameter always be a reference type, remove it from the `Is` expression. You cannot compare it to other reference types with the `Is` operator.  \n  \n## See also\n\n- [Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)\n- [Type List](../../visual-basic/language-reference/statements/type-list.md)\n- [Value Types and Reference Types](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)\n- [Comparison Operators in Visual Basic](../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)\n","nodes":[{"pos":[4,312],"embed":true,"restype":"x-metadata","content":"title: \"'Is' operand of type '<typeparametername>' can be compared only to 'Nothing' because '<typeparametername>' is a type parameter with no class constraint\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vbc32052\"\n  - \"bc32052\"\nhelpviewer_keywords: \n  - \"BC32052\"\nms.assetid: 0bbf2249-eb0d-4b74-a555-8868c7ebe91d","nodes":[{"content":"'Is' operand of type '<typeparametername>' can be compared only to 'Nothing' because '<typeparametername>' is a type parameter with no class constraint","nodes":[{"pos":[0,151],"content":"'Is' operand of type '<ph id=\"ph1\">&lt;typeparametername&gt;</ph>' can be compared only to 'Nothing' because '<ph id=\"ph2\">&lt;typeparametername&gt;</ph>' is a type parameter with no class constraint","source":"'Is' operand of type '<typeparametername>' can be compared only to 'Nothing' because '<typeparametername>' is a type parameter with no class constraint"}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[319,472],"content":"'Is' operand of type '\\<typeparametername>' can be compared only to 'Nothing' because '\\<typeparametername>' is a type parameter with no class constraint","linkify":"'Is' operand of type '\\<typeparametername>' can be compared only to 'Nothing' because '\\<typeparametername>' is a type parameter with no class constraint","nodes":[{"content":"'Is' operand of type '<ph id=\"ph1\">\\&lt;</ph>typeparametername&gt;' can be compared only to 'Nothing' because '<ph id=\"ph2\">\\&lt;</ph>typeparametername&gt;' is a type parameter with no class constraint","pos":[0,153],"source":"'Is' operand of type '\\<typeparametername>' can be compared only to 'Nothing' because '\\<typeparametername>' is a type parameter with no class constraint"}]},{"pos":[473,800],"content":"A type parameter is used as an operand for the <bpt id=\"p1\">[</bpt>Is Operator<ept id=\"p1\">](../../visual-basic/language-reference/operators/is-operator.md)</ept> when the type parameter is defined without either the <bpt id=\"p2\">[</bpt>Class (Visual Basic)<ept id=\"p2\">](../../visual-basic/language-reference/statements/class-statement.md)</ept> keyword or a specific class name in its constraint list.","source":"A type parameter is used as an operand for the [Is Operator](../../visual-basic/language-reference/operators/is-operator.md) when the type parameter is defined without either the [Class (Visual Basic)](../../visual-basic/language-reference/statements/class-statement.md) keyword or a specific class name in its constraint list."},{"content":"<ph id=\"ph1\">`Is`</ph> compares two reference types to determine whether they point to the same object instance in memory.","pos":[807,911],"source":"`Is` compares two reference types to determine whether they point to the same object instance in memory."},{"content":"It cannot take an operand that is not a reference type unless the other operand is <bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../visual-basic/language-reference/nothing.md)</ept>.","pos":[912,1055],"source":" It cannot take an operand that is not a reference type unless the other operand is [Nothing](../../visual-basic/language-reference/nothing.md)."},{"pos":[1062,1083],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC32052","source":"**Error ID:** BC32052"},{"pos":[1092,1113],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[1123,1327],"content":"If you can require that the type argument supplied to this type parameter always be a reference type, add either the <ph id=\"ph1\">`Class`</ph> keyword or a specific class name to the constraint list for the type parameter.","source":"If you can require that the type argument supplied to this type parameter always be a reference type, add either the `Class` keyword or a specific class name to the constraint list for the type parameter."},{"content":"If you cannot require that the type argument supplied to this type parameter always be a reference type, remove it from the <ph id=\"ph1\">`Is`</ph> expression.","pos":[1337,1477],"source":"If you cannot require that the type argument supplied to this type parameter always be a reference type, remove it from the `Is` expression."},{"content":"You cannot compare it to other reference types with the <ph id=\"ph1\">`Is`</ph> operator.","pos":[1478,1548],"source":" You cannot compare it to other reference types with the `Is` operator."},{"pos":[1557,1565],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1569,1684],"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>","source":"[Generic Types in Visual Basic](../../visual-basic/programming-guide/language-features/data-types/generic-types.md)"},{"pos":[1687,1761],"content":"<bpt id=\"p1\">[</bpt>Type List<ept id=\"p1\">](../../visual-basic/language-reference/statements/type-list.md)</ept>","source":"[Type List](../../visual-basic/language-reference/statements/type-list.md)"},{"pos":[1764,1899],"content":"<bpt id=\"p1\">[</bpt>Value Types and Reference Types<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)</ept>","source":"[Value Types and Reference Types](../../visual-basic/programming-guide/language-features/data-types/value-types-and-reference-types.md)"},{"pos":[1902,2046],"content":"<bpt id=\"p1\">[</bpt>Comparison Operators in Visual Basic<ept id=\"p1\">](../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept>","source":"[Comparison Operators in Visual Basic](../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)"}]}