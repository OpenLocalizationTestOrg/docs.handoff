<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06ebf87e02c8fd745d9c2f3a55eca329323a7d91</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\migration-guide\net-compatibility-diagnostics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aec7a4246ccf7b35aabc1e842e017d774888a388</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">160c1c997bbb7d9295865753019a46a41421dbbb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Compatibility Diagnostics | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Compatibility Diagnostics</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Compatibility Diagnostics are Roslyn-powered analyzers that help identify application compatibility issues between versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This list contains all of the analyzers available, although only a subset will apply to any specific migration.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The analyzers will determine which issues are applicable for the planned migration and will only surface those.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For issues split up by versions impacted, please see: <bpt id="p1">[</bpt>Application Compatibility<ept id="p1">](../../../docs/framework/migration-guide/application-compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each issue includes the following information:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The description of what has changed from a previous version.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The suggestion is a description of how the change affects customers and whether any workarounds are available to preserve compatibility across versions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An assessment of how important the change is.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Application compatibility issue are categorized as follows:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A significant change that affects a large number of apps or requires substantial modification of code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A change that affects a small number of apps or that requires minor modification of code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Edge case</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A change that affects apps under very specific, uncommon scenarios.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Transparent</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A change with no noticeable effect on the applicationâ€™s developer or user.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Version indicates when the change first appears in the framework.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Some of the changes are reverted and that is indicated as well.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type of change:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The change affects apps that are recompiled to target a new version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The change affects an existing app that targets a previous version of the .NET Framework but runs on a later version.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The affected APIS, if any.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The IDs of the available diagnostics</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>1: SoapFormatter cannot deserialize Hashtable and similar ordered collection objects</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The SoapFormatter does not guarantee that objects serialized under one .NET Framework version will successfully deserialize under a different version.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specifically, some ordered collections (like Hashtable) added members between 4.0 and 4.5 such that objects of these types cannot deserialize with .NET 4.0 if they were serialzied with .NET 4.5.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Note that if the serialized data is both serialized and deserialized with the same .NET Framework version, no issue will occur.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>SoapFormatter serialization should be replaced with BinaryFormatter serialization or NetDataContractSerialization to be resilient to .NET Framework changes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CD0001B</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>CD0001A</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>3: WPF DataTemplate elements are now visible to UIA</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Previously, DataTemplate elements were invisible to UI Automation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Beginning in 4.5, UI Automation will detect these elements.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This is useful in many cases, but can break tests that depend on UIA trees not containing DataTemplate elements.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>UI Auomation tests for this app may need updated to account for the UIA tree now including previously invisible DataTemplate elements.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, tests that expect some elements to be next to each other may now need to expect previously invisible UIA elements in between.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Or tests that rely on certain counts or indexes for UIA elements may need updated with new values.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CD0003</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>4: WPF TextBox selected text appears a different color when the text box is inactive</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In .NET 4.5, when a WPF text box control is inactive (it doesn't have focus), the selected text inside the box will appear a different color than when the control is active.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Previous (.NET 4.0) behavior may be restored by setting the <bpt id="p1">[</bpt>FrameworkCompatibilityPreferences.AreInactiveSelectionHighlightBrushKeysSupported<ept id="p1">](https://msdn.microsoft.com/library/system.windows.frameworkcompatibilitypreferences.areinactiveselectionhighlightbrushkeyssupported\(v=vs.110\).aspx)</ept> property to false.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CD0004</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>5: List<ph id="ph1">\&lt;</ph>T&gt;.ForEach can throw exception when modifying list item</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Beginning in .NET 4.5, a <ph id="ph1">`List&lt;T&gt;.ForEach`</ph> enumerator will throw an InvalidOperationException exception if an element in the calling collection is modified.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Previously, this would not throw an exception but could lead to race conditions.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Ideally, code should be fixed to not modify lists while enumerating their elements because that is never a safe operation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To revert to the previous behavior, though, an app may target .NET 4.0.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CD0005</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>6: System.Uri parsing adheres to RFC 3987</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>URI parsing has changed in several ways in .NET 4.5.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Note, however, that these changes only affect code targeting .NET 4.5.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If a binary targets .NET 4.0, the old behavior will be observed.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Changes to URI parsing in .NET 4.5 include:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>URI parsing will perform normalization and character checking according to the latest IRI rules in RFC 3987</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Unicode normalization form C will only be performed on the host portion of the URI</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Invalid mailto: URIs will now cause an exception</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Trailing dots at the end of a path segment are now preserved</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`file://`</ph> URIs do not escape the <ph id="ph2">`?`</ph> character</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Unicode control characters <ph id="ph1">`U+0080`</ph> through <ph id="ph2">`U+009F`</ph> are not supported</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Comma characters <ph id="ph1">`,`</ph> or <ph id="ph2">`%2c`</ph> are not automatically unescaped</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If the old .NET 4.0 URI parsing semantics are necessary (they often aren't), they can be used by targeting .NET 4.0.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This can be accomplished by using a TargetFrameworkAttribute on the assembly, or through Visual Studio's project system UI in the 'project properties' page.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>CD0006D</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CD0006C</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>CD0006F</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CD0006E</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CD0006A</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CD0006G</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>CD0006B</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>10: System.Uri escaping now supports RFC 3986 (http://tools.ietf.org/html/rfc3986)</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>URI escaping has changed in .NET 4.5 to support <bpt id="p1">[</bpt>RFC 3986<ept id="p1">](http://tools.ietf.org/html/rfc3986)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specific changes include:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EscapeDataString`</ph> escapes reserved characters based on RFC 3986.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EscapeUriString`</ph> does not escape reserved characters.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UnescapeDataString`</ph> does not throw an exception if it encounters an invalid escape sequence.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Unreserved escaped characters are un-escaped.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Update applications to not rely on UnescapeDataString to throw in the case of an invalid escape sequence.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Such sequences must be detected directly now.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Similarly, expect that Escaped and Unescaped URI and Data strings may vary from .NET 4.0 and .NET 4.5 and should not be compared across .NET versions directly.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Instead, they should be parsed and normalized in a single .NET version before any comparisons are made.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>CD0010A</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CD0010B</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>CD0010C</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>11: System.Net.PeerToPeer.Collaboration unavailable on Windows 8</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The System.Net.PeerToPeer.Collaboration namespace is unavailable on Windows 8 or above.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Apps that support Windows 8 or above must be updated to not depend on this namespace or its members.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>CD0011</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>12: MEF catalogs implement IEnumerable and therefore can no longer be used to create a serializer</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.5, MEF catalogs implement IEnumerable and therefore can no longer be used to create a serializer (XmlSerializer object).</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Trying to serialize a MEF catalog throws an exception.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Can no longer use MEF to create a serializer</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CD0012</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>13: Missing Target Framework Moniker results in 4.0 behavior</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Applications without a <bpt id="p1">[</bpt>TargetFrameworkAttribute<ept id="p1">](https://msdn.microsoft.com/library/system.runtime.versioning.targetframeworkattribute\(v=vs.110\).aspx)</ept> applied at the assembly level will automatically run using the semantics (quirks) of the .NET Framework 4.0.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>To ensure high quality, it is recommended that all binaries be explicitly attributed with a TargetFrameworkAttribute indicating the version of the .NET Framework they were built with.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Note that using a target framework moniker in a project file will caues MSBuild to automatically apply a TargetFrameworkAttribute.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>target framework attribute<ept id="p1">](https://msdn.microsoft.com/library/system.runtime.versioning.targetframeworkattribute\(v=vs.110\).aspx)</ept> should be supplied, either through adding the attribute directly to the assembly or by specifying a target framework in the <bpt id="p2">[</bpt>project file or through Visual Studio's project properties GUI<ept id="p2">](http://blogs.msdn.com/b/visualstudio/archive/2010/05/19/visual-studio-managed-multi-targeting-part-1-concepts-target-framework-moniker-target-framework.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>CD0013</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>14: No longer able to set EnableViewStateMac to false</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>ASP.NET no longer allows developers to specify <ph id="ph1">`&lt;pages enableViewStateMac="false"/&gt;`</ph> or <ph id="ph2">`&lt;@Page EnableViewStateMac="false" %&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The view state message authentication code (MAC) is now enforced for all requests with embedded view state.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Only apps that explicitly set the EnableViewStateMac property to false are affected.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>EnableViewStateMac must be assumed to be true, and any resulting MAC errors must be resolved (as explained in <bpt id="p1">[</bpt>this<ept id="p1">](https://support.microsoft.com/kb/2915218)</ept> guidance, which contains multiple resolutions depending on the specifics of what is causing MAC errors).</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>4.5.2</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>CD0014</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>18: BlockingCollection<ph id="ph1">\&lt;</ph>T&gt;.TryTakeFromAny does not throw anymore</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>If one of the input collections is marked completed, <ph id="ph1">`BlockingCollection&lt;T&gt;.TryTakeFromAny(BlockingCollection&lt;T&gt;[], T)`</ph> no longer returns -1 and <ph id="ph2">`BlockingCollection&lt;T&gt;.TakeFromAny`</ph> no longer throws an exception.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This change makes it possible to work with collections when one of the collections is either empty or completed, but the other collection still has items that can be retrieved.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If TryTakeFromAny returning -1 or TakeFromAny throwing were used for control-flow purposes in cases of a blocking collection being completed, such code should now be changed to use <ph id="ph1">`.Any(b =&gt; b.IsCompleted)`</ph> to detect that condition.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>CD0018A</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>CD0018B</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>19: XmlSchemaException now sets line positions properly</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If the LoadOptions.SetLineInfo value is passed to the Load method and a validation error occurs, the XmlSchemaException.LineNumber and XmlSchemaException.LinePosition properties now contain line information.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Exception-handling code that assumes XmlSchemaException.LineNumber and XmlSchemaException.LinePosition will not be set should be updated since these properties will now be set properly when SetLineInfo is used while loading XML.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>CD0019</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>20: System.Activities is now APTCA</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The assembly is marked with the AllowPartiallyTrustedCallersAttribute attribute.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Derived classes cannot be marked with the SecurityCriticalAttribute.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Previously, derived types had to be marked with the SecurityCriticalAttribute.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>However, this change should have no real impact.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CD0020</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>21: WorkFlow 3.0 types are obsolete</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation (WWF) 3.0 APIs (those from the System.Workflow namespace) are now obsolete.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>New WWF 4.0 APIs (in System.Activities) should be used instead.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>An example of using the new APIs can be found <bpt id="p1">[</bpt>here<ept id="p1">](https://msdn.microsoft.com/library/jj205427.aspx)</ept> and further guidance is available <bpt id="p2">[</bpt>here<ept id="p2">](http://blogs.msdn.com/b/workflowteam/archive/2012/02/08/deprecatingwf3.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Alternatively, since the WWF 3.0 APIs are still supported, they may be used and the build-time warning avoided either by suppressing it or by using an older compiler.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>CD0021</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>22: Some WorkFlow drag and drop APIs are obsolete</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>This WorkFlow Drag/Drop API is obsolete and will cause compiler warnings if the app is rebuilt against 4.5.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>New <bpt id="p1">[</bpt>DragDropHelper<ept id="p1">](https://msdn.microsoft.com/library/system.activities.presentation.dragdrophelper\(v=vs.110\).aspx)</ept> APIs that support operations with multiple objects should be used instead.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Alternatively, the build warnings can be suppressed or they can be avoided by using an older compiler.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The APIs are still supported.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>CD0022</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>23: New (ambiguous) Dispatcher.Invoke overloads could result in different behavior</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.5 adds new overloads to Dispatcher.Invoke that include a parameter of type System.Action.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>When existing code is recompiled, compilers may resolve calls to Dispatcher.Invoke methods that have a Delegate parameter as calls to Dispatcher.Invoke methods with an System.Action parameter.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>If a call to a Dispatcher.Invoke overload with a Delegate parameter is resolved as a call to a Dispatcher.Invoke overload with an System.Action parameter, the following differences in behavior may occur:</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>If an exception occurs, the Dispatcher.UnhandledExceptionFilter and Dispatcher.UnhandledException events are not raised.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Instead, exceptions are handled by the UnobservedTaskException event.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Calls to some members, such as DispatcherOperation.Result, block until the operation has completed.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>To avoid ambiguity (and potential differences in exception handling or blocking behaviors), code calling Dispatcher.Invoke can pass an empty object[] as a second parameter to the Invoke call to be sure of resolving to the .NET 4.0 method overload.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>CD0023</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>24: EncoderParameter ctor is obsolete</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EncoderParameter.EncoderParameter(Encoder, Int32, Int32, Int32)`</ph> constructor is obsolete now and will introduce build warnings if used.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`EncoderParameter.EncoderParameter(Encoder, Int32, Int32, Int32)`</ph> constructor will continue to work, the following constructor should be used instead to avoid the obsolete build warning when re-compiling code with .NET 4.5 tools: <bpt id="p1">[</bpt>EncoderParameter.EncoderParameter(Encoder, Int32, EncoderParameterValueType, IntPtr)<ept id="p1">](https://msdn.microsoft.com/library/hh875096\(v=vs.110\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CD0024</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>26: Change in behavior for Task.WaitAll methods with time-out arguments</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Task.WaitAll behavior was made more consistent in .NET 4.5.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4, these methods behaved inconsistently.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>When the time-out expired, if one or more tasks were completed or canceled before the method call, the method threw an AggregateException exception.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>When the time-out expired, if no tasks were completed or canceled before the method call, but one or more tasks entered these states after the method call, the method returned false.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, these method overloads now return false if any tasks are still running when the time-out interval expired, and they throw an AggregateException exception only if an input task was cancelled (regardless of whether it was before or after the method call) and no other tasks are still running.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If an AggregateException was being caught as a means of detecting a task that was cancelled prior to the WaitAll call being invoked, that code should instead do the same detection via the IsCanceled property (for example: .Any(t =&gt; t.IsCanceled)) since .NET 4.6 will only throw in that case if all awaited tasks are completed prior to the timeout.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>CD0026</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>27: Change in behavior in Data Definition Language (DDL) APIs</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The behavior of DDL APIs when AttachDBFilename is specified has changed as follows:</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Connection strings need not specify an Initial Catalog value.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Previously, both AttatchDBFilename and Initial Catalog were required.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>If both AttatchDBFilename and Initial Catalog are specified and the given MDF file exists, the ObjectContext.DatabaseExists method returns true.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Previously, it returned false.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>If both AttatchDBFilename and Initial Catalog are specified and the given MDF file exists, calling the ObjectContext.DeleteDatabase method deletes the files.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>If ObjectContext.DeleteDatabase is called when the connection string specifies an AttachDBFilename value with an MDF that doesn't exist and an Initial Catalog that doesn't exist, the method throws an InvalidOperationException exception.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>Previously, it threw a SqlException exception.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>These changes make it easier to build tools and applications that use the DDL APIs.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>These changes can affect application compatibility in the following scenarios:</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>The user writes code that executes a DROP DATABASE command directly instead of calling ObjectContext.DeleteDatabase if ObjectContext.DatabaseExists returns true.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>This breaks existing code If the database is not attached but the MDF file exists.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The user writes code that expects the ObjectContext.DeleteDatabase method to throw a SqlException exception rather than an InvalidOperationException exception when the Initial Catalog and MDF file don't exist.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>CD0027</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>28: MachineKey.Encode and MachineKey.Decode methods are now obsolete</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>These methods are now obsolete.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Compilation of code that calls these methods produces a compiler warning.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The recommended alternatives are <bpt id="p1">[</bpt>MachineKey.Protect<ept id="p1">](https://msdn.microsoft.com/library/system.web.security.machinekey.protect\(v=vs.110\).aspx)</ept> and <bpt id="p2">[</bpt>MachineKey.Unprotect<ept id="p2">](https://msdn.microsoft.com/library/system.web.security.machinekey.unprotect\(v=vs.110\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Alternatively, the build warnings can be suppressed or they can be avoided by using an older compiler.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The APIs are still supported.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>CD0028</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>29: The Replace method in OData URLs is disabled by default</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Beginning in the .NET Framework 4.5, the Replace method in OData URLs is disabled by default.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>When OData Replace is disabled (now by default), any user requests including replace functions (which are uncommon) will fail.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>If the replace method is required (which is uncommon), it can be re-enabled through a <bpt id="p1">[</bpt>config settings<ept id="p1">](https://msdn.microsoft.com/library/system.data.services.configuration.dataservicesfeaturessection.replacefunction.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>However, an enabled replace method can open security vulnerabilities and should only be used after careful review.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>CD0029</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>30: System.ServiceModel.Web.WebServiceHost object no longer adds a default endpoint</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The System.ServiceModel.Web.WebServiceHost object no longer adds a default endpoint if an explicit endpoint has been added by application code.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>If users will expect to be able to connect to a default endpoint and other explicit endpoints have been added to the WebServiceHost, default endpoints should also be added explicitly (using AddDefaultEndpoints).</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>CD0030A</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>CD0030B</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>31: EventSource.WriteEvent impls must pass WriteEvent the same parameters that it received (plus ID)</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>The runtime now enforces the contract that specifies the following: A class derived from EventSource that defines an ETW event method must call the base class EventSource.WriteEvent method with the event ID followed by the same arguments that the ETW event method was passed.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>An IndexOutOfRangeException exception is thrown if an EventListener reads EventSource data in process for an event source that violates this contract.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>CD0031</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>32: MinFreeMemoryPercentageToActiveService is now respected</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>This setting establishes the minimum memory that must be available on the server before a WCF service can be activated.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>It is designed to prevent OutOfMemoryException exceptions.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, this setting had no effect.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5.1, the setting is observed.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>An exception occurs if the free memory available on the web server is less than the percentage defined by the configuration setting.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Some WCF services that successfully started and ran in a constrained memory environment may now fail.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>CD0032</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>33: XmlTextReader DTD entity expansion is limited to 10,000,000 characters</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>DTD entity expansion is now limited to 10,000,000 characters.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Loading XML files without DTD entity expansion or with limited DTD entity expansion is unaffected.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Files with DTD entities that expand to more than 10,000,000 characters fail to load, and now throw an exception.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>If the limit of DTD entity expansion is too low 10,000,000, the value can be overridden with the <bpt id="p1">[</bpt>XmlReaderSettings.MaxCharactersFromEntities<ept id="p1">](https://msdn.microsoft.com/library/system.xml.xmlreadersettings.maxcharactersfromentities%28v=vs.110%29.aspx)</ept> property.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>An XmlReaderSettings with the proper MaxCharactersFromEntity value can be passed to <bpt id="p1">[</bpt>XmlReader.Create<ept id="p1">](https://msdn.microsoft.com/library/System.Xml.XmlReader.Create\(v=vs.110\).aspx)</ept></source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>CD0033</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>35: XSLT style sheet exception message changed</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, the text of the error message when an XSLT file is too complex is "The style sheet is too complex."</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>In previous versions, the error message was "XSLT compile error."</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Application code that depends on the text of the error message will no longer work.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>However, the exception types remain the same, so this change should have no real impact.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Update any app code depending on the excepton message from this error condition to expect the new message, or (even better) update the code to depend only on the exception type (<bpt id="p1">[</bpt>XsltException<ept id="p1">](https://msdn.microsoft.com/library/system.xml.xsl.xsltexception\(v=vs.110\).aspx)</ept>), which has not changed.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>CD0035</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>36: WF serializes Expressions.Literal<ph id="ph1">\&lt;</ph>T&gt; DateTimes differently now (breaks custom XAML parsers)</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>The associated <bpt id="p1">[</bpt>ValueSerializer<ept id="p1">](https://msdn.microsoft.com/library/system.windows.markup.valueserializer\(v=vs.110\).aspx)</ept> object will convert a DateTime or DateTimeOffset object whose Second and Millisecond components are non-zero and (for a DateTime value) whose DateTime.Kind property is not Unspecified to property element syntax instead of a string.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>This change allows DateTime and DateTimeOffset values to be round-tripped.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Custom XAML parsers that assume that input XAML is in the attribute syntax will not function correctly.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>This change allows DateTime and DateTimeOffset values to be round-tripped.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Custom XAML parsers that assume that input XAML is in the attribute syntax will not function correctly.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>CD0036</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>37: New enum values in WPF's PageRangeSelection</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Two new members (CurrentPage and SelectedPage) have been added to the <bpt id="p1">[</bpt>PageRangeSelection<ept id="p1">](https://msdn.microsoft.com/library/system.windows.controls.pagerangeselection\(v=vs.110\).aspx)</ept> enum.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>In most cases, these changes won't impact user code.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Code that depends on a particular number of elements existing in Enum.GetNames or Enum.GetValues calls on the PageRangeSelection type should be modified, though.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>CD0037</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>38: WPF DispatcherSynchronizationContext.CreateCopy now returns a new copy instead of the current instance</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4, DispatcherSynchronizationContext.CreateCopy() returned a reference to the current instance, primarily as a performance optimization.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, it returns a new instance which makes it possible for the first time to conclude that equal references indicate the executing thread is in the correct synchronization context.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>It is unlikely that code that checks the identity of these references will be affected, but because of the change, code that calls DispatcherSynchronizationContext.CreateCopy should be tested as part of migration to the .NET Framework 4.5 or newer.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>Be aware that DispatcherSynchronizationContext.CreateCopy() will now return a new SynchronizationContext object.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Previously, code that used equivalence of references generated this way was not actually checking whether it was in the proper context, but does when built against .NET 4.5 or newer.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>While unlikely to cause issues, exercising the affected code paths should be enough to determine if this poses any problem.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>CD0038</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>39: System.Threading.Tasks.Task no longer throw ObjectDisposedException after object is disposed</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>Except for Task.IAsyncResult.AsyncWaitHandle, System.Threading.Tasks.Task methods no longer throw an ObjectDisposedException exception after the object is disposed.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>This change supports the use of cached tasks.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>For example, a method can return a cached task to represent an already completed operation instead of allocating a new task.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>This was impossible in previous .NET Framework versions, because any consumer of the task could dispose of it, which rendered it unusable.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Be aware that Task methods may no longer throw ObjectDisposedExceptions in cases when the object is disposed.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>If an app was depending on this exception to know that a task was disposed, it should be updated to explicitly check the task's status using <bpt id="p1">[</bpt>Task.Status<ept id="p1">](https://msdn.microsoft.com/library/system.threading.tasks.task.status\(v=vs.110\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>CD0039</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>40: Different exception handling for ObjectContext.CreateDatabase and DbProviderServices.CreateDatabase methods</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Beginning in .NET 4.5, if database creation fails, <ph id="ph1">`CreateDatabase`</ph> methods will attempt to drop the empty database.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>If that operation succeeds, the original <ph id="ph1">`SQLException`</ph> will be propagated (instead of the <ph id="ph2">`InvalidOperationException`</ph> that was always thrown in .NET 4.0)</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>When catching an InvalidOperationException while executing ObjectContext.CreateDatabase or DbProviderServices.CreateDatabase, SQLExceptions should now also be caught.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>CD0040</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>41: ObjectContext.Translate and ObjectContext.ExecuteStoreQuery now support enum type</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>In .NET 4.0, the generic parameter <ph id="ph1">`T`</ph> of <ph id="ph2">`ObjectContext.Translate`</ph> and <ph id="ph3">`ObjectContext.ExecuteStoreQuery`</ph> methods could not be an enum.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>That scenario is now supported.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>If Translate or ExecuteStoreQuery was called on an enum type in .NET 4.0, '0' was returned.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>If that behavior was desirable, the calls should be replaced with a constant 0 (or the enum equivalent of it).</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>CD0041</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>42: Enumerable.Empty<ph id="ph1">\&lt;</ph>TResult&gt; always returns cached instance</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Beginning in .NET 4.5, <ph id="ph1">`Enumerable.Empty`</ph> always returns a cached internal instance <ph id="ph2">`IEnumerable&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>Previously, <ph id="ph1">`Enumerable.Empty`</ph> would cache an empty <ph id="ph2">`IEnumerable&lt;T&gt;`</ph> at the time the API was called, meaning that in some conditions in which <ph id="ph3">`Enumerable.Empty`</ph> was called rapidly and concurrently, different instances of the type could be returned for different calls to the API.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Because the previous behavior was non-deterministic, code is unlikely to depend on it.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>However, in the unlikely case that empty enumerables are being compared and expected to sometimes be unequal, explicit empty arrays should be created (<ph id="ph1">`new T[0]`</ph>) instead of using <ph id="ph2">`Enumerable.Empty`</ph>.</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>CD0042</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>43: HttpRequest.ContentEncoding property prohibits UTF7</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Beginning in .NET Framework 4.5, UTF-7 encoding is prohibited in HttpRequests' bodies.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Data for applications that depend on incoming UTF-7 data will not decode properly in some cases.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>Ideally, applications should be updated to not use UTF-7 encoding in HttpRequests.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Alternatively, legacy behavior can be restored by using the <ph id="ph1">`aspnet:AllowUtf7RequestContentEncoding`</ph> attribute of the <bpt id="p1">[</bpt>appSettings<ept id="p1">](https://msdn.microsoft.com/library/hh975440\(v=vs.110\).aspx)</ept> element.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>CD0043</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>44: HttpUtility.JavaScriptStringEncode escapes ampersand</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.5, JavaScriptStringEncode escapes the ampersand (&amp;) character.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>If your app depends on the previous behavior of this method, you can add an aspnet:JavaScriptDoNotEncodeAmpersand setting to the <bpt id="p1">[</bpt>ASP.NET appSettings element<ept id="p1">](https://msdn.microsoft.com/library/hh975440\(v=vs.110\).aspx)</ept> in your configuration file.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>CD0044A</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>CD0044B</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>46: EventListener truncates strings with embedded nulls</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>EventListener truncates strings with embedded nulls.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Null characters are not supported by the EventSource class.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>The change only affects apps that use EventListener to read EventSource data in process and that use null characters as delimiters.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>EventSource data should be updated, if possible, to not use embedded null characters.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>CD0046</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>48: ObsoleteAttribute exports as both ObsoleteAttribute and DeprecatedAttribute in WinMD scenarios</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>When you create a Windows Metadata library (.winmd file), the ObsoleteAttribute attribute is exported as both ObsoleteAttribute and Windows.Foundation.DeprecatedAttribute.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>Recompilation of existing source code that uses the ObsoleteAttribute attribute may generate warnings when consuming that code from C++/CX or JavaScript.</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>We do not recommend applying both ObsoleteAttribute and Windows.Foundation.DeprecatedAttribute to code in managed assemblies; it may result in build warnings.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>CD0048A</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>CD0048B</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>49: ResolveAssemblyReference task now warns on dependencies with the wrong architecture</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>The task emits a warning, MSB3270, which indicates that a reference or any of its dependencies does not match the app's architecture.</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>For example, this occurs if an app that was compiled with the anycpu option includes an x86 reference.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Such a scenario could result in an app failure at run time (in this case, if the app is deployed as an x64 process).</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>There are two areas of impact:</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Recompilation generates warnings that did not appear when the app was compiled under a previous version of MSBuild.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>However, because the warning identifies a possible source of runtime failure, it should be investigated and addressed.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>If warnings are treated as errors, the app will fail to compile.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>CD0049</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>51: WPF TextBox defaults to undo limit of 100</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>In .NET 4.5, the default undo limit for a WPF textbox is 100 (as opposed to being unlimited in .NET 4.0)</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>If an undo limit of 100 is too low, the limit can be set explicitly with the TextBox's UndoLimit property</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>CD0051</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>55: Exceptions during unobserved processing in System.Threading.Tasks.Task no longer propagate on finalizer thread</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Because the System.Threading.Tasks.Task class represents an asynchronous operation, it catches all non-severe exceptions that occur during asynchronous processing.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, if an exception is not observed and your code never waits on the task, the exception will no longer propagate on the finalizer thread and crash the process during garbage collection.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>This change enhances the reliability of applications that use the Task class to perform unobserved asynchronous processing.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>If an app depends on unobserved asynchronous exceptions propagating to the finalizer thread, the previous behavior can be restored by providing an appropriate handler for the <bpt id="p1">[</bpt>TaskScheduler.UnobservedTaskException<ept id="p1">](https://msdn.microsoft.com/library/system.threading.tasks.taskscheduler.unobservedtaskexception\(v=vs.110\).aspx)</ept> event, or by setting a <bpt id="p2">[</bpt>runtime configuration element<ept id="p2">](https://msdn.microsoft.com/library/jj160346%28v=vs.110%29.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>CD0055</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>58: IAsyncResult.CompletedSynchronously property must be correct for the resulting task to complete</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>When calling TaskFactory.FromAsync, the implementation of the IAsyncResult.CompletedSynchronously property must be correct for the resulting task to complete.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>That is, the property must return true if, and only if, the implementation completed synchronously.</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Previously, the property was not checked.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>If IAsyncResult implementations correctly return true for the CompletedSynchronusly property only when a task completed synchronously, then no break will be observed.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>Users should review IAsyncResult implementations they own (if any) to ensure that they correctly evaluate whether a task completed synchronously or not.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>CD0058</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>59: Log file name created by the ObjectContext.CreateDatabase method has changed to match SQL Server specifications</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>When the CreateDatabase method is called either directly or by using Code First with the SqlClient provider and an AttachDBFilename value in the connection string, it creates a log file named filename_log.ldf instead of filename.ldf (where filename is the name of the file specified by the AttachDBFilename value).</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>This change improves debugging by providing a log file named according to SQL Server specifications.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>If the log file name is important for an app, the app should be updated to expect the standard _log.ldf file name format.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>CD0059</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>60: Page.LoadComplete event no longer causes System.Web.UI.WebControls.EntityDataSource control to invoke data binding</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Page.LoadComplete`</ph> event no longer causes the System.Web.UI.WebControls.EntityDataSource control to invoke data binding for changes to create/update/delete parameters.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>This change eliminates an extraneous trip to the database, prevents the values of controls from being reset, and produces behavior that is consistent with other data controls, such as SqlDataSource and ObjectDataSource.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>This change produces different behavior in the unlikely event that applications rely on invoking data binding in the <ph id="ph1">`Page.LoadComplete`</ph> event.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>If there is a need for databinding, manually invoke databind in an event that is earlier in the post-back.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>CD0060</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>61: WebUtility.HtmlDecode no longer decodes invalid input sequences</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>By default, decoding methods no longer decode an invalid input sequence into an invalid UTF-16 string.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Instead, they return the original input.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>The change in decoder output should matter only if you store binary data instead of UTF-16 data in strings.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>To explicitly control this behavior, set the <ph id="ph1">`aspnet:AllowRelaxedUnicodeDecoding`</ph> attribute of the <bpt id="p1">[</bpt>appSettings<ept id="p1">](https://msdn.microsoft.com/library/ms228154\(v=vs.110\).aspx)</ept> element to true to enable legacy behavior or to false to enable the current behavior.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>CD0061</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>63: Apps published with ClickOnce that use a SHA-256 code-signing certificate may fail on Windows 2003</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>The executable is signed with SHA256.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Previously, it was signed with SHA1 regardless of whether the code-signing certificate was SHA-1 or SHA-256.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>This applies to:</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>All applications built with Visual Studio 2012 or later.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>Applications built with Visual Studio 2010 or earlier on systems with the .NET Framework 4.5 present.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>In addition, if the .NET Framework 4.5 or later is present, the ClickOnce manifest is also signed with SHA-256 for SHA-256 certificates regardless of the .NET Framework version against which it was compiled.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>The change in signing the ClickOnce executable affects only Windows Server 2003 systems; they require that KB 938397 be installed.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>The change in signing the manifest with SHA-256 even when an app targets the .NET Framework 4.0 or earlier versions introduces a runtime dependency on the .NET Framework 4.5 or a later version.</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>4.5-4.6</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>CD0063</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>68: DbParameter.Precision and DbParameter.Scale are now public virtual members</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>DbParameter.Precision and DbParameter.Scale are implemented as public virtual properties.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>They replace the corresponding explicit interface implementations, DbParameter.IDbDataParameter.Precision and DbParameter.IDbDataParameter.Scale.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>When re-building an ADO.NET database provider, these differences will require the 'override' keyword to be applied to the Precision and Scale properties.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>This is only needed when re-building the components; exisiting binaries will continue to work.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>CD0068</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>73: DataObject.GetData now retrieves data as UTF-8</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>For apps that target the .NET Framework 4 or that run on the .NET Framework 4.5.1 or earlier versions, DataObject.GetData retrieves HTML-formatted data as an ASCII string.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>As a result, non-ASCII characters (characters whose ASCII codes are greater than 0x7F) are represented by two random characters.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>For apps that target the .NET Framework 4.5 or later and run on the .NET Framework 4.5.2, <ph id="ph1">`DataObject.GetData`</ph> retrieves HTML-formatted data as UTF-8, which represents characters greater than 0x7F correctly.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>If you implemented a workaround for the encoding problem with HTML-formatted strings (for example, by explicitly encoding the HTML string retrieved from the Clipboard by passing it to the UTF8Encoding.GetString method) and you're retargeting your app from version 4 to 4.5, that workaround should be removed.</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>If the old behavior is needed for some reason, the app can target the .NET Framework 4.0 to get that behavior.</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>4.5.2</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>CD0073</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>75: TargetFrameworkName for default app domain no longer defaults to null if not set</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>The TargetFrameworkName was previously null in the default app domain, unless it was explicitly set.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>Beginning in 4.6, the TargetFrameworkName property for the default app domain will have a default value derived from the TargetFrameworkAttribute (if one is present).</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Non-default app domains will continue to inherit their TargetFrameworkName from the default app domain (which will not default to null in 4.6) unless it is explicitly overridden.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>Code should be updated to not depend on <ph id="ph1">`AppDomainSetup.TargetFrameworkName`</ph> defaulting to null.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>If it is required that this property continue to evaluate to null, it can be explicitly set to that value.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>CD0075B</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>CD0075A</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>76: X509Certificate2.ToString(bool) does not throw now when .NET cannot handle the certificate</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Previously, this method would throw if 'true' was passed for the verbose parameter and there were certificates installed that weren't supported by the .Net Framework.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>Now, the method will succeed and return a valid string that omits the inaccessible portions of the certifiate.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>Any code depending on X509Certificate2.ToString(bool) should be updated to expect that the returned string may exclude some certificate data (such as public key, private key, and extensions) in some cases in which the API would have previously thrown.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>CD0076</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>77: Reflection objects can no longer be passed from managed code to out-of-process DCOM clients</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Reflection objects can no longer be passed from managed code to out-of-process DCOM clients.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>The following types are affected:</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Assembly</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>MemberInfo (and its derived types, including FieldInfo, MethodInfo, Type, and TypeInfo)</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>MethodBody</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>Module</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>ParameterInfo.</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Calls to <ph id="ph1">`IMarshal`</ph> for the object return <ph id="ph2">`E_NOINTERFACE`</ph>.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Update marshaling code to work with non-reflection objects</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>CD0077</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>78: ContentDisposition DateTimes returns slightly different string</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>String representations of ContentDispositions have been updated, beginning in 4.6, to always represent the hour component of a DateTime with two digits.</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>This is to comply with <bpt id="p1">[</bpt>RFC822<ept id="p1">](http://www.ietf.org/rfc/rfc0822.txt)</ept> and <bpt id="p2">[</bpt>RFC2822<ept id="p2">](http://www.ietf.org/rfc/rfc2822.txt)</ept>.</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>This causes <ph id="ph1">`ContentDisposition.ToString`</ph> to return a slightly different string in 4.6 in scenarios where one of the disposition's time elements was before 10:00 AM.</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>Note that ContentDispositions are sometimes serialized via converting them to strings, so any ContentDisposition ToString operations, serialization, or GetHashCode calls should be reviewed.</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>Do not expect that string representations of ContentDispositions from different .NET Framework versions will correctly compare to one another.</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>Convert the strings back to ContentDispositions, if possible, before conducting a comparison.</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>CD0078</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>82: WorkflowDesigner.Load doesn't remove symbol property</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>When targeting the .NET Framework 4.5 in the workflow designer, and loading a re-hosted 3.5 workflow with the WorkflowDesigner.Load() method, a XamlDuplicateMemberException is thrown while saving the workflow.</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>This bug only manifests when targeting .NET Framework 4.5 in the workflow designer, so it can be worked around by setting the <ph id="ph1">`WorkflowDesigner.Context.Services.GetService&lt;DesignerConfigurationService&gt;().TargetFrameworkName`</ph> to the 4.0 .NET Framework.</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>Alternatively, the issue may be avoided by using the <bpt id="p1">[</bpt>WorkflowContext.Load(string)<ept id="p1">](https://msdn.microsoft.com/library/ee425926\(v=vs.110\).aspx)</ept> method to load the workflow, instead of <bpt id="p2">[</bpt>WorkflowDesigner.Load()<ept id="p2">](https://msdn.microsoft.com/library/ee403482\(v=vs.110\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>4.5-4.5.2</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>CD0082</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>83: SqlConnection.Open fails on Windows 7 with non-IFS Winsock BSP or LSP present</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>SqlConneciton.Open and OpenAsync fail in the .NET Framework 4.5 if running on a Windows 7 machine with a non-IFS Winsock BSP or LSP are present on the computer.</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>To determine whether a non-IFS BSP or LSP is installed, use the <ph id="ph1">`netsh WinSock Show Catalog`</ph> command, and examine every <ph id="ph2">`Winsock Catalog Provider Entry`</ph> item that is returned.</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>If the Service Flags value has the <ph id="ph1">`0x20000`</ph> bit set, the provider uses IFS handles and will work correctly.</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`0x20000`</ph> bit is clear (not set), it is a non-IFS BSP or LSP.</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>This bug has been fixed in the .NET Framework 4.5.2, so it can be avoided by upgrading the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>Alternatively, it can be avoided by removing any installed non-IFS Winsock LSPs.</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>4.5-4.5.2</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>CD0083</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>84: ICommand.CanExecuteChanged event behaviour changed in .NET 4.5</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, a CanExecuteChangedEvent was ignored unless the sender of the event was the same object as the object that raised the event.</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>This bug was fixed in .NET Framework 4.5 servcing updates.</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>This bug has been fixed in the .NET Framework 4.5 servicing releases, so it can be avoided by making sure that the .NET Framework is up-to-date or by upgrading to .NET Framework 4.5.1.</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>Alternatively, application code using ICommand can be modified to make sure that the sender when raising a CanExecuteChanged command is the same as the object raising the event.</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>4.5-4.5</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>CD0084</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>85: Some .NET APIs cause first chance (handled) EntryPointNotFoundExceptions</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, a small number of .NET methods began throwing first chance EntryPointNotFoundExceptions.</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>These exceptions were handled within the .Net Framework, but could break test automation that did not expect the first chance exceptions.</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>These same APIs break some ApiVerifier scenarios when HighVersionLie is enabled.</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>This bug can be avoided by upgrading to .NET Framework 4.5.1.</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>Alternatively, test automation can be updated to not break on first-chance EntryPointNotFoundExceptions.</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>4.5-4.5.1</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>CD0085</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>86: Scrolling a WPF TreeView or grouped ListBox in a VirtualizingStackPanel can cause a hang</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>In the .NET Framework v4.5, scrolling a WPF TreeView in a virtualized stack panel can cause hangs if there are margins in the viewport (between the items in the TreeView, for example, or on an ItemsPresenter element).</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>Additionally, in some cases, different sized items in the view can cause instability even if there are no margins.</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>This bug can be avoided by upgrading to .NET Framework 4.5.1.</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>Alternatively, margins can be removed from view collections (like TreeViews) within virtualized stack panels if all contained items are the same size.</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>4.5-4.5.1</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>CD0086</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>CD0086</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>89: Type.IsAssignableFrom returns wrong result for generic variables with constraints</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, Type.IsAssignableFrom will incorrectly return <ph id="ph1">`false`</ph> in all cases for some generic types with constraints.</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>This issue was fixed in a servicing update.</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>Please update the .NET Framework 4.5, or upgrade to .NET Framework 4.5.1 or later, to fix this issue.</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>Alternatively, avoid using IsAssignableFrom with generic types that have constraints on generic parameters.</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Reflection APIs can be used as a work-around.</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>4.5-4.5</source>
        </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve">
          <source>CD0089</source>
        </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve">
          <source>CD0089</source>
        </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve">
          <source>91: EntityFramework 6.0 loads very slowly in apps launched from Visual Studio</source>
        </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve">
          <source>Launching an app from Visual Studio 2013 that uses EntityFramework 6.0 can be very slow.</source>
        </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve">
          <source>This issue is fixed in EntityFramework 6.0.2.</source>
        </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve">
          <source>Please update EntityFramework to avoid the performance issue.</source>
        </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve">
          <source>CD0091</source>
        </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve">
          <source>92: Multi-line ASP.Net TextBox spacing changed when using AntiXSSEncoder</source>
        </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve">
          <source>In .NET Framework 4.0, extra lines were inserted between lines of a multi-line text box on postback, if using the <ph id="ph1">`AntiXSSEncoder`</ph>.</source>
        </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve">
          <source>In .NET Framework 4.5, those extra line breaks are not included, but only if the web app is targeting .NET 4.5</source>
        </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve">
          <source>Be aware that 4.0 web apps retargeted to .NET 4.5 may have multi-line text boxes improved to no longer insert extra line breaks.</source>
        </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve">
          <source>If this is not desirable, the app can have the old behavior when running on .NET Framework 4.5 by targeting the .NET Framework 4.0.</source>
        </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve">
          <source>CD0092</source>
        </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve">
          <source>95: ConcurrentQueue<ph id="ph1">\&lt;</ph>T&gt;.TryPeek can return an erroneous null via its out parameter</source>
        </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve">
          <source>In some multi-threaded scenarios, <ph id="ph1">`ConcurentQueue&lt;T&gt;.TryPeek`</ph> can return true, but populate the out parameter with a null value (instead of the correct, peeked value).</source>
        </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve">
          <source>This issue is fixed in the .NET Framework 4.5.1.</source>
        </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve">
          <source>Upgrading to that Framework will solve the issue.</source>
        </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve">
          <source>4.5-4.5.1</source>
        </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve">
          <source>CD0095</source>
        </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve">
          <source>98: Multiple items in a single TableLayoutPanel cell may be rearranged</source>
        </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, if multiple items are placed in the same TableLayoutPanel cell, they may be displayed in a different order than they were in the .NET Framework 4.0.</source>
        </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve">
          <source>This behavior was reverted in a servicing update for the .NET Framework 4.5.</source>
        </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve">
          <source>Please update the .NET Framework 4.5, or upgrade to .NET Framework 4.5.1 or later, to fix this issue.</source>
        </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve">
          <source>Alternatively, avoid the ambiguous case of multiple items in the same TableLayourPanel cell.</source>
        </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve">
          <source>4.5-4.5</source>
        </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve">
          <source>CD0098</source>
        </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve">
          <source>100: Foreach iterator variable is now scoped within the iteration, so closure capturing semantics are different (in C#5)</source>
        </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve">
          <source>Beginning with C# 5 (Visual Studio 2012), foreach iterator variables are scoped within the iteration.</source>
        </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve">
          <source>This can cause breaks if code was previously depending on the variables to not be included in the foreach's closure.</source>
        </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve">
          <source>The symptom of this change will be that an iterator variable passed to a delagate will be treated as the value it had at the time the delegate was created, rather than the value it had at the time the delegate was invoked.</source>
        </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve">
          <source>Ideally, code should be updated to expect the new compiler behavior.</source>
        </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve">
          <source>If the old semantics are required, the iterator variable can be replaced with a separate variable which is explicitly placed outside of the loop's scope.</source>
        </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="1152" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1153" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1154" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1155" translate="yes" xml:space="preserve">
          <source>CD0100</source>
        </trans-unit>
        <trans-unit id="1156" translate="yes" xml:space="preserve">
          <source>101: HtmlTextWriter does not render <ph id="ph1">\`</ph>&lt;br/<ph id="ph2">\&gt;</ph>` element correctly</source>
        </trans-unit>
        <trans-unit id="1157" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1158" translate="yes" xml:space="preserve">
          <source>Beginning in the .NET Framework 4.6, calling <ph id="ph1">`HtmlTextWriter.RenderBeginTag()`</ph> and <ph id="ph2">`HtmlTextWriter.RenderEndTag()`</ph> with a <ph id="ph3">`&lt;BR /&gt;`</ph> element will correctly insert only one <ph id="ph4">`&lt;BR /&gt;`</ph> (instead of two)</source>
        </trans-unit>
        <trans-unit id="1159" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1160" translate="yes" xml:space="preserve">
          <source>If an app depended on the extra <ph id="ph1">`&lt;BR /&gt;`</ph> tag, <ph id="ph2">`HtmlTextWriter.RenderBeginTag()`</ph> should be called a second time.</source>
        </trans-unit>
        <trans-unit id="1161" translate="yes" xml:space="preserve">
          <source>Note that this behavior change only affects apps that are targeting the .NET Framework 4.6, so another option is to target a previous version of the .NET Framework in order to get the old behavior.</source>
        </trans-unit>
        <trans-unit id="1162" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1163" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1164" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1165" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="1166" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1167" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1168" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1169" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1170" translate="yes" xml:space="preserve">
          <source>CD0101</source>
        </trans-unit>
        <trans-unit id="1171" translate="yes" xml:space="preserve">
          <source>104: Calling Items.Refresh on a WPF ListBox, ListView, or DataGrid with items selected can cause duplicate items to appear in the element</source>
        </trans-unit>
        <trans-unit id="1172" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1173" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, calling ListBox.Items.Refresh from code while items are selected in a ListBox can cause the selected items to be duplicated in the list.</source>
        </trans-unit>
        <trans-unit id="1174" translate="yes" xml:space="preserve">
          <source>A similar issue occurs with ListView and DataGrid.</source>
        </trans-unit>
        <trans-unit id="1175" translate="yes" xml:space="preserve">
          <source>This is fixed in the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="1176" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1177" translate="yes" xml:space="preserve">
          <source>This issue may be worked around by programatically unselecting items before Refresh is called and then re-selecting them after the call is completed.</source>
        </trans-unit>
        <trans-unit id="1178" translate="yes" xml:space="preserve">
          <source>Alternatively, this issue has been fixed in the .NET Framework 4.6 and may be addressed by upgrading to that version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1179" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1180" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1181" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1182" translate="yes" xml:space="preserve">
          <source>4.5-4.6</source>
        </trans-unit>
        <trans-unit id="1183" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1184" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1185" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1186" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1187" translate="yes" xml:space="preserve">
          <source>CD0104</source>
        </trans-unit>
        <trans-unit id="1188" translate="yes" xml:space="preserve">
          <source>105: ETW EventListeners do not capture events from providers with explicit keywords (like the TPL provider)</source>
        </trans-unit>
        <trans-unit id="1189" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1190" translate="yes" xml:space="preserve">
          <source>ETW EventListeners with a blank keyword mask do not properly capture events from providers with explicit keywords.</source>
        </trans-unit>
        <trans-unit id="1191" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.5, the TPL provider began providing explicit keywords and triggered this issue.</source>
        </trans-unit>
        <trans-unit id="1192" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.6, EventListeners have been updated to no longer have this issue.</source>
        </trans-unit>
        <trans-unit id="1193" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1194" translate="yes" xml:space="preserve">
          <source>To work around this problem, replace calls to EnableEvents(eventSource, level) with calls to the EnableEvents overload that explicitly specifies the "any keywords" mask to use: <ph id="ph1">`EnableEvents(eventSource, level, unchecked((EventKeywords)0xFFFFffffFFFFffff))`</ph>.</source>
        </trans-unit>
        <trans-unit id="1195" translate="yes" xml:space="preserve">
          <source>Alternatively, this issue has been fixed in the .NET Framework 4.6 and may be addressed by upgrading to that version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1196" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1197" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1198" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1199" translate="yes" xml:space="preserve">
          <source>4.5-4.6</source>
        </trans-unit>
        <trans-unit id="1200" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1201" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1202" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1203" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1204" translate="yes" xml:space="preserve">
          <source>CD0105</source>
        </trans-unit>
        <trans-unit id="1205" translate="yes" xml:space="preserve">
          <source>109: Building an Entity Framework edmx with Visual Studio 2013 can fail with error MSB4062 if using the EntityDeploySplit or EntityClean tasks</source>
        </trans-unit>
        <trans-unit id="1206" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1207" translate="yes" xml:space="preserve">
          <source>MSBuild 12.0 tools (included in Visual Studio 2013) changed msbuild file locations, causing older Entity Framework targets files to be invalid.</source>
        </trans-unit>
        <trans-unit id="1208" translate="yes" xml:space="preserve">
          <source>The result is that <ph id="ph1">`EntityDeploySplit`</ph> and <ph id="ph2">`EntityClean`</ph> tasks fail because they are unable to find <ph id="ph3">`Microsoft.Data.Entity.Build.Tasks.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="1209" translate="yes" xml:space="preserve">
          <source>Note that this break is because of a toolset (msbuild/VS) change, not because of a .NET Framework change.</source>
        </trans-unit>
        <trans-unit id="1210" translate="yes" xml:space="preserve">
          <source>It will only occur when upgrading developer tools, not when merely upgrading the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1211" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1212" translate="yes" xml:space="preserve">
          <source>Entity Framework targets files are fixed to work with the new msbuild layout beginning in the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="1213" translate="yes" xml:space="preserve">
          <source>Upgrading to that version of the Framework will fix this issue.</source>
        </trans-unit>
        <trans-unit id="1214" translate="yes" xml:space="preserve">
          <source>Alternatively, <bpt id="p1">[</bpt>this<ept id="p1">](http://stackoverflow.com/a/24249247/131944)</ept> workaround can be used to patch the targets files directly.</source>
        </trans-unit>
        <trans-unit id="1215" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1216" translate="yes" xml:space="preserve">
          <source>Major</source>
        </trans-unit>
        <trans-unit id="1217" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1218" translate="yes" xml:space="preserve">
          <source>4.5.1-4.6</source>
        </trans-unit>
        <trans-unit id="1219" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1220" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1221" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1222" translate="yes" xml:space="preserve">
          <source>CD0109</source>
        </trans-unit>
        <trans-unit id="1223" translate="yes" xml:space="preserve">
          <source>111: XSD Schema validation now correctly detects violations of unique constraints if compound keys are used and one key is empty</source>
        </trans-unit>
        <trans-unit id="1224" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1225" translate="yes" xml:space="preserve">
          <source>Versions of the .NET Framework prior to 4.6 had a bug that caused XSD validation to not detect unique constraints on compound keys if one of the keys was empty.</source>
        </trans-unit>
        <trans-unit id="1226" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.6, this issue is corrected.</source>
        </trans-unit>
        <trans-unit id="1227" translate="yes" xml:space="preserve">
          <source>This will result in more correct validation, but it may also result in some XML not validating which previously would have.</source>
        </trans-unit>
        <trans-unit id="1228" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1229" translate="yes" xml:space="preserve">
          <source>If looser, .NET Framework 4.0 validation is needed, the validating application can target version 4.5 (or earlier) of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1230" translate="yes" xml:space="preserve">
          <source>When retargeting to .NET 4.6, however, code review should be done to be sure that duplicate compound keys (as described in this issue's description) are not expected to validate.</source>
        </trans-unit>
        <trans-unit id="1231" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1232" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1233" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1234" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="1235" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1236" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1237" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1238" translate="yes" xml:space="preserve">
          <source>CD0111</source>
        </trans-unit>
        <trans-unit id="1239" translate="yes" xml:space="preserve">
          <source>112: Calling Attribute.GetCustomAttributes on an indexer property no longer throws AmbiguousMatchException if the ambiguity can be resolved by index's type</source>
        </trans-unit>
        <trans-unit id="1240" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1241" translate="yes" xml:space="preserve">
          <source>Prior to the .NET Framework 4.6, calling <ph id="ph1">`GetCustomAttribute(s)`</ph> on an indexer property which differed from another property only by the type of the index would result in an <ph id="ph2">`AmbiguousMatchException`</ph>.</source>
        </trans-unit>
        <trans-unit id="1242" translate="yes" xml:space="preserve">
          <source>Beginning in the .NET Framework 4.6, the property's attributes will be correctly returned.</source>
        </trans-unit>
        <trans-unit id="1243" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1244" translate="yes" xml:space="preserve">
          <source>Be aware that GetCustomAttribute(s) will work more frequently now.</source>
        </trans-unit>
        <trans-unit id="1245" translate="yes" xml:space="preserve">
          <source>If an app was previously relying on the <ph id="ph1">`AmbiguousMatchException`</ph>, reflection should now be used to explicitly look for multiple indexers, instead.</source>
        </trans-unit>
        <trans-unit id="1246" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1247" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1248" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1249" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="1250" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1251" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1252" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1253" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1254" translate="yes" xml:space="preserve">
          <source>CD0112</source>
        </trans-unit>
        <trans-unit id="1255" translate="yes" xml:space="preserve">
          <source>113: Intermittently unable to scroll to bottom item in ItemsControls (like ListBox and DataGrid) when using custom DataTemplates</source>
        </trans-unit>
        <trans-unit id="1256" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1257" translate="yes" xml:space="preserve">
          <source>In some instances, a bug in the .NET Framework 4.5 is causing ItemsControls (like ListBox, ComboBox, DataGrid, etc.) to not scroll to their bottom item when using custom DataTemplates.</source>
        </trans-unit>
        <trans-unit id="1258" translate="yes" xml:space="preserve">
          <source>If the scrolling is attempted a second time (after scrolling back up), it will work then.</source>
        </trans-unit>
        <trans-unit id="1259" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1260" translate="yes" xml:space="preserve">
          <source>This issue has been fixed in the .NET Framework 4.5.2 and may be addressed by upgrading to that version (or a later version) of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1261" translate="yes" xml:space="preserve">
          <source>Alternatively, users can still drag scroll bars to the final items in these collections, but may need to try twice to do so successfully.</source>
        </trans-unit>
        <trans-unit id="1262" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1263" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1264" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1265" translate="yes" xml:space="preserve">
          <source>4.5-4.5.2</source>
        </trans-unit>
        <trans-unit id="1266" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1267" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1268" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1269" translate="yes" xml:space="preserve">
          <source>CD0113</source>
        </trans-unit>
        <trans-unit id="1270" translate="yes" xml:space="preserve">
          <source>114: GlyphRun.ComputeInkBoundingBox() and FormattedText.Extent return different values beginning in .NET 4.5</source>
        </trans-unit>
        <trans-unit id="1271" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1272" translate="yes" xml:space="preserve">
          <source>Improvements were made to GlyphRun.ComputeInkBoundingBox() and FormattedText.Extent in the .NET Framework 4.5 to address issues where the boxes were too small for the contained glyphs in some cases in the .NET Framework 4.0.</source>
        </trans-unit>
        <trans-unit id="1273" translate="yes" xml:space="preserve">
          <source>As a result of this, some bounding boxes will be larger beginning in the .NET Framework 4.5, resulting in subtle differences in UI layout.</source>
        </trans-unit>
        <trans-unit id="1274" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1275" translate="yes" xml:space="preserve">
          <source>Be aware that some glyph bounding box sizes have increased.</source>
        </trans-unit>
        <trans-unit id="1276" translate="yes" xml:space="preserve">
          <source>These changes will usually improve presentation and hit box testing, but if the older (pre-.NET 4.5) behavior is desired, it can be opted into by adding the following entry to the app.config file:</source>
        </trans-unit>
        <trans-unit id="1277" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1278" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1279" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1280" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="1281" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1282" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1283" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1284" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1285" translate="yes" xml:space="preserve">
          <source>CD0114</source>
        </trans-unit>
        <trans-unit id="1286" translate="yes" xml:space="preserve">
          <source>124: Calling DataGrid.CommitEdit from a CellEditEnding handler drops focus</source>
        </trans-unit>
        <trans-unit id="1287" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1288" translate="yes" xml:space="preserve">
          <source>Calling DataGrid.CommitEdit from one of the DataGrid's CellEditEnding event handlers causes the DataGrid to lose focus.</source>
        </trans-unit>
        <trans-unit id="1289" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1290" translate="yes" xml:space="preserve">
          <source>This bug has been fixed in the .NET Framework 4.5.2, so it can be avoided by upgrading the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1291" translate="yes" xml:space="preserve">
          <source>Alternatively, it can be avoided by explicitly re-selecting the DataGrid after calling CommitEdit.</source>
        </trans-unit>
        <trans-unit id="1292" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1293" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1294" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1295" translate="yes" xml:space="preserve">
          <source>4.5-4.5.2</source>
        </trans-unit>
        <trans-unit id="1296" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1297" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1298" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1299" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1300" translate="yes" xml:space="preserve">
          <source>CD0124</source>
        </trans-unit>
        <trans-unit id="1301" translate="yes" xml:space="preserve">
          <source>125: ASP.NET MVC now escapes spaces in strings passed in via route parameters</source>
        </trans-unit>
        <trans-unit id="1302" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1303" translate="yes" xml:space="preserve">
          <source>In order to conform to RFC 2396, spaces in route paths are now escaped when populating action parameters from a route.</source>
        </trans-unit>
        <trans-unit id="1304" translate="yes" xml:space="preserve">
          <source>So, whereas  <ph id="ph1">`/controller/action/some data`</ph> would previously match the route <ph id="ph2">`/controller/action/{data}`</ph> and provide <ph id="ph3">`some data`</ph> as the data parameter, it will now provide <ph id="ph4">`some%20data`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="1305" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1306" translate="yes" xml:space="preserve">
          <source>Code should be updated to unescape string parameters from a route.</source>
        </trans-unit>
        <trans-unit id="1307" translate="yes" xml:space="preserve">
          <source>If the original URI is needed, it can be accessed with the Request.RequestUri.OriginalString API.</source>
        </trans-unit>
        <trans-unit id="1308" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1309" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1310" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1311" translate="yes" xml:space="preserve">
          <source>4.5.2</source>
        </trans-unit>
        <trans-unit id="1312" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1313" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1314" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.Web.Http.RouteAttribute<ept id="p1">](https://msdn.microsoft.com/library/system.web.http.routeattribute(v=vs.118).aspx)</ept></source>
        </trans-unit>
        <trans-unit id="1316" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1317" translate="yes" xml:space="preserve">
          <source>CD0125</source>
        </trans-unit>
        <trans-unit id="1318" translate="yes" xml:space="preserve">
          <source>127: VB.NET no longer supports partial namespace qualification for System.Windows APIs</source>
        </trans-unit>
        <trans-unit id="1319" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1320" translate="yes" xml:space="preserve">
          <source>Beginning in .NET 4.5.2, VB.NET projects cannot specify System.Windows APIs with partially-qualified namespaces.</source>
        </trans-unit>
        <trans-unit id="1321" translate="yes" xml:space="preserve">
          <source>For example, referring to <ph id="ph1">`Windows.Forms.DialogResult`</ph> will fail.</source>
        </trans-unit>
        <trans-unit id="1322" translate="yes" xml:space="preserve">
          <source>Instead, code must refer to the fully qualified name (<ph id="ph1">`System.Windows.Forms.DialogResult`</ph>) or import the specific namespace and refer simply to <ph id="ph2">`DialogResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="1323" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1324" translate="yes" xml:space="preserve">
          <source>Code should be updated to refer to <ph id="ph1">`System.Windows`</ph> APIs either with simple names (and importing the relevant namespace) or with fully qualified names.</source>
        </trans-unit>
        <trans-unit id="1325" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1326" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1327" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1328" translate="yes" xml:space="preserve">
          <source>4.5.2</source>
        </trans-unit>
        <trans-unit id="1329" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1330" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1331" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1332" translate="yes" xml:space="preserve">
          <source>CD0127</source>
        </trans-unit>
        <trans-unit id="1333" translate="yes" xml:space="preserve">
          <source>129: Two-way data-binding to a property with a non-public setter is not supported</source>
        </trans-unit>
        <trans-unit id="1334" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1335" translate="yes" xml:space="preserve">
          <source>Attempting to data bind to a property without a public setter has never been a supported scenario.</source>
        </trans-unit>
        <trans-unit id="1336" translate="yes" xml:space="preserve">
          <source>Beginning in the .NET Framework 4.5.1, this scenario will throw an InvalidOperationException.</source>
        </trans-unit>
        <trans-unit id="1337" translate="yes" xml:space="preserve">
          <source>Note that this new exception will only be thrown for apps that specifically target the .NET Framework 4.5.1.</source>
        </trans-unit>
        <trans-unit id="1338" translate="yes" xml:space="preserve">
          <source>If an app targets the .NET Framework 4.5, the call will be allowed.</source>
        </trans-unit>
        <trans-unit id="1339" translate="yes" xml:space="preserve">
          <source>If the app does not target a particular .NET Framework version, the binding will be treated as one-way.</source>
        </trans-unit>
        <trans-unit id="1340" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1341" translate="yes" xml:space="preserve">
          <source>The app should be updated to either use one-way binding, or expose the property's setter publicly.</source>
        </trans-unit>
        <trans-unit id="1342" translate="yes" xml:space="preserve">
          <source>Alternatively, targeting the .NET Framework 4.5 will cause the app to exhibit the old behavior.</source>
        </trans-unit>
        <trans-unit id="1343" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1344" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1345" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1346" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="1347" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1348" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1349" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1350" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1351" translate="yes" xml:space="preserve">
          <source>CD0129</source>
        </trans-unit>
        <trans-unit id="1352" translate="yes" xml:space="preserve">
          <source>130: Marshal.SizeOf and Marshal.PtrToStructure overloads break dynamic code</source>
        </trans-unit>
        <trans-unit id="1353" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1354" translate="yes" xml:space="preserve">
          <source>Beginning in the .NET Framework 4.5.1, dynamically binding to the methods <ph id="ph1">`Marshal.SizeOf`</ph> or <ph id="ph2">`Marshal.PtrToStructure`</ph> (via Windows PowerShell, IronPython, or the C# dynamic keyword, for example) can result in <ph id="ph3">`MethodInvocationExceptions`</ph> because new overloads of these methods have been added that may be ambiguous to the scripting engines.</source>
        </trans-unit>
        <trans-unit id="1355" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1356" translate="yes" xml:space="preserve">
          <source>Update scripts to clearly indicate which overload shouldbe used.</source>
        </trans-unit>
        <trans-unit id="1357" translate="yes" xml:space="preserve">
          <source>This can typically done by explicitly casting the methods' type parameters as <ph id="ph1">`System.Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="1358" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>this link<ept id="p1">](https://support.microsoft.com/kb/2909958/)</ept> for more detail and examples of how to workaround the issue.</source>
        </trans-unit>
        <trans-unit id="1359" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1360" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1361" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1362" translate="yes" xml:space="preserve">
          <source>4.5.1</source>
        </trans-unit>
        <trans-unit id="1363" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1364" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1365" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1366" translate="yes" xml:space="preserve">
          <source>CD0130</source>
        </trans-unit>
        <trans-unit id="1367" translate="yes" xml:space="preserve">
          <source>131: PreviewLostKeyboardFocus is called repeatedly if its handler shows a Windows Forms message box</source>
        </trans-unit>
        <trans-unit id="1368" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1369" translate="yes" xml:space="preserve">
          <source>Beginning in the .NET Framework 4.5, calling <ph id="ph1">`System.Windows.Forms.MessageBox.Show`</ph> from a <ph id="ph2">`UIElement.PreviewLostKeyboardFocus`</ph> handler will cause the handler to re-fire when the message box is closed, potentially resulting in an infinite loop of message boxes.</source>
        </trans-unit>
        <trans-unit id="1370" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1371" translate="yes" xml:space="preserve">
          <source>There are two options to work around this issue -</source>
        </trans-unit>
        <trans-unit id="1372" translate="yes" xml:space="preserve">
          <source>It may be avoided by calling <ph id="ph1">`System.Windows.MessageBox.Show`</ph> instead of <ph id="ph2">`System.Windows.Forms.MessageBox.Show`</ph>.</source>
        </trans-unit>
        <trans-unit id="1373" translate="yes" xml:space="preserve">
          <source>It may be avoided by showing the message box from a <ph id="ph1">`LostKeyboardFocus`</ph> event handler (as opposed to a <ph id="ph2">`PreviewLostKeyboardFocus`</ph> event handler).</source>
        </trans-unit>
        <trans-unit id="1374" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1375" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1376" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1377" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="1378" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1379" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1380" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1381" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1382" translate="yes" xml:space="preserve">
          <source>CD0131</source>
        </trans-unit>
        <trans-unit id="1383" translate="yes" xml:space="preserve">
          <source>133: A ConcurrentDictionary serialized in .NET 4.5 with NetDataContractSerializer cannot be deserialized by .NET 4.5.1 or 4.5.2</source>
        </trans-unit>
        <trans-unit id="1384" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1385" translate="yes" xml:space="preserve">
          <source>Due to internal changes to the type, <ph id="ph1">`System.Collections.Concurrent.ConcurrentDictionary`</ph> objects that are serialized with the .NET Framework 4.5 using the <ph id="ph2">`NetDataContractSerializer`</ph> cannot be deserialized in the .NET Framework 4.5.1 or in the .NET Framework 4.5.2.</source>
        </trans-unit>
        <trans-unit id="1386" translate="yes" xml:space="preserve">
          <source>Note that moving the other direction (serializing with the .NET Framework 4.5.x and deserializing with the .NET Framework 4.5) works.</source>
        </trans-unit>
        <trans-unit id="1387" translate="yes" xml:space="preserve">
          <source>Similarly, all 4.x cross-version serialization works with the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="1388" translate="yes" xml:space="preserve">
          <source>Serializing and deserializing with a single version of the .NET Framework is not affected.</source>
        </trans-unit>
        <trans-unit id="1389" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1390" translate="yes" xml:space="preserve">
          <source>If it is necessary to serialize and deserialize a ConcurrentDictionary between the .NET Framework 4.5 and .NET Framework 4.5.1/4.5.2, an alternate serializer like the DataContractSerializer or BinaryFormatter serializer should be used instead of the NetDataContractSerializer.</source>
        </trans-unit>
        <trans-unit id="1391" translate="yes" xml:space="preserve">
          <source>Alternatively, because this issue is addressed in the .NET Framework 4.6, it may be solved by upgrading to that version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1392" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1393" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1394" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1395" translate="yes" xml:space="preserve">
          <source>4.5.1-4.6</source>
        </trans-unit>
        <trans-unit id="1396" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1397" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1398" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1399" translate="yes" xml:space="preserve">
          <source>CD0133</source>
        </trans-unit>
        <trans-unit id="1400" translate="yes" xml:space="preserve">
          <source>134: Persian calendar now uses the Hijri solar algorithm</source>
        </trans-unit>
        <trans-unit id="1401" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1402" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.6, the PersianCalendar class uses the Hijri solar algorithm.</source>
        </trans-unit>
        <trans-unit id="1403" translate="yes" xml:space="preserve">
          <source>Converting dates between the PersianCalendar and other calendars may produce a slightly different result beginning with the .NET Framework 4.6 for dates earlier than 1800 or later than 2023 (Gregorian).</source>
        </trans-unit>
        <trans-unit id="1404" translate="yes" xml:space="preserve">
          <source>Also, <ph id="ph1">`PersianCalendar.MinSupportedDateTime`</ph> is now <ph id="ph2">`March 22, 0622 instead of March 21, 0622`</ph>.</source>
        </trans-unit>
        <trans-unit id="1405" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1406" translate="yes" xml:space="preserve">
          <source>Be aware that some early or late dates may be slightly different when using the PersianCalendar in .NET 4.6.</source>
        </trans-unit>
        <trans-unit id="1407" translate="yes" xml:space="preserve">
          <source>Also, when serializing dates between processes which may run on different .NET Framework versions, do not store them as PersianCalendar date strings (since those values may be different).</source>
        </trans-unit>
        <trans-unit id="1408" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1409" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1410" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1411" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="1412" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1413" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1414" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1415" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1416" translate="yes" xml:space="preserve">
          <source>CD0134</source>
        </trans-unit>
        <trans-unit id="1417" translate="yes" xml:space="preserve">
          <source>138: Calling CreateDefaultAuthorizationContext with a null argument has changed</source>
        </trans-unit>
        <trans-unit id="1418" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1419" translate="yes" xml:space="preserve">
          <source>The implementation of the AuthorizationContext returned by a call to the <ph id="ph1">`CreateDefaultAuthorizationContext(IList&lt;IAuthorizationPolicy&gt;)`</ph> with a null authorizationPolicies argument has changed its implementation in the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="1420" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1421" translate="yes" xml:space="preserve">
          <source>In rare cases, WCF apps that use custom authentication may see behavioral differences.</source>
        </trans-unit>
        <trans-unit id="1422" translate="yes" xml:space="preserve">
          <source>In such cases, the previous behavior can be restored in either of two ways:</source>
        </trans-unit>
        <trans-unit id="1423" translate="yes" xml:space="preserve">
          <source>Recompile your app to target an earlier version of the .NET Framework than 4.6.</source>
        </trans-unit>
        <trans-unit id="1424" translate="yes" xml:space="preserve">
          <source>For IIS-hosted services, use the <ph id="ph1">\&lt;</ph>httpRuntime targetFramework="x.x" /&gt; element to target an earlier version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="1425" translate="yes" xml:space="preserve">
          <source>Add the following line to the <ph id="ph1">`&lt;appSettings&gt;`</ph> section of your app.config file: <ph id="ph2">`&lt;add key="appContext.SetSwitch:Switch.System.IdentityModel.EnableCachedEmptyDefaultAuthorizationContext" value="true" /&gt;`</ph></source>
        </trans-unit>
        <trans-unit id="1426" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1427" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1428" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1429" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="1430" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1431" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1432" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1433" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1434" translate="yes" xml:space="preserve">
          <source>CD0138</source>
        </trans-unit>
        <trans-unit id="1435" translate="yes" xml:space="preserve">
          <source>141: WPF TreeViewItem must be used within a TreeView</source>
        </trans-unit>
        <trans-unit id="1436" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1437" translate="yes" xml:space="preserve">
          <source>A change was introduced in 4.5 that restricts usage of TreeViewItem elements outside of a TreeView.</source>
        </trans-unit>
        <trans-unit id="1438" translate="yes" xml:space="preserve">
          <source>This manifests under the following conditions:</source>
        </trans-unit>
        <trans-unit id="1439" translate="yes" xml:space="preserve">
          <source>TreeViewItem's visual parent is not a panel.</source>
        </trans-unit>
        <trans-unit id="1440" translate="yes" xml:space="preserve">
          <source>(A TreeViewItem generated for a TreeView will have a panel as its parent)</source>
        </trans-unit>
        <trans-unit id="1441" translate="yes" xml:space="preserve">
          <source>The TreeViewItem is a descendant of a VirtualizingStackPanel acting as the "items host" for a list control (ListBox, DataGrid, ListView, etc.).</source>
        </trans-unit>
        <trans-unit id="1442" translate="yes" xml:space="preserve">
          <source>Virtualization doesn't need to be enabled.</source>
        </trans-unit>
        <trans-unit id="1443" translate="yes" xml:space="preserve">
          <source>The VirtualizingStackPanel is item-scrolling (<ph id="ph1">`ScrollUnit="Item"`</ph>).</source>
        </trans-unit>
        <trans-unit id="1444" translate="yes" xml:space="preserve">
          <source>Someone calls <ph id="ph1">`VirtualizingStackPanel.MakeVisible(v)`</ph> to scroll an element <ph id="ph2">`v`</ph> into view.</source>
        </trans-unit>
        <trans-unit id="1445" translate="yes" xml:space="preserve">
          <source>This can be done explicitly, or implicitly in a number of ways; perhaps the most common way is simply clicking on <ph id="ph1">`v`</ph> to give it the keyboard focus.</source>
        </trans-unit>
        <trans-unit id="1446" translate="yes" xml:space="preserve">
          <source>The visual-parent chain from <ph id="ph1">`v`</ph> to the VirtualizingStackPanel passes through the TreeViewItem.</source>
        </trans-unit>
        <trans-unit id="1447" translate="yes" xml:space="preserve">
          <source>In other words, this is seen when a TreeViewItem is used outside of a TreeView, and the user clicks on a descendant of the TreeViewItem to bring it into view.</source>
        </trans-unit>
        <trans-unit id="1448" translate="yes" xml:space="preserve">
          <source>If the TreeViewItem has no focusable descendants, you'll never see this issue.</source>
        </trans-unit>
        <trans-unit id="1449" translate="yes" xml:space="preserve">
          <source>An example of a situation where this is hit is when a TreeViewItem is the root of a DataTemplate.</source>
        </trans-unit>
        <trans-unit id="1450" translate="yes" xml:space="preserve">
          <source>When this issue is hit, there is an InvalidCastException that occurs within the WPF framework.</source>
        </trans-unit>
        <trans-unit id="1451" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1452" translate="yes" xml:space="preserve">
          <source>A hotfix will be made available for this.</source>
        </trans-unit>
        <trans-unit id="1453" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1454" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1455" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1456" translate="yes" xml:space="preserve">
          <source>4.5</source>
        </trans-unit>
        <trans-unit id="1457" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1458" translate="yes" xml:space="preserve">
          <source>Runtime</source>
        </trans-unit>
        <trans-unit id="1459" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1460" translate="yes" xml:space="preserve">
          <source>CD0141</source>
        </trans-unit>
        <trans-unit id="1461" translate="yes" xml:space="preserve">
          <source>143: X509CertificateClaimSet.FindClaims Considers All claimTypes</source>
        </trans-unit>
        <trans-unit id="1462" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1463" translate="yes" xml:space="preserve">
          <source>In apps that target the .NET Framework 4.6.1, if an X509 claim set is initialized from a certificate that has multiple DNS entries in its SAN field, the FindClaims method attempts to match the claimType argument with all the DNS entries.</source>
        </trans-unit>
        <trans-unit id="1464" translate="yes" xml:space="preserve">
          <source>For apps that target previous versions of the .NET Framework, the FindClaims method attempts to match the claimType argument only with the last DNS entry.</source>
        </trans-unit>
        <trans-unit id="1465" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1466" translate="yes" xml:space="preserve">
          <source>This change only affects applications targeting the .NET Framework 4.6.1.</source>
        </trans-unit>
        <trans-unit id="1467" translate="yes" xml:space="preserve">
          <source>This change may be disabled (or enabled if targetting pre-4.6.1) with the <bpt id="p1">[</bpt>DisableMultipleDNSEntries<ept id="p1">](https://msdn.microsoft.com/library/mt620030%28v=vs.110%29.aspx)</ept> compatibility switch.</source>
        </trans-unit>
        <trans-unit id="1468" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1469" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1470" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1471" translate="yes" xml:space="preserve">
          <source>4.6.1</source>
        </trans-unit>
        <trans-unit id="1472" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1473" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1474" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1475" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1476" translate="yes" xml:space="preserve">
          <source>CD0143</source>
        </trans-unit>
        <trans-unit id="1477" translate="yes" xml:space="preserve">
          <source>144: Application.FilterMessage no longer throws for re-entrant implementations of IMessageFilter.PreFilterMessage</source>
        </trans-unit>
        <trans-unit id="1478" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1479" translate="yes" xml:space="preserve">
          <source>Prior to the .NET Framework 4.6.1, calling Application.FilterMessage with an IMessageFilter.PreFilterMessage which called AddMessageFilter or RemoveMessageFilter (while also calling Application.DoEvents) would cause an IndexOutOfRangeException.</source>
        </trans-unit>
        <trans-unit id="1480" translate="yes" xml:space="preserve">
          <source>Beginning with applications targeting the .NET Framework 4.6.1, this exception is no longer thrown, and re-entrant filters as described above may be used.</source>
        </trans-unit>
        <trans-unit id="1481" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1482" translate="yes" xml:space="preserve">
          <source>Be aware that Application.FilterMessage will no longer throw for the re-entrant IMessageFilter.PreFilterMessage behavior described above.</source>
        </trans-unit>
        <trans-unit id="1483" translate="yes" xml:space="preserve">
          <source>This only affects applications targeting the .NET Framework 4.6.1.</source>
        </trans-unit>
        <trans-unit id="1484" translate="yes" xml:space="preserve">
          <source>Apps targeting the .NET Framework 4.6.1 can opt out of this change (or apps targeting older Frameworks may opt in) by using the <bpt id="p1">[</bpt>DontSupportReentrantFilterMessage<ept id="p1">](https://msdn.microsoft.com/library/mt620032%28v=vs.110%29.aspx)</ept> compatibility switch.</source>
        </trans-unit>
        <trans-unit id="1485" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1486" translate="yes" xml:space="preserve">
          <source>Edge</source>
        </trans-unit>
        <trans-unit id="1487" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1488" translate="yes" xml:space="preserve">
          <source>4.6.1</source>
        </trans-unit>
        <trans-unit id="1489" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1490" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1491" translate="yes" xml:space="preserve">
          <source>Affected APIs</source>
        </trans-unit>
        <trans-unit id="1492" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1493" translate="yes" xml:space="preserve">
          <source>CD0144</source>
        </trans-unit>
        <trans-unit id="1494" translate="yes" xml:space="preserve">
          <source>145: CurrentCulture is not preserved across WPF Dispatcher operations</source>
        </trans-unit>
        <trans-unit id="1495" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="1496" translate="yes" xml:space="preserve">
          <source>Beginning in the .NET Framework 4.6, changes to CurrentCulture or CurrentUICulture made within a <bpt id="p1">[</bpt>Dispatcher<ept id="p1">](https://msdn.microsoft.com/library/system.windows.threading.dispatcher%28v=vs.110%29.aspx)</ept> will be lost at the end of that dispatcher operation.</source>
        </trans-unit>
        <trans-unit id="1497" translate="yes" xml:space="preserve">
          <source>Similarly, changes to CurrentCulture or CurrentUICulture made outside of a Dispatcher operation may not be reflected when that operation executes.</source>
        </trans-unit>
        <trans-unit id="1498" translate="yes" xml:space="preserve">
          <source>Practically speaking, this means that CurrentCulture and CurrentUICulture changes may not flow between WPF UI callbacks and other code in a WPF application.</source>
        </trans-unit>
        <trans-unit id="1499" translate="yes" xml:space="preserve">
          <source>This is due to a change in <bpt id="p1">[</bpt>ExecutionContext<ept id="p1">](https://msdn.microsoft.com/library/system.threading.executioncontext%28v=vs.110%29.aspx)</ept> that causes CurrentCulture and CurrentUICulture to be stored in the execution context beginning with apps targeting the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="1500" translate="yes" xml:space="preserve">
          <source>WPF dispatcher operations store the execution context used to begin the operation and restore the previous context when the operation is completed.</source>
        </trans-unit>
        <trans-unit id="1501" translate="yes" xml:space="preserve">
          <source>Because CurrentCulture and CurrentUICulture are now part of that context, changes to them within a dispatcher operation are not persisted outside of the operation.</source>
        </trans-unit>
        <trans-unit id="1502" translate="yes" xml:space="preserve">
          <source>Suggestion</source>
        </trans-unit>
        <trans-unit id="1503" translate="yes" xml:space="preserve">
          <source>Apps affected by this change may work around it by storing the desired CurrentCulture or CurrentUICulture in a field and checking in all Dispatcher operation bodies (including UI event callback handlers) that the correct CurrentCulture and CurrentUICulture are set.</source>
        </trans-unit>
        <trans-unit id="1504" translate="yes" xml:space="preserve">
          <source>Alternatively, because the ExecutionContext change underlying this WPF change only affects apps targeting the .NET Framework 4.6 or newer, this break can be avoided by targeting the .NET Framework 4.5.2.</source>
        </trans-unit>
        <trans-unit id="1505" translate="yes" xml:space="preserve">
          <source>Scope</source>
        </trans-unit>
        <trans-unit id="1506" translate="yes" xml:space="preserve">
          <source>Minor</source>
        </trans-unit>
        <trans-unit id="1507" translate="yes" xml:space="preserve">
          <source>Version</source>
        </trans-unit>
        <trans-unit id="1508" translate="yes" xml:space="preserve">
          <source>4.6</source>
        </trans-unit>
        <trans-unit id="1509" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="1510" translate="yes" xml:space="preserve">
          <source>Retargeting</source>
        </trans-unit>
        <trans-unit id="1511" translate="yes" xml:space="preserve">
          <source>Analyzers</source>
        </trans-unit>
        <trans-unit id="1512" translate="yes" xml:space="preserve">
          <source>CD0145</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>