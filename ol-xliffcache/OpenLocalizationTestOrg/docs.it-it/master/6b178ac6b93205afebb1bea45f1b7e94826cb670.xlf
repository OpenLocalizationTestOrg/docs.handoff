<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="storyboards-overview.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b178ac6b93205afebb1bea45f1b7e94826cb670</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\storyboards-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">deee372892b7be99d493ae35c36ffb3741029298</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9532ba318dcea924096c6fd42385aca886ac0281</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Storyboards Overview</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Storyboards Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic shows how to use <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects to organize and apply animations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It describes how to interactively manipulate <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects and describes indirect property targeting syntax.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To understand this topic, you should be familiar with the different animation types and their basic features.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For an introduction to animation, see the <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You should also know how to use attached properties.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information about attached properties, see the <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](../advanced/attached-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>What Is a Storyboard?</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Animations are not the only useful type of timeline.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Other timeline classes are provided to help you organize sets of timelines, and to apply timelines to properties.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Container timelines derive from the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.TimelineGroup&gt;</ph> class, and include <ph id="ph2">&lt;xref:System.Windows.Media.Animation.ParallelTimeline&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> is a type of container timeline that provides targeting information for the timelines it contains.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A Storyboard can contain any type of <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph>, including other container timelines and animations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects enable you to combine timelines that affect a variety of objects and properties into a single timeline tree, making it easy to organize and control complex timing behaviors.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, suppose you want a button that does these three things.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Grow and change color when the user selects the button.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Shrink away and then grow back to its original size when clicked.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Shrink and fade to 50 percent opacity when it becomes disabled.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this case, you have multiple sets of animations that apply to the same object, and you want to play at different times, dependent on the state of the button.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects enable you to organize animations and apply them in groups to one or more objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Where Can You Use a Storyboard?</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> can be used to animate dependency properties of animatable classes (for more information about what makes a class animatable, see the <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](animation-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, because storyboarding is a framework-level feature, the object must belong to the <ph id="ph1">&lt;xref:System.Windows.NameScope&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, you could use a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> to do the following:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Animate a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> (Non-framework element) that paints the Background of a Button (a type of <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>),</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Animate a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> (Non-framework element) that paints the fill of a <ph id="ph2">&lt;xref:System.Windows.Media.GeometryDrawing&gt;</ph> (Non-framework element) displayed using an <ph id="ph3">&lt;xref:System.Windows.Controls.Image&gt;</ph> (<ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In code, animate a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> declared by a class that also contains a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, if the <ph id="ph3">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> registered its name with that <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, you could not use a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> to animate a <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> that did not register its name with a <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>, or was not used to set a property of a <ph id="ph5">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph6">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>How to Apply Animations with a Storyboard</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> to organize and apply animations, you add the animations as child timelines of the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> class provides the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty?displayProperty=nameWithType&gt;</ph> attached properties.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You set these properties on an animation to specify its target object and property.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To apply animations to their targets, you begin the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> using a trigger action or a method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you use a <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> object with an <ph id="ph3">&lt;xref:System.Windows.EventTrigger&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Trigger&gt;</ph>, or <ph id="ph5">&lt;xref:System.Windows.DataTrigger&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In code, you can also use the  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following table shows the different places where each  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> begin technique is supported: per-instance, style, control template, and data template.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>"Per-Instance" refers to the technique of applying an animation or storyboard directly to instances of an object, rather than in a style, control template, or data template.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Storyboard is begun using…</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Per-instance</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Style</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Control template</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Data template</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> and an <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animate a Property by Using a Storyboard<ept id="p1">](how-to-animate-a-property-by-using-a-storyboard.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> and a property <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Trigger an Animation When a Property Value Changes<ept id="p1">](how-to-trigger-an-animation-when-a-property-value-changes.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> and a <ph id="ph2">&lt;xref:System.Windows.DataTrigger&gt;</ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Trigger an Animation When Data Changes<ept id="p1">](https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/aa970679(v=vs.90))</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animate a Property by Using a Storyboard<ept id="p1">](how-to-animate-a-property-by-using-a-storyboard.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> to animate the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> of a <ph id="ph3">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> element and the <ph id="ph4">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> of a <ph id="ph5">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> used to paint that <ph id="ph6">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following sections describe the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty&gt;</ph> attached properties in more detail.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Targeting Framework Elements, Framework Content Elements, and Freezables</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The previous section mentioned that, for an animation to find its target, it must know the target's name and the property to animate.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specifying the property to animate is straight forward: simply set <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty?displayProperty=nameWithType&gt;</ph> with the name of the property to animate.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You specify the name of the object whose property you want to animate by setting the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A?displayProperty=nameWithType&gt;</ph> property on the animation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">&lt;xref:System.Windows.Setter.TargetName%2A&gt;</ph> property to work, the targeted object must have a name.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Assigning a name to a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> is different than assigning a name to a <ph id="ph4">&lt;xref:System.Windows.Freezable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Framework elements are those classes that inherit from the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Examples of framework elements include <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Essentially all windows, panels, and controls are elements.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Framework content elements are those classes that inherit from the <ph id="ph1">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Examples of framework content elements include <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If you're not sure whether a type is a framework element or a framework content element, check to see whether it has a Name property.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If it does, it's probably a framework element or a framework content element.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To be sure, check the Inheritance Hierarchy section of its type page.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To enable the targeting of a framework element or a framework content element in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you set its <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In code, you also need to use the <ph id="ph1">&lt;xref:System.Windows.NameScope.RegisterName%2A&gt;</ph> method to register the element's name with the element for which you've created a <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example, taken from the preceding example, assigns the name <ph id="ph1">`MyRectangle`</ph> a <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>, a type of <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>After it has a name, you can animate a property of that element.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> types are those classes that inherit from the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Examples of <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> include <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.GradientStop&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To enable the targeting of a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> by an animation in  <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you use the <bpt id="p1">[</bpt>x:Name Directive<ept id="p1">](../../xaml-services/x-name-directive.md)</ept> to assign it a name.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In code, you use the  <ph id="ph1">&lt;xref:System.Windows.NameScope.RegisterName%2A&gt;</ph> method to register its name with the element for which you've created a <ph id="ph2">&lt;xref:System.Windows.NameScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following example assigns a name to a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The object can then be targeted by an animation.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects use name scopes to resolve the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For more information about WPF name scopes, see <bpt id="p1">[</bpt>WPF XAML Namescopes<ept id="p1">](../advanced/wpf-xaml-namescopes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> property is omitted, the animation targets the element on which it is defined, or, in the case of styles, the styled element.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Sometimes a name can't be assigned to a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> is declared as a resource or used to set a property value in a style, it can't be given a name.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Because it doesn't have a name, it can't be targeted directly—but it can be targeted indirectly.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The following sections describe how to use indirect targeting.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Indirect Targeting</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>There are times a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> can't be targeted directly by an animation, such as when the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> is declared as a resource or used to set a property value in a style.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In these cases, even though you can't target it directly, you can still animate the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Instead of setting the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> property with the name of the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, you give it the name of the element to which the <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> "belongs."</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> used to set the <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of a rectangle element belongs to that rectangle.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To animate the brush, you would set the animation's <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetProperty&gt;</ph> with a chain of properties that starts at the property of the framework element or framework content element the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> was used to set and ends with the <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> property to animate.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Note that, if the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> is frozen, a clone will be made, and that clone will be animated.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When this happens, the original object's <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A&gt;</ph> property continues to return <ph id="ph2">`false`</ph>, because the original object is not actually animated.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information about cloning, see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Also note that, when using indirect property targeting, it's possible to target objects that don't exist.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, you might assume that the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> of a particular button was set with a <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> and try to animate its Color, when in fact a <ph id="ph3">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> was used to set the button's Background.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In these cases, no exception is thrown; the animation fails to have a visible effect because <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> does not react to changes to the <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following sections describe indirect property targeting syntax in more detail.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Indirectly Targeting a Property of a Freezable in XAML</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To target a property of a freezable in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, use the following syntax.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ElementPropertyName<ept id="p1">*</ept> <ph id="ph1">`.`</ph> <bpt id="p2">*</bpt>FreezablePropertyName<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Where</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ElementPropertyName<ept id="p1">*</ept> is the property of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> which the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> is used to set, and</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>FreezablePropertyName<ept id="p1">*</ept> is the property of the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> to animate.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following code shows how to animate the <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> used to set the</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of a rectangle element.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Sometimes you need to target a freezable contained in a collection or array.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To target a freezable contained in a collection, you use the following path syntax.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>ElementPropertyName<ept id="p1">*</ept> <ph id="ph1">`.Children[`</ph> <bpt id="p2">*</bpt>CollectionIndex<ept id="p2">*</ept> <ph id="ph2">`].`</ph> <bpt id="p3">*</bpt>FreezablePropertyName<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Where <bpt id="p1">*</bpt>CollectionIndex<ept id="p1">*</ept> is the index of the object in its array or collection.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, suppose that a rectangle has a <ph id="ph1">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph> resource applied to its <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property, and you want to animate one of the transforms it contains.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following code shows how to animate the <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform.Angle%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> shown in the previous example.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Indirectly Targeting a Property of a Freezable in Code</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In code, you create a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>When you create the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>, you specify a <ph id="ph2">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To create <ph id="ph1">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>, you create an array of type <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> that contains a list of dependency property identifier fields.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The first identifier field is for the property of the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> that the <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> is used to set.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The next identifier field represents the property of the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> to target.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Think of it as a chain of properties that connects the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The following is an example of a dependency property chain that targets the <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> used to set the <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of a rectangle element.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You also need to specify a <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> is a <ph id="ph2">&lt;xref:System.String&gt;</ph> that tells the <ph id="ph3">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> how to interpret its <ph id="ph4">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>It uses the following syntax.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(`</ph> <bpt id="p1">*</bpt>OwnerPropertyArrayIndex<ept id="p1">*</ept> <ph id="ph2">`).(`</ph> <bpt id="p2">*</bpt>FreezablePropertyArrayIndex<ept id="p2">*</ept> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Where</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>OwnerPropertyArrayIndex<ept id="p1">*</ept> is the index of the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> array that contains the identifier of the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> object's property that the <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> is used to set, and</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>FreezablePropertyArrayIndex<ept id="p1">*</ept> is the index of the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> array that contains the identifier of property to target.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> that would accompany the <ph id="ph2">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph> defined in the preceding example.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The following example combines the code in the previous examples to animate the <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> used to set the <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of a rectangle element.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Sometimes you need to target a freezable contained in a collection or array.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For example, suppose that a rectangle has a <ph id="ph1">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph> resource applied to its <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property, and you want to animate one of the transforms it contains.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To target a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> contained in a collection, you use the following path syntax.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(`</ph> <bpt id="p1">*</bpt>OwnerPropertyArrayIndex<ept id="p1">*</ept> <ph id="ph2">`).(`</ph> <bpt id="p2">*</bpt>CollectionChildrenPropertyArrayIndex<ept id="p2">*</ept> <ph id="ph3">`)`</ph> <ph id="ph4">`[`</ph> <bpt id="p3">*</bpt>CollectionIndex<ept id="p3">*</ept> <ph id="ph5">`].(`</ph> <bpt id="p4">*</bpt>FreezablePropertyArrayIndex<ept id="p4">*</ept> <ph id="ph6">`)`</ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Where <bpt id="p1">*</bpt>CollectionIndex<ept id="p1">*</ept> is the index of the object in its array or collection.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>To target the <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform.Angle%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>, the second transform in the <ph id="ph3">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph>, you would use the following <ph id="ph4">&lt;xref:System.Windows.PropertyPath.Path%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.PropertyPath.PathParameters%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following example shows the complete code for animating the <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform.Angle%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> contained within a <ph id="ph3">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Indirectly Targeting with a Freezable as the Starting Point</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The previous sections described how to indirectly target a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> by starting with a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> and creating a property chain to a <ph id="ph4">&lt;xref:System.Windows.Freezable&gt;</ph> sub-property.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You can also use a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> as a starting point and indirectly target one of its <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> sub-properties.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>One additional restriction applies when using a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> as a starting point for indirect targeting: the starting <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> and every <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> between it and the indirectly targeted sub-property must not be frozen.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Interactively Controlling a Storyboard in XAML</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To start a storyboard in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>, you use a <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> trigger action.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> distributes the animations to the objects and properties they animate, and starts the storyboard.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>(For details about this process, see the <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](animation-and-timing-system-overview.md)</ept>.) If you give the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> a name by specifying its <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard.Name%2A&gt;</ph> property, you make it a controllable storyboard.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>You can then interactively control the storyboard after it's started.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The following is a list of controllable storyboard actions that you use with event triggers to control a storyboard.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.PauseStoryboard&gt;</ph>: Pauses the storyboard.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.ResumeStoryboard&gt;</ph>: Resumes a paused storyboard.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.SetStoryboardSpeedRatio&gt;</ph>: Changes the storyboard's speed.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.SkipStoryboardToFill&gt;</ph>: Advances a storyboard to the end of its fill period, if it has one.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.StopStoryboard&gt;</ph>: Stops the storyboard.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.RemoveStoryboard&gt;</ph>: Removes the storyboard.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>In the following example, controllable storyboard actions are used to interactively control a storyboard.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Interactively Controlling a Storyboard by Using Code</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The previous examples have shown how to animate using trigger actions.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In code, you may also control a storyboard using interactive methods of the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> to be made interactive in code, you must use the appropriate overload of the storyboard's <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%2A&gt;</ph> method and specify <ph id="ph3">`true`</ph> to make it controllable.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29&gt;</ph> page for more information.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The following list shows the methods that can be used to manipulate a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> after it has started:</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The advantage to using these methods is that you don't need to create <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.TriggerAction&gt;</ph> objects; you just need a reference to the controllable <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> you want to manipulate.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> All interactive actions taken on a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph>, and therefore also on a <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> will occur on the next tick of the timing engine which will happen shortly before the next render.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example, if you use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.Seek%2A&gt;</ph> method to jump to another point in an animation, the property value does not change instantly, rather, the value changes on the next tick of the timing engine.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The following example shows how to apply and control animations using the interactive methods of the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Animate in a Style</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects to define animations in a <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Animating with a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> is similar to using a <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> elsewhere, with the following three exceptions:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You don't specify a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph>; the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> always targets the element to which the <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph> is applied.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>To target <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> objects, you must use indirect targeting.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>For more information about indirect targeting, see the <bpt id="p1">[</bpt>Indirect Targeting<ept id="p1">](#pathsyntaxforchangeable)</ept> section.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>You can't specify a <ph id="ph1">&lt;xref:System.Windows.EventTrigger.SourceName%2A&gt;</ph> for an <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Trigger&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>You can't use dynamic resource references or data binding expressions to set <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or animation property values.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>That's because everything inside a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> must be thread-safe, and the timing system must <ph id="ph2">&lt;xref:System.Windows.Freezable.Freeze%2A&gt;</ph><ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects to make them thread-safe.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> cannot be frozen if it or its child timelines contain dynamic resource references or data binding expressions.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For more information about freezing and other <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> features, see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you can't declare event handlers for <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or animation events.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For an example showing how to define a storyboard in a style, see the <bpt id="p1">[</bpt>Animate in a Style<ept id="p1">](how-to-animate-in-a-style.md)</ept> example.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Animate in a ControlTemplate</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects to define animations in a <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Animating with a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> is similar to using a <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> elsewhere, with the following two exceptions:</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> may only refer to child objects of the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> is not specified, the animation targets the element to which the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> is applied.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.EventTrigger.SourceName%2A&gt;</ph> for an <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Trigger&gt;</ph> may only refer to child objects of the <ph id="ph4">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>You can't use dynamic resource references or data binding expressions to set <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or animation property values.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>That's because everything inside a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> must be thread-safe, and the timing system must <ph id="ph2">&lt;xref:System.Windows.Freezable.Freeze%2A&gt;</ph><ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects to make them thread-safe.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> cannot be frozen if it or its child timelines contain dynamic resource references or data binding expressions.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For more information about freezing and other <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> features, see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you can't declare event handlers for <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> or animation events.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>For an example showing how to define a storyboard in a <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, see the <bpt id="p1">[</bpt>Animate in a ControlTemplate<ept id="p1">](how-to-animate-in-a-controltemplate.md)</ept> example.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Animate When a Property Value Changes</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>In styles and control templates, you can use Trigger objects to start a storyboard when a property changes.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>For examples, see <bpt id="p1">[</bpt>Trigger an Animation When a Property Value Changes<ept id="p1">](how-to-trigger-an-animation-when-a-property-value-changes.md)</ept> and <bpt id="p2">[</bpt>Animate in a ControlTemplate<ept id="p2">](how-to-animate-in-a-controltemplate.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Animations applied by property <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> objects behave in a more complex fashion than <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> animations or animations started using <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>They "handoff" with animations defined by other <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> objects, but compose with <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph> and method-triggered animations.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Overview<ept id="p1">](animation-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property Animation Techniques Overview<ept id="p1">](property-animation-techniques-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../advanced/freezable-objects-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>