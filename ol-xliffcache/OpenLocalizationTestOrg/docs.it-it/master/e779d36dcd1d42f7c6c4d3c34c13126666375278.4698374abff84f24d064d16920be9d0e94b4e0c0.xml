{"content":"---\ntitle: \"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"complex numbers [C#]\"\n  - \"classes [C#], operator overloading\"\n  - \"operator overloading [C#], complex numbers\"\n  - \"operator overloading [C#], using to create classes\"\n  - \"operators [C#], overloading to create a complex number class\"\nms.assetid: c9b8d982-5112-413f-bae3-b42ae3248ddf\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide)\nThis example shows how you can use operator overloading to create a complex number class `Complex` that defines complex addition. The program displays the imaginary and the real parts of the numbers and the addition result using an override of the `ToString` method.  \n  \n## Example  \n [!code-cs[csProgGuideStatements#16](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-operator-overloading-to-create-a-complex-number-class_1.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)   \n [operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md)   \n [Why are overloaded operators always static in C#?](http://go.microsoft.com/fwlink/?LinkId=112383)","nodes":[{"pos":[4,801],"nodes":[{"content":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,105],"content":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide) | Microsoft Docs","pos":[0,105]}]}],"pos":[6,114],"yaml":true}],"content":"title: \"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"complex numbers [C#]\"\n  - \"classes [C#], operator overloading\"\n  - \"operator overloading [C#], complex numbers\"\n  - \"operator overloading [C#], using to create classes\"\n  - \"operators [C#], overloading to create a complex number class\"\nms.assetid: c9b8d982-5112-413f-bae3-b42ae3248ddf\ncaps.latest.revision: 15\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[808,896],"content":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide)","linkify":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide)","nodes":[{"content":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide)","pos":[0,88]}]},{"content":"This example shows how you can use operator overloading to create a complex number class <ph id=\"ph1\">`Complex`</ph> that defines complex addition.","pos":[897,1026],"source":"This example shows how you can use operator overloading to create a complex number class `Complex` that defines complex addition."},{"content":"The program displays the imaginary and the real parts of the numbers and the addition result using an override of the <ph id=\"ph1\">`ToString`</ph> method.","pos":[1027,1163],"source":" The program displays the imaginary and the real parts of the numbers and the addition result using an override of the `ToString` method."},{"pos":[1172,1179],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1183,1363],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideStatements#16<ept id=\"p2\">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-operator-overloading-to-create-a-complex-number-class_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideStatements#16](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-use-operator-overloading-to-create-a-complex-number-class_1.cs)]"},{"pos":[1372,1380],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1384,1451],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1455,1525],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>operator (C# Reference)<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[1529,1612],"source":"[operator (C# Reference)](../../../csharp/language-reference/keywords/operator.md) "},{"content":"<bpt id=\"p1\">[</bpt>Why are overloaded operators always static in C#?<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=112383)</ept>","pos":[1616,1714],"source":"[Why are overloaded operators always static in C#?](http://go.microsoft.com/fwlink/?LinkId=112383)"}]}