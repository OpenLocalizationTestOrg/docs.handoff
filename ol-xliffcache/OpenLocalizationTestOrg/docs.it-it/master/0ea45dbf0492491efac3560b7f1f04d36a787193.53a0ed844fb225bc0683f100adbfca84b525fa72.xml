{"content":"---\ntitle: \"Pre-Atomization of XName Objects (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: e84fbbe7-f072-4771-bfbb-059d18e1ad15\n---\n# Pre-Atomization of XName Objects (LINQ to XML) (C#)\nOne way to improve performance in LINQ to XML is to pre-atomize <xref:System.Xml.Linq.XName> objects. Pre-atomization means that you assign a string to an <xref:System.Xml.Linq.XName> object before you create the XML tree by using the constructors of the <xref:System.Xml.Linq.XElement> and  <xref:System.Xml.Linq.XAttribute> classes. Then, instead of passing a string to the constructor, which would use the implicit conversion from string to <xref:System.Xml.Linq.XName>, you pass the initialized <xref:System.Xml.Linq.XName> object.  \n  \n This improves performance when you create a large XML tree in which specific names are repeated. To do this, you declare and initialize <xref:System.Xml.Linq.XName> objects before you construct the XML tree, and then use the <xref:System.Xml.Linq.XName> objects instead of specifying strings for the element and attribute names. This technique can yield significant performance gains if you are creating a large number of elements (or attributes) with the same name.  \n  \n You should test pre-atomization with your scenario to decide if you should use it.  \n  \n## Example  \n The following example demonstrates this.  \n  \n```csharp  \nXName Root = \"Root\";  \nXName Data = \"Data\";  \nXName ID = \"ID\";  \n  \nXElement root = new XElement(Root,  \n    new XElement(Data,  \n        new XAttribute(ID, \"1\"),  \n        \"4,100,000\"),  \n    new XElement(Data,  \n        new XAttribute(ID, \"2\"),  \n        \"3,700,000\"),  \n    new XElement(Data,  \n        new XAttribute(ID, \"3\"),  \n        \"1,150,000\")  \n);  \n  \nConsole.WriteLine(root);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<Root>  \n  <Data ID=\"1\">4,100,000</Data>  \n  <Data ID=\"2\">3,700,000</Data>  \n  <Data ID=\"3\">1,150,000</Data>  \n</Root>  \n```  \n  \n The following example shows the same technique where the XML document is in a namespace:  \n  \n```csharp  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXName Root = aw + \"Root\";  \nXName Data = aw + \"Data\";  \nXName ID = \"ID\";  \n  \nXElement root = new XElement(Root,  \n    new XAttribute(XNamespace.Xmlns + \"aw\", aw),  \n    new XElement(Data,  \n        new XAttribute(ID, \"1\"),  \n        \"4,100,000\"),  \n    new XElement(Data,  \n        new XAttribute(ID, \"2\"),  \n        \"3,700,000\"),  \n    new XElement(Data,  \n        new XAttribute(ID, \"3\"),  \n        \"1,150,000\")  \n);  \n  \nConsole.WriteLine(root);  \n```  \n  \n This example produces the following output:  \n  \n```xml  \n<aw:Root xmlns:aw=\"http://www.adventure-works.com\">  \n  <aw:Data ID=\"1\">4,100,000</aw:Data>  \n  <aw:Data ID=\"2\">3,700,000</aw:Data>  \n  <aw:Data ID=\"3\">1,150,000</aw:Data>  \n</aw:Root>  \n```  \n  \n The following example is more similar to what you will likely encounter in the real world. In this example, the content of the element is supplied by a query:  \n  \n```csharp  \nXName Root = \"Root\";  \nXName Data = \"Data\";  \nXName ID = \"ID\";  \n  \nDateTime t1 = DateTime.Now;  \nXElement root = new XElement(Root,  \n    from i in System.Linq.Enumerable.Range(1, 100000)  \n    select new XElement(Data,  \n        new XAttribute(ID, i),  \n        i * 5)  \n);  \nDateTime t2 = DateTime.Now;  \n  \nConsole.WriteLine(\"Time to construct:{0}\", t2 - t1);  \n```  \n  \n The previous example performs better than the following example, in which names are not pre-atomized:  \n  \n```csharp  \nDateTime t1 = DateTime.Now;  \nXElement root = new XElement(\"Root\",  \n    from i in System.Linq.Enumerable.Range(1, 100000)  \n    select new XElement(\"Data\",  \n        new XAttribute(\"ID\", i),  \n        i * 5)  \n);  \nDateTime t2 = DateTime.Now;  \n  \nConsole.WriteLine(\"Time to construct:{0}\", t2 - t1);  \n```  \n  \n## See also\n\n- [Performance (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/performance-linq-to-xml.md)\n- [Atomized XName and XNamespace Objects (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/atomized-xname-and-xnamespace-objects-linq-to-xml.md)\n","nodes":[{"pos":[4,133],"embed":true,"restype":"x-metadata","content":"title: \"Pre-Atomization of XName Objects (LINQ to XML) (C#)\"\nms.date: 07/20/2015\nms.assetid: e84fbbe7-f072-4771-bfbb-059d18e1ad15","nodes":[{"content":"Pre-Atomization of XName Objects (LINQ to XML) (C#)","nodes":[{"pos":[0,51],"content":"Pre-Atomization of XName Objects (LINQ to XML) (C#)","nodes":[{"content":"Pre-Atomization of XName Objects (LINQ to XML) (C#)","pos":[0,51]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[140,191],"content":"Pre-Atomization of XName Objects (LINQ to XML) (C#)","linkify":"Pre-Atomization of XName Objects (LINQ to XML) (C#)","nodes":[{"content":"Pre-Atomization of XName Objects (LINQ to XML) (C#)","pos":[0,51]}]},{"content":"One way to improve performance in LINQ to XML is to pre-atomize <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects.","pos":[192,293],"source":"One way to improve performance in LINQ to XML is to pre-atomize <xref:System.Xml.Linq.XName> objects."},{"content":"Pre-atomization means that you assign a string to an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object before you create the XML tree by using the constructors of the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> and  <ph id=\"ph3\">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> classes.","pos":[294,526],"source":" Pre-atomization means that you assign a string to an <xref:System.Xml.Linq.XName> object before you create the XML tree by using the constructors of the <xref:System.Xml.Linq.XElement> and  <xref:System.Xml.Linq.XAttribute> classes."},{"content":"Then, instead of passing a string to the constructor, which would use the implicit conversion from string to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph>, you pass the initialized <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> object.","pos":[527,727],"source":" Then, instead of passing a string to the constructor, which would use the implicit conversion from string to <xref:System.Xml.Linq.XName>, you pass the initialized <xref:System.Xml.Linq.XName> object."},{"content":"This improves performance when you create a large XML tree in which specific names are repeated.","pos":[734,830]},{"content":"To do this, you declare and initialize <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects before you construct the XML tree, and then use the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XName&gt;</ph> objects instead of specifying strings for the element and attribute names.","pos":[831,1062],"source":" To do this, you declare and initialize <xref:System.Xml.Linq.XName> objects before you construct the XML tree, and then use the <xref:System.Xml.Linq.XName> objects instead of specifying strings for the element and attribute names."},{"content":"This technique can yield significant performance gains if you are creating a large number of elements (or attributes) with the same name.","pos":[1063,1200]},{"content":"You should test pre-atomization with your scenario to decide if you should use it.","pos":[1207,1289]},{"pos":[1298,1305],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates this.","pos":[1309,1349]},{"content":"This example produces the following output:","pos":[1768,1811]},{"content":"The following example shows the same technique where the XML document is in a namespace:","pos":[1957,2045]},{"content":"This example produces the following output:","pos":[2577,2620]},{"content":"The following example is more similar to what you will likely encounter in the real world.","pos":[2832,2922]},{"content":"In this example, the content of the element is supplied by a query:","pos":[2923,2990]},{"content":"The previous example performs better than the following example, in which names are not pre-atomized:","pos":[3384,3485]},{"pos":[3819,3827],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3831,3942],"content":"<bpt id=\"p1\">[</bpt>Performance (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/performance-linq-to-xml.md)</ept>","source":"[Performance (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/performance-linq-to-xml.md)"},{"pos":[3945,4108],"content":"<bpt id=\"p1\">[</bpt>Atomized XName and XNamespace Objects (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/atomized-xname-and-xnamespace-objects-linq-to-xml.md)</ept>","source":"[Atomized XName and XNamespace Objects (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/atomized-xname-and-xnamespace-objects-linq-to-xml.md)"}]}