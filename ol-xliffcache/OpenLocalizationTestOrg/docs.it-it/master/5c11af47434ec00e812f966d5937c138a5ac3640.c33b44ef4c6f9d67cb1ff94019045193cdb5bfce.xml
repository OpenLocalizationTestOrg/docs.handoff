{"content":"---\ntitle: \"How to: Filter on Element Names (LINQ to XML) (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 1849fb03-f075-421f-863c-e8fb32773cdf\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Filter on Element Names (LINQ to XML) (C#)\nWhen you call one of the methods that return <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, you can filter on the element name.  \n  \n## Example  \n This example retrieves a collection of descendants that is filtered to contain only descendants with the specified name.  \n  \n This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md).  \n  \n```csharp  \nXElement po = XElement.Load(\"PurchaseOrder.xml\");  \nIEnumerable<XElement> items =  \n    from el in po.Descendants(\"ProductName\")  \n    select el;  \nforeach(XElement prdName in items)  \n    Console.WriteLine(prdName.Name + \":\" + (string) prdName);  \n```  \n  \n This code produces the following output:  \n  \n```  \nProductName:Lawnmower  \nProductName:Baby Monitor  \n```  \n  \n The other methods that return <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement> collections follow the same pattern. Their signatures are similar to <xref:System.Xml.Linq.XContainer.Elements%2A> and <xref:System.Xml.Linq.XContainer.Descendants%2A>. The following is the complete list of methods that have similar method signatures:  \n  \n-   <xref:System.Xml.Linq.XNode.Ancestors%2A>  \n  \n-   <xref:System.Xml.Linq.XContainer.Descendants%2A>  \n  \n-   <xref:System.Xml.Linq.XContainer.Elements%2A>  \n  \n-   <xref:System.Xml.Linq.XNode.ElementsAfterSelf%2A>  \n  \n-   <xref:System.Xml.Linq.XNode.ElementsBeforeSelf%2A>  \n  \n-   <xref:System.Xml.Linq.XElement.AncestorsAndSelf%2A>  \n  \n-   <xref:System.Xml.Linq.XElement.DescendantsAndSelf%2A>  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Typical Purchase Order in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-in-a-namespace.md).  \n  \n```csharp  \nXNamespace aw = \"http://www.adventure-works.com\";  \nXElement po = XElement.Load(\"PurchaseOrderInNamespace.xml\");  \nIEnumerable<XElement> items =  \n    from el in po.Descendants(aw + \"ProductName\")  \n    select el;  \nforeach (XElement prdName in items)  \n    Console.WriteLine(prdName.Name + \":\" + (string)prdName);  \n```  \n  \n This code produces the following output:  \n  \n```  \n{http://www.adventure-works.com}ProductName:Lawnmower  \n{http://www.adventure-works.com}ProductName:Baby Monitor  \n```  \n  \n## See Also  \n [LINQ to XML Axes (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)","nodes":[{"pos":[12,79],"content":"How to: Filter on Element Names (LINQ to XML) (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Filter on Element Names (LINQ to XML) (C#) | Microsoft Docs","pos":[0,67]}]},{"pos":[364,414],"content":"How to: Filter on Element Names (LINQ to XML) (C#)","linkify":"How to: Filter on Element Names (LINQ to XML) (C#)","nodes":[{"content":"How to: Filter on Element Names (LINQ to XML) (C#)","pos":[0,50]}]},{"content":"When you call one of the methods that return <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, you can filter on the element name.","pos":[415,581],"source":"When you call one of the methods that return <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement>, you can filter on the element name."},{"pos":[590,597],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"This example retrieves a collection of descendants that is filtered to contain only descendants with the specified name.","pos":[601,721]},{"pos":[728,938],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Typical Purchase Order (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml-1.md)."},{"content":"This code produces the following output:","pos":[1215,1255]},{"content":"The other methods that return <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XElement&gt;</ph> collections follow the same pattern.","pos":[1328,1479],"source":"The other methods that return <xref:System.Collections.Generic.IEnumerable%601> of <xref:System.Xml.Linq.XElement> collections follow the same pattern."},{"content":"Their signatures are similar to <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Elements%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XContainer.Descendants%2A&gt;</ph>.","pos":[1480,1611],"source":" Their signatures are similar to <xref:System.Xml.Linq.XContainer.Elements%2A> and <xref:System.Xml.Linq.XContainer.Descendants%2A>."},{"content":"The following is the complete list of methods that have similar method signatures:","pos":[1612,1694]},{"pos":[2110,2117],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[2121,2195]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[2196,2340],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[2347,2559],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Typical Purchase Order in a Namespace<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Typical Purchase Order in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[2904,2944]},{"pos":[3083,3091],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[3095,3190],"content":"<bpt id=\"p1\">[</bpt>LINQ to XML Axes (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)</ept>","source":"[LINQ to XML Axes (C#)](../../../../csharp/programming-guide/concepts/linq/linq-to-xml-axes.md)"}]}