<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="unit-testing-fsharp-with-nunit.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">384d0ac9f36f9ef9daba851f52d577d97248cd67</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\testing\unit-testing-fsharp-with-nunit.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ab7decea6efc5c173286848d9111c71f4ae500a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9f015fcf44fa5b20eda5e09d2b3308ed3a7f2cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Unit testing F# in .NET Core with dotnet test and NUnit</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn unit test concepts for F# in .NET Core through an interactive experience building a sample solution step-by-step using dotnet test and NUnit.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Unit testing F# libraries in .NET Core using dotnet test and NUnit</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial takes you through an interactive experience building a sample solution step-by-step to learn unit testing concepts.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you prefer to follow the tutorial using a pre-built solution, <bpt id="p1">[</bpt>view or download the sample code<ept id="p1">](https://github.com/dotnet/samples/tree/master/core/getting-started/unit-testing-with-fsharp-nunit/)</ept> before you begin.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For download instructions, see <bpt id="p1">[</bpt>Samples and Tutorials<ept id="p1">](../../samples-and-tutorials/index.md#viewing-and-downloading-samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core 2.1 SDK<ept id="p1">](https://www.microsoft.com/net/download)</ept> or later versions.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A text editor or code editor of your choice.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating the source project</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Open a shell window.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a directory called <bpt id="p1">*</bpt>unit-testing-with-fsharp<ept id="p1">*</ept> to hold the solution.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Inside this new directory, run the following command to create a new solution file for the class library and the test project:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Next, create a <bpt id="p1">*</bpt>MathService<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following outline shows the directory and file structure so far:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Make <bpt id="p1">*</bpt>MathService<ept id="p1">*</ept> the current directory and run the following command to create the source project:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You create a failing implementation of the math service:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Change the directory back to the <bpt id="p1">*</bpt>unit-testing-with-fsharp<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Run the following command to add the class library project to the solution:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creating the test project</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next, create the <bpt id="p1">*</bpt>MathService.Tests<ept id="p1">*</ept> directory.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following outline shows the directory structure:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Make the <bpt id="p1">*</bpt>MathService.Tests<ept id="p1">*</ept> directory the current directory and create a new project using the following command:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This creates a test project that uses NUnit as the test framework.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The generated template configures the test runner in the <bpt id="p1">*</bpt>MathServiceTests.fsproj<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The test project requires other packages to create and run unit tests.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet new`</ph> in the previous step added NUnit and the NUnit test adapter.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Now, add the <ph id="ph1">`MathService`</ph> class library as another dependency to the project.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ph id="ph1">`dotnet add reference`</ph><ept id="p1">](../tools/dotnet-add-reference.md)</ept> command:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can see the entire file in the <bpt id="p1">[</bpt>samples repository<ept id="p1">](https://github.com/dotnet/samples/blob/master/core/getting-started/unit-testing-with-fsharp/MathService.Tests/MathService.Tests.fsproj)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You have the following final solution layout:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Execute the following command in the <bpt id="p1">*</bpt>unit-testing-with-fsharp<ept id="p1">*</ept> directory:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creating the first test</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You write one failing test, make it pass, then repeat the process.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">*</bpt>UnitTest1.fs<ept id="p1">*</ept> and add the following code:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[&lt;TestFixture&gt;]`</ph> attribute denotes a class that contains tests.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[&lt;Test&gt;]`</ph> attribute denotes a test method that is run by the test runner.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">*</bpt>unit-testing-with-fsharp<ept id="p1">*</ept> directory, execute <bpt id="p2">[</bpt><ph id="ph1">`dotnet test`</ph><ept id="p2">](../tools/dotnet-test.md)</ept> to build the tests and the class library and then run the tests.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The NUnit test runner contains the program entry point to run your tests.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dotnet test`</ph> starts the test runner using the unit test project you've created.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>These two tests show the most basic passing and failing tests.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`My test`</ph> passes, and <ph id="ph2">`Fail every time`</ph> fails.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Now, create a test for the <ph id="ph1">`squaresOfOdds`</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`squaresOfOdds`</ph> method returns a sequence of the squares of all odd integer values that are part of the input sequence.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Rather than trying to write all of those functions at once, you can iteratively create tests that validate the functionality.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Making each test pass means creating the necessary functionality for the method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The simplest test we can write is to call <ph id="ph1">`squaresOfOdds`</ph> with all even numbers, where the result should be an empty sequence of integers.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Here's that test:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`expected`</ph> sequence has been converted to a list.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The NUnit framework relies on many standard .NET types.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>That dependency means that your public interface and expected results support <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you run the test, you see that your test fails.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You haven't created the implementation yet.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Make this test pass by writing the simplest code in the <bpt id="p1">*</bpt>Library.fs<ept id="p1">*</ept> class in your MathService project that works:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>unit-testing-with-fsharp<ept id="p1">*</ept> directory, run <ph id="ph1">`dotnet test`</ph> again.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet test`</ph> command runs a build for the <ph id="ph2">`MathService`</ph> project and then for the <ph id="ph3">`MathService.Tests`</ph> project.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>After building both projects, it runs your tests.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Two tests pass now.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Completing the requirements</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Now that you've made one test pass, it's time to write more.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The next simple case works with a sequence whose only odd number is <ph id="ph1">`1`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The number 1 is easier because the square of 1 is 1.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Here's that next test:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Executing <ph id="ph1">`dotnet test`</ph> fails the new test.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You must update the <ph id="ph1">`squaresOfOdds`</ph> method to handle this new test.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You must filter all the even numbers out of the sequence to make this test pass.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can do that by writing a small filter function and using <ph id="ph1">`Seq.filter`</ph>:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Notice the call to <ph id="ph1">`Seq.toList`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>That creates a list, which implements the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There's one more step to go: square each of the odd numbers.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Start by writing a new test:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can fix the test by piping the filtered sequence through a map operation to compute the square of each odd number:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You've built a small library and a set of unit tests for that library.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You've structured the solution so that adding new packages and tests is part of the normal workflow.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You've concentrated most of your time and effort on solving the goals of the application.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>