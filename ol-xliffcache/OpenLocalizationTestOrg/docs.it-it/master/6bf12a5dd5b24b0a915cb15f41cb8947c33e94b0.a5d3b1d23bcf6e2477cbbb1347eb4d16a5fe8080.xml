{"content":"---\ntitle: \"XML CDATA Literal (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.XmlLiteralCdata\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"CDATA literal [Visual Basic]\"\n  - \"XML CDATA literal [Visual Basic]\"\n  - \"XML literals [Visual Basic], CDATA\"\nms.assetid: 9eafb6a4-dd9d-4866-85e8-0654c65abc44\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# XML CDATA Literal (Visual Basic)\nA literal representing an <xref:System.Xml.Linq.XCData> object.  \n  \n## Syntax  \n  \n```  \n<![CDATA[content]]>  \n```  \n  \n## Parts  \n `<![CDATA[`  \n Required. Denotes the start of the XML CDATA section.  \n  \n `content`  \n Required. Text content to appear in the XML CDATA section.  \n  \n `]]>`  \n Required. Denotes the end of the section.  \n  \n## Return Value  \n An <xref:System.Xml.Linq.XCData> object.  \n  \n## Remarks  \n XML CDATA sections contain raw text that should be included, but not parsed, with the XML that contains it. A XML CDATA section can contain any text. This includes reserved XML characters. The XML CDATA section ends with the sequence \"]]>\". This implies the following points:  \n  \n-   You cannot use an embedded expression in an XML CDATA literal because the embedded expression delimiters are valid XML CDATA content.  \n  \n-   XML CDATA sections cannot be nested, because `content` cannot contain the value \"]]>\".  \n  \n You can assign an XML CDATA literal to a variable, or include it in an XML element literal.  \n  \n> [!NOTE]\n>  An XML literal can span multiple lines but does not use line continuation characters. This enables you to copy content from an XML document and paste it directly into a [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] program.  \n  \n The [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] compiler converts the XML CDATA literal to a call to the <xref:System.Xml.Linq.XCData.%23ctor%2A> constructor.  \n  \n## Example  \n The following example creates a CDATA section that contains the text \"Can contain literal \\<XML> tags\".  \n  \n [!code-vb[VbXMLSamples#23](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-cdata-literal_1.vb)]  \n  \n## See Also  \n <xref:System.Xml.Linq.XCData>   \n [XML Element Literal](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)   \n [XML Literals](../../../visual-basic/language-reference/xml-literals/index.md)   \n [Creating XML in Visual Basic](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)","nodes":[{"pos":[12,61],"content":"XML CDATA Literal (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"XML CDATA Literal (Visual Basic) | Microsoft Docs","pos":[0,49]}]},{"pos":[697,729],"content":"XML CDATA Literal (Visual Basic)","linkify":"XML CDATA Literal (Visual Basic)","nodes":[{"content":"XML CDATA Literal (Visual Basic)","pos":[0,32]}]},{"content":"A literal representing an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XCData&gt;</ph> object.","pos":[730,793],"source":"A literal representing an <xref:System.Xml.Linq.XCData> object."},{"pos":[802,808],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[854,859],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[878,887]},{"content":"Denotes the start of the XML CDATA section.","pos":[888,931]},{"content":"Required.","pos":[951,960]},{"content":"Text content to appear in the XML CDATA section.","pos":[961,1009]},{"content":"Required.","pos":[1025,1034]},{"content":"Denotes the end of the section.","pos":[1035,1066]},{"pos":[1075,1087],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XCData&gt;</ph> object.","pos":[1091,1131],"source":"An <xref:System.Xml.Linq.XCData> object."},{"pos":[1140,1147],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"XML CDATA sections contain raw text that should be included, but not parsed, with the XML that contains it.","pos":[1151,1258]},{"content":"A XML CDATA section can contain any text.","pos":[1259,1300]},{"content":"This includes reserved XML characters.","pos":[1301,1339]},{"content":"The XML CDATA section ends with the sequence \"]]&gt;\".","pos":[1340,1391],"source":" The XML CDATA section ends with the sequence \"]]>\"."},{"content":"This implies the following points:","pos":[1392,1426]},{"content":"You cannot use an embedded expression in an XML CDATA literal because the embedded expression delimiters are valid XML CDATA content.","pos":[1436,1569]},{"pos":[1579,1665],"content":"XML CDATA sections cannot be nested, because <ph id=\"ph1\">`content`</ph> cannot contain the value \"]]&gt;\".","source":"XML CDATA sections cannot be nested, because `content` cannot contain the value \"]]>\"."},{"content":"You can assign an XML CDATA literal to a variable, or include it in an XML element literal.","pos":[1672,1763]},{"pos":[1771,2049],"content":"[!NOTE]\n An XML literal can span multiple lines but does not use line continuation characters. This enables you to copy content from an XML document and paste it directly into a [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] program.","leadings":["","> "],"nodes":[{"content":" An XML literal can span multiple lines but does not use line continuation characters. This enables you to copy content from an XML document and paste it directly into a [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] program.","pos":[8,276],"nodes":[{"content":"An XML literal can span multiple lines but does not use line continuation characters.","pos":[1,86]},{"content":"This enables you to copy content from an XML document and paste it directly into a <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> program.","pos":[87,268],"source":" This enables you to copy content from an XML document and paste it directly into a [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] program."}]}]},{"pos":[2056,2260],"content":"The <ph id=\"ph1\">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler converts the XML CDATA literal to a call to the <ph id=\"ph2\">&lt;xref:System.Xml.Linq.XCData.%23ctor%2A&gt;</ph> constructor.","source":"The [!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] compiler converts the XML CDATA literal to a call to the <xref:System.Xml.Linq.XCData.%23ctor%2A> constructor."},{"pos":[2269,2276],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates a CDATA section that contains the text \"Can contain literal <ph id=\"ph1\">\\&lt;</ph>XML&gt; tags\".","pos":[2280,2383],"source":"The following example creates a CDATA section that contains the text \"Can contain literal \\<XML> tags\"."},{"pos":[2390,2516],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbXMLSamples#23<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-cdata-literal_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbXMLSamples#23](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/xml-cdata-literal_1.vb)]"},{"pos":[2525,2533],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\"> [</bpt>XML Element Literal<ept id=\"p1\">](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept><ph id=\"ph1\"> </ph>","pos":[2570,2671],"source":" [XML Element Literal](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md) "},{"content":"<bpt id=\"p1\"> [</bpt>XML Literals<ept id=\"p1\">](../../../visual-basic/language-reference/xml-literals/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2674,2754],"source":" [XML Literals](../../../visual-basic/language-reference/xml-literals/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Creating XML in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)</ept>","pos":[2757,2867],"source":" [Creating XML in Visual Basic](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)"}]}