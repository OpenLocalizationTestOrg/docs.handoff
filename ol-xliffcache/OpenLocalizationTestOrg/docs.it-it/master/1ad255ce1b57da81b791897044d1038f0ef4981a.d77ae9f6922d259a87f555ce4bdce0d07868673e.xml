{"content":"---\ntitle: \"break (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"break\"\n  - \"break_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"break keyword [C#]\"\nms.assetid: be2571ed-efb0-4965-b122-81e5b09db0b9\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# break (C# Reference)\nThe `break` statement terminates the closest enclosing loop or [switch](../../../csharp/language-reference/keywords/switch.md) statement in which it appears. Control is passed to the statement that follows the terminated statement, if any.  \n  \n## Example  \n In this example, the conditional statement contains a counter that is supposed to count from 1 to 100; however, the `break` statement terminates the loop after 4 counts.  \n  \n [!code-cs[csrefKeywordsJump#1](../../../csharp/language-reference/keywords/codesnippet/CSharp/break_1.cs)]  \n  \n## Example  \n In this example, the `break` statement is used to break out of an inner nested loop, and return control to the outer loop.  \n  \n [!code-cs[csrefKeywordsJump#7](../../../csharp/language-reference/keywords/codesnippet/CSharp/break_2.cs)]  \n  \n## Example  \n This example demonstrates the use of `break` in a [switch](../../../csharp/language-reference/keywords/switch.md) statement.  \n  \n [!code-cs[csrefKeywordsJump#2](../../../csharp/language-reference/keywords/codesnippet/CSharp/break_3.cs)]  \n  \n If you entered `4`, the output would be:  \n  \n```  \nEnter your selection (1, 2, or 3): 4  \nSorry, invalid selection.  \n```  \n  \n## C# Language Specification  \n [!INCLUDE[CSharplangspec](../../../csharp/language-reference/keywords/includes/csharplangspec_md.md)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [switch](../../../csharp/language-reference/keywords/switch.md)   \n [Jump Statements](../../../csharp/language-reference/keywords/jump-statements.md)   \n [Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)","nodes":[{"pos":[4,564],"embed":true,"restype":"x-metadata","content":"title: \"break (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"break\"\n  - \"break_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"break keyword [C#]\"\nms.assetid: be2571ed-efb0-4965-b122-81e5b09db0b9\ncaps.latest.revision: 21\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"break (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"break (C# Reference) | Microsoft Docs","nodes":[{"content":"break (C# Reference) | Microsoft Docs","pos":[0,37]}]}],"path":["title"]}],"yml":true},{"pos":[571,591],"content":"break (C# Reference)","linkify":"break (C# Reference)","nodes":[{"content":"break (C# Reference)","pos":[0,20]}]},{"content":"The <ph id=\"ph1\">`break`</ph> statement terminates the closest enclosing loop or <bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../../../csharp/language-reference/keywords/switch.md)</ept> statement in which it appears.","pos":[592,749],"source":"The `break` statement terminates the closest enclosing loop or [switch](../../../csharp/language-reference/keywords/switch.md) statement in which it appears."},{"content":"Control is passed to the statement that follows the terminated statement, if any.","pos":[750,831]},{"pos":[840,847],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[851,1020],"content":"In this example, the conditional statement contains a counter that is supposed to count from 1 to 100; however, the <ph id=\"ph1\">`break`</ph> statement terminates the loop after 4 counts.","source":"In this example, the conditional statement contains a counter that is supposed to count from 1 to 100; however, the `break` statement terminates the loop after 4 counts."},{"pos":[1142,1149],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1153,1275],"content":"In this example, the <ph id=\"ph1\">`break`</ph> statement is used to break out of an inner nested loop, and return control to the outer loop.","source":"In this example, the `break` statement is used to break out of an inner nested loop, and return control to the outer loop."},{"pos":[1397,1404],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1408,1532],"content":"This example demonstrates the use of <ph id=\"ph1\">`break`</ph> in a <bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../../../csharp/language-reference/keywords/switch.md)</ept> statement.","source":"This example demonstrates the use of `break` in a [switch](../../../csharp/language-reference/keywords/switch.md) statement."},{"pos":[1652,1692],"content":"If you entered <ph id=\"ph1\">`4`</ph>, the output would be:","source":"If you entered `4`, the output would be:"},{"pos":[1783,1808],"content":"C# Language Specification","linkify":"C# Language Specification","nodes":[{"content":"C# Language Specification","pos":[0,25]}]},{"pos":[1922,1930],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1934,1994],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1998,2065],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[2069,2137],"source":"[C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>switch<ept id=\"p1\">](../../../csharp/language-reference/keywords/switch.md)</ept><ph id=\"ph1\"> </ph>","pos":[2141,2205],"source":"[switch](../../../csharp/language-reference/keywords/switch.md) "},{"content":"<bpt id=\"p1\">[</bpt>Jump Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/jump-statements.md)</ept><ph id=\"ph1\"> </ph>","pos":[2209,2291],"source":"[Jump Statements](../../../csharp/language-reference/keywords/jump-statements.md) "},{"content":"<bpt id=\"p1\">[</bpt>Iteration Statements<ept id=\"p1\">](../../../csharp/language-reference/keywords/iteration-statements.md)</ept>","pos":[2295,2386],"source":"[Iteration Statements](../../../csharp/language-reference/keywords/iteration-statements.md)"}]}