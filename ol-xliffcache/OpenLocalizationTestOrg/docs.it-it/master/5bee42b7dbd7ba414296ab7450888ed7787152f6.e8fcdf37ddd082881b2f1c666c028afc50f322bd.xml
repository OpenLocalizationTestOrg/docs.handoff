{"content":"---\ntitle: \"&lt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"less than operator (<) [C#]\"\n  - \"< operator [C#]\"\nms.assetid: 38cb91e6-79a6-48ec-9c1e-7b71fd8d2b41\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# &lt; Operator (C# Reference)\nAll numeric and enumeration types define a \"less than\" relational operator (`<`) that returns `true` if the first operand is less than the second, `false` otherwise.  \n  \n## Remarks  \n User-defined types can overload the `<` operator (see [operator](../../../csharp/language-reference/keywords/operator.md)). If `<` is overloaded, [>](../../../csharp/language-reference/operators/greater-than-operator.md) must also be overloaded. When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.  \n  \n## Example  \n [!code-cs[csRefOperators#24](../../../csharp/language-reference/operators/codesnippet/CSharp/less-than-operator_1.cs)]  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Operators](../../../csharp/language-reference/operators/index.md)","nodes":[{"pos":[4,587],"nodes":[{"content":"&lt; Operator (C# Reference) | Microsoft Docs","nodes":[{"pos":[0,45],"content":"&lt; Operator (C# Reference) | Microsoft Docs","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph> Operator (C# Reference) | Microsoft Docs","pos":[0,45],"source":"&lt; Operator (C# Reference) | Microsoft Docs"}]}],"pos":[6,54],"yaml":true}],"content":"title: \"&lt; Operator (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"<_CSharpKeyword\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"less than operator (<) [C#]\"\n  - \"< operator [C#]\"\nms.assetid: 38cb91e6-79a6-48ec-9c1e-7b71fd8d2b41\ncaps.latest.revision: 14\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","yamlblock":true},{"pos":[594,622],"content":"&lt; Operator (C# Reference)","linkify":"&lt; Operator (C# Reference)","nodes":[{"content":"<ph id=\"ph1\">&amp;lt;</ph> Operator (C# Reference)","pos":[0,28],"source":"&lt; Operator (C# Reference)"}]},{"pos":[623,788],"content":"All numeric and enumeration types define a \"less than\" relational operator (<ph id=\"ph1\">`&lt;`</ph>) that returns <ph id=\"ph2\">`true`</ph> if the first operand is less than the second, <ph id=\"ph3\">`false`</ph> otherwise.","source":"All numeric and enumeration types define a \"less than\" relational operator (`<`) that returns `true` if the first operand is less than the second, `false` otherwise."},{"pos":[797,804],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"User-defined types can overload the <ph id=\"ph1\">`&lt;`</ph> operator (see <bpt id=\"p1\">[</bpt>operator<ept id=\"p1\">](../../../csharp/language-reference/keywords/operator.md)</ept>).","pos":[808,931],"source":"User-defined types can overload the `<` operator (see [operator](../../../csharp/language-reference/keywords/operator.md))."},{"content":"If <ph id=\"ph1\">`&lt;`</ph> is overloaded, <bpt id=\"p1\">[</bpt><ph id=\"ph2\">&gt;</ph><ept id=\"p1\">](../../../csharp/language-reference/operators/greater-than-operator.md)</ept> must also be overloaded.","pos":[932,1053],"source":" If `<` is overloaded, [>](../../../csharp/language-reference/operators/greater-than-operator.md) must also be overloaded."},{"content":"When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.","pos":[1054,1169]},{"pos":[1178,1185],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1189,1307],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csRefOperators#24<ept id=\"p2\">](../../../csharp/language-reference/operators/codesnippet/CSharp/less-than-operator_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csRefOperators#24](../../../csharp/language-reference/operators/codesnippet/CSharp/less-than-operator_1.cs)]"},{"pos":[1316,1324],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1328,1388],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1392,1459],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](../../../csharp/language-reference/operators/index.md)</ept>","pos":[1463,1532],"source":"[C# Operators](../../../csharp/language-reference/operators/index.md)"}]}