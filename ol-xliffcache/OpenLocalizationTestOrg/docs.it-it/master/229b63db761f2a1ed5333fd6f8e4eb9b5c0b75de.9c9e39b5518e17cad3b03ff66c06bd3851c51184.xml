{"content":"---\ntitle: \"Standard Query Operators Overview (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 302bd39e-2ec1-495b-94bf-37d370d6f05f\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"\n---\n# Standard Query Operators Overview (Visual Basic)\nThe *standard query operators* are the methods that form the LINQ pattern. Most of these methods operate on sequences, where a sequence is an object whose type implements the <xref:System.Collections.Generic.IEnumerable%601> interface or the <xref:System.Linq.IQueryable%601> interface. The standard query operators provide query capabilities including filtering, projection, aggregation, sorting and more.  \n  \n There are two sets of LINQ standard query operators, one that operates on objects of type <xref:System.Collections.Generic.IEnumerable%601> and the other that operates on objects of type <xref:System.Linq.IQueryable%601>. The methods that make up each set are static members of the <xref:System.Linq.Enumerable> and <xref:System.Linq.Queryable> classes, respectively. They are defined as *extension methods* of the type that they operate on. This means that they can be called by using either static method syntax or instance method syntax.  \n  \n In addition, several standard query operator methods operate on types other than those based on <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Linq.IQueryable%601>. The <xref:System.Linq.Enumerable> type defines two such methods that both operate on objects of type <xref:System.Collections.IEnumerable>. These methods, <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> and <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29>, let you enable a non-parameterized, or non-generic, collection to be queried in the LINQ pattern. They do this by creating a strongly-typed collection of objects. The <xref:System.Linq.Queryable> class defines two similar methods, <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> and <xref:System.Linq.Queryable.OfType%60%601%28System.Linq.IQueryable%29>, that operate on objects of type <xref:System.Linq.Queryable>.  \n  \n The standard query operators differ in the timing of their execution, depending on whether they return a singleton value or a sequence of values. Those methods that return a singleton value (for example, <xref:System.Linq.Enumerable.Average%2A> and <xref:System.Linq.Enumerable.Sum%2A>) execute immediately. Methods that return a sequence defer the query execution and return an enumerable object.  \n  \n In the case of the methods that operate on in-memory collections, that is, those methods that extend <xref:System.Collections.Generic.IEnumerable%601>, the returned enumerable object captures the arguments that were passed to the method. When that object is enumerated, the logic of the query operator is employed and the query results are returned.  \n  \n In contrast, methods that extend <xref:System.Linq.IQueryable%601> do not implement any querying behavior, but build an expression tree that represents the query to be performed. The query processing is handled by the source <xref:System.Linq.IQueryable%601> object.  \n  \n Calls to query methods can be chained together in one query, which enables queries to become arbitrarily complex.  \n  \n The following code example demonstrates how the standard query operators can be used to obtain information about a sequence.  \n  \n```vb  \nDim sentence = \"the quick brown fox jumps over the lazy dog\"  \n' Split the string into individual words to create a collection.  \nDim words = sentence.Split(\" \"c)  \n  \nDim query = From word In words   \n            Group word.ToUpper() By word.Length Into gr = Group   \n            Order By Length _  \n            Select Length, GroupedWords = gr  \n  \nDim output As New System.Text.StringBuilder  \nFor Each obj In query  \n    output.AppendLine(String.Format(\"Words of length {0}:\", obj.Length))  \n    For Each word As String In obj.GroupedWords  \n        output.AppendLine(word)  \n    Next  \nNext  \n  \n'Display the output  \nMsgBox(output.ToString())  \n  \n' This code example produces the following output:  \n'  \n' Words of length 3:  \n' THE  \n' FOX  \n' THE  \n' DOG  \n' Words of length 4:  \n' OVER  \n' LAZY  \n' Words of length 5:  \n' QUICK  \n' BROWN  \n' JUMPS   \n```  \n  \n## Query Expression Syntax  \n Some of the more frequently used standard query operators have dedicated C# and Visual Basic language keyword syntax that enables them to be called as part of a *query* *expression*. For more information about standard query operators that have dedicated keywords and their corresponding syntaxes, see [Query Expression Syntax for Standard Query Operators (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md).  \n  \n## Extending the Standard Query Operators  \n You can augment the set of standard query operators by creating domain-specific methods that are appropriate for your target domain or technology. You can also replace the standard query operators with your own implementations that provide additional services such as remote evaluation, query translation, and optimization. See <xref:System.Linq.Enumerable.AsEnumerable%2A> for an example.  \n  \n## Related Sections  \n The following links take you to topics that provide additional information about the various standard query operators based on functionality.  \n  \n [Sorting Data](../../../../visual-basic/programming-guide/concepts/linq/sorting-data.md)  \n  \n [Set Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/set-operations.md)  \n  \n [Filtering Data (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/filtering-data.md)  \n  \n [Quantifier Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)  \n  \n [Projection Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)  \n  \n [Partitioning Data (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/partitioning-data.md)  \n  \n [Join Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/join-operations.md)  \n  \n [Grouping Data (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/grouping-data.md)  \n  \n [Generation Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/generation-operations.md)  \n  \n [Equality Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/equality-operations.md)  \n  \n [Element Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/element-operations.md)  \n  \n [Converting Data Types (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/converting-data-types.md)  \n  \n [Concatenation Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/concatenation-operations.md)  \n  \n [Aggregation Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/aggregation-operations.md)  \n  \n## See Also  \n <xref:System.Linq.Enumerable>   \n <xref:System.Linq.Queryable>   \n [Introduction to LINQ (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-linq.md)   \n [Query Expression Syntax for Standard Query Operators (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md)   \n [Classification of Standard Query Operators by Manner of Execution (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/classification-of-standard-query-operators-by-manner-of-execution.md)   \n [Extension Methods](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)","nodes":[{"pos":[4,451],"nodes":[{"content":"Standard Query Operators Overview (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,65],"content":"Standard Query Operators Overview (Visual Basic) | Microsoft Docs","nodes":[{"content":"Standard Query Operators Overview (Visual Basic) | Microsoft Docs","pos":[0,65]}]}],"pos":[6,74],"yaml":true}],"content":"title: \"Standard Query Operators Overview (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nms.assetid: 302bd39e-2ec1-495b-94bf-37d370d6f05f\ncaps.latest.revision: 3\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.mt: \n  - \"cs-cz\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"tr-tr\"","yamlblock":true},{"pos":[458,506],"content":"Standard Query Operators Overview (Visual Basic)","linkify":"Standard Query Operators Overview (Visual Basic)","nodes":[{"content":"Standard Query Operators Overview (Visual Basic)","pos":[0,48]}]},{"content":"The <bpt id=\"p1\">*</bpt>standard query operators<ept id=\"p1\">*</ept> are the methods that form the LINQ pattern.","pos":[507,581],"source":"The *standard query operators* are the methods that form the LINQ pattern."},{"content":"Most of these methods operate on sequences, where a sequence is an object whose type implements the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface or the <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.","pos":[582,793],"source":" Most of these methods operate on sequences, where a sequence is an object whose type implements the <xref:System.Collections.Generic.IEnumerable%601> interface or the <xref:System.Linq.IQueryable%601> interface."},{"content":"The standard query operators provide query capabilities including filtering, projection, aggregation, sorting and more.","pos":[794,913]},{"content":"There are two sets of LINQ standard query operators, one that operates on objects of type <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and the other that operates on objects of type <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.","pos":[920,1141],"source":"There are two sets of LINQ standard query operators, one that operates on objects of type <xref:System.Collections.Generic.IEnumerable%601> and the other that operates on objects of type <xref:System.Linq.IQueryable%601>."},{"content":"The methods that make up each set are static members of the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Queryable&gt;</ph> classes, respectively.","pos":[1142,1287],"source":" The methods that make up each set are static members of the <xref:System.Linq.Enumerable> and <xref:System.Linq.Queryable> classes, respectively."},{"content":"They are defined as <bpt id=\"p1\">*</bpt>extension methods<ept id=\"p1\">*</ept> of the type that they operate on.","pos":[1288,1361],"source":" They are defined as *extension methods* of the type that they operate on."},{"content":"This means that they can be called by using either static method syntax or instance method syntax.","pos":[1362,1460]},{"content":"In addition, several standard query operator methods operate on types other than those based on <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.","pos":[1467,1650],"source":"In addition, several standard query operator methods operate on types other than those based on <xref:System.Collections.Generic.IEnumerable%601> or <xref:System.Linq.IQueryable%601>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph> type defines two such methods that both operate on objects of type <ph id=\"ph2\">&lt;xref:System.Collections.IEnumerable&gt;</ph>.","pos":[1651,1790],"source":" The <xref:System.Linq.Enumerable> type defines two such methods that both operate on objects of type <xref:System.Collections.IEnumerable>."},{"content":"These methods, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph>, let you enable a non-parameterized, or non-generic, collection to be queried in the LINQ pattern.","pos":[1791,2066],"source":" These methods, <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> and <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29>, let you enable a non-parameterized, or non-generic, collection to be queried in the LINQ pattern."},{"content":"They do this by creating a strongly-typed collection of objects.","pos":[2067,2131]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Queryable&gt;</ph> class defines two similar methods, <ph id=\"ph2\">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Linq.Queryable.OfType%60%601%28System.Linq.IQueryable%29&gt;</ph>, that operate on objects of type <ph id=\"ph4\">&lt;xref:System.Linq.Queryable&gt;</ph>.","pos":[2132,2406],"source":" The <xref:System.Linq.Queryable> class defines two similar methods, <xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29> and <xref:System.Linq.Queryable.OfType%60%601%28System.Linq.IQueryable%29>, that operate on objects of type <xref:System.Linq.Queryable>."},{"content":"The standard query operators differ in the timing of their execution, depending on whether they return a singleton value or a sequence of values.","pos":[2413,2558]},{"content":"Those methods that return a singleton value (for example, <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>) execute immediately.","pos":[2559,2720],"source":" Those methods that return a singleton value (for example, <xref:System.Linq.Enumerable.Average%2A> and <xref:System.Linq.Enumerable.Sum%2A>) execute immediately."},{"content":"Methods that return a sequence defer the query execution and return an enumerable object.","pos":[2721,2810]},{"content":"In the case of the methods that operate on in-memory collections, that is, those methods that extend <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, the returned enumerable object captures the arguments that were passed to the method.","pos":[2817,3054],"source":"In the case of the methods that operate on in-memory collections, that is, those methods that extend <xref:System.Collections.Generic.IEnumerable%601>, the returned enumerable object captures the arguments that were passed to the method."},{"content":"When that object is enumerated, the logic of the query operator is employed and the query results are returned.","pos":[3055,3166]},{"content":"In contrast, methods that extend <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> do not implement any querying behavior, but build an expression tree that represents the query to be performed.","pos":[3173,3351],"source":"In contrast, methods that extend <xref:System.Linq.IQueryable%601> do not implement any querying behavior, but build an expression tree that represents the query to be performed."},{"content":"The query processing is handled by the source <ph id=\"ph1\">&lt;xref:System.Linq.IQueryable%601&gt;</ph> object.","pos":[3352,3439],"source":" The query processing is handled by the source <xref:System.Linq.IQueryable%601> object."},{"content":"Calls to query methods can be chained together in one query, which enables queries to become arbitrarily complex.","pos":[3446,3559]},{"content":"The following code example demonstrates how the standard query operators can be used to obtain information about a sequence.","pos":[3566,3690]},{"pos":[4577,4600],"content":"Query Expression Syntax","linkify":"Query Expression Syntax","nodes":[{"content":"Query Expression Syntax","pos":[0,23]}]},{"content":"Some of the more frequently used standard query operators have dedicated C# and Visual Basic language keyword syntax that enables them to be called as part of a <bpt id=\"p1\">*</bpt>query<ept id=\"p1\">*</ept> <bpt id=\"p2\">*</bpt>expression<ept id=\"p2\">*</ept>.","pos":[4604,4786],"source":"Some of the more frequently used standard query operators have dedicated C# and Visual Basic language keyword syntax that enables them to be called as part of a *query* *expression*."},{"content":"For more information about standard query operators that have dedicated keywords and their corresponding syntaxes, see <bpt id=\"p1\">[</bpt>Query Expression Syntax for Standard Query Operators (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md)</ept>.","pos":[4787,5090],"source":" For more information about standard query operators that have dedicated keywords and their corresponding syntaxes, see [Query Expression Syntax for Standard Query Operators (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md)."},{"pos":[5099,5137],"content":"Extending the Standard Query Operators","linkify":"Extending the Standard Query Operators","nodes":[{"content":"Extending the Standard Query Operators","pos":[0,38]}]},{"content":"You can augment the set of standard query operators by creating domain-specific methods that are appropriate for your target domain or technology.","pos":[5141,5287]},{"content":"You can also replace the standard query operators with your own implementations that provide additional services such as remote evaluation, query translation, and optimization.","pos":[5288,5464]},{"content":"See <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> for an example.","pos":[5465,5530],"source":" See <xref:System.Linq.Enumerable.AsEnumerable%2A> for an example."},{"pos":[5539,5555],"content":"Related Sections","linkify":"Related Sections","nodes":[{"content":"Related Sections","pos":[0,16]}]},{"content":"The following links take you to topics that provide additional information about the various standard query operators based on functionality.","pos":[5559,5700]},{"pos":[5707,5795],"content":"<bpt id=\"p1\">[</bpt>Sorting Data<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/sorting-data.md)</ept>","source":"[Sorting Data](../../../../visual-basic/programming-guide/concepts/linq/sorting-data.md)"},{"pos":[5802,5909],"content":"<bpt id=\"p1\">[</bpt>Set Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/set-operations.md)</ept>","source":"[Set Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/set-operations.md)"},{"pos":[5916,6023],"content":"<bpt id=\"p1\">[</bpt>Filtering Data (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/filtering-data.md)</ept>","source":"[Filtering Data (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/filtering-data.md)"},{"pos":[6030,6151],"content":"<bpt id=\"p1\">[</bpt>Quantifier Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)</ept>","source":"[Quantifier Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)"},{"pos":[6158,6279],"content":"<bpt id=\"p1\">[</bpt>Projection Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)</ept>","source":"[Projection Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)"},{"pos":[6286,6399],"content":"<bpt id=\"p1\">[</bpt>Partitioning Data (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/partitioning-data.md)</ept>","source":"[Partitioning Data (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/partitioning-data.md)"},{"pos":[6406,6515],"content":"<bpt id=\"p1\">[</bpt>Join Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/join-operations.md)</ept>","source":"[Join Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/join-operations.md)"},{"pos":[6522,6627],"content":"<bpt id=\"p1\">[</bpt>Grouping Data (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/grouping-data.md)</ept>","source":"[Grouping Data (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/grouping-data.md)"},{"pos":[6634,6755],"content":"<bpt id=\"p1\">[</bpt>Generation Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/generation-operations.md)</ept>","source":"[Generation Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/generation-operations.md)"},{"pos":[6762,6879],"content":"<bpt id=\"p1\">[</bpt>Equality Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/equality-operations.md)</ept>","source":"[Equality Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/equality-operations.md)"},{"pos":[6886,7001],"content":"<bpt id=\"p1\">[</bpt>Element Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/element-operations.md)</ept>","source":"[Element Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/element-operations.md)"},{"pos":[7008,7129],"content":"<bpt id=\"p1\">[</bpt>Converting Data Types (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/converting-data-types.md)</ept>","source":"[Converting Data Types (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/converting-data-types.md)"},{"pos":[7136,7263],"content":"<bpt id=\"p1\">[</bpt>Concatenation Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/concatenation-operations.md)</ept>","source":"[Concatenation Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/concatenation-operations.md)"},{"pos":[7270,7393],"content":"<bpt id=\"p1\">[</bpt>Aggregation Operations (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/aggregation-operations.md)</ept>","source":"[Aggregation Operations (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/aggregation-operations.md)"},{"pos":[7402,7410],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph>","pos":[7414,7443],"source":"<xref:System.Linq.Enumerable> "},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Queryable&gt;</ph>","pos":[7448,7476],"source":"<xref:System.Linq.Queryable> "},{"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[7481,7601],"source":"[Introduction to LINQ (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-linq.md) "},{"content":"<bpt id=\"p1\">[</bpt>Query Expression Syntax for Standard Query Operators (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[7605,7789],"source":"[Query Expression Syntax for Standard Query Operators (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md) "},{"content":"<bpt id=\"p1\">[</bpt>Classification of Standard Query Operators by Manner of Execution (Visual Basic)<ept id=\"p1\">](../../../../visual-basic/programming-guide/concepts/linq/classification-of-standard-query-operators-by-manner-of-execution.md)</ept><ph id=\"ph1\"> </ph>","pos":[7793,8003],"source":"[Classification of Standard Query Operators by Manner of Execution (Visual Basic)](../../../../visual-basic/programming-guide/concepts/linq/classification-of-standard-query-operators-by-manner-of-execution.md) "},{"content":"<bpt id=\"p1\">[</bpt>Extension Methods<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept>","pos":[8007,8120],"source":"[Extension Methods](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)"}]}