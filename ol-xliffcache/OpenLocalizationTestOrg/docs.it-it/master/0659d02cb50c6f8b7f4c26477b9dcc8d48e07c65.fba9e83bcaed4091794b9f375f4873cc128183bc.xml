{"content":"---\ntitle: \"Convert a Type to a Generic IEnumerable | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 64774fb5-7447-4296-ad3b-8a94346f99a1\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"\n---\n# Convert a Type to a Generic IEnumerable\nUse <xref:System.Linq.Enumerable.AsEnumerable%2A> to return the argument typed as a generic `IEnumerable`.  \n  \n## Example  \n In this example, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] (using the default generic `Query`) would try to convert the query to SQL and execute it on the server. But the `where` clause references a user-defined client-side method (`isValidProduct`), which cannot be converted to SQL.  \n  \n The solution is to specify the client-side generic <xref:System.Collections.Generic.IEnumerable%601> implementation of `where` to replace the generic <xref:System.Linq.IQueryable%601>. You do this by invoking the <xref:System.Linq.Enumerable.AsEnumerable%2A> operator.  \n  \n [!code-csharp[DLinqQueryExamples#46](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryExamples/cs/Program.cs#46)]\n [!code-vb[DLinqQueryExamples#46](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryExamples/vb/Module1.vb#46)]  \n  \n## See Also  \n [Query Examples](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)","nodes":[{"pos":[4,370],"embed":true,"restype":"x-metadata","content":"title: \"Convert a Type to a Generic IEnumerable | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-ado\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 64774fb5-7447-4296-ad3b-8a94346f99a1\ncaps.latest.revision: 2\nauthor: \"JennieHubbard\"\nms.author: \"jhubbard\"\nmanager: \"jhubbard\"","nodes":[{"content":"Convert a Type to a Generic IEnumerable | Microsoft Docs","nodes":[{"pos":[0,56],"content":"Convert a Type to a Generic IEnumerable | Microsoft Docs","nodes":[{"content":"Convert a Type to a Generic IEnumerable | Microsoft Docs","pos":[0,56]}]}],"path":["title"]}],"yml":true},{"pos":[377,416],"content":"Convert a Type to a Generic IEnumerable","linkify":"Convert a Type to a Generic IEnumerable","nodes":[{"content":"Convert a Type to a Generic IEnumerable","pos":[0,39]}]},{"pos":[417,523],"content":"Use <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> to return the argument typed as a generic <ph id=\"ph2\">`IEnumerable`</ph>.","source":"Use <xref:System.Linq.Enumerable.AsEnumerable%2A> to return the argument typed as a generic `IEnumerable`."},{"pos":[532,539],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, <ph id=\"ph1\">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> (using the default generic <ph id=\"ph2\">`Query`</ph>) would try to convert the query to SQL and execute it on the server.","pos":[543,731],"source":"In this example, [!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)] (using the default generic `Query`) would try to convert the query to SQL and execute it on the server."},{"content":"But the <ph id=\"ph1\">`where`</ph> clause references a user-defined client-side method (<ph id=\"ph2\">`isValidProduct`</ph>), which cannot be converted to SQL.","pos":[732,853],"source":" But the `where` clause references a user-defined client-side method (`isValidProduct`), which cannot be converted to SQL."},{"content":"The solution is to specify the client-side generic <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> implementation of <ph id=\"ph2\">`where`</ph> to replace the generic <ph id=\"ph3\">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.","pos":[860,1044],"source":"The solution is to specify the client-side generic <xref:System.Collections.Generic.IEnumerable%601> implementation of `where` to replace the generic <xref:System.Linq.IQueryable%601>."},{"content":"You do this by invoking the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> operator.","pos":[1045,1128],"source":" You do this by invoking the <xref:System.Linq.Enumerable.AsEnumerable%2A> operator."},{"pos":[1413,1421],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[1425,1514],"content":"<bpt id=\"p1\">[</bpt>Query Examples<ept id=\"p1\">](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)</ept>","source":"[Query Examples](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)"}]}