<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="animation-tips-and-tricks.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">beef79036b8dfa932b9c15be6e4420faba5125a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\animation-tips-and-tricks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ecc648611a91c7c30c4bd071a28677c44eccfae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">959d5630bd00559b5d96cf2845b462daf8cbee7a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Animation Tips and Tricks | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Animation Tips and Tricks</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When working with animations in              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, there are a number of tips and tricks that can make your animations perform better and save you frustration.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>General Issues</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Animating the Position of a Scroll Bar or Slider Freezes It</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you animate the position of a scroll bar or slider using an animation that has a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> of                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> (the default value), the user will no longer be able to move the scroll bar or slider.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>That's because, even though the animation ended, it's still overriding the target property's base value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To stop the animation from overriding the property's current value, remove it, or give it a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> of                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information and an example, see                          <bpt id="p1">[</bpt>Set a Property After Animating It with a Storyboard<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-set-a-property-after-animating-it-with-a-storyboard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Animating the Output of an Animation Has No Effect</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can't animate an object that is the output of another animation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if you use an                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames&gt;</ph> to animate the                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> of a                          <ph id="ph3">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> from a                          <ph id="ph4">&lt;xref:System.Windows.Media.RadialGradientBrush&gt;</ph> to a                          <ph id="ph5">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>, you can't animate any properties of the                          <ph id="ph6">&lt;xref:System.Windows.Media.RadialGradientBrush&gt;</ph> or                          <ph id="ph7">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Can't Change the Value of a Property after Animating it</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In some cases, it might appear that you can't change the value of a property after it's been animated, even after the animation has ended.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>That's because, even though the animation ended, it's still overriding the property's base value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To stop the animation from overriding the property's current value, remove it, or give it a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> of                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information and an example, see                          <bpt id="p1">[</bpt>Set a Property After Animating It with a Storyboard<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-set-a-property-after-animating-it-with-a-storyboard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Changing a Timeline Has No Effect</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Although most                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> properties are animatable and can be data bound, changing the property values of an active                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> seems to have no effect.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>That's because, when a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> is begun, the timing system makes a copy of the                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> and uses it to create a                          <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Modifying the original has no effect on the system's copy.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline&gt;</ph> to reflect changes, its clock must be regenerated and used to replace the previously created clock.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Clocks are not regenerated for you automatically.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following are several ways to apply timeline changes:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the timeline is or belongs to a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, you can make it reflect changes by reapplying its storyboard using a                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.BeginStoryboard&gt;</ph> or the                                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard.Begin%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This has the side effect of also restarting the animation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In code, you can use the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.Seek%2A&gt;</ph> method to advance the storyboard back to its previous position.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you applied an animation directly to a property using the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A&gt;</ph> method, call the                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A&gt;</ph> method again and pass it the animation that has been modified.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you are working directly at the clock level, create and apply a new set of clocks and use them to replace the previous set of generated clocks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about timelines and clocks, see                          <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>FillBehavior.Stop Doesn't Work as Expected</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There are times when setting the                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> property to                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> seems to have no effect, such as when one animation "hands off" to another because it has a                          <ph id="ph3">&lt;xref:System.Windows.Media.Animation.BeginStoryboard.HandoffBehavior%2A&gt;</ph> setting of                          <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example creates a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, a                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> and a                          <ph id="ph3">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> will be animated to move the                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> around the                          <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The examples in this section use the preceding objects to demonstrate several cases where the                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> property doesn't behave as you might expect it to.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>FillBehavior="Stop" and HandoffBehavior with Multiple Animations</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Sometimes it seems as though an animation ignores its                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> property when it is replaced by a second animation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Take the following example, which creates two                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> objects and uses them to animate the same                                  <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> shown in the preceding example.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The first                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>,                                  <ph id="ph2">`B1`</ph>, animates the                                  <ph id="ph3">&lt;xref:System.Windows.Media.TranslateTransform.X%2A&gt;</ph> property of the                                  <ph id="ph4">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> from 0 to 350, which moves the rectangle 350 pixels to the right.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When the animation reaches the end of its duration and stops playing, the                                  <ph id="ph1">&lt;xref:System.Windows.Media.TranslateTransform.X%2A&gt;</ph> property reverts to its original value, 0.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As a result, the rectangle moves to the right 350 pixels and then jumps back to its original position.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The second                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>,                                  <ph id="ph2">`B2`</ph>, also animates the                                  <ph id="ph3">&lt;xref:System.Windows.Media.TranslateTransform.X%2A&gt;</ph> property of the same                                  <ph id="ph4">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because only the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.To%2A&gt;</ph> property of the animation in this                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> is set, the animation uses the current value of the property it animates as its starting value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you click the second button while the first                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> is playing, you might expect the following behavior:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The first storyboard ends and sends the rectangle back to its original position, because the animation has a                                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> of                                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The second storyboard takes effect and animates from the current position, which is now 0, to 500.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>But that's not what happens.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Instead, the rectangle does not jump back; it continues moving to the right.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>That's because the second animation uses the current value of the first animation as its starting value and animates from that value to 500.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the second animation replaces the first because the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph><ph id="ph2">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph> is used, the                                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> of the first animation does not matter.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>FillBehavior and the Completed Event</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The next examples demonstrate another scenario in which the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph><ph id="ph2">&lt;xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A&gt;</ph> seems to have no effect.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Again, the example uses a Storyboard to animate the                                  <ph id="ph1">&lt;xref:System.Windows.Media.TranslateTransform.X%2A&gt;</ph> property of the                                  <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> from 0 to 350.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, this time the example registers for the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Completed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Completed&gt;</ph> event handler starts another                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> that animates the same property from its current value to 500.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following is the markup that defines the second                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> as a resource.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you run the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, you might expect the                                  <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform.X%2A&gt;</ph> property of the                                  <ph id="ph3">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> to animate from 0 to 350, then revert to 0 after it completes (because it has a                                  <ph id="ph4">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph> setting of                                  <ph id="ph5">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph>), and then animate from 0 to 500.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Instead, the                                  <ph id="ph1">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> animates from 0 to 350 and then to 500.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>That's because of the order in which                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> raises events and because property values are cached and are not recalculated unless the property is invalidated.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Timeline.Completed&gt;</ph> event is processed first because it was triggered by the root timeline (the first                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>At this time, the                                  <ph id="ph1">&lt;xref:System.Windows.Media.TranslateTransform.X%2A&gt;</ph> property still returns its animated value because it hasn't been invalidated yet.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> uses the cached value as its starting value and begins animating.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Performance</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Animations Continue to Run After Navigating Away from a Page</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you navigate away from a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> that contains running animations, those animations will continue to play until the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> is garbage collected.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Depending on the navigation system you're using, a page that you navigate away from might stay in memory for an indefinite amount of time, all the while consuming resources with its animations.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is most noticeable when a page contains constantly running ("ambient") animations.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For this reason, it's a good idea to use the                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Unloaded&gt;</ph> event to remove animations when you navigate away from a page.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>There are different ways to remove an animation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following techniques can be used to remove animations that belong to a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To remove a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> you started with an event trigger, see                                  <bpt id="p1">[</bpt>How to: Remove a Storyboard<ept id="p1">](http://msdn.microsoft.com/en-us/7fe39531-de2f-46a0-a69f-b783d04235ee)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To use code to remove a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>, see the                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.Remove%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The next technique may be used regardless of how the animation was started.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To remove animations from a specific property, use the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Specify the property being animated as the first parameter, and                                  <ph id="ph1">`null`</ph> as the second.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This will remove all animation clocks from the property.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information about the different ways to animate properties, see                          <bpt id="p1">[</bpt>Property Animation Techniques Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/property-animation-techniques-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Using the Compose HandoffBehavior Consumes System Resources</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When you apply a                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>,                          <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>, or                          <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to a property using the                          <ph id="ph4">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph><ph id="ph5">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, any                          <ph id="ph6">&lt;xref:System.Windows.Media.Animation.Clock&gt;</ph> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To avoid performance issues when you apply a large number of clocks using                          <ph id="ph1">&lt;xref:System.Windows.Media.Animation.HandoffBehavior&gt;</ph>, you should remove composing clocks from the animated property after they complete.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>There are several ways to remove a clock.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To remove all clocks from a property, use the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29&gt;</ph> or                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29&gt;</ph> method of the animated object.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Specify the property being animated as the first parameter, and                                  <ph id="ph1">`null`</ph> as the second.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This will remove all animation clocks from the property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To remove a specific                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> from a list of clocks, use the                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of the                                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to retrieve a                                  <ph id="ph4">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>, then call the                                  <ph id="ph5">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph> method of the                                  <ph id="ph6">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This is typically done in the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event handler for a clock.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that only root clocks can be controlled by a                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController&gt;</ph>; the                                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Clock.Controller%2A&gt;</ph> property of a child clock will return                                  <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Note also that the                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Clock.Completed&gt;</ph> event will not be called if the effective duration of the clock is forever.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In that case, the user will need to determine when to call                                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ClockController.Remove%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This is primarily an issue for animations on objects that have a long lifetime.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>When an object is garbage collected, its clocks will also be disconnected and garbage collected.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information about clock objects, see                          <bpt id="p1">[</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>