<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-query-for-the-largest-file-or-files-in-a-directory-tree-linq.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20453c754c792d4f5c59fde481e1fec56dcd0e09</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\how-to-query-for-the-largest-file-or-files-in-a-directory-tree-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d39ed6c4b7dfab9eb5bbb8d39fe26d61db8546e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e51860ddf3cc303d9ce358bdb52f1f35b1b1c0d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Query for the Largest File or Files in a Directory Tree (LINQ) (C#)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Query for the Largest File or Files in a Directory Tree (LINQ) (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows five queries related to file size in bytes:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to retrieve the size in bytes of the largest file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>How to retrieve the size in bytes of the smallest file.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>How to retrieve the <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object largest or smallest file from one or more folders under a specified root folder.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>How to retrieve a sequence such as the 10 largest files.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>How to order files into groups based on their file size in bytes, ignoring files that are less than a specified size.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example contains five separate queries that show how to query and group files, depending on their file size in bytes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can easily modify these examples to base the query on some other property of the <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To return one or more complete <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> objects, the query first must examine each one in the data source, and then sort them by the value of their Length property.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Then it can return the single one or the sequence with the greatest lengths.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph> to return the first element in a list.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Linq.Enumerable.Take%2A&gt;</ph> to return the first n number of elements.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specify a descending sort order to put the smallest elements at the start of the list.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The query calls out to a separate method to obtain the file size in bytes in order to consume the possible exception that will be raised in the case where a file was deleted on another thread in the time period since the <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object was created in the call to <ph id="ph2">`GetFiles`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Even through the <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object has already been created, the exception can occur because a <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> object will try to refresh its <ph id="ph3">&lt;xref:System.IO.FileInfo.Length%2A&gt;</ph> property by using the most current size in bytes the first time the property is accessed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By putting this operation in a try-catch block outside the query, we follow the rule of avoiding operations in queries that can cause side-effects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In general, great care must be taken when consuming exceptions, to make sure that an application is not left in an unknown state.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <ph id="ph1">`using`</ph> directives for the System.Linq and System.IO namespaces.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Objects (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ and File Directories (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>