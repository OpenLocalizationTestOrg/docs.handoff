<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">303064e6b72399bbc06673ca7b33ba6e9963d4c9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\ajax-service-with-json-and-xml-sample.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e47b4a567a75c07b3975d868e4d44bcf9ab9e9ba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bded9eef0f66012e15a07b255e2c036fc4db669c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>AJAX Service with JSON and XML Sample | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>AJAX Service with JSON and XML Sample</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to use <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> to create an Asynchronous JavaScript and XML (AJAX) service that returns either JavaScript Object Notation (JSON) or XML data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can access an AJAX service by using JavaScript code from a Web browser client.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This sample builds on the <bpt id="p1">[</bpt>Basic AJAX Service<ept id="p1">](../../../../docs/framework/wcf/samples/basic-ajax-service.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Unlike the other AJAX samples, this sample does not use ASP.NET AJAX and the <ph id="ph1">&lt;xref:System.Web.UI.ScriptManager&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With some additional configuration, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> AJAX services can be accessed from any HTML page through JavaScript, and this scenario is shown here.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an example of using <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> with ASP.NET AJAX, see <bpt id="p1">[</bpt>AJAX Samples<ept id="p1">](http://msdn.microsoft.com/en-us/f3fa45b3-44d5-4926-8cc4-a13c30a3bf3e)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This sample shows how to switch the response type of an operation between JSON and XML.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This functionality is available regardless of whether the service is configured to be accessed by ASP.NET AJAX or by an HTML/JavaScript client page.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The setup procedure and build instructions for this sample are located at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To enable the use of non-ASP.NET AJAX clients, use <ph id="ph1">&lt;xref:System.ServiceModel.Activation.WebServiceHostFactory&gt;</ph> (not <ph id="ph2">&lt;xref:System.ServiceModel.Activation.WebScriptServiceHostFactory&gt;</ph>) in the .svc file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activation.WebServiceHostFactory&gt;</ph> adds a <ph id="ph2">&lt;xref:System.ServiceModel.Description.WebHttpEndpoint&gt;</ph> standard endpoint to the service.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The endpoint is configured at an empty address relative to the .svc file; this means that the address of the service is http://localhost/ServiceModelSamples/service.svc, with no additional suffixes other than the operation name.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following section in Web.config can be used to make additional configuration changes to the endpoint.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It can be removed if no extra changes are needed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The default data format for <ph id="ph1">&lt;xref:System.ServiceModel.Description.WebHttpEndpoint&gt;</ph> is XML, while the default data format for <ph id="ph2">&lt;xref:System.ServiceModel.Description.WebScriptEndpoint&gt;</ph> is JSON.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating WCF AJAX Services without ASP.NET<ept id="p1">](../../../../docs/framework/wcf/feature-details/creating-wcf-ajax-services-without-aspnet.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The service in the following sample is a standard <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service with two operations.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Both operations require the <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebMessageBodyStyle&gt;</ph> body style on the <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> attributes, which is specific to the <ph id="ph4">`webHttp`</ph> behavior and has no bearing on the JSON/XML data format switch.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The response format for the operation is specified as XML, which is the default setting for the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>webHttp&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/webhttp.md)</ept> behavior.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, it is good practice explicitly specify the response format.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The other operation uses the <ph id="ph1">`WebInvokeAttribute`</ph> attribute and explicitly specifies JSON instead of XML for the response.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that in both cases the operations return a complex type, <ph id="ph1">`MathResult`</ph>, which is a standard <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> data contract type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The client Web page XmlAjaxClientPage.htm contains JavaScript code that invokes one of the preceding two operations when the user clicks the <bpt id="p1">**</bpt>Perform calculation (return JSON)<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Perform calculation (return XML)<ept id="p2">**</ept> buttons on the page.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The code to invoke the service constructs a JSON body and sends it using HTTP POST.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The request is created manually in JavaScript, unlike the <bpt id="p1">[</bpt>Basic AJAX Service<ept id="p1">](../../../../docs/framework/wcf/samples/basic-ajax-service.md)</ept> sample and the other samples using ASP.NET AJAX.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the service responds, the response is displayed without any further processing in a textbox on the page.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is implemented for demonstration purposes to allow you to directly observe the XML and JSON data formats used.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Build the solution XmlAjaxService.sln as described in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Navigate to http://localhost/ServiceModelSamples/XmlAjaxClientPage.htm (do not open XmlAjaxClientPage.htm in the browser from the project directory).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AJAX Service Using HTTP POST<ept id="p1">](../../../../docs/framework/wcf/samples/ajax-service-using-http-post.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>