{"content":"---\ntitle: \"How to: Export Custom WSDL\"\nms.date: \"03/30/2017\"\nms.assetid: 5c1e4b58-b76b-472b-9635-2f80d42a0734\n---\n# How to: Export Custom WSDL\nThis topic explains how to export custom WSDL information. To do this we will define a new code attribute called `WsdlDocumentationAttribute` that will add custom information into the WSDL generated by the service.  \n  \n### To export custom WSDL information  \n  \n1.  Implement the <xref:System.ServiceModel.Description.IWsdlExportExtension> interface. This interface can be implemented on a class that implements any of the following interfaces: <xref:System.ServiceModel.Description.IOperationBehavior>, <xref:System.ServiceModel.Description.IContractBehavior>, or <xref:System.ServiceModel.Description.IEndpointBehavior>. It can also be implemented on a class derived from <xref:System.ServiceModel.Channels.BindingElement>. This sample implements <xref:System.ServiceModel.Description.IWsdlExportExtension> on an attribute class that implements <xref:System.ServiceModel.Description.IContractBehavior>.  \n  \n2.  <xref:System.ServiceModel.Description.IWsdlExportExtension> defines two methods <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlEndpointConversionContext%29> and <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportContract%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29>. These methods allow you to modify or add (or both modify and add) additional information into the <xref:System.ServiceModel.Description.WsdlContractConversionContext>. This sample, in the <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportContract%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29> method, retrieves a collection of <xref:System.ServiceModel.Description.OperationDescription> objects and then iterates through the collection checking for a `WsdlDocumentationAttribute`. If one is found, the text associated with the attribute is extracted, a summary element is generated, and the summary element is added into the `DocumentationElement` of the operation.  \n  \n    ```  \n            public void ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)  \n    {  \n                Console.WriteLine(\"Inside ExportContract\");  \n    if (context.Contract != null)  \n    {  \n                    // Set the document element; if this is not done first, there is no XmlElement in the   \n                    // DocumentElement property.  \n                    context.WsdlPortType.Documentation = string.Empty;   \n                    // Contract comments.  \n                    XmlDocument owner = context.WsdlPortType.DocumentationElement.OwnerDocument;  \n                    XmlElement summaryElement = Formatter.CreateSummaryElement(owner, this.Text);   \n                    context.WsdlPortType.DocumentationElement.AppendChild(summaryElement);  \n  \n                    foreach (OperationDescription op in context.Contract.Operations)  \n                    {  \n                        Operation operation = context.GetOperation(op);  \n                        object[] opAttrs = op.SyncMethod.GetCustomAttributes(typeof(WsdlDocumentationAttribute), false);  \n                        if (opAttrs.Length == 1)  \n                        {  \n                            string opComment = ((WsdlDocumentationAttribute)opAttrs[0]).Text;  \n  \n                            // This.Text returns the string for the operation-level attributes.  \n                            // Set the doc element; if this is not done first, there is no XmlElement in the   \n                            // DocumentElement property.  \n                            operation.Documentation = String.Empty;  \n  \n                            XmlDocument opOwner = operation.DocumentationElement.OwnerDocument;  \n                            XmlElement newSummaryElement = Formatter.CreateSummaryElement(opOwner, opComment);  \n                            operation.DocumentationElement.AppendChild(newSummaryElement);  \n                        }  \n                    }  \n                }  \n    ```  \n  \n## Example  \n The following code example shows the full implementation of the `WsdlDocumentationAttribute` class.  \n  \n```  \npublic class WsdlDocumentationAttribute : Attribute, IContractBehavior, IWsdlExportExtension  \n{  \nstring text;  \n       XmlElement customWsdlDocElement = null;  \npublic WsdlDocumentationAttribute(string text)  \n{ this.text = text;}  \n  \n       public WsdlDocumentationAttribute(XmlElement wsdlDocElement)  \n        { this.customWsdlDocElement = wsdlDocElement; }  \n  \n        public XmlElement WsdlDocElement  \n        {  \n            get { return this.customWsdlDocElement; }  \n            set { this.customWsdlDocElement = value; }  \n        }  \n       public string Text  \n{  \nget { return this.text; }  \nset { this.text = value; }  \n}  \n  \n     public void ExportContract(WsdlExporter exporter, WsdlContractConversionContext context)  \n{  \n          Console.WriteLine(\"Inside ExportContract\");  \nif (context.Contract != null)  \n{  \n                // Set the document element; if this is not done first, there is no XmlElement in the   \n                // DocumentElement property.  \n                context.WsdlPortType.Documentation = string.Empty;   \n                // Contract comments.  \n                XmlDocument owner = context.WsdlPortType.DocumentationElement.OwnerDocument;  \n                XmlElement summaryElement = Formatter.CreateSummaryElement(owner, this.Text);   \n                context.WsdlPortType.DocumentationElement.AppendChild(summaryElement);  \n  \n                foreach (OperationDescription op in context.Contract.Operations)  \n                {  \n                    Operation operation = context.GetOperation(op);  \n                    object[] opAttrs = op.SyncMethod.GetCustomAttributes(typeof(WsdlDocumentationAttribute), false);  \n                    if (opAttrs.Length == 1)  \n                    {  \n                        string opComment = ((WsdlDocumentationAttribute)opAttrs[0]).Text;  \n  \n                        // This.Text returns the string for the operation-level attributes.  \n                        // Set the document element; if this is not done first, there is no XmlElement in the   \n                        // DocumentElement property.  \n                        operation.Documentation = String.Empty;  \n  \n                        XmlDocument opOwner = operation.DocumentationElement.OwnerDocument;  \n                        XmlElement newSummaryElement = Formatter.CreateSummaryElement(opOwner, opComment);  \n                        operation.DocumentationElement.AppendChild(newSummaryElement);  \n                    }  \n                }  \n            }  \n        }  \n  \npublic void ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context)   \n        {  \n            Console.WriteLine(\"ExportEndpoint called.\");  \n        }  \n  \n        public void AddBindingParameters(ContractDescription description, ServiceEndpoint endpoint, BindingParameterCollection parameters)  \n        { return; }  \n  \n        public void ApplyClientBehavior(ContractDescription description, ServiceEndpoint endpoint, ClientRuntime client)  \n        { return; }  \n  \n        public void ApplyDispatchBehavior(ContractDescription description, ServiceEndpoint endpoint, DispatchRuntime dispatch)  \n        { return; }  \n  \n        public void Validate(ContractDescription description, ServiceEndpoint endpoint) { return; }  \n    }  \n  \n  public class Formatter  \n  {  \n  \n#region Utility Functions  \n  \n    public static XmlElement CreateSummaryElement(XmlDocument owningDoc, string text)  \n    {  \n      XmlElement summaryElement = owningDoc.CreateElement(\"summary\");  \n      summaryElement.InnerText = text;  \n      return summaryElement;  \n    }  \n  \npublic static CodeCommentStatementCollection FormatComments(string text)  \n{  \n      /*  \n       * Note that in Visual C# the XML comment format absorbs a   \n       * documentation element with a line break in the middle. This sample  \n       * could take an XmlElement and create code comments in which   \n       * the element never had a line break in it.  \n      */  \n  \n      CodeCommentStatementCollection collection = new CodeCommentStatementCollection();  \ncollection.Add(new CodeCommentStatement(\"From WsdlDocumentation:\", true));  \ncollection.Add(new CodeCommentStatement(String.Empty, true));  \n  \nforeach (string line in WordWrap(text, 80))  \n{  \ncollection.Add(new CodeCommentStatement(line, true));  \n}  \n  \ncollection.Add(new CodeCommentStatement(String.Empty, true));  \nreturn collection;  \n}  \n  \npublic static Collection<string> WordWrap(string text, int columnWidth)  \n{  \nCollection<string> lines = new Collection<string>();  \nSystem.Text.StringBuilder builder = new System.Text.StringBuilder();  \n  \nstring[] words = text.Split(' ');  \nforeach (string word in words)  \n{  \nif ((builder.Length > 0) && ((builder.Length + word.Length + 1) > columnWidth))  \n{  \nlines.Add(builder.ToString());  \nbuilder = new System.Text.StringBuilder();  \n}  \nbuilder.Append(word);  \nbuilder.Append(' ');  \n}  \nlines.Add(builder.ToString());  \n  \nreturn lines;  \n}  \n  \n#endregion    \n  \n    public static XmlElement CreateReturnsElement(XmlDocument owner, string p)  \n    {  \n      XmlElement returnsElement = owner.CreateElement(\"returns\");  \n      returnsElement.InnerText = p;  \n      return returnsElement;  \n    }  \n  }  \n```  \n  \n## See also\n\n- [Metadata](../../../../docs/framework/wcf/feature-details/metadata.md)\n","nodes":[{"pos":[4,110],"embed":true,"restype":"x-metadata","content":"title: \"How to: Export Custom WSDL\"\nms.date: \"03/30/2017\"\nms.assetid: 5c1e4b58-b76b-472b-9635-2f80d42a0734","nodes":[{"content":"How to: Export Custom WSDL","nodes":[{"pos":[0,26],"content":"How to: Export Custom WSDL","nodes":[{"content":"How to: Export Custom WSDL","pos":[0,26]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[117,143],"content":"How to: Export Custom WSDL","linkify":"How to: Export Custom WSDL","nodes":[{"content":"How to: Export Custom WSDL","pos":[0,26]}]},{"content":"This topic explains how to export custom WSDL information.","pos":[144,202]},{"content":"To do this we will define a new code attribute called <ph id=\"ph1\">`WsdlDocumentationAttribute`</ph> that will add custom information into the WSDL generated by the service.","pos":[203,358],"source":" To do this we will define a new code attribute called `WsdlDocumentationAttribute` that will add custom information into the WSDL generated by the service."},{"pos":[368,401],"content":"To export custom WSDL information","linkify":"To export custom WSDL information","nodes":[{"content":"To export custom WSDL information","pos":[0,33]}]},{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension&gt;</ph> interface.","pos":[411,495],"source":"Implement the <xref:System.ServiceModel.Description.IWsdlExportExtension> interface."},{"content":"This interface can be implemented on a class that implements any of the following interfaces: <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph>.","pos":[496,767],"source":" This interface can be implemented on a class that implements any of the following interfaces: <xref:System.ServiceModel.Description.IOperationBehavior>, <xref:System.ServiceModel.Description.IContractBehavior>, or <xref:System.ServiceModel.Description.IEndpointBehavior>."},{"content":"It can also be implemented on a class derived from <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.BindingElement&gt;</ph>.","pos":[768,870],"source":" It can also be implemented on a class derived from <xref:System.ServiceModel.Channels.BindingElement>."},{"content":"This sample implements <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension&gt;</ph> on an attribute class that implements <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>.","pos":[871,1049],"source":" This sample implements <xref:System.ServiceModel.Description.IWsdlExportExtension> on an attribute class that implements <xref:System.ServiceModel.Description.IContractBehavior>."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension&gt;</ph> defines two methods <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlEndpointConversionContext%29&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportContract%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29&gt;</ph>.","pos":[1059,1521],"source":"<xref:System.ServiceModel.Description.IWsdlExportExtension> defines two methods <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlEndpointConversionContext%29> and <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportContract%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29>."},{"content":"These methods allow you to modify or add (or both modify and add) additional information into the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.WsdlContractConversionContext&gt;</ph>.","pos":[1522,1689],"source":" These methods allow you to modify or add (or both modify and add) additional information into the <xref:System.ServiceModel.Description.WsdlContractConversionContext>."},{"content":"This sample, in the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportContract%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29&gt;</ph> method, retrieves a collection of <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.OperationDescription&gt;</ph> objects and then iterates through the collection checking for a <ph id=\"ph3\">`WsdlDocumentationAttribute`</ph>.","pos":[1690,2086],"source":" This sample, in the <xref:System.ServiceModel.Description.IWsdlExportExtension.ExportContract%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29> method, retrieves a collection of <xref:System.ServiceModel.Description.OperationDescription> objects and then iterates through the collection checking for a `WsdlDocumentationAttribute`."},{"content":"If one is found, the text associated with the attribute is extracted, a summary element is generated, and the summary element is added into the <ph id=\"ph1\">`DocumentationElement`</ph> of the operation.","pos":[2087,2271],"source":" If one is found, the text associated with the attribute is extracted, a summary element is generated, and the summary element is added into the `DocumentationElement` of the operation."},{"pos":[4298,4305],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4309,4408],"content":"The following code example shows the full implementation of the <ph id=\"ph1\">`WsdlDocumentationAttribute`</ph> class.","source":"The following code example shows the full implementation of the `WsdlDocumentationAttribute` class."},{"pos":[9677,9685],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[9689,9759],"content":"<bpt id=\"p1\">[</bpt>Metadata<ept id=\"p1\">](../../../../docs/framework/wcf/feature-details/metadata.md)</ept>","source":"[Metadata](../../../../docs/framework/wcf/feature-details/metadata.md)"}]}