{"content":"---\ntitle: \"Encrypting Data\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"encryption [.NET Framework], symmetric\"\n  - \"symmetric encryption\"\n  - \"cryptography [.NET Framework], asymmetric\"\n  - \"asymmetric encryption\"\nms.assetid: 7ecce51f-db5f-4bd4-9321-cceb6fcb2a77\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# Encrypting Data\nSymmetric encryption and asymmetric encryption are performed using different processes. Symmetric encryption is performed on streams and is therefore useful to encrypt large amounts of data. Asymmetric encryption is performed on a small number of bytes and is therefore useful only for small amounts of data.  \n  \n## Symmetric Encryption  \n The managed symmetric cryptography classes are used with a special stream class called a <xref:System.Security.Cryptography.CryptoStream> that encrypts data read into the stream. The **CryptoStream** class is initialized with a managed stream class, a class implements the <xref:System.Security.Cryptography.ICryptoTransform> interface (created from a class that implements a cryptographic algorithm), and a <xref:System.Security.Cryptography.CryptoStreamMode> enumeration that describes the type of access permitted to the **CryptoStream**. The **CryptoStream** class can be initialized using any class that derives from the <xref:System.IO.Stream> class, including <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>. Using these classes, you can perform symmetric encryption on a variety of stream objects.  \n  \n The following example illustrates how to create a new instance of the <xref:System.Security.Cryptography.RijndaelManaged> class, which implements the Rijndael encryption algorithm, and use it to perform encryption on a **CryptoStream** class. In this example, the **CryptoStream** is initialized with a stream object called `myStream` that can be any type of managed stream. The **CreateEncryptor** method from the **RijndaelManaged** class is passed the key and IV that are used for encryption. In this case, the default key and IV generated from `rmCrypto` are used. Finally, the **CryptoStreamMode.Write** is passed, specifying write access to the stream.  \n  \n```vb  \nDim rmCrypto As New RijndaelManaged()  \nDim cryptStream As New CryptoStream(myStream, rmCrypto.CreateEncryptor(rmCrypto.Key, rmCrypto.IV), CryptoStreamMode.Write)  \n```  \n  \n```csharp  \nRijndaelManaged rmCrypto = new RijndaelManaged();  \nCryptoStream cryptStream = new CryptoStream(myStream, rmCrypto.CreateEncryptor(), CryptoStreamMode.Write);  \n```  \n  \n After this code is executed, any data written to the **CryptoStream** object is encrypted using the Rijndael algorithm.  \n  \n The following example shows the entire process of creating a stream, encrypting the stream, writing to the stream, and closing the stream. This example creates a network stream that is encrypted using the **CryptoStream** class and the **RijndaelManaged** class. A message is written to the encrypted stream with the <xref:System.IO.StreamWriter> class.  \n  \n> [!NOTE]\n>  You can also use this example to write to a file. To do that, delete the <xref:System.Net.Sockets.TcpClient> reference and replace the <xref:System.Net.Sockets.NetworkStream> with a <xref:System.IO.FileStream>.  \n  \n```vb  \nImports System  \nImports System.IO  \nImports System.Security.Cryptography  \nImports System.Net.Sockets  \n  \nModule Module1  \nSub Main()  \n   Try  \n      'Create a TCP connection to a listening TCP process.  \n      'Use \"localhost\" to specify the current computer or  \n      'replace \"localhost\" with the IP address of the   \n      'listening process.   \n      Dim tcp As New TcpClient(\"localhost\", 11000)  \n  \n      'Create a network stream from the TCP connection.   \n      Dim netStream As NetworkStream = tcp.GetStream()  \n  \n      'Create a new instance of the RijndaelManaged class  \n      'and encrypt the stream.  \n      Dim rmCrypto As New RijndaelManaged()  \n  \n            Dim key As Byte() = {&H1, &H2, &H3, &H4, &H5, &H6, &H7, &H8, &H9, &H10, &H11, &H12, &H13, &H14, &H15, &H16}  \n            Dim iv As Byte() = {&H1, &H2, &H3, &H4, &H5, &H6, &H7, &H8, &H9, &H10, &H11, &H12, &H13, &H14, &H15, &H16}  \n  \n      'Create a CryptoStream, pass it the NetworkStream, and encrypt   \n      'it with the Rijndael class.  \n      Dim cryptStream As New CryptoStream(netStream, rmCrypto.CreateEncryptor(key, iv), CryptoStreamMode.Write)  \n  \n      'Create a StreamWriter for easy writing to the   \n      'network stream.  \n      Dim sWriter As New StreamWriter(cryptStream)  \n  \n      'Write to the stream.  \n      sWriter.WriteLine(\"Hello World!\")  \n  \n      'Inform the user that the message was written  \n      'to the stream.  \n      Console.WriteLine(\"The message was sent.\")  \n  \n      'Close all the connections.  \n      sWriter.Close()  \n      cryptStream.Close()  \n      netStream.Close()  \n      tcp.Close()  \n   Catch  \n      'Inform the user that an exception was raised.  \n      Console.WriteLine(\"The connection failed.\")  \n   End Try  \nEnd Sub  \nEnd Module  \n```  \n  \n```csharp  \nusing System;  \nusing System.IO;  \nusing System.Security.Cryptography;  \nusing System.Net.Sockets;  \n  \npublic class main  \n{  \n   public static void Main(string[] args)  \n   {  \n      try  \n      {  \n         //Create a TCP connection to a listening TCP process.  \n         //Use \"localhost\" to specify the current computer or  \n         //replace \"localhost\" with the IP address of the   \n         //listening process.    \n         TcpClient tcp = new TcpClient(\"localhost\",11000);  \n  \n         //Create a network stream from the TCP connection.   \n         NetworkStream netStream = tcp.GetStream();  \n  \n         //Create a new instance of the RijndaelManaged class  \n         // and encrypt the stream.  \n         RijndaelManaged rmCrypto = new RijndaelManaged();  \n  \n         byte[] key = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16};  \n         byte[] iv = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16};  \n  \n         //Create a CryptoStream, pass it the NetworkStream, and encrypt   \n         //it with the Rijndael class.  \n         CryptoStream cryptStream = new CryptoStream(netStream,   \n         rmCrypto.CreateEncryptor(key, iv),     \n         CryptoStreamMode.Write);  \n  \n         //Create a StreamWriter for easy writing to the   \n         //network stream.  \n         StreamWriter sWriter = new StreamWriter(cryptStream);  \n  \n         //Write to the stream.  \n         sWriter.WriteLine(\"Hello World!\");  \n  \n         //Inform the user that the message was written  \n         //to the stream.  \n         Console.WriteLine(\"The message was sent.\");  \n  \n         //Close all the connections.  \n         sWriter.Close();  \n         cryptStream.Close();  \n         netStream.Close();  \n         tcp.Close();  \n      }  \n      catch  \n      {  \n         //Inform the user that an exception was raised.  \n         Console.WriteLine(\"The connection failed.\");  \n      }  \n   }  \n}  \n```  \n  \n For the previous example to execute successfully, there must be a process listening on the IP address and port number specified in the <xref:System.Net.Sockets.TcpClient> class. If a listening process exists, the code will connect to the listening process, encrypt the stream using the Rijndael symmetric algorithm, and write \"Hello World!\" to the stream. If the code is successful, it displays the following text to the console:  \n  \n```  \nThe message was sent.  \n```  \n  \n However, if no listening process is found or an exception is raised, the code displays the following text to the console:  \n  \n```  \nThe connection failed.  \n```  \n  \n## Asymmetric Encryption  \n Asymmetric algorithms are usually used to encrypt small amounts of data such as the encryption of a symmetric key and IV. Typically, an individual performing asymmetric encryption uses the public key generated by another party. The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is provided by the .NET Framework for this purpose.  \n  \n The following example uses public key information to encrypt a symmetric key and IV. Two byte arrays are initialized that represent the public key of a third party. An <xref:System.Security.Cryptography.RSAParameters> object is initialized to these values. Next, the **RSAParameters** object (along with the public key it represents) is imported into an **RSACryptoServiceProvider** using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters%2A?displayProperty=nameWithType> method. Finally, the private key and IV created by a <xref:System.Security.Cryptography.RijndaelManaged> class are encrypted. This example requires systems to have 128-bit encryption installed.  \n  \n```vb  \nImports System  \nImports System.Security.Cryptography  \n  \nModule Module1  \n  \n    Sub Main()  \n        'Initialize the byte arrays to the public key information.  \n      Dim publicKey As Byte() =  {214, 46, 220, 83, 160, 73, 40, 39, 201, 155, 19,202, 3, 11, 191, 178, 56, 74, 90, 36, 248, 103, 18, 144, 170, 163, 145, 87, 54, 61, 34, 220, 222, 207, 137, 149, 173, 14, 92, 120, 206, 222, 158, 28, 40, 24, 30, 16, 175, 108, 128, 35, 230, 118, 40, 121, 113, 125, 216, 130, 11, 24, 90, 48, 194, 240, 105, 44, 76, 34, 57, 249, 228, 125, 80, 38, 9, 136, 29, 117, 207, 139, 168, 181, 85, 137, 126, 10, 126, 242, 120, 247, 121, 8, 100, 12, 201, 171, 38, 226, 193, 180, 190, 117, 177, 87, 143, 242, 213, 11, 44, 180, 113, 93, 106, 99, 179, 68, 175, 211, 164, 116, 64, 148, 226, 254, 172, 147}  \n  \n        Dim exponent As Byte() = {1, 0, 1}  \n  \n        'Create values to store encrypted symmetric keys.  \n        Dim encryptedSymmetricKey() As Byte  \n        Dim encryptedSymmetricIV() As Byte  \n  \n        'Create a new instance of the RSACryptoServiceProvider class.  \n        Dim rsa As New RSACryptoServiceProvider()  \n  \n        'Create a new instance of the RSAParameters structure.  \n        Dim rsaKeyInfo As New RSAParameters()  \n  \n        'Set rsaKeyInfo to the public key values.   \n        rsaKeyInfo.Modulus = publicKey  \n        rsaKeyInfo.Exponent = exponent  \n  \n        'Import key parameters into rsa.  \n        rsa.ImportParameters(rsaKeyInfo)  \n  \n        'Create a new instance of the RijndaelManaged class.  \n        Dim RM As New RijndaelManaged()  \n  \n        'Encrypt the symmetric key and IV.  \n        encryptedSymmetricKey = rsa.Encrypt(RM.Key, False)  \n        encryptedSymmetricIV = rsa.Encrypt(RM.IV, False)  \n    End Sub  \n  \nEnd Module  \n```  \n  \n```csharp  \nusing System;  \nusing System.Security.Cryptography;  \n  \nclass Class1  \n{  \n   static void Main()  \n   {  \n      //Initialize the byte arrays to the public key information.  \n      byte[] publicKey = {214,46,220,83,160,73,40,39,201,155,19,202,3,11,191,178,56,  \n            74,90,36,248,103,18,144,170,163,145,87,54,61,34,220,222,  \n            207,137,149,173,14,92,120,206,222,158,28,40,24,30,16,175,  \n            108,128,35,230,118,40,121,113,125,216,130,11,24,90,48,194,  \n            240,105,44,76,34,57,249,228,125,80,38,9,136,29,117,207,139,  \n            168,181,85,137,126,10,126,242,120,247,121,8,100,12,201,171,  \n            38,226,193,180,190,117,177,87,143,242,213,11,44,180,113,93,  \n            106,99,179,68,175,211,164,116,64,148,226,254,172,147};  \n  \n      byte[] exponent = {1,0,1};  \n  \n      //Create values to store encrypted symmetric keys.  \n      byte[] encryptedSymmetricKey;  \n      byte[] encryptedSymmetricIV;  \n  \n      //Create a new instance of the RSACryptoServiceProvider class.  \n      RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();  \n  \n      //Create a new instance of the RSAParameters structure.  \n      RSAParameters rsaKeyInfo = new RSAParameters();  \n  \n      //Set rsaKeyInfo to the public key values.   \n      rsaKeyInfo.Modulus = PublicKey;  \n      rsaKeyInfo.Exponent = Exponent;  \n  \n      //Import key parameters into RSA.  \n      rsa.ImportParameters(rsaKeyInfo);  \n  \n      //Create a new instance of the RijndaelManaged class.  \n      RijndaelManaged rm = new RijndaelManaged();  \n  \n      //Encrypt the symmetric key and IV.  \n      encryptedSymmetricKey = rsa.Encrypt(rm.Key, false);  \n      encryptedSymmetricIV = rsa.Encrypt(rm.IV, false);  \n   }  \n}  \n```  \n  \n## See also\n\n- [Generating Keys for Encryption and Decryption](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)\n- [Decrypting Data](../../../docs/standard/security/decrypting-data.md)\n- [Cryptographic Services](../../../docs/standard/security/cryptographic-services.md)\n","nodes":[{"pos":[4,371],"embed":true,"restype":"x-metadata","content":"title: \"Encrypting Data\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\nhelpviewer_keywords: \n  - \"encryption [.NET Framework], symmetric\"\n  - \"symmetric encryption\"\n  - \"cryptography [.NET Framework], asymmetric\"\n  - \"asymmetric encryption\"\nms.assetid: 7ecce51f-db5f-4bd4-9321-cceb6fcb2a77\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"Encrypting Data","nodes":[{"pos":[0,15],"content":"Encrypting Data","nodes":[{"content":"Encrypting Data","pos":[0,15]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[378,393],"content":"Encrypting Data","linkify":"Encrypting Data","nodes":[{"content":"Encrypting Data","pos":[0,15]}]},{"content":"Symmetric encryption and asymmetric encryption are performed using different processes.","pos":[394,481]},{"content":"Symmetric encryption is performed on streams and is therefore useful to encrypt large amounts of data.","pos":[482,584]},{"content":"Asymmetric encryption is performed on a small number of bytes and is therefore useful only for small amounts of data.","pos":[585,702]},{"pos":[711,731],"content":"Symmetric Encryption","linkify":"Symmetric Encryption","nodes":[{"content":"Symmetric Encryption","pos":[0,20]}]},{"content":"The managed symmetric cryptography classes are used with a special stream class called a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> that encrypts data read into the stream.","pos":[735,913],"source":"The managed symmetric cryptography classes are used with a special stream class called a <xref:System.Security.Cryptography.CryptoStream> that encrypts data read into the stream."},{"content":"The <bpt id=\"p1\">**</bpt>CryptoStream<ept id=\"p1\">**</ept> class is initialized with a managed stream class, a class implements the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ICryptoTransform&gt;</ph> interface (created from a class that implements a cryptographic algorithm), and a <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.CryptoStreamMode&gt;</ph> enumeration that describes the type of access permitted to the <bpt id=\"p2\">**</bpt>CryptoStream<ept id=\"p2\">**</ept>.","pos":[914,1276],"source":" The **CryptoStream** class is initialized with a managed stream class, a class implements the <xref:System.Security.Cryptography.ICryptoTransform> interface (created from a class that implements a cryptographic algorithm), and a <xref:System.Security.Cryptography.CryptoStreamMode> enumeration that describes the type of access permitted to the **CryptoStream**."},{"content":"The <bpt id=\"p1\">**</bpt>CryptoStream<ept id=\"p1\">**</ept> class can be initialized using any class that derives from the <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> class, including <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.","pos":[1277,1506],"source":" The **CryptoStream** class can be initialized using any class that derives from the <xref:System.IO.Stream> class, including <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>."},{"content":"Using these classes, you can perform symmetric encryption on a variety of stream objects.","pos":[1507,1596]},{"content":"The following example illustrates how to create a new instance of the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;</ph> class, which implements the Rijndael encryption algorithm, and use it to perform encryption on a <bpt id=\"p1\">**</bpt>CryptoStream<ept id=\"p1\">**</ept> class.","pos":[1603,1845],"source":"The following example illustrates how to create a new instance of the <xref:System.Security.Cryptography.RijndaelManaged> class, which implements the Rijndael encryption algorithm, and use it to perform encryption on a **CryptoStream** class."},{"content":"In this example, the <bpt id=\"p1\">**</bpt>CryptoStream<ept id=\"p1\">**</ept> is initialized with a stream object called <ph id=\"ph1\">`myStream`</ph> that can be any type of managed stream.","pos":[1846,1977],"source":" In this example, the **CryptoStream** is initialized with a stream object called `myStream` that can be any type of managed stream."},{"content":"The <bpt id=\"p1\">**</bpt>CreateEncryptor<ept id=\"p1\">**</ept> method from the <bpt id=\"p2\">**</bpt>RijndaelManaged<ept id=\"p2\">**</ept> class is passed the key and IV that are used for encryption.","pos":[1978,2098],"source":" The **CreateEncryptor** method from the **RijndaelManaged** class is passed the key and IV that are used for encryption."},{"content":"In this case, the default key and IV generated from <ph id=\"ph1\">`rmCrypto`</ph> are used.","pos":[2099,2171],"source":" In this case, the default key and IV generated from `rmCrypto` are used."},{"content":"Finally, the <bpt id=\"p1\">**</bpt>CryptoStreamMode.Write<ept id=\"p1\">**</ept> is passed, specifying write access to the stream.","pos":[2172,2261],"source":" Finally, the **CryptoStreamMode.Write** is passed, specifying write access to the stream."},{"pos":[2632,2751],"content":"After this code is executed, any data written to the <bpt id=\"p1\">**</bpt>CryptoStream<ept id=\"p1\">**</ept> object is encrypted using the Rijndael algorithm.","source":"After this code is executed, any data written to the **CryptoStream** object is encrypted using the Rijndael algorithm."},{"content":"The following example shows the entire process of creating a stream, encrypting the stream, writing to the stream, and closing the stream.","pos":[2758,2896]},{"content":"This example creates a network stream that is encrypted using the <bpt id=\"p1\">**</bpt>CryptoStream<ept id=\"p1\">**</ept> class and the <bpt id=\"p2\">**</bpt>RijndaelManaged<ept id=\"p2\">**</ept> class.","pos":[2897,3020],"source":" This example creates a network stream that is encrypted using the **CryptoStream** class and the **RijndaelManaged** class."},{"content":"A message is written to the encrypted stream with the <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter&gt;</ph> class.","pos":[3021,3111],"source":" A message is written to the encrypted stream with the <xref:System.IO.StreamWriter> class."},{"pos":[3119,3340],"content":"[!NOTE]\n You can also use this example to write to a file. To do that, delete the <xref:System.Net.Sockets.TcpClient> reference and replace the <xref:System.Net.Sockets.NetworkStream> with a <xref:System.IO.FileStream>.","leadings":["","> "],"nodes":[{"content":"You can also use this example to write to a file. To do that, delete the <xref:System.Net.Sockets.TcpClient> reference and replace the <xref:System.Net.Sockets.NetworkStream> with a <xref:System.IO.FileStream>.","pos":[9,219],"nodes":[{"content":"You can also use this example to write to a file.","pos":[0,49]},{"content":"To do that, delete the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> reference and replace the <ph id=\"ph2\">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with a <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph>.","pos":[50,210],"source":" To do that, delete the <xref:System.Net.Sockets.TcpClient> reference and replace the <xref:System.Net.Sockets.NetworkStream> with a <xref:System.IO.FileStream>."}]}]},{"content":"For the previous example to execute successfully, there must be a process listening on the IP address and port number specified in the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> class.","pos":[7161,7338],"source":"For the previous example to execute successfully, there must be a process listening on the IP address and port number specified in the <xref:System.Net.Sockets.TcpClient> class."},{"content":"If a listening process exists, the code will connect to the listening process, encrypt the stream using the Rijndael symmetric algorithm, and write \"Hello World!\"","pos":[7339,7501]},{"content":"to the stream.","pos":[7502,7516]},{"content":"If the code is successful, it displays the following text to the console:","pos":[7517,7590]},{"content":"However, if no listening process is found or an exception is raised, the code displays the following text to the console:","pos":[7636,7757]},{"pos":[7806,7827],"content":"Asymmetric Encryption","linkify":"Asymmetric Encryption","nodes":[{"content":"Asymmetric Encryption","pos":[0,21]}]},{"content":"Asymmetric algorithms are usually used to encrypt small amounts of data such as the encryption of a symmetric key and IV.","pos":[7831,7952]},{"content":"Typically, an individual performing asymmetric encryption uses the public key generated by another party.","pos":[7953,8058]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class is provided by the .NET Framework for this purpose.","pos":[8059,8181],"source":" The <xref:System.Security.Cryptography.RSACryptoServiceProvider> class is provided by the .NET Framework for this purpose."},{"content":"The following example uses public key information to encrypt a symmetric key and IV.","pos":[8188,8272]},{"content":"Two byte arrays are initialized that represent the public key of a third party.","pos":[8273,8352]},{"content":"An <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> object is initialized to these values.","pos":[8353,8444],"source":" An <xref:System.Security.Cryptography.RSAParameters> object is initialized to these values."},{"content":"Next, the <bpt id=\"p1\">**</bpt>RSAParameters<ept id=\"p1\">**</ept> object (along with the public key it represents) is imported into an <bpt id=\"p2\">**</bpt>RSACryptoServiceProvider<ept id=\"p2\">**</ept> using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[8445,8698],"source":" Next, the **RSAParameters** object (along with the public key it represents) is imported into an **RSACryptoServiceProvider** using the <xref:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters%2A?displayProperty=nameWithType> method."},{"content":"Finally, the private key and IV created by a <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RijndaelManaged&gt;</ph> class are encrypted.","pos":[8699,8816],"source":" Finally, the private key and IV created by a <xref:System.Security.Cryptography.RijndaelManaged> class are encrypted."},{"content":"This example requires systems to have 128-bit encryption installed.","pos":[8817,8884]},{"pos":[12423,12431],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[12435,12564],"content":"<bpt id=\"p1\">[</bpt>Generating Keys for Encryption and Decryption<ept id=\"p1\">](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)</ept>","source":"[Generating Keys for Encryption and Decryption](../../../docs/standard/security/generating-keys-for-encryption-and-decryption.md)"},{"pos":[12567,12636],"content":"<bpt id=\"p1\">[</bpt>Decrypting Data<ept id=\"p1\">](../../../docs/standard/security/decrypting-data.md)</ept>","source":"[Decrypting Data](../../../docs/standard/security/decrypting-data.md)"},{"pos":[12639,12722],"content":"<bpt id=\"p1\">[</bpt>Cryptographic Services<ept id=\"p1\">](../../../docs/standard/security/cryptographic-services.md)</ept>","source":"[Cryptographic Services](../../../docs/standard/security/cryptographic-services.md)"}]}