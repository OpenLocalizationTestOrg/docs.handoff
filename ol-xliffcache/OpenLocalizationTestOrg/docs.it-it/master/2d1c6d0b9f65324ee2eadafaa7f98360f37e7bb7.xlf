<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="syntax-visualizer.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d1c6d0b9f65324ee2eadafaa7f98360f37e7bb7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\roslyn-sdk\syntax-visualizer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1fd91452a4550a4c937f41c59783017c5f55eab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6b99a26883a5b0dec4e48def7b6edbe4a206625</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Explore code with the Roslyn syntax visualizer in Visual Studio</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>The syntax visualizer provides a visual tool to explore the models the .NET Compiler Platform SDK generates for code.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Explore code with the Roslyn syntax visualizer in Visual Studio</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article provides an overview of the Syntax Visualizer tool that ships as part of the .NET Compiler Platform ("Roslyn") SDK.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Syntax Visualizer is a tool window that helps you inspect and explore syntax trees.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It's an essential tool to understand the models for code you want to analyze.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It's also a debugging aid when you develop your own applications using the .NET Compiler Platform (“Roslyn”) SDK.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Open this tool as you create your first analyzers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The visualizer helps you understand the models used by the APIs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also use tools like <bpt id="p1">[</bpt>SharpLab<ept id="p1">](https://sharplab.io)</ept> or <bpt id="p2">[</bpt>LINQPad<ept id="p2">](https://www.linqpad.net/)</ept> to inspect code and understand syntax trees.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Familiarize yourself with the concepts used in the .NET Compiler Platform SDK by reading the <bpt id="p1">[</bpt>overview<ept id="p1">](compiler-api-model.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It provides an introduction to syntax trees, nodes, tokens, and trivia.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Syntax Visualizer</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Syntax Visualizer<ept id="p1">**</ept> enables inspection of the syntax tree for the C# or VB code file in the current active editor window inside the Visual Studio IDE.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The visualizer can be launched by clicking on <bpt id="p1">**</bpt>View<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Other Windows<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>Syntax Visualizer<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">**</bpt>Quick Launch<ept id="p1">**</ept> toolbar in the upper right corner.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Type "syntax", and the command to open the <bpt id="p1">**</bpt>Syntax Visualizer<ept id="p1">**</ept> should appear.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This command opens the Syntax Visualizer as a floating tool window.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you don't have a code editor window open, the display is blank, as shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Syntax Visualizer tool window</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Dock this tool window at a convenient location inside Visual Studio, such as the left side.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Visualizer shows information about the current code file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create a new project using the <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>New Project<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can create either a VB or C# project.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When Visual Studio opens the main code file for this project, the visualizer displays the syntax tree for it.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can open any existing C# / VB file in this Visual Studio instance, and the visualizer displays that file's syntax tree.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you have multiple code files open inside Visual Studio, the visualizer displays the syntax tree for the currently active code file, (the code file that has keyboard focus.)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C#<ept id="p1">](#tab/csharp)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Visualizing a C# syntax tree</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic<ept id="p1">](#tab/vb)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Visualizing a VB syntax tree</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>As shown in the preceding images, the visualizer tool window displays the syntax tree at the top and a property grid at the bottom.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The property grid displays the properties of the item that is currently selected in the tree, including the .NET <bpt id="p1">*</bpt>Type<ept id="p1">*</ept> and the <bpt id="p2">*</bpt>Kind<ept id="p2">*</ept> (SyntaxKind) of the item.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Syntax trees comprise three types of items – <bpt id="p1">*</bpt>nodes<ept id="p1">*</ept>, <bpt id="p2">*</bpt>tokens<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>trivia<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can read more about these types in the <bpt id="p1">[</bpt>Work with syntax<ept id="p1">](work-with-syntax.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Items of each type are represented using a different color.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Click on the ‘Legend’ button for an overview of the colors used.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Each item in the tree also displays its own <bpt id="p1">**</bpt>span<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>span<ept id="p1">**</ept> is the indices (the starting and ending position) of that node in the text file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the preceding C# example, the selected “UsingKeyword [0..5)” token has a <bpt id="p1">**</bpt>Span<ept id="p1">**</ept> that is five characters wide, [0..5).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The "[..)" notation means that the starting index is part of the span, but the ending index is not.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are two ways to navigate the tree:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Expand or click on items in the tree.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The visualizer automatically selects the text corresponding to this item’s span in the code editor.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Click or select text in the code editor.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the preceding VB example, if you select the line containing "Module Module1" in the code editor, the visualizer automatically navigates to the corresponding ModuleStatement node in the tree.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The visualizer highlights the item in the tree whose span best matches the span of the text selected in the editor.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The visualizer refreshes the tree to match modifications in the active code file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Add a call to <ph id="ph1">`Console.WriteLine()`</ph> inside <ph id="ph2">`Main()`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As you type, the visualizer refreshes the tree.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Pause typing once you have typed <ph id="ph1">`Console.`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The tree has some items colored in pink.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>At this point, there are errors (also referred to as ‘Diagnostics’) in the typed code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These errors are attached to nodes, tokens, and trivia in the syntax tree.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The visualizer shows you which items have errors attached to them highlighting the background in pink.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can inspect the errors on any item colored pink by hovering over the item.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The visualizer only displays syntactic errors (those errors related to the syntax of the typed code); it doesn't display any semantic errors.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Syntax Graphs</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Right click on any item in the tree and click on <bpt id="p1">**</bpt>View Directed Syntax Graph<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C#<ept id="p1">](#tab/csharp)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The visualizer displays a graphical representation of the subtree rooted at the selected item.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Try these steps for the <bpt id="p1">**</bpt>MethodDeclaration<ept id="p1">**</ept> node corresponding to the <ph id="ph1">`Main()`</ph> method in the C# example.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The visualizer displays a syntax graph that looks as follows:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Viewing a C# syntax graph</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic<ept id="p1">](#tab/vb)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Try the same for the <bpt id="p1">**</bpt>SubBlock<ept id="p1">**</ept> node corresponding to the <ph id="ph1">`Main()`</ph> method in the preceding VB example.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The visualizer displays a syntax graph that looks as follows:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Viewing a VB syntax graph</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The syntax graph viewer has an option to display a legend its coloring scheme.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can also hover over individual items in the syntax graph with the mouse to view the properties corresponding to that item.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can view syntax graphs for different items in the tree repeatedly and the graphs will always be displayed in the same window inside Visual Studio.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can dock this window at a convenient location inside Visual Studio so that you don’t have to switch between tabs to view a new syntax graph.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The bottom, below code editor windows, is often convenient.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Here is the docking layout to use with the visualizer tool window and the syntax graph window:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>One docking layout for the visualizer and syntax graph window</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Another option is to put the syntax graph window on a second monitor, in a dual monitor setup.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Inspecting semantics</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The Syntax Visualizer enables rudimentary inspection of symbols and semantic information.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`double x = 1 + 1;`</ph> inside Main() in the C# example.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Then, select the expression <ph id="ph1">`1 + 1`</ph> in the code editor window.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The visualizer highlights the <bpt id="p1">**</bpt>AddExpression<ept id="p1">**</ept> node in the visualizer.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Right click on this <bpt id="p1">**</bpt>AddExpression<ept id="p1">**</ept> and click on <bpt id="p2">**</bpt>View Symbol (if any)<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Notice that most of the menu items have the "if any" qualifier.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The Syntax Visualizer inspects properties of a Node, including properties that may not be present for all nodes.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The property grid in the visualizer updates as shown in the following figure: The symbol for the expression is a <bpt id="p1">**</bpt>SynthesizedIntrinsicOperatorSymbol<ept id="p1">**</ept> with <bpt id="p2">**</bpt>Kind = Method<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Symbol properties</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Try <bpt id="p1">**</bpt>View TypeSymbol (if any)<ept id="p1">**</ept> for the same <bpt id="p2">**</bpt>AddExpression<ept id="p2">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The property grid in the visualizer updates as shown in the following figure, indicating that the type of the selected expression is <ph id="ph1">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>TypeSymbol properties</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Try <bpt id="p1">**</bpt>View Converted TypeSymbol (if any)<ept id="p1">**</ept> for the same <bpt id="p2">**</bpt>AddExpression<ept id="p2">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The property grid updates indicating that although the type of the expression is <ph id="ph1">`Int32`</ph>, the converted type of the expression is <ph id="ph2">`Double`</ph> as shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This node includes converted type symbol information because the <ph id="ph1">`Int32`</ph> expression occurs in a context where it must be converted to a <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This conversion satisfies the <ph id="ph1">`Double`</ph> type specified for the variable <ph id="ph2">`x`</ph> on the left-hand side of the assignment operator.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Converted TypeSymbol properties</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Finally, try <bpt id="p1">**</bpt>View Constant Value (if any)<ept id="p1">**</ept> for the same <bpt id="p2">**</bpt>AddExpression<ept id="p2">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The property grid shows that the value of the expression is a compile time constant with value <ph id="ph1">`2`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A constant value</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The preceding example can also be replicated in VB.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`Dim x As Double = 1 + 1`</ph> in a VB file.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Select the expression <ph id="ph1">`1 + 1`</ph> in the code editor window.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The visualizer highlights the corresponding <bpt id="p1">**</bpt>AddExpression<ept id="p1">**</ept> node in the visualizer.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Repeat the preceding steps for this <bpt id="p1">**</bpt>AddExpression<ept id="p1">**</ept> and you should see identical results.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Examine more code in VB.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Update your main VB file with the following code:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This code introduces an alias named <ph id="ph1">`C`</ph> that maps to the type <ph id="ph2">`System.Console`</ph> at the top of the file and uses this alias inside <ph id="ph3">`Main()`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Select the use of this alias, the <ph id="ph1">`C`</ph> in <ph id="ph2">`C.WriteLine()`</ph>, inside the <ph id="ph3">`Main()`</ph> method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The visualizer selects the corresponding <bpt id="p1">**</bpt>IdentifierName<ept id="p1">**</ept> node in the visualizer.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Right-click this node and click on <bpt id="p1">**</bpt>View Symbol (if any)<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The property grid indicates that this identifier is bound to the type <ph id="ph1">`System.Console`</ph> as shown in the following figure:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Symbol properties</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Try <bpt id="p1">**</bpt>View AliasSymbol (if any)<ept id="p1">**</ept> for the same <bpt id="p2">**</bpt>IdentifierName<ept id="p2">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The property grid indicates the identifier is an alias with name <ph id="ph1">`C`</ph> that is bound to the <ph id="ph2">`System.Console`</ph> target.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In other words, the property grid provides information regarding the <bpt id="p1">**</bpt>AliasSymbol<ept id="p1">**</ept> corresponding to the identifier <ph id="ph1">`C`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>AliasSymbol properties</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Inspect the symbol corresponding to any declared type, method, property.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Select the corresponding node in the visualizer and click on <bpt id="p1">**</bpt>View Symbol (if any)<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Select the method <ph id="ph1">`Sub Main()`</ph>, including the body of the method.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Click on <bpt id="p1">**</bpt>View Symbol (if any)<ept id="p1">**</ept> for the corresponding <bpt id="p2">**</bpt>SubBlock<ept id="p2">**</ept> node in the visualizer.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The property grid shows the <bpt id="p1">**</bpt>MethodSymbol<ept id="p1">**</ept> for this <bpt id="p2">**</bpt>SubBlock<ept id="p2">**</ept> has name <ph id="ph1">`Main`</ph> with return type <ph id="ph2">`Void`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Viewing symbol for a method declaration</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The above VB examples can be easily replicated in C#.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`using C = System.Console;`</ph> in place of <ph id="ph2">`Imports C = System.Console`</ph> for the alias.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The preceding steps in C# yield identical results in the visualizer window.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Semantic inspection operations are only available on nodes.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>They are not available on tokens or trivia.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Not all nodes have interesting semantic information to inspect.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When a node doesn't have interesting semantic information, clicking on <bpt id="p1">**</bpt>View <ph id="ph1">\*</ph> Symbol (if any)<ept id="p1">**</ept> shows a blank property grid.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can read more about APIs for performing semantic analysis in the <bpt id="p1">[</bpt>Work with semantics<ept id="p1">](work-with-semantics.md)</ept> overview document.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Closing the syntax visualizer</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can close the visualizer window when you are not using it to examine source code.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The syntax visualizer updates its display as you navigate through code, editing and changing source.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>It can get distracting when you are not using it.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>