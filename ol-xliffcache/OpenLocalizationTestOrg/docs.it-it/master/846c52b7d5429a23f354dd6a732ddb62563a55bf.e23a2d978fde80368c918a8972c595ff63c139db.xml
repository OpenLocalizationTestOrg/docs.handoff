{"content":"---\ntitle: \"Main() Return Values (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"Main method [C#], return values\"\nms.assetid: c2f5a1d8-1676-4bea-bc7e-44a97e72d5bc\ncaps.latest.revision: 20\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Main() Return Values (C# Programming Guide)\nThe `Main` method can return `void`:  \n  \n [!code-cs[csProgGuideMain#12](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_1.cs)]  \n  \n It can also return an `int`:  \n  \n [!code-cs[csProgGuideMain#13](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_2.cs)]  \n  \n If the return value from `Main` is not used, returning `void` allows for slightly simpler code. However, returning an integer enables the program to communicate status information to other programs or scripts that invoke the executable file. The following example shows how the return value from `Main` can be accessed.  \n  \n## Example  \n In this example, a batch file is used to run a program and test the return value of the `Main` function. When a program is executed in Windows, any value returned from the `Main` function is stored in an environment variable called `ERRORLEVEL`. A batch file can determine the outcome of execution by inspecting the `ERRORLEVEL` variable. Traditionally, a return value of zero indicates successful execution. The following example is a simple program that returns zero from the `Main` function. The zero indicates that the program ran successfully. Save the program as MainReturnValTest.cs.  \n  \n [!code-cs[csProgGuideMain#14](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_3.cs)]  \n  \n## Example  \n Because this example uses a batch file, it is best to compile the code from a command prompt. Follow the instructions in [How to: Set Environment Variables for the Visual Studio Command Line](../../../csharp/language-reference/compiler-options/how-to-set-environment-variables-for-the-visual-studio-command-line.md) to enable command-line builds, or use the Visual Studio Command Prompt, available from the **Start** menu under **Visual Studio Tools**. From the command prompt, navigate to the folder in which you saved the program. The following command compiles MainReturnValTest.cs and produces the executable file MainReturnValTest.exe.  \n  \n `csc MainReturnValTest.cs`  \n  \n Next, create a batch file to run MainReturnValTest.exe and to display the result. Paste the following code into a text file and save it as `test.bat` in the folder that contains MainReturnValTest.cs and MainReturnValTest.exe. Run the batch file by typing `test` at the command prompt.  \n  \n Because the code returns zero, the batch file will report success. However, if you change MainReturnValTest.cs to return a non-zero value and then re-compile the program, subsequent execution of the batch file will report failure.  \n  \n```  \nrem test.bat  \n@echo off  \nMainReturnValTest  \n@if \"%ERRORLEVEL%\" == \"0\" goto good  \n  \n:fail  \n    echo Execution Failed  \n    echo return value = %ERRORLEVEL%  \n    goto end  \n  \n:good  \n    echo Execution succeeded  \n    echo Return value = %ERRORLEVEL%  \n    goto end  \n  \n:end  \n```  \n  \n## Sample Output  \n `Execution succeeded`  \n  \n `Return value = 0`  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Reference](../../../csharp/language-reference/index.md)   \n [Main() and Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/index.md)   \n [How to: Display Command Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)   \n [How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)","nodes":[{"pos":[12,72],"content":"Main() Return Values (C# Programming Guide) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Main() Return Values (C# Programming Guide) | Microsoft Docs","pos":[0,60]}]},{"pos":[560,603],"content":"Main() Return Values (C# Programming Guide)","linkify":"Main() Return Values (C# Programming Guide)","nodes":[{"content":"Main() Return Values (C# Programming Guide)","pos":[0,43]}]},{"pos":[604,640],"content":"The <ph id=\"ph1\">`Main`</ph> method can return <ph id=\"ph2\">`void`</ph>:","source":"The `Main` method can return `void`:"},{"pos":[647,772],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#12<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_1.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#12](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_1.cs)]"},{"pos":[779,807],"content":"It can also return an <ph id=\"ph1\">`int`</ph>:","source":"It can also return an `int`:"},{"pos":[814,939],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#13<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_2.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#13](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_2.cs)]"},{"content":"If the return value from <ph id=\"ph1\">`Main`</ph> is not used, returning <ph id=\"ph2\">`void`</ph> allows for slightly simpler code.","pos":[946,1041],"source":"If the return value from `Main` is not used, returning `void` allows for slightly simpler code."},{"content":"However, returning an integer enables the program to communicate status information to other programs or scripts that invoke the executable file.","pos":[1042,1187]},{"content":"The following example shows how the return value from <ph id=\"ph1\">`Main`</ph> can be accessed.","pos":[1188,1265],"source":" The following example shows how the return value from `Main` can be accessed."},{"pos":[1274,1281],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, a batch file is used to run a program and test the return value of the <ph id=\"ph1\">`Main`</ph> function.","pos":[1285,1389],"source":"In this example, a batch file is used to run a program and test the return value of the `Main` function."},{"content":"When a program is executed in Windows, any value returned from the <ph id=\"ph1\">`Main`</ph> function is stored in an environment variable called <ph id=\"ph2\">`ERRORLEVEL`</ph>.","pos":[1390,1530],"source":" When a program is executed in Windows, any value returned from the `Main` function is stored in an environment variable called `ERRORLEVEL`."},{"content":"A batch file can determine the outcome of execution by inspecting the <ph id=\"ph1\">`ERRORLEVEL`</ph> variable.","pos":[1531,1623],"source":" A batch file can determine the outcome of execution by inspecting the `ERRORLEVEL` variable."},{"content":"Traditionally, a return value of zero indicates successful execution.","pos":[1624,1693]},{"content":"The following example is a simple program that returns zero from the <ph id=\"ph1\">`Main`</ph> function.","pos":[1694,1779],"source":" The following example is a simple program that returns zero from the `Main` function."},{"content":"The zero indicates that the program ran successfully.","pos":[1780,1833]},{"content":"Save the program as MainReturnValTest.cs.","pos":[1834,1875]},{"pos":[1882,2007],"content":"<bpt id=\"p1\">[!code-cs</bpt><bpt id=\"p2\">[</bpt>csProgGuideMain#14<ept id=\"p2\">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_3.cs)</ept><ept id=\"p1\">]</ept>","source":"[!code-cs[csProgGuideMain#14](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/main-return-values_3.cs)]"},{"pos":[2016,2023],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"Because this example uses a batch file, it is best to compile the code from a command prompt.","pos":[2027,2120]},{"content":"Follow the instructions in <bpt id=\"p1\">[</bpt>How to: Set Environment Variables for the Visual Studio Command Line<ept id=\"p1\">](../../../csharp/language-reference/compiler-options/how-to-set-environment-variables-for-the-visual-studio-command-line.md)</ept> to enable command-line builds, or use the Visual Studio Command Prompt, available from the <bpt id=\"p2\">**</bpt>Start<ept id=\"p2\">**</ept> menu under <bpt id=\"p3\">**</bpt>Visual Studio Tools<ept id=\"p3\">**</ept>.","pos":[2121,2479],"source":" Follow the instructions in [How to: Set Environment Variables for the Visual Studio Command Line](../../../csharp/language-reference/compiler-options/how-to-set-environment-variables-for-the-visual-studio-command-line.md) to enable command-line builds, or use the Visual Studio Command Prompt, available from the **Start** menu under **Visual Studio Tools**."},{"content":"From the command prompt, navigate to the folder in which you saved the program.","pos":[2480,2559]},{"content":"The following command compiles MainReturnValTest.cs and produces the executable file MainReturnValTest.exe.","pos":[2560,2667]},{"content":"Next, create a batch file to run MainReturnValTest.exe and to display the result.","pos":[2707,2788]},{"content":"Paste the following code into a text file and save it as <ph id=\"ph1\">`test.bat`</ph> in the folder that contains MainReturnValTest.cs and MainReturnValTest.exe.","pos":[2789,2932],"source":" Paste the following code into a text file and save it as `test.bat` in the folder that contains MainReturnValTest.cs and MainReturnValTest.exe."},{"content":"Run the batch file by typing <ph id=\"ph1\">`test`</ph> at the command prompt.","pos":[2933,2991],"source":" Run the batch file by typing `test` at the command prompt."},{"content":"Because the code returns zero, the batch file will report success.","pos":[2998,3064]},{"content":"However, if you change MainReturnValTest.cs to return a non-zero value and then re-compile the program, subsequent execution of the batch file will report failure.","pos":[3065,3228]},{"pos":[3536,3549],"content":"Sample Output","linkify":"Sample Output","nodes":[{"content":"Sample Output","pos":[0,13]}]},{"pos":[3608,3616],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3620,3687],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3690,3751],"source":" [C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Main() and Command-Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3754,3857],"source":" [Main() and Command-Line Arguments](../../../csharp/programming-guide/main-and-command-args/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Display Command Line Arguments<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[3860,4000],"source":" [How to: Display Command Line Arguments](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Access Command-Line Arguments Using foreach<ept id=\"p1\">](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept>","pos":[4003,4168],"source":" [How to: Access Command-Line Arguments Using foreach](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)"}]}