{"content":"---\ntitle: \"Value Types (C# Reference) | Microsoft Docs\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.technology: \n  - \"devlang-csharp\"\nms.topic: \"article\"\nf1_keywords: \n  - \"cs.valuetypes\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"value types [C#]\"\n  - \"types [C#], value types\"\n  - \"C# language, value types\"\nms.assetid: 471eb994-2958-49d5-a6be-19b4313f80a3\ncaps.latest.revision: 18\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Value Types (C# Reference)\nThe value types consist of two main categories:  \n  \n-   [Structs](../../../csharp/language-reference/keywords/struct.md)  \n  \n-   [Enumerations](../../../csharp/language-reference/keywords/enum.md)  \n  \n Structs fall into these categories:  \n  \n-   Numeric types  \n  \n    -   [Integral types](../../../csharp/language-reference/keywords/integral-types-table.md)  \n  \n    -   [Floating-point types](../../../csharp/language-reference/keywords/floating-point-types-table.md)  \n  \n    -   [decimal](../../../csharp/language-reference/keywords/decimal.md)  \n  \n-   [bool](../../../csharp/language-reference/keywords/bool.md)  \n  \n-   User defined structs.  \n  \n## Main Features of Value Types  \n Variables that are based on value types directly contain values. Assigning one value type variable to another copies the contained value. This differs from the assignment of reference type variables, which copies a reference to the object but not the object itself.  \n  \n All value types are derived implicitly from the <xref:System.ValueType?displayProperty=fullName>.  \n  \n Unlike with reference types, you cannot derive a new type from a value type. However, like reference types, structs can implement interfaces.  \n  \n Unlike reference types, a value type cannot contain the `null` value. However, the [nullable types](../../../csharp/programming-guide/nullable-types/index.md) feature does allow for value types to be assigned to `null`.  \n  \n Each value type has an implicit default constructor that initializes the default value of that type. For information about default values of value types, see [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md).  \n  \n## Main Features of Simple Types  \n All of the simple types -- those integral to the C# language -- are aliases of the .NET Framework System types. For example, [int](../../../csharp/language-reference/keywords/int.md) is an alias of <xref:System.Int32?displayProperty=fullName>. For a complete list of aliases, see [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md).  \n  \n Constant expressions, whose operands are all simple type constants, are evaluated at compilation time.  \n  \n Simple types can be initialized by using literals. For example, 'A' is a literal of the type `char` and 2001 is a literal of the type `int`.  \n  \n## Initializing Value Types  \n Local variables in C# must be initialized before they are used. For example, you might declare a local variable without initialization as in the following example:  \n  \n```  \nint myInt;  \n```  \n  \n You cannot use it before you initialize it. You can initialize it using the following statement:  \n  \n```  \nmyInt = new int();  // Invoke default constructor for int type.  \n```  \n  \n This statement is equivalent to the following statement:  \n  \n```  \nmyInt = 0;         // Assign an initial value, 0 in this example.  \n```  \n  \n You can, of course, have the declaration and the initialization in the same statement as in the following examples:  \n  \n```  \nint myInt = new int();  \n```  \n  \n –or–  \n  \n```  \nint myInt = 0;  \n```  \n  \n Using the [new](../../../csharp/language-reference/keywords/new.md) operator calls the default constructor of the specific type and assigns the default value to the variable. In the preceding example, the default constructor assigned the value `0` to `myInt`. For more information about values assigned by calling default constructors, see [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md).  \n  \n With user-defined types, use [new](../../../csharp/language-reference/keywords/new.md) to invoke the default constructor. For example, the following statement invokes the default constructor of the `Point` struct:  \n  \n```  \nPoint p = new Point(); // Invoke default constructor for the struct.  \n```  \n  \n After this call, the struct is considered to be definitely assigned; that is, all its members are initialized to their default values.  \n  \n For more information about the new operator, see [new](../../../csharp/language-reference/keywords/new.md).  \n  \n For information about formatting the output of numeric types, see [Formatting Numeric Results Table](../../../csharp/language-reference/keywords/formatting-numeric-results-table.md).  \n  \n## See Also  \n [C# Reference](../../../csharp/language-reference/index.md)   \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [C# Keywords](../../../csharp/language-reference/keywords/index.md)   \n [Types](../../../csharp/language-reference/keywords/types.md)   \n [Reference Tables for Types](../../../csharp/language-reference/keywords/reference-tables-for-types.md)   \n [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)","nodes":[{"pos":[12,55],"content":"Value Types (C# Reference) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Value Types (C# Reference) | Microsoft Docs","pos":[0,43]}]},{"pos":[618,644],"content":"Value Types (C# Reference)","linkify":"Value Types (C# Reference)","nodes":[{"content":"Value Types (C# Reference)","pos":[0,26]}]},{"content":"The value types consist of two main categories:","pos":[645,692]},{"pos":[702,766],"content":"<bpt id=\"p1\">[</bpt>Structs<ept id=\"p1\">](../../../csharp/language-reference/keywords/struct.md)</ept>","source":"[Structs](../../../csharp/language-reference/keywords/struct.md)"},{"pos":[776,843],"content":"<bpt id=\"p1\">[</bpt>Enumerations<ept id=\"p1\">](../../../csharp/language-reference/keywords/enum.md)</ept>","source":"[Enumerations](../../../csharp/language-reference/keywords/enum.md)"},{"content":"Structs fall into these categories:","pos":[850,885]},{"content":"Numeric types","pos":[895,908]},{"pos":[922,1007],"content":"<bpt id=\"p1\">[</bpt>Integral types<ept id=\"p1\">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept>","source":"[Integral types](../../../csharp/language-reference/keywords/integral-types-table.md)"},{"pos":[1021,1118],"content":"<bpt id=\"p1\">[</bpt>Floating-point types<ept id=\"p1\">](../../../csharp/language-reference/keywords/floating-point-types-table.md)</ept>","source":"[Floating-point types](../../../csharp/language-reference/keywords/floating-point-types-table.md)"},{"pos":[1132,1197],"content":"<bpt id=\"p1\">[</bpt>decimal<ept id=\"p1\">](../../../csharp/language-reference/keywords/decimal.md)</ept>","source":"[decimal](../../../csharp/language-reference/keywords/decimal.md)"},{"pos":[1207,1266],"content":"<bpt id=\"p1\">[</bpt>bool<ept id=\"p1\">](../../../csharp/language-reference/keywords/bool.md)</ept>","source":"[bool](../../../csharp/language-reference/keywords/bool.md)"},{"content":"User defined structs.","pos":[1276,1297]},{"pos":[1306,1334],"content":"Main Features of Value Types","linkify":"Main Features of Value Types","nodes":[{"content":"Main Features of Value Types","pos":[0,28]}]},{"content":"Variables that are based on value types directly contain values.","pos":[1338,1402]},{"content":"Assigning one value type variable to another copies the contained value.","pos":[1403,1475]},{"content":"This differs from the assignment of reference type variables, which copies a reference to the object but not the object itself.","pos":[1476,1603]},{"content":"All value types are derived implicitly from the <ph id=\"ph1\">&lt;xref:System.ValueType?displayProperty=fullName&gt;</ph>.","pos":[1610,1707],"source":"All value types are derived implicitly from the <xref:System.ValueType?displayProperty=fullName>."},{"content":"Unlike with reference types, you cannot derive a new type from a value type.","pos":[1714,1790]},{"content":"However, like reference types, structs can implement interfaces.","pos":[1791,1855]},{"content":"Unlike reference types, a value type cannot contain the <ph id=\"ph1\">`null`</ph> value.","pos":[1862,1931],"source":"Unlike reference types, a value type cannot contain the `null` value."},{"content":"However, the <bpt id=\"p1\">[</bpt>nullable types<ept id=\"p1\">](../../../csharp/programming-guide/nullable-types/index.md)</ept> feature does allow for value types to be assigned to <ph id=\"ph1\">`null`</ph>.","pos":[1932,2081],"source":" However, the [nullable types](../../../csharp/programming-guide/nullable-types/index.md) feature does allow for value types to be assigned to `null`."},{"content":"Each value type has an implicit default constructor that initializes the default value of that type.","pos":[2088,2188]},{"content":"For information about default values of value types, see <bpt id=\"p1\">[</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.","pos":[2189,2338],"source":" For information about default values of value types, see [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)."},{"pos":[2347,2376],"content":"Main Features of Simple Types","linkify":"Main Features of Simple Types","nodes":[{"content":"Main Features of Simple Types","pos":[0,29]}]},{"content":"All of the simple types -- those integral to the C# language -- are aliases of the .NET Framework System types.","pos":[2380,2491]},{"content":"For example, <bpt id=\"p1\">[</bpt>int<ept id=\"p1\">](../../../csharp/language-reference/keywords/int.md)</ept> is an alias of <ph id=\"ph1\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>.","pos":[2492,2623],"source":" For example, [int](../../../csharp/language-reference/keywords/int.md) is an alias of <xref:System.Int32?displayProperty=fullName>."},{"content":"For a complete list of aliases, see <bpt id=\"p1\">[</bpt>Built-In Types Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept>.","pos":[2624,2752],"source":" For a complete list of aliases, see [Built-In Types Table](../../../csharp/language-reference/keywords/built-in-types-table.md)."},{"content":"Constant expressions, whose operands are all simple type constants, are evaluated at compilation time.","pos":[2759,2861]},{"content":"Simple types can be initialized by using literals.","pos":[2868,2918]},{"content":"For example, 'A' is a literal of the type <ph id=\"ph1\">`char`</ph> and 2001 is a literal of the type <ph id=\"ph2\">`int`</ph>.","pos":[2919,3008],"source":" For example, 'A' is a literal of the type `char` and 2001 is a literal of the type `int`."},{"pos":[3017,3041],"content":"Initializing Value Types","linkify":"Initializing Value Types","nodes":[{"content":"Initializing Value Types","pos":[0,24]}]},{"content":"Local variables in C# must be initialized before they are used.","pos":[3045,3108]},{"content":"For example, you might declare a local variable without initialization as in the following example:","pos":[3109,3208]},{"content":"You cannot use it before you initialize it.","pos":[3243,3286]},{"content":"You can initialize it using the following statement:","pos":[3287,3339]},{"content":"This statement is equivalent to the following statement:","pos":[3427,3483]},{"content":"You can, of course, have the declaration and the initialization in the same statement as in the following examples:","pos":[3573,3688]},{"content":"–or–","pos":[3735,3739]},{"content":"Using the <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../../csharp/language-reference/keywords/new.md)</ept> operator calls the default constructor of the specific type and assigns the default value to the variable.","pos":[3778,3952],"source":"Using the [new](../../../csharp/language-reference/keywords/new.md) operator calls the default constructor of the specific type and assigns the default value to the variable."},{"content":"In the preceding example, the default constructor assigned the value <ph id=\"ph1\">`0`</ph> to <ph id=\"ph2\">`myInt`</ph>.","pos":[3953,4037],"source":" In the preceding example, the default constructor assigned the value `0` to `myInt`."},{"content":"For more information about values assigned by calling default constructors, see <bpt id=\"p1\">[</bpt>Default Values Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.","pos":[4038,4210],"source":" For more information about values assigned by calling default constructors, see [Default Values Table](../../../csharp/language-reference/keywords/default-values-table.md)."},{"content":"With user-defined types, use <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../../csharp/language-reference/keywords/new.md)</ept> to invoke the default constructor.","pos":[4217,4338],"source":"With user-defined types, use [new](../../../csharp/language-reference/keywords/new.md) to invoke the default constructor."},{"content":"For example, the following statement invokes the default constructor of the <ph id=\"ph1\">`Point`</ph> struct:","pos":[4339,4430],"source":" For example, the following statement invokes the default constructor of the `Point` struct:"},{"content":"After this call, the struct is considered to be definitely assigned; that is, all its members are initialized to their default values.","pos":[4523,4657]},{"pos":[4664,4771],"content":"For more information about the new operator, see <bpt id=\"p1\">[</bpt>new<ept id=\"p1\">](../../../csharp/language-reference/keywords/new.md)</ept>.","source":"For more information about the new operator, see [new](../../../csharp/language-reference/keywords/new.md)."},{"pos":[4778,4960],"content":"For information about formatting the output of numeric types, see <bpt id=\"p1\">[</bpt>Formatting Numeric Results Table<ept id=\"p1\">](../../../csharp/language-reference/keywords/formatting-numeric-results-table.md)</ept>.","source":"For information about formatting the output of numeric types, see [Formatting Numeric Results Table](../../../csharp/language-reference/keywords/formatting-numeric-results-table.md)."},{"pos":[4969,4977],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../../../csharp/language-reference/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4981,5041],"source":"[C# Reference](../../../csharp/language-reference/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5044,5112],"source":" [C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>C# Keywords<ept id=\"p1\">](../../../csharp/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[5115,5184],"source":" [C# Keywords](../../../csharp/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/types.md)</ept><ph id=\"ph1\"> </ph>","pos":[5187,5250],"source":" [Types](../../../csharp/language-reference/keywords/types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Reference Tables for Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-tables-for-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[5253,5358],"source":" [Reference Tables for Types](../../../csharp/language-reference/keywords/reference-tables-for-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Reference Types<ept id=\"p1\">](../../../csharp/language-reference/keywords/reference-types.md)</ept>","pos":[5361,5443],"source":" [Reference Types](../../../csharp/language-reference/keywords/reference-types.md)"}]}