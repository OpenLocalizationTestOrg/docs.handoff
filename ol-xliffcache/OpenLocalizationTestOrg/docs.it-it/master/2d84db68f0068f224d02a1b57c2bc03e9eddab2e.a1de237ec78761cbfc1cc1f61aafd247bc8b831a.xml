{"content":"---\ntitle: \"Diagnostic Traces | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: 28e77a63-d20d-4b6a-9caf-ddad86550427\ncaps.latest.revision: 3\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Diagnostic Traces\nTraces are the publishing of specific messages that are generated during application execution. When using tracing, you must have a mechanism for collecting and recording the messages that are sent. Trace messages are received by listeners. The purpose of a listener is to collect, store, and route tracing messages. Listeners direct the tracing output to an appropriate target, such as a log, window, or text file.  \n  \n One such listener, the <xref:System.Diagnostics.DefaultTraceListener>, is automatically created and initialized when tracing is enabled. If you want trace output to be directed to any additional sources, you must create and initialize additional trace listeners. The listeners you create should reflect your individual needs. For example, you might want a text record of all trace output. In this case, you would create a listener that wrote all output to a new text file when enabled. On the other hand, you might only want to view output during application execution. In that case, you might create a listener that directed all output to a console window. The <xref:System.Diagnostics.EventLogTraceListener> can direct trace output to an event log, and the <xref:System.Diagnostics.TextWriterTraceListener> can write trace output to a stream.  \n  \n## Enabling Tracing  \n To enable traces during transaction processing, you should edit your application’s configuration file. The following is an example.  \n  \n```  \n<configuration>  \n<system.diagnostics>  \n     <sources>  \n          <source name=\"System.Transactions\" switchValue=\"Warning\">  \n               <listeners>  \n                    <add name=\"tx\"   \n                     type=\"System.Diagnostics.XmlWriterTraceListener\"   \n                     initializeData= \"tx.log\" />  \n               </listeners>  \n          </source>  \n     </sources>  \n</system.diagnostics>  \n</configuration>  \n  \n```  \n  \n <xref:System.Transactions> traces are written to the source named \"System.Transactions\". You can use `add` to specify the name and type of the trace listener you want to use. In our example configuration, we named the Listener \"tx\" and added the standard .NET Framework trace listener (<xref:System.Diagnostics.XmlWriterTraceListener>) as the type we want to use. Use `initializeData` to set the name of the log file for that listener. In addition, you can substitute a fully qualified path for a simple file name.  \n  \n Each trace message type is assigned a level to indicate its degree of importance. If the app-domain’s trace level is equal or lower than the level of an event type, then that message is generated. The tracing level is controlled by the `switchValue` setting in the configuration file. The levels that are associated with diagnostic trace messages are defined in the following table.  \n  \n|Trace Level|Description|  \n|-----------------|-----------------|  \n|Critical|Serious failures, such as the following, have occurred:<br /><br /> -   An error that can cause an immediate loss in user functionality.<br />-   An event that requires an administrator to take action to avoid loss of functionality.<br />-   Code hangs.<br />-   This tracing level can also provide sufficient context for interpreting other critical traces. This can help to identify the sequence of operations leading to a serious failure.|  \n|Error|An error (for example, invalid configuration or network behavior) has occurred that can result in a loss of user functionality.|  \n|Warning|A condition exists that can subsequently result in an error or critical failure (for example, allocation failing or approaching a limit). Normal processing of errors from user code (for example, transaction aborted, timeouts, authentication failed) can also generate a warning.|  \n|Information|Messages helpful for monitoring and diagnosing system status, measuring performance, or profiling are generated. These can include transaction and enlistment lifetime events, such as a transaction being created or committed, the crossing of a significant boundary, or the allocation of significant resources. A developer can then utilize such information for capacity planning and performance management.|  \n  \n## Trace Codes  \n The following table lists the trace codes that are generated by the <xref:System.Transactions> infrastructure. Included in the table are the trace code identifier, the <xref:System.Diagnostics.EventTypeFilter.EventType%2A> enumeration level for the trace, and the extra data contained in the **TraceRecord** for the trace. In addition, the corresponding trace level of the trace is also stored in the **TraceRecord**.  \n  \n|TraceCode|EventType|Extra data in TraceRecord|  \n|---------------|---------------|-------------------------------|  \n|TransactionCreated|Info|TransactionTraceId|  \n|TransactionPromoted|Info|Local TransactionTraceId, Distributed TransactionTraceId|  \n|EnlistmentCreated|Info|TransactionTraceId, EnlistmentTraceId, EnlistmentType (durable/volatile), EnlistmentOptions|  \n|EnlistmentCallbackNegative|Warning|TransactionTraceId, EnlistmentTraceId,<br /><br /> Callback (forcerollback/aborted/indoubt)|  \n|TransactionRollbackCalled|Warning|TransactionTraceId|  \n|TransactionAborted|Warning|TransactionTraceId|  \n|TransactionInDoubt|Warning|TransactionTraceId|  \n|TransactionScopeCreated|Info|TransactionScopeResult, which can be the following:<br /><br /> -   New transaction.<br />-   Transaction passed.<br />-   Dependent transaction passed.<br />-   Using current transaction.<br />-   No transaction.<br /><br /> new current TransactionTraceId|  \n|TransactionScopeDisposed|Info|TransactionTraceId of the scope’s \"expected\" current transaction.|  \n|TransactionScopeIncomplete|Warning|TransactionTraceId of the scope’s \"expected\" current transaction.|  \n|TransactionScopeNestedIncorrectly|Warning|TransactionTraceId of the scope’s \"expected\" current transaction.|  \n|TransactionScopeCurrentTransactionChanged|Warning|Old current TransactionTraceId, other TransactionTraceId|  \n|TransactionScopeTimeout|Warning|TransactionTraceId of the scope’s \"expected\" current transaction.|  \n|DependentCloneCreated|Info|TransactionTraceId, type of dependent transaction created (RollbackIfNotComplete/BlockCommitUntilComplete)|  \n|DependentCloneComplete|Info|TransactionTraceId|  \n|RecoveryComplete|Info|Resource Manager GUID (from base)|  \n|Reenlist|Info|Resource Manager GUID (from base)|  \n|TransactionSerialized|Info|TransactionTraceId.|  \n|TransactionException|Error|Exception message|  \n|InvalidOperationException|Error|Exception message|  \n|InternalError|Critical|Exception message|  \n|TransferEvent||When a transaction is deserialized, or promoted from a <xref:System.Transactions> transaction to a distributed one, the current ActivityID from the ExecutionContext and the distributed transaction ID are written.<br /><br /> When the DTC calls back into managed code, the distributed transaction ID is set as the ActivityID in the ExecutionContext for the duration of the callback.|  \n|ConfiguredDefaultTimeoutAdjusted|Warning|No extra data|  \n|TransactionTimeout|Warning|The TransactionTraceId of the transaction being timed out.|  \n  \n The XML schema for each of the preceding extra data items has the following format.  \n  \n### TransactionTraceIdentifier  \n `<TransactionTraceIdentifier>`  \n  \n `<TransactionIdentifier >`  \n  \n `string representation of transaction id`  \n  \n `</TransactionIdentifier>`  \n  \n `< CloneIdentifier >`  \n  \n `the clone id number`  \n  \n `</CloneIdentifier>`  \n  \n `</TransactionTraceIdentifier>`  \n  \n### EnlistmentTraceIdentifier  \n `<EnlistmentTraceIdentifier>`  \n  \n `<ResourceManagerId>`  \n  \n `string form of guid`  \n  \n `</ResourceManagerId>`  \n  \n `<TransactionTraceIdentifier>`  \n  \n `<TransactionIdentifier >`  \n  \n `string representation of transaction id`  \n  \n `</TransactionIdentifier>`  \n  \n `<CloneIdentifier >`  \n  \n `the clone id number`  \n  \n `</CloneIdentifier>`  \n  \n `<TransactionTraceIdentifier>`  \n  \n `<EnlistmentIdentifier>`  \n  \n `the enlistment id number`  \n  \n `</EnlistmentIdentifier>`  \n  \n `</EnlistmentTraceIdentifier>`  \n  \n### Resource Manager Identifier  \n `<ResourceManagerId>`  \n  \n `string form of guid`  \n  \n `</ResourceManagerId>`  \n  \n## Security Issues For Tracing  \n When you as an administrator turn on tracing, sensitive information might be written to a trace log that is publicly viewable by default. To mitigate any possible security threat, you should consider storing the trace log in a secure location controlled by share and file system access permissions.","nodes":[{"pos":[12,46],"content":"Diagnostic Traces | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Diagnostic Traces | Microsoft Docs","pos":[0,34]}]},{"pos":[311,328],"content":"Diagnostic Traces","linkify":"Diagnostic Traces","nodes":[{"content":"Diagnostic Traces","pos":[0,17]}]},{"content":"Traces are the publishing of specific messages that are generated during application execution.","pos":[329,424]},{"content":"When using tracing, you must have a mechanism for collecting and recording the messages that are sent.","pos":[425,527]},{"content":"Trace messages are received by listeners.","pos":[528,569]},{"content":"The purpose of a listener is to collect, store, and route tracing messages.","pos":[570,645]},{"content":"Listeners direct the tracing output to an appropriate target, such as a log, window, or text file.","pos":[646,744]},{"content":"One such listener, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.DefaultTraceListener&gt;</ph>, is automatically created and initialized when tracing is enabled.","pos":[751,887],"source":"One such listener, the <xref:System.Diagnostics.DefaultTraceListener>, is automatically created and initialized when tracing is enabled."},{"content":"If you want trace output to be directed to any additional sources, you must create and initialize additional trace listeners.","pos":[888,1013]},{"content":"The listeners you create should reflect your individual needs.","pos":[1014,1076]},{"content":"For example, you might want a text record of all trace output.","pos":[1077,1139]},{"content":"In this case, you would create a listener that wrote all output to a new text file when enabled.","pos":[1140,1236]},{"content":"On the other hand, you might only want to view output during application execution.","pos":[1237,1320]},{"content":"In that case, you might create a listener that directed all output to a console window.","pos":[1321,1408]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLogTraceListener&gt;</ph> can direct trace output to an event log, and the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> can write trace output to a stream.","pos":[1409,1595],"source":" The <xref:System.Diagnostics.EventLogTraceListener> can direct trace output to an event log, and the <xref:System.Diagnostics.TextWriterTraceListener> can write trace output to a stream."},{"pos":[1604,1620],"content":"Enabling Tracing","linkify":"Enabling Tracing","nodes":[{"content":"Enabling Tracing","pos":[0,16]}]},{"content":"To enable traces during transaction processing, you should edit your application’s configuration file.","pos":[1624,1726]},{"content":"The following is an example.","pos":[1727,1755]},{"content":"<ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> traces are written to the source named \"System.Transactions\".","pos":[2212,2300],"source":"<xref:System.Transactions> traces are written to the source named \"System.Transactions\"."},{"content":"You can use <ph id=\"ph1\">`add`</ph> to specify the name and type of the trace listener you want to use.","pos":[2301,2386],"source":" You can use `add` to specify the name and type of the trace listener you want to use."},{"content":"In our example configuration, we named the Listener \"tx\" and added the standard .NET Framework trace listener (<ph id=\"ph1\">&lt;xref:System.Diagnostics.XmlWriterTraceListener&gt;</ph>) as the type we want to use.","pos":[2387,2575],"source":" In our example configuration, we named the Listener \"tx\" and added the standard .NET Framework trace listener (<xref:System.Diagnostics.XmlWriterTraceListener>) as the type we want to use."},{"content":"Use <ph id=\"ph1\">`initializeData`</ph> to set the name of the log file for that listener.","pos":[2576,2647],"source":" Use `initializeData` to set the name of the log file for that listener."},{"content":"In addition, you can substitute a fully qualified path for a simple file name.","pos":[2648,2726]},{"content":"Each trace message type is assigned a level to indicate its degree of importance.","pos":[2733,2814]},{"content":"If the app-domain’s trace level is equal or lower than the level of an event type, then that message is generated.","pos":[2815,2929]},{"content":"The tracing level is controlled by the <ph id=\"ph1\">`switchValue`</ph> setting in the configuration file.","pos":[2930,3017],"source":" The tracing level is controlled by the `switchValue` setting in the configuration file."},{"content":"The levels that are associated with diagnostic trace messages are defined in the following table.","pos":[3018,3115]},{"content":"Trace Level","pos":[3122,3133]},{"content":"Description","pos":[3134,3145]},{"content":"Critical","pos":[3190,3198]},{"content":"Serious failures, such as the following, have occurred:","pos":[3199,3254]},{"content":"-   An error that can cause an immediate loss in user functionality.","pos":[3267,3335]},{"content":"-   An event that requires an administrator to take action to avoid loss of functionality.","pos":[3341,3431]},{"content":"-   Code hangs.","pos":[3437,3452]},{"content":"-   This tracing level can also provide sufficient context for interpreting other critical traces.","pos":[3458,3556]},{"content":"This can help to identify the sequence of operations leading to a serious failure.","pos":[3557,3639]},{"content":"Error","pos":[3644,3649]},{"content":"An error (for example, invalid configuration or network behavior) has occurred that can result in a loss of user functionality.","pos":[3650,3777]},{"content":"Warning","pos":[3782,3789]},{"content":"A condition exists that can subsequently result in an error or critical failure (for example, allocation failing or approaching a limit).","pos":[3790,3927]},{"content":"Normal processing of errors from user code (for example, transaction aborted, timeouts, authentication failed) can also generate a warning.","pos":[3928,4067]},{"content":"Information","pos":[4072,4083]},{"content":"Messages helpful for monitoring and diagnosing system status, measuring performance, or profiling are generated.","pos":[4084,4196]},{"content":"These can include transaction and enlistment lifetime events, such as a transaction being created or committed, the crossing of a significant boundary, or the allocation of significant resources.","pos":[4197,4392]},{"content":"A developer can then utilize such information for capacity planning and performance management.","pos":[4393,4488]},{"pos":[4498,4509],"content":"Trace Codes","linkify":"Trace Codes","nodes":[{"content":"Trace Codes","pos":[0,11]}]},{"content":"The following table lists the trace codes that are generated by the <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> infrastructure.","pos":[4513,4623],"source":"The following table lists the trace codes that are generated by the <xref:System.Transactions> infrastructure."},{"content":"Included in the table are the trace code identifier, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventTypeFilter.EventType%2A&gt;</ph> enumeration level for the trace, and the extra data contained in the <bpt id=\"p1\">**</bpt>TraceRecord<ept id=\"p1\">**</ept> for the trace.","pos":[4624,4835],"source":" Included in the table are the trace code identifier, the <xref:System.Diagnostics.EventTypeFilter.EventType%2A> enumeration level for the trace, and the extra data contained in the **TraceRecord** for the trace."},{"content":"In addition, the corresponding trace level of the trace is also stored in the <bpt id=\"p1\">**</bpt>TraceRecord<ept id=\"p1\">**</ept>.","pos":[4836,4930],"source":" In addition, the corresponding trace level of the trace is also stored in the **TraceRecord**."},{"content":"TraceCode","pos":[4937,4946]},{"content":"EventType","pos":[4947,4956]},{"content":"Extra data in TraceRecord","pos":[4957,4982]},{"content":"TransactionCreated","pos":[5055,5073]},{"content":"Info","pos":[5074,5078]},{"content":"TransactionTraceId","pos":[5079,5097]},{"content":"TransactionPromoted","pos":[5102,5121]},{"content":"Info","pos":[5122,5126]},{"content":"Local TransactionTraceId, Distributed TransactionTraceId","pos":[5127,5183]},{"content":"EnlistmentCreated","pos":[5188,5205]},{"content":"Info","pos":[5206,5210]},{"content":"TransactionTraceId, EnlistmentTraceId, EnlistmentType (durable/volatile), EnlistmentOptions","pos":[5211,5302]},{"content":"EnlistmentCallbackNegative","pos":[5307,5333]},{"content":"Warning","pos":[5334,5341]},{"content":"TransactionTraceId, EnlistmentTraceId,","pos":[5342,5380]},{"content":"Callback (forcerollback/aborted/indoubt)","pos":[5393,5433]},{"content":"TransactionRollbackCalled","pos":[5438,5463]},{"content":"Warning","pos":[5464,5471]},{"content":"TransactionTraceId","pos":[5472,5490]},{"content":"TransactionAborted","pos":[5495,5513]},{"content":"Warning","pos":[5514,5521]},{"content":"TransactionTraceId","pos":[5522,5540]},{"content":"TransactionInDoubt","pos":[5545,5563]},{"content":"Warning","pos":[5564,5571]},{"content":"TransactionTraceId","pos":[5572,5590]},{"content":"TransactionScopeCreated","pos":[5595,5618]},{"content":"Info","pos":[5619,5623]},{"content":"TransactionScopeResult, which can be the following:","pos":[5624,5675]},{"content":"-   New transaction.","pos":[5688,5708]},{"content":"-   Transaction passed.","pos":[5714,5737]},{"content":"-   Dependent transaction passed.","pos":[5743,5776]},{"content":"-   Using current transaction.","pos":[5782,5812]},{"content":"-   No transaction.","pos":[5818,5837]},{"content":"new current TransactionTraceId","pos":[5850,5880]},{"content":"TransactionScopeDisposed","pos":[5885,5909]},{"content":"Info","pos":[5910,5914]},{"content":"TransactionTraceId of the scope’s \"expected\" current transaction.","pos":[5915,5980]},{"content":"TransactionScopeIncomplete","pos":[5985,6011]},{"content":"Warning","pos":[6012,6019]},{"content":"TransactionTraceId of the scope’s \"expected\" current transaction.","pos":[6020,6085]},{"content":"TransactionScopeNestedIncorrectly","pos":[6090,6123]},{"content":"Warning","pos":[6124,6131]},{"content":"TransactionTraceId of the scope’s \"expected\" current transaction.","pos":[6132,6197]},{"content":"TransactionScopeCurrentTransactionChanged","pos":[6202,6243]},{"content":"Warning","pos":[6244,6251]},{"content":"Old current TransactionTraceId, other TransactionTraceId","pos":[6252,6308]},{"content":"TransactionScopeTimeout","pos":[6313,6336]},{"content":"Warning","pos":[6337,6344]},{"content":"TransactionTraceId of the scope’s \"expected\" current transaction.","pos":[6345,6410]},{"content":"DependentCloneCreated","pos":[6415,6436]},{"content":"Info","pos":[6437,6441]},{"content":"TransactionTraceId, type of dependent transaction created (RollbackIfNotComplete/BlockCommitUntilComplete)","pos":[6442,6548]},{"content":"DependentCloneComplete","pos":[6553,6575]},{"content":"Info","pos":[6576,6580]},{"content":"TransactionTraceId","pos":[6581,6599]},{"content":"RecoveryComplete","pos":[6604,6620]},{"content":"Info","pos":[6621,6625]},{"content":"Resource Manager GUID (from base)","pos":[6626,6659]},{"content":"Reenlist","pos":[6664,6672]},{"content":"Info","pos":[6673,6677]},{"content":"Resource Manager GUID (from base)","pos":[6678,6711]},{"content":"TransactionSerialized","pos":[6716,6737]},{"content":"Info","pos":[6738,6742]},{"content":"TransactionTraceId.","pos":[6743,6762]},{"content":"TransactionException","pos":[6767,6787]},{"content":"Error","pos":[6788,6793]},{"content":"Exception message","pos":[6794,6811]},{"content":"InvalidOperationException","pos":[6816,6841]},{"content":"Error","pos":[6842,6847]},{"content":"Exception message","pos":[6848,6865]},{"content":"InternalError","pos":[6870,6883]},{"content":"Critical","pos":[6884,6892]},{"content":"Exception message","pos":[6893,6910]},{"content":"TransferEvent","pos":[6915,6928]},{"content":"When a transaction is deserialized, or promoted from a <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph> transaction to a distributed one, the current ActivityID from the ExecutionContext and the distributed transaction ID are written.","pos":[6930,7142],"source":"When a transaction is deserialized, or promoted from a <xref:System.Transactions> transaction to a distributed one, the current ActivityID from the ExecutionContext and the distributed transaction ID are written."},{"content":"When the DTC calls back into managed code, the distributed transaction ID is set as the ActivityID in the ExecutionContext for the duration of the callback.","pos":[7155,7311]},{"content":"ConfiguredDefaultTimeoutAdjusted","pos":[7316,7348]},{"content":"Warning","pos":[7349,7356]},{"content":"No extra data","pos":[7357,7370]},{"content":"TransactionTimeout","pos":[7375,7393]},{"content":"Warning","pos":[7394,7401]},{"content":"The TransactionTraceId of the transaction being timed out.","pos":[7402,7460]},{"content":"The XML schema for each of the preceding extra data items has the following format.","pos":[7468,7551]},{"pos":[7561,7587],"content":"TransactionTraceIdentifier","linkify":"TransactionTraceIdentifier","nodes":[{"content":"TransactionTraceIdentifier","pos":[0,26]}]},{"pos":[7866,7891],"content":"EnlistmentTraceIdentifier","linkify":"EnlistmentTraceIdentifier","nodes":[{"content":"EnlistmentTraceIdentifier","pos":[0,25]}]},{"pos":[8422,8449],"content":"Resource Manager Identifier","linkify":"Resource Manager Identifier","nodes":[{"content":"Resource Manager Identifier","pos":[0,27]}]},{"pos":[8540,8567],"content":"Security Issues For Tracing","linkify":"Security Issues For Tracing","nodes":[{"content":"Security Issues For Tracing","pos":[0,27]}]},{"content":"When you as an administrator turn on tracing, sensitive information might be written to a trace log that is publicly viewable by default.","pos":[8571,8708]},{"content":"To mitigate any possible security threat, you should consider storing the trace log in a secure location controlled by share and file system access permissions.","pos":[8709,8869]}]}