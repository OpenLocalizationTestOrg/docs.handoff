<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="configuration-and-metadata-support.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65c826c909496a9efeb99801142eb49e4f92d3bc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\extending\configuration-and-metadata-support.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fecde2f623e775c52713d68bd8287363b1356f16</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">463cfd62235de93c4687e244dc6aadfab5a0976d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Configuration and Metadata Support</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Configuration and Metadata Support</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to enable configuration and metadata support for bindings and binding elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Overview of Configuration and Metadata</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic discusses the following tasks, which are optional items 1, 2, and 4 in the <bpt id="p1">[</bpt>Developing Channels<ept id="p1">](../../../../docs/framework/wcf/extending/developing-channels.md)</ept> task list.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Enabling configuration file support for a binding element.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Enabling configuration file support for a binding.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Exporting WSDL and policy assertions for a binding element.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Identifying WSDL and policy assertions to insert and configure your binding or binding element.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information about creating user-defined bindings and binding elements, see <bpt id="p1">[</bpt>Creating User-Defined Bindings<ept id="p1">](../../../../docs/framework/wcf/extending/creating-user-defined-bindings.md)</ept> and <bpt id="p2">[</bpt>Creating a BindingElement<ept id="p2">](../../../../docs/framework/wcf/extending/creating-a-bindingelement.md)</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Adding Configuration Support</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To enable configuration file support for a channel, you must implement two configuration sections, <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BindingElementExtensionElement?displayProperty=nameWithType&gt;</ph>, which enables configuration support for binding elements, and the <ph id="ph2">&lt;xref:System.ServiceModel.Configuration.StandardBindingElement?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602?displayProperty=nameWithType&gt;</ph>, which enable configuration support for bindings.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An easier way to do this is to use the <bpt id="p1">[</bpt>ConfigurationCodeGenerator<ept id="p1">](../../../../docs/framework/wcf/samples/configurationcodegenerator.md)</ept> sample tool to generate configuration code for your bindings and binding elements.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Extending BindingElementExtensionElement</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example code is taken from the <bpt id="p1">[</bpt>Transport: UDP<ept id="p1">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UdpTransportElement`</ph> is a <ph id="ph2">&lt;xref:System.ServiceModel.Configuration.BindingElementExtensionElement&gt;</ph> that exposes <ph id="ph3">`UdpTransportBindingElement`</ph> to the configuration system.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>With a few basic overrides, the sample defines the configuration section name, the type of the binding element and how to create the binding element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Users can then register the extension section in a configuration file as follows.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The extension can be referenced from custom bindings to use UDP as the transport.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Adding Configuration for a Binding</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The section <ph id="ph1">`SampleProfileUdpBindingCollectionElement`</ph> is a <ph id="ph2">&lt;xref:System.ServiceModel.Configuration.StandardBindingCollectionElement%602&gt;</ph> that exposes <ph id="ph3">`SampleProfileUdpBinding`</ph> to the configuration system.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The bulk of the implementation is delegated to the <ph id="ph1">`SampleProfileUdpBindingConfigurationElement`</ph>, which derives from <ph id="ph2">&lt;xref:System.ServiceModel.Configuration.StandardBindingElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SampleProfileUdpBindingConfigurationElement`</ph> has properties that correspond to the properties on <ph id="ph2">`SampleProfileUdpBinding`</ph>, and functions to map from the <ph id="ph3">`ConfigurationElement`</ph> binding.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Finally, the <ph id="ph1">`OnApplyConfiguration`</ph> method is overridden in the <ph id="ph2">`SampleProfileUdpBinding`</ph>, as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To register this handler with the configuration system, add the following section to the relevant configuration file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It can then be referenced from the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>system.serviceModel&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/system-servicemodel.md)</ept> configuration section.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Adding Metadata Support for a Binding Element</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To integrate a channel into the metadata system, it must support both the import and export of policy.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This allows tools such as <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to generate clients of the binding element.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Adding WSDL Support</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The transport binding element in a binding is responsible for exporting and importing addressing information in metadata.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When using a SOAP binding, the transport binding element should also export a correct transport URI in metadata.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example code is taken from the <bpt id="p1">[</bpt>Transport: UDP<ept id="p1">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>WSDL Export</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To export addressing information, the <ph id="ph1">`UdpTransportBindingElement`</ph> implements the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A?displayProperty=nameWithType&gt;</ph> method adds the correct addressing information to the WSDL port.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UdpTransportBindingElement`</ph> implementation of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint%2A&gt;</ph> method also exports a transport URI when the endpoint uses a SOAP binding:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>WSDL Import</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To extend the WSDL import system to handle importing the addresses, add the following configuration to the configuration file for Svcutil.exe as shown in the Svcutil.exe.config file:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When running Svcutil.exe, there are two options for getting Svcutil.exe to load the WSDL import extensions:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Point Svcutil.exe to the configuration file using the /SvcutilConfig:<ph id="ph1">\&lt;</ph>file&gt;.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add the configuration section to Svcutil.exe.config in the same directory as Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UdpBindingElementImporter`</ph> type implements the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ImportEndpoint`</ph> method imports the address from the WSDL port:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Adding Policy Support</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The custom binding element can export policy assertions in the WSDL binding for a service endpoint to express the capabilities of that binding element.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following example code is taken from the <bpt id="p1">[</bpt>Transport: UDP<ept id="p1">](../../../../docs/framework/wcf/samples/transport-udp.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Policy Export</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`UdpTransportBindingElement`</ph> type implements <ph id="ph2">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType&gt;</ph> to add support for exporting policy.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As a result, <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=nameWithType&gt;</ph> includes <ph id="ph2">`UdpTransportBindingElement`</ph> in the generation of policy for any binding that includes it.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy%2A?displayProperty=nameWithType&gt;</ph>, add an assertion for UDP and another assertion if the channel is in multicast mode.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is because multicast mode affects how the communication stack is constructed, and thus must be coordinated between both sides.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because custom transport binding elements are responsible for handling addressing, the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension?displayProperty=nameWithType&gt;</ph> implementation on the <ph id="ph2">`UdpTransportBindingElement`</ph> must also handle exporting the appropriate WS-Addressing policy assertions to indicate the version of WS-Addressing being used.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Policy Import</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To extend the policy import system, add the following configuration to the configuration file for Svcutil.exe as shown in the Svcutil.exe.config file:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Then we implement <ph id="ph1">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=nameWithType&gt;</ph> from our registered class (<ph id="ph2">`UdpBindingElementImporter`</ph>).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A?displayProperty=nameWithType&gt;</ph>, examine the assertions in the appropriate namespace and process the ones for generating the transport and checking if it is multicast.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In addition, remove the assertions that the importer handles from the list of binding assertions.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Again, when running Svcutil.exe, there are two options for integration:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Point Svcutil.exe to our configuration file using the /SvcutilConfig:<ph id="ph1">\&lt;</ph>file&gt;.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Add the configuration section to Svcutil.exe.config in the same directory as Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Adding a Custom Standard Binding Importer</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Svcutil.exe and the <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType&gt;</ph> type, by default, recognize and import system-provided bindings.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise, the binding gets imported as a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To enable Svcutil.exe and the <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlImporter&gt;</ph> to import the <ph id="ph2">`SampleProfileUdpBinding`</ph> the <ph id="ph3">`UdpBindingElementImporter`</ph> also acts as a custom standard binding importer.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A custom standard binding importer implements the <ph id="ph1">`ImportEndpoint`</ph> method on the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType&gt;</ph> interface to examine the <ph id="ph3">&lt;xref:System.ServiceModel.Channels.CustomBinding?displayProperty=nameWithType&gt;</ph> instance imported from metadata to see if it could have been generated by specific standard binding.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Generally, implementing a custom standard binding importer involves checking the properties of the imported binding elements to verify that only properties that could have been set by the standard binding have changed and all other properties are their defaults.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A basic strategy for implementing a standard binding importer is to create an instance of the standard binding, propagate the properties from the binding elements to the standard binding instance that the standard binding supports, and the compare the binding elements from the standard binding with the imported binding elements.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>