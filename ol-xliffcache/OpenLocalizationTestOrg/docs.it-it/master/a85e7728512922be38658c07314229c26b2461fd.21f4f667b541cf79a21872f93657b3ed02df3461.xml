{"content":"---\ntitle: \"How to: Define Constants in C#\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"C# language, constants\"\n  - \"constants [C#]\"\nms.assetid: 43f511be-346c-4b8a-995e-aded94542ece\n---\n# How to: Define Constants in C\\#\nConstants are fields whose values are set at compile time and can never be changed. Use constants to provide meaningful names instead of numeric literals (\"magic numbers\") for special values.  \n  \n> [!NOTE]\n>  In C# the [#define](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md) preprocessor directive cannot be used to define constants in the way that is typically used in C and C++.  \n  \n To define constant values of integral types (`int`, `byte`, and so on) use an enumerated type. For more information, see [enum](../../../csharp/language-reference/keywords/enum.md).  \n  \n To define non-integral constants, one approach is to group them in a single static class named `Constants`. This will require that all references to the constants be prefaced with the class name, as shown in the following example.  \n  \n## Example  \n [!code-csharp[csProgGuideObjects#89](~/samples/snippets/csharp/VS_Snippets_VBCSharp/csProgGuideObjects/CS/Objects.cs#89)]  \n  \n The use of the class name qualifier helps ensure that you and others who use the constant understand that it is constant and cannot be modified.  \n  \n## See also\n\n- [Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)\n","nodes":[{"pos":[4,184],"embed":true,"restype":"x-metadata","content":"title: \"How to: Define Constants in C#\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"C# language, constants\"\n  - \"constants [C#]\"\nms.assetid: 43f511be-346c-4b8a-995e-aded94542ece","nodes":[{"content":"How to: Define Constants in C#","nodes":[{"pos":[0,30],"content":"How to: Define Constants in C#","nodes":[{"content":"How to: Define Constants in C#","pos":[0,30]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[191,222],"content":"How to: Define Constants in C\\#","linkify":"How to: Define Constants in C\\#","nodes":[{"content":"How to: Define Constants in C<ph id=\"ph1\">\\#</ph>","pos":[0,31],"source":"How to: Define Constants in C\\#"}]},{"content":"Constants are fields whose values are set at compile time and can never be changed.","pos":[223,306]},{"content":"Use constants to provide meaningful names instead of numeric literals (\"magic numbers\") for special values.","pos":[307,414]},{"pos":[422,641],"content":"[!NOTE]\n In C# the [#define](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md) preprocessor directive cannot be used to define constants in the way that is typically used in C and C++.","leadings":["","> "],"nodes":[{"content":"In C# the <bpt id=\"p1\">[</bpt>#define<ept id=\"p1\">](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md)</ept> preprocessor directive cannot be used to define constants in the way that is typically used in C and C++.","pos":[9,217],"source":"In C# the [#define](../../../csharp/language-reference/preprocessor-directives/preprocessor-define.md) preprocessor directive cannot be used to define constants in the way that is typically used in C and C++."}]},{"content":"To define constant values of integral types (<ph id=\"ph1\">`int`</ph>, <ph id=\"ph2\">`byte`</ph>, and so on) use an enumerated type.","pos":[648,742],"source":"To define constant values of integral types (`int`, `byte`, and so on) use an enumerated type."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>enum<ept id=\"p1\">](../../../csharp/language-reference/keywords/enum.md)</ept>.","pos":[743,829],"source":" For more information, see [enum](../../../csharp/language-reference/keywords/enum.md)."},{"content":"To define non-integral constants, one approach is to group them in a single static class named <ph id=\"ph1\">`Constants`</ph>.","pos":[836,943],"source":"To define non-integral constants, one approach is to group them in a single static class named `Constants`."},{"content":"This will require that all references to the constants be prefaced with the class name, as shown in the following example.","pos":[944,1066]},{"pos":[1075,1082],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The use of the class name qualifier helps ensure that you and others who use the constant understand that it is constant and cannot be modified.","pos":[1214,1358]},{"pos":[1367,1375],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1379,1464],"content":"<bpt id=\"p1\">[</bpt>Classes and Structs<ept id=\"p1\">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept>","source":"[Classes and Structs](../../../csharp/programming-guide/classes-and-structs/index.md)"}]}