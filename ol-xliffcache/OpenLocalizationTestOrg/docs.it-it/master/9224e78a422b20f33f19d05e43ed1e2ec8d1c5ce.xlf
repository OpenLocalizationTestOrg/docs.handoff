<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="regular-expression-language-quick-reference.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7a2b81f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9224e78a422b20f33f19d05e43ed1e2ec8d1c5ce</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\regular-expression-language-quick-reference.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95ce4230281e9b7e891632e502144ffd38a02f15</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dcf3504641a532ad58aa9f9f4bf43eb65c3a9bee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Regular Expression Language - Quick Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Regular Expression Language - Quick Reference</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A regular expression is a pattern that the regular expression engine attempts to match in input text.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A pattern consists of one or more character literals, operators, or constructs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a brief introduction, see <bpt id="p1">[</bpt>.NET Regular Expressions<ept id="p1">](../../../docs/standard/base-types/regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each section in this quick reference lists a particular category of characters, operators, and constructs that you can use to define regular expressions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Weâ€™ve also provided this information in two formats that you can download and print for easy reference:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Download in Word (.docx) format<ept id="p1">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Download in PDF (.pdf) format<ept id="p1">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Character Escapes</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The backslash character (<ph id="ph1">\\</ph>) in a regular expression indicates that the character that follows it either is a special character (as shown in the following table), or should be interpreted literally.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Character Escapes<ept id="p1">](../../../docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Escaped character</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Matches a bell character, \u0007.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\u0007"`</ph> in <ph id="ph2">`"Error!" + '\u0007'`</ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In a character class, matches a backspace, \u0008.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\b\b\b\b"`</ph> in <ph id="ph2">`"\b\b\b\b"`</ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Matches a tab, \u0009.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"item1\t"`</ph>, <ph id="ph2">`"item2\t"`</ph> in <ph id="ph3">`"item1\titem2\t"`</ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Matches a carriage return, \u000D.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`\r`</ph> is not equivalent to the newline character, <ph id="ph2">`\n`</ph>.)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\r\nThese"`</ph> in <ph id="ph2">`"\r\nThese are\ntwo lines."`</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Matches a vertical tab, \u000B.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\v\v\v"`</ph> in <ph id="ph2">`"\v\v\v"`</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Matches a form feed, \u000C.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\f\f\f"`</ph> in <ph id="ph2">`"\f\f\f"`</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Matches a new line, \u000A.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\r\nThese"`</ph> in <ph id="ph2">`"\r\nThese are\ntwo lines."`</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Matches an escape, \u001B.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\x001B"`</ph> in <ph id="ph2">`"\x001B"`</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\`</ph> <bpt id="p1">*</bpt>nnn<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Uses octal representation to specify a character (<bpt id="p1">*</bpt>nnn<ept id="p1">*</ept> consists of two or three digits).</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"a b"`</ph>, <ph id="ph2">`"c d"`</ph> in <ph id="ph3">`"a bc d"`</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\x`</ph> <bpt id="p1">*</bpt>nn<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Uses hexadecimal representation to specify a character (<bpt id="p1">*</bpt>nn<ept id="p1">*</ept> consists of exactly two digits).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"a b"`</ph>, <ph id="ph2">`"c d"`</ph> in <ph id="ph3">`"a bc d"`</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\c`</ph> <bpt id="p1">*</bpt>X<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\c`</ph> <bpt id="p1">*</bpt>x<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Matches the ASCII control character that is specified by <bpt id="p1">*</bpt>X<ept id="p1">*</ept> or <bpt id="p2">*</bpt>x<ept id="p2">*</ept>, where <bpt id="p3">*</bpt>X<ept id="p3">*</ept> or <bpt id="p4">*</bpt>x<ept id="p4">*</ept> is the letter of the control character.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"\x0003"`</ph> in <ph id="ph2">`"\x0003"`</ph> (Ctrl-C)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\u`</ph> <bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Matches a Unicode character by using hexadecimal representation (exactly four digits, as represented by <bpt id="p1">*</bpt>nnnn<ept id="p1">*</ept>).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"a b"`</ph>, <ph id="ph2">`"c d"`</ph> in <ph id="ph3">`"a bc d"`</ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When followed by a character that is not recognized as an escaped character in this and other tables in this topic, matches that character.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`\*`</ph> is the same as <ph id="ph2">`\x2A`</ph>, and <ph id="ph3">`\.`</ph> is the same as <ph id="ph4">`\x2E`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This allows the regular expression engine to disambiguate language elements (such as <ph id="ph1">\*</ph> or ?) and character literals (represented by <ph id="ph2">`\*`</ph> or <ph id="ph3">`\?`</ph>).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"2+2"`</ph> and <ph id="ph2">`"3*9"`</ph> in <ph id="ph3">`"(2+2) * 3*9"`</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Character Classes</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A character class matches any one of a set of characters.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Character classes include the language elements listed in the following table.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Character Classes<ept id="p1">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Character class</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[`</ph> <bpt id="p1">*</bpt>character_group<ept id="p1">*</ept> <ph id="ph2">`]`</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Matches any single character in <bpt id="p1">*</bpt>character_group<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>By default, the match is case-sensitive.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"a"`</ph> in <ph id="ph2">`"gray"`</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"a"`</ph>, <ph id="ph2">`"e"`</ph> in <ph id="ph3">`"lane"`</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[^`</ph> <bpt id="p1">*</bpt>character_group<ept id="p1">*</ept> <ph id="ph2">`]`</ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Negation: Matches any single character that is not in <bpt id="p1">*</bpt>character_group<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>By default, characters in <bpt id="p1">*</bpt>character_group<ept id="p1">*</ept> are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"r"`</ph>, <ph id="ph2">`"g"`</ph>, <ph id="ph3">`"n"`</ph> in <ph id="ph4">`"reign"`</ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`[`</ph> <bpt id="p1">*</bpt>first<ept id="p1">*</ept> <ph id="ph2">`-`</ph> <bpt id="p2">*</bpt>last<ept id="p2">*</ept> <ph id="ph3">`]`</ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Character range: Matches any single character in the range from <bpt id="p1">*</bpt>first<ept id="p1">*</ept> to <bpt id="p2">*</bpt>last<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"A"`</ph>, <ph id="ph2">`"B"`</ph> in <ph id="ph3">`"AB123"`</ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Wildcard: Matches any single character except \n.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To match a literal period character (.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>or <ph id="ph1">`\u002E`</ph>), you must precede it with the escape character (<ph id="ph2">`\.`</ph>).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ave"`</ph> in <ph id="ph2">`"nave"`</ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ate"`</ph> in <ph id="ph2">`"water"`</ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\p{`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`}`</ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Matches any single character in the Unicode general category or named block specified by <bpt id="p1">*</bpt>name<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"C"`</ph>, <ph id="ph2">`"L"`</ph> in <ph id="ph3">`"City Lights"`</ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"Ð”"`</ph>, <ph id="ph2">`"Ð–"`</ph> in <ph id="ph3">`"Ð”Ð–em"`</ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\P{`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`}`</ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Matches any single character that is not in the Unicode general category or named block specified by <bpt id="p1">*</bpt>name<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"i"`</ph>, <ph id="ph2">`"t"`</ph>, <ph id="ph3">`"y"`</ph> in <ph id="ph4">`"City"`</ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"e"`</ph>, <ph id="ph2">`"m"`</ph> in <ph id="ph3">`"Ð”Ð–em"`</ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Matches any word character.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"I"`</ph>, <ph id="ph2">`"D"`</ph>, <ph id="ph3">`"A"`</ph>, <ph id="ph4">`"1"`</ph>, <ph id="ph5">`"3"`</ph> in <ph id="ph6">`"ID A1.3"`</ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Matches any non-word character.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`" "`</ph>, <ph id="ph2">`"."`</ph> in <ph id="ph3">`"ID A1.3"`</ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Matches any white-space character.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"D "`</ph> in <ph id="ph2">`"ID A1.3"`</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Matches any non-white-space character.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`" _"`</ph> in <ph id="ph2">`"int __ctr"`</ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Matches any decimal digit.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"4"`</ph> in <ph id="ph2">`"4 = IV"`</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Matches any character other than a decimal digit.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`" "`</ph>, <ph id="ph2">`"="`</ph>, <ph id="ph3">`" "`</ph>, <ph id="ph4">`"I"`</ph>, <ph id="ph5">`"V"`</ph> in <ph id="ph6">`"4 = IV"`</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Anchors</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Anchors, or atomic zero-width assertions, cause a match to succeed or fail depending on the current position in the string, but they do not cause the engine to advance through the string or consume characters.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The metacharacters listed in the following table are anchors.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anchors<ept id="p1">](../../../docs/standard/base-types/anchors-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Assertion</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>By default, the match must start at the beginning of the string; in multiline mode, it must start at the beginning of the line.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"901"`</ph> in <ph id="ph2">`"901-333-"`</ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>By default, the match must occur at the end of the string or before <ph id="ph1">`\n`</ph> at the end of the string; in multiline mode, it must occur before the end of the line or before <ph id="ph2">`\n`</ph> at the end of the line.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"-333"`</ph> in <ph id="ph2">`"-901-333"`</ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The match must occur at the start of the string.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"901"`</ph> in <ph id="ph2">`"901-333-"`</ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The match must occur at the end of the string or before <ph id="ph1">`\n`</ph> at the end of the string.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"-333"`</ph> in <ph id="ph2">`"-901-333"`</ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The match must occur at the end of the string.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"-333"`</ph> in <ph id="ph2">`"-901-333"`</ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The match must occur at the point where the previous match ended.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"(1)"`</ph>, <ph id="ph2">`"(3)"`</ph>, <ph id="ph3">`"(5)"`</ph> in <ph id="ph4">`"(1)(3)(5)[7](9)"`</ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The match must occur on a boundary between a <ph id="ph1">`\w`</ph> (alphanumeric) and a <ph id="ph2">`\W`</ph> (nonalphanumeric) character.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"them theme"`</ph>, <ph id="ph2">`"them them"`</ph> in <ph id="ph3">`"them theme them them"`</ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The match must not occur on a <ph id="ph1">`\b`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ends"`</ph>, <ph id="ph2">`"ender"`</ph> in <ph id="ph3">`"end sends endure lender"`</ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Grouping Constructs</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Grouping constructs delineate subexpressions of a regular expression and typically capture substrings of an input string.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Grouping constructs include the language elements listed in the following table.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](grouping-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Grouping construct</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Captures the matched subexpression and assigns it a one-based ordinal number.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ee"`</ph> in <ph id="ph2">`"deep"`</ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?&lt;`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`&gt;`</ph> <bpt id="p2">*</bpt>subexpression<ept id="p2">*</ept> <ph id="ph3">`)`</ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Captures the matched subexpression into a named group.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ee"`</ph> in <ph id="ph2">`"deep"`</ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?&lt;`</ph> <bpt id="p1">*</bpt>name1<ept id="p1">*</ept> <ph id="ph2">`-`</ph> <bpt id="p2">*</bpt>name2<ept id="p2">*</ept> <ph id="ph3">`&gt;`</ph> <bpt id="p3">*</bpt>subexpression<ept id="p3">*</ept> <ph id="ph4">`)`</ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Defines a balancing group definition.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For more information, see the "Balancing Group Definition" section in <bpt id="p1">[</bpt>Grouping Constructs<ept id="p1">](grouping-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"((1-3)*(3-1))"`</ph> in <ph id="ph2">`"3+2^((1-3)*(3-1))"`</ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?:`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Defines a noncapturing group.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"WriteLine"`</ph> in <ph id="ph2">`"Console.WriteLine()"`</ph></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"Write"`</ph> in <ph id="ph2">`"Console.Write(value)"`</ph></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?imnsx-imnsx:`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Applies or disables the specified options within <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Regular Expression Options<ept id="p1">](regular-expression-options.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"A12xl"`</ph>, <ph id="ph2">`"A12XL"`</ph> in <ph id="ph3">`"A12xl A12XL a12xl"`</ph></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?=`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Zero-width positive lookahead assertion.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"is"`</ph>, <ph id="ph2">`"ran"`</ph>, and <ph id="ph3">`"out"`</ph> in <ph id="ph4">`"He is. The dog ran. The sun is out."`</ph></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?!`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Zero-width negative lookahead assertion.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"sure"`</ph>, <ph id="ph2">`"used"`</ph> in <ph id="ph3">`"unsure sure unity used"`</ph></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?&lt;=`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Zero-width positive lookbehind assertion.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"99"`</ph>, <ph id="ph2">`"50"`</ph>, <ph id="ph3">`"05"`</ph> in <ph id="ph4">`"1851 1999 1950 1905 2003"`</ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?&lt;!`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Zero-width negative lookbehind assertion.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"51"`</ph>, <ph id="ph2">`"03"`</ph> in <ph id="ph3">`"1851 1999 1950 1905 2003"`</ph></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?&gt;`</ph> <bpt id="p1">*</bpt>subexpression<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Nonbacktracking (or "greedy") subexpression.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"1ABB"`</ph>, <ph id="ph2">`"3ABB"`</ph>, and <ph id="ph3">`"5AB"`</ph> in <ph id="ph4">`"1ABB 3ABBC 5AB 5AC"`</ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Quantifiers</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>A quantifier specifies how many instances of the previous element (which can be a character, a group, or a character class) must be present in the input string for a match to occur.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Quantifiers include the language elements listed in the following table.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Quantifiers<ept id="p1">](quantifiers-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Quantifier</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Matches the previous element zero or more times.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`".0"`</ph>, <ph id="ph2">`"19.9"`</ph>, <ph id="ph3">`"219.9"`</ph></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Matches the previous element one or more times.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"bee"`</ph> in <ph id="ph2">`"been"`</ph>, <ph id="ph3">`"be"`</ph> in <ph id="ph4">`"bent"`</ph></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Matches the previous element zero or one time.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ran"`</ph>, <ph id="ph2">`"rain"`</ph></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt>n<ept id="p1">*</ept> <ph id="ph2">`}`</ph></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Matches the previous element exactly <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`",043"`</ph> in <ph id="ph2">`"1,043.6"`</ph>, <ph id="ph3">`",876"`</ph>, <ph id="ph4">`",543"`</ph>, and <ph id="ph5">`",210"`</ph> in <ph id="ph6">`"9,876,543,210"`</ph></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt>n<ept id="p1">*</ept> <ph id="ph2">`,}`</ph></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Matches the previous element at least <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"166"`</ph>, <ph id="ph2">`"29"`</ph>, <ph id="ph3">`"1930"`</ph></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt>n<ept id="p1">*</ept> <ph id="ph2">`,`</ph> <bpt id="p2">*</bpt>m<ept id="p2">*</ept> <ph id="ph3">`}`</ph></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Matches the previous element at least <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, but no more than <bpt id="p2">*</bpt>m<ept id="p2">*</ept> times.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"166"`</ph>, <ph id="ph2">`"17668"`</ph></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"19302"`</ph> in <ph id="ph2">`"193024"`</ph></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Matches the previous element zero or more times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`".0"`</ph>, <ph id="ph2">`"19.9"`</ph>, <ph id="ph3">`"219.9"`</ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Matches the previous element one or more times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"be"`</ph> in <ph id="ph2">`"been"`</ph>, <ph id="ph3">`"be"`</ph> in <ph id="ph4">`"bent"`</ph></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Matches the previous element zero or one time, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ran"`</ph>, <ph id="ph2">`"rain"`</ph></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt>n<ept id="p1">*</ept> <ph id="ph2">`}?`</ph></source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Matches the preceding element exactly <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`",043"`</ph> in <ph id="ph2">`"1,043.6"`</ph>, <ph id="ph3">`",876"`</ph>, <ph id="ph4">`",543"`</ph>, and <ph id="ph5">`",210"`</ph> in <ph id="ph6">`"9,876,543,210"`</ph></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt>n<ept id="p1">*</ept> <ph id="ph2">`,}?`</ph></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Matches the previous element at least <bpt id="p1">*</bpt>n<ept id="p1">*</ept> times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"166"`</ph>, <ph id="ph2">`"29"`</ph>, <ph id="ph3">`"1930"`</ph></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt>n<ept id="p1">*</ept> <ph id="ph2">`,`</ph> <bpt id="p2">*</bpt>m<ept id="p2">*</ept> <ph id="ph3">`}?`</ph></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Matches the previous element between <bpt id="p1">*</bpt>n<ept id="p1">*</ept> and <bpt id="p2">*</bpt>m<ept id="p2">*</ept> times, but as few times as possible.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"166"`</ph>, <ph id="ph2">`"17668"`</ph></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"193"`</ph>, <ph id="ph2">`"024"`</ph> in <ph id="ph3">`"193024"`</ph></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Backreference Constructs</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A backreference allows a previously matched subexpression to be identified subsequently in the same regular expression.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The following table lists the backreference constructs supported by regular expressions in .NET.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Backreference Constructs<ept id="p1">](backreference-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Backreference construct</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\`</ph> <bpt id="p1">*</bpt>number<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Backreference.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Matches the value of a numbered subexpression.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ee"`</ph> in <ph id="ph2">`"seek"`</ph></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\k&lt;`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`&gt;`</ph></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Named backreference.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Matches the value of a named expression.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"ee"`</ph> in <ph id="ph2">`"seek"`</ph></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Alternation Constructs</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Alternation constructs modify a regular expression to enable either/or matching.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>These constructs include the language elements listed in the following table.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Alternation Constructs<ept id="p1">](alternation-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Alternation construct</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Matches any one element separated by the vertical bar (<ph id="ph1">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph>) character.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"the"`</ph>, <ph id="ph2">`"this"`</ph> in <ph id="ph3">`"this is the day."`</ph></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(`</ph> <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> <ph id="ph2">`)`</ph> <bpt id="p2">*</bpt>yes<ept id="p2">*</ept> <ph id="ph3">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph> <bpt id="p3">*</bpt>no<ept id="p3">*</ept> <ph id="ph4">`)`</ph></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Matches <bpt id="p1">*</bpt>yes<ept id="p1">*</ept> if the regular expression pattern designated by <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> matches; otherwise, matches the optional <bpt id="p3">*</bpt>no<ept id="p3">*</ept> part.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is interpreted as a zero-width assertion.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"A10"`</ph>, <ph id="ph2">`"910"`</ph> in <ph id="ph3">`"A10 C103 910"`</ph></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`)`</ph> <bpt id="p2">*</bpt>yes<ept id="p2">*</ept> <ph id="ph3">&lt;code&gt;&amp;#124;&lt;/code&gt;</ph> <bpt id="p3">*</bpt>no<ept id="p3">*</ept> <ph id="ph4">`)`</ph></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Matches <bpt id="p1">*</bpt>yes<ept id="p1">*</ept> if <bpt id="p2">*</bpt>name<ept id="p2">*</ept>, a named or numbered capturing group, has a match; otherwise, matches the optional <bpt id="p3">*</bpt>no<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"Dogs.jpg "`</ph>, <ph id="ph2">`"\"Yiska playing.jpg\""`</ph> in <ph id="ph3">`"Dogs.jpg \"Yiska playing.jpg\""`</ph></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Substitutions</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Substitutions are regular expression language elements that are supported in replacement patterns.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Substitutions<ept id="p1">](substitutions-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The metacharacters listed in the following table are atomic zero-width assertions.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Character</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Replacement pattern</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Input string</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Result string</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$`</ph> <bpt id="p1">*</bpt>number<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Substitutes the substring matched by group <bpt id="p1">*</bpt>number<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`${`</ph> <bpt id="p1">*</bpt>name<ept id="p1">*</ept> <ph id="ph2">`}`</ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Substitutes the substring matched by the named group <bpt id="p1">*</bpt>name<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Substitutes a literal "$".</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Substitutes a copy of the whole match.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Substitutes all the text of the input string before the match.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Substitutes all the text of the input string after the match.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Substitutes the last group that was captured.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Substitutes the entire input string.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Regular Expression Options</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>You can specify options that control how the regular expression engine interprets a regular expression pattern.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Many of these options can be specified either inline (in the regular expression pattern) or as one or more <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexOptions&gt;</ph> constants.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>This quick reference lists only inline options.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>For more information about inline and <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexOptions&gt;</ph> options, see the article <bpt id="p1">[</bpt>Regular Expression Options<ept id="p1">](regular-expression-options.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>You can specify an inline option in two ways:</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>By using the <bpt id="p1">[</bpt>miscellaneous construct<ept id="p1">](miscellaneous-constructs-in-regular-expressions.md)</ept> <ph id="ph1">`(?imnsx-imnsx)`</ph>, where a minus sign (-) before an option or set of options turns those options off.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`(?i-mn)`</ph> turns case-insensitive matching (<ph id="ph2">`i`</ph>) on, turns multiline mode (<ph id="ph3">`m`</ph>) off, and turns unnamed group captures (<ph id="ph4">`n`</ph>) off.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The option applies to the regular expression pattern from the point at which the option is defined, and is effective either to the end of the pattern or to the point where another construct reverses the option.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>By using the <bpt id="p1">[</bpt>grouping construct<ept id="p1">](grouping-constructs-in-regular-expressions.md)</ept><ph id="ph1">`(?imnsx-imnsx:`</ph><bpt id="p2">*</bpt>subexpression<ept id="p2">*</ept><ph id="ph2">`)`</ph>, which defines options for the specified group only.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The .NET regular expression engine supports the following inline options.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Matches</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Use case-insensitive matching.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"aardvark"`</ph>, <ph id="ph2">`"aaaAuto"`</ph> in <ph id="ph3">`"aardvark AAAuto aaaAuto Adam breakfast"`</ph></source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Use multiline mode.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`^`</ph> and <ph id="ph2">`$`</ph> match the beginning and end of a line, instead of the beginning and end of a string.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>For an example, see the "Multiline Mode" section in <bpt id="p1">[</bpt>Regular Expression Options<ept id="p1">](regular-expression-options.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Do not capture unnamed groups.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>For an example, see the "Explicit Captures Only" section in <bpt id="p1">[</bpt>Regular Expression Options<ept id="p1">](regular-expression-options.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Use single-line mode.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>For an example, see the "Single-line Mode" section in <bpt id="p1">[</bpt>Regular Expression Options<ept id="p1">](regular-expression-options.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Ignore unescaped white space in the regular expression pattern.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"1 aardvark"`</ph>, <ph id="ph2">`"2 cats"`</ph> in <ph id="ph3">`"1 aardvark 2 cats IV centurions"`</ph></source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Miscellaneous Constructs</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Miscellaneous constructs either modify a regular expression pattern or provide information about it.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The following table lists the miscellaneous constructs supported by .NET.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Miscellaneous Constructs<ept id="p1">](miscellaneous-constructs-in-regular-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Construct</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Sets or disables options such as case insensitivity in the middle of a pattern.For more information, see <bpt id="p1">[</bpt>Regular Expression Options<ept id="p1">](regular-expression-options.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`\bA(?i)b\w+\b`</ph> matches <ph id="ph2">`"ABA"`</ph>, <ph id="ph3">`"Able"`</ph> in <ph id="ph4">`"ABA Able Act"`</ph></source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?#`</ph> <bpt id="p1">*</bpt>comment<ept id="p1">*</ept> <ph id="ph2">`)`</ph></source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Inline comment.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The comment ends at the first closing parenthesis.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#`</ph> [to end of line]</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>X-mode comment.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The comment starts at an unescaped <ph id="ph1">`#`</ph> and continues to the end of the line.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expressions<ept id="p1">](regular-expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expression Classes<ept id="p1">](the-regular-expression-object-model.md)</ept></source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expression Examples<ept id="p1">](regular-expression-examples.md)</ept></source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expressions - Quick Reference (download in Word format)<ept id="p1">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.docx)</ept></source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regular Expressions - Quick Reference (download in PDF format)<ept id="p1">](https://download.microsoft.com/download/D/2/4/D240EBF6-A9BA-4E4F-A63F-AEB6DA0B921C/Regular%20expressions%20quick%20reference.pdf)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>