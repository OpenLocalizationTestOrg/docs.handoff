<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthroughs.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7240295f154277e722f38e99beb221c1c4d9a34</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\walkthroughs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a2635ce5f69909782986c183aee48d8818c9c7e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">234de925652f8afbb9c4851c5b390cd00376841d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# Walkthroughs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C# Walkthroughs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Walkthroughs give step-by-step instructions for common scenarios, which makes them a good place to start learning about the product or a particular feature area.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This section contains links to C# programming walkthroughs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing the Web by Using Async and Await<ept id="p1">](./programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Shows how to create an asynchronous solution by using <bpt id="p1">[</bpt>async<ept id="p1">](../csharp/language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>await<ept id="p2">](../csharp/language-reference/keywords/await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating a Windows Runtime Component in C# or Visual Basic and Calling it from JavaScript<ept id="p1">](/windows/uwp/winrt-components/walkthrough-creating-a-simple-windows-runtime-component-and-calling-it-from-javascript)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Shows how to create a <ph id="ph1">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> type, package it in a <ph id="ph2">[!INCLUDE[wrt](~/includes/wrt-md.md)]</ph> component, and then call the component from a <ph id="ph3">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app that's built for Windows by using JavaScript.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Office Programming (C# and Visual Basic)<ept id="p1">](../csharp/programming-guide/interop/walkthrough-office-programming.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Shows how to create an Excel workbook and a Word document by using C# and Visual Basic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating and Using Dynamic Objects (C# and Visual Basic)<ept id="p1">](../csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Shows how to create a custom object that dynamically exposes the contents of a text file, and how to create a project that uses the <ph id="ph1">`IronPython`</ph> library.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Authoring a Composite Control with Visual C#<ept id="p1">](../../docs/framework/winforms/controls/walkthrough-authoring-a-composite-control-with-visual-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Demonstrates creating a simple composite control and extending its functionality through inheritance.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating a Windows Forms Control that Takes Advantage of Visual Studio Design-Time Features<ept id="p1">](../../docs/framework/winforms/controls/creating-a-wf-control-design-time-features.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Illustrates how to create a custom designer for a custom control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inheriting from a Windows Forms Control with Visual C#<ept id="p1">](../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Demonstrates creating a simple inherited button control.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This button inherits functionality from the standard Windows Forms button and exposes a custom member.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging Custom Windows Forms Controls at Design Time<ept id="p1">](../../docs/framework/winforms/controls/walkthrough-debugging-custom-windows-forms-controls-at-design-time.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Describes how to debug the design-time behavior of your custom control.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performing Common Tasks Using Smart Tags on Windows Forms Controls<ept id="p1">](../../docs/framework/winforms/controls/performing-common-tasks-using-smart-tags-on-wf-controls.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Demonstrates some of the commonly performed tasks such as adding or removing a tab on a <ph id="ph1">`TabControl`</ph>, docking a control to its parent, and changing the orientation of a <ph id="ph2">`SplitContainer`</ph> control.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Queries in C# (LINQ)<ept id="p1">](../csharp/programming-guide/concepts/linq/walkthrough-writing-queries-linq.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Demonstrates the C# language features that are used to write <ph id="ph1">[!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)]</ph> query expressions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Manipulating Data (C#) (LINQ to SQL)<ept id="p1">](../framework/data/adonet/sql/linq/walkthrough-manipulating-data-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Describes a <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> scenario for adding, modifying, and deleting data in a database.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Simple Object Model and Query (C#) (LINQ to SQL)<ept id="p1">](../framework/data/adonet/sql/linq/walkthrough-simple-object-model-and-query-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Demonstrates how to create an entity class and a simple query to filter the entity class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Only Stored Procedures (C#) (LINQ to SQL)<ept id="p1">](../framework/data/adonet/sql/linq/walkthrough-using-only-stored-procedures-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Demonstrates how to use LINQ to SQL to access data by executing only stored procedures.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Querying Across Relationships (C#) (LINQ to SQL)<ept id="p1">](../framework/data/adonet/sql/linq/walkthrough-querying-across-relationships-csharp.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Demonstrates the use of <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> associations to represent foreign-key relationships in a database.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing a Visualizer in C#<ept id="p1">](/visualstudio/debugger/walkthrough-writing-a-visualizer-in-csharp)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Shows how to write a simple visualizer by using C#.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deployment Samples and Walkthroughs<ept id="p1">](/visualstudio/deployment/clickonce-deployment-samples-and-walkthroughs)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Provides step-by-step examples of common deployment scenarios.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio Samples<ept id="p1">](/visualstudio/ide/visual-studio-samples)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>