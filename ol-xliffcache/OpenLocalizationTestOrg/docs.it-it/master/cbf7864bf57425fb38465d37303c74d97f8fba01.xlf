<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbf7864bf57425fb38465d37303c74d97f8fba01</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\drag-and-drop-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1cd619c059d54ad226fc2b61626775808585b3a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae1084e63c80659a1c57cff29707b61b5e13d130</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Drag and Drop Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Drag and Drop Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of drag-and-drop support in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Drag-and-drop commonly refers to a method of data transfer that involves using a mouse (or some other pointing device) to select one or more objects, dragging these objects over some desired drop target in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>, and dropping them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Drag-and-Drop Support in WPF</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Drag-and-drop operations typically involve two parties: a drag source from which the dragged object originates and a drop target which receives the dropped object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The drag source and drop target may be UI elements in the same application or a different application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type and number of objects that can be manipulated with drag-and-drop is completely arbitrary.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, files, folders, and selections of content are some of the more common objects manipulated through drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The particular actions performed during a drag-and-drop operation are application specific, and often determined by context.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, dragging a selection of files from one folder to another on the same storage device moves the files by default, whereas dragging files from a <ph id="ph1">[!INCLUDE[TLA#tla_unc](../../../../includes/tlasharptla-unc-md.md)]</ph> share to a local folder copies the files by default.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The drag-and-drop facilities provided by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> are designed to be highly flexible and customizable to support a wide variety of drag-and-drop scenarios.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Drag-and-drop supports manipulating objects within a single application, or between different applications.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Dragging-and-dropping between <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications and other <ph id="ph2">[!INCLUDE[TLA2#tla_win](../../../../includes/tla2sharptla-win-md.md)]</ph> applications is also fully supported.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, any <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.ContentElement&gt;</ph> can participate in drag-and-drop.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The events and methods required for drag-and-drop operations are defined in the <ph id="ph1">&lt;xref:System.Windows.DragDrop&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> classes contain aliases for the <ph id="ph3">&lt;xref:System.Windows.DragDrop&gt;</ph> attached events so that the events appear in the class members list when a <ph id="ph4">&lt;xref:System.Windows.UIElement&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Event handlers that are attached to these events are attached to the underlying <ph id="ph1">&lt;xref:System.Windows.DragDrop&gt;</ph> attached event and receive the same event data instance.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.UIElement.Drop?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>OLE drag-and-drop does not work while in the Internet zone.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Data Transfer</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Drag-and-drop is part of the more general area of data transfer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Data transfer includes drag-and-drop and copy-and-paste operations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A drag-and-drop operation is analogous to a copy-and-paste or cut-and-paste operation that is used to transfer data from one object or application to another by using the system clipboard.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Both types of operations require:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A source object that provides the data.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A way to temporarily store the transferred data.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A target object that receives the data.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In a copy-and-paste operation, the system clipboard is used to temporarily store the transferred data; in a drag-and-drop operation, a <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> is used to store the data.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Conceptually, a data object consists of one or more pairs of an <ph id="ph1">&lt;xref:System.Object&gt;</ph> that contains the actual data, and a corresponding data format identifier.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The drag source initiates a drag-and-drop operation by calling the static <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A?displayProperty=fullName&gt;</ph> method and passing the transferred data to it.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method will automatically wrap the data in a <ph id="ph2">&lt;xref:System.Windows.DataObject&gt;</ph> if necessary.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For greater control over the data format, you can wrap the data in a <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> before passing it to the <ph id="ph2">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The drop target is responsible for extracting the data from the <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about working with data objects, see <bpt id="p1">[</bpt>Data and Data Objects<ept id="p1">](../../../../docs/framework/wpf/advanced/data-and-data-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The source and target of a drag-and-drop operation are UI elements; however, the data that is actually being transferred typically does not have a visual representation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can write code to provide a visual representation of the data that is dragged, such as occurs when dragging files in Windows Explorer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>By default, feedback is provided to the user by changing the cursor to represent the effect that the drag-and-drop operation will have on the data, such as whether the data will be moved or copied.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Drag-and-Drop Effects</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Drag-and-drop operations can have different effects on the transferred data.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, you can copy the data or you can move the data.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> defines a <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph> enumeration that you can use to specify the effect of a drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the drag source, you can specify the effects that the source will allow in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the drop target, you can specify the effect that the target intends in the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.DragEventArgs&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When the drop target specifies its intended effect in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph> event, that information is passed back to the drag source in the <ph id="ph2">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The drag source uses this information to inform the user what effect the drop target intends to have on the data.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When the data is dropped, the drop target specifies its actual effect in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>That information is passed back to the drag source as the return value of the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the drop target returns an effect that is not in the drag sources list of <ph id="ph1">`allowedEffects`</ph>, the drag-and-drop operation is cancelled without any data transfer occurring.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It is important to remember that in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph> values are only used to provide communication between the drag source and the drop target regarding the effects of the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The actual effect of the drag-and-drop operation depends on you to write the appropriate code in your application.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, the drop target might specify that the effect of dropping data on it is to move the data.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>However, to move the data, it must be both added to the target element and removed from the source element.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The source element might indicate that it allows moving the data, but if you do not provide the code to remove the data from the source element, the end result will be that the data is copied, and not moved.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Drag-and-Drop Events</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Drag-and-drop operations support an event driven model.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Both the drag source and the drop target use a standard set of events to handle drag-and-drop operations.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following tables summarize the standard drag-and-drop events.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These are attached events on the <ph id="ph1">&lt;xref:System.Windows.DragDrop&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information about attached events, see <bpt id="p1">[</bpt>Attached Events Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/attached-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Drag Source Events</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Event</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This event occurs continuously during a drag-and-drop operation, and enables the drop source to give feedback information to the user.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This feedback is commonly given by changing the appearance of the mouse pointer to indicate the effects allowed by the drop target.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This is a bubbling event.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This event occurs when there is a change in the keyboard or mouse button states during a drag-and-drop operation, and enables the drop source to cancel the drag-and-drop operation depending on the key/button states.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This is a bubbling event.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Tunneling version of <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Tunneling version of <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Drop Target Events</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Event</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This event occurs when an object is dragged into the drop target's boundary.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is a bubbling event.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This event occurs when an object is dragged out of the drop target's boundary.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This is a bubbling event.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This event occurs continuously while an object is dragged (moved) within the drop target's boundary.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is a bubbling event.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This event occurs when an object is dropped on the drop target.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is a bubbling event.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Tunneling version of <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Tunneling version of <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Tunneling version of <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Tunneling version of <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To handle drag-and-drop events for instances of an object, add handlers for the events listed in the preceding tables.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To handle drag-and-drop events at the class level, override the corresponding virtual On*Event and On<ph id="ph1">\*</ph>PreviewEvent methods.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Class Handling of Routed Events by Control Base Classes<ept id="p1">](../../../../docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md#Class_Handling_of_Routed_Events)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Implementing Drag-and-Drop</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A UI element can be a drag source, a drop target, or both.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To implement basic drag-and-drop, you write code to initiate the drag-and-drop operation and to process the dropped data.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can enhance the drag-and-drop experience by handling optional drag-and-drop events.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To implement basic drag-and-drop, you will complete the following tasks:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Identify the element that will be a drag source.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A drag source can be a <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Create an event handler on the drag source that will initiate the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The event is typically the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the drag source event handler, call the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method to initiate the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> call, specify the drag source, the data to be transferred, and the allowed effects.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Identify the element that will be a drop target.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A drop target can be <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>On the drop target, set the <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In the drop target, create a <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event handler to process the dropped data.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event handler, extract the data from the <ph id="ph2">&lt;xref:System.Windows.DragEventArgs&gt;</ph> by using the <ph id="ph3">&lt;xref:System.Windows.DataObject.GetDataPresent%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event handler, use the data to perform the desired drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can enhance your drag-and-drop implementation by creating a custom <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> and by handling optional drag source and drop target events, as shown in the following tasks:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To transfer custom data or multiple data items, create a <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> to pass to the <ph id="ph2">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To perform additional actions during a drag, handle the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.DragDrop.DragLeave&gt;</ph> events on the drop target.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To change the appearance of the mouse pointer, handle the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph> event on the drag source.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To change how the drag-and-drop operation is canceled, handle the <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag&gt;</ph> event on the drag source.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Drag-and-Drop Example</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This section describes how to implement drag-and-drop for an <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> is both a drag source and a drop target.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The transferred data is the string representation of the ellipse’s <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following XAML shows the <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> element and the drag-and-drop related events that it handles.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For complete steps on how to implement drag-and-drop, see <bpt id="p1">[</bpt>Walkthrough: Enabling Drag and Drop on a User Control<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-enabling-drag-and-drop-on-a-user-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DragDropSnippets#EllipseXaml<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/dragdropsnippets/cs/mainwindow.xaml#ellipsexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Enabling an Element to be a Drag Source</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An object that is a drag source is responsible for:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Identifying when a drag occurs.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Initiating the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Identifying the data to be transferred.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Specifying the effects that the drag-and-drop operation is allowed to have on the transferred data.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The drag source may also give feedback to the user regarding the allowed actions (move, copy, none), and can cancel the drag-and-drop operation based on additional user input, such as pressing the ESC key during the drag.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It is the responsibility of your application to determine when a drag occurs, and then initiate the drag-and-drop operation by calling the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Typically, this is when a <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event occurs over the element to be dragged while a mouse button is pressed.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The following example shows how to initiate a drag-and-drop operation from the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event handler of an <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> element to make it a drag source.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The transferred data is the string representation of the ellipse’s <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropSnippets#DoDragDrop<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/dragdropsnippets/cs/mainwindow.xaml.cs#dodragdrop)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropSnippets#DoDragDrop<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/dragdropsnippets/vb/mainwindow.xaml.vb#dodragdrop)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Inside of the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event handler, call the <ph id="ph2">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method to initiate the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method takes three parameters:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`dragSource`</ph> – A reference to the dependency object that is the source of the transferred data; this is typically the source of the <ph id="ph2">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`data`</ph> - An object that contains the transferred data, wrapped in a <ph id="ph2">&lt;xref:System.Windows.DataObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`allowedEffects`</ph> - One of the <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph> enumeration values that specifies the permitted effects of the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Any serializable object can be passed in the <ph id="ph1">`data`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If the data is not already wrapped in a <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph>, it will automatically be wrapped in a new <ph id="ph2">&lt;xref:System.Windows.DataObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To pass multiple data items, you must create the <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> yourself, and pass it to the <ph id="ph2">&lt;xref:System.Windows.DragDrop.DoDragDrop%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data and Data Objects<ept id="p1">](../../../../docs/framework/wpf/advanced/data-and-data-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`allowedEffects`</ph> parameter is used to specify what the drag source will allow the drop target to do with the transferred data.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The common values for a drag source are <ph id="ph1">&lt;xref:System.Windows.DragDropEffects&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The drop target is also able to specify what effects it intends in response to the dropped data.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, if the drop target does not recognize the data type to be dropped, it can refuse the data by setting its allowed effects to <ph id="ph1">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It typically does this in its <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A drag source can optionally handle the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.DragDrop.QueryContinueDrag&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>These events have default handlers that are used unless you mark the events as handled.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>You will typically ignore these events unless you have a specific need to change their default behavior.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph> event is raised continuously while the drag source is being dragged.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The default handler for this event checks whether the drag source is over a valid drop target.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If it is, it checks the allowed effects of the drop target.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>It then gives feedback to the end user regarding the allowed drop effects.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This is typically done by changing the mouse cursor to a no-drop, copy, or move cursor.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You should only handle this event if you need to use custom cursors to provide feedback to the user.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you handle this event, be sure to mark it as handled so that the default handler does not override your handler.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.QueryContinueDrag&gt;</ph> event is raised continuously while the drag source is being dragged.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can handle this event to determine what action ends the drag-and-drop operation based on the state of the ESC, SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The default handler for this event cancels the drag-and-drop operation if the ESC key is pressed, and drops the data if the mouse button is released.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>These events are raised continuously during the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Therefore, you should avoid resource-intensive tasks in the event handlers.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For example, use a cached cursor instead of creating a new cursor each time the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Enabling an Element to be a Drop Target</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>An object that is a drop target is responsible for:</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Specifying that it is a valid drop target.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Responding to the drag source when it drags over the target.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Checking that the transferred data is in a format that it can receive.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Processing the dropped data.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>To specify that an element is a drop target, you set its <ph id="ph1">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The drop target events will then be raised on the element so that you can handle them.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>During a drag-and-drop operation, the following sequence of events occurs on the drop target:</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph> event occurs when the data is dragged into the drop target's boundary.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You typically handle this event to provide a preview of the effects of the drag-and-drop operation, if appropriate for your application.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Do not set the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A?displayProperty=fullName&gt;</ph> property in the <ph id="ph2">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph> event, as it will be overwritten in the <ph id="ph3">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph> event handler for an <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This code previews the effects of the drag-and-drop operation by saving the current <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> brush.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetDataPresent%2A&gt;</ph> method to check whether the <ph id="ph2">&lt;xref:System.Windows.DataObject&gt;</ph> being dragged over the ellipse contains string data that can be converted to a <ph id="ph3">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If so, the data is extracted using the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>It is then converted to a <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> and applied to the ellipse.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The change is reverted in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>If the data cannot be converted to a <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>, no action is performed.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropSnippets#DragEnter<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/dragdropsnippets/cs/mainwindow.xaml.cs#dragenter)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropSnippets#DragEnter<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/dragdropsnippets/vb/mainwindow.xaml.vb#dragenter)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph> event occurs continuously while the data is dragged over the drop target.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>This event is paired with the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph> event on the drag source.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph> event handler, you typically use the <ph id="ph2">&lt;xref:System.Windows.DataObject.GetDataPresent%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> methods to check whether the transferred data is in a format that the drop target can process.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You can also check whether any modifier keys are pressed, which will typically indicate whether the user intends a move or copy action.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>After these checks are performed, you set the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A?displayProperty=fullName&gt;</ph> property to notify the drag source what effect dropping the data will have.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The drag source receives this information in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.GiveFeedback&gt;</ph> event args, and can set an appropriate cursor to give feedback to the user.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragOver&gt;</ph> event handler for an <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This code checks to see if the <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> being dragged over the ellipse contains string data that can be converted to a <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If so, it sets the <ph id="ph1">&lt;xref:System.Windows.DragEventArgs.Effects%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>This indicates to the drag source that the data can be copied to the ellipse.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If the data cannot be converted to a <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.DragEventArgs.Effects%2A?displayProperty=fullName&gt;</ph> property is set to <ph id="ph3">&lt;xref:System.Windows.DragDropEffects&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>This indicates to the drag source that the ellipse is not a valid drop target for the data.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropSnippets#DragOver<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/dragdropsnippets/cs/mainwindow.xaml.cs#dragover)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropSnippets#DragOver<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/dragdropsnippets/vb/mainwindow.xaml.vb#dragover)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave&gt;</ph> event occurs when the data is dragged out of the target's boundary without being dropped.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You handle this event to undo anything that you did in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragLeave&gt;</ph> event handler for an <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This code undoes the preview performed in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph> event handler by applying the saved <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph> to the ellipse.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropSnippets#DragLeave<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/dragdropsnippets/cs/mainwindow.xaml.cs#dragleave)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropSnippets#DragLeave<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/dragdropsnippets/vb/mainwindow.xaml.vb#dragleave)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event occurs when the data is dropped over the drop target; by default, this happens when the mouse button is released.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event handler, you use the <ph id="ph2">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> method to extract the transferred data from the <ph id="ph3">&lt;xref:System.Windows.DataObject&gt;</ph> and perform any data processing that your application requires.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event ends the drag-and-drop operation.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Windows.DragDrop.Drop&gt;</ph> event handler for an <ph id="ph2">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This code applies the effects of the drag-and-drop operation, and is similar to the code in the <ph id="ph1">&lt;xref:System.Windows.DragDrop.DragEnter&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>It checks to see if the <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> being dragged over the ellipse contains string data that can be converted to a <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>If so, the <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> is applied to the ellipse.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>If the data cannot be converted to a <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>, no action is performed.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDropSnippets#Drop<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/dragdropsnippets/cs/mainwindow.xaml.cs#drop)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDropSnippets#Drop<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/dragdropsnippets/vb/mainwindow.xaml.vb#drop)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Clipboard&gt;</ph></source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Enabling Drag and Drop on a User Control<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-enabling-drag-and-drop-on-a-user-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/advanced/drag-and-drop-how-to-topics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Drag and Drop<ept id="p1">](../../../../docs/framework/wpf/advanced/drag-and-drop.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>