{"content":"---\ntitle: \"Skip While Clause (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.QuerySkipWhile\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"Skip While statement\"\n  - \"Skip While clause\"\n  - \"queries [Visual Basic], Skip While\"\nms.assetid: 5dee8350-7520-4f1a-b00d-590cacd572d6\ncaps.latest.revision: 16\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Skip While Clause (Visual Basic)\nBypasses elements in a collection as long as a specified condition is `true` and then returns the remaining elements.  \n  \n## Syntax  \n  \n```  \nSkip While expression  \n```  \n  \n## Parts  \n  \n|Term|Definition|  \n|---|---|  \n|`expression`|Required. An expression that represents a condition to test elements for. The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`.|  \n  \n## Remarks  \n The `Skip While` clause bypasses elements from the beginning of a query result until the supplied `expression` returns `false`. After `expression` returns `false`, the query returns all the remaining elements. The `expression` is ignored for the remaining results.  \n  \n The `Skip While` clause differs from the `Where` clause in that the `Where` clause can be used to exclude all elements from a query that do not meet a particular condition. The `Skip While` clause excludes elements only until the first time that the condition is not satisfied. The `Skip While` clause is most useful when you are working with an ordered query result.  \n  \n You can bypass a specific number of results from the beginning of a query result by using the `Skip` clause.  \n  \n## Example  \n The following code example uses the `Skip While` clause to bypass results until the first customer from the United States is found.  \n  \n [!code-vb[VbSimpleQuerySamples#3](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/skip-while-clause_1.vb)]  \n  \n## See Also  \n [Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)   \n [Queries](../../../visual-basic/language-reference/queries/queries.md)   \n [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md)   \n [From Clause](../../../visual-basic/language-reference/queries/from-clause.md)   \n [Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md)   \n [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md)   \n [Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)","nodes":[{"pos":[12,61],"content":"Skip While Clause (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Skip While Clause (Visual Basic) | Microsoft Docs","pos":[0,49]}]},{"pos":[673,705],"content":"Skip While Clause (Visual Basic)","linkify":"Skip While Clause (Visual Basic)","nodes":[{"content":"Skip While Clause (Visual Basic)","pos":[0,32]}]},{"pos":[706,823],"content":"Bypasses elements in a collection as long as a specified condition is <ph id=\"ph1\">`true`</ph> and then returns the remaining elements.","source":"Bypasses elements in a collection as long as a specified condition is `true` and then returns the remaining elements."},{"pos":[832,838],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[886,891],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Term","pos":[898,902]},{"content":"Definition","pos":[903,913]},{"content":"Required.","pos":[943,952]},{"content":"An expression that represents a condition to test elements for.","pos":[953,1016]},{"content":"The expression must return a <ph id=\"ph1\">`Boolean`</ph> value or a functional equivalent, such as an <ph id=\"ph2\">`Integer`</ph> to be evaluated as a <ph id=\"ph3\">`Boolean`</ph>.","pos":[1017,1142],"source":" The expression must return a `Boolean` value or a functional equivalent, such as an `Integer` to be evaluated as a `Boolean`."},{"pos":[1152,1159],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause bypasses elements from the beginning of a query result until the supplied <ph id=\"ph2\">`expression`</ph> returns <ph id=\"ph3\">`false`</ph>.","pos":[1163,1290],"source":"The `Skip While` clause bypasses elements from the beginning of a query result until the supplied `expression` returns `false`."},{"content":"After <ph id=\"ph1\">`expression`</ph> returns <ph id=\"ph2\">`false`</ph>, the query returns all the remaining elements.","pos":[1291,1372],"source":" After `expression` returns `false`, the query returns all the remaining elements."},{"content":"The <ph id=\"ph1\">`expression`</ph> is ignored for the remaining results.","pos":[1373,1427],"source":" The `expression` is ignored for the remaining results."},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause differs from the <ph id=\"ph2\">`Where`</ph> clause in that the <ph id=\"ph3\">`Where`</ph> clause can be used to exclude all elements from a query that do not meet a particular condition.","pos":[1434,1606],"source":"The `Skip While` clause differs from the `Where` clause in that the `Where` clause can be used to exclude all elements from a query that do not meet a particular condition."},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause excludes elements only until the first time that the condition is not satisfied.","pos":[1607,1711],"source":" The `Skip While` clause excludes elements only until the first time that the condition is not satisfied."},{"content":"The <ph id=\"ph1\">`Skip While`</ph> clause is most useful when you are working with an ordered query result.","pos":[1712,1801],"source":" The `Skip While` clause is most useful when you are working with an ordered query result."},{"pos":[1808,1916],"content":"You can bypass a specific number of results from the beginning of a query result by using the <ph id=\"ph1\">`Skip`</ph> clause.","source":"You can bypass a specific number of results from the beginning of a query result by using the `Skip` clause."},{"pos":[1925,1932],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[1936,2067],"content":"The following code example uses the <ph id=\"ph1\">`Skip While`</ph> clause to bypass results until the first customer from the United States is found.","source":"The following code example uses the `Skip While` clause to bypass results until the first customer from the United States is found."},{"pos":[2074,2205],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbSimpleQuerySamples#3<ept id=\"p2\">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/skip-while-clause_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbSimpleQuerySamples#3](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/skip-while-clause_1.vb)]"},{"pos":[2214,2222],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Introduction to LINQ in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id=\"ph1\"> </ph>","pos":[2226,2353],"source":"[Introduction to LINQ in Visual Basic](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Queries<ept id=\"p1\">](../../../visual-basic/language-reference/queries/queries.md)</ept><ph id=\"ph1\"> </ph>","pos":[2356,2428],"source":" [Queries](../../../visual-basic/language-reference/queries/queries.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Select Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2431,2515],"source":" [Select Clause](../../../visual-basic/language-reference/queries/select-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>From Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/from-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2518,2598],"source":" [From Clause](../../../visual-basic/language-reference/queries/from-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Skip Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/skip-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2601,2681],"source":" [Skip Clause](../../../visual-basic/language-reference/queries/skip-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Take While Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/take-while-clause.md)</ept><ph id=\"ph1\"> </ph>","pos":[2684,2776],"source":" [Take While Clause](../../../visual-basic/language-reference/queries/take-while-clause.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Where Clause<ept id=\"p1\">](../../../visual-basic/language-reference/queries/where-clause.md)</ept>","pos":[2779,2860],"source":" [Where Clause](../../../visual-basic/language-reference/queries/where-clause.md)"}]}