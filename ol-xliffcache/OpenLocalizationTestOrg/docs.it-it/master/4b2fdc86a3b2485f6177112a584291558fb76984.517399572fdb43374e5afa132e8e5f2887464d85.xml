{"content":"---\ntitle: Local functions vs. lambda expressions \ndescription: Why Local Functions might be a better choice than Lambda Expressions    \nkeywords: C#, .NET, .NET Core, Latest Features, What's New, local functions, lambda expressions\nauthor: BillWagner\nms.author: wiwagn\n\nms.date: 10/27/2016\nms.topic: article\nms.prod: visual-studio-dev-15\nms.technology: devlang-csharp\nms.devlang: csharp\nms.assetid: 368d1752-3659-489a-97b4-f15d87e49ae3\n---\n\n### Local functions compared to Lambda expressions\n\nIn some use cases, you could create a lambda expression and use it\nwithout needing to create a local function. Here's an example async\nmethod that does just that:\n\n[!code-csharp[TaskLambdaExample](../../samples/snippets/csharp/new-in-7/AsyncWork.cs#36_TaskLambdaExample \"Task returning method with lambda expression\")]\n\nHowever, there are a number of reasons to prefer using local functions\ninstead of defining and calling lambda expressions.\n\nFirst, for lambda expressions, the compiler must create an anonymous class\nand an instance of that class to store any variables captured by the\nclosure. The closure for this lambda expression contains the `address`,\n`index` and `name` variables. \n\nSecond, lambda expressions are implemented by instantiating a delegate\nand invoking that delegate. Local functions are implemented as method calls.\nThe instantiation necessary for lambda expressions means extra memory\nallocations, which may be a performance factor in time critical code paths.\nLocal functions do not incur this overhead.\n\nThird, local functions can be called before they are defined. Lambda\nexpressions must be declared before they are defined. This\nmeans local functions are easier to use in recursive algorithms:\n\n[!code-csharp[LocalFunctionFactorial](../../samples/snippets/csharp/new-in-7/MathUtilities.cs#37_LocalFunctionFactorial \"Recursive factorial using local function\")]\n\nContrast that implementation with a version that uses lambda expressions:\n\n[!code-csharp[26_LambdaFactorial](../../samples/snippets/csharp/new-in-7/MathUtilities.cs#38_LambdaFactorial \"Recursive factorial using lambda expressions\")]\n\nNotice that the version using the lambda expression must declare and initialize\nthe lambda expression, `nthFactorial` before defining it. Not doing so results\nin a compile time error for referencing `nthFactorial` before assigning it.\nRecursive algorithms are easier to create using local functions. \n\nWhile local functions may seem redundant to lambda expressions,\nthey actually serve different purposes and have different uses.\nLocal functions are more efficient for the case when you want\nto write a function that is called only from the context of\nanother method.\n\n","nodes":[{"pos":[11,49],"content":"Local functions vs. lambda expressions","needQuote":true,"needEscape":true,"nodes":[{"content":"Local functions vs. lambda expressions","pos":[0,38]}]},{"pos":[64,132],"content":"Why Local Functions might be a better choice than Lambda Expressions","needQuote":true,"needEscape":true,"nodes":[{"content":"Why Local Functions might be a better choice than Lambda Expressions","pos":[0,68]}]},{"pos":[147,232],"content":"C#, .NET, .NET Core, Latest Features, What's New, local functions, lambda expressions","needQuote":true,"needEscape":true,"nodes":[{"content":"C#, .NET, .NET Core, Latest Features, What's New, local functions, lambda expressions","pos":[0,85]}]},{"pos":[446,492],"content":"Local functions compared to Lambda expressions","linkify":"Local functions compared to Lambda expressions","nodes":[{"content":"Local functions compared to Lambda expressions","pos":[0,46]}]},{"content":"In some use cases, you could create a lambda expression and use it without needing to create a local function.","pos":[494,604],"source":"In some use cases, you could create a lambda expression and use it\nwithout needing to create a local function."},{"content":"Here's an example async method that does just that:","pos":[605,656],"source":" Here's an example async\nmethod that does just that:"},{"pos":[658,812],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TaskLambdaExample<ept id=\"p2\">]</ept><bpt id=\"p3\">(../../samples/snippets/csharp/new-in-7/AsyncWork.cs#36_TaskLambdaExample \"</bpt>Task returning method with lambda expression<ept id=\"p3\">\")</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[TaskLambdaExample](../../samples/snippets/csharp/new-in-7/AsyncWork.cs#36_TaskLambdaExample \"Task returning method with lambda expression\")]"},{"pos":[814,936],"content":"However, there are a number of reasons to prefer using local functions instead of defining and calling lambda expressions.","source":"However, there are a number of reasons to prefer using local functions\ninstead of defining and calling lambda expressions."},{"content":"First, for lambda expressions, the compiler must create an anonymous class and an instance of that class to store any variables captured by the closure.","pos":[938,1090],"source":"First, for lambda expressions, the compiler must create an anonymous class\nand an instance of that class to store any variables captured by the\nclosure."},{"content":"The closure for this lambda expression contains the <ph id=\"ph1\">`address`</ph>, <ph id=\"ph2\">`index`</ph> and <ph id=\"ph3\">`name`</ph> variables.","pos":[1091,1183],"source":" The closure for this lambda expression contains the `address`,\n`index` and `name` variables."},{"content":"Second, lambda expressions are implemented by instantiating a delegate and invoking that delegate.","pos":[1186,1284],"source":"Second, lambda expressions are implemented by instantiating a delegate\nand invoking that delegate."},{"content":"Local functions are implemented as method calls.","pos":[1285,1333]},{"content":"The instantiation necessary for lambda expressions means extra memory allocations, which may be a performance factor in time critical code paths.","pos":[1334,1479],"source":"\nThe instantiation necessary for lambda expressions means extra memory\nallocations, which may be a performance factor in time critical code paths."},{"content":"Local functions do not incur this overhead.","pos":[1480,1523],"source":"\nLocal functions do not incur this overhead."},{"content":"Third, local functions can be called before they are defined.","pos":[1525,1586]},{"content":"Lambda expressions must be declared before they are defined.","pos":[1587,1647],"source":" Lambda\nexpressions must be declared before they are defined."},{"content":"This means local functions are easier to use in recursive algorithms:","pos":[1648,1717],"source":" This\nmeans local functions are easier to use in recursive algorithms:"},{"pos":[1719,1883],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>LocalFunctionFactorial<ept id=\"p2\">]</ept><bpt id=\"p3\">(../../samples/snippets/csharp/new-in-7/MathUtilities.cs#37_LocalFunctionFactorial \"</bpt>Recursive factorial using local function<ept id=\"p3\">\")</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[LocalFunctionFactorial](../../samples/snippets/csharp/new-in-7/MathUtilities.cs#37_LocalFunctionFactorial \"Recursive factorial using local function\")]"},{"content":"Contrast that implementation with a version that uses lambda expressions:","pos":[1885,1958]},{"pos":[1960,2117],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>26_LambdaFactorial<ept id=\"p2\">]</ept><bpt id=\"p3\">(../../samples/snippets/csharp/new-in-7/MathUtilities.cs#38_LambdaFactorial \"</bpt>Recursive factorial using lambda expressions<ept id=\"p3\">\")</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[26_LambdaFactorial](../../samples/snippets/csharp/new-in-7/MathUtilities.cs#38_LambdaFactorial \"Recursive factorial using lambda expressions\")]"},{"content":"Notice that the version using the lambda expression must declare and initialize the lambda expression, <ph id=\"ph1\">`nthFactorial`</ph> before defining it.","pos":[2119,2256],"source":"Notice that the version using the lambda expression must declare and initialize\nthe lambda expression, `nthFactorial` before defining it."},{"content":"Not doing so results in a compile time error for referencing <ph id=\"ph1\">`nthFactorial`</ph> before assigning it.","pos":[2257,2353],"source":" Not doing so results\nin a compile time error for referencing `nthFactorial` before assigning it."},{"content":"Recursive algorithms are easier to create using local functions.","pos":[2354,2418],"source":"\nRecursive algorithms are easier to create using local functions."},{"content":"While local functions may seem redundant to lambda expressions, they actually serve different purposes and have different uses.","pos":[2421,2548],"source":"While local functions may seem redundant to lambda expressions,\nthey actually serve different purposes and have different uses."},{"content":"Local functions are more efficient for the case when you want to write a function that is called only from the context of another method.","pos":[2549,2686],"source":"\nLocal functions are more efficient for the case when you want\nto write a function that is called only from the context of\nanother method."}]}