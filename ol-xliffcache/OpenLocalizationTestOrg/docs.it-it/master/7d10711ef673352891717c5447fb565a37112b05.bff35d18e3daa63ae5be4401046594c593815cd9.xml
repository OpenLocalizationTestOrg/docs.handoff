{"content":"---\ntitle: \"Message Security Certificate | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"WS Security\"\nms.assetid: 909333b3-35ec-48f0-baff-9a50161896f6\ncaps.latest.revision: 51\nauthor: \"BrucePerlerMS\"\nms.author: \"bruceper\"\nmanager: \"mbaldwin\"\n---\n# Message Security Certificate\nThis sample demonstrates how to implement an application that uses WS-Security with X.509 v3 certificate authentication for the client and requires server authentication using the server's X.509 v3 certificate. This sample uses default settings such that all application messages between the client and server are signed and encrypted. This sample is based on the [WSHttpBinding](../../../../docs/framework/wcf/samples/wshttpbinding.md) and consists of a client console program and a service library hosted by Internet Information Services (IIS). The service implements a contract that defines a request-reply communication pattern.  \n  \n> [!NOTE]\n>  The setup procedure and build instructions for this sample are located at the end of this topic.  \n  \n The sample demonstrates controlling authentication by using configuration and how to obtain the callerâ€™s identity from the security context, as shown in the following sample code.  \n  \n```  \npublic class CalculatorService : ICalculator  \n{  \n    public string GetCallerIdentity()  \n    {  \n        // The client certificate is not mapped to a Windows identity by default.  \n        // ServiceSecurityContext.PrimaryIdentity is populated based on the information  \n        // in the certificate that the client used to authenticate itself to the service.  \n        return ServiceSecurityContext.Current.PrimaryIdentity.Name;  \n    }  \n    ...  \n}  \n```  \n  \n The service exposes one endpoint for communicating with the service and one endpoint for exposing the service's WSDL document using the WS-MetadataExchange protocol, defined by using the configuration file (Web.config). The endpoint consists of an address, a binding, and a contract. The binding is configured with a standard [\\<wsHttpBinding>](../../../../docs/framework/configure-apps/file-schema/wcf/wshttpbinding.md) element, which defaults to using message security. This sample sets the `clientCredentialType` attribute to Certificate to require client authentication.  \n  \n```  \n<system.serviceModel>  \n    <protocolMapping>  \n      <add scheme=\"http\" binding=\"wsHttpBinding\"/>  \n    </protocolMapping>  \n    <bindings>  \n      <wsHttpBinding>  \n        <!--   \n        This configuration defines the security mode as Message and   \n        the clientCredentialType as Certificate.  \n        -->  \n        <binding>  \n          <security mode =\"Message\">  \n            <message clientCredentialType=\"Certificate\" />  \n          </security>  \n        </binding>  \n      </wsHttpBinding>  \n    </bindings>  \n    <!--For debugging purposes set the includeExceptionDetailInFaults attribute to true-->  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior>  \n          <serviceMetadata httpGetEnabled=\"True\"/>  \n          <serviceDebug includeExceptionDetailInFaults=\"False\" />  \n          <!--   \n        The serviceCredentials behavior allows one to define a service certificate.  \n        A service certificate is used by the service to authenticate itself to its clients and to provide message protection.  \n        This configuration references the \"localhost\" certificate installed during the setup instructions.  \n        -->  \n          <serviceCredentials>  \n            <serviceCertificate findValue=\"localhost\" storeLocation=\"LocalMachine\" storeName=\"My\" x509FindType=\"FindBySubjectName\" />  \n            <clientCertificate>  \n              <!--   \n            Setting the certificateValidationMode to PeerOrChainTrust means that if the certificate   \n            is in the user's Trusted People store, then it will be trusted without performing a  \n            validation of the certificate's issuer chain. This setting is used here for convenience so that the   \n            sample can be run without having to have certificates issued by a certification authority (CA).  \n            This setting is less secure than the default, ChainTrust. The security implications of this   \n            setting should be carefully considered before using PeerOrChainTrust in production code.   \n            -->  \n              <authentication certificateValidationMode=\"PeerOrChainTrust\" />  \n            </clientCertificate>  \n          </serviceCredentials>  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n  </system.serviceModel>  \n  \n```  \n  \n The behavior specifies the service's credentials that are used when the client authenticates the service. The server certificate subject name is specified in the `findValue` attribute in the [\\<serviceCredentials>](../../../../docs/framework/configure-apps/file-schema/wcf/servicecredentials.md) element.  \n  \n```  \n<!--For debugging purposes, set the includeExceptionDetailInFaults attribute to true.-->  \n<behaviors>  \n      <serviceBehaviors>  \n        <behavior>  \n          <serviceMetadata httpGetEnabled=\"True\"/>  \n          <serviceDebug includeExceptionDetailInFaults=\"False\" />  \n          <!--   \n        The serviceCredentials behavior allows one to define a service certificate.  \n        A service certificate is used by the service to authenticate itself to its clients and to provide message protection.  \n        This configuration references the \"localhost\" certificate installed during the setup instructions.  \n        -->  \n          <serviceCredentials>  \n            <serviceCertificate findValue=\"localhost\" storeLocation=\"LocalMachine\" storeName=\"My\" x509FindType=\"FindBySubjectName\" />  \n            <clientCertificate>  \n              <!--   \n            Setting the certificateValidationMode to PeerOrChainTrust means that if the certificate   \n            is in the user's Trusted People store, then it will be trusted without performing a  \n            validation of the certificate's issuer chain. This setting is used here for convenience so that the   \n            sample can be run without having to have certificates issued by a certification authority (CA).  \n            This setting is less secure than the default, ChainTrust. The security implications of this   \n            setting should be carefully considered before using PeerOrChainTrust in production code.   \n            -->  \n              <authentication certificateValidationMode=\"PeerOrChainTrust\" />  \n            </clientCertificate>  \n          </serviceCredentials>  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n  \n```  \n  \n The client endpoint configuration consists of an absolute address for the service endpoint, the binding, and the contract. The client binding is configured with the appropriate security mode and authentication mode. When running in a cross-computer scenario, ensure that the service endpoint address is changed accordingly.  \n  \n```  \n<system.serviceModel>  \n    <client>  \n      <!-- Use a behavior to configure the client certificate to present to the service. -->  \n      <endpoint address=\"http://localhost/servicemodelsamples/service.svc\" binding=\"wsHttpBinding\" bindingConfiguration=\"Binding1\" behaviorConfiguration=\"ClientCertificateBehavior\" contract=\"Microsoft.Samples.Certificate.ICalculator\"/>  \n    </client>  \n  \n    <bindings>  \n      <wsHttpBinding>  \n        <!--   \n        This configuration defines the security mode as Message and   \n        the clientCredentialType as Certificate.  \n        -->  \n        <binding name=\"Binding1\">  \n          <security mode=\"Message\">  \n            <message clientCredentialType=\"Certificate\"/>  \n          </security>  \n        </binding>  \n      </wsHttpBinding>  \n    </bindings>  \n...  \n</system.serviceModel>  \n  \n```  \n  \n The client implementation can set the certificate to use, either through the configuration file or through code. The following sample shows how to set the certificate to use in the configuration file.  \n  \n```  \n<system.serviceModel>  \n  ...  \n  \n<behaviors>  \n      <endpointBehaviors>  \n        <behavior name=\"ClientCertificateBehavior\">  \n          <!--   \n        The clientCredentials behavior allows one to define a certificate to present to a service.  \n        A certificate is used by a client to authenticate itself to the service and provide message integrity.  \n        This configuration references the \"client.com\" certificate installed during the setup instructions.  \n        -->  \n          <clientCredentials>  \n            <clientCertificate findValue=\"client.com\" storeLocation=\"CurrentUser\" storeName=\"My\" x509FindType=\"FindBySubjectName\"/>  \n            <serviceCertificate>  \n              <!--   \n            Setting the certificateValidationMode to PeerOrChainTrust means that if the certificate   \n            is in the user's Trusted People store, then it will be trusted without performing a  \n            validation of the certificate's issuer chain. This setting is used here for convenience so that the   \n            sample can be run without having to have certificates issued by a certificate authority (CA).  \n            This setting is less secure than the default, ChainTrust. The security implications of this   \n            setting should be carefully considered before using PeerOrChainTrust in production code.   \n            -->  \n              <authentication certificateValidationMode=\"PeerOrChainTrust\"/>  \n            </serviceCertificate>  \n          </clientCredentials>  \n        </behavior>  \n      </endpointBehaviors>  \n    </behaviors>  \n  \n</system.serviceModel>  \n  \n```  \n  \n The following sample shows how to call the service in your program.  \n  \n```  \n// Create a client.  \nCalculatorClient client = new CalculatorClient();  \n  \n// Call the GetCallerIdentity service operation.  \nConsole.WriteLine(client.GetCallerIdentity());  \n...  \n//Closing the client gracefully closes the connection and cleans up resources.  \nclient.Close();  \n```  \n  \n When you run the sample, the operation requests and responses are displayed in the client console window. Press ENTER in the client window to shut down the client.  \n  \n```  \nCN=client.com  \nAdd(100,15.99) = 115.99  \nSubtract(145,76.54) = 68.46  \nMultiply(9,81.25) = 731.25  \nDivide(22,7) = 3.14285714285714  \nPress <ENTER> to terminate client.  \n```  \n  \n The Setup.bat batch file included with the Message Security samples enables you to configure the client and server with relevant certificates to run a hosted application that requires certificate-based security. The batch file can be run in three modes. To run in single-computer mode type **setup.bat** in a Visual Studio Command Prompt ; for service mode type **setup.bat service**; and for client mode type **setup.bat client**. Use the client and server mode when running the sample across computers. See the setup procedure at the end of this topic for details. The following provides a brief overview of the different sections of the batch files so that they can be modified to run in appropriate configuration:  \n  \n-   Creating the client certificate.  \n  \n     The following line in the batch file creates the client certificate. The client name specified is used in the subject name of the certificate created. The certificate is stored in `My` store at the `CurrentUser` store location.  \n  \n    ```  \n    echo ************  \n    echo making client cert  \n    echo ************  \n    makecert.exe -sr CurrentUser -ss MY -a sha1 -n CN=%CLIENT_NAME% -sky exchange -pe  \n    ```  \n  \n-   Installing the client certificate into the serverâ€™s trusted certificate store.  \n  \n     The following line in the batch file copies the client certificate into the server's TrustedPeople store so that the server can make the relevant trust or no-trust decisions. In order for a certificate installed in the TrustedPeople store to be trusted by a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service, the client certificate validation mode must be set to `PeerOrChainTrust` or `PeerTrust`. See the previous service configuration sample to learn how this can be done by using a configuration file.  \n  \n    ```  \n    echo ************  \n    echo copying client cert to server's LocalMachine store  \n    echo ************  \n    certmgr.exe -add -r CurrentUser -s My -c -n %CLIENT_NAME% -r LocalMachine -s TrustedPeople   \n    ```  \n  \n-   Creating the server certificate.  \n  \n     The following lines from the Setup.bat batch file create the server certificate to be used.  \n  \n    ```  \n    echo ************  \n    echo Server cert setup starting  \n    echo %SERVER_NAME%  \n    echo ************  \n    echo making server cert  \n    echo ************  \n    makecert.exe -sr LocalMachine -ss MY -a sha1 -n CN=%SERVER_NAME% -sky exchange -pe  \n    ```  \n  \n     The %SERVER_NAME% variable specifies the server name. The certificate is stored in the LocalMachine store. If the Setup.bat batch file is run with an argument of service (such as, **setup.bat service**) the %SERVER_NAME% contains the fully-qualified domain name of the computer. Otherwise it defaults to localhost.  \n  \n-   Installing the server certificate into the clientâ€™s trusted certificate store.  \n  \n     The following line copies the server certificate into the client trusted people store. This step is required because certificates generated by Makecert.exe are not implicitly trusted by the client system. If you already have a certificate that is rooted in a client trusted root certificateâ€”for example, a Microsoft-issued certificateâ€”this step of populating the client certificate store with the server certificate is not required.  \n  \n    ```  \n    certmgr.exe -add -r LocalMachine -s My -c -n %SERVER_NAME% -r CurrentUser -s TrustedPeople  \n    ```  \n  \n-   Granting permissions on the certificate's private key.  \n  \n     The following lines in the Setup.bat file make the server certificate stored in the LocalMachine store accessible to the [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] worker process account.  \n  \n    ```  \n    echo ************  \n    echo setting privileges on server certificates  \n    echo ************  \n    for /F \"delims=\" %%i in ('\"%ProgramFiles%\\ServiceModelSampleTools\\FindPrivateKey.exe\" My LocalMachine -n CN^=%SERVER_NAME% -a') do set PRIVATE_KEY_FILE=%%i  \n    set WP_ACCOUNT=NT AUTHORITY\\NETWORK SERVICE  \n    (ver | findstr /C:\"5.1\") && set WP_ACCOUNT=%COMPUTERNAME%\\ASPNET  \n    echo Y|cacls.exe \"%PRIVATE_KEY_FILE%\" /E /G \"%WP_ACCOUNT%\":R  \n    iisreset  \n    ```  \n  \n    > [!NOTE]\n    >  If you are using a non-U.S. English edition of Windows, you must edit the Setup.bat file and replace the \"NT AUTHORITY\\NETWORK SERVICE\" account name with your regional equivalent.  \n  \n> [!NOTE]\n>  The tools used in this batch file are located in either C:\\Program Files\\Microsoft Visual Studio 8\\Common7\\tools or C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\bin. One of these directories must be in your system path. If you have Visual Studio installed, the easiest way to get this directory in your path is to open the Visual Studio Command Prompt. Click **Start**, and then select **All Programs**, **Visual Studio 2012**, **Tools**. This command prompt has the appropriate paths already configured. Otherwise you must add the appropriate directory to your path manually.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing:  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory:  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Binding\\WS\\MessageSecurity`  \n  \n### To set up, build, and run the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n### To run the sample on the same computer  \n  \n1.  Open a Visual Studio Command Prompt  with administrator privileges and run Setup.bat from the sample install folder. This installs all the certificates required for running the sample.  \n  \n    > [!NOTE]\n    >  The Setup.bat batch file is designed to be run from a Visual Studio Command Prompt . It requires that the path environment variable point to the directory where the SDK is installed. This environment variable is automatically set within a Visual Studio Command Prompt (2010).  \n  \n2.  Verify access to the service using a browser by entering the address `http://localhost/servicemodelsamples/service.svc`.  \n  \n3.  Launch Client.exe from \\client\\bin. Client activity is displayed on the client console application.  \n  \n4.  If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b).  \n  \n### To run the sample across computers  \n  \n1.  Create a directory on the service computer. Create a virtual application named servicemodelsamples for this directory by using the Internet Information Services (IIS) management tool.  \n  \n2.  Copy the service program files from \\inetpub\\wwwroot\\servicemodelsamples to the virtual directory on the service computer. Ensure that you copy the files in the \\bin subdirectory. Also copy the Setup.bat, Cleanup.bat, and ImportClientCert.bat files to the service computer.  \n  \n3.  Create a directory on the client computer for the client binaries.  \n  \n4.  Copy the client program files to the client directory on the client computer. Also copy the Setup.bat, Cleanup.bat, and ImportServiceCert.bat files to the client.  \n  \n5.  On the server, run **setup.bat service** in a Visual Studio command prompt with administrator privileges. Running **setup.bat** with the **service** argument creates a service certificate with the fully-qualified domain name of the computer and exports the service certificate to a file named Service.cer.  \n  \n6.  Edit Web.config to reflect the new certificate name (in the `findValue` attribute in the [\\<serviceCertificate>](../../../../docs/framework/configure-apps/file-schema/wcf/servicecertificate-of-servicecredentials.md)) which is the same as the fully-qualified domain name of the computer.  \n  \n7.  Copy the Service.cer file from the service directory to the client directory on the client computer.  \n  \n8.  On the client, run **setup.bat client** in a Visual Studio command prompt with administrator privileges. Running **setup.bat** with the **client** argument creates a client certificate named client.com and exports the client certificate to a file named Client.cer.  \n  \n9. In the Client.exe.config file on the client computer, change the address value of the endpoint to match the new address of your service. Do this by replacing localhost with the fully-qualified domain name of the server.  \n  \n10. Copy the Client.cer file from the client directory to the service directory on the server.  \n  \n11. On the client, run ImportServiceCert.bat in a Visual Studio command prompt with administrative privileges. This imports the service certificate from the Service.cer file into the CurrentUser - TrustedPeople store.  \n  \n12. On the server, run ImportClientCert.bat in a Visual Studio command prompt with administrative privileges. This imports the client certificate from the Client.cer file into the LocalMachine - TrustedPeople store.  \n  \n13. On the client computer, launch Client.exe from a command prompt window. If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b).  \n  \n### To clean up after the sample  \n  \n-   Run Cleanup.bat in the samples folder after you have finished running the sample.  \n  \n    > [!NOTE]\n    >  This script does not remove service certificates on a client when running this sample across computers. If you have run [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] samples that use certificates across computers, be sure to clear the service certificates that have been installed in the CurrentUser - TrustedPeople store. To do this, use the following command: `certmgr -del -r CurrentUser -s TrustedPeople -c -n <Fully Qualified Server Machine Name>` For example: `certmgr -del -r CurrentUser -s TrustedPeople -c -n server1.contoso.com`.  \n  \n## See Also","nodes":[{"pos":[12,57],"content":"Message Security Certificate | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Message Security Certificate | Microsoft Docs","pos":[0,45]}]},{"pos":[441,469],"content":"Message Security Certificate","linkify":"Message Security Certificate","nodes":[{"content":"Message Security Certificate","pos":[0,28]}]},{"content":"This sample demonstrates how to implement an application that uses WS-Security with X.509 v3 certificate authentication for the client and requires server authentication using the server's X.509 v3 certificate.","pos":[470,680]},{"content":"This sample uses default settings such that all application messages between the client and server are signed and encrypted.","pos":[681,805]},{"content":"This sample is based on the <bpt id=\"p1\">[</bpt>WSHttpBinding<ept id=\"p1\">](../../../../docs/framework/wcf/samples/wshttpbinding.md)</ept> and consists of a client console program and a service library hosted by Internet Information Services (IIS).","pos":[806,1016],"source":" This sample is based on the [WSHttpBinding](../../../../docs/framework/wcf/samples/wshttpbinding.md) and consists of a client console program and a service library hosted by Internet Information Services (IIS)."},{"content":"The service implements a contract that defines a request-reply communication pattern.","pos":[1017,1102]},{"pos":[1110,1217],"content":"[!NOTE]\n The setup procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The setup procedure and build instructions for this sample are located at the end of this topic.","pos":[9,105]}]},{"content":"The sample demonstrates controlling authentication by using configuration and how to obtain the callerâ€™s identity from the security context, as shown in the following sample code.","pos":[1224,1403]},{"content":"The service exposes one endpoint for communicating with the service and one endpoint for exposing the service's WSDL document using the WS-MetadataExchange protocol, defined by using the configuration file (Web.config).","pos":[1882,2101]},{"content":"The endpoint consists of an address, a binding, and a contract.","pos":[2102,2165]},{"content":"The binding is configured with a standard <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&lt;</ph>wsHttpBinding&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/wshttpbinding.md)</ept> element, which defaults to using message security.","pos":[2166,2353],"source":" The binding is configured with a standard [\\<wsHttpBinding>](../../../../docs/framework/configure-apps/file-schema/wcf/wshttpbinding.md) element, which defaults to using message security."},{"content":"This sample sets the <ph id=\"ph1\">`clientCredentialType`</ph> attribute to Certificate to require client authentication.","pos":[2354,2456],"source":" This sample sets the `clientCredentialType` attribute to Certificate to require client authentication."},{"content":"The behavior specifies the service's credentials that are used when the client authenticates the service.","pos":[4768,4873]},{"content":"The server certificate subject name is specified in the <ph id=\"ph1\">`findValue`</ph> attribute in the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>serviceCredentials&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/servicecredentials.md)</ept> element.","pos":[4874,5072],"source":" The server certificate subject name is specified in the `findValue` attribute in the [\\<serviceCredentials>](../../../../docs/framework/configure-apps/file-schema/wcf/servicecredentials.md) element."},{"content":"The client endpoint configuration consists of an absolute address for the service endpoint, the binding, and the contract.","pos":[6824,6946]},{"content":"The client binding is configured with the appropriate security mode and authentication mode.","pos":[6947,7039]},{"content":"When running in a cross-computer scenario, ensure that the service endpoint address is changed accordingly.","pos":[7040,7147]},{"content":"The client implementation can set the certificate to use, either through the configuration file or through code.","pos":[8009,8121]},{"content":"The following sample shows how to set the certificate to use in the configuration file.","pos":[8122,8209]},{"content":"The following sample shows how to call the service in your program.","pos":[9843,9910]},{"content":"When you run the sample, the operation requests and responses are displayed in the client console window.","pos":[10214,10319]},{"content":"Press ENTER in the client window to shut down the client.","pos":[10320,10377]},{"content":"The Setup.bat batch file included with the Message Security samples enables you to configure the client and server with relevant certificates to run a hosted application that requires certificate-based security.","pos":[10571,10782]},{"content":"The batch file can be run in three modes.","pos":[10783,10824]},{"content":"To run in single-computer mode type <bpt id=\"p1\">**</bpt>setup.bat<ept id=\"p1\">**</ept> in a Visual Studio Command Prompt ; for service mode type <bpt id=\"p2\">**</bpt>setup.bat service<ept id=\"p2\">**</ept>; and for client mode type <bpt id=\"p3\">**</bpt>setup.bat client<ept id=\"p3\">**</ept>.","pos":[10825,11002],"source":" To run in single-computer mode type **setup.bat** in a Visual Studio Command Prompt ; for service mode type **setup.bat service**; and for client mode type **setup.bat client**."},{"content":"Use the client and server mode when running the sample across computers.","pos":[11003,11075]},{"content":"See the setup procedure at the end of this topic for details.","pos":[11076,11137]},{"content":"The following provides a brief overview of the different sections of the batch files so that they can be modified to run in appropriate configuration:","pos":[11138,11288]},{"content":"Creating the client certificate.","pos":[11298,11330]},{"content":"The following line in the batch file creates the client certificate.","pos":[11341,11409]},{"content":"The client name specified is used in the subject name of the certificate created.","pos":[11410,11491]},{"content":"The certificate is stored in <ph id=\"ph1\">`My`</ph> store at the <ph id=\"ph2\">`CurrentUser`</ph> store location.","pos":[11492,11568],"source":" The certificate is stored in `My` store at the `CurrentUser` store location."},{"content":"Installing the client certificate into the serverâ€™s trusted certificate store.","pos":[11767,11845]},{"content":"The following line in the batch file copies the client certificate into the server's TrustedPeople store so that the server can make the relevant trust or no-trust decisions.","pos":[11856,12030]},{"content":"In order for a certificate installed in the TrustedPeople store to be trusted by a <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service, the client certificate validation mode must be set to <ph id=\"ph2\">`PeerOrChainTrust`</ph> or <ph id=\"ph3\">`PeerTrust`</ph>.","pos":[12031,12267],"source":" In order for a certificate installed in the TrustedPeople store to be trusted by a [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service, the client certificate validation mode must be set to `PeerOrChainTrust` or `PeerTrust`."},{"content":"See the previous service configuration sample to learn how this can be done by using a configuration file.","pos":[12268,12374]},{"content":"Creating the server certificate.","pos":[12615,12647]},{"content":"The following lines from the Setup.bat batch file create the server certificate to be used.","pos":[12658,12749]},{"content":"The %SERVER_NAME% variable specifies the server name.","pos":[13037,13090]},{"content":"The certificate is stored in the LocalMachine store.","pos":[13091,13143]},{"content":"If the Setup.bat batch file is run with an argument of service (such as, <bpt id=\"p1\">**</bpt>setup.bat service<ept id=\"p1\">**</ept>) the %SERVER_NAME% contains the fully-qualified domain name of the computer.","pos":[13144,13315],"source":" If the Setup.bat batch file is run with an argument of service (such as, **setup.bat service**) the %SERVER_NAME% contains the fully-qualified domain name of the computer."},{"content":"Otherwise it defaults to localhost.","pos":[13316,13351]},{"content":"Installing the server certificate into the clientâ€™s trusted certificate store.","pos":[13361,13439]},{"content":"The following line copies the server certificate into the client trusted people store.","pos":[13450,13536]},{"content":"This step is required because certificates generated by Makecert.exe are not implicitly trusted by the client system.","pos":[13537,13654]},{"content":"If you already have a certificate that is rooted in a client trusted root certificateâ€”for example, a Microsoft-issued certificateâ€”this step of populating the client certificate store with the server certificate is not required.","pos":[13655,13882]},{"content":"Granting permissions on the certificate's private key.","pos":[14012,14066]},{"pos":[14077,14279],"content":"The following lines in the Setup.bat file make the server certificate stored in the LocalMachine store accessible to the <ph id=\"ph1\">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> worker process account.","source":"The following lines in the Setup.bat file make the server certificate stored in the LocalMachine store accessible to the [!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)] worker process account."},{"pos":[14780,14974],"content":"[!NOTE]\nIf you are using a non-U.S. English edition of Windows, you must edit the Setup.bat file and replace the \"NT AUTHORITY\\NETWORK SERVICE\" account name with your regional equivalent.","leadings":["","    >  "],"nodes":[{"content":"If you are using a non-U.S. English edition of Windows, you must edit the Setup.bat file and replace the \"NT AUTHORITY\\NETWORK SERVICE\" account name with your regional equivalent.","pos":[8,187]}]},{"pos":[14982,15569],"content":"[!NOTE]\n The tools used in this batch file are located in either C:\\Program Files\\Microsoft Visual Studio 8\\Common7\\tools or C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\bin. One of these directories must be in your system path. If you have Visual Studio installed, the easiest way to get this directory in your path is to open the Visual Studio Command Prompt. Click **Start**, and then select **All Programs**, **Visual Studio 2012**, **Tools**. This command prompt has the appropriate paths already configured. Otherwise you must add the appropriate directory to your path manually.","leadings":["","> "],"nodes":[{"content":" The tools used in this batch file are located in either C:\\Program Files\\Microsoft Visual Studio 8\\Common7\\tools or C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\bin. One of these directories must be in your system path. If you have Visual Studio installed, the easiest way to get this directory in your path is to open the Visual Studio Command Prompt. Click **Start**, and then select **All Programs**, **Visual Studio 2012**, **Tools**. This command prompt has the appropriate paths already configured. Otherwise you must add the appropriate directory to your path manually.","pos":[8,585],"nodes":[{"content":"The tools used in this batch file are located in either C:\\Program Files\\Microsoft Visual Studio 8\\Common7\\tools or C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0\\bin.","pos":[1,166]},{"content":"One of these directories must be in your system path.","pos":[167,220]},{"content":"If you have Visual Studio installed, the easiest way to get this directory in your path is to open the Visual Studio Command Prompt.","pos":[221,353]},{"content":"Click <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept>, and then select <bpt id=\"p2\">**</bpt>All Programs<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Visual Studio 2012<ept id=\"p3\">**</ept>, <bpt id=\"p4\">**</bpt>Tools<ept id=\"p4\">**</ept>.","pos":[354,439],"source":" Click **Start**, and then select **All Programs**, **Visual Studio 2012**, **Tools**."},{"content":"This command prompt has the appropriate paths already configured.","pos":[440,505]},{"content":"Otherwise you must add the appropriate directory to your path manually.","pos":[506,577]}]}]},{"pos":[15577,15710],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing:","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your computer. Check for the following (default) directory before continuing:","pos":[13,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[1,55]},{"content":"Check for the following (default) directory before continuing:","pos":[56,118]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[15764,16090],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory:","pos":[16091,16141]},{"pos":[16231,16267],"content":"To set up, build, and run the sample","linkify":"To set up, build, and run the sample","nodes":[{"content":"To set up, build, and run the sample","pos":[0,36]}]},{"pos":[16277,16476],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[16486,16695],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[16705,16743],"content":"To run the sample on the same computer","linkify":"To run the sample on the same computer","nodes":[{"content":"To run the sample on the same computer","pos":[0,38]}]},{"content":"Open a Visual Studio Command Prompt  with administrator privileges and run Setup.bat from the sample install folder.","pos":[16753,16869]},{"content":"This installs all the certificates required for running the sample.","pos":[16870,16937]},{"pos":[16949,17239],"content":"[!NOTE]\nThe Setup.bat batch file is designed to be run from a Visual Studio Command Prompt . It requires that the path environment variable point to the directory where the SDK is installed. This environment variable is automatically set within a Visual Studio Command Prompt (2010).","leadings":["","    >  "],"nodes":[{"content":"The Setup.bat batch file is designed to be run from a Visual Studio Command Prompt . It requires that the path environment variable point to the directory where the SDK is installed. This environment variable is automatically set within a Visual Studio Command Prompt (2010).","pos":[8,283],"nodes":[{"content":"The Setup.bat batch file is designed to be run from a Visual Studio Command Prompt .","pos":[0,84]},{"content":"It requires that the path environment variable point to the directory where the SDK is installed.","pos":[85,182]},{"content":"This environment variable is automatically set within a Visual Studio Command Prompt (2010).","pos":[183,275]}]}]},{"pos":[17249,17369],"content":"Verify access to the service using a browser by entering the address <ph id=\"ph1\">`http://localhost/servicemodelsamples/service.svc`</ph>.","source":"Verify access to the service using a browser by entering the address `http://localhost/servicemodelsamples/service.svc`."},{"content":"Launch Client.exe from \\client\\bin.","pos":[17379,17414]},{"content":"Client activity is displayed on the client console application.","pos":[17415,17478]},{"pos":[17488,17640],"content":"If the client and service are not able to communicate, see <bpt id=\"p1\">[</bpt>Troubleshooting Tips<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)</ept>.","source":"If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)."},{"pos":[17650,17684],"content":"To run the sample across computers","linkify":"To run the sample across computers","nodes":[{"content":"To run the sample across computers","pos":[0,34]}]},{"content":"Create a directory on the service computer.","pos":[17694,17737]},{"content":"Create a virtual application named servicemodelsamples for this directory by using the Internet Information Services (IIS) management tool.","pos":[17738,17877]},{"content":"Copy the service program files from \\inetpub\\wwwroot\\servicemodelsamples to the virtual directory on the service computer.","pos":[17887,18009]},{"content":"Ensure that you copy the files in the \\bin subdirectory.","pos":[18010,18066]},{"content":"Also copy the Setup.bat, Cleanup.bat, and ImportClientCert.bat files to the service computer.","pos":[18067,18160]},{"content":"Create a directory on the client computer for the client binaries.","pos":[18170,18236]},{"content":"Copy the client program files to the client directory on the client computer.","pos":[18246,18323]},{"content":"Also copy the Setup.bat, Cleanup.bat, and ImportServiceCert.bat files to the client.","pos":[18324,18408]},{"content":"On the server, run <bpt id=\"p1\">**</bpt>setup.bat service<ept id=\"p1\">**</ept> in a Visual Studio command prompt with administrator privileges.","pos":[18418,18523],"source":"On the server, run **setup.bat service** in a Visual Studio command prompt with administrator privileges."},{"content":"Running <bpt id=\"p1\">**</bpt>setup.bat<ept id=\"p1\">**</ept> with the <bpt id=\"p2\">**</bpt>service<ept id=\"p2\">**</ept> argument creates a service certificate with the fully-qualified domain name of the computer and exports the service certificate to a file named Service.cer.","pos":[18524,18723],"source":" Running **setup.bat** with the **service** argument creates a service certificate with the fully-qualified domain name of the computer and exports the service certificate to a file named Service.cer."},{"pos":[18733,19019],"content":"Edit Web.config to reflect the new certificate name (in the <ph id=\"ph1\">`findValue`</ph> attribute in the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&lt;</ph>serviceCertificate&gt;<ept id=\"p1\">](../../../../docs/framework/configure-apps/file-schema/wcf/servicecertificate-of-servicecredentials.md)</ept>) which is the same as the fully-qualified domain name of the computer.","source":"Edit Web.config to reflect the new certificate name (in the `findValue` attribute in the [\\<serviceCertificate>](../../../../docs/framework/configure-apps/file-schema/wcf/servicecertificate-of-servicecredentials.md)) which is the same as the fully-qualified domain name of the computer."},{"content":"Copy the Service.cer file from the service directory to the client directory on the client computer.","pos":[19029,19129]},{"content":"On the client, run <bpt id=\"p1\">**</bpt>setup.bat client<ept id=\"p1\">**</ept> in a Visual Studio command prompt with administrator privileges.","pos":[19139,19243],"source":"On the client, run **setup.bat client** in a Visual Studio command prompt with administrator privileges."},{"content":"Running <bpt id=\"p1\">**</bpt>setup.bat<ept id=\"p1\">**</ept> with the <bpt id=\"p2\">**</bpt>client<ept id=\"p2\">**</ept> argument creates a client certificate named client.com and exports the client certificate to a file named Client.cer.","pos":[19244,19403],"source":" Running **setup.bat** with the **client** argument creates a client certificate named client.com and exports the client certificate to a file named Client.cer."},{"content":"In the Client.exe.config file on the client computer, change the address value of the endpoint to match the new address of your service.","pos":[19412,19548]},{"content":"Do this by replacing localhost with the fully-qualified domain name of the server.","pos":[19549,19631]},{"content":"Copy the Client.cer file from the client directory to the service directory on the server.","pos":[19641,19731]},{"content":"On the client, run ImportServiceCert.bat in a Visual Studio command prompt with administrative privileges.","pos":[19741,19847]},{"content":"This imports the service certificate from the Service.cer file into the CurrentUser - TrustedPeople store.","pos":[19848,19954]},{"content":"On the server, run ImportClientCert.bat in a Visual Studio command prompt with administrative privileges.","pos":[19964,20069]},{"content":"This imports the client certificate from the Client.cer file into the LocalMachine - TrustedPeople store.","pos":[20070,20175]},{"content":"On the client computer, launch Client.exe from a command prompt window.","pos":[20185,20256]},{"content":"If the client and service are not able to communicate, see <bpt id=\"p1\">[</bpt>Troubleshooting Tips<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)</ept>.","pos":[20257,20409],"source":" If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)."},{"pos":[20419,20447],"content":"To clean up after the sample","linkify":"To clean up after the sample","nodes":[{"content":"To clean up after the sample","pos":[0,28]}]},{"content":"Run Cleanup.bat in the samples folder after you have finished running the sample.","pos":[20457,20538]},{"pos":[20550,21114],"content":"[!NOTE]\nThis script does not remove service certificates on a client when running this sample across computers. If you have run [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] samples that use certificates across computers, be sure to clear the service certificates that have been installed in the CurrentUser - TrustedPeople store. To do this, use the following command: `certmgr -del -r CurrentUser -s TrustedPeople -c -n <Fully Qualified Server Machine Name>` For example: `certmgr -del -r CurrentUser -s TrustedPeople -c -n server1.contoso.com`.","leadings":["","    >  "],"nodes":[{"content":"This script does not remove service certificates on a client when running this sample across computers. If you have run [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] samples that use certificates across computers, be sure to clear the service certificates that have been installed in the CurrentUser - TrustedPeople store. To do this, use the following command: `certmgr -del -r CurrentUser -s TrustedPeople -c -n <Fully Qualified Server Machine Name>` For example: `certmgr -del -r CurrentUser -s TrustedPeople -c -n server1.contoso.com`.","pos":[8,557],"nodes":[{"content":"This script does not remove service certificates on a client when running this sample across computers.","pos":[0,103]},{"content":"If you have run <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> samples that use certificates across computers, be sure to clear the service certificates that have been installed in the CurrentUser - TrustedPeople store.","pos":[104,332],"source":" If you have run [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] samples that use certificates across computers, be sure to clear the service certificates that have been installed in the CurrentUser - TrustedPeople store."},{"content":"To do this, use the following command: <ph id=\"ph1\">`certmgr -del -r CurrentUser -s TrustedPeople -c -n &lt;Fully Qualified Server Machine Name&gt;`</ph> For example: <ph id=\"ph2\">`certmgr -del -r CurrentUser -s TrustedPeople -c -n server1.contoso.com`</ph>.","pos":[333,549],"source":" To do this, use the following command: `certmgr -del -r CurrentUser -s TrustedPeople -c -n <Fully Qualified Server Machine Name>` For example: `certmgr -del -r CurrentUser -s TrustedPeople -c -n server1.contoso.com`."}]}]},{"pos":[21123,21131],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}