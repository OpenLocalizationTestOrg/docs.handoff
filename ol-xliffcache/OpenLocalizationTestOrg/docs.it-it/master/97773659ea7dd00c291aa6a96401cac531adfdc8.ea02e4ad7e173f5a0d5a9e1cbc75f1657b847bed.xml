{"content":"---\ntitle: String interpolation - C# tutorial\ndescription: This tutorial shows you how to use the C# string interpolation feature to include formatted expression results in a larger string.\nauthor: rpetrusha\nms.author: ronpet\nms.date: 10/23/2018\n---\n# Use string interpolation to construct formatted strings\n\nThis tutorial teaches you how to use C# [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single result string. You write C# code and see the results of compiling and running it. The tutorial contains a series of lessons that show you how to insert values into a string and format those values in different ways.\n\nThis tutorial expects that you have a machine you can use for development. The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux. You also can complete the [interactive version](interpolated-strings.yml) of this tutorial in your browser.\n\n## Create an interpolated string\n\nCreate a directory named **interpolated**. Make it the current directory and run the following command from a console window:\n\n```console\ndotnet new console\n```\n\nThis command creates a new .NET Core console application in the current directory.\n\nOpen **Program.cs** in your favorite editor, and replace the line `Console.WriteLine(\"Hello World!\");` with the following code, where you replace `<name>` with your name:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nTry this code by typing `dotnet run` in your console window. When you run the program, it displays a single string that includes your name in the greeting. The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*. It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code. Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.\n\nThis simple example contains the two elements that every interpolated string must have:\n\n- A string literal that begins with the `$` character before its opening quotation mark character. There can't be any spaces between the `$` symbol and the quotation mark character. (If you'd like to see what happens if you include one, insert a space after the `$` character, save the file, and run the program again by typing `dotnet run` in the console window. The C# compiler displays an error message, \"error CS1056: Unexpected character '$'\".)\n\n- One or more *interpolated expressions*. An interpolated expression is indicated by an opening and closing brace (`{` and `}`). You can put any C# expression that returns a value (including `null`) inside the braces.\n\nLet's try a few more string interpolation examples with some other data types.\n\n## Include different data types\n\nIn the previous section, you used string interpolation to insert one string inside of another. The result of an interpolated expression can be of any data type, though. Let's include values of various data types in an interpolated string.\n\nIn the following example, we first define a [class](../../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has a `Name` [property](../../properties.md) and a `ToString` [method](../../methods.md), which [overrides](../../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method. The [`public` access modifier](../../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance. In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../../programming-guide/classes-and-structs/constructors.md):\n\n```csharp\npublic Vegetable(string name) => Name = name;\n```\n\nThen we create an instance of the `Vegetable` class named `item` by using the [`new` keyword](../../language-reference/keywords/new-operator.md) and providing a name for the constructor `Vegetable`:\n\n```csharp\nvar item = new Vegetable(\"eggplant\");\n```\n\nFinally, we include the `item` variable into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../../programming-guide/enumeration-types.md) value. Replace all of the C# code in your editor with the following code, and then use the `dotnet run` command to run it:\n\n```csharp\nusing System;\n\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n   \n   public string Name { get; }\n   \n   public override string ToString() => Name;\n}\n\npublic class Program\n{\n   public enum Unit { item, kilogram, gram, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nNote that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string. That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:\n\n- If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.\n\n- If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called. You can test this by updating the implementation of the `Vegetable.ToString` method. You might not even need to implement the `ToString` method since every type has some implementation of this method. To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it). In the output, the string \"eggplant\" is replaced by the fully qualified type name (\"Vegetable\" in this example), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method. The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.\n\nIn the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency. In the next section, you'll learn how to fix those issues by controlling the format of string representations of the expression results.\n\n## Control the formatting of interpolated expressions\n\nIn the previous section, two poorly formatted strings were inserted into the result string. One was a date and time value for which only the date was appropriate. The second was a price that didn't indicate its unit of currency. Both issues are easy to address. String interpolation lets you specify *format strings* that control the formatting of particular types. Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nYou specify a format string by following the interpolated expression with a colon (\":\") and the format string. \"d\" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format. \"C2\" is a  [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.\n\nA number of types in the .NET libraries support a predefined set of format strings. These include all the numeric types and the date and time types. For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.\n\nTry modifying the format strings in your text editor and, each time you make a change, rerun the program to see how the changes affect the formatting of the date and time and the numeric value. Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number). Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).\n\nIn addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string. In the next section, you'll learn how to do this.\n\n## Control the field width and alignment of interpolated expressions\n\nOrdinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces. Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output. To see this, replace all the code in your text editor with the following code, then type `dotnet run` to execute the program:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var titles = new Dictionary<string, string>()\n      {\n          [\"Doyle, Arthur Conan\"] = \"Hound of the Baskervilles, The\",\n          [\"London, Jack\"] = \"Call of the Wild, The\",\n          [\"Shakespeare, William\"] = \"Tempest, The\"\n      };\n\n      Console.WriteLine(\"Author and Title List\");\n      Console.WriteLine();\n      Console.WriteLine($\"|{\"Author\",-25}|{\"Title\",30}|\");\n      foreach (var title in titles)\n         Console.WriteLine($\"|{title.Key,-25}|{title.Value,30}|\");\n   }\n}\n```\n\nThe names of authors are left-aligned, and the titles they wrote are right-aligned. You specify the alignment by adding a comma (\",\") after an interpolated expression and designating the *minimum* field width. If the specified value is a positive number, the field is right-aligned. If it is a negative number, the field is left-aligned.\n\nTry removing the negative signs from the `{\"Author\",-25}` and `{title.Key,-25}` code and run the example again, as the following code does:\n\n```csharp\nConsole.WriteLine($\"|{\"Author\",25}|{\"Title\",30}|\");\nforeach (var title in titles)\n   Console.WriteLine($\"|{title.Key,25}|{title.Value,30}|\");\n```\n\nThis time, the author information is right-aligned.\n\nYou can combine an alignment specifier and a format string for a single interpolated expression. To do that, specify the alignment first, followed by a colon and the format string. Replace all of the code inside the `Main` method with the following code, which displays three formatted strings with defined field widths. Then run the program by entering the `dotnet run` command.\n\n```csharp\nConsole.WriteLine($\"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet\");\n```\n\nThe output looks something like the following:\n\n```console\n[04/14/2018          ] Hour [16        ] [       1,063.34] feet\n```\n\nYou've completed the string interpolation tutorial.\n\nFor more information, see the [String interpolation](../../language-reference/tokens/interpolated.md) topic and the [String interpolation in C#](../../tutorials/string-interpolation.md) tutorial.\n","nodes":[{"pos":[4,245],"embed":true,"restype":"x-metadata","content":"title: String interpolation - C# tutorial\ndescription: This tutorial shows you how to use the C# string interpolation feature to include formatted expression results in a larger string.\nauthor: rpetrusha\nms.author: ronpet\nms.date: 10/23/2018","nodes":[{"content":"String interpolation - C# tutorial","nodes":[{"pos":[0,34],"content":"String interpolation - C# tutorial","nodes":[{"content":"String interpolation - C# tutorial","pos":[0,34]}]}],"path":["title"],"nosxs":false},{"content":"This tutorial shows you how to use the C# string interpolation feature to include formatted expression results in a larger string.","nodes":[{"pos":[0,130],"content":"This tutorial shows you how to use the C# string interpolation feature to include formatted expression results in a larger string.","nodes":[{"content":"This tutorial shows you how to use the C# string interpolation feature to include formatted expression results in a larger string.","pos":[0,130]}]}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[252,307],"content":"Use string interpolation to construct formatted strings","linkify":"Use string interpolation to construct formatted strings","nodes":[{"content":"Use string interpolation to construct formatted strings","pos":[0,55]}]},{"content":"This tutorial teaches you how to use C# <bpt id=\"p1\">[</bpt>string interpolation<ept id=\"p1\">](../../language-reference/tokens/interpolated.md)</ept> to insert values into a single result string.","pos":[309,466],"source":"This tutorial teaches you how to use C# [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single result string."},{"content":"You write C# code and see the results of compiling and running it.","pos":[467,533]},{"content":"The tutorial contains a series of lessons that show you how to insert values into a string and format those values in different ways.","pos":[534,667]},{"content":"This tutorial expects that you have a machine you can use for development.","pos":[669,743]},{"content":"The .NET topic <bpt id=\"p1\">[</bpt>Get Started in 10 minutes<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.","pos":[744,910],"source":" The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment on Mac, PC or Linux."},{"content":"You also can complete the <bpt id=\"p1\">[</bpt>interactive version<ept id=\"p1\">](interpolated-strings.yml)</ept> of this tutorial in your browser.","pos":[911,1018],"source":" You also can complete the [interactive version](interpolated-strings.yml) of this tutorial in your browser."},{"pos":[1023,1052],"content":"Create an interpolated string","linkify":"Create an interpolated string","nodes":[{"content":"Create an interpolated string","pos":[0,29]}]},{"content":"Create a directory named <bpt id=\"p1\">**</bpt>interpolated<ept id=\"p1\">**</ept>.","pos":[1054,1096],"source":"Create a directory named **interpolated**."},{"content":"Make it the current directory and run the following command from a console window:","pos":[1097,1179]},{"content":"This command creates a new .NET Core console application in the current directory.","pos":[1216,1298]},{"pos":[1300,1470],"content":"Open <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> in your favorite editor, and replace the line <ph id=\"ph1\">`Console.WriteLine(\"Hello World!\");`</ph> with the following code, where you replace <ph id=\"ph2\">`&lt;name&gt;`</ph> with your name:","source":"Open **Program.cs** in your favorite editor, and replace the line `Console.WriteLine(\"Hello World!\");` with the following code, where you replace `<name>` with your name:"},{"content":"Try this code by typing <ph id=\"ph1\">`dotnet run`</ph> in your console window.","pos":[1575,1635],"source":"Try this code by typing `dotnet run` in your console window."},{"content":"When you run the program, it displays a single string that includes your name in the greeting.","pos":[1636,1730]},{"content":"The string included in the <ph id=\"ph1\">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method call is an <bpt id=\"p1\">*</bpt>interpolated string<ept id=\"p1\">*</ept>.","pos":[1731,1833],"source":" The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*."},{"content":"It's a kind of template that lets you construct a single string (called the <bpt id=\"p1\">*</bpt>result string<ept id=\"p1\">*</ept>) from a string that includes embedded code.","pos":[1834,1969],"source":" It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code."},{"content":"Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.","pos":[1970,2094]},{"content":"This simple example contains the two elements that every interpolated string must have:","pos":[2096,2183]},{"content":"A string literal that begins with the <ph id=\"ph1\">`$`</ph> character before its opening quotation mark character.","pos":[2187,2283],"source":"A string literal that begins with the `$` character before its opening quotation mark character."},{"content":"There can't be any spaces between the <ph id=\"ph1\">`$`</ph> symbol and the quotation mark character.","pos":[2284,2366],"source":" There can't be any spaces between the `$` symbol and the quotation mark character."},{"content":"(If you'd like to see what happens if you include one, insert a space after the <ph id=\"ph1\">`$`</ph> character, save the file, and run the program again by typing <ph id=\"ph2\">`dotnet run`</ph> in the console window.","pos":[2367,2548],"source":" (If you'd like to see what happens if you include one, insert a space after the `$` character, save the file, and run the program again by typing `dotnet run` in the console window."},{"content":"The C# compiler displays an error message, \"error CS1056: Unexpected character '$'\".)","pos":[2549,2634]},{"content":"One or more <bpt id=\"p1\">*</bpt>interpolated expressions<ept id=\"p1\">*</ept>.","pos":[2638,2677],"source":"One or more *interpolated expressions*."},{"content":"An interpolated expression is indicated by an opening and closing brace (<ph id=\"ph1\">`{`</ph> and <ph id=\"ph2\">`}`</ph>).","pos":[2678,2764],"source":" An interpolated expression is indicated by an opening and closing brace (`{` and `}`)."},{"content":"You can put any C# expression that returns a value (including <ph id=\"ph1\">`null`</ph>) inside the braces.","pos":[2765,2853],"source":" You can put any C# expression that returns a value (including `null`) inside the braces."},{"content":"Let's try a few more string interpolation examples with some other data types.","pos":[2855,2933]},{"pos":[2938,2966],"content":"Include different data types","linkify":"Include different data types","nodes":[{"content":"Include different data types","pos":[0,28]}]},{"content":"In the previous section, you used string interpolation to insert one string inside of another.","pos":[2968,3062]},{"content":"The result of an interpolated expression can be of any data type, though.","pos":[3063,3136]},{"content":"Let's include values of various data types in an interpolated string.","pos":[3137,3206]},{"content":"In the following example, we first define a <bpt id=\"p1\">[</bpt>class<ept id=\"p1\">](../../programming-guide/classes-and-structs/classes.md)</ept> data type <ph id=\"ph1\">`Vegetable`</ph> that has a <ph id=\"ph2\">`Name`</ph> <bpt id=\"p2\">[</bpt>property<ept id=\"p2\">](../../properties.md)</ept> and a <ph id=\"ph3\">`ToString`</ph> <bpt id=\"p3\">[</bpt>method<ept id=\"p3\">](../../methods.md)</ept>, which <bpt id=\"p4\">[</bpt>overrides<ept id=\"p4\">](../../language-reference/keywords/override.md)</ept> the behavior of the <ph id=\"ph4\">&lt;xref:System.Object.ToString?displayProperty=nameWithType&gt;</ph> method.","pos":[3208,3584],"source":"In the following example, we first define a [class](../../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has a `Name` [property](../../properties.md) and a `ToString` [method](../../methods.md), which [overrides](../../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method."},{"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`public`</ph> access modifier<ept id=\"p1\">](../../language-reference/keywords/public.md)</ept> makes that method available to any client code to get the string representation of a <ph id=\"ph2\">`Vegetable`</ph> instance.","pos":[3585,3767],"source":" The [`public` access modifier](../../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance."},{"content":"In the example the <ph id=\"ph1\">`Vegetable.ToString`</ph> method returns the value of the <ph id=\"ph2\">`Name`</ph> property that is initialized at the <ph id=\"ph3\">`Vegetable`</ph> <bpt id=\"p1\">[</bpt>constructor<ept id=\"p1\">](../../programming-guide/classes-and-structs/constructors.md)</ept>:","pos":[3768,3970],"source":" In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../../programming-guide/classes-and-structs/constructors.md):"},{"pos":[4033,4231],"content":"Then we create an instance of the <ph id=\"ph1\">`Vegetable`</ph> class named <ph id=\"ph2\">`item`</ph> by using the <bpt id=\"p1\">[</bpt><ph id=\"ph3\">`new`</ph> keyword<ept id=\"p1\">](../../language-reference/keywords/new-operator.md)</ept> and providing a name for the constructor <ph id=\"ph4\">`Vegetable`</ph>:","source":"Then we create an instance of the `Vegetable` class named `item` by using the [`new` keyword](../../language-reference/keywords/new-operator.md) and providing a name for the constructor `Vegetable`:"},{"content":"Finally, we include the <ph id=\"ph1\">`item`</ph> variable into an interpolated string that also contains a <ph id=\"ph2\">&lt;xref:System.DateTime&gt;</ph> value, a <ph id=\"ph3\">&lt;xref:System.Decimal&gt;</ph> value, and a <ph id=\"ph4\">`Unit`</ph> <bpt id=\"p1\">[</bpt>enumeration<ept id=\"p1\">](../../programming-guide/enumeration-types.md)</ept> value.","pos":[4286,4515],"source":"Finally, we include the `item` variable into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../../programming-guide/enumeration-types.md) value."},{"content":"Replace all of the C# code in your editor with the following code, and then use the <ph id=\"ph1\">`dotnet run`</ph> command to run it:","pos":[4516,4631],"source":" Replace all of the C# code in your editor with the following code, and then use the `dotnet run` command to run it:"},{"content":"Note that the interpolated expression <ph id=\"ph1\">`item`</ph> in the interpolated string resolves to the text \"eggplant\" in the result string.","pos":[5155,5280],"source":"Note that the interpolated expression `item` in the interpolated string resolves to the text \"eggplant\" in the result string."},{"content":"That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:","pos":[5281,5409]},{"pos":[5413,5554],"content":"If the interpolated expression evaluates to <ph id=\"ph1\">`null`</ph>, an empty string (\"\", or <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) is used.","source":"If the interpolated expression evaluates to `null`, an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>) is used."},{"content":"If the interpolated expression doesn't evaluate to <ph id=\"ph1\">`null`</ph>, typically the <ph id=\"ph2\">`ToString`</ph> method of the result type is called.","pos":[5558,5678],"source":"If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called."},{"content":"You can test this by updating the implementation of the <ph id=\"ph1\">`Vegetable.ToString`</ph> method.","pos":[5679,5763],"source":" You can test this by updating the implementation of the `Vegetable.ToString` method."},{"content":"You might not even need to implement the <ph id=\"ph1\">`ToString`</ph> method since every type has some implementation of this method.","pos":[5764,5879],"source":" You might not even need to implement the `ToString` method since every type has some implementation of this method."},{"content":"To test this, comment out the definition of the <ph id=\"ph1\">`Vegetable.ToString`</ph> method in the example (to do that, put a comment symbol, <ph id=\"ph2\">`//`</ph>, in front of it).","pos":[5880,6028],"source":" To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it)."},{"content":"In the output, the string \"eggplant\" is replaced by the fully qualified type name (\"Vegetable\" in this example), which is the default behavior of the <ph id=\"ph1\">&lt;xref:System.Object.ToString?displayProperty=nameWithType&gt;</ph> method.","pos":[6029,6245],"source":" In the output, the string \"eggplant\" is replaced by the fully qualified type name (\"Vegetable\" in this example), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method."},{"content":"The default behavior of the <ph id=\"ph1\">`ToString`</ph> method for an enumeration value is to return the string representation of the value.","pos":[6246,6369],"source":" The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value."},{"content":"In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.","pos":[6371,6537]},{"content":"In the next section, you'll learn how to fix those issues by controlling the format of string representations of the expression results.","pos":[6538,6674]},{"pos":[6679,6729],"content":"Control the formatting of interpolated expressions","linkify":"Control the formatting of interpolated expressions","nodes":[{"content":"Control the formatting of interpolated expressions","pos":[0,50]}]},{"content":"In the previous section, two poorly formatted strings were inserted into the result string.","pos":[6731,6822]},{"content":"One was a date and time value for which only the date was appropriate.","pos":[6823,6893]},{"content":"The second was a price that didn't indicate its unit of currency.","pos":[6894,6959]},{"content":"Both issues are easy to address.","pos":[6960,6992]},{"content":"String interpolation lets you specify <bpt id=\"p1\">*</bpt>format strings<ept id=\"p1\">*</ept> that control the formatting of particular types.","pos":[6993,7096],"source":" String interpolation lets you specify *format strings* that control the formatting of particular types."},{"content":"Modify the call to <ph id=\"ph1\">`Console.WriteLine`</ph> from the previous example to include the format strings for the date and price expressions as shown in the following line:","pos":[7097,7258],"source":" Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:"},{"content":"You specify a format string by following the interpolated expression with a colon (\":\") and the format string.","pos":[7358,7468]},{"content":"\"d\" is a <bpt id=\"p1\">[</bpt>standard date and time format string<ept id=\"p1\">](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)</ept> that represents the short date format.","pos":[7469,7660],"source":" \"d\" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format."},{"content":"\"C2\" is a  <bpt id=\"p1\">[</bpt>standard numeric format string<ept id=\"p1\">](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)</ept> that represents a number as a currency value with two digits after the decimal point.","pos":[7661,7887],"source":" \"C2\" is a  [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point."},{"content":"A number of types in the .NET libraries support a predefined set of format strings.","pos":[7889,7972]},{"content":"These include all the numeric types and the date and time types.","pos":[7973,8037]},{"content":"For a complete list of types that support format strings, see <bpt id=\"p1\">[</bpt>Format Strings and .NET Class Library Types<ept id=\"p1\">](../../../standard/base-types/formatting-types.md#stringRef)</ept> in the <bpt id=\"p2\">[</bpt>Formatting Types in .NET<ept id=\"p2\">](../../../standard/base-types/formatting-types.md)</ept> article.","pos":[8038,8298],"source":" For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article."},{"content":"Try modifying the format strings in your text editor and, each time you make a change, rerun the program to see how the changes affect the formatting of the date and time and the numeric value.","pos":[8300,8493]},{"content":"Change the \"d\" in <ph id=\"ph1\">`{date:d}`</ph> to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number).","pos":[8494,8659],"source":" Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number)."},{"content":"Change the \"C2\" in <ph id=\"ph1\">`{price:C2}`</ph> to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).","pos":[8660,8799],"source":" Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point)."},{"content":"In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.","pos":[8801,8955]},{"content":"In the next section, you'll learn how to do this.","pos":[8956,9005]},{"pos":[9010,9075],"content":"Control the field width and alignment of interpolated expressions","linkify":"Control the field width and alignment of interpolated expressions","nodes":[{"content":"Control the field width and alignment of interpolated expressions","pos":[0,65]}]},{"content":"Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.","pos":[9077,9237]},{"content":"Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.","pos":[9238,9380]},{"content":"To see this, replace all the code in your text editor with the following code, then type <ph id=\"ph1\">`dotnet run`</ph> to execute the program:","pos":[9381,9506],"source":" To see this, replace all the code in your text editor with the following code, then type `dotnet run` to execute the program:"},{"content":"The names of authors are left-aligned, and the titles they wrote are right-aligned.","pos":[10121,10204]},{"content":"You specify the alignment by adding a comma (\",\") after an interpolated expression and designating the <bpt id=\"p1\">*</bpt>minimum<ept id=\"p1\">*</ept> field width.","pos":[10205,10330],"source":" You specify the alignment by adding a comma (\",\") after an interpolated expression and designating the *minimum* field width."},{"content":"If the specified value is a positive number, the field is right-aligned.","pos":[10331,10403]},{"content":"If it is a negative number, the field is left-aligned.","pos":[10404,10458]},{"pos":[10460,10599],"content":"Try removing the negative signs from the <ph id=\"ph1\">`{\"Author\",-25}`</ph> and <ph id=\"ph2\">`{title.Key,-25}`</ph> code and run the example again, as the following code does:","source":"Try removing the negative signs from the `{\"Author\",-25}` and `{title.Key,-25}` code and run the example again, as the following code does:"},{"content":"This time, the author information is right-aligned.","pos":[10758,10809]},{"content":"You can combine an alignment specifier and a format string for a single interpolated expression.","pos":[10811,10907]},{"content":"To do that, specify the alignment first, followed by a colon and the format string.","pos":[10908,10991]},{"content":"Replace all of the code inside the <ph id=\"ph1\">`Main`</ph> method with the following code, which displays three formatted strings with defined field widths.","pos":[10992,11131],"source":" Replace all of the code inside the `Main` method with the following code, which displays three formatted strings with defined field widths."},{"content":"Then run the program by entering the <ph id=\"ph1\">`dotnet run`</ph> command.","pos":[11132,11190],"source":" Then run the program by entering the `dotnet run` command."},{"content":"The output looks something like the following:","pos":[11306,11352]},{"content":"You've completed the string interpolation tutorial.","pos":[11434,11485]},{"pos":[11487,11682],"content":"For more information, see the <bpt id=\"p1\">[</bpt>String interpolation<ept id=\"p1\">](../../language-reference/tokens/interpolated.md)</ept> topic and the <bpt id=\"p2\">[</bpt>String interpolation in C#<ept id=\"p2\">](../../tutorials/string-interpolation.md)</ept> tutorial.","source":"For more information, see the [String interpolation](../../language-reference/tokens/interpolated.md) topic and the [String interpolation in C#](../../tutorials/string-interpolation.md) tutorial."}]}