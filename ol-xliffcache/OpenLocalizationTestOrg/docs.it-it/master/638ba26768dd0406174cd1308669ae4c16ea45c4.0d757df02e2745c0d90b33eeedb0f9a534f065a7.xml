{"content":"---\ntitle: \"How to: Modify String Contents (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"strings [C#], modifying\"\nms.assetid: b6c20bba-ce22-43d7-ad1b-5ce65f714055\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# How to: Modify String Contents (C# Programming Guide)\nBecause strings are *immutable*, it is not possible (without using unsafe code) to modify the value of a string object after it has been created. However, there are many ways to modify the value of a string and store the result in a new string object. The <xref:System.String?displayProperty=fullName> class provides methods that operate on an input string and return a new string object. In many cases, you can assign the new object to the variable that held the original string. The <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName> class provides additional methods that work in a similar manner. The <xref:System.Text.StringBuilder?displayProperty=fullName> class provides a character buffer that you can modify \"in-place.\" You call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to create a new string object that contains the current contents of the buffer.  \n  \n## Example  \n The following example shows various ways to replace or remove substrings in a specified string.  \n  \n [!code-cs[csProgGuideStrings#28](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-modify-string-contents_1.cs)]  \n  \n## Example  \n To access the individual characters in a string by using array notation, you can use the <xref:System.Text.StringBuilder> object, which overloads the `[]` operator to provide access to its internal character buffer. You can also convert the string to an array of chars by using the <xref:System.String.ToCharArray%2A> method. The following example uses `ToCharArray` to create the array. Some elements of this array are then modified. A string constructor that takes a char array as an input parameter is then called to create a new string.  \n  \n [!code-cs[csProgGuideStrings#24](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-modify-string-contents_2.cs)]  \n  \n## Example  \n The following example is provided for those very rare situations in which you may want to modify a string in-place by using unsafe code in a manner similar to C-style char arrays. The example shows how to access the individual characters \"in-place\" by using the fixed keyword. It also demonstrates one possible side effect of unsafe operations on strings that results from the way that the C# compiler stores (interns) strings internally. In general, you should not use this technique unless it is absolutely necessary.  \n  \n [!code-cs[csProgGuideStrings#29](../../../csharp/programming-guide/strings/codesnippet/CSharp/how-to-modify-string-contents_3.cs)]  \n  \n## See Also  \n [C# Programming Guide](../../../csharp/programming-guide/index.md)   \n [Strings](../../../csharp/programming-guide/strings/index.md)","nodes":[{"pos":[4,555],"embed":true,"restype":"x-metadata","content":"title: \"How to: Modify String Contents (C# Programming Guide) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\n\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nhelpviewer_keywords: \n  - \"strings [C#], modifying\"\nms.assetid: b6c20bba-ce22-43d7-ad1b-5ce65f714055\ncaps.latest.revision: 16\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"How to: Modify String Contents (C# Programming Guide) | Microsoft Docs","nodes":[{"pos":[0,70],"content":"How to: Modify String Contents (C# Programming Guide) | Microsoft Docs","nodes":[{"content":"How to: Modify String Contents (C# Programming Guide) | Microsoft Docs","pos":[0,70]}]}],"path":["title"]}],"yml":true},{"pos":[562,615],"content":"How to: Modify String Contents (C# Programming Guide)","linkify":"How to: Modify String Contents (C# Programming Guide)","nodes":[{"content":"How to: Modify String Contents (C# Programming Guide)","pos":[0,53]}]},{"content":"Because strings are <bpt id=\"p1\">*</bpt>immutable<ept id=\"p1\">*</ept>, it is not possible (without using unsafe code) to modify the value of a string object after it has been created.","pos":[616,761],"source":"Because strings are *immutable*, it is not possible (without using unsafe code) to modify the value of a string object after it has been created."},{"content":"However, there are many ways to modify the value of a string and store the result in a new string object.","pos":[762,867]},{"content":"The <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class provides methods that operate on an input string and return a new string object.","pos":[868,1004],"source":" The <xref:System.String?displayProperty=fullName> class provides methods that operate on an input string and return a new string object."},{"content":"In many cases, you can assign the new object to the variable that held the original string.","pos":[1005,1096]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex?displayProperty=fullName&gt;</ph> class provides additional methods that work in a similar manner.","pos":[1097,1234],"source":" The <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName> class provides additional methods that work in a similar manner."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder?displayProperty=fullName&gt;</ph> class provides a character buffer that you can modify \"in-place.\"","pos":[1235,1362],"source":" The <xref:System.Text.StringBuilder?displayProperty=fullName> class provides a character buffer that you can modify \"in-place.\""},{"content":"You call the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method to create a new string object that contains the current contents of the buffer.","pos":[1363,1532],"source":" You call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to create a new string object that contains the current contents of the buffer."},{"pos":[1541,1548],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows various ways to replace or remove substrings in a specified string.","pos":[1552,1647]},{"pos":[1793,1800],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"To access the individual characters in a string by using array notation, you can use the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, which overloads the <ph id=\"ph2\">`[]`</ph> operator to provide access to its internal character buffer.","pos":[1804,2019],"source":"To access the individual characters in a string by using array notation, you can use the <xref:System.Text.StringBuilder> object, which overloads the `[]` operator to provide access to its internal character buffer."},{"content":"You can also convert the string to an array of chars by using the <ph id=\"ph1\">&lt;xref:System.String.ToCharArray%2A&gt;</ph> method.","pos":[2020,2129],"source":" You can also convert the string to an array of chars by using the <xref:System.String.ToCharArray%2A> method."},{"content":"The following example uses <ph id=\"ph1\">`ToCharArray`</ph> to create the array.","pos":[2130,2191],"source":" The following example uses `ToCharArray` to create the array."},{"content":"Some elements of this array are then modified.","pos":[2192,2238]},{"content":"A string constructor that takes a char array as an input parameter is then called to create a new string.","pos":[2239,2344]},{"pos":[2490,2497],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example is provided for those very rare situations in which you may want to modify a string in-place by using unsafe code in a manner similar to C-style char arrays.","pos":[2501,2680]},{"content":"The example shows how to access the individual characters \"in-place\" by using the fixed keyword.","pos":[2681,2777]},{"content":"It also demonstrates one possible side effect of unsafe operations on strings that results from the way that the C# compiler stores (interns) strings internally.","pos":[2778,2939]},{"content":"In general, you should not use this technique unless it is absolutely necessary.","pos":[2940,3020]},{"pos":[3166,3174],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../../csharp/programming-guide/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[3178,3245],"source":"[C# Programming Guide](../../../csharp/programming-guide/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Strings<ept id=\"p1\">](../../../csharp/programming-guide/strings/index.md)</ept>","pos":[3249,3310],"source":"[Strings](../../../csharp/programming-guide/strings/index.md)"}]}