{"content":"---\ntitle: Using dotnet-svcutil.xmlserializer on .NET Core\ndescription: Learn how you can use the `dotnet-svcutil.xmlserializer` NuGet package to pre-generate a serialization assembly for .NET Core projects.\nauthor: huanwu\nms.date: 11/27/2018\n---\n# Using dotnet-svcutil.xmlserializer on .NET Core\n\nThe `dotnet-svcutil.xmlserializer` NuGet package can pre-generate a serialization assembly for .NET Core projects. It pre-generates C# serialization code for the types in the client application that are used by the WCF Service Contract and that can be serialized by the XmlSerializer. This improves the startup performance of XML serialization when serializing or deserializing objects of those types.\n\n## Prerequisites\n\n* [.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later\n* Your favorite code editor\n\nYou can use the command `dotnet --info` to check which versions of .NET Core SDK and runtime you already have installed.\n\n## Getting started\n\nTo use `dotnet-svcutil.xmlserializer` in a .NET Core console application:\n\n1. Create a WCF Service named 'MyWCFService' using the default template 'WCF Service Application' in .NET Framework. Add `[XmlSerializerFormat]` attribute on the service method like the following:\n\n   ```csharp\n    [ServiceContract]\n    public interface IService1\n    {\n        [XmlSerializerFormat]\n        [OperationContract(Action = \"http://tempuri.org/IService1/GetData\", ReplyAction = \"http://tempuri.org/IService1/GetDataResponse\")]\n        string GetData(int value);\n    }\n    ```\n\n2. Create a .NET Core console application as WCF client application that targets at .NET Core 2.1 or later versions. For example, create an app named 'MyWCFClient' with the following command:\n\n    ```console\n    dotnet new console --name MyWCFClient\n    ```\n\n    To ensure your project is targeting .NET Core 2.1 or later, inspect the `TargetFramework` XML element in your project file:\n\n    ```xml\n    <TargetFramework>netcoreapp2.1</TargetFramework>\n    ```\n\n3. Add a package reference to `System.ServiceModel.Http` by running the following command:\n\n    ```console\n    dotnet add package System.ServiceModel.Http\n    ```\n\n4. Add the WCF Client code:\n\n    ```csharp\n    using System.ServiceModel;\n\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                var myBinding = new BasicHttpBinding();\n                var myEndpoint = new EndpointAddress(\"http://localhost:2561/Service1.svc\"); //Fill your service url here\n                var myChannelFactory = new ChannelFactory<IService1>(myBinding, myEndpoint);\n                IService1 client = myChannelFactory.CreateChannel();\n                string s = client.GetData(1);\n                ((ICommunicationObject)client).Close();\n            }\n        }\n\n    [ServiceContract]\n    public interface IService1\n    {\n        [XmlSerializerFormat]\n        [OperationContract(Action = \"http://tempuri.org/IService1/GetData\", ReplyAction = \"http://tempuri.org/IService1/GetDataResponse\")]\n        string GetData(int value);\n    }\n    ```\n\n5. Add a reference to the `dotnet-svcutil.xmlserializer` package by running the following command:\n  \n    ```console\n    dotnet add package dotnet-svcutil.xmlserializer\n    ```\n\n    Running the command should add an entry to your project file similar to this:\n  \n    ```xml\n    <ItemGroup>\n      <DotNetCliToolReference Include=\"dotnet-svcutil.xmlserializer\" Version=\"1.0.0\" />\n    </ItemGroup>\n    ```\n\n6. Build the application by running `dotnet build`. If everything succeeds, an assembly named *MyWCFClient.XmlSerializers.dll* is generated in the output folder. If the tool failed to generate the assembly, you'll see warnings in the build output.\n\n7. Start the WCF service by, for example, running `http://localhost:2561/Service1.svc` in the browser. Then start the client application, and it will automatically load and use the pre-generated serializers at runtime.","nodes":[{"pos":[4,242],"embed":true,"restype":"x-metadata","content":"title: Using dotnet-svcutil.xmlserializer on .NET Core\ndescription: Learn how you can use the `dotnet-svcutil.xmlserializer` NuGet package to pre-generate a serialization assembly for .NET Core projects.\nauthor: huanwu\nms.date: 11/27/2018","nodes":[{"content":"Using dotnet-svcutil.xmlserializer on .NET Core","nodes":[{"pos":[0,47],"content":"Using dotnet-svcutil.xmlserializer on .NET Core","nodes":[{"content":"Using dotnet-svcutil.xmlserializer on .NET Core","pos":[0,47]}]}],"path":["title"],"nosxs":false},{"content":"Learn how you can use the `dotnet-svcutil.xmlserializer` NuGet package to pre-generate a serialization assembly for .NET Core projects.","nodes":[{"pos":[0,135],"content":"Learn how you can use the <ph id=\"ph1\">`dotnet-svcutil.xmlserializer`</ph> NuGet package to pre-generate a serialization assembly for .NET Core projects.","source":"Learn how you can use the `dotnet-svcutil.xmlserializer` NuGet package to pre-generate a serialization assembly for .NET Core projects."}],"path":["description"],"nosxs":false}],"yml":true},{"pos":[249,296],"content":"Using dotnet-svcutil.xmlserializer on .NET Core","linkify":"Using dotnet-svcutil.xmlserializer on .NET Core","nodes":[{"content":"Using dotnet-svcutil.xmlserializer on .NET Core","pos":[0,47]}]},{"content":"The <ph id=\"ph1\">`dotnet-svcutil.xmlserializer`</ph> NuGet package can pre-generate a serialization assembly for .NET Core projects.","pos":[298,412],"source":"The `dotnet-svcutil.xmlserializer` NuGet package can pre-generate a serialization assembly for .NET Core projects."},{"content":"It pre-generates C# serialization code for the types in the client application that are used by the WCF Service Contract and that can be serialized by the XmlSerializer.","pos":[413,582]},{"content":"This improves the startup performance of XML serialization when serializing or deserializing objects of those types.","pos":[583,699]},{"pos":[704,717],"content":"Prerequisites","linkify":"Prerequisites","nodes":[{"content":"Prerequisites","pos":[0,13]}]},{"pos":[721,789],"content":"<bpt id=\"p1\">[</bpt>.NET Core 2.1 SDK<ept id=\"p1\">](https://www.microsoft.com/net/download)</ept> or later","source":"[.NET Core 2.1 SDK](https://www.microsoft.com/net/download) or later"},{"content":"Your favorite code editor","pos":[792,817]},{"pos":[819,939],"content":"You can use the command <ph id=\"ph1\">`dotnet --info`</ph> to check which versions of .NET Core SDK and runtime you already have installed.","source":"You can use the command `dotnet --info` to check which versions of .NET Core SDK and runtime you already have installed."},{"pos":[944,959],"content":"Getting started","linkify":"Getting started","nodes":[{"content":"Getting started","pos":[0,15]}]},{"pos":[961,1034],"content":"To use <ph id=\"ph1\">`dotnet-svcutil.xmlserializer`</ph> in a .NET Core console application:","source":"To use `dotnet-svcutil.xmlserializer` in a .NET Core console application:"},{"content":"Create a WCF Service named 'MyWCFService' using the default template 'WCF Service Application' in .NET Framework.","pos":[1039,1152]},{"content":"Add <ph id=\"ph1\">`[XmlSerializerFormat]`</ph> attribute on the service method like the following:","pos":[1153,1232],"source":" Add `[XmlSerializerFormat]` attribute on the service method like the following:"},{"content":"Create a .NET Core console application as WCF client application that targets at .NET Core 2.1 or later versions.","pos":[1528,1641]},{"content":"For example, create an app named 'MyWCFClient' with the following command:","pos":[1642,1716]},{"pos":[1788,1911],"content":"To ensure your project is targeting .NET Core 2.1 or later, inspect the <ph id=\"ph1\">`TargetFramework`</ph> XML element in your project file:","source":"To ensure your project is targeting .NET Core 2.1 or later, inspect the `TargetFramework` XML element in your project file:"},{"pos":[1989,2076],"content":"Add a package reference to <ph id=\"ph1\">`System.ServiceModel.Http`</ph> by running the following command:","source":"Add a package reference to `System.ServiceModel.Http` by running the following command:"},{"content":"Add the WCF Client code:","pos":[2153,2177]},{"pos":[3062,3157],"content":"Add a reference to the <ph id=\"ph1\">`dotnet-svcutil.xmlserializer`</ph> package by running the following command:","source":"Add a reference to the `dotnet-svcutil.xmlserializer` package by running the following command:"},{"content":"Running the command should add an entry to your project file similar to this:","pos":[3241,3318]},{"content":"Build the application by running <ph id=\"ph1\">`dotnet build`</ph>.","pos":[3466,3514],"source":"Build the application by running `dotnet build`."},{"content":"If everything succeeds, an assembly named <bpt id=\"p1\">*</bpt>MyWCFClient.XmlSerializers.dll<ept id=\"p1\">*</ept> is generated in the output folder.","pos":[3515,3624],"source":" If everything succeeds, an assembly named *MyWCFClient.XmlSerializers.dll* is generated in the output folder."},{"content":"If the tool failed to generate the assembly, you'll see warnings in the build output.","pos":[3625,3710]},{"content":"Start the WCF service by, for example, running <ph id=\"ph1\">`http://localhost:2561/Service1.svc`</ph> in the browser.","pos":[3715,3814],"source":"Start the WCF service by, for example, running `http://localhost:2561/Service1.svc` in the browser."},{"content":"Then start the client application, and it will automatically load and use the pre-generated serializers at runtime.","pos":[3815,3930]}]}