<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="accessing-unexposed-members-on-the-managed-html-document-object-model.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ee74710ac31c9a6c7cba528fe6c99bb47a61a46</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\accessing-unexposed-members-on-the-managed-html-document-object-model.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbdca98964957fca5d31c9f52b2eea8ca1b42ddb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5896d90a5d9da5bd492e7dd64d6c5811e1331ef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Accessing Unexposed Members on the Managed HTML Document Object Model | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing Unexposed Members on the Managed HTML Document Object Model</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The managed HTML Document Object Model (DOM) contains a class called <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> that exposes the properties, methods, and events that all HTML elements have in common.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes, however, you will need to access members that the managed interface does not directly expose.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic examines two ways for accessing unexposed members, including <ph id="ph1">[!INCLUDE[jsprjscript](../../../../includes/jsprjscript-md.md)]</ph> and VBScript functions defined inside of a Web page.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Accessing Unexposed Members through Managed Interfaces</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> provide four methods that enable access to unexposed members.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following table shows the types and their corresponding methods.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Member Type</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Method(s)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Properties (<ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Methods</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Events (<ph id="ph1">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Events (<ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Events (<ph id="ph1">&lt;xref:System.Windows.Forms.HtmlWindow&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you use these methods, it is assumed that you have an element of the correct underlying type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Suppose that you want to listen to the <ph id="ph1">`Submit`</ph> event of a <ph id="ph2">`FORM`</ph> element on an HTML page, so that you can perform some pre-processing on the <ph id="ph3">`FORM`</ph>'s values before the user submits them to the server.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Ideally, if you have control over the HTML, you would define the <ph id="ph1">`FORM`</ph> to have a unique <ph id="ph2">`ID`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>After you load this page into the <ph id="ph1">&lt;xref:System.Windows.Forms.WebBrowser&gt;</ph> control, you can use the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument.GetElementById%2A&gt;</ph> method to retrieve the <ph id="ph3">`FORM`</ph> at run time using <ph id="ph4">`form1`</ph> as the argument.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Accessing Unmanaged Interfaces</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also access unexposed members on the managed HTML DOM by using the unmanaged Component Object Model (COM) interfaces exposed by each DOM class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is recommended if you have to make several calls against unexposed members, or if the unexposed members return other unmanaged interfaces not wrapped by the managed HTML DOM.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following table shows all of the unmanaged interfaces exposed through the managed HTML DOM.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Click on each link for an explanation of its usage and for example code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Unmanaged Interface</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The easiest way to use the COM interfaces is to add a reference to the unmanaged HTML DOM library (MSHTML.dll) from your application, although this is unsupported.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Knowledge Base Article 934368<ept id="p1">](http://support.microsoft.com/kb/934368)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Accessing Script Functions</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An HTML page can define one or more functions by using a scripting language such as <ph id="ph1">[!INCLUDE[jsprjscript](../../../../includes/jsprjscript-md.md)]</ph> or VBScript.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These functions are placed inside of a <ph id="ph1">`SCRIPT`</ph> page in the page, and can be run on demand or in response to an event on the DOM.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can call any script functions you define in an HTML page using the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the script method returns an HTML element, you can use a cast to convert this return result to an <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For details and example code, see <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using the Managed HTML Document Object Model<ept id="p1">](../../../../docs/framework/winforms/controls/using-the-managed-html-document-object-model.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>