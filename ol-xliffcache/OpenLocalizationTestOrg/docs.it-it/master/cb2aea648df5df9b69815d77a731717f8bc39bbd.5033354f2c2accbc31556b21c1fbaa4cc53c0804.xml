{"content":"---\ntitle: \"Consuming Unmanaged DLL Functions\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"unmanaged functions, calling\"\n  - \"COM interop, DLL functions\"\n  - \"unmanaged functions\"\n  - \"COM interop, platform invoke\"\n  - \"platform invoke, about platform invoke\"\n  - \"DLL functions, consuming unmanaged\"\n  - \"interoperation with unmanaged code, DLL functions\"\n  - \"interoperation with unmanaged code, platform invoke\"\n  - \"platform invoke\"\n  - \"DLL functions\"\nms.assetid: eca7606e-ebfb-4f47-b8d9-289903fdc045\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"\n---\n# Consuming Unmanaged DLL Functions\nPlatform invoke is a service that enables managed code to call unmanaged functions implemented in dynamic link libraries (DLLs), such as those in the Windows API. It locates and invokes an exported function and marshals its arguments (integers, strings, arrays, structures, and so on) across the interoperation boundary as needed.  \n  \n This section introduces tasks associated with consuming unmanaged DLL functions and provides more information about platform invoke. In addition to the following tasks, there are general considerations and a link providing additional information and examples.  \n  \n#### To consume exported DLL functions  \n  \n1.  [Identify functions in DLLs](../../../docs/framework/interop/identifying-functions-in-dlls.md).  \n  \n     Minimally, you must specify the name of the function and name of the DLL that contains it.  \n  \n2.  [Create a class to hold DLL functions](../../../docs/framework/interop/creating-a-class-to-hold-dll-functions.md).  \n  \n     You can use an existing class, create an individual class for each unmanaged function, or create one class that contains a set of related unmanaged functions.  \n  \n3.  [Create prototypes in managed code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md).  \n  \n     [Visual Basic] Use the **Declare** statement with the **Function** and **Lib** keywords. In some rare cases, you can use the **DllImportAttribute** with the **Shared Function** keywords. These cases are explained later in this section.  \n  \n     [C#] Use the **DllImportAttribute** to identify the DLL and function. Mark the method with the **static** and **extern** modifiers.  \n  \n     [C++] Use the **DllImportAttribute** to identify the DLL and function. Mark the wrapper method or function with **extern \"C\"**.  \n  \n4.  [Call a DLL function](../../../docs/framework/interop/calling-a-dll-function.md).  \n  \n     Call the method on your managed class as you would any other managed method. [Passing structures](../../../docs/framework/interop/passing-structures.md) and [implementing callback functions](../../../docs/framework/interop/callback-functions.md) are special cases.  \n  \n For examples that demonstrate how to construct .NET-based declarations to be used with platform invoke, see [Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md).  \n  \n## A closer look at platform invoke  \n Platform invoke relies on metadata to locate exported functions and marshal their arguments at run time. The following illustration shows this process.  \n  \n ![Diagram that shows a platform invoke call.](./media/consuming-unmanaged-dll-functions/platform-invoke-call.gif)  \n  \n When platform invoke calls an unmanaged function, it performs the following sequence of actions:  \n  \n1.  Locates the DLL containing the function.  \n  \n2.  Loads the DLL into memory.  \n  \n3.  Locates the address of the function in memory and pushes its arguments onto the stack, marshaling data as required.  \n  \n    > [!NOTE]\n    >  Locating and loading the DLL, and locating the address of the function in memory occur only on the first call to the function.  \n  \n4.  Transfers control to the unmanaged function.  \n  \n Platform invoke throws exceptions generated by the unmanaged function to the managed caller.\n\n## See also\n\n- [Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md)\n- [Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md)\n- [Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)\n","nodes":[{"pos":[4,550],"embed":true,"restype":"x-metadata","content":"title: \"Consuming Unmanaged DLL Functions\"\nms.date: \"03/30/2017\"\nhelpviewer_keywords: \n  - \"unmanaged functions, calling\"\n  - \"COM interop, DLL functions\"\n  - \"unmanaged functions\"\n  - \"COM interop, platform invoke\"\n  - \"platform invoke, about platform invoke\"\n  - \"DLL functions, consuming unmanaged\"\n  - \"interoperation with unmanaged code, DLL functions\"\n  - \"interoperation with unmanaged code, platform invoke\"\n  - \"platform invoke\"\n  - \"DLL functions\"\nms.assetid: eca7606e-ebfb-4f47-b8d9-289903fdc045\nauthor: \"rpetrusha\"\nms.author: \"ronpet\"","nodes":[{"content":"Consuming Unmanaged DLL Functions","nodes":[{"pos":[0,33],"content":"Consuming Unmanaged DLL Functions","nodes":[{"content":"Consuming Unmanaged DLL Functions","pos":[0,33]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[557,590],"content":"Consuming Unmanaged DLL Functions","linkify":"Consuming Unmanaged DLL Functions","nodes":[{"content":"Consuming Unmanaged DLL Functions","pos":[0,33]}]},{"content":"Platform invoke is a service that enables managed code to call unmanaged functions implemented in dynamic link libraries (DLLs), such as those in the Windows API.","pos":[591,753]},{"content":"It locates and invokes an exported function and marshals its arguments (integers, strings, arrays, structures, and so on) across the interoperation boundary as needed.","pos":[754,921]},{"content":"This section introduces tasks associated with consuming unmanaged DLL functions and provides more information about platform invoke.","pos":[928,1060]},{"content":"In addition to the following tasks, there are general considerations and a link providing additional information and examples.","pos":[1061,1187]},{"pos":[1198,1231],"content":"To consume exported DLL functions","linkify":"To consume exported DLL functions","nodes":[{"content":"To consume exported DLL functions","pos":[0,33]}]},{"pos":[1241,1336],"content":"<bpt id=\"p1\">[</bpt>Identify functions in DLLs<ept id=\"p1\">](../../../docs/framework/interop/identifying-functions-in-dlls.md)</ept>.","source":"[Identify functions in DLLs](../../../docs/framework/interop/identifying-functions-in-dlls.md)."},{"content":"Minimally, you must specify the name of the function and name of the DLL that contains it.","pos":[1347,1437]},{"pos":[1447,1561],"content":"<bpt id=\"p1\">[</bpt>Create a class to hold DLL functions<ept id=\"p1\">](../../../docs/framework/interop/creating-a-class-to-hold-dll-functions.md)</ept>.","source":"[Create a class to hold DLL functions](../../../docs/framework/interop/creating-a-class-to-hold-dll-functions.md)."},{"content":"You can use an existing class, create an individual class for each unmanaged function, or create one class that contains a set of related unmanaged functions.","pos":[1572,1730]},{"pos":[1740,1848],"content":"<bpt id=\"p1\">[</bpt>Create prototypes in managed code<ept id=\"p1\">](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)</ept>.","source":"[Create prototypes in managed code](../../../docs/framework/interop/creating-prototypes-in-managed-code.md)."},{"content":"[Visual Basic] Use the <bpt id=\"p1\">**</bpt>Declare<ept id=\"p1\">**</ept> statement with the <bpt id=\"p2\">**</bpt>Function<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Lib<ept id=\"p3\">**</ept> keywords.","pos":[1859,1947],"source":"[Visual Basic] Use the **Declare** statement with the **Function** and **Lib** keywords."},{"content":"In some rare cases, you can use the <bpt id=\"p1\">**</bpt>DllImportAttribute<ept id=\"p1\">**</ept> with the <bpt id=\"p2\">**</bpt>Shared Function<ept id=\"p2\">**</ept> keywords.","pos":[1948,2045],"source":" In some rare cases, you can use the **DllImportAttribute** with the **Shared Function** keywords."},{"content":"These cases are explained later in this section.","pos":[2046,2094]},{"content":"[C#] Use the <bpt id=\"p1\">**</bpt>DllImportAttribute<ept id=\"p1\">**</ept> to identify the DLL and function.","pos":[2105,2174],"source":"[C#] Use the **DllImportAttribute** to identify the DLL and function."},{"content":"Mark the method with the <bpt id=\"p1\">**</bpt>static<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>extern<ept id=\"p2\">**</ept> modifiers.","pos":[2175,2236],"source":" Mark the method with the **static** and **extern** modifiers."},{"content":"[C++] Use the <bpt id=\"p1\">**</bpt>DllImportAttribute<ept id=\"p1\">**</ept> to identify the DLL and function.","pos":[2247,2317],"source":"[C++] Use the **DllImportAttribute** to identify the DLL and function."},{"content":"Mark the wrapper method or function with <bpt id=\"p1\">**</bpt>extern \"C\"<ept id=\"p1\">**</ept>.","pos":[2318,2374],"source":" Mark the wrapper method or function with **extern \"C\"**."},{"pos":[2384,2465],"content":"<bpt id=\"p1\">[</bpt>Call a DLL function<ept id=\"p1\">](../../../docs/framework/interop/calling-a-dll-function.md)</ept>.","source":"[Call a DLL function](../../../docs/framework/interop/calling-a-dll-function.md)."},{"content":"Call the method on your managed class as you would any other managed method.","pos":[2476,2552]},{"content":"<bpt id=\"p1\">[</bpt>Passing structures<ept id=\"p1\">](../../../docs/framework/interop/passing-structures.md)</ept> and <bpt id=\"p2\">[</bpt>implementing callback functions<ept id=\"p2\">](../../../docs/framework/interop/callback-functions.md)</ept> are special cases.","pos":[2553,2740],"source":"[Passing structures](../../../docs/framework/interop/passing-structures.md) and [implementing callback functions](../../../docs/framework/interop/callback-functions.md) are special cases."},{"pos":[2747,2967],"content":"For examples that demonstrate how to construct .NET-based declarations to be used with platform invoke, see <bpt id=\"p1\">[</bpt>Marshaling Data with Platform Invoke<ept id=\"p1\">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept>.","source":"For examples that demonstrate how to construct .NET-based declarations to be used with platform invoke, see [Marshaling Data with Platform Invoke](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)."},{"pos":[2976,3008],"content":"A closer look at platform invoke","linkify":"A closer look at platform invoke","nodes":[{"content":"A closer look at platform invoke","pos":[0,32]}]},{"content":"Platform invoke relies on metadata to locate exported functions and marshal their arguments at run time.","pos":[3012,3116]},{"content":"The following illustration shows this process.","pos":[3117,3163]},{"content":"Diagram that shows a platform invoke call.","pos":[3172,3214]},{"content":"When platform invoke calls an unmanaged function, it performs the following sequence of actions:","pos":[3290,3386]},{"content":"Locates the DLL containing the function.","pos":[3396,3436]},{"content":"Loads the DLL into memory.","pos":[3446,3472]},{"content":"Locates the address of the function in memory and pushes its arguments onto the stack, marshaling data as required.","pos":[3482,3597]},{"pos":[3609,3750],"content":"[!NOTE]\nLocating and loading the DLL, and locating the address of the function in memory occur only on the first call to the function.","leadings":["","    >  "],"nodes":[{"content":"Locating and loading the DLL, and locating the address of the function in memory occur only on the first call to the function.","pos":[8,134]}]},{"content":"Transfers control to the unmanaged function.","pos":[3760,3804]},{"content":"Platform invoke throws exceptions generated by the unmanaged function to the managed caller.","pos":[3811,3903]},{"pos":[3908,3916],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3920,3998],"content":"<bpt id=\"p1\">[</bpt>Interoperating with Unmanaged Code<ept id=\"p1\">](../../../docs/framework/interop/index.md)</ept>","source":"[Interoperating with Unmanaged Code](../../../docs/framework/interop/index.md)"},{"pos":[4001,4088],"content":"<bpt id=\"p1\">[</bpt>Platform Invoke Examples<ept id=\"p1\">](../../../docs/framework/interop/platform-invoke-examples.md)</ept>","source":"[Platform Invoke Examples](../../../docs/framework/interop/platform-invoke-examples.md)"},{"pos":[4091,4166],"content":"<bpt id=\"p1\">[</bpt>Interop Marshaling<ept id=\"p1\">](../../../docs/framework/interop/interop-marshaling.md)</ept>","source":"[Interop Marshaling](../../../docs/framework/interop/interop-marshaling.md)"}]}