{"content":"---\ntitle: \"How to: Find Existing Files and Directories in Isolated Storage\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"stores, finding files and directories\"\n  - \"locating files in isolated storage file\"\n  - \"directories [.NET Framework], isolated storage\"\n  - \"isolated storage, finding files and directories\"\n  - \"data storage using isolated storage, finding files and directories\"\n  - \"files [.NET Framework], isolated storage\"\n  - \"data stores, finding files and directories\"\n  - \"locating directories in isolated storage file\"\n  - \"storing data using isolated storage, finding files and directories\"\nms.assetid: eb28458a-6161-4e7a-9ada-30ef93761b5c\nauthor: \"mairaw\"\nms.author: \"mairaw\"\n---\n# How to: Find Existing Files and Directories in Isolated Storage\n\nTo search for a directory in isolated storage, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A?displayProperty=nameWithType> method. This method takes a string that represents a search pattern. You can use both single-character (?) and multi-character (\\*) wildcard characters in the search pattern, but the wildcard characters must appear in the final portion of the name. For example, `directory1/*ect*` is a valid search string, but `*ect*/directory2` is not.  \n  \n To search for a file, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A?displayProperty=nameWithType> method. The restriction for wildcard characters in search strings that applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> also applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A>.  \n  \n Neither of these methods is recursive; the <xref:System.IO.IsolatedStorage.IsolatedStorageFile> class does not supply any methods for listing all directories or files in your store. However, recursive methods are shown in the following code example.  \n  \n## Example  \n The following code example illustrates how to create files and directories in an isolated store. First, a store that is isolated for user, domain, and assembly is retrieved and placed in the `isoStore` variable. The <xref:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory%2A> method is used to set up a few different directories, and the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.IsolatedStorage.IsolatedStorageFile%29> constructor creates some files in these directories. The code then loops through the results of the `GetAllDirectories` method. This method uses <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> to find all the directory names in the current directory. These names are stored in an array, and then `GetAllDirectories` calls itself, passing in each directory it has found. As a result, all the directory names are returned in an array. Next, the code calls the `GetAllFiles` method. This method calls `GetAllDirectories` to find out the names of all the directories, and then it checks each directory for files by using the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A> method. The result is returned in an array for display.  \n  \n [!code-cpp[Conceptual.IsolatedStorage#9](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.isolatedstorage/cpp/source8.cpp#9)]\n [!code-csharp[Conceptual.IsolatedStorage#9](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.isolatedstorage/cs/source8.cs#9)]\n [!code-vb[Conceptual.IsolatedStorage#9](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.isolatedstorage/vb/source8.vb#9)]  \n  \n## See also\n\n- <xref:System.IO.IsolatedStorage.IsolatedStorageFile>\n- [Isolated Storage](../../../docs/standard/io/isolated-storage.md)\n","nodes":[{"pos":[4,772],"embed":true,"restype":"x-metadata","content":"title: \"How to: Find Existing Files and Directories in Isolated Storage\"\nms.date: \"03/30/2017\"\nms.technology: dotnet-standard\ndev_langs: \n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords: \n  - \"stores, finding files and directories\"\n  - \"locating files in isolated storage file\"\n  - \"directories [.NET Framework], isolated storage\"\n  - \"isolated storage, finding files and directories\"\n  - \"data storage using isolated storage, finding files and directories\"\n  - \"files [.NET Framework], isolated storage\"\n  - \"data stores, finding files and directories\"\n  - \"locating directories in isolated storage file\"\n  - \"storing data using isolated storage, finding files and directories\"\nms.assetid: eb28458a-6161-4e7a-9ada-30ef93761b5c\nauthor: \"mairaw\"\nms.author: \"mairaw\"","nodes":[{"content":"How to: Find Existing Files and Directories in Isolated Storage","nodes":[{"pos":[0,63],"content":"How to: Find Existing Files and Directories in Isolated Storage","nodes":[{"content":"How to: Find Existing Files and Directories in Isolated Storage","pos":[0,63]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[779,842],"content":"How to: Find Existing Files and Directories in Isolated Storage","linkify":"How to: Find Existing Files and Directories in Isolated Storage","nodes":[{"content":"How to: Find Existing Files and Directories in Isolated Storage","pos":[0,63]}]},{"content":"To search for a directory in isolated storage, use the <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[844,1009],"source":"To search for a directory in isolated storage, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A?displayProperty=nameWithType> method."},{"content":"This method takes a string that represents a search pattern.","pos":[1010,1070]},{"content":"You can use both single-character (?) and multi-character (<ph id=\"ph1\">\\*</ph>) wildcard characters in the search pattern, but the wildcard characters must appear in the final portion of the name.","pos":[1071,1250],"source":" You can use both single-character (?) and multi-character (\\*) wildcard characters in the search pattern, but the wildcard characters must appear in the final portion of the name."},{"content":"For example, <ph id=\"ph1\">`directory1/*ect*`</ph> is a valid search string, but <ph id=\"ph2\">`*ect*/directory2`</ph> is not.","pos":[1251,1339],"source":" For example, `directory1/*ect*` is a valid search string, but `*ect*/directory2` is not."},{"content":"To search for a file, use the <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A?displayProperty=nameWithType&gt;</ph> method.","pos":[1346,1481],"source":"To search for a file, use the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A?displayProperty=nameWithType> method."},{"content":"The restriction for wildcard characters in search strings that applies to <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A&gt;</ph> also applies to <ph id=\"ph2\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A&gt;</ph>.","pos":[1482,1715],"source":" The restriction for wildcard characters in search strings that applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> also applies to <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A>."},{"content":"Neither of these methods is recursive; the <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> class does not supply any methods for listing all directories or files in your store.","pos":[1722,1903],"source":"Neither of these methods is recursive; the <xref:System.IO.IsolatedStorage.IsolatedStorageFile> class does not supply any methods for listing all directories or files in your store."},{"content":"However, recursive methods are shown in the following code example.","pos":[1904,1971]},{"pos":[1980,1987],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following code example illustrates how to create files and directories in an isolated store.","pos":[1991,2087]},{"content":"First, a store that is isolated for user, domain, and assembly is retrieved and placed in the <ph id=\"ph1\">`isoStore`</ph> variable.","pos":[2088,2202],"source":" First, a store that is isolated for user, domain, and assembly is retrieved and placed in the `isoStore` variable."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory%2A&gt;</ph> method is used to set up a few different directories, and the <ph id=\"ph2\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.IsolatedStorage.IsolatedStorageFile%29&gt;</ph> constructor creates some files in these directories.","pos":[2203,2548],"source":" The <xref:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory%2A> method is used to set up a few different directories, and the <xref:System.IO.IsolatedStorage.IsolatedStorageFileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.IsolatedStorage.IsolatedStorageFile%29> constructor creates some files in these directories."},{"content":"The code then loops through the results of the <ph id=\"ph1\">`GetAllDirectories`</ph> method.","pos":[2549,2623],"source":" The code then loops through the results of the `GetAllDirectories` method."},{"content":"This method uses <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A&gt;</ph> to find all the directory names in the current directory.","pos":[2624,2772],"source":" This method uses <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames%2A> to find all the directory names in the current directory."},{"content":"These names are stored in an array, and then <ph id=\"ph1\">`GetAllDirectories`</ph> calls itself, passing in each directory it has found.","pos":[2773,2891],"source":" These names are stored in an array, and then `GetAllDirectories` calls itself, passing in each directory it has found."},{"content":"As a result, all the directory names are returned in an array.","pos":[2892,2954]},{"content":"Next, the code calls the <ph id=\"ph1\">`GetAllFiles`</ph> method.","pos":[2955,3001],"source":" Next, the code calls the `GetAllFiles` method."},{"content":"This method calls <ph id=\"ph1\">`GetAllDirectories`</ph> to find out the names of all the directories, and then it checks each directory for files by using the <ph id=\"ph2\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A&gt;</ph> method.","pos":[3002,3219],"source":" This method calls `GetAllDirectories` to find out the names of all the directories, and then it checks each directory for files by using the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames%2A> method."},{"content":"The result is returned in an array for display.","pos":[3220,3267]},{"pos":[3695,3703],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3762,3827],"content":"<bpt id=\"p1\">[</bpt>Isolated Storage<ept id=\"p1\">](../../../docs/standard/io/isolated-storage.md)</ept>","source":"[Isolated Storage](../../../docs/standard/io/isolated-storage.md)"}]}