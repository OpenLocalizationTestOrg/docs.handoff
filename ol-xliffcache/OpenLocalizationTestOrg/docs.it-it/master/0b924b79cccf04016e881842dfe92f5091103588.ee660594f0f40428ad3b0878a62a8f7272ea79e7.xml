{"content":"---\ntitle: \"Interoperable Object References | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: cb8da4c8-08ca-4220-a16b-e04c8f527f1b\ncaps.latest.revision: 7\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Interoperable Object References\nBy default the <xref:System.Runtime.Serialization.DataContractSerializer> serializes objects by value. You can use the <xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A> property to instruct the Data Contract Serializer to preserve object references when serializing objects of the type.  \n  \n## Generated XML  \n As an example, consider the following object:  \n  \n```  \n[DataContract]  \npublic class X  \n{  \n    SomeClass someInstance = new SomeClass();  \n    [DataMember]  \n    public SomeClass A = someInstance;  \n    [DataMember]  \n    public SomeClass B = someInstance;  \n}  \n  \npublic class SomeClass   \n{  \n}  \n  \n```  \n  \n With <xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A> set to `false` (the default), the following XML is generated:  \n  \n```  \n<X>  \n   <A>contents of someInstance</A>  \n   <B>contents of someInstance</B>  \n</X>  \n```  \n  \n With <xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A> set to `true`, the following XML is generated:  \n  \n```  \n<X>  \n   <A id=\"1\">contents of someInstance</A>  \n   <B ref=\"1\" />  \n</X>  \n```  \n  \n However, <xref:System.Runtime.Serialization.XsdDataContractExporter> does not describe the `id` and `ref` attributes in its schema, even when the `preserveObjectReferences` property is set to `true`.  \n  \n## Using IsReference  \n To generate object reference information that is valid according to the schema that describes it, apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to a type, and set the <xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A> flag to `true`. Using `IsReference` in the previous example class `X`:  \n  \n `[DataContract(IsReference=true)] public class X`  \n  \n `{`  \n  \n `SomeClass someInstance = new SomeClass();`  \n  \n `[DataMember]`  \n  \n `public SomeClass A = someInstance;`  \n  \n `[DataMember]`  \n  \n `public SomeClass B = someInstance;`  \n  \n `}`  \n  \n `public class SomeClass`  \n  \n `{`  \n  \n `}`  \n  \n The generated XML is as follows:  \n  \n `<X>`  \n  \n `<A id=\"1\">`  \n  \n `<Value>contents of A</Value>`  \n  \n `</A>`  \n  \n `<B ref=\"1\">`  \n  \n `</B>`  \n  \n `</X>`  \n  \n Using `IsReference` ensures compliance on message round-tripping. Without it, when a type is generated from schema, what is sent back as XML for that type is not necessarily compatible with the schema originally assumed. In other words, although the `id` and `ref` attributes were serialized, the original schema could have barred these attributes (or all attributes) from occurring in the XML. With `IsReference` applied to a data member, the member continues to be recognized as \"referenceable\" when roundtripped.  \n  \n## See Also  \n <xref:System.Runtime.Serialization.DataContractAttribute>   \n <xref:System.Runtime.Serialization.CollectionDataContractAttribute>   \n <xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A>   \n <xref:System.Runtime.Serialization.CollectionDataContractAttribute.IsReference%2A>","nodes":[{"pos":[12,60],"content":"Interoperable Object References | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Interoperable Object References | Microsoft Docs","pos":[0,48]}]},{"pos":[358,389],"content":"Interoperable Object References","linkify":"Interoperable Object References","nodes":[{"content":"Interoperable Object References","pos":[0,31]}]},{"content":"By default the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> serializes objects by value.","pos":[390,492],"source":"By default the <xref:System.Runtime.Serialization.DataContractSerializer> serializes objects by value."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A&gt;</ph> property to instruct the Data Contract Serializer to preserve object references when serializing objects of the type.","pos":[493,699],"source":" You can use the <xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A> property to instruct the Data Contract Serializer to preserve object references when serializing objects of the type."},{"pos":[708,721],"content":"Generated XML","linkify":"Generated XML","nodes":[{"content":"Generated XML","pos":[0,13]}]},{"content":"As an example, consider the following object:","pos":[725,770]},{"pos":[1042,1195],"content":"With <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A&gt;</ph> set to <ph id=\"ph2\">`false`</ph> (the default), the following XML is generated:","source":"With <xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A> set to `false` (the default), the following XML is generated:"},{"pos":[1304,1442],"content":"With <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A&gt;</ph> set to <ph id=\"ph2\">`true`</ph>, the following XML is generated:","source":"With <xref:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences%2A> set to `true`, the following XML is generated:"},{"pos":[1540,1739],"content":"However, <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> does not describe the <ph id=\"ph2\">`id`</ph> and <ph id=\"ph3\">`ref`</ph> attributes in its schema, even when the <ph id=\"ph4\">`preserveObjectReferences`</ph> property is set to <ph id=\"ph5\">`true`</ph>.","source":"However, <xref:System.Runtime.Serialization.XsdDataContractExporter> does not describe the `id` and `ref` attributes in its schema, even when the `preserveObjectReferences` property is set to `true`."},{"pos":[1748,1765],"content":"Using IsReference","linkify":"Using IsReference","nodes":[{"content":"Using IsReference","pos":[0,17]}]},{"content":"To generate object reference information that is valid according to the schema that describes it, apply the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute to a type, and set the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A&gt;</ph> flag to <ph id=\"ph3\">`true`</ph>.","pos":[1769,2056],"source":"To generate object reference information that is valid according to the schema that describes it, apply the <xref:System.Runtime.Serialization.DataContractAttribute> attribute to a type, and set the <xref:System.Runtime.Serialization.DataContractAttribute.IsReference%2A> flag to `true`."},{"content":"Using <ph id=\"ph1\">`IsReference`</ph> in the previous example class <ph id=\"ph2\">`X`</ph>:","pos":[2057,2111],"source":" Using `IsReference` in the previous example class `X`:"},{"content":"The generated XML is as follows:","pos":[2423,2455]},{"content":"Using <ph id=\"ph1\">`IsReference`</ph> ensures compliance on message round-tripping.","pos":[2589,2654],"source":"Using `IsReference` ensures compliance on message round-tripping."},{"content":"Without it, when a type is generated from schema, what is sent back as XML for that type is not necessarily compatible with the schema originally assumed.","pos":[2655,2809]},{"content":"In other words, although the <ph id=\"ph1\">`id`</ph> and <ph id=\"ph2\">`ref`</ph> attributes were serialized, the original schema could have barred these attributes (or all attributes) from occurring in the XML.","pos":[2810,2983],"source":" In other words, although the `id` and `ref` attributes were serialized, the original schema could have barred these attributes (or all attributes) from occurring in the XML."},{"content":"With <ph id=\"ph1\">`IsReference`</ph> applied to a data member, the member continues to be recognized as \"referenceable\" when roundtripped.","pos":[2984,3104],"source":" With `IsReference` applied to a data member, the member continues to be recognized as \"referenceable\" when roundtripped."},{"pos":[3113,3121],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}