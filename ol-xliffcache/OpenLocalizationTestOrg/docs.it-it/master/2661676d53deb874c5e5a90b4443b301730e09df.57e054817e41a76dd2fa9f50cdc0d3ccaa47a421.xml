{"content":"---\ntitle: \". operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/25/2019\nf1_keywords: \n  - \"._CSharpKeyword\"\nhelpviewer_keywords: \n  - \"member access operator (.) [C#]\"\n  - \". operator [C#]\"\n  - \"dot operator (.) [C#]\"\nms.assetid: a1f54b52-b686-4ae5-a48e-a2a9ebd0eb7b\n---\n# . operator (C# Reference)\n\nThe dot, `.`, is typically used for member access.\n\nYou use the `.` token to access a member of a namespace or a type, as the following examples demonstrate:\n\n- Use `.` to access a nested namespace within a namespace, as the following example of a [`using` directive](../keywords/using-directive.md) shows:\n\n  [!code-csharp[nested namespaces](~/samples/snippets/csharp/language-reference/operators/MemberAccessExamples.cs#NestedNamespace)]\n\n- Use `.` to form a *qualified name* to access a type within a namespace, as the following code shows:\n\n  [!code-csharp[qualified name](~/samples/snippets/csharp/language-reference/operators/MemberAccessExamples.cs#QualifiedName)]\n\n  Use the [`using` directive](../keywords/using-directive.md) to make the use of qualified names optional.\n\n- Use `.` to access [type members](../../programming-guide/classes-and-structs/index.md#members), static and non-static, as the following code shows:\n\n  [!code-csharp-interactive[type members](~/samples/snippets/csharp/language-reference/operators/MemberAccessExamples.cs#TypeMemberAccess)]\n\nYou can also use `.` to invoke an [extension method](../../programming-guide/classes-and-structs/extension-methods.md).\n\n## Operator overloadability\n\nThe operator `.` cannot be overloaded.\n\n## C# language specification\n\nFor more information, see the [Member access](~/_csharplang/spec/expressions.md#member-access) section of the [C# language specification](../language-specification/index.md).\n\n## See also\n\n- [C# Reference](../index.md)\n- [C# Programming Guide](../../programming-guide/index.md)\n- [C# Operators](index.md)\n- [?. and ?[] operators](null-conditional-operators.md)","nodes":[{"pos":[4,273],"embed":true,"restype":"x-metadata","content":"title: \". operator - C# Reference\"\nms.custom: seodec18\nms.date: 02/25/2019\nf1_keywords: \n  - \"._CSharpKeyword\"\nhelpviewer_keywords: \n  - \"member access operator (.) [C#]\"\n  - \". operator [C#]\"\n  - \"dot operator (.) [C#]\"\nms.assetid: a1f54b52-b686-4ae5-a48e-a2a9ebd0eb7b","nodes":[{"content":". operator - C# Reference","nodes":[{"pos":[0,25],"content":". operator - C# Reference","nodes":[{"content":". operator - C# Reference","pos":[0,25],"nodes":[{"content":".","pos":[0,1]},{"content":"operator - C# Reference","pos":[2,25]}]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[280,305],"content":". operator (C# Reference)","linkify":". operator (C# Reference)","nodes":[{"content":". operator (C# Reference)","pos":[0,25],"nodes":[{"content":".","pos":[0,1]},{"content":"operator (C# Reference)","pos":[2,25]}]}]},{"pos":[307,357],"content":"The dot, <ph id=\"ph1\">`.`</ph>, is typically used for member access.","source":"The dot, `.`, is typically used for member access."},{"pos":[359,464],"content":"You use the <ph id=\"ph1\">`.`</ph> token to access a member of a namespace or a type, as the following examples demonstrate:","source":"You use the `.` token to access a member of a namespace or a type, as the following examples demonstrate:"},{"pos":[468,613],"content":"Use <ph id=\"ph1\">`.`</ph> to access a nested namespace within a namespace, as the following example of a <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`using`</ph> directive<ept id=\"p1\">](../keywords/using-directive.md)</ept> shows:","source":"Use `.` to access a nested namespace within a namespace, as the following example of a [`using` directive](../keywords/using-directive.md) shows:"},{"pos":[750,850],"content":"Use <ph id=\"ph1\">`.`</ph> to form a <bpt id=\"p1\">*</bpt>qualified name<ept id=\"p1\">*</ept> to access a type within a namespace, as the following code shows:","source":"Use `.` to form a *qualified name* to access a type within a namespace, as the following code shows:"},{"pos":[982,1086],"content":"Use the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`using`</ph> directive<ept id=\"p1\">](../keywords/using-directive.md)</ept> to make the use of qualified names optional.","source":"Use the [`using` directive](../keywords/using-directive.md) to make the use of qualified names optional."},{"pos":[1090,1237],"content":"Use <ph id=\"ph1\">`.`</ph> to access <bpt id=\"p1\">[</bpt>type members<ept id=\"p1\">](../../programming-guide/classes-and-structs/index.md#members)</ept>, static and non-static, as the following code shows:","source":"Use `.` to access [type members](../../programming-guide/classes-and-structs/index.md#members), static and non-static, as the following code shows:"},{"pos":[1380,1499],"content":"You can also use <ph id=\"ph1\">`.`</ph> to invoke an <bpt id=\"p1\">[</bpt>extension method<ept id=\"p1\">](../../programming-guide/classes-and-structs/extension-methods.md)</ept>.","source":"You can also use `.` to invoke an [extension method](../../programming-guide/classes-and-structs/extension-methods.md)."},{"pos":[1504,1528],"content":"Operator overloadability","linkify":"Operator overloadability","nodes":[{"content":"Operator overloadability","pos":[0,24]}]},{"pos":[1530,1568],"content":"The operator <ph id=\"ph1\">`.`</ph> cannot be overloaded.","source":"The operator `.` cannot be overloaded."},{"pos":[1573,1598],"content":"C# language specification","linkify":"C# language specification","nodes":[{"content":"C# language specification","pos":[0,25]}]},{"pos":[1600,1774],"content":"For more information, see the <bpt id=\"p1\">[</bpt>Member access<ept id=\"p1\">](~/_csharplang/spec/expressions.md#member-access)</ept> section of the <bpt id=\"p2\">[</bpt>C# language specification<ept id=\"p2\">](../language-specification/index.md)</ept>.","source":"For more information, see the [Member access](~/_csharplang/spec/expressions.md#member-access) section of the [C# language specification](../language-specification/index.md)."},{"pos":[1779,1787],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[1791,1818],"content":"<bpt id=\"p1\">[</bpt>C# Reference<ept id=\"p1\">](../index.md)</ept>","source":"[C# Reference](../index.md)"},{"pos":[1821,1877],"content":"<bpt id=\"p1\">[</bpt>C# Programming Guide<ept id=\"p1\">](../../programming-guide/index.md)</ept>","source":"[C# Programming Guide](../../programming-guide/index.md)"},{"pos":[1880,1904],"content":"<bpt id=\"p1\">[</bpt>C# Operators<ept id=\"p1\">](index.md)</ept>","source":"[C# Operators](index.md)"},{"pos":[1907,1960],"content":"<bpt id=\"p1\">[</bpt>?. and ?[] operators<ept id=\"p1\">](null-conditional-operators.md)</ept>","source":"[?. and ?[] operators](null-conditional-operators.md)"}]}