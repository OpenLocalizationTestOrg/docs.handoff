{"content":"---\ntitle: \"How to: Handle a Routed Event | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"routed events, handling\"\n  - \"bubbling events\"\nms.assetid: 157787b4-f469-4047-8777-5b034145f32e\ncaps.latest.revision: 23\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Handle a Routed Event\nThis example shows how bubbling events work and how to write a handler that can process the routed event data.  \n  \n## Example  \n In [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)], elements are arranged in an element tree structure. The parent element can participate in the handling of events that are initially raised by child elements in the element tree. This is possible because of event routing.  \n  \n Routed events typically follow one of two routing strategies, bubbling or tunneling. This example focuses on the bubbling event and uses the <xref:System.Windows.Controls.Primitives.ButtonBase.Click?displayProperty=fullName> event to show how routing works.  \n  \n The following example creates two <xref:System.Windows.Controls.Button> controls and uses [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] attribute syntax to attach an event handler to a common parent element, which in this example is <xref:System.Windows.Controls.StackPanel>. Instead of attaching individual event handlers for each <xref:System.Windows.Controls.Button> child element, the example uses attribute syntax to attach the event handler to the <xref:System.Windows.Controls.StackPanel> parent element. This event-handling pattern shows how to use event routing as a technique for reducing the number of elements where a handler is attached. All the bubbling events for each <xref:System.Windows.Controls.Button> route through the parent element.  \n  \n Note that on the parent <xref:System.Windows.Controls.StackPanel> element, the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event name specified as the attribute is partially qualified by naming the <xref:System.Windows.Controls.Button> class. The <xref:System.Windows.Controls.Button> class is a <xref:System.Windows.Controls.Primitives.ButtonBase> derived class that has the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event in its members listing. This partial qualification technique for attaching an event handler is necessary if the event that is being handled does not exist in the members listing of the element where the routed event handler is attached.  \n  \n [!code-xml[RoutedEventHandle#XAML](../../../../samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventHandle/CSharp/default.xaml#xaml)]  \n  \n The following example handles the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.  The example reports which element handles the event and which element raises the event. The event handler is executed when the user clicks either button.  \n  \n [!code-csharp[RoutedEventHandle#Handler](../../../../samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventHandle/CSharp/default.xaml.cs#handler)]\n [!code-vb[RoutedEventHandle#Handler](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventHandle/VisualBasic/MainWindow.xaml.vb#handler)]  \n  \n## See Also  \n <xref:System.Windows.RoutedEvent>   \n [Input Overview](../../../../docs/framework/wpf/advanced/input-overview.md)   \n [Routed Events Overview](../../../../docs/framework/wpf/advanced/routed-events-overview.md)   \n [How-to Topics](../../../../docs/framework/wpf/advanced/events-how-to-topics.md)   \n [XAML Syntax In Detail](../../../../docs/framework/wpf/advanced/xaml-syntax-in-detail.md)","nodes":[{"pos":[4,433],"embed":true,"restype":"x-metadata","content":"title: \"How to: Handle a Routed Event | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-wpf\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nhelpviewer_keywords: \n  - \"routed events, handling\"\n  - \"bubbling events\"\nms.assetid: 157787b4-f469-4047-8777-5b034145f32e\ncaps.latest.revision: 23\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"","nodes":[{"content":"How to: Handle a Routed Event | Microsoft Docs","nodes":[{"pos":[0,46],"content":"How to: Handle a Routed Event | Microsoft Docs","nodes":[{"content":"How to: Handle a Routed Event | Microsoft Docs","pos":[0,46]}]}],"path":["title"]}],"yml":true},{"pos":[440,469],"content":"How to: Handle a Routed Event","linkify":"How to: Handle a Routed Event","nodes":[{"content":"How to: Handle a Routed Event","pos":[0,29]}]},{"content":"This example shows how bubbling events work and how to write a handler that can process the routed event data.","pos":[470,580]},{"pos":[589,596],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>, elements are arranged in an element tree structure.","pos":[600,735],"source":"In [!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)], elements are arranged in an element tree structure."},{"content":"The parent element can participate in the handling of events that are initially raised by child elements in the element tree.","pos":[736,861]},{"content":"This is possible because of event routing.","pos":[862,904]},{"content":"Routed events typically follow one of two routing strategies, bubbling or tunneling.","pos":[911,995]},{"content":"This example focuses on the bubbling event and uses the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click?displayProperty=fullName&gt;</ph> event to show how routing works.","pos":[996,1168],"source":" This example focuses on the bubbling event and uses the <xref:System.Windows.Controls.Primitives.ButtonBase.Click?displayProperty=fullName> event to show how routing works."},{"content":"The following example creates two <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> controls and uses <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> attribute syntax to attach an event handler to a common parent element, which in this example is <ph id=\"ph3\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.","pos":[1175,1476],"source":"The following example creates two <xref:System.Windows.Controls.Button> controls and uses [!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)] attribute syntax to attach an event handler to a common parent element, which in this example is <xref:System.Windows.Controls.StackPanel>."},{"content":"Instead of attaching individual event handlers for each <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> child element, the example uses attribute syntax to attach the event handler to the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> parent element.","pos":[1477,1712],"source":" Instead of attaching individual event handlers for each <xref:System.Windows.Controls.Button> child element, the example uses attribute syntax to attach the event handler to the <xref:System.Windows.Controls.StackPanel> parent element."},{"content":"This event-handling pattern shows how to use event routing as a technique for reducing the number of elements where a handler is attached.","pos":[1713,1851]},{"content":"All the bubbling events for each <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> route through the parent element.","pos":[1852,1956],"source":" All the bubbling events for each <xref:System.Windows.Controls.Button> route through the parent element."},{"content":"Note that on the parent <ph id=\"ph1\">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> element, the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event name specified as the attribute is partially qualified by naming the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Button&gt;</ph> class.","pos":[1963,2220],"source":"Note that on the parent <xref:System.Windows.Controls.StackPanel> element, the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event name specified as the attribute is partially qualified by naming the <xref:System.Windows.Controls.Button> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> class is a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> derived class that has the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event in its members listing.","pos":[2221,2442],"source":" The <xref:System.Windows.Controls.Button> class is a <xref:System.Windows.Controls.Primitives.ButtonBase> derived class that has the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event in its members listing."},{"content":"This partial qualification technique for attaching an event handler is necessary if the event that is being handled does not exist in the members listing of the element where the routed event handler is attached.","pos":[2443,2655]},{"content":"The following example handles the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.","pos":[2800,2899],"source":"The following example handles the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."},{"content":"The example reports which element handles the event and which element raises the event.","pos":[2901,2988]},{"content":"The event handler is executed when the user clicks either button.","pos":[2989,3054]},{"pos":[3367,3375],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.RoutedEvent&gt;</ph>","pos":[3379,3412],"source":"<xref:System.Windows.RoutedEvent> "},{"content":"<bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/input-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[3417,3493],"source":"[Input Overview](../../../../docs/framework/wpf/advanced/input-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/routed-events-overview.md)</ept><ph id=\"ph1\"> </ph>","pos":[3497,3589],"source":"[Routed Events Overview](../../../../docs/framework/wpf/advanced/routed-events-overview.md) "},{"content":"<bpt id=\"p1\">[</bpt>How-to Topics<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/events-how-to-topics.md)</ept><ph id=\"ph1\"> </ph>","pos":[3593,3674],"source":"[How-to Topics](../../../../docs/framework/wpf/advanced/events-how-to-topics.md) "},{"content":"<bpt id=\"p1\">[</bpt>XAML Syntax In Detail<ept id=\"p1\">](../../../../docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>","pos":[3678,3767],"source":"[XAML Syntax In Detail](../../../../docs/framework/wpf/advanced/xaml-syntax-in-detail.md)"}]}