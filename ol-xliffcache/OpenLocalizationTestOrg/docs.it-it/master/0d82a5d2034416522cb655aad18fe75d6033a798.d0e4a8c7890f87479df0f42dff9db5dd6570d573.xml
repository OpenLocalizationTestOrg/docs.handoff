{"content":"---\ntitle: \"Using the WCF Moniker with COM Clients | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-clr\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\nms.assetid: e2799bfe-88bd-49d7-9d6d-ac16a9b16b04\ncaps.latest.revision: 34\nauthor: \"Erikre\"\nms.author: \"erikre\"\nmanager: \"erikre\"\n---\n# Using the WCF Moniker with COM Clients\nThis sample demonstrates how to use the [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service moniker to integrate Web services into COM-based development environments, such as Microsoft Office Visual Basic for Applications (Office VBA) or Visual Basic 6.0. This sample consists of a Windows Script Host client (.vbs), a supporting client library (.dll), and a service library (.dll) hosted by Internet Information Services (IIS). The service is a calculator service and the COM client calls math operations—Add, Subtract, Multiply, and Divide—on the service. Client activity is visible in the message box windows.  \n  \n> [!NOTE]\n>  The set-up procedure and build instructions for this sample are located at the end of this topic.  \n  \n> [!IMPORTANT]\n>  The samples may already be installed on your computer. Check for the following (default) directory before continuing.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples`  \n>   \n>  If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples. This sample is located in the following directory.  \n>   \n>  `<InstallDrive>:\\WF_WCF_Samples\\WCF\\Basic\\Services\\Interop\\COM`  \n  \n The service implements an `ICalculator` contract defined as shown in the following code example.  \n  \n```  \n[ServiceContract(Namespace=\"http://Microsoft.ServiceModel.Samples\")]  \npublic interface ICalculator  \n{  \n    [OperationContract]  \n    double Add(double n1, double n2);  \n    [OperationContract]  \n    double Subtract(double n1, double n2);  \n    [OperationContract]  \n    double Multiply(double n1, double n2);  \n    [OperationContract]  \n    double Divide(double n1, double n2);  \n}  \n```  \n  \n The sample demonstrates the three alternative approaches for using the moniker:  \n  \n-   Typed contract – The contract is registered as a COM visible type on the client computer.  \n  \n-   WSDL contract – The contract is supplied in the form of a WSDL document.  \n  \n-   Metadata Exchange contract – The contract is retrieved at runtime from a Metadata Exchange (MEX) endpoint.  \n  \n## Typed Contract  \n To use the moniker with a typed contract use, appropriately attributed types for the service contract must be registered with COM. First, a client must be generated by using the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md). Run the following command from a command prompt in the client directory to generate the typed proxy.  \n  \n```  \nsvcutil.exe /n:http://Microsoft.ServiceModel.Samples,Microsoft.ServiceModel.Samples http://localhost/servicemodelsamples/service.svc /out:generatedClient.cs  \n  \n```  \n  \n This class must be included in a project and the project should be configured to generate a COM-visible, signed assembly when compiled. The following attribute should be included in the AssemblyInfo.cs file.  \n  \n```  \n[assembly: ComVisible(true)]  \n  \n```  \n  \n After building the project, register the COM-visible types by using `regasm` as shown in the following example.  \n  \n```  \nregasm.exe /tlb:CalcProxy.tlb client.dll  \n```  \n  \n The assembly that is created should be added to the Global Assembly Cache. Though not strictly required, this simplifies the process of the runtime locating the assembly. The following command adds the assembly to the Global Assembly Cache.  \n  \n```  \ngacutil.exe /i client.dll  \n```  \n  \n> [!NOTE]\n>  The service moniker requires only the type registration and does not use the proxy to communicate with the service.  \n  \n ComCalcClient.vbs client application uses the `GetObject` function to construct a proxy for the service, using the service moniker syntax to specify the address, binding, and contract for the service.  \n  \n```  \nSet typedServiceMoniker = GetObject(  \n\"service4:address=http://localhost/ServiceModelSamples/service.svc, binding=wsHttpBinding,   \ncontractType={9213C6D2-5A6F-3D26-839B-3BA9B82228D3}\")  \n```  \n  \n The parameters used by the moniker specify:  \n  \n-   The address of the service endpoint.  \n  \n-   The binding that the client should use to connect with that endpoint. In this case, the system-defined wsHttpBinding is used though custom bindings can be defined in client configuration files. For use with the Windows Script Host, the custom binding is defined in a Cscript.exe.config file in the same directory as Cscript.exe.  \n  \n-   The type of the contract that is supported at the endpoint. This is the type that was generated and registered above. Because Visual Basic script does not provide a strongly-typed COM environment, an identifier for the contract must be specified. This GUID is the `interfaceID` from CalcProxy.tlb, which can be viewed by using COM tools such as the OLE/COM Object Viewer (OleView.exe). For strongly-typed environments such as Office VBA or Visual Basic 6.0, adding an explicit reference to the type library and then declaring the type of the proxy object can be used in place of the contract parameter. This also provides IntelliSense support during client application development.  \n  \n Having constructed the proxy instance with the service moniker, the client application can call methods on the proxy, which results in the service moniker infrastructure calling the corresponding service operations.  \n  \n```  \n' Call the service operations using the moniker object  \nWScript.Echo \"Typed service moniker: 100 + 15.99 = \" & typedServiceMoniker.Add(100, 15.99)  \n  \n```  \n  \n When you run the sample, the operation response is displayed in a Windows Script Host message box window. This demonstrates a COM client making COM calls using the typed moniker to communicate with a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service. Despite the use of COM in the client application, the communication with the service consists only of Web service calls.  \n  \n## WSDL Contract  \n To use the moniker with a WSDL contract, no client library registration is required but the WSDL contract for the service must be retrieved through an out-of-band mechanism such as using a browser to access the WSDL endpoint for the service. The moniker can then access that contract at execution time.  \n  \n The ComCalcClient.vbs client application uses the `FileSystemObject` to access the locally saved WSDL file and then again uses the `GetObject` function to construct a proxy for the service.  \n  \n```  \n' Open the WSDL contract file and read it all into the wsdlContract string  \nConst ForReading = 1  \nSet objFSO = CreateObject(\"Scripting.FileSystemObject\")  \nSet objFile = objFSO.OpenTextFile(\"serviceWsdl.xml\", ForReading)  \nwsdlContract = objFile.ReadAll  \nobjFile.Close  \n  \n' Create a string for the service moniker including the content of the WSDL contract file  \nwsdlMonikerString = \"service4:address='http://localhost/ServiceModelSamples/service.svc'\"  \nwsdlMonikerString = wsdlMonikerString + \", binding=WSHttpBinding_ICalculator, bindingNamespace='http://Microsoft.ServiceModel.Samples'\"  \nwsdlMonikerString = wsdlMonikerString + \", wsdl='\" & wsdlContract & \"'\"  \nwsdlMonikerString = wsdlMonikerString + \", contract=ICalculator, contractNamespace='http://Microsoft.ServiceModel.Samples'\"  \n  \n' Create the service moniker object  \nSet wsdlServiceMoniker = GetObject(wsdlMonikerString)  \n```  \n  \n The parameters used by the moniker specify:  \n  \n-   The address of the service endpoint.  \n  \n-   The binding that the client should use to connect with that endpoint and the namespace in which that binding is defined. In this case, the `wsHttpBinding_ICalculator` is used.  \n  \n-   The WSDL that defines the contract. In this case this is the string that has been read from the serviceWsdl.xml file.  \n  \n-   The name and namespace of the contract. This identification is required because the WSDL may contain more than one contract.  \n  \n    > [!NOTE]\n    >  By default, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services generate separate WSDL files for each namespace that the use. These are linked with the use of the WSDL import construct. Because the moniker expects a single WSDL definition, the service must either use a single namespace as demonstrated in this sample or the separate files must be manually merged.  \n  \n Having constructed the proxy instance with the service moniker, the client application can call methods on the proxy, which results in the service moniker infrastructure calling the corresponding service operations.  \n  \n```  \n' Call the service operations using the moniker object  \nWScript.Echo \"WSDL service moniker: 145 - 76.54 = \" & wsdlServiceMoniker.Subtract(145, 76.54)  \n  \n```  \n  \n When you run the sample, the operation response is displayed in a Windows Script Host message box window. This demonstrates a COM client making COM calls using the moniker with a WSDL contract to communicate with a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service.  \n  \n## Metadata Exchange Contract  \n To use the moniker with a MEX contract, as with the WSDL contract, no client registration is required. The contract for the service is retrieved at execution time through the internal use of Metadata Exchange.  \n  \n The ComCalcClient.vbs client application again uses the `GetObject` function to construct a proxy for the service.  \n  \n```  \n' Create a string for the service moniker specifying the address to retrieve the service metadata from  \nmexMonikerString = \"service4:mexAddress='http://localhost/servicemodelsamples/service.svc/mex'\"  \nmexMonikerString = mexMonikerString + \", address='http://localhost/ServiceModelSamples/service.svc'\"  \nmexMonikerString = mexMonikerString + \", binding=WSHttpBinding_ICalculator, bindingNamespace='http://Microsoft.ServiceModel.Samples'\"  \nmexMonikerString = mexMonikerString + \", contract=ICalculator, contractNamespace='http://Microsoft.ServiceModel.Samples'\"  \n  \n' Create the service moniker object  \nSet mexServiceMoniker = GetObject(mexMonikerString)  \n```  \n  \n The parameters used by the moniker specify:  \n  \n-   The address of the service metadata exchange endpoint.  \n  \n-   The address of the service endpoint.  \n  \n-   The binding that the client should use to connect with that endpoint and the namespace in which that binding is defined. In this case, the `wsHttpBinding_ICalculator` is used.  \n  \n-   The name and namespace of the contract. This identification is required because the WSDL may contain more than one contract.  \n  \n Having constructed the proxy instance with the service moniker, the client application can call methods on the proxy, which results in the service moniker infrastructure calling the corresponding service operations.  \n  \n```  \n' Call the service operations using the moniker object  \nWScript.Echo \"MEX service moniker: 9 * 81.25 = \" & mexServiceMoniker.Multiply(9, 81.25)  \n  \n```  \n  \n When you run the sample, the operation response is displayed in a Windows Script Host message box window. This demonstrates a COM client making COM calls using the moniker with a MEX contract to communicate with a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service.  \n  \n#### To set up and build the sample  \n  \n1.  Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md).  \n  \n2.  To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md).  \n  \n3.  From a [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)] command prompt, open the \\client\\bin folder, under the language-specific folder.  \n  \n    > [!NOTE]\n    >  If you are using [!INCLUDE[wv](../../../../includes/wv-md.md)], [!INCLUDE[lserver](../../../../includes/lserver-md.md)], Windows 7, or Windows Server 2008 R2, make sure that you run the command prompt with administrator privileges.  \n  \n4.  Type in `tlbexp.exe client.dll /out:CalcProxy.tlb` to export the dll to a tlb file. A \"Type library exporter warning\" is expected but is not an issue because the generic type is not required.  \n  \n5.  Type in `regasm.exe /tlb:CalcProxy.tlb client.dll` to register the types with COM. A \"Type library exporter warning\" is expected but is not an issue because the generic type is not required.  \n  \n6.  Type in `gacutil.exe /i client.dll` to add the assembly to the Global Assembly Cache.  \n  \n#### To run the sample on the same computer  \n  \n1.  Test that you can access the service using a browser by typing in the following address: `http://localhost/servicemodelsamples/service.svc`. A confirmation page should be displayed in response.  \n  \n2.  Run ComCalcClient.vbs from \\client, from under the language-specific folder. Client activity is displayed in message box windows.  \n  \n3.  If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b).  \n  \n#### To run the sample across computers  \n  \n1.  On the service computer, create a virtual directory named ServiceModelSamples. The Setupvroot.bat script included with the sample can be used to create the disk directory and virtual directory.  \n  \n2.  Copy the service program files from %SystemDrive%\\Inetpub\\wwwroot\\servicemodelsamples to the ServiceModelSamples virtual directory on the service computer. Be sure to include the files in the \\bin directory.  \n  \n3.  Copy the client script file from the \\client folder, under the language-specific folder, to the client computer.  \n  \n4.  In the script file, change the address value of the endpoint definition to match the new address of your service. Replace any references to \"localhost\" with a fully-qualified domain name in the address.  \n  \n5.  Copy the WSDL file to the client computer. In the WSDL file, serviceWsdl.xml, replace any references to \"localhost\" with a fully-qualified domain name in the address.  \n  \n6.  Copy the Client.dll library from the \\client\\bin folder, under the language-specific folder, to a directory on the client computer.  \n  \n7.  From a command prompt, navigate to that destination directory on the client computer. If using [!INCLUDE[wv](../../../../includes/wv-md.md)] or [!INCLUDE[lserver](../../../../includes/lserver-md.md)], make sure to run the command prompt as Administrator.  \n  \n8.  Type in `tlbexp.exe client.dll /out:CalcProxy.tlb` to export the dll to a tlb file. A \"Type library exporter warning\" is expected but is not an issue because the generic type is not required.  \n  \n9. Type in `regasm.exe /tlb:CalcProxy.tlb client.dll` to register the types with COM. Ensure that path has been set to the folder that contains `regasm.exe` before you run the command.  \n  \n10. Type in `gacutil.exe /i client.dll` to add the assembly to the Global Assembly Cache. Ensure that path has been set to the folder that contains `gacutil.exe` before you run the command.  \n  \n11. Test that you can access the service from the client computer using a browser.  \n  \n12. On the client computer, launch ComCalcClient.vbs.  \n  \n#### To clean up after the sample  \n  \n-   For security purposes, remove the virtual directory definition and permissions granted in the setup steps when you are finished with the samples.  \n  \n## See Also","nodes":[{"pos":[12,67],"content":"Using the WCF Moniker with COM Clients | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Using the WCF Moniker with COM Clients | Microsoft Docs","pos":[0,55]}]},{"pos":[366,404],"content":"Using the WCF Moniker with COM Clients","linkify":"Using the WCF Moniker with COM Clients","nodes":[{"content":"Using the WCF Moniker with COM Clients","pos":[0,38]}]},{"content":"This sample demonstrates how to use the <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> service moniker to integrate Web services into COM-based development environments, such as Microsoft Office Visual Basic for Applications (Office VBA) or Visual Basic 6.0.","pos":[405,672],"source":"This sample demonstrates how to use the [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] service moniker to integrate Web services into COM-based development environments, such as Microsoft Office Visual Basic for Applications (Office VBA) or Visual Basic 6.0."},{"content":"This sample consists of a Windows Script Host client (.vbs), a supporting client library (.dll), and a service library (.dll) hosted by Internet Information Services (IIS).","pos":[673,845]},{"content":"The service is a calculator service and the COM client calls math operations—Add, Subtract, Multiply, and Divide—on the service.","pos":[846,974]},{"content":"Client activity is visible in the message box windows.","pos":[975,1029]},{"pos":[1037,1145],"content":"[!NOTE]\n The set-up procedure and build instructions for this sample are located at the end of this topic.","leadings":["","> "],"nodes":[{"content":"The set-up procedure and build instructions for this sample are located at the end of this topic.","pos":[9,106]}]},{"pos":[1153,1286],"content":"[!IMPORTANT]\n The samples may already be installed on your computer. Check for the following (default) directory before continuing.","leadings":["","> "],"nodes":[{"content":" The samples may already be installed on your computer. Check for the following (default) directory before continuing.","pos":[13,131],"nodes":[{"content":"The samples may already be installed on your computer.","pos":[1,55]},{"content":"Check for the following (default) directory before continuing.","pos":[56,118]}]}]},{"content":"If this directory does not exist, go to <bpt id=\"p1\">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id=\"ph1\">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id=\"ph2\">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.","pos":[1340,1666],"source":"If this directory does not exist, go to [Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4](http://go.microsoft.com/fwlink/?LinkId=150780) to download all [!INCLUDE[indigo1](../../../../includes/indigo1-md.md)] and [!INCLUDE[wf1](../../../../includes/wf1-md.md)] samples."},{"content":"This sample is located in the following directory.","pos":[1667,1717]},{"pos":[1798,1894],"content":"The service implements an <ph id=\"ph1\">`ICalculator`</ph> contract defined as shown in the following code example.","source":"The service implements an `ICalculator` contract defined as shown in the following code example."},{"content":"The sample demonstrates the three alternative approaches for using the moniker:","pos":[2303,2382]},{"content":"Typed contract – The contract is registered as a COM visible type on the client computer.","pos":[2392,2481]},{"content":"WSDL contract – The contract is supplied in the form of a WSDL document.","pos":[2491,2563]},{"content":"Metadata Exchange contract – The contract is retrieved at runtime from a Metadata Exchange (MEX) endpoint.","pos":[2573,2679]},{"pos":[2688,2702],"content":"Typed Contract","linkify":"Typed Contract","nodes":[{"content":"Typed Contract","pos":[0,14]}]},{"content":"To use the moniker with a typed contract use, appropriately attributed types for the service contract must be registered with COM.","pos":[2706,2836]},{"content":"First, a client must be generated by using the <bpt id=\"p1\">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id=\"p1\">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.","pos":[2837,3017],"source":" First, a client must be generated by using the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)."},{"content":"Run the following command from a command prompt in the client directory to generate the typed proxy.","pos":[3018,3118]},{"content":"This class must be included in a project and the project should be configured to generate a COM-visible, signed assembly when compiled.","pos":[3302,3437]},{"content":"The following attribute should be included in the AssemblyInfo.cs file.","pos":[3438,3509]},{"pos":[3565,3676],"content":"After building the project, register the COM-visible types by using <ph id=\"ph1\">`regasm`</ph> as shown in the following example.","source":"After building the project, register the COM-visible types by using `regasm` as shown in the following example."},{"content":"The assembly that is created should be added to the Global Assembly Cache.","pos":[3741,3815]},{"content":"Though not strictly required, this simplifies the process of the runtime locating the assembly.","pos":[3816,3911]},{"content":"The following command adds the assembly to the Global Assembly Cache.","pos":[3912,3981]},{"pos":[4032,4158],"content":"[!NOTE]\n The service moniker requires only the type registration and does not use the proxy to communicate with the service.","leadings":["","> "],"nodes":[{"content":"The service moniker requires only the type registration and does not use the proxy to communicate with the service.","pos":[9,124]}]},{"pos":[4165,4365],"content":"ComCalcClient.vbs client application uses the <ph id=\"ph1\">`GetObject`</ph> function to construct a proxy for the service, using the service moniker syntax to specify the address, binding, and contract for the service.","source":"ComCalcClient.vbs client application uses the `GetObject` function to construct a proxy for the service, using the service moniker syntax to specify the address, binding, and contract for the service."},{"content":"The parameters used by the moniker specify:","pos":[4576,4619]},{"content":"The address of the service endpoint.","pos":[4629,4665]},{"content":"The binding that the client should use to connect with that endpoint.","pos":[4675,4744]},{"content":"In this case, the system-defined wsHttpBinding is used though custom bindings can be defined in client configuration files.","pos":[4745,4868]},{"content":"For use with the Windows Script Host, the custom binding is defined in a Cscript.exe.config file in the same directory as Cscript.exe.","pos":[4869,5003]},{"content":"The type of the contract that is supported at the endpoint.","pos":[5013,5072]},{"content":"This is the type that was generated and registered above.","pos":[5073,5130]},{"content":"Because Visual Basic script does not provide a strongly-typed COM environment, an identifier for the contract must be specified.","pos":[5131,5259]},{"content":"This GUID is the <ph id=\"ph1\">`interfaceID`</ph> from CalcProxy.tlb, which can be viewed by using COM tools such as the OLE/COM Object Viewer (OleView.exe).","pos":[5260,5398],"source":" This GUID is the `interfaceID` from CalcProxy.tlb, which can be viewed by using COM tools such as the OLE/COM Object Viewer (OleView.exe)."},{"content":"For strongly-typed environments such as Office VBA or Visual Basic 6.0, adding an explicit reference to the type library and then declaring the type of the proxy object can be used in place of the contract parameter.","pos":[5399,5615]},{"content":"This also provides IntelliSense support during client application development.","pos":[5616,5694]},{"content":"Having constructed the proxy instance with the service moniker, the client application can call methods on the proxy, which results in the service moniker infrastructure calling the corresponding service operations.","pos":[5701,5916]},{"content":"When you run the sample, the operation response is displayed in a Windows Script Host message box window.","pos":[6091,6196]},{"content":"This demonstrates a COM client making COM calls using the typed moniker to communicate with a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service.","pos":[6197,6355],"source":" This demonstrates a COM client making COM calls using the typed moniker to communicate with a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service."},{"content":"Despite the use of COM in the client application, the communication with the service consists only of Web service calls.","pos":[6356,6476]},{"pos":[6485,6498],"content":"WSDL Contract","linkify":"WSDL Contract","nodes":[{"content":"WSDL Contract","pos":[0,13]}]},{"content":"To use the moniker with a WSDL contract, no client library registration is required but the WSDL contract for the service must be retrieved through an out-of-band mechanism such as using a browser to access the WSDL endpoint for the service.","pos":[6502,6743]},{"content":"The moniker can then access that contract at execution time.","pos":[6744,6804]},{"pos":[6811,7000],"content":"The ComCalcClient.vbs client application uses the <ph id=\"ph1\">`FileSystemObject`</ph> to access the locally saved WSDL file and then again uses the <ph id=\"ph2\">`GetObject`</ph> function to construct a proxy for the service.","source":"The ComCalcClient.vbs client application uses the `FileSystemObject` to access the locally saved WSDL file and then again uses the `GetObject` function to construct a proxy for the service."},{"content":"The parameters used by the moniker specify:","pos":[7918,7961]},{"content":"The address of the service endpoint.","pos":[7971,8007]},{"content":"The binding that the client should use to connect with that endpoint and the namespace in which that binding is defined.","pos":[8017,8137]},{"content":"In this case, the <ph id=\"ph1\">`wsHttpBinding_ICalculator`</ph> is used.","pos":[8138,8192],"source":" In this case, the `wsHttpBinding_ICalculator` is used."},{"content":"The WSDL that defines the contract.","pos":[8202,8237]},{"content":"In this case this is the string that has been read from the serviceWsdl.xml file.","pos":[8238,8319]},{"content":"The name and namespace of the contract.","pos":[8329,8368]},{"content":"This identification is required because the WSDL may contain more than one contract.","pos":[8369,8453]},{"pos":[8465,8857],"content":"[!NOTE]\nBy default, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services generate separate WSDL files for each namespace that the use. These are linked with the use of the WSDL import construct. Because the moniker expects a single WSDL definition, the service must either use a single namespace as demonstrated in this sample or the separate files must be manually merged.","leadings":["","    >  "],"nodes":[{"content":"By default, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services generate separate WSDL files for each namespace that the use. These are linked with the use of the WSDL import construct. Because the moniker expects a single WSDL definition, the service must either use a single namespace as demonstrated in this sample or the separate files must be manually merged.","pos":[8,385],"nodes":[{"content":"By default, <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services generate separate WSDL files for each namespace that the use.","pos":[0,138],"source":"By default, [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] services generate separate WSDL files for each namespace that the use."},{"content":"These are linked with the use of the WSDL import construct.","pos":[139,198]},{"content":"Because the moniker expects a single WSDL definition, the service must either use a single namespace as demonstrated in this sample or the separate files must be manually merged.","pos":[199,377]}]}]},{"content":"Having constructed the proxy instance with the service moniker, the client application can call methods on the proxy, which results in the service moniker infrastructure calling the corresponding service operations.","pos":[8864,9079]},{"content":"When you run the sample, the operation response is displayed in a Windows Script Host message box window.","pos":[9257,9362]},{"content":"This demonstrates a COM client making COM calls using the moniker with a WSDL contract to communicate with a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service.","pos":[9363,9536],"source":" This demonstrates a COM client making COM calls using the moniker with a WSDL contract to communicate with a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service."},{"pos":[9545,9571],"content":"Metadata Exchange Contract","linkify":"Metadata Exchange Contract","nodes":[{"content":"Metadata Exchange Contract","pos":[0,26]}]},{"content":"To use the moniker with a MEX contract, as with the WSDL contract, no client registration is required.","pos":[9575,9677]},{"content":"The contract for the service is retrieved at execution time through the internal use of Metadata Exchange.","pos":[9678,9784]},{"pos":[9791,9905],"content":"The ComCalcClient.vbs client application again uses the <ph id=\"ph1\">`GetObject`</ph> function to construct a proxy for the service.","source":"The ComCalcClient.vbs client application again uses the `GetObject` function to construct a proxy for the service."},{"content":"The parameters used by the moniker specify:","pos":[10588,10631]},{"content":"The address of the service metadata exchange endpoint.","pos":[10641,10695]},{"content":"The address of the service endpoint.","pos":[10705,10741]},{"content":"The binding that the client should use to connect with that endpoint and the namespace in which that binding is defined.","pos":[10751,10871]},{"content":"In this case, the <ph id=\"ph1\">`wsHttpBinding_ICalculator`</ph> is used.","pos":[10872,10926],"source":" In this case, the `wsHttpBinding_ICalculator` is used."},{"content":"The name and namespace of the contract.","pos":[10936,10975]},{"content":"This identification is required because the WSDL may contain more than one contract.","pos":[10976,11060]},{"content":"Having constructed the proxy instance with the service moniker, the client application can call methods on the proxy, which results in the service moniker infrastructure calling the corresponding service operations.","pos":[11067,11282]},{"content":"When you run the sample, the operation response is displayed in a Windows Script Host message box window.","pos":[11454,11559]},{"content":"This demonstrates a COM client making COM calls using the moniker with a MEX contract to communicate with a <ph id=\"ph1\">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service.","pos":[11560,11732],"source":" This demonstrates a COM client making COM calls using the moniker with a MEX contract to communicate with a [!INCLUDE[indigo2](../../../../includes/indigo2-md.md)] service."},{"pos":[11743,11773],"content":"To set up and build the sample","linkify":"To set up and build the sample","nodes":[{"content":"To set up and build the sample","pos":[0,30]}]},{"pos":[11783,11982],"content":"Ensure that you have performed the <bpt id=\"p1\">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.","source":"Ensure that you have performed the [One-Time Setup Procedure for the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)."},{"pos":[11992,12201],"content":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id=\"p1\">[</bpt>Building the Windows Communication Foundation Samples<ept id=\"p1\">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.","source":"To build the C# or Visual Basic .NET edition of the solution, follow the instructions in [Building the Windows Communication Foundation Samples](../../../../docs/framework/wcf/samples/building-the-samples.md)."},{"pos":[12211,12352],"content":"From a <ph id=\"ph1\">[!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)]</ph> command prompt, open the \\client\\bin folder, under the language-specific folder.","source":"From a [!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)] command prompt, open the \\client\\bin folder, under the language-specific folder."},{"pos":[12364,12610],"content":"[!NOTE]\nIf you are using [!INCLUDE[wv](../../../../includes/wv-md.md)], [!INCLUDE[lserver](../../../../includes/lserver-md.md)], Windows 7, or Windows Server 2008 R2, make sure that you run the command prompt with administrator privileges.","leadings":["","    >  "],"nodes":[{"content":"If you are using <ph id=\"ph1\">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>, <ph id=\"ph2\">[!INCLUDE[lserver](../../../../includes/lserver-md.md)]</ph>, Windows 7, or Windows Server 2008 R2, make sure that you run the command prompt with administrator privileges.","pos":[8,239],"source":"If you are using [!INCLUDE[wv](../../../../includes/wv-md.md)], [!INCLUDE[lserver](../../../../includes/lserver-md.md)], Windows 7, or Windows Server 2008 R2, make sure that you run the command prompt with administrator privileges."}]},{"content":"Type in <ph id=\"ph1\">`tlbexp.exe client.dll /out:CalcProxy.tlb`</ph> to export the dll to a tlb file.","pos":[12620,12703],"source":"Type in `tlbexp.exe client.dll /out:CalcProxy.tlb` to export the dll to a tlb file."},{"content":"A \"Type library exporter warning\" is expected but is not an issue because the generic type is not required.","pos":[12704,12811]},{"content":"Type in <ph id=\"ph1\">`regasm.exe /tlb:CalcProxy.tlb client.dll`</ph> to register the types with COM.","pos":[12821,12903],"source":"Type in `regasm.exe /tlb:CalcProxy.tlb client.dll` to register the types with COM."},{"content":"A \"Type library exporter warning\" is expected but is not an issue because the generic type is not required.","pos":[12904,13011]},{"pos":[13021,13106],"content":"Type in <ph id=\"ph1\">`gacutil.exe /i client.dll`</ph> to add the assembly to the Global Assembly Cache.","source":"Type in `gacutil.exe /i client.dll` to add the assembly to the Global Assembly Cache."},{"pos":[13117,13155],"content":"To run the sample on the same computer","linkify":"To run the sample on the same computer","nodes":[{"content":"To run the sample on the same computer","pos":[0,38]}]},{"content":"Test that you can access the service using a browser by typing in the following address: <ph id=\"ph1\">`http://localhost/servicemodelsamples/service.svc`</ph>.","pos":[13165,13305],"source":"Test that you can access the service using a browser by typing in the following address: `http://localhost/servicemodelsamples/service.svc`."},{"content":"A confirmation page should be displayed in response.","pos":[13306,13358]},{"content":"Run ComCalcClient.vbs from \\client, from under the language-specific folder.","pos":[13368,13444]},{"content":"Client activity is displayed in message box windows.","pos":[13445,13497]},{"pos":[13507,13659],"content":"If the client and service are not able to communicate, see <bpt id=\"p1\">[</bpt>Troubleshooting Tips<ept id=\"p1\">](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)</ept>.","source":"If the client and service are not able to communicate, see [Troubleshooting Tips](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)."},{"pos":[13670,13704],"content":"To run the sample across computers","linkify":"To run the sample across computers","nodes":[{"content":"To run the sample across computers","pos":[0,34]}]},{"content":"On the service computer, create a virtual directory named ServiceModelSamples.","pos":[13714,13792]},{"content":"The Setupvroot.bat script included with the sample can be used to create the disk directory and virtual directory.","pos":[13793,13907]},{"content":"Copy the service program files from %SystemDrive%\\Inetpub\\wwwroot\\servicemodelsamples to the ServiceModelSamples virtual directory on the service computer.","pos":[13917,14072]},{"content":"Be sure to include the files in the \\bin directory.","pos":[14073,14124]},{"content":"Copy the client script file from the \\client folder, under the language-specific folder, to the client computer.","pos":[14134,14246]},{"content":"In the script file, change the address value of the endpoint definition to match the new address of your service.","pos":[14256,14369]},{"content":"Replace any references to \"localhost\" with a fully-qualified domain name in the address.","pos":[14370,14458]},{"content":"Copy the WSDL file to the client computer.","pos":[14468,14510]},{"content":"In the WSDL file, serviceWsdl.xml, replace any references to \"localhost\" with a fully-qualified domain name in the address.","pos":[14511,14634]},{"content":"Copy the Client.dll library from the \\client\\bin folder, under the language-specific folder, to a directory on the client computer.","pos":[14644,14775]},{"content":"From a command prompt, navigate to that destination directory on the client computer.","pos":[14785,14870]},{"content":"If using <ph id=\"ph1\">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> or <ph id=\"ph2\">[!INCLUDE[lserver](../../../../includes/lserver-md.md)]</ph>, make sure to run the command prompt as Administrator.","pos":[14871,15039],"source":" If using [!INCLUDE[wv](../../../../includes/wv-md.md)] or [!INCLUDE[lserver](../../../../includes/lserver-md.md)], make sure to run the command prompt as Administrator."},{"content":"Type in <ph id=\"ph1\">`tlbexp.exe client.dll /out:CalcProxy.tlb`</ph> to export the dll to a tlb file.","pos":[15049,15132],"source":"Type in `tlbexp.exe client.dll /out:CalcProxy.tlb` to export the dll to a tlb file."},{"content":"A \"Type library exporter warning\" is expected but is not an issue because the generic type is not required.","pos":[15133,15240]},{"content":"Type in <ph id=\"ph1\">`regasm.exe /tlb:CalcProxy.tlb client.dll`</ph> to register the types with COM.","pos":[15249,15331],"source":"Type in `regasm.exe /tlb:CalcProxy.tlb client.dll` to register the types with COM."},{"content":"Ensure that path has been set to the folder that contains <ph id=\"ph1\">`regasm.exe`</ph> before you run the command.","pos":[15332,15430],"source":" Ensure that path has been set to the folder that contains `regasm.exe` before you run the command."},{"content":"Type in <ph id=\"ph1\">`gacutil.exe /i client.dll`</ph> to add the assembly to the Global Assembly Cache.","pos":[15440,15525],"source":"Type in `gacutil.exe /i client.dll` to add the assembly to the Global Assembly Cache."},{"content":"Ensure that path has been set to the folder that contains <ph id=\"ph1\">`gacutil.exe`</ph> before you run the command.","pos":[15526,15625],"source":" Ensure that path has been set to the folder that contains `gacutil.exe` before you run the command."},{"content":"Test that you can access the service from the client computer using a browser.","pos":[15635,15713]},{"content":"On the client computer, launch ComCalcClient.vbs.","pos":[15723,15772]},{"pos":[15783,15811],"content":"To clean up after the sample","linkify":"To clean up after the sample","nodes":[{"content":"To clean up after the sample","pos":[0,28]}]},{"content":"For security purposes, remove the virtual directory definition and permissions granted in the setup steps when you are finished with the samples.","pos":[15821,15966]},{"pos":[15975,15983],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]}]}