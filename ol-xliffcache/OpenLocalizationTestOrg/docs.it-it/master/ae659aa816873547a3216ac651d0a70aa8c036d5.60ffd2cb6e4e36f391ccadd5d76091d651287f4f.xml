{"content":"---\ntitle: \"^ Operator (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.^\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"raising numbers to powers\"\n  - \"^ operator [Visual Basic], exponention\"\n  - \"square operator\"\n  - \"^ operator [Visual Basic]\"\n  - \"exponentiation operator [Visual Basic]\"\n  - \"exponent\"\n  - \"numbers, rasing\"\n  - \"powers\"\n  - \"arithmetic operators, exponentiation\"\nms.assetid: d89a1ca8-83da-4784-a87b-a9d7dceb3f62\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ^ Operator (Visual Basic)\nRaises a number to the power of another number.  \n  \n## Syntax  \n  \n```  \n  \nnumber ^ exponent  \n```  \n  \n## Parts  \n `number`  \n Required. Any numeric expression.  \n  \n `exponent`  \n Required. Any numeric expression.  \n  \n## Result  \n The result is `number` raised to the power of `exponent`, always as a `Double` value.  \n  \n## Supported Types  \n `Double`. Operands of any different type are converted to `Double`.  \n  \n## Remarks  \n Visual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md).  \n  \n The value of `exponent` can be fractional, negative, or both.  \n  \n When more than one exponentiation is performed in a single expression, the `^` operator is evaluated as it is encountered from left to right.  \n  \n> [!NOTE]\n>  The `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).  \n  \n## Example  \n The following example uses the `^` operator to raise a number to the power of an exponent. The result is the first operand raised to the power of the second.  \n  \n [!code-vb[VbVbalrOperators#20](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/exponentiation-operator_1.vb)]  \n  \n The preceding example produces the following results:  \n  \n `exp1` is set to 4 (2 squared).  \n  \n `exp2` is set to 19683 (3 cubed, then that value cubed).  \n  \n `exp3` is set to -125 (-5 cubed).  \n  \n `exp4` is set to 625 (-5 to the fourth power).  \n  \n `exp5` is set to 2 (cube root of 8).  \n  \n `exp6` is set to 0.5 (1.0 divided by the cube root of 8).  \n  \n Note the importance of the parentheses in the expressions in the preceding example. Because of *operator precedence*, Visual Basic normally performs the `^` operator before any others, even the unary `–` operator. If `exp4` and `exp6` had been calculated without parentheses, they would have produced the following results:  \n  \n `exp4 = -5 ^ 4` would be calculated as –(5 to the fourth power), which would result in -625.  \n  \n `exp6 = 8 ^ -1.0 / 3.0` would be calculated as (8 to the –1 power, or 0.125) divided by 3.0, which would result in 0.041666666666666666666666666666667.  \n  \n## See Also  \n [^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)   \n [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md)   \n [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md)   \n [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)   \n [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)","nodes":[{"pos":[12,54],"content":"^ Operator (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"^ Operator (Visual Basic) | Microsoft Docs","pos":[0,42]}]},{"pos":[830,855],"content":"^ Operator (Visual Basic)","linkify":"^ Operator (Visual Basic)","nodes":[{"content":"^ Operator (Visual Basic)","pos":[0,25]}]},{"content":"Raises a number to the power of another number.","pos":[856,903]},{"pos":[912,918],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[965,970],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[986,995]},{"content":"Any numeric expression.","pos":[996,1019]},{"content":"Required.","pos":[1040,1049]},{"content":"Any numeric expression.","pos":[1050,1073]},{"pos":[1082,1088],"content":"Result","linkify":"Result","nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[1092,1177],"content":"The result is <ph id=\"ph1\">`number`</ph> raised to the power of <ph id=\"ph2\">`exponent`</ph>, always as a <ph id=\"ph3\">`Double`</ph> value.","source":"The result is `number` raised to the power of `exponent`, always as a `Double` value."},{"pos":[1186,1201],"content":"Supported Types","linkify":"Supported Types","nodes":[{"content":"Supported Types","pos":[0,15]}]},{"content":"<ph id=\"ph1\">`Double`</ph>.","pos":[1205,1214],"source":"`Double`."},{"content":"Operands of any different type are converted to <ph id=\"ph1\">`Double`</ph>.","pos":[1215,1272],"source":" Operands of any different type are converted to `Double`."},{"pos":[1281,1288],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[1292,1435],"content":"Visual Basic always performs exponentiation in the <bpt id=\"p1\">[</bpt>Double Data Type<ept id=\"p1\">](../../../visual-basic/language-reference/data-types/double-data-type.md)</ept>.","source":"Visual Basic always performs exponentiation in the [Double Data Type](../../../visual-basic/language-reference/data-types/double-data-type.md)."},{"pos":[1442,1503],"content":"The value of <ph id=\"ph1\">`exponent`</ph> can be fractional, negative, or both.","source":"The value of `exponent` can be fractional, negative, or both."},{"pos":[1510,1651],"content":"When more than one exponentiation is performed in a single expression, the <ph id=\"ph1\">`^`</ph> operator is evaluated as it is encountered from left to right.","source":"When more than one exponentiation is performed in a single expression, the `^` operator is evaluated as it is encountered from left to right."},{"pos":[1659,2079],"content":"[!NOTE]\n The `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","leadings":["","> "],"nodes":[{"content":" The `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md).","pos":[8,418],"nodes":[{"content":"The <ph id=\"ph1\">`^`</ph> operator can be <bpt id=\"p1\">*</bpt>overloaded<ept id=\"p1\">*</ept>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure.","pos":[1,159],"source":" The `^` operator can be *overloaded*, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure."},{"content":"If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.","pos":[160,268]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Operator Procedures<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.","pos":[269,410],"source":" For more information, see [Operator Procedures](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)."}]}]},{"pos":[2088,2095],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example uses the <ph id=\"ph1\">`^`</ph> operator to raise a number to the power of an exponent.","pos":[2099,2189],"source":"The following example uses the `^` operator to raise a number to the power of an exponent."},{"content":"The result is the first operand raised to the power of the second.","pos":[2190,2256]},{"pos":[2263,2399],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrOperators#20<ept id=\"p2\">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/exponentiation-operator_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrOperators#20](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/exponentiation-operator_1.vb)]"},{"content":"The preceding example produces the following results:","pos":[2406,2459]},{"pos":[2466,2497],"content":"<ph id=\"ph1\">`exp1`</ph> is set to 4 (2 squared).","source":"`exp1` is set to 4 (2 squared)."},{"pos":[2504,2560],"content":"<ph id=\"ph1\">`exp2`</ph> is set to 19683 (3 cubed, then that value cubed).","source":"`exp2` is set to 19683 (3 cubed, then that value cubed)."},{"pos":[2567,2600],"content":"<ph id=\"ph1\">`exp3`</ph> is set to -125 (-5 cubed).","source":"`exp3` is set to -125 (-5 cubed)."},{"pos":[2607,2653],"content":"<ph id=\"ph1\">`exp4`</ph> is set to 625 (-5 to the fourth power).","source":"`exp4` is set to 625 (-5 to the fourth power)."},{"pos":[2660,2696],"content":"<ph id=\"ph1\">`exp5`</ph> is set to 2 (cube root of 8).","source":"`exp5` is set to 2 (cube root of 8)."},{"pos":[2703,2760],"content":"<ph id=\"ph1\">`exp6`</ph> is set to 0.5 (1.0 divided by the cube root of 8).","source":"`exp6` is set to 0.5 (1.0 divided by the cube root of 8)."},{"content":"Note the importance of the parentheses in the expressions in the preceding example.","pos":[2767,2850]},{"content":"Because of <bpt id=\"p1\">*</bpt>operator precedence<ept id=\"p1\">*</ept>, Visual Basic normally performs the <ph id=\"ph1\">`^`</ph> operator before any others, even the unary <ph id=\"ph2\">`–`</ph> operator.","pos":[2851,2980],"source":" Because of *operator precedence*, Visual Basic normally performs the `^` operator before any others, even the unary `–` operator."},{"content":"If <ph id=\"ph1\">`exp4`</ph> and <ph id=\"ph2\">`exp6`</ph> had been calculated without parentheses, they would have produced the following results:","pos":[2981,3090],"source":" If `exp4` and `exp6` had been calculated without parentheses, they would have produced the following results:"},{"pos":[3097,3189],"content":"<ph id=\"ph1\">`exp4 = -5 ^ 4`</ph> would be calculated as –(5 to the fourth power), which would result in -625.","source":"`exp4 = -5 ^ 4` would be calculated as –(5 to the fourth power), which would result in -625."},{"pos":[3196,3347],"content":"<ph id=\"ph1\">`exp6 = 8 ^ -1.0 / 3.0`</ph> would be calculated as (8 to the –1 power, or 0.125) divided by 3.0, which would result in 0.041666666666666666666666666666667.","source":"`exp6 = 8 ^ -1.0 / 3.0` would be calculated as (8 to the –1 power, or 0.125) divided by 3.0, which would result in 0.041666666666666666666666666666667."},{"pos":[3356,3364],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>^= Operator<ept id=\"p1\">](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md)</ept><ph id=\"ph1\"> </ph>","pos":[3368,3472],"source":"[^= Operator](../../../visual-basic/language-reference/operators/exponentiation-assignment-operator.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Arithmetic Operators<ept id=\"p1\">](../../../visual-basic/language-reference/operators/arithmetic-operators.md)</ept><ph id=\"ph1\"> </ph>","pos":[3475,3575],"source":" [Arithmetic Operators](../../../visual-basic/language-reference/operators/arithmetic-operators.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operator Precedence in Visual Basic<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operator-precedence.md)</ept><ph id=\"ph1\"> </ph>","pos":[3578,3692],"source":" [Operator Precedence in Visual Basic](../../../visual-basic/language-reference/operators/operator-precedence.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Operators Listed by Functionality<ept id=\"p1\">](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[3695,3821],"source":" [Operators Listed by Functionality](../../../visual-basic/language-reference/operators/operators-listed-by-functionality.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Arithmetic Operators in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)</ept>","pos":[3824,3972],"source":" [Arithmetic Operators in Visual Basic](../../../visual-basic/programming-guide/language-features/operators-and-expressions/arithmetic-operators.md)"}]}