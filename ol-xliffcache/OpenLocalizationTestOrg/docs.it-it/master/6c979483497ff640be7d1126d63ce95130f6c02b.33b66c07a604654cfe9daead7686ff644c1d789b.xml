{"content":"---\ntitle: \"Best Practices for exceptions - .NET\"\nms.date: \"12/05/2018\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords:\n  - \"exceptions, best practices\"\nms.assetid: f06da765-235b-427a-bfb6-47cd219af539\n---\n\n# Best practices for exceptions\n\nA well-designed app handles exceptions and errors to prevent app crashes. This section describes best practices for handling and creating exceptions.\n\n## Use try/catch/finally blocks to recover from errors or release resources\n\nUse `try`/`catch` blocks around code that can potentially generate an exception ***and*** your code can recover from that exception. In `catch` blocks, always order exceptions from the most derived to the least derived. All exceptions derive from <xref:System.Exception>. More derived exceptions are not handled by a catch clause that is preceded by a catch clause for a base exception class. When your code cannot recover from an exception, don't catch that exception. Enable methods further up the call stack to recover if possible.\n\nClean up resources allocated with either `using` statements, or `finally` blocks. Prefer `using` statements to automatically clean up resources when exceptions are thrown. Use `finally` blocks to clean up resources that don't implement <xref:System.IDisposable>. Code in a `finally` clause is almost always executed even when exceptions are thrown.\n\n## Handle common conditions without throwing exceptions\n\nFor conditions that are likely to occur but might trigger an exception, consider handling them in a way that will avoid the exception. For example, if you try to close a connection that is already closed, you'll get an `InvalidOperationException`. You can avoid that by using an `if` statement to check the connection state before trying to close it.\n\n[!code-cpp[Conceptual.Exception.Handling#2](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.exception.handling/cpp/source.cpp#2)]\n[!code-csharp[Conceptual.Exception.Handling#2](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.exception.handling/cs/source.cs#2)]\n[!code-vb[Conceptual.Exception.Handling#2](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.exception.handling/vb/source.vb#2)]\n\nIf you don't check connection state before closing, you can catch the `InvalidOperationException` exception.\n\n[!code-cpp[Conceptual.Exception.Handling#3](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.exception.handling/cpp/source.cpp#3)]\n[!code-csharp[Conceptual.Exception.Handling#3](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.exception.handling/cs/source.cs#3)]\n[!code-vb[Conceptual.Exception.Handling#3](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.exception.handling/vb/source.vb#3)]\n\nThe method to choose depends on how often you expect the event to occur.\n\n- Use exception handling if the event doesn't occur very often, that is, if the event is truly exceptional and indicates an error (such as an unexpected end-of-file). When you use exception handling, less code is executed in normal conditions.\n\n- Check for error conditions in code if the event happens routinely and could be considered part of normal execution. When you check for common error conditions, less code is executed because you avoid exceptions.\n\n## Design classes so that exceptions can be avoided\n\nA class can provide methods or properties that enable you to avoid making a call that would trigger an exception. For example, a <xref:System.IO.FileStream> class provides methods that help determine whether the end of the file has been reached. These can be used to avoid the exception that is thrown if you read past the end of the file. The following example shows how to read to the end of a file without triggering an exception.\n\n[!code-cpp[Conceptual.Exception.Handling#5](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.exception.handling/cpp/source.cpp#5)]\n[!code-csharp[Conceptual.Exception.Handling#5](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.exception.handling/cs/source.cs#5)]\n[!code-vb[Conceptual.Exception.Handling#5](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.exception.handling/vb/source.vb#5)]\n\nAnother way to avoid exceptions is to return `null` for extremely common error cases instead of throwing an exception. An extremely common error case can be considered normal flow of control. By returning `null` in these cases, you minimize the performance impact to an app.\n\n## Throw exceptions instead of returning an error code\n\nExceptions ensure that failures do not go unnoticed because calling code didn't check a return code.\n\n## Use the predefined .NET exception types\n\nIntroduce a new exception class only when a predefined one doesn't apply. For example:\n\n- Throw an <xref:System.InvalidOperationException> exception if a property set or method call is not appropriate given the object's current state.\n\n- Throw an <xref:System.ArgumentException> exception or one of the predefined classes that derive from <xref:System.ArgumentException> if invalid parameters are passed.\n\n## End exception class names with the word `Exception`\n\nWhen a custom exception is necessary, name it appropriately and derive it from the <xref:System.Exception> class. For example:\n\n[!code-cpp[Conceptual.Exception.Handling#4](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.exception.handling/cpp/source.cpp#4)]\n[!code-csharp[Conceptual.Exception.Handling#4](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.exception.handling/cs/source.cs#4)]\n[!code-vb[Conceptual.Exception.Handling#4](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.exception.handling/vb/source.vb#4)]\n\n## Include three constructors in custom exception classes\n\nUse at least the three common constructors when creating your own exception classes: the default constructor, a constructor that takes a string message, and a constructor that takes a string message and an inner exception.\n\n* <xref:System.Exception.%23ctor>, which uses default values.\n\n* <xref:System.Exception.%23ctor%28System.String%29>, which accepts a string message.\n\n* <xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which accepts a string message and an inner exception.\n\nFor an example, see [How to: Create User-Defined Exceptions](how-to-create-user-defined-exceptions.md).\n\n## Ensure that exception data is available when code executes remotely\n\nWhen you create user-defined exceptions, ensure that the metadata for the exceptions is available to code that is executing remotely.\n\nFor example, on .NET implementations that support App Domains, exceptions may occur across App domains. Suppose App Domain A creates App Domain B, which executes code that throws an exception. For App Domain A to properly catch and handle the exception, it must be able to find the assembly that contains the exception thrown by App Domain B. If App Domain B throws an exception that is contained in an assembly under its application base, but not under App Domain A's application base, App Domain A will not be able to find the exception, and the common language runtime will throw a <xref:System.IO.FileNotFoundException> exception. To avoid this situation, you can deploy the assembly that contains the exception information in two ways:\n\n- Put the assembly into a common application base shared by both app domains.\n\n    \\- or -\n\n- If the domains do not share a common application base, sign the assembly that contains the exception information with a strong name and deploy the assembly into the global assembly cache.\n\n## Use grammatically correct error messages\n\nWrite clear sentences and include ending punctuation. Each sentence in the string assigned to the <xref:System.Exception.Message?displayProperty=nameWithType> property should end in a period. For example, \"The log table has overflowed.\" would be an appropriate message string.\n\n## Include a localized string message in every exception\n\nThe error message that the user sees is derived from the <xref:System.Exception.Message?displayProperty=nameWithType> property of the exception that was thrown, and not from the name of the exception class. Typically, you assign a value to the <xref:System.Exception.Message?displayProperty=nameWithType>  property by passing the message string to the `message` argument of an [Exception constructor](xref:System.Exception.%23ctor%2A).\n\nFor localized applications, you should provide a localized message string for every exception that your application can throw. You use resource files to provide localized error messages. For information on localizing applications and retrieving localized strings, see [Resources in Desktop Apps](../../framework/resources/index.md) and <xref:System.Resources.ResourceManager?displayProperty=nameWithType>.\n\n## In custom exceptions, provide additional properties as needed\n\nProvide additional properties for an exception (in addition to the custom message string) only when there's a programmatic scenario where the additional information is useful. For example, the <xref:System.IO.FileNotFoundException> provides the <xref:System.IO.FileNotFoundException.FileName> property.\n\n## Place throw statements so that the stack trace will be helpful\n\nThe stack trace begins at the statement where the exception is thrown and ends at the `catch` statement that catches the exception.\n\n## Use exception builder methods\n\nIt is common for a class to throw the same exception from different places in its implementation. To avoid excessive code, use helper methods that create the exception and return it. For example:\n\n[!code-cpp[Conceptual.Exception.Handling#6](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.exception.handling/cpp/source.cpp#6)]\n[!code-csharp[Conceptual.Exception.Handling#6](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.exception.handling/cs/source.cs#6)]\n[!code-vb[Conceptual.Exception.Handling#6](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.exception.handling/vb/source.vb#6)]\n\nIn some cases, it's more appropriate to use the exception's constructor to build the exception. An example is a global exception class such as <xref:System.ArgumentException>.\n\n## Restore state when methods don't complete due to exceptions\n\nCallers should be able to assume that there are no side effects when an exception is thrown from a method. For example, if you have code that transfers money by withdrawing from one account and depositing in another account, and an exception is thrown while executing the deposit, you don't want the withdrawal to remain in effect.\n\n```csharp\npublic void TransferFunds(Account from, Account to, decimal amount)\n{\n    from.Withdrawal(amount);\n    // If the deposit fails, the withdrawal shouldn't remain in effect.\n    to.Deposit(amount);\n}\n```\n\nThe method above does not directly throw any exceptions, but must be written defensively so that if the deposit operation fails, the withdrawal is reversed.\n\nOne way to handle this situation is to catch any exceptions thrown by the deposit transaction and roll back the withdrawal.\n\n```csharp\nprivate static void TransferFunds(Account from, Account to, decimal amount)\n{\n    string withdrawalTrxID = from.Withdrawal(amount);\n    try\n    {\n        to.Deposit(amount);\n    }\n    catch\n    {\n        from.RollbackTransaction(withdrawalTrxID);\n        throw;\n    }\n}\n```\n\nThis example illustrates the use of `throw` to re-throw the original exception, which can make it easier for callers to see the real cause of the problem without having to examine the <xref:System.Exception.InnerException> property. An alternative is to throw a new exception and include the original exception as the inner exception:\n\n```csharp\ncatch (Exception ex)\n{\n    from.RollbackTransaction(withdrawalTrxID);\n    throw new TransferFundsException(\"Withdrawal failed\", innerException: ex)\n    {\n        From = from,\n        To = to,\n        Amount = amount\n    };\n}\n```\n\n## See also\n\n- [Exceptions](index.md)\n","nodes":[{"pos":[4,248],"embed":true,"restype":"x-metadata","content":"title: \"Best Practices for exceptions - .NET\"\nms.date: \"12/05/2018\"\nms.technology: dotnet-standard\ndev_langs:\n  - \"csharp\"\n  - \"vb\"\n  - \"cpp\"\nhelpviewer_keywords:\n  - \"exceptions, best practices\"\nms.assetid: f06da765-235b-427a-bfb6-47cd219af539","nodes":[{"content":"Best Practices for exceptions - .NET","nodes":[{"pos":[0,36],"content":"Best Practices for exceptions - .NET","nodes":[{"content":"Best Practices for exceptions - .NET","pos":[0,36]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[256,285],"content":"Best practices for exceptions","linkify":"Best practices for exceptions","nodes":[{"content":"Best practices for exceptions","pos":[0,29]}]},{"content":"A well-designed app handles exceptions and errors to prevent app crashes.","pos":[287,360]},{"content":"This section describes best practices for handling and creating exceptions.","pos":[361,436]},{"pos":[441,513],"content":"Use try/catch/finally blocks to recover from errors or release resources","linkify":"Use try/catch/finally blocks to recover from errors or release resources","nodes":[{"content":"Use try/catch/finally blocks to recover from errors or release resources","pos":[0,72]}]},{"content":"Use <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> blocks around code that can potentially generate an exception <bpt id=\"p1\">***</bpt>and<ept id=\"p1\">***</ept> your code can recover from that exception.","pos":[515,647],"source":"Use `try`/`catch` blocks around code that can potentially generate an exception ***and*** your code can recover from that exception."},{"content":"In <ph id=\"ph1\">`catch`</ph> blocks, always order exceptions from the most derived to the least derived.","pos":[648,734],"source":" In `catch` blocks, always order exceptions from the most derived to the least derived."},{"content":"All exceptions derive from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>.","pos":[735,786],"source":" All exceptions derive from <xref:System.Exception>."},{"content":"More derived exceptions are not handled by a catch clause that is preceded by a catch clause for a base exception class.","pos":[787,907]},{"content":"When your code cannot recover from an exception, don't catch that exception.","pos":[908,984]},{"content":"Enable methods further up the call stack to recover if possible.","pos":[985,1049]},{"content":"Clean up resources allocated with either <ph id=\"ph1\">`using`</ph> statements, or <ph id=\"ph2\">`finally`</ph> blocks.","pos":[1051,1132],"source":"Clean up resources allocated with either `using` statements, or `finally` blocks."},{"content":"Prefer <ph id=\"ph1\">`using`</ph> statements to automatically clean up resources when exceptions are thrown.","pos":[1133,1222],"source":" Prefer `using` statements to automatically clean up resources when exceptions are thrown."},{"content":"Use <ph id=\"ph1\">`finally`</ph> blocks to clean up resources that don't implement <ph id=\"ph2\">&lt;xref:System.IDisposable&gt;</ph>.","pos":[1223,1313],"source":" Use `finally` blocks to clean up resources that don't implement <xref:System.IDisposable>."},{"content":"Code in a <ph id=\"ph1\">`finally`</ph> clause is almost always executed even when exceptions are thrown.","pos":[1314,1399],"source":" Code in a `finally` clause is almost always executed even when exceptions are thrown."},{"pos":[1404,1456],"content":"Handle common conditions without throwing exceptions","linkify":"Handle common conditions without throwing exceptions","nodes":[{"content":"Handle common conditions without throwing exceptions","pos":[0,52]}]},{"content":"For conditions that are likely to occur but might trigger an exception, consider handling them in a way that will avoid the exception.","pos":[1458,1592]},{"content":"For example, if you try to close a connection that is already closed, you'll get an <ph id=\"ph1\">`InvalidOperationException`</ph>.","pos":[1593,1705],"source":" For example, if you try to close a connection that is already closed, you'll get an `InvalidOperationException`."},{"content":"You can avoid that by using an <ph id=\"ph1\">`if`</ph> statement to check the connection state before trying to close it.","pos":[1706,1808],"source":" You can avoid that by using an `if` statement to check the connection state before trying to close it."},{"pos":[2237,2345],"content":"If you don't check connection state before closing, you can catch the <ph id=\"ph1\">`InvalidOperationException`</ph> exception.","source":"If you don't check connection state before closing, you can catch the `InvalidOperationException` exception."},{"content":"The method to choose depends on how often you expect the event to occur.","pos":[2774,2846]},{"content":"Use exception handling if the event doesn't occur very often, that is, if the event is truly exceptional and indicates an error (such as an unexpected end-of-file).","pos":[2850,3014]},{"content":"When you use exception handling, less code is executed in normal conditions.","pos":[3015,3091]},{"content":"Check for error conditions in code if the event happens routinely and could be considered part of normal execution.","pos":[3095,3210]},{"content":"When you check for common error conditions, less code is executed because you avoid exceptions.","pos":[3211,3306]},{"pos":[3311,3359],"content":"Design classes so that exceptions can be avoided","linkify":"Design classes so that exceptions can be avoided","nodes":[{"content":"Design classes so that exceptions can be avoided","pos":[0,48]}]},{"content":"A class can provide methods or properties that enable you to avoid making a call that would trigger an exception.","pos":[3361,3474]},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> class provides methods that help determine whether the end of the file has been reached.","pos":[3475,3606],"source":" For example, a <xref:System.IO.FileStream> class provides methods that help determine whether the end of the file has been reached."},{"content":"These can be used to avoid the exception that is thrown if you read past the end of the file.","pos":[3607,3700]},{"content":"The following example shows how to read to the end of a file without triggering an exception.","pos":[3701,3794]},{"content":"Another way to avoid exceptions is to return <ph id=\"ph1\">`null`</ph> for extremely common error cases instead of throwing an exception.","pos":[4223,4341],"source":"Another way to avoid exceptions is to return `null` for extremely common error cases instead of throwing an exception."},{"content":"An extremely common error case can be considered normal flow of control.","pos":[4342,4414]},{"content":"By returning <ph id=\"ph1\">`null`</ph> in these cases, you minimize the performance impact to an app.","pos":[4415,4497],"source":" By returning `null` in these cases, you minimize the performance impact to an app."},{"pos":[4502,4553],"content":"Throw exceptions instead of returning an error code","linkify":"Throw exceptions instead of returning an error code","nodes":[{"content":"Throw exceptions instead of returning an error code","pos":[0,51]}]},{"content":"Exceptions ensure that failures do not go unnoticed because calling code didn't check a return code.","pos":[4555,4655]},{"pos":[4660,4699],"content":"Use the predefined .NET exception types","linkify":"Use the predefined .NET exception types","nodes":[{"content":"Use the predefined .NET exception types","pos":[0,39]}]},{"content":"Introduce a new exception class only when a predefined one doesn't apply.","pos":[4701,4774]},{"content":"For example:","pos":[4775,4787]},{"pos":[4791,4935],"content":"Throw an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception if a property set or method call is not appropriate given the object's current state.","source":"Throw an <xref:System.InvalidOperationException> exception if a property set or method call is not appropriate given the object's current state."},{"pos":[4939,5105],"content":"Throw an <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> exception or one of the predefined classes that derive from <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> if invalid parameters are passed.","source":"Throw an <xref:System.ArgumentException> exception or one of the predefined classes that derive from <xref:System.ArgumentException> if invalid parameters are passed."},{"pos":[5110,5161],"content":"End exception class names with the word <ph id=\"ph1\">`Exception`</ph>","linkify":"End exception class names with the word `Exception`","source":"End exception class names with the word `Exception`"},{"content":"When a custom exception is necessary, name it appropriately and derive it from the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class.","pos":[5163,5276],"source":"When a custom exception is necessary, name it appropriately and derive it from the <xref:System.Exception> class."},{"content":"For example:","pos":[5277,5289]},{"pos":[5721,5775],"content":"Include three constructors in custom exception classes","linkify":"Include three constructors in custom exception classes","nodes":[{"content":"Include three constructors in custom exception classes","pos":[0,54]}]},{"content":"Use at least the three common constructors when creating your own exception classes: the default constructor, a constructor that takes a string message, and a constructor that takes a string message and an inner exception.","pos":[5777,5999]},{"pos":[6003,6062],"content":"<ph id=\"ph1\">&lt;xref:System.Exception.%23ctor&gt;</ph>, which uses default values.","source":"<xref:System.Exception.%23ctor>, which uses default values."},{"pos":[6066,6149],"content":"<ph id=\"ph1\">&lt;xref:System.Exception.%23ctor%28System.String%29&gt;</ph>, which accepts a string message.","source":"<xref:System.Exception.%23ctor%28System.String%29>, which accepts a string message."},{"pos":[6153,6278],"content":"<ph id=\"ph1\">&lt;xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29&gt;</ph>, which accepts a string message and an inner exception.","source":"<xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which accepts a string message and an inner exception."},{"pos":[6280,6383],"content":"For an example, see <bpt id=\"p1\">[</bpt>How to: Create User-Defined Exceptions<ept id=\"p1\">](how-to-create-user-defined-exceptions.md)</ept>.","source":"For an example, see [How to: Create User-Defined Exceptions](how-to-create-user-defined-exceptions.md)."},{"pos":[6388,6455],"content":"Ensure that exception data is available when code executes remotely","linkify":"Ensure that exception data is available when code executes remotely","nodes":[{"content":"Ensure that exception data is available when code executes remotely","pos":[0,67]}]},{"content":"When you create user-defined exceptions, ensure that the metadata for the exceptions is available to code that is executing remotely.","pos":[6457,6590]},{"content":"For example, on .NET implementations that support App Domains, exceptions may occur across App domains.","pos":[6592,6695]},{"content":"Suppose App Domain A creates App Domain B, which executes code that throws an exception.","pos":[6696,6784]},{"content":"For App Domain A to properly catch and handle the exception, it must be able to find the assembly that contains the exception thrown by App Domain B. If App Domain B throws an exception that is contained in an assembly under its application base, but not under App Domain A's application base, App Domain A will not be able to find the exception, and the common language runtime will throw a <ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> exception.","pos":[6785,7226],"source":" For App Domain A to properly catch and handle the exception, it must be able to find the assembly that contains the exception thrown by App Domain B. If App Domain B throws an exception that is contained in an assembly under its application base, but not under App Domain A's application base, App Domain A will not be able to find the exception, and the common language runtime will throw a <xref:System.IO.FileNotFoundException> exception."},{"content":"To avoid this situation, you can deploy the assembly that contains the exception information in two ways:","pos":[7227,7332]},{"content":"Put the assembly into a common application base shared by both app domains.","pos":[7336,7411]},{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[7417,7424],"source":"\\- or -"},{"content":"If the domains do not share a common application base, sign the assembly that contains the exception information with a strong name and deploy the assembly into the global assembly cache.","pos":[7428,7615]},{"pos":[7620,7660],"content":"Use grammatically correct error messages","linkify":"Use grammatically correct error messages","nodes":[{"content":"Use grammatically correct error messages","pos":[0,40]}]},{"content":"Write clear sentences and include ending punctuation.","pos":[7662,7715]},{"content":"Each sentence in the string assigned to the <ph id=\"ph1\">&lt;xref:System.Exception.Message?displayProperty=nameWithType&gt;</ph> property should end in a period.","pos":[7716,7853],"source":" Each sentence in the string assigned to the <xref:System.Exception.Message?displayProperty=nameWithType> property should end in a period."},{"content":"For example, \"The log table has overflowed.\"","pos":[7854,7898]},{"content":"would be an appropriate message string.","pos":[7899,7938]},{"pos":[7943,7996],"content":"Include a localized string message in every exception","linkify":"Include a localized string message in every exception","nodes":[{"content":"Include a localized string message in every exception","pos":[0,53]}]},{"content":"The error message that the user sees is derived from the <ph id=\"ph1\">&lt;xref:System.Exception.Message?displayProperty=nameWithType&gt;</ph> property of the exception that was thrown, and not from the name of the exception class.","pos":[7998,8204],"source":"The error message that the user sees is derived from the <xref:System.Exception.Message?displayProperty=nameWithType> property of the exception that was thrown, and not from the name of the exception class."},{"content":"Typically, you assign a value to the <ph id=\"ph1\">&lt;xref:System.Exception.Message?displayProperty=nameWithType&gt;</ph>  property by passing the message string to the <ph id=\"ph2\">`message`</ph> argument of an <bpt id=\"p1\">[</bpt>Exception constructor<ept id=\"p1\">](xref:System.Exception.%23ctor%2A)</ept>.","pos":[8205,8433],"source":" Typically, you assign a value to the <xref:System.Exception.Message?displayProperty=nameWithType>  property by passing the message string to the `message` argument of an [Exception constructor](xref:System.Exception.%23ctor%2A)."},{"content":"For localized applications, you should provide a localized message string for every exception that your application can throw.","pos":[8435,8561]},{"content":"You use resource files to provide localized error messages.","pos":[8562,8621]},{"content":"For information on localizing applications and retrieving localized strings, see <bpt id=\"p1\">[</bpt>Resources in Desktop Apps<ept id=\"p1\">](../../framework/resources/index.md)</ept> and <ph id=\"ph1\">&lt;xref:System.Resources.ResourceManager?displayProperty=nameWithType&gt;</ph>.","pos":[8622,8840],"source":" For information on localizing applications and retrieving localized strings, see [Resources in Desktop Apps](../../framework/resources/index.md) and <xref:System.Resources.ResourceManager?displayProperty=nameWithType>."},{"pos":[8845,8906],"content":"In custom exceptions, provide additional properties as needed","linkify":"In custom exceptions, provide additional properties as needed","nodes":[{"content":"In custom exceptions, provide additional properties as needed","pos":[0,61]}]},{"content":"Provide additional properties for an exception (in addition to the custom message string) only when there's a programmatic scenario where the additional information is useful.","pos":[8908,9083]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> provides the <ph id=\"ph2\">&lt;xref:System.IO.FileNotFoundException.FileName&gt;</ph> property.","pos":[9084,9210],"source":" For example, the <xref:System.IO.FileNotFoundException> provides the <xref:System.IO.FileNotFoundException.FileName> property."},{"pos":[9215,9277],"content":"Place throw statements so that the stack trace will be helpful","linkify":"Place throw statements so that the stack trace will be helpful","nodes":[{"content":"Place throw statements so that the stack trace will be helpful","pos":[0,62]}]},{"pos":[9279,9410],"content":"The stack trace begins at the statement where the exception is thrown and ends at the <ph id=\"ph1\">`catch`</ph> statement that catches the exception.","source":"The stack trace begins at the statement where the exception is thrown and ends at the `catch` statement that catches the exception."},{"pos":[9415,9444],"content":"Use exception builder methods","linkify":"Use exception builder methods","nodes":[{"content":"Use exception builder methods","pos":[0,29]}]},{"content":"It is common for a class to throw the same exception from different places in its implementation.","pos":[9446,9543]},{"content":"To avoid excessive code, use helper methods that create the exception and return it.","pos":[9544,9628]},{"content":"For example:","pos":[9629,9641]},{"content":"In some cases, it's more appropriate to use the exception's constructor to build the exception.","pos":[10070,10165]},{"content":"An example is a global exception class such as <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[10166,10245],"source":" An example is a global exception class such as <xref:System.ArgumentException>."},{"pos":[10250,10309],"content":"Restore state when methods don't complete due to exceptions","linkify":"Restore state when methods don't complete due to exceptions","nodes":[{"content":"Restore state when methods don't complete due to exceptions","pos":[0,59]}]},{"content":"Callers should be able to assume that there are no side effects when an exception is thrown from a method.","pos":[10311,10417]},{"content":"For example, if you have code that transfers money by withdrawing from one account and depositing in another account, and an exception is thrown while executing the deposit, you don't want the withdrawal to remain in effect.","pos":[10418,10642]},{"content":"The method above does not directly throw any exceptions, but must be written defensively so that if the deposit operation fails, the withdrawal is reversed.","pos":[10856,11012]},{"content":"One way to handle this situation is to catch any exceptions thrown by the deposit transaction and roll back the withdrawal.","pos":[11014,11137]},{"content":"This example illustrates the use of <ph id=\"ph1\">`throw`</ph> to re-throw the original exception, which can make it easier for callers to see the real cause of the problem without having to examine the <ph id=\"ph2\">&lt;xref:System.Exception.InnerException&gt;</ph> property.","pos":[11424,11656],"source":"This example illustrates the use of `throw` to re-throw the original exception, which can make it easier for callers to see the real cause of the problem without having to examine the <xref:System.Exception.InnerException> property."},{"content":"An alternative is to throw a new exception and include the original exception as the inner exception:","pos":[11657,11758]},{"pos":[12003,12011],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[12015,12037],"content":"<bpt id=\"p1\">[</bpt>Exceptions<ept id=\"p1\">](index.md)</ept>","source":"[Exceptions](index.md)"}]}