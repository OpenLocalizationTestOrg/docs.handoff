{"content":"---\ntitle: \"Constant and Literal Data Types (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"declaring constants [Visual Basic], literal data types\"\n  - \"data types [Visual Basic], declaring\"\n  - \"constants [Visual Basic], declaring\"\n  - \"explicit declarations\"\n  - \"literals [Visual Basic], coercing data type\"\n  - \"declarations [Visual Basic], data types\"\nms.assetid: 057206d2-3a5b-40b9-b3af-57446f9b52fa\n---\n# Constant and Literal Data Types (Visual Basic)\nA literal is a value that is expressed as itself rather than as a variable's value or the result of an expression, such as the number 3 or the string \"Hello\". A constant is a meaningful name that takes the place of a literal and retains this same value throughout the program, as opposed to a variable, whose value may change.  \n  \n When [Option Infer](../../../../visual-basic/language-reference/statements/option-infer-statement.md) is `Off` and [Option Strict](../../../../visual-basic/language-reference/statements/option-strict-statement.md) is `On`, you must declare all constants explicitly with a data type. In the following example, the data type of `MyByte` is explicitly declared as data type `Byte`:  \n  \n [!code-vb[VbVbalrConstants#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConstants/VB/Class1.vb#1)]  \n  \n When `Option Infer` is `On` or `Option Strict` is `Off`, you can declare a constant without specifying a data type with an `As` clause. The compiler determines the type of the constant from the type of the expression. A numeric integer literal is cast by default to the `Integer` data type. The default data type for floating-point numbers is `Double`, and the keywords `True` and `False` specify a `Boolean` constant.  \n  \n## Literals and Type Coercion  \n In some cases, you might want to force a literal to a particular data type; for example, when assigning a particularly large integral literal value to a variable of type `Decimal`. The following example produces an error:  \n  \n```  \nDim myDecimal as Decimal  \nmyDecimal = 100000000000000000000   ' This causes a compiler error.  \n```  \n  \n The error results from the representation of the literal. The `Decimal` data type can hold a value this large, but the literal is implicitly represented as a `Long`, which cannot.  \n  \n You can coerce a literal to a particular data type in two ways: by appending a type character to it, or by placing it within enclosing characters. A type character or enclosing characters must immediately precede and/or follow the literal, with no intervening space or characters of any kind.  \n  \n To make the previous example work, you can append the `D` type character to the literal, which causes it to be represented as a `Decimal`:  \n  \n [!code-vb[VbVbalrConstants#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConstants/VB/Class1.vb#2)]  \n  \n The following example demonstrates correct usage of type characters and enclosing characters:  \n  \n [!code-vb[VbVbalrConstants#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConstants/VB/Class1.vb#3)]  \n  \n The following table shows the enclosing characters and type characters available in Visual Basic.  \n  \n|Data type|Enclosing character|Appended type character|  \n|---|---|---|  \n|`Boolean`|(none)|(none)|  \n|`Byte`|(none)|(none)|  \n|`Char`|\"|C|  \n|`Date`|#|(none)|  \n|`Decimal`|(none)|D or @|  \n|`Double`|(none)|R or #|  \n|`Integer`|(none)|I or %|  \n|`Long`|(none)|L or &|  \n|`Short`|(none)|S|  \n|`Single`|(none)|F or !|  \n|`String`|\"|(none)|  \n  \n## See also\n\n- [User-Defined Constants](../../../../visual-basic/programming-guide/language-features/constants-enums/user-defined-constants.md)\n- [How to: Declare A Constant](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-a-constant.md)\n- [Constants Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)\n- [Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)\n- [Option Explicit Statement](../../../../visual-basic/language-reference/statements/option-explicit-statement.md)\n- [Enumerations Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-overview.md)\n- [How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)\n- [Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)\n- [Data Types](../../../../visual-basic/language-reference/data-types/index.md)\n- [Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)\n","nodes":[{"pos":[4,420],"embed":true,"restype":"x-metadata","content":"title: \"Constant and Literal Data Types (Visual Basic)\"\nms.date: 07/20/2015\nhelpviewer_keywords: \n  - \"declaring constants [Visual Basic], literal data types\"\n  - \"data types [Visual Basic], declaring\"\n  - \"constants [Visual Basic], declaring\"\n  - \"explicit declarations\"\n  - \"literals [Visual Basic], coercing data type\"\n  - \"declarations [Visual Basic], data types\"\nms.assetid: 057206d2-3a5b-40b9-b3af-57446f9b52fa","nodes":[{"content":"Constant and Literal Data Types (Visual Basic)","nodes":[{"pos":[0,46],"content":"Constant and Literal Data Types (Visual Basic)","nodes":[{"content":"Constant and Literal Data Types (Visual Basic)","pos":[0,46]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[427,473],"content":"Constant and Literal Data Types (Visual Basic)","linkify":"Constant and Literal Data Types (Visual Basic)","nodes":[{"content":"Constant and Literal Data Types (Visual Basic)","pos":[0,46]}]},{"content":"A literal is a value that is expressed as itself rather than as a variable's value or the result of an expression, such as the number 3 or the string \"Hello\".","pos":[474,632]},{"content":"A constant is a meaningful name that takes the place of a literal and retains this same value throughout the program, as opposed to a variable, whose value may change.","pos":[633,800]},{"content":"When <bpt id=\"p1\">[</bpt>Option Infer<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-infer-statement.md)</ept> is <ph id=\"ph1\">`Off`</ph> and <bpt id=\"p2\">[</bpt>Option Strict<ept id=\"p2\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept> is <ph id=\"ph2\">`On`</ph>, you must declare all constants explicitly with a data type.","pos":[807,1089],"source":"When [Option Infer](../../../../visual-basic/language-reference/statements/option-infer-statement.md) is `Off` and [Option Strict](../../../../visual-basic/language-reference/statements/option-strict-statement.md) is `On`, you must declare all constants explicitly with a data type."},{"content":"In the following example, the data type of <ph id=\"ph1\">`MyByte`</ph> is explicitly declared as data type <ph id=\"ph2\">`Byte`</ph>:","pos":[1090,1185],"source":" In the following example, the data type of `MyByte` is explicitly declared as data type `Byte`:"},{"content":"When <ph id=\"ph1\">`Option Infer`</ph> is <ph id=\"ph2\">`On`</ph> or <ph id=\"ph3\">`Option Strict`</ph> is <ph id=\"ph4\">`Off`</ph>, you can declare a constant without specifying a data type with an <ph id=\"ph5\">`As`</ph> clause.","pos":[1314,1449],"source":"When `Option Infer` is `On` or `Option Strict` is `Off`, you can declare a constant without specifying a data type with an `As` clause."},{"content":"The compiler determines the type of the constant from the type of the expression.","pos":[1450,1531]},{"content":"A numeric integer literal is cast by default to the <ph id=\"ph1\">`Integer`</ph> data type.","pos":[1532,1604],"source":" A numeric integer literal is cast by default to the `Integer` data type."},{"content":"The default data type for floating-point numbers is <ph id=\"ph1\">`Double`</ph>, and the keywords <ph id=\"ph2\">`True`</ph> and <ph id=\"ph3\">`False`</ph> specify a <ph id=\"ph4\">`Boolean`</ph> constant.","pos":[1605,1732],"source":" The default data type for floating-point numbers is `Double`, and the keywords `True` and `False` specify a `Boolean` constant."},{"pos":[1741,1767],"content":"Literals and Type Coercion","linkify":"Literals and Type Coercion","nodes":[{"content":"Literals and Type Coercion","pos":[0,26]}]},{"content":"In some cases, you might want to force a literal to a particular data type; for example, when assigning a particularly large integral literal value to a variable of type <ph id=\"ph1\">`Decimal`</ph>.","pos":[1771,1951],"source":"In some cases, you might want to force a literal to a particular data type; for example, when assigning a particularly large integral literal value to a variable of type `Decimal`."},{"content":"The following example produces an error:","pos":[1952,1992]},{"content":"The error results from the representation of the literal.","pos":[2111,2168]},{"content":"The <ph id=\"ph1\">`Decimal`</ph> data type can hold a value this large, but the literal is implicitly represented as a <ph id=\"ph2\">`Long`</ph>, which cannot.","pos":[2169,2290],"source":" The `Decimal` data type can hold a value this large, but the literal is implicitly represented as a `Long`, which cannot."},{"content":"You can coerce a literal to a particular data type in two ways: by appending a type character to it, or by placing it within enclosing characters.","pos":[2297,2443]},{"content":"A type character or enclosing characters must immediately precede and/or follow the literal, with no intervening space or characters of any kind.","pos":[2444,2589]},{"pos":[2596,2734],"content":"To make the previous example work, you can append the <ph id=\"ph1\">`D`</ph> type character to the literal, which causes it to be represented as a <ph id=\"ph2\">`Decimal`</ph>:","source":"To make the previous example work, you can append the `D` type character to the literal, which causes it to be represented as a `Decimal`:"},{"content":"The following example demonstrates correct usage of type characters and enclosing characters:","pos":[2863,2956]},{"content":"The following table shows the enclosing characters and type characters available in Visual Basic.","pos":[3085,3182]},{"content":"Data type","pos":[3189,3198]},{"content":"Enclosing character","pos":[3199,3218]},{"content":"Appended type character","pos":[3219,3242]},{"content":"(none)","pos":[3273,3279]},{"content":"(none)","pos":[3280,3286]},{"content":"(none)","pos":[3298,3304]},{"content":"(none)","pos":[3305,3311]},{"content":"\"","pos":[3323,3324]},{"content":"C","pos":[3325,3326]},{"content":"(none)","pos":[3340,3346]},{"content":"(none)","pos":[3361,3367]},{"content":"D or @","pos":[3368,3374]},{"content":"(none)","pos":[3388,3394]},{"content":"R or #","pos":[3395,3401]},{"content":"(none)","pos":[3416,3422]},{"content":"I or %","pos":[3423,3429]},{"content":"(none)","pos":[3441,3447]},{"content":"L or &amp;","pos":[3448,3454],"source":"L or &"},{"content":"(none)","pos":[3467,3473]},{"content":"S","pos":[3474,3475]},{"content":"(none)","pos":[3489,3495]},{"content":"F or !","pos":[3496,3502]},{"content":"\"","pos":[3516,3517]},{"content":"(none)","pos":[3518,3524]},{"pos":[3534,3542],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[3546,3674],"content":"<bpt id=\"p1\">[</bpt>User-Defined Constants<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/user-defined-constants.md)</ept>","source":"[User-Defined Constants](../../../../visual-basic/programming-guide/language-features/constants-enums/user-defined-constants.md)"},{"pos":[3677,3812],"content":"<bpt id=\"p1\">[</bpt>How to: Declare A Constant<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-a-constant.md)</ept>","source":"[How to: Declare A Constant](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-a-constant.md)"},{"pos":[3815,3935],"content":"<bpt id=\"p1\">[</bpt>Constants Overview<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)</ept>","source":"[Constants Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/constants-overview.md)"},{"pos":[3938,4046],"content":"<bpt id=\"p1\">[</bpt>Option Strict Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept>","source":"[Option Strict Statement](../../../../visual-basic/language-reference/statements/option-strict-statement.md)"},{"pos":[4049,4161],"content":"<bpt id=\"p1\">[</bpt>Option Explicit Statement<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/option-explicit-statement.md)</ept>","source":"[Option Explicit Statement](../../../../visual-basic/language-reference/statements/option-explicit-statement.md)"},{"pos":[4164,4290],"content":"<bpt id=\"p1\">[</bpt>Enumerations Overview<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-overview.md)</ept>","source":"[Enumerations Overview](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-overview.md)"},{"pos":[4293,4434],"content":"<bpt id=\"p1\">[</bpt>How to: Declare an Enumeration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)</ept>","source":"[How to: Declare an Enumeration](../../../../visual-basic/programming-guide/language-features/constants-enums/how-to-declare-enumerations.md)"},{"pos":[4437,4591],"content":"<bpt id=\"p1\">[</bpt>Enumerations and Name Qualification<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)</ept>","source":"[Enumerations and Name Qualification](../../../../visual-basic/programming-guide/language-features/constants-enums/enumerations-and-name-qualification.md)"},{"pos":[4594,4671],"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/index.md)</ept>","source":"[Data Types](../../../../visual-basic/language-reference/data-types/index.md)"},{"pos":[4674,4777],"content":"<bpt id=\"p1\">[</bpt>Constants and Enumerations<ept id=\"p1\">](../../../../visual-basic/language-reference/constants-and-enumerations.md)</ept>","source":"[Constants and Enumerations](../../../../visual-basic/language-reference/constants-and-enumerations.md)"}]}