<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="invocation-operator.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a0af33739c9cb4d090842219eba4ece9700ef89</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\invocation-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47f5bbeee7d21e10d3d7a4d618d247e54e3b873e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e937ccf399be6f483cc84d6fb24b0f273ccd80c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>() operator - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>() operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Parentheses, <ph id="ph1">`()`</ph>, are typically used for method or delegate invocation or in cast expressions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You also use parentheses to specify the order in which to evaluate operations in an expression.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Adding parentheses<ept id="p1">](../../programming-guide/statements-expressions-operators/operators.md#adding-parentheses)</ept> section of the <bpt id="p2">[</bpt>Operators<ept id="p2">](../../programming-guide/statements-expressions-operators/operators.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the list of operators ordered by precedence level, see <bpt id="p1">[</bpt>C# operators<ept id="p1">](index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Method invocation</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to invoke a method, with or without arguments, and a delegate:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You also use parentheses when you invoke a <bpt id="p1">[</bpt>constructor<ept id="p1">](../../programming-guide/classes-and-structs/constructors.md)</ept> with a <bpt id="p2">[</bpt><ph id="ph1">`new`</ph><ept id="p2">](../keywords/new-operator.md)</ept> operator.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about methods, see <bpt id="p1">[</bpt>Methods<ept id="p1">](../../programming-guide/classes-and-structs/methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about delegates, see <bpt id="p1">[</bpt>Delegates<ept id="p1">](../../programming-guide/delegates/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Cast expression</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A cast expression of the form <ph id="ph1">`(T)E`</ph> invokes a conversion operator to convert the value of expression <ph id="ph2">`E`</ph> to type <ph id="ph3">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If no explicit conversion exists from the type of <ph id="ph1">`E`</ph> to type <ph id="ph2">`T`</ph>, a compile-time error occurs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For information about how to define a conversion operator, see the <bpt id="p1">[</bpt>explicit<ept id="p1">](../keywords/explicit.md)</ept> and <bpt id="p2">[</bpt>implicit<ept id="p2">](../keywords/implicit.md)</ept> keyword articles.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example demonstrates type conversion between numeric types:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about predefined explicit conversions between numeric types, see <bpt id="p1">[</bpt>Explicit numeric conversions table<ept id="p1">](../keywords/explicit-numeric-conversions-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Casting and type conversions<ept id="p1">](../../programming-guide/types/casting-and-type-conversions.md)</ept> and <bpt id="p2">[</bpt>Conversion operators<ept id="p2">](../../programming-guide/statements-expressions-operators/conversion-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The operator <ph id="ph1">`()`</ph> cannot be overloaded.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Invocation expressions<ept id="p1">](~/_csharplang/spec/expressions.md#invocation-expressions)</ept> and <bpt id="p2">[</bpt>Cast expressions<ept id="p2">](~/_csharplang/spec/expressions.md#cast-expressions)</ept> sections of the <bpt id="p3">[</bpt>C# language specification<ept id="p3">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>