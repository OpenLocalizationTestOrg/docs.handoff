{"content":"---\ntitle: \"Lambda expression will not be removed from this event handler | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"bc42326\"\n  - \"vbc42326\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"BC42326\"\nms.assetid: 63214dc6-0112-4245-8ebf-7c9e8f5a5782\ncaps.latest.revision: 8\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Lambda expression will not be removed from this event handler\nLambda expression will not be removed from this event handler. Assign the lambda expression to a variable and use the variable to add and remove the event.  \n  \n When lambda expressions are used with event handlers, you may not see the behavior you expect. The compiler generates a new method for each lambda expression definition, even if they are identical. Therefore, the following code displays `False`.  \n  \n```vb  \nModule Module1  \n  \n    Sub Main()  \n        Dim fun1 As ChangeInteger = Function(p As Integer) p + 1  \n        Dim fun2 As ChangeInteger = Function(p As Integer) p + 1  \n        Console.WriteLine(fun1 = fun2)  \n    End Sub  \n  \n    Delegate Function ChangeInteger(ByVal x As Integer) As Integer  \n  \nEnd Module  \n```  \n  \n When lambda expressions are used with event handlers, this may cause unexpected results. In the following example, the lambda expression added by `AddHandler` is not removed by the `RemoveHandler` statement.  \n  \n```vb  \nModule Module1  \n  \n    Event ProcessInteger(ByVal x As Integer)  \n  \n    Sub Main()  \n  \n        ' The following line adds one listener to the event.  \n        AddHandler ProcessInteger, Function(m As Integer) m  \n  \n        ' The following statement searches the current listeners   \n        ' for a match to remove. However, this lambda is not the same  \n        ' as the previous one, so nothing is removed.  \n        RemoveHandler ProcessInteger, Function(m As Integer) m  \n  \n    End Sub  \nEnd Module  \n```  \n  \n By default, this message is a warning. For more information about how to hide warnings or treat warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic).  \n  \n **Error ID:** BC42326  \n  \n## To correct this error  \n  \n-   To avoid the warning and remove the lambda expression, assign the lambda expression to a variable and use the variable in both the `AddHandler` and `RemoveHandler` statements, as shown in the following example.  \n  \n```vb  \nModule Module1  \n  \n    Event ProcessInteger(ByVal x As Integer)  \n  \n    Dim PrintHandler As ProcessIntegerEventHandler  \n  \n    Sub Main()  \n  \n        ' Assign the lambda expression to a variable.  \n        PrintHandler = Function(m As Integer) m  \n  \n        ' Use the variable to add the listener.  \n        AddHandler ProcessInteger, PrintHandler  \n  \n        ' Use the variable again when you want to remove the listener.  \n        RemoveHandler ProcessInteger, PrintHandler  \n  \n    End Sub  \nEnd Module  \n```  \n  \n## See Also  \n [Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)   \n [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)   \n [Events](../../../visual-basic/programming-guide/language-features/events/index.md)","nodes":[{"pos":[12,90],"content":"Lambda expression will not be removed from this event handler | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Lambda expression will not be removed from this event handler | Microsoft Docs","pos":[0,78]}]},{"pos":[628,689],"content":"Lambda expression will not be removed from this event handler","linkify":"Lambda expression will not be removed from this event handler","nodes":[{"content":"Lambda expression will not be removed from this event handler","pos":[0,61]}]},{"content":"Lambda expression will not be removed from this event handler.","pos":[690,752]},{"content":"Assign the lambda expression to a variable and use the variable to add and remove the event.","pos":[753,845]},{"content":"When lambda expressions are used with event handlers, you may not see the behavior you expect.","pos":[852,946]},{"content":"The compiler generates a new method for each lambda expression definition, even if they are identical.","pos":[947,1049]},{"content":"Therefore, the following code displays <ph id=\"ph1\">`False`</ph>.","pos":[1050,1097],"source":" Therefore, the following code displays `False`."},{"content":"When lambda expressions are used with event handlers, this may cause unexpected results.","pos":[1435,1523]},{"content":"In the following example, the lambda expression added by <ph id=\"ph1\">`AddHandler`</ph> is not removed by the <ph id=\"ph2\">`RemoveHandler`</ph> statement.","pos":[1524,1642],"source":" In the following example, the lambda expression added by `AddHandler` is not removed by the `RemoveHandler` statement."},{"content":"By default, this message is a warning.","pos":[2175,2213]},{"content":"For more information about how to hide warnings or treat warnings as errors, see <bpt id=\"p1\">[</bpt>Configuring Warnings in Visual Basic<ept id=\"p1\">](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.","pos":[2214,2416],"source":" For more information about how to hide warnings or treat warnings as errors, see [Configuring Warnings in Visual Basic](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)."},{"pos":[2423,2444],"content":"<bpt id=\"p1\">**</bpt>Error ID:<ept id=\"p1\">**</ept> BC42326","source":"**Error ID:** BC42326"},{"pos":[2453,2474],"content":"To correct this error","linkify":"To correct this error","nodes":[{"content":"To correct this error","pos":[0,21]}]},{"pos":[2484,2694],"content":"To avoid the warning and remove the lambda expression, assign the lambda expression to a variable and use the variable in both the <ph id=\"ph1\">`AddHandler`</ph> and <ph id=\"ph2\">`RemoveHandler`</ph> statements, as shown in the following example.","source":"To avoid the warning and remove the lambda expression, assign the lambda expression to a variable and use the variable in both the `AddHandler` and `RemoveHandler` statements, as shown in the following example."},{"pos":[3234,3242],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept><ph id=\"ph1\"> </ph>","pos":[3246,3359],"source":"[Lambda Expressions](../../../visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Relaxed Delegate Conversion<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md)</ept><ph id=\"ph1\"> </ph>","pos":[3362,3493],"source":" [Relaxed Delegate Conversion](../../../visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Events<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/events/index.md)</ept>","pos":[3496,3580],"source":" [Events](../../../visual-basic/programming-guide/language-features/events/index.md)"}]}