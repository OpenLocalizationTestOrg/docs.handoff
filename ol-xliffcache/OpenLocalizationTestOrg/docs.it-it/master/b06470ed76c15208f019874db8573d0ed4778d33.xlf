<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="managing-concurrency-with-dependenttransaction.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b06470ed76c15208f019874db8573d0ed4778d33</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\transactions\managing-concurrency-with-dependenttransaction.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cf900a9d81f5ef1320eab0809050617aed1374e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0d875d440a4078008129e729341137cc0763cf0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Managing Concurrency with DependentTransaction</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Managing Concurrency with DependentTransaction</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> object is created using the <ph id="ph2">&lt;xref:System.Transactions.Transaction.DependentClone%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Its sole purpose is to guarantee that the transaction cannot commit while some other pieces of code (for example, a worker thread) are still performing work on the transaction.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When the work done within the cloned transaction is complete and ready to be committed, it can notify the creator of the transaction using the <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Thus, you can preserve the consistency and correctness of data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class can also be used to manage concurrency between asynchronous tasks.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this scenario, the parent can continue to execute any code while the dependent clone works on its own tasks.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In other words, the parent's execution is not blocked until the dependent completes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating a Dependent Clone</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To create a dependent transaction, call the <ph id="ph1">&lt;xref:System.Transactions.Transaction.DependentClone%2A&gt;</ph> method and pass the <ph id="ph2">&lt;xref:System.Transactions.DependentCloneOption&gt;</ph> enumeration as a parameter.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This parameter defines the behavior of the transaction if <ph id="ph1">`Commit`</ph> is called on the parent transaction before the dependent clone indicates that it is ready for the transaction to commit (by calling the <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> method).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following values are valid for this parameter:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Transactions.DependentCloneOption.BlockCommitUntilComplete&gt;</ph> creates a dependent transaction that blocks the commit process of the parent transaction until the parent transaction times out, or until <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> is called on all dependents indicating their completion.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is useful when the client does not want the parent transaction to commit until the dependent transactions have completed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the parent finishes its work earlier than the dependent transaction and calls <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> on the transaction, the commit process is blocked in a state where additional work can be done on the transaction and new enlistments can be created, until all of the dependents call <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As soon as all of them have finished their work and call <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph>, the commit process for the transaction begins.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Transactions.DependentCloneOption.RollbackIfNotComplete&gt;</ph>, on the other hand, creates a dependent transaction that automatically aborts if <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> is called on the parent transaction before <ph id="ph3">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this case, all the work done in the dependent transaction is intact within one transaction lifetime, and no one has a chance to commit just a portion of it.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> method must be called only once when your application finishes its work on the dependent transaction; otherwise, a <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>After this call is invoked, you must not attempt any additional work on the transaction, or an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create a dependent transaction to manage two concurrent tasks by cloning a dependent transaction and passing it to a worker thread.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The client code creates a transactional scope that also sets the ambient transaction.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You should not pass the ambient transaction to the worker thread.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Instead, you should clone the current (ambient) transaction by calling the <ph id="ph1">&lt;xref:System.Transactions.Transaction.DependentClone%2A&gt;</ph> method on the current transaction, and pass the dependent to the worker thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ThreadMethod`</ph> method executes on the new thread.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The client starts a new thread, passing the dependent transaction as the <ph id="ph1">`ThreadMethod`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because the dependent transaction is created with <ph id="ph1">&lt;xref:System.Transactions.DependentCloneOption.BlockCommitUntilComplete&gt;</ph>, you are guaranteed that the transaction cannot be committed until all of the transactional work done on the second thread is finished and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> is called on the dependent transaction.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This means that if the client's scope ends (when it tries to dispose of the transaction object at the end of the <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement) before the new thread calls <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> on the dependent transaction, the client code blocks until <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> is called on the dependent.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Then the transaction can finish committing or aborting.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Concurrency Issues</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There are a few additional concurrency issues that you need to be aware of when using the <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the worker thread rolls back the transaction but the parent tries to commit it, a <ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You should create a new dependent clone for each worker thread in the transaction.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Do not pass the same dependent clone to multiple threads, because only one of them can call <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction.Complete%2A&gt;</ph> on it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the worker thread spawns a new worker thread, make sure to create a dependent clone from the dependent clone and pass it to the new thread.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>