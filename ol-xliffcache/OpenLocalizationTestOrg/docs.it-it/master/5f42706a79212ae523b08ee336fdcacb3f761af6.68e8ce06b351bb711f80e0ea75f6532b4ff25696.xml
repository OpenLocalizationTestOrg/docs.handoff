{"content":"---\ntitle: \"Object Variable Values (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"object variables, values\"\n  - \"values, of object variables\"\n  - \"data types [Visual Basic], object variable\"\n  - \"variables [Visual Basic], object\"\nms.assetid: 31555704-58a3-49f1-9a0a-6421f605664f\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Object Variable Values (Visual Basic)\nA variable of the [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md) can refer to data of any type. The value you store in an `Object` variable is kept elsewhere in memory, while the variable itself holds a pointer to the data.  \n  \n## Object Classifier Functions  \n [!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] supplies functions that return information about what an `Object` variable refers to, as shown in the following table.  \n  \n|Function|Returns True if the Object variable refers to|  \n|--------------|---------------------------------------------------|  \n|<xref:Microsoft.VisualBasic.Information.IsArray%2A>|An array of values, rather than a single value|  \n|<xref:Microsoft.VisualBasic.Information.IsDate%2A>|A [Date Data Type](../../../../visual-basic/language-reference/data-types/date-data-type.md) value, or a string that can be interpreted as a date and time value|  \n|<xref:Microsoft.VisualBasic.Information.IsDBNull%2A>|An object of type <xref:System.DBNull>, which represents missing or nonexistent data|  \n|<xref:Microsoft.VisualBasic.Information.IsError%2A>|An exception object, which derives from <xref:System.Exception>|  \n|<xref:Microsoft.VisualBasic.Information.IsNothing%2A>|[Nothing](../../../../visual-basic/language-reference/nothing.md), that is, no object is currently assigned to the variable|  \n|<xref:Microsoft.VisualBasic.Information.IsNumeric%2A>|A number, or a string that can be interpreted as a number|  \n|<xref:Microsoft.VisualBasic.Information.IsReference%2A>|A reference type (such as a string, array, delegate, or class type)|  \n  \n You can use these functions to avoid submitting an invalid value to an operation or a procedure.  \n  \n## TypeOf Operator  \n You can also use the [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md) to determine whether an object variable currently refers to a specific data type. The `TypeOf`...`Is` expression evaluates to `True` if the run-time type of the operand is derived from or implements the specified type.  \n  \n The following example uses `TypeOf` on object variables referring to value and reference types.  \n  \n```  \n' The following statement puts a value type (Integer) in an Object variable.  \nDim num As Object = 10  \n' The following statement puts a reference type (Form) in an Object variable.  \nDim frm As Object = New Form()  \nIf TypeOf num Is Long Then Debug.WriteLine(\"num is Long\")  \nIf TypeOf num Is Integer Then Debug.WriteLine(\"num is Integer\")  \nIf TypeOf num Is Short Then Debug.WriteLine(\"num is Short\")  \nIf TypeOf num Is Object Then Debug.WriteLine(\"num is Object\")  \nIf TypeOf frm Is Form Then Debug.WriteLine(\"frm is Form\")  \nIf TypeOf frm Is Label Then Debug.WriteLine(\"frm is Label\")  \nIf TypeOf frm Is Object Then Debug.WriteLine(\"frm is Object\")  \n```  \n  \n The preceding example writes the following lines to the **Debug** window:  \n  \n `num is Integer`  \n  \n `num is Object`  \n  \n `frm is Form`  \n  \n `frm is Object`  \n  \n The object variable `num` refers to data of type `Integer`, and `frm` refers to an object of class <xref:System.Windows.Forms.Form>.  \n  \n## Object Arrays  \n You can declare and use an array of `Object` variables. This is useful when you need to handle a variety of data types and object classes. All the elements in an array must have the same declared data type. Declaring this data type as `Object` allows you to store objects and class instances alongside other data types in the array.  \n  \n## See Also  \n [Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)   \n [Object Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/object-variable-declaration.md)   \n [Object Variable Assignment](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md)   \n [How to: Refer to the Current Instance of an Object](../../../../visual-basic/programming-guide/language-features/variables/how-to-refer-to-the-current-instance-of-an-object.md)   \n [How to: Determine What Type an Object Variable Refers To](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-what-type-an-object-variable-refers-to.md)   \n [How to: Determine Whether Two Objects Are Related](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-related.md)   \n [How to: Determine Whether Two Objects Are Identical](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-identical.md)   \n [Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)","nodes":[{"pos":[4,724],"embed":true,"restype":"x-metadata","content":"title: \"Object Variable Values (Visual Basic) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"object variables, values\"\n  - \"values, of object variables\"\n  - \"data types [Visual Basic], object variable\"\n  - \"variables [Visual Basic], object\"\nms.assetid: 31555704-58a3-49f1-9a0a-6421f605664f\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"Object Variable Values (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,54],"content":"Object Variable Values (Visual Basic) | Microsoft Docs","nodes":[{"content":"Object Variable Values (Visual Basic) | Microsoft Docs","pos":[0,54]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[731,768],"content":"Object Variable Values (Visual Basic)","linkify":"Object Variable Values (Visual Basic)","nodes":[{"content":"Object Variable Values (Visual Basic)","pos":[0,37]}]},{"content":"A variable of the <bpt id=\"p1\">[</bpt>Object Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept> can refer to data of any type.","pos":[769,912],"source":"A variable of the [Object Data Type](../../../../visual-basic/language-reference/data-types/object-data-type.md) can refer to data of any type."},{"content":"The value you store in an <ph id=\"ph1\">`Object`</ph> variable is kept elsewhere in memory, while the variable itself holds a pointer to the data.","pos":[913,1040],"source":" The value you store in an `Object` variable is kept elsewhere in memory, while the variable itself holds a pointer to the data."},{"pos":[1049,1076],"content":"Object Classifier Functions","linkify":"Object Classifier Functions","nodes":[{"content":"Object Classifier Functions","pos":[0,27]}]},{"pos":[1080,1291],"content":"<ph id=\"ph1\">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> supplies functions that return information about what an <ph id=\"ph2\">`Object`</ph> variable refers to, as shown in the following table.","source":"[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)] supplies functions that return information about what an `Object` variable refers to, as shown in the following table."},{"content":"Function","pos":[1298,1306]},{"content":"Returns True if the Object variable refers to","pos":[1307,1352]},{"content":"An array of values, rather than a single value","pos":[1480,1526]},{"pos":[1582,1742],"content":"A <bpt id=\"p1\">[</bpt>Date Data Type<ept id=\"p1\">](../../../../visual-basic/language-reference/data-types/date-data-type.md)</ept> value, or a string that can be interpreted as a date and time value","source":"A [Date Data Type](../../../../visual-basic/language-reference/data-types/date-data-type.md) value, or a string that can be interpreted as a date and time value"},{"content":"An object of type <ph id=\"ph1\">&lt;xref:System.DBNull&gt;</ph>, which represents missing or nonexistent data","pos":[1800,1884],"source":"An object of type <xref:System.DBNull>, which represents missing or nonexistent data"},{"content":"An exception object, which derives from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph>","pos":[1941,2004],"source":"An exception object, which derives from <xref:System.Exception>"},{"pos":[2063,2186],"content":"<bpt id=\"p1\">[</bpt>Nothing<ept id=\"p1\">](../../../../visual-basic/language-reference/nothing.md)</ept>, that is, no object is currently assigned to the variable","source":"[Nothing](../../../../visual-basic/language-reference/nothing.md), that is, no object is currently assigned to the variable"},{"content":"A number, or a string that can be interpreted as a number","pos":[2245,2302]},{"content":"A reference type (such as a string, array, delegate, or class type)","pos":[2363,2430]},{"content":"You can use these functions to avoid submitting an invalid value to an operation or a procedure.","pos":[2438,2534]},{"pos":[2543,2558],"content":"TypeOf Operator","linkify":"TypeOf Operator","nodes":[{"content":"TypeOf Operator","pos":[0,15]}]},{"content":"You can also use the <bpt id=\"p1\">[</bpt>TypeOf Operator<ept id=\"p1\">](../../../../visual-basic/language-reference/operators/typeof-operator.md)</ept> to determine whether an object variable currently refers to a specific data type.","pos":[2562,2756],"source":"You can also use the [TypeOf Operator](../../../../visual-basic/language-reference/operators/typeof-operator.md) to determine whether an object variable currently refers to a specific data type."},{"content":"The <ph id=\"ph1\">`TypeOf`</ph>...<ph id=\"ph2\">`Is`</ph> expression evaluates to <ph id=\"ph3\">`True`</ph> if the run-time type of the operand is derived from or implements the specified type.","pos":[2757,2893],"source":" The `TypeOf`...`Is` expression evaluates to `True` if the run-time type of the operand is derived from or implements the specified type."},{"pos":[2900,2995],"content":"The following example uses <ph id=\"ph1\">`TypeOf`</ph> on object variables referring to value and reference types.","source":"The following example uses `TypeOf` on object variables referring to value and reference types."},{"pos":[3672,3745],"content":"The preceding example writes the following lines to the <bpt id=\"p1\">**</bpt>Debug<ept id=\"p1\">**</ept> window:","source":"The preceding example writes the following lines to the **Debug** window:"},{"pos":[3839,3971],"content":"The object variable <ph id=\"ph1\">`num`</ph> refers to data of type <ph id=\"ph2\">`Integer`</ph>, and <ph id=\"ph3\">`frm`</ph> refers to an object of class <ph id=\"ph4\">&lt;xref:System.Windows.Forms.Form&gt;</ph>.","source":"The object variable `num` refers to data of type `Integer`, and `frm` refers to an object of class <xref:System.Windows.Forms.Form>."},{"pos":[3980,3993],"content":"Object Arrays","linkify":"Object Arrays","nodes":[{"content":"Object Arrays","pos":[0,13]}]},{"content":"You can declare and use an array of <ph id=\"ph1\">`Object`</ph> variables.","pos":[3997,4052],"source":"You can declare and use an array of `Object` variables."},{"content":"This is useful when you need to handle a variety of data types and object classes.","pos":[4053,4135]},{"content":"All the elements in an array must have the same declared data type.","pos":[4136,4203]},{"content":"Declaring this data type as <ph id=\"ph1\">`Object`</ph> allows you to store objects and class instances alongside other data types in the array.","pos":[4204,4329],"source":" Declaring this data type as `Object` allows you to store objects and class instances alongside other data types in the array."},{"pos":[4338,4346],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Object Variables<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept><ph id=\"ph1\"> </ph>","pos":[4350,4461],"source":"[Object Variables](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md) "},{"content":"<bpt id=\"p1\">[</bpt>Object Variable Declaration<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-declaration.md)</ept><ph id=\"ph1\"> </ph>","pos":[4465,4598],"source":"[Object Variable Declaration](../../../../visual-basic/programming-guide/language-features/variables/object-variable-declaration.md) "},{"content":"<bpt id=\"p1\">[</bpt>Object Variable Assignment<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md)</ept><ph id=\"ph1\"> </ph>","pos":[4602,4733],"source":"[Object Variable Assignment](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Refer to the Current Instance of an Object<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-refer-to-the-current-instance-of-an-object.md)</ept><ph id=\"ph1\"> </ph>","pos":[4737,4915],"source":"[How to: Refer to the Current Instance of an Object](../../../../visual-basic/programming-guide/language-features/variables/how-to-refer-to-the-current-instance-of-an-object.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Determine What Type an Object Variable Refers To<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-what-type-an-object-variable-refers-to.md)</ept><ph id=\"ph1\"> </ph>","pos":[4919,5109],"source":"[How to: Determine What Type an Object Variable Refers To](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-what-type-an-object-variable-refers-to.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Determine Whether Two Objects Are Related<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-related.md)</ept><ph id=\"ph1\"> </ph>","pos":[5113,5289],"source":"[How to: Determine Whether Two Objects Are Related](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-related.md) "},{"content":"<bpt id=\"p1\">[</bpt>How to: Determine Whether Two Objects Are Identical<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-identical.md)</ept><ph id=\"ph1\"> </ph>","pos":[5293,5473],"source":"[How to: Determine Whether Two Objects Are Identical](../../../../visual-basic/programming-guide/language-features/variables/how-to-determine-whether-two-objects-are-identical.md) "},{"content":"<bpt id=\"p1\">[</bpt>Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/index.md)</ept>","pos":[5477,5571],"source":"[Data Types](../../../../visual-basic/programming-guide/language-features/data-types/index.md)"}]}