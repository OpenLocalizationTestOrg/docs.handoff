{"content":"---\ntitle: \"How to: Sort Elements on Multiple Keys (C#) | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-csharp\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"CSharp\"\nms.assetid: 3b2760b6-d607-4ac7-b784-5c6524e2a0e0\ncaps.latest.revision: 3\nauthor: \"BillWagner\"\nms.author: \"wiwagn\"\n\n---\n# How to: Sort Elements on Multiple Keys (C#)\nThis topic shows how to sort on multiple keys.  \n  \n## Example  \n In this example, the results are ordered first by the shipping postal code, then by the order date.  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md).  \n  \n```csharp  \nXElement co = XElement.Load(\"CustomersOrders.xml\");  \nvar sortedElements =  \n    from c in co.Element(\"Orders\").Elements(\"Order\")  \n    orderby (string)c.Element(\"ShipInfo\").Element(\"ShipPostalCode\"),  \n            (DateTime)c.Element(\"OrderDate\")  \n    select new {  \n        CustomerID = (string)c.Element(\"CustomerID\"),  \n        EmployeeID = (string)c.Element(\"EmployeeID\"),  \n        ShipPostalCode = (string)c.Element(\"ShipInfo\").Element(\"ShipPostalCode\"),  \n        OrderDate = (DateTime)c.Element(\"OrderDate\")  \n    };  \nforeach (var r in sortedElements)  \n    Console.WriteLine(\"CustomerID:{0} EmployeeID:{1} ShipPostalCode:{2} OrderDate:{3:d}\",  \n        r.CustomerID, r.EmployeeID, r.ShipPostalCode, r.OrderDate);  \n```  \n  \n This code produces the following output:  \n  \n```  \nCustomerID:LETSS EmployeeID:1 ShipPostalCode:94117 OrderDate:6/25/1997  \nCustomerID:LETSS EmployeeID:8 ShipPostalCode:94117 OrderDate:10/27/1997  \nCustomerID:LETSS EmployeeID:6 ShipPostalCode:94117 OrderDate:11/10/1997  \nCustomerID:LETSS EmployeeID:4 ShipPostalCode:94117 OrderDate:2/12/1998  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:5/6/1997  \nCustomerID:GREAL EmployeeID:8 ShipPostalCode:97403 OrderDate:7/4/1997  \nCustomerID:GREAL EmployeeID:1 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:9/4/1997  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:9/25/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:1/6/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:3/9/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:4/7/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/22/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/30/1998  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:12/6/1996  \nCustomerID:HUNGC EmployeeID:1 ShipPostalCode:97827 OrderDate:12/25/1996  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:1/15/1997  \nCustomerID:HUNGC EmployeeID:4 ShipPostalCode:97827 OrderDate:7/16/1997  \nCustomerID:HUNGC EmployeeID:8 ShipPostalCode:97827 OrderDate:9/8/1997  \nCustomerID:LAZYK EmployeeID:1 ShipPostalCode:99362 OrderDate:3/21/1997  \nCustomerID:LAZYK EmployeeID:8 ShipPostalCode:99362 OrderDate:5/22/1997  \n```  \n  \n## Example  \n The following example shows the same query for XML that is in a namespace. For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md).  \n  \n This example uses the following XML document: [Sample XML File: Customers and Orders in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-in-a-namespace.md).  \n  \n```csharp  \nXElement co = XElement.Load(\"CustomersOrdersInNamespace.xml\");  \nXNamespace aw = \"http://www.adventure-works.com\";  \nvar sortedElements =  \n    from c in co.Element(aw + \"Orders\").Elements(aw + \"Order\")  \n    orderby (string)c.Element(aw + \"ShipInfo\").Element(aw + \"ShipPostalCode\"),  \n            (DateTime)c.Element(aw + \"OrderDate\")  \n    select new  \n    {  \n        CustomerID = (string)c.Element(aw + \"CustomerID\"),  \n        EmployeeID = (string)c.Element(aw + \"EmployeeID\"),  \n        ShipPostalCode = (string)c.Element(aw + \"ShipInfo\").Element(aw + \"ShipPostalCode\"),  \n        OrderDate = (DateTime)c.Element(aw + \"OrderDate\")  \n    };  \nforeach (var r in sortedElements)  \n    Console.WriteLine(\"CustomerID:{0} EmployeeID:{1} ShipPostalCode:{2} OrderDate:{3:d}\",  \n        r.CustomerID, r.EmployeeID, r.ShipPostalCode, r.OrderDate);  \n```  \n  \n This code produces the following output:  \n  \n```  \nCustomerID:LETSS EmployeeID:1 ShipPostalCode:94117 OrderDate:6/25/1997  \nCustomerID:LETSS EmployeeID:8 ShipPostalCode:94117 OrderDate:10/27/1997  \nCustomerID:LETSS EmployeeID:6 ShipPostalCode:94117 OrderDate:11/10/1997  \nCustomerID:LETSS EmployeeID:4 ShipPostalCode:94117 OrderDate:2/12/1998  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:5/6/1997  \nCustomerID:GREAL EmployeeID:8 ShipPostalCode:97403 OrderDate:7/4/1997  \nCustomerID:GREAL EmployeeID:1 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:7/31/1997  \nCustomerID:GREAL EmployeeID:6 ShipPostalCode:97403 OrderDate:9/4/1997  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:9/25/1997  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:1/6/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:3/9/1998  \nCustomerID:GREAL EmployeeID:3 ShipPostalCode:97403 OrderDate:4/7/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/22/1998  \nCustomerID:GREAL EmployeeID:4 ShipPostalCode:97403 OrderDate:4/30/1998  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:12/6/1996  \nCustomerID:HUNGC EmployeeID:1 ShipPostalCode:97827 OrderDate:12/25/1996  \nCustomerID:HUNGC EmployeeID:3 ShipPostalCode:97827 OrderDate:1/15/1997  \nCustomerID:HUNGC EmployeeID:4 ShipPostalCode:97827 OrderDate:7/16/1997  \nCustomerID:HUNGC EmployeeID:8 ShipPostalCode:97827 OrderDate:9/8/1997  \nCustomerID:LAZYK EmployeeID:1 ShipPostalCode:99362 OrderDate:3/21/1997  \nCustomerID:LAZYK EmployeeID:8 ShipPostalCode:99362 OrderDate:5/22/1997  \n```  \n  \n## See Also  \n [Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)","nodes":[{"pos":[12,72],"content":"How to: Sort Elements on Multiple Keys (C#) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Sort Elements on Multiple Keys (C#) | Microsoft Docs","pos":[0,60]}]},{"pos":[357,400],"content":"How to: Sort Elements on Multiple Keys (C#)","linkify":"How to: Sort Elements on Multiple Keys (C#)","nodes":[{"content":"How to: Sort Elements on Multiple Keys (C#)","pos":[0,43]}]},{"content":"This topic shows how to sort on multiple keys.","pos":[401,447]},{"pos":[456,463],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"In this example, the results are ordered first by the shipping postal code, then by the order date.","pos":[467,566]},{"pos":[573,779],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders (LINQ to XML)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders (LINQ to XML)](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-linq-to-xml-2.md)."},{"content":"This code produces the following output:","pos":[1534,1574]},{"pos":[3200,3207],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example shows the same query for XML that is in a namespace.","pos":[3211,3285]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with XML Namespaces (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)</ept>.","pos":[3286,3430],"source":" For more information, see [Working with XML Namespaces (C#)](../../../../csharp/programming-guide/concepts/linq/working-with-xml-namespaces.md)."},{"pos":[3437,3645],"content":"This example uses the following XML document: <bpt id=\"p1\">[</bpt>Sample XML File: Customers and Orders in a Namespace<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-in-a-namespace.md)</ept>.","source":"This example uses the following XML document: [Sample XML File: Customers and Orders in a Namespace](../../../../csharp/programming-guide/concepts/linq/sample-xml-file-customers-and-orders-in-a-namespace.md)."},{"content":"This code produces the following output:","pos":[4519,4559]},{"pos":[6185,6193],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"pos":[6197,6312],"content":"<bpt id=\"p1\">[</bpt>Basic Queries (LINQ to XML) (C#)<ept id=\"p1\">](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)</ept>","source":"[Basic Queries (LINQ to XML) (C#)](../../../../csharp/programming-guide/concepts/linq/basic-queries-linq-to-xml.md)"}]}