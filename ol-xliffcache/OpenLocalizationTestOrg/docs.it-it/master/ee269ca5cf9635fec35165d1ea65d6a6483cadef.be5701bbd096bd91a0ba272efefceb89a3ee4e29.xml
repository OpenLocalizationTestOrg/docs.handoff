{"content":"---\ntitle: \"XML CDATA Literal (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.XmlLiteralCdata\"\nhelpviewer_keywords: \n  - \"CDATA literal [Visual Basic]\"\n  - \"XML CDATA literal [Visual Basic]\"\n  - \"XML literals [Visual Basic], CDATA\"\nms.assetid: 9eafb6a4-dd9d-4866-85e8-0654c65abc44\n---\n# XML CDATA Literal (Visual Basic)\nA literal representing an <xref:System.Xml.Linq.XCData> object.  \n  \n## Syntax  \n  \n```xml  \n<![CDATA[content]]>  \n```  \n  \n## Parts  \n `<![CDATA[`  \n Required. Denotes the start of the XML CDATA section.  \n  \n `content`  \n Required. Text content to appear in the XML CDATA section.  \n  \n `]]>`  \n Required. Denotes the end of the section.  \n  \n## Return Value  \n An <xref:System.Xml.Linq.XCData> object.  \n  \n## Remarks  \n XML CDATA sections contain raw text that should be included, but not parsed, with the XML that contains it. A XML CDATA section can contain any text. This includes reserved XML characters. The XML CDATA section ends with the sequence \"]]>\". This implies the following points:  \n  \n-   You cannot use an embedded expression in an XML CDATA literal because the embedded expression delimiters are valid XML CDATA content.  \n  \n-   XML CDATA sections cannot be nested, because `content` cannot contain the value \"]]>\".  \n  \n You can assign an XML CDATA literal to a variable, or include it in an XML element literal.  \n  \n> [!NOTE]\n>  An XML literal can span multiple lines but does not use line continuation characters. This enables you to copy content from an XML document and paste it directly into a Visual Basic program.  \n  \n The Visual Basic compiler converts the XML CDATA literal to a call to the <xref:System.Xml.Linq.XCData.%23ctor%2A> constructor.  \n  \n## Example  \n The following example creates a CDATA section that contains the text \"Can contain literal \\<XML> tags\".  \n  \n [!code-vb[VbXMLSamples#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbXMLSamples/VB/XMLSamples11.vb#23)]  \n  \n## See also\n\n- <xref:System.Xml.Linq.XCData>\n- [XML Element Literal](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)\n- [XML Literals](../../../visual-basic/language-reference/xml-literals/index.md)\n- [Creating XML in Visual Basic](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)\n","nodes":[{"pos":[4,290],"embed":true,"restype":"x-metadata","content":"title: \"XML CDATA Literal (Visual Basic)\"\nms.date: 07/20/2015\nf1_keywords: \n  - \"vb.XmlLiteralCdata\"\nhelpviewer_keywords: \n  - \"CDATA literal [Visual Basic]\"\n  - \"XML CDATA literal [Visual Basic]\"\n  - \"XML literals [Visual Basic], CDATA\"\nms.assetid: 9eafb6a4-dd9d-4866-85e8-0654c65abc44","nodes":[{"content":"XML CDATA Literal (Visual Basic)","nodes":[{"pos":[0,32],"content":"XML CDATA Literal (Visual Basic)","nodes":[{"content":"XML CDATA Literal (Visual Basic)","pos":[0,32]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[297,329],"content":"XML CDATA Literal (Visual Basic)","linkify":"XML CDATA Literal (Visual Basic)","nodes":[{"content":"XML CDATA Literal (Visual Basic)","pos":[0,32]}]},{"pos":[330,393],"content":"A literal representing an <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XCData&gt;</ph> object.","source":"A literal representing an <xref:System.Xml.Linq.XCData> object."},{"pos":[402,408],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[457,462],"content":"Parts","linkify":"Parts","nodes":[{"content":"Parts","pos":[0,5]}]},{"content":"Required.","pos":[481,490]},{"content":"Denotes the start of the XML CDATA section.","pos":[491,534]},{"content":"Required.","pos":[554,563]},{"content":"Text content to appear in the XML CDATA section.","pos":[564,612]},{"content":"Required.","pos":[628,637]},{"content":"Denotes the end of the section.","pos":[638,669]},{"pos":[678,690],"content":"Return Value","linkify":"Return Value","nodes":[{"content":"Return Value","pos":[0,12]}]},{"pos":[694,734],"content":"An <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XCData&gt;</ph> object.","source":"An <xref:System.Xml.Linq.XCData> object."},{"pos":[743,750],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"XML CDATA sections contain raw text that should be included, but not parsed, with the XML that contains it.","pos":[754,861]},{"content":"A XML CDATA section can contain any text.","pos":[862,903]},{"content":"This includes reserved XML characters.","pos":[904,942]},{"content":"The XML CDATA section ends with the sequence \"]]&gt;\".","pos":[943,994],"source":" The XML CDATA section ends with the sequence \"]]>\"."},{"content":"This implies the following points:","pos":[995,1029]},{"content":"You cannot use an embedded expression in an XML CDATA literal because the embedded expression delimiters are valid XML CDATA content.","pos":[1039,1172]},{"pos":[1182,1268],"content":"XML CDATA sections cannot be nested, because <ph id=\"ph1\">`content`</ph> cannot contain the value \"]]&gt;\".","source":"XML CDATA sections cannot be nested, because `content` cannot contain the value \"]]>\"."},{"content":"You can assign an XML CDATA literal to a variable, or include it in an XML element literal.","pos":[1275,1366]},{"pos":[1374,1575],"content":"[!NOTE]\n An XML literal can span multiple lines but does not use line continuation characters. This enables you to copy content from an XML document and paste it directly into a Visual Basic program.","leadings":["","> "],"nodes":[{"content":"An XML literal can span multiple lines but does not use line continuation characters. This enables you to copy content from an XML document and paste it directly into a Visual Basic program.","pos":[9,199],"nodes":[{"content":"An XML literal can span multiple lines but does not use line continuation characters.","pos":[0,85]},{"content":"This enables you to copy content from an XML document and paste it directly into a Visual Basic program.","pos":[86,190]}]}]},{"pos":[1582,1709],"content":"The Visual Basic compiler converts the XML CDATA literal to a call to the <ph id=\"ph1\">&lt;xref:System.Xml.Linq.XCData.%23ctor%2A&gt;</ph> constructor.","source":"The Visual Basic compiler converts the XML CDATA literal to a call to the <xref:System.Xml.Linq.XCData.%23ctor%2A> constructor."},{"pos":[1718,1725],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example creates a CDATA section that contains the text \"Can contain literal <ph id=\"ph1\">\\&lt;</ph>XML&gt; tags\".","pos":[1729,1832],"source":"The following example creates a CDATA section that contains the text \"Can contain literal \\<XML> tags\"."},{"pos":[1963,1971],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[2007,2106],"content":"<bpt id=\"p1\">[</bpt>XML Element Literal<ept id=\"p1\">](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)</ept>","source":"[XML Element Literal](../../../visual-basic/language-reference/xml-literals/xml-element-literal.md)"},{"pos":[2109,2187],"content":"<bpt id=\"p1\">[</bpt>XML Literals<ept id=\"p1\">](../../../visual-basic/language-reference/xml-literals/index.md)</ept>","source":"[XML Literals](../../../visual-basic/language-reference/xml-literals/index.md)"},{"pos":[2190,2299],"content":"<bpt id=\"p1\">[</bpt>Creating XML in Visual Basic<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)</ept>","source":"[Creating XML in Visual Basic](../../../visual-basic/programming-guide/language-features/xml/creating-xml.md)"}]}