{"content":"---\ntitle: \"Generic Procedures in Visual Basic | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"generic methods, type inference\"\n  - \"generics [Visual Basic], type inference\"\n  - \"procedures, generic\"\n  - \"generic procedures\"\n  - \"type inference, generics\"\n  - \"generic methods\"\n  - \"type inference\"\n  - \"generics [Visual Basic], procedures\"\n  - \"generic procedures, type inference\"\nms.assetid: 95577b28-137f-4d5c-a149-919c828600e5\ncaps.latest.revision: 11\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Generic Procedures in Visual Basic\nA *generic procedure*, also called a *generic method*, is a procedure defined with at least one type parameter. This allows the calling code to tailor the data types to its requirements each time it calls the procedure.  \n  \n A procedure is not generic simply by virtue of being defined inside a generic class or a generic structure. To be generic, the procedure must take at least one type parameter, in addition to any normal parameters it might take. A generic class or structure can contain nongeneric procedures, and a nongeneric class, structure, or module can contain generic procedures.  \n  \n A generic procedure can use its type parameters in its normal parameter list, in its return type if it has one, and in its procedure code.  \n  \n## Type Inference  \n You can call a generic procedure without supplying any type arguments at all. If you call it this way, the compiler attempts to determine the appropriate data types to pass to the procedure's type arguments. This is called *type inference*. The following code shows a call in which the compiler infers that it should pass type `String` to the type parameter `t`.  \n  \n [!code-vb[VbVbalrDataTypes#15](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_1.vb)]  \n  \n If the compiler cannot infer the type arguments from the context of your call, it reports an error. One possible cause of such an error is an array rank mismatch. For example, suppose you define a normal parameter as an array of a type parameter. If you call the generic procedure supplying an array of a different rank (number of dimensions), the mismatch causes type inference to fail. The following code shows a call in which a two-dimensional array is passed to a procedure that expects a one-dimensional array.  \n  \n `Public Sub demoSub(Of t)(ByVal arg() As t)`  \n  \n `End Sub`  \n  \n `Public Sub callDemoSub()`  \n  \n `Dim twoDimensions(,) As Integer`  \n  \n `demoSub(twoDimensions)`  \n  \n `End Sub`  \n  \n You can invoke type inference only by omitting all the type arguments. If you supply one type argument, you must supply them all.  \n  \n Type inference is supported only for generic procedures. You cannot invoke type inference on generic classes, structures, interfaces, or delegates.  \n  \n## Example  \n  \n### Description  \n The following example defines a generic `Function` procedure to find a particular element in an array. It defines one type parameter and uses it to construct the two parameters in the parameter list.  \n  \n### Code  \n [!code-vb[VbVbalrDataTypes#14](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_2.vb)]  \n  \n### Comments  \n The preceding example requires the ability to compare `searchValue` against each element of `searchArray`. To guarantee this ability, it constrains the type parameter `T` to implement the <xref:System.IComparable%601> interface. The code uses the <xref:System.IComparable%601.CompareTo%2A> method instead of the `=` operator, because there is no guarantee that a type argument supplied for `T` supports the `=` operator.  \n  \n You can test the `findElement` procedure with the following code.  \n  \n [!code-vb[VbVbalrDataTypes#13](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_3.vb)]  \n  \n The preceding calls to `MsgBox` display \"0\", \"1\", and \"-1\" respectively.  \n  \n## See Also  \n [Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)   \n [How to: Define a Class That Can Provide Identical Functionality on Different Data Types](../../../../visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md)   \n [How to: Use a Generic Class](../../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)   \n [Procedures](../../../../visual-basic/programming-guide/language-features/procedures/index.md)   \n [Procedure Parameters and Arguments](../../../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)   \n [Type List](../../../../visual-basic/language-reference/statements/type-list.md)   \n [Parameter List](../../../../visual-basic/language-reference/statements/parameter-list.md)","nodes":[{"pos":[12,63],"content":"Generic Procedures in Visual Basic | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Generic Procedures in Visual Basic | Microsoft Docs","pos":[0,51]}]},{"pos":[850,884],"content":"Generic Procedures in Visual Basic","linkify":"Generic Procedures in Visual Basic","nodes":[{"content":"Generic Procedures in Visual Basic","pos":[0,34]}]},{"content":"A <bpt id=\"p1\">*</bpt>generic procedure<ept id=\"p1\">*</ept>, also called a <bpt id=\"p2\">*</bpt>generic method<ept id=\"p2\">*</ept>, is a procedure defined with at least one type parameter.","pos":[885,996],"source":"A *generic procedure*, also called a *generic method*, is a procedure defined with at least one type parameter."},{"content":"This allows the calling code to tailor the data types to its requirements each time it calls the procedure.","pos":[997,1104]},{"content":"A procedure is not generic simply by virtue of being defined inside a generic class or a generic structure.","pos":[1111,1218]},{"content":"To be generic, the procedure must take at least one type parameter, in addition to any normal parameters it might take.","pos":[1219,1338]},{"content":"A generic class or structure can contain nongeneric procedures, and a nongeneric class, structure, or module can contain generic procedures.","pos":[1339,1479]},{"content":"A generic procedure can use its type parameters in its normal parameter list, in its return type if it has one, and in its procedure code.","pos":[1486,1624]},{"pos":[1633,1647],"content":"Type Inference","linkify":"Type Inference","nodes":[{"content":"Type Inference","pos":[0,14]}]},{"content":"You can call a generic procedure without supplying any type arguments at all.","pos":[1651,1728]},{"content":"If you call it this way, the compiler attempts to determine the appropriate data types to pass to the procedure's type arguments.","pos":[1729,1858]},{"content":"This is called <bpt id=\"p1\">*</bpt>type inference<ept id=\"p1\">*</ept>.","pos":[1859,1891],"source":" This is called *type inference*."},{"content":"The following code shows a call in which the compiler infers that it should pass type <ph id=\"ph1\">`String`</ph> to the type parameter <ph id=\"ph2\">`t`</ph>.","pos":[1892,2013],"source":" The following code shows a call in which the compiler infers that it should pass type `String` to the type parameter `t`."},{"pos":[2020,2155],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDataTypes#15<ept id=\"p2\">](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDataTypes#15](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_1.vb)]"},{"content":"If the compiler cannot infer the type arguments from the context of your call, it reports an error.","pos":[2162,2261]},{"content":"One possible cause of such an error is an array rank mismatch.","pos":[2262,2324]},{"content":"For example, suppose you define a normal parameter as an array of a type parameter.","pos":[2325,2408]},{"content":"If you call the generic procedure supplying an array of a different rank (number of dimensions), the mismatch causes type inference to fail.","pos":[2409,2549]},{"content":"The following code shows a call in which a two-dimensional array is passed to a procedure that expects a one-dimensional array.","pos":[2550,2677]},{"content":"You can invoke type inference only by omitting all the type arguments.","pos":[2871,2941]},{"content":"If you supply one type argument, you must supply them all.","pos":[2942,3000]},{"content":"Type inference is supported only for generic procedures.","pos":[3007,3063]},{"content":"You cannot invoke type inference on generic classes, structures, interfaces, or delegates.","pos":[3064,3154]},{"pos":[3163,3170],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[3180,3191],"content":"Description","linkify":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"content":"The following example defines a generic <ph id=\"ph1\">`Function`</ph> procedure to find a particular element in an array.","pos":[3195,3297],"source":"The following example defines a generic `Function` procedure to find a particular element in an array."},{"content":"It defines one type parameter and uses it to construct the two parameters in the parameter list.","pos":[3298,3394]},{"pos":[3404,3408],"content":"Code","linkify":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[3412,3547],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDataTypes#14<ept id=\"p2\">](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_2.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDataTypes#14](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_2.vb)]"},{"pos":[3557,3565],"content":"Comments","linkify":"Comments","nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"The preceding example requires the ability to compare <ph id=\"ph1\">`searchValue`</ph> against each element of <ph id=\"ph2\">`searchArray`</ph>.","pos":[3569,3675],"source":"The preceding example requires the ability to compare `searchValue` against each element of `searchArray`."},{"content":"To guarantee this ability, it constrains the type parameter <ph id=\"ph1\">`T`</ph> to implement the <ph id=\"ph2\">&lt;xref:System.IComparable%601&gt;</ph> interface.","pos":[3676,3797],"source":" To guarantee this ability, it constrains the type parameter `T` to implement the <xref:System.IComparable%601> interface."},{"content":"The code uses the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method instead of the <ph id=\"ph2\">`=`</ph> operator, because there is no guarantee that a type argument supplied for <ph id=\"ph3\">`T`</ph> supports the <ph id=\"ph4\">`=`</ph> operator.","pos":[3798,3989],"source":" The code uses the <xref:System.IComparable%601.CompareTo%2A> method instead of the `=` operator, because there is no guarantee that a type argument supplied for `T` supports the `=` operator."},{"pos":[3996,4061],"content":"You can test the <ph id=\"ph1\">`findElement`</ph> procedure with the following code.","source":"You can test the `findElement` procedure with the following code."},{"pos":[4068,4203],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrDataTypes#13<ept id=\"p2\">](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_3.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrDataTypes#13](../../../../visual-basic/language-reference/data-types/codesnippet/VisualBasic/generic-procedures_3.vb)]"},{"pos":[4210,4282],"content":"The preceding calls to <ph id=\"ph1\">`MsgBox`</ph> display \"0\", \"1\", and \"-1\" respectively.","source":"The preceding calls to `MsgBox` display \"0\", \"1\", and \"-1\" respectively."},{"pos":[4291,4299],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Generic Types in Visual Basic<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id=\"ph1\"> </ph>","pos":[4303,4425],"source":"[Generic Types in Visual Basic](../../../../visual-basic/programming-guide/language-features/data-types/generic-types.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Define a Class That Can Provide Identical Functionality on Different Data Types<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md)</ept><ph id=\"ph1\"> </ph>","pos":[4428,4658],"source":" [How to: Define a Class That Can Provide Identical Functionality on Different Data Types](../../../../visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Use a Generic Class<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[4661,4795],"source":" [How to: Use a Generic Class](../../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedures<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[4798,4894],"source":" [Procedures](../../../../visual-basic/programming-guide/language-features/procedures/index.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Procedure Parameters and Arguments<ept id=\"p1\">](../../../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md)</ept><ph id=\"ph1\"> </ph>","pos":[4897,5046],"source":" [Procedure Parameters and Arguments](../../../../visual-basic/programming-guide/language-features/procedures/procedure-parameters-and-arguments.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Type List<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/type-list.md)</ept><ph id=\"ph1\"> </ph>","pos":[5049,5131],"source":" [Type List](../../../../visual-basic/language-reference/statements/type-list.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Parameter List<ept id=\"p1\">](../../../../visual-basic/language-reference/statements/parameter-list.md)</ept>","pos":[5134,5225],"source":" [Parameter List](../../../../visual-basic/language-reference/statements/parameter-list.md)"}]}