<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f123c9a1986eb2dbbfd0e9c2ccb5a7640e71a3fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\how-to-create-a-custom-activity-designer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba61c4cf331a081d78a41cee36e194d47dc84cc2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">685bd8f7c6bd46cc7c89787af958b24619e89a0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create a Custom Activity Designer | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Custom Activity Designer</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom activity designers are typically implemented so that their associated activities are composable with other activities whose designers can be dropped on to the design surface with them.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This functionality requires that a custom activity designer provide a "drop zone" where an arbitrary activity can be placed and also the means to manage the resulting collection of elements on the design surface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes how to create a custom activity designer that contains such a drop zone and how to create a custom activity designer that provides that editing functionality needed to manage the collection of designer elements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Custom activity designers typically inherit from <ph id="ph1">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> which is the default base activity designer type for any activities without a specific designer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This type provides the design-time experience of interacting with the property grid and configuring basic aspects such as managing colors and icons.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> uses two helper controls, <ph id="ph2">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> and <ph id="ph3">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter&gt;</ph> to make it easier to develop custom activity designers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>They handle common functionality like dragging and dropping of child elements, deletion, selection, and addition of those child elements.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> allows a single child UI element inside, providing the "drop zone", it while the <ph id="ph2">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter&gt;</ph> can provide support multiple UI elements, including additional functionality like the ordering, moving, deleting, and adding of child elements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The other key part of the story that needs highlighting in the implementation of a custom activity designer concerns the way in which the visual edits are bound using <ph id="ph1">[!INCLUDE[avalon2](../../../includes/avalon2-md.md)]</ph> data binding to the instance stored in memory of what we are editing in the designer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is accomplished by the Model Item tree, which is also responsible for enabling change notification and the tracking of events like changes in states.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic outlines two procedures.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The first procedure describes how to create a custom activity designer with a <ph id="ph1">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> that provides the drop zone that receives other activities.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This procedure is based on the <bpt id="p1">[</bpt>Custom Composite Designers - Workflow Item Presenter<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-item-presenter.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The second procedure describes how to create a custom activity designer with a <ph id="ph1">&lt;xref:System.Activities.Presentation.WorkflowItemsPresenter&gt;</ph> that provides the functionality needed to edit of a collection of contained elements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This procedure is based on the <bpt id="p1">[</bpt>Custom Composite Designers - Workflow Items Presenter<ept id="p1">](../../../docs/framework/windows-workflow-foundation/samples/custom-composite-designers-workflow-items-presenter.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create a custom activity designer with a drop zone using WorkflowItemPresenter</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Start <ph id="ph1">[!INCLUDE[vs2010](../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then select <bpt id="p3">**</bpt>Project…<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, select <bpt id="p2">**</bpt>Windows<ept id="p2">**</ept> from your preferred language category.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Templates<ept id="p1">**</ept> pane, select <bpt id="p2">**</bpt>WPF Application<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, enter <ph id="ph1">`UsingWorkflowItemPresenter`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Location<ept id="p1">**</ept> box, enter the directory in which you want to save your project, or click <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> to navigate to it.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> box, accept the default value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Right-click the MainWindows.xaml file in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> and confirm <bpt id="p3">**</bpt>OK<ept id="p3">**</ept> in the <bpt id="p4">**</bpt>Microsoft Visual Studio<ept id="p4">**</ept> dialogue box.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Right-click the UsingWorkflowItemPresenter project in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>New Item…<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>to bring up the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialogue and select the <bpt id="p2">**</bpt>WPF<ept id="p2">**</ept> category from the <bpt id="p3">**</bpt>Installed Templates<ept id="p3">**</ept> section on the left.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Select the  <bpt id="p1">**</bpt>Window (WPF)<ept id="p1">**</ept> template, name it <ph id="ph1">`RehostingWFDesigner`</ph>, and click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Open the RehostingWFDesigner.xaml file and paste the following code into it to define the UI for the application.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To associate an activity designer with an activity type, you must register that activity designer with the metadata store.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To do this, add the <ph id="ph1">`RegisterMetadata`</ph> method to the <ph id="ph2">`RehostingWFDesigner`</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Within the scope of the  <ph id="ph1">`RegisterMetadata`</ph> method, create an <ph id="ph2">&lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder&gt;</ph> object and call the <ph id="ph3">&lt;xref:System.Activities.Presentation.Metadata.AttributeTableBuilder.AddCustomAttributes%2A&gt;</ph> method to add the attributes to it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Activities.Presentation.Metadata.MetadataStore.AddAttributeTable%2A&gt;</ph> method to add the <ph id="ph2">&lt;xref:System.Activities.Presentation.Metadata.AttributeTable&gt;</ph> to the metadata store.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code contains the rehosting logic for the designer.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It registers the metadata, puts the <ph id="ph1">`SimpleNativeActivity`</ph> into the toolbox, and creates the workflow.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Put this code into the RehostingWFDesigner.xaml.cs file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Right-click the References directory in Solution Explorer and select <bpt id="p1">**</bpt>Add Reference …<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>to bring up the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialogue.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>.NET<ept id="p1">**</ept> tab, locate the assembly named <bpt id="p2">**</bpt>System.Activities.Core.Presentation<ept id="p2">**</ept>, select it and click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Using the same procedure, add references to the following assemblies:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>System.Data.DataSetExtensions.dll</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>System.Activities.Presentation.dll</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>System.ServiceModel.Activities.dll</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Open the App.xaml file and change the value of the StartUpUri to "RehostingWFDesigner.xaml".</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Right-click the UsingWorkflowItemPresenter project in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>New Item…<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>to bring up the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialogue and select the <bpt id="p2">**</bpt>Workflow<ept id="p2">**</ept> category form the <bpt id="p3">**</bpt>Installed Templates<ept id="p3">**</ept> section on the left.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Activity Designer<ept id="p1">**</ept> template, name it <ph id="ph1">`SimpleNativeDesigner`</ph>, and click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Open the SimpleNativeDesigner.xaml file and paste the following code into it.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Note this code uses <ph id="ph1">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> as your root element and shows how binding is used to integrate <ph id="ph2">&lt;xref:System.Activities.Presentation.WorkflowItemPresenter&gt;</ph> into your designer so a child type can be displayed in your composite activity designer.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The schema for <ph id="ph1">&lt;xref:System.Activities.Presentation.ActivityDesigner&gt;</ph> allows the addition of only one child element to your custom activity designer definition; however, this element could be a <ph id="ph2">`StackPanel`</ph>, <ph id="ph3">`Grid`</ph>, or some other composite UI element.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Right-click the UsingWorkflowItemPresenter project in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>, then <bpt id="p3">**</bpt>New Item…<ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>to bring up the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialogue and select the <bpt id="p2">**</bpt>Workflow<ept id="p2">**</ept> category form the <bpt id="p3">**</bpt>Installed Templates<ept id="p3">**</ept> section on the left.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Select the  <bpt id="p1">**</bpt>Code Activity<ept id="p1">**</ept> template, name it <ph id="ph1">`SimpleNativeActivity`</ph>, and click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">`SimpleNativeActivity`</ph> class by entering the following code into the SimpleNativeActivity.cs file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Build Solution<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Start Without Debugging<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu to open the rehosted custom design window.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To create a custom activity designer using WorkflowItemsPresenter</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The procedure for the second custom activity designer is the parallels the first with a few modifications, the first of which is to name the second application <ph id="ph1">`UsingWorkflowItemsPresenter`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Also this application does not define a new custom activity.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Key differences are contained in the CustomParallelDesigner.xaml and RehostingWFDesigner.xaml.cs files.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Here is the code from the CustomParallelDesigne.xaml file that defines the UI.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Here is the code from the RehostingWFDesigner.xaml.cs file that provides the rehosting logic.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Customizing the Workflow Design Experience<ept id="p1">](../../../docs/framework/windows-workflow-foundation/customizing-the-workflow-design-experience.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>