{"content":"---\ntitle: \"How to: Serialize and Deserialize JSON Data\"\nms.date: \"03/25/2019\"\nms.assetid: 88abc1fb-8196-4ee3-a23b-c6934144d1dd\n---\n# How to: Serialize and deserialize JSON data\nJSON (JavaScript Object Notation) is an efficient data encoding format that enables fast exchanges of small amounts of data between client browsers and AJAX-enabled Web services.  \n  \n This article demonstrates how to serialize .NET type objects into JSON-encoded data and then deserialize data in the JSON format back into instances of .NET types. This example uses a data contract to demonstrate serialization and deserialization of a user-defined `Person` type and uses <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>.  \n  \n Normally, JSON serialization and deserialization are handled automatically by Windows Communication Foundation (WCF) when you use data contract types in service operations that are exposed over AJAX-enabled endpoints. However, in some cases you may need to work with JSON data directly.   \n  \n> [!NOTE]\n>  If an error occurs during serialization of an outgoing reply on the server or for some other reason, it may not get returned to the client as a fault.  \n  \n This article is based on the [JSON serialization](../samples/json-serialization.md) sample.  \n  \n## To define the data contract for a Person type \n  \n1.  Define the data contract for `Person` by attaching the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and <xref:System.Runtime.Serialization.DataMemberAttribute> attribute to the members you want to serialize. For more information about data contracts, see [Designing service contracts](../designing-service-contracts.md).  \n  \n    ```csharp  \n    [DataContract]  \n    internal class Person  \n    {  \n        [DataMember]  \n        internal string name;  \n  \n        [DataMember]  \n        internal int age;  \n    }  \n    ```  \n  \n## To serialize an instance of type Person to JSON  \n  \n1.  Create an instance of the `Person` type.  \n  \n    ```csharp  \n    Person p = new Person();  \n    p.name = \"John\";  \n    p.age = 42;  \n    ```  \n  \n2.  Serialize the `Person` object to a memory stream by using the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>.  \n  \n    ```csharp  \n    MemoryStream stream1 = new MemoryStream();  \n    DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(Person));  \n    ```  \n  \n3.  Use the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject%2A> method to write JSON data to the stream.  \n  \n    ```csharp  \n    ser.WriteObject(stream1, p);  \n    ```  \n  \n4.  Show the JSON output.  \n  \n    ```csharp  \n    stream1.Position = 0;  \n    StreamReader sr = new StreamReader(stream1);  \n    Console.Write(\"JSON form of Person object: \");  \n    Console.WriteLine(sr.ReadToEnd());  \n    ```  \n  \n## To deserialize an instance of type Person from JSON  \n  \n1.  Deserialize the JSON-encoded data into a new instance of `Person` by using the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject%2A> method of the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>.  \n  \n    ```csharp  \n    stream1.Position = 0;  \n    Person p2 = (Person)ser.ReadObject(stream1);  \n    ```  \n  \n2.  Show the results.  \n  \n    ```csharp  \n    Console.WriteLine($\"Deserialized back, got name={p2.name}, age={p2.age}\");  \n    ```  \n  \n## Example  \n  \n```csharp  \n// Create a User object and serialize it to a JSON stream.  \npublic static string WriteFromObject()  \n{  \n    //Create User object.  \n    User user = new User(\"Bob\", 42);  \n  \n    //Create a stream to serialize the object to.  \n    MemoryStream ms = new MemoryStream();  \n  \n    // Serializer the User object to the stream.  \n    DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(User));  \n    ser.WriteObject(ms, user);  \n    byte[] json = ms.ToArray();  \n    ms.Close();  \n    return Encoding.UTF8.GetString(json, 0, json.Length);  \n}  \n  \n// Deserialize a JSON stream to a User object.  \npublic static User ReadToObject(string json)  \n{  \n    User deserializedUser = new User();  \n    MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(json));  \n    DataContractJsonSerializer ser = new DataContractJsonSerializer(deserializedUser.GetType());  \n    deserializedUser = ser.ReadObject(ms) as User;  \n    ms.Close();  \n    return deserializedUser;  \n}  \n```  \n  \n> [!NOTE]\n>  The JSON serializer throws a serialization exception for data contracts that have multiple members with the same name, as shown in the following sample code.  \n  \n```csharp  \n[DataContract]  \npublic class TestDuplicateDataBase  \n{  \n    [DataMember]  \n    public int field1 = 123;  \n}\n\n[DataContract]  \npublic class TestDuplicateDataDerived : TestDuplicateDataBase  \n{  \n    [DataMember]  \n    public new int field1 = 999;  \n}  \n```  \n  \n## See also\n\n- [Stand-alone JSON serialization](stand-alone-json-serialization.md)\n- [Support for JSON and other data transfer formats](support-for-json-and-other-data-transfer-formats.md)\n","nodes":[{"pos":[4,127],"embed":true,"restype":"x-metadata","content":"title: \"How to: Serialize and Deserialize JSON Data\"\nms.date: \"03/25/2019\"\nms.assetid: 88abc1fb-8196-4ee3-a23b-c6934144d1dd","nodes":[{"content":"How to: Serialize and Deserialize JSON Data","nodes":[{"pos":[0,43],"content":"How to: Serialize and Deserialize JSON Data","nodes":[{"content":"How to: Serialize and Deserialize JSON Data","pos":[0,43]}]}],"path":["title"],"nosxs":false}],"yml":true},{"pos":[134,177],"content":"How to: Serialize and deserialize JSON data","linkify":"How to: Serialize and deserialize JSON data","nodes":[{"content":"How to: Serialize and deserialize JSON data","pos":[0,43]}]},{"content":"JSON (JavaScript Object Notation) is an efficient data encoding format that enables fast exchanges of small amounts of data between client browsers and AJAX-enabled Web services.","pos":[178,356]},{"content":"This article demonstrates how to serialize .NET type objects into JSON-encoded data and then deserialize data in the JSON format back into instances of .NET types.","pos":[363,526]},{"content":"This example uses a data contract to demonstrate serialization and deserialization of a user-defined <ph id=\"ph1\">`Person`</ph> type and uses <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>.","pos":[527,719],"source":" This example uses a data contract to demonstrate serialization and deserialization of a user-defined `Person` type and uses <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>."},{"content":"Normally, JSON serialization and deserialization are handled automatically by Windows Communication Foundation (WCF) when you use data contract types in service operations that are exposed over AJAX-enabled endpoints.","pos":[726,943]},{"content":"However, in some cases you may need to work with JSON data directly.","pos":[944,1012]},{"pos":[1021,1182],"content":"[!NOTE]\n If an error occurs during serialization of an outgoing reply on the server or for some other reason, it may not get returned to the client as a fault.","leadings":["","> "],"nodes":[{"content":"If an error occurs during serialization of an outgoing reply on the server or for some other reason, it may not get returned to the client as a fault.","pos":[9,159]}]},{"pos":[1189,1280],"content":"This article is based on the <bpt id=\"p1\">[</bpt>JSON serialization<ept id=\"p1\">](../samples/json-serialization.md)</ept> sample.","source":"This article is based on the [JSON serialization](../samples/json-serialization.md) sample."},{"pos":[1289,1334],"content":"To define the data contract for a Person type","linkify":"To define the data contract for a Person type","nodes":[{"content":"To define the data contract for a Person type","pos":[0,45]}]},{"content":"Define the data contract for <ph id=\"ph1\">`Person`</ph> by attaching the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> to the class and <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attribute to the members you want to serialize.","pos":[1343,1576],"source":"Define the data contract for `Person` by attaching the <xref:System.Runtime.Serialization.DataContractAttribute> to the class and <xref:System.Runtime.Serialization.DataMemberAttribute> attribute to the members you want to serialize."},{"content":"For more information about data contracts, see <bpt id=\"p1\">[</bpt>Designing service contracts<ept id=\"p1\">](../designing-service-contracts.md)</ept>.","pos":[1577,1689],"source":" For more information about data contracts, see [Designing service contracts](../designing-service-contracts.md)."},{"pos":[1901,1948],"content":"To serialize an instance of type Person to JSON","linkify":"To serialize an instance of type Person to JSON","nodes":[{"content":"To serialize an instance of type Person to JSON","pos":[0,47]}]},{"pos":[1958,1998],"content":"Create an instance of the <ph id=\"ph1\">`Person`</ph> type.","source":"Create an instance of the `Person` type."},{"pos":[2109,2239],"content":"Serialize the <ph id=\"ph1\">`Person`</ph> object to a memory stream by using the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>.","source":"Serialize the `Person` object to a memory stream by using the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>."},{"pos":[2414,2545],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject%2A&gt;</ph> method to write JSON data to the stream.","source":"Use the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject%2A> method to write JSON data to the stream."},{"content":"Show the JSON output.","pos":[2619,2640]},{"pos":[2851,2902],"content":"To deserialize an instance of type Person from JSON","linkify":"To deserialize an instance of type Person from JSON","nodes":[{"content":"To deserialize an instance of type Person from JSON","pos":[0,51]}]},{"pos":[2912,3155],"content":"Deserialize the JSON-encoded data into a new instance of <ph id=\"ph1\">`Person`</ph> by using the <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject%2A&gt;</ph> method of the <ph id=\"ph3\">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>.","source":"Deserialize the JSON-encoded data into a new instance of `Person` by using the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject%2A> method of the <xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>."},{"content":"Show the results.","pos":[3273,3290]},{"pos":[3409,3416],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[4427,4595],"content":"[!NOTE]\n The JSON serializer throws a serialization exception for data contracts that have multiple members with the same name, as shown in the following sample code.","leadings":["","> "],"nodes":[{"content":"The JSON serializer throws a serialization exception for data contracts that have multiple members with the same name, as shown in the following sample code.","pos":[9,166]}]},{"pos":[4879,4887],"content":"See also","linkify":"See also","nodes":[{"content":"See also","pos":[0,8]}]},{"pos":[4891,4958],"content":"<bpt id=\"p1\">[</bpt>Stand-alone JSON serialization<ept id=\"p1\">](stand-alone-json-serialization.md)</ept>","source":"[Stand-alone JSON serialization](stand-alone-json-serialization.md)"},{"pos":[4961,5064],"content":"<bpt id=\"p1\">[</bpt>Support for JSON and other data transfer formats<ept id=\"p1\">](support-for-json-and-other-data-transfer-formats.md)</ept>","source":"[Support for JSON and other data transfer formats](support-for-json-and-other-data-transfer-formats.md)"}]}