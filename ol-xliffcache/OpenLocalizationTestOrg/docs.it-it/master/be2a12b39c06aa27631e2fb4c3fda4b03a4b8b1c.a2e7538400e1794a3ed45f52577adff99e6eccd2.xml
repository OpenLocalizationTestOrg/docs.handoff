{"content":"---\ntitle: \"How to: Inherit from Existing Windows Forms Controls | Microsoft Docs\"\nms.custom: \"\"\nms.date: \"03/30/2017\"\nms.prod: \".net-framework\"\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"dotnet-winforms\"\nms.tgt_pltfrm: \"\"\nms.topic: \"article\"\ndev_langs: \n  - \"jsharp\"\nhelpviewer_keywords: \n  - \"inheritance, Windows Forms custom controls\"\n  - \"custom controls [Windows Forms], inheritance\"\nms.assetid: 1e1fc8ea-c615-4cf0-a356-16d6df7444ab\ncaps.latest.revision: 18\nauthor: dotnet-bot\nms.author: dotnetcontent\nmanager: \"wpickett\"\n---\n# How to: Inherit from Existing Windows Forms Controls\nIf you want to extend the functionality of an existing control, you can create a control derived from an existing control through inheritance. When inheriting from an existing control, you inherit all of the functionality and visual properties of that control. For example, if you were creating a control that inherited from <xref:System.Windows.Forms.Button>, your new control would look and act exactly like a standard <xref:System.Windows.Forms.Button> control. You could then extend or modify the functionality of your new control through the implementation of custom methods and properties. In some controls, you can also change the visual appearance of your inherited control by overriding its <xref:System.Windows.Forms.Control.OnPaint%2A> method.  \n  \n> [!NOTE]\n>  The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).  \n  \n### To create an inherited control  \n  \n1.  Create a new **Windows Forms Application** project.  \n  \n2.  From the **Project** menu, choose **Add New Item**.  \n  \n     The **Add New Item** dialog box appears.  \n  \n3.  In the **Add New Item** dialog box, double-click **Custom Control**.  \n  \n     A new custom control is added to your project.  \n  \n4.  If you using Visual Basic, at the top of **Solution Explorer**, click **Show All Files**. Expand CustomControl1.vb and then open CustomControl1.Designer.vb in the Code Editor.  \n  \n5.  If you are using C#, open CustomControl1.cs in the Code Editor.  \n  \n6.  Locate the class declaration, which inherits from <xref:System.Windows.Forms.Control>.  \n  \n7.  Change the base class to the control that you want to inherit from.  \n  \n     For example, if you want to inherit from <xref:System.Windows.Forms.Button>, change the class declaration to the following:  \n  \n    ```vb  \n    Partial Class CustomControl1  \n        Inherits System.Windows.Forms.Button  \n    ```  \n  \n    ```csharp  \n    public partial class CustomControl1 : System.Windows.Forms.Button  \n    ```  \n  \n8.  If you are using Visual Basic, save and close CustomControl1.Designer.vb. Open CustomControl1.vb in the Code Editor.  \n  \n9. Implement any custom methods or properties that your control will incorporate.  \n  \n10. If you want to modify the graphical appearance of your control, override the <xref:System.Windows.Forms.Control.OnPaint%2A> method.  \n  \n    > [!NOTE]\n    >  Overriding <xref:System.Windows.Forms.Control.OnPaint%2A> will not allow you to modify the appearance of all controls. Those controls that have all of their painting done by Windows (for example, <xref:System.Windows.Forms.TextBox>) never call their <xref:System.Windows.Forms.Control.OnPaint%2A> method, and thus will never use the custom code. Refer to the Help documentation for the particular control you want to modify to see if the <xref:System.Windows.Forms.Control.OnPaint%2A> method is available. For a list of all the Windows Form Controls, see [Controls to Use on Windows Forms](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md). If a control does not have <xref:System.Windows.Forms.Control.OnPaint%2A> listed as a member method, you cannot alter its appearance by overriding this method. For more information about custom painting, see [Custom Control Painting and Rendering](../../../../docs/framework/winforms/controls/custom-control-painting-and-rendering.md).  \n  \n    ```vb  \n    Protected Overrides Sub OnPaint(ByVal e As _  \n       System.Windows.Forms.PaintEventArgs)  \n       MyBase.OnPaint(e)  \n       ' Insert code to do custom painting.   \n       ' If you want to completely change the appearance of your control,  \n       ' do not call MyBase.OnPaint(e).  \n    End Sub  \n  \n    ```  \n  \n    ```csharp  \n    protected override void OnPaint(PaintEventArgs pe)  \n    {  \n       base.OnPaint(pe);  \n       // Insert code to do custom painting.  \n       // If you want to completely change the appearance of your control,  \n       // do not call base.OnPaint(pe).  \n    }  \n    ```  \n  \n11. Save and test your control.  \n  \n## See Also  \n [Varieties of Custom Controls](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)   \n [How to: Inherit from the Control Class](../../../../docs/framework/winforms/controls/how-to-inherit-from-the-control-class.md)   \n [How to: Inherit from the UserControl Class](../../../../docs/framework/winforms/controls/how-to-inherit-from-the-usercontrol-class.md)   \n [How to: Author Controls for Windows Forms](../../../../docs/framework/winforms/controls/how-to-author-controls-for-windows-forms.md)   \n [Troubleshooting Inherited Event Handlers in Visual Basic](~/docs/visual-basic/programming-guide/language-features/events/troubleshooting-inherited-event-handlers.md)   \n [Walkthrough: Inheriting from a Windows Forms Control with Visual Basic](../../../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-basic.md)   \n [Walkthrough: Inheriting from a Windows Forms Control with Visual C#](../../../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)","nodes":[{"pos":[12,81],"content":"How to: Inherit from Existing Windows Forms Controls | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"How to: Inherit from Existing Windows Forms Controls | Microsoft Docs","pos":[0,69]}]},{"pos":[541,593],"content":"How to: Inherit from Existing Windows Forms Controls","linkify":"How to: Inherit from Existing Windows Forms Controls","nodes":[{"content":"How to: Inherit from Existing Windows Forms Controls","pos":[0,52]}]},{"content":"If you want to extend the functionality of an existing control, you can create a control derived from an existing control through inheritance.","pos":[594,736]},{"content":"When inheriting from an existing control, you inherit all of the functionality and visual properties of that control.","pos":[737,854]},{"content":"For example, if you were creating a control that inherited from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph>, your new control would look and act exactly like a standard <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Button&gt;</ph> control.","pos":[855,1058],"source":" For example, if you were creating a control that inherited from <xref:System.Windows.Forms.Button>, your new control would look and act exactly like a standard <xref:System.Windows.Forms.Button> control."},{"content":"You could then extend or modify the functionality of your new control through the implementation of custom methods and properties.","pos":[1059,1189]},{"content":"In some controls, you can also change the visual appearance of your inherited control by overriding its <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method.","pos":[1190,1348],"source":" In some controls, you can also change the visual appearance of your inherited control by overriding its <xref:System.Windows.Forms.Control.OnPaint%2A> method."},{"pos":[1356,1732],"content":"[!NOTE]\n The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).","leadings":["","> "],"nodes":[{"content":" The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition. To change your settings, choose **Import and Export Settings** on the **Tools** menu. For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3).","pos":[8,374],"nodes":[{"content":"The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.","pos":[1,131]},{"content":"To change your settings, choose <bpt id=\"p1\">**</bpt>Import and Export Settings<ept id=\"p1\">**</ept> on the <bpt id=\"p2\">**</bpt>Tools<ept id=\"p2\">**</ept> menu.","pos":[132,217],"source":" To change your settings, choose **Import and Export Settings** on the **Tools** menu."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Customizing Development Settings in Visual Studio<ept id=\"p1\">](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)</ept>.","pos":[218,366],"source":" For more information, see [Customizing Development Settings in Visual Studio](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)."}]}]},{"pos":[1742,1772],"content":"To create an inherited control","linkify":"To create an inherited control","nodes":[{"content":"To create an inherited control","pos":[0,30]}]},{"pos":[1782,1833],"content":"Create a new <bpt id=\"p1\">**</bpt>Windows Forms Application<ept id=\"p1\">**</ept> project.","source":"Create a new **Windows Forms Application** project."},{"pos":[1843,1894],"content":"From the <bpt id=\"p1\">**</bpt>Project<ept id=\"p1\">**</ept> menu, choose <bpt id=\"p2\">**</bpt>Add New Item<ept id=\"p2\">**</ept>.","source":"From the **Project** menu, choose **Add New Item**."},{"pos":[1905,1945],"content":"The <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box appears.","source":"The **Add New Item** dialog box appears."},{"pos":[1955,2023],"content":"In the <bpt id=\"p1\">**</bpt>Add New Item<ept id=\"p1\">**</ept> dialog box, double-click <bpt id=\"p2\">**</bpt>Custom Control<ept id=\"p2\">**</ept>.","source":"In the **Add New Item** dialog box, double-click **Custom Control**."},{"content":"A new custom control is added to your project.","pos":[2034,2080]},{"content":"If you using Visual Basic, at the top of <bpt id=\"p1\">**</bpt>Solution Explorer<ept id=\"p1\">**</ept>, click <bpt id=\"p2\">**</bpt>Show All Files<ept id=\"p2\">**</ept>.","pos":[2090,2179],"source":"If you using Visual Basic, at the top of **Solution Explorer**, click **Show All Files**."},{"content":"Expand CustomControl1.vb and then open CustomControl1.Designer.vb in the Code Editor.","pos":[2180,2265]},{"content":"If you are using C#, open CustomControl1.cs in the Code Editor.","pos":[2275,2338]},{"content":"Locate the class declaration, which inherits from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control&gt;</ph>.","pos":[2348,2434],"source":"Locate the class declaration, which inherits from <xref:System.Windows.Forms.Control>."},{"content":"Change the base class to the control that you want to inherit from.","pos":[2444,2511]},{"content":"For example, if you want to inherit from <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Button&gt;</ph>, change the class declaration to the following:","pos":[2522,2645],"source":"For example, if you want to inherit from <xref:System.Windows.Forms.Button>, change the class declaration to the following:"},{"content":"If you are using Visual Basic, save and close CustomControl1.Designer.vb.","pos":[2863,2936]},{"content":"Open CustomControl1.vb in the Code Editor.","pos":[2937,2979]},{"content":"Implement any custom methods or properties that your control will incorporate.","pos":[2988,3066]},{"content":"If you want to modify the graphical appearance of your control, override the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method.","pos":[3076,3207],"source":"If you want to modify the graphical appearance of your control, override the <xref:System.Windows.Forms.Control.OnPaint%2A> method."},{"pos":[3219,4242],"content":"[!NOTE]\nOverriding <xref:System.Windows.Forms.Control.OnPaint%2A> will not allow you to modify the appearance of all controls. Those controls that have all of their painting done by Windows (for example, <xref:System.Windows.Forms.TextBox>) never call their <xref:System.Windows.Forms.Control.OnPaint%2A> method, and thus will never use the custom code. Refer to the Help documentation for the particular control you want to modify to see if the <xref:System.Windows.Forms.Control.OnPaint%2A> method is available. For a list of all the Windows Form Controls, see [Controls to Use on Windows Forms](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md). If a control does not have <xref:System.Windows.Forms.Control.OnPaint%2A> listed as a member method, you cannot alter its appearance by overriding this method. For more information about custom painting, see [Custom Control Painting and Rendering](../../../../docs/framework/winforms/controls/custom-control-painting-and-rendering.md).","leadings":["","    >  "],"nodes":[{"content":"Overriding <xref:System.Windows.Forms.Control.OnPaint%2A> will not allow you to modify the appearance of all controls. Those controls that have all of their painting done by Windows (for example, <xref:System.Windows.Forms.TextBox>) never call their <xref:System.Windows.Forms.Control.OnPaint%2A> method, and thus will never use the custom code. Refer to the Help documentation for the particular control you want to modify to see if the <xref:System.Windows.Forms.Control.OnPaint%2A> method is available. For a list of all the Windows Form Controls, see [Controls to Use on Windows Forms](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md). If a control does not have <xref:System.Windows.Forms.Control.OnPaint%2A> listed as a member method, you cannot alter its appearance by overriding this method. For more information about custom painting, see [Custom Control Painting and Rendering](../../../../docs/framework/winforms/controls/custom-control-painting-and-rendering.md).","pos":[8,1016],"nodes":[{"content":"Overriding <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> will not allow you to modify the appearance of all controls.","pos":[0,118],"source":"Overriding <xref:System.Windows.Forms.Control.OnPaint%2A> will not allow you to modify the appearance of all controls."},{"content":"Those controls that have all of their painting done by Windows (for example, <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TextBox&gt;</ph>) never call their <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method, and thus will never use the custom code.","pos":[119,345],"source":" Those controls that have all of their painting done by Windows (for example, <xref:System.Windows.Forms.TextBox>) never call their <xref:System.Windows.Forms.Control.OnPaint%2A> method, and thus will never use the custom code."},{"content":"Refer to the Help documentation for the particular control you want to modify to see if the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method is available.","pos":[346,505],"source":" Refer to the Help documentation for the particular control you want to modify to see if the <xref:System.Windows.Forms.Control.OnPaint%2A> method is available."},{"content":"For a list of all the Windows Form Controls, see <bpt id=\"p1\">[</bpt>Controls to Use on Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md)</ept>.","pos":[506,672],"source":" For a list of all the Windows Form Controls, see [Controls to Use on Windows Forms](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md)."},{"content":"If a control does not have <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> listed as a member method, you cannot alter its appearance by overriding this method.","pos":[673,832],"source":" If a control does not have <xref:System.Windows.Forms.Control.OnPaint%2A> listed as a member method, you cannot alter its appearance by overriding this method."},{"content":"For more information about custom painting, see <bpt id=\"p1\">[</bpt>Custom Control Painting and Rendering<ept id=\"p1\">](../../../../docs/framework/winforms/controls/custom-control-painting-and-rendering.md)</ept>.","pos":[833,1008],"source":" For more information about custom painting, see [Custom Control Painting and Rendering](../../../../docs/framework/winforms/controls/custom-control-painting-and-rendering.md)."}]}]},{"content":"Save and test your control.","pos":[4878,4905]},{"pos":[4914,4922],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Varieties of Custom Controls<ept id=\"p1\">](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)</ept><ph id=\"ph1\"> </ph>","pos":[4926,5035],"source":"[Varieties of Custom Controls](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Inherit from the Control Class<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-inherit-from-the-control-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[5038,5167],"source":" [How to: Inherit from the Control Class](../../../../docs/framework/winforms/controls/how-to-inherit-from-the-control-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Inherit from the UserControl Class<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-inherit-from-the-usercontrol-class.md)</ept><ph id=\"ph1\"> </ph>","pos":[5170,5307],"source":" [How to: Inherit from the UserControl Class](../../../../docs/framework/winforms/controls/how-to-inherit-from-the-usercontrol-class.md) "},{"content":"<bpt id=\"p1\"> [</bpt>How to: Author Controls for Windows Forms<ept id=\"p1\">](../../../../docs/framework/winforms/controls/how-to-author-controls-for-windows-forms.md)</ept><ph id=\"ph1\"> </ph>","pos":[5310,5445],"source":" [How to: Author Controls for Windows Forms](../../../../docs/framework/winforms/controls/how-to-author-controls-for-windows-forms.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Troubleshooting Inherited Event Handlers in Visual Basic<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/events/troubleshooting-inherited-event-handlers.md)</ept><ph id=\"ph1\"> </ph>","pos":[5448,5616],"source":" [Troubleshooting Inherited Event Handlers in Visual Basic](~/docs/visual-basic/programming-guide/language-features/events/troubleshooting-inherited-event-handlers.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual Basic<ept id=\"p1\">](../../../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-basic.md)</ept><ph id=\"ph1\"> </ph>","pos":[5619,5812],"source":" [Walkthrough: Inheriting from a Windows Forms Control with Visual Basic](../../../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-basic.md) "},{"content":"<bpt id=\"p1\"> [</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual C#<ept id=\"p1\">](../../../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)</ept>","pos":[5815,6005],"source":" [Walkthrough: Inheriting from a Windows Forms Control with Visual C#](../../../../docs/framework/winforms/controls/walkthrough-inheriting-from-a-windows-forms-control-with-visual-csharp.md)"}]}