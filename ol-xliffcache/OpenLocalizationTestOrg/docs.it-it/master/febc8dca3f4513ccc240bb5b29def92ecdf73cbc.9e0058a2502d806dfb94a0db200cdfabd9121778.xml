{"content":"---\ntitle: \"ByVal (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.ByVal\"\n  - \"ByVal\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"ByVal keyword, contexts\"\n  - \"ByVal keyword\"\nms.assetid: 1eaf4e58-b305-4785-9e3d-e416b9c75598\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# ByVal (Visual Basic)\nSpecifies that an argument is passed in such a way that the called procedure or property cannot change the value of a variable underlying the argument in the calling code.  \n  \n## Remarks  \n The `ByVal` modifier can be used in these contexts:  \n  \n [Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)  \n  \n [Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)  \n  \n [Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)  \n  \n [Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)  \n  \n [Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)  \n  \n## Example  \n The following example demonstrates the use of the `ByVal` parameter passing mechanism with a reference type argument. In the example, the argument is `c1`, an instance of class `Class1`. `ByVal` prevents the code in the procedures from changing the underlying value of the reference argument, `c1`, but does not protect the accessible fields and properties of `c1`.  \n  \n [!code-vb[VbVbalrKeywords#10](../../../visual-basic/language-reference/codesnippet/VisualBasic/byval_1.vb)]  \n  \n## See Also  \n [Keywords](../../../visual-basic/language-reference/keywords/index.md)   \n [Passing Arguments by Value and by Reference](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)","nodes":[{"pos":[4,600],"embed":true,"restype":"x-metadata","content":"title: \"ByVal (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\n\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.ByVal\"\n  - \"ByVal\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"ByVal keyword, contexts\"\n  - \"ByVal keyword\"\nms.assetid: 1eaf4e58-b305-4785-9e3d-e416b9c75598\ncaps.latest.revision: 14\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"","nodes":[{"content":"ByVal (Visual Basic) | Microsoft Docs","nodes":[{"pos":[0,37],"content":"ByVal (Visual Basic) | Microsoft Docs","nodes":[{"content":"ByVal (Visual Basic) | Microsoft Docs","pos":[0,37]}]}],"path":["title"]}],"yml":true},{"pos":[607,627],"content":"ByVal (Visual Basic)","linkify":"ByVal (Visual Basic)","nodes":[{"content":"ByVal (Visual Basic)","pos":[0,20]}]},{"content":"Specifies that an argument is passed in such a way that the called procedure or property cannot change the value of a variable underlying the argument in the calling code.","pos":[628,799]},{"pos":[808,815],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"pos":[819,870],"content":"The <ph id=\"ph1\">`ByVal`</ph> modifier can be used in these contexts:","source":"The `ByVal` modifier can be used in these contexts:"},{"pos":[877,970],"content":"<bpt id=\"p1\">[</bpt>Declare Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/declare-statement.md)</ept>","source":"[Declare Statement](../../../visual-basic/language-reference/statements/declare-statement.md)"},{"pos":[977,1072],"content":"<bpt id=\"p1\">[</bpt>Function Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/function-statement.md)</ept>","source":"[Function Statement](../../../visual-basic/language-reference/statements/function-statement.md)"},{"pos":[1079,1174],"content":"<bpt id=\"p1\">[</bpt>Operator Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/operator-statement.md)</ept>","source":"[Operator Statement](../../../visual-basic/language-reference/statements/operator-statement.md)"},{"pos":[1181,1276],"content":"<bpt id=\"p1\">[</bpt>Property Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/property-statement.md)</ept>","source":"[Property Statement](../../../visual-basic/language-reference/statements/property-statement.md)"},{"pos":[1283,1368],"content":"<bpt id=\"p1\">[</bpt>Sub Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept>","source":"[Sub Statement](../../../visual-basic/language-reference/statements/sub-statement.md)"},{"pos":[1377,1384],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"content":"The following example demonstrates the use of the <ph id=\"ph1\">`ByVal`</ph> parameter passing mechanism with a reference type argument.","pos":[1388,1505],"source":"The following example demonstrates the use of the `ByVal` parameter passing mechanism with a reference type argument."},{"content":"In the example, the argument is <ph id=\"ph1\">`c1`</ph>, an instance of class <ph id=\"ph2\">`Class1`</ph>.","pos":[1506,1574],"source":" In the example, the argument is `c1`, an instance of class `Class1`."},{"content":"<ph id=\"ph1\">`ByVal`</ph> prevents the code in the procedures from changing the underlying value of the reference argument, <ph id=\"ph2\">`c1`</ph>, but does not protect the accessible fields and properties of <ph id=\"ph3\">`c1`</ph>.","pos":[1575,1753],"source":"`ByVal` prevents the code in the procedures from changing the underlying value of the reference argument, `c1`, but does not protect the accessible fields and properties of `c1`."},{"pos":[1876,1884],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Keywords<ept id=\"p1\">](../../../visual-basic/language-reference/keywords/index.md)</ept><ph id=\"ph1\"> </ph>","pos":[1888,1959],"source":"[Keywords](../../../visual-basic/language-reference/keywords/index.md) "},{"content":"<bpt id=\"p1\">[</bpt>Passing Arguments by Value and by Reference<ept id=\"p1\">](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)</ept>","pos":[1963,2125],"source":"[Passing Arguments by Value and by Reference](../../../visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference.md)"}]}