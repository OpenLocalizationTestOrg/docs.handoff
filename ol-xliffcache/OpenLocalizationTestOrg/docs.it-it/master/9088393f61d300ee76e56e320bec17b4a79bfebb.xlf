<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index-operator.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9088393f61d300ee76e56e320bec17b4a79bfebb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\index-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b3c1614c3c9994b74d28f07f06be694ba46410b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45f91ada48f92bb93f5b35fd53f7f0db0b839616</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>[] operator - C# Reference</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>[] operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Square brackets, <ph id="ph1">`[]`</ph>, are typically used for array, indexer, or pointer element access.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information about pointer element access, see <bpt id="p1">[</bpt>How to: access an array element with a pointer<ept id="p1">](../../programming-guide/unsafe-code-pointers/how-to-access-an-array-element-with-a-pointer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You also use square brackets to specify <bpt id="p1">[</bpt>attributes<ept id="p1">](../../programming-guide/concepts/attributes/index.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Array access</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to access array elements:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If an array index is outside the bounds of the corresponding dimension of an array, an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As the preceding example shows, you also use square brackets in declaration of an array type and instantiation of array instances.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about arrays, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../programming-guide/arrays/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Indexer access</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example uses .NET <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> type to demonstrate indexer access:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Indexers allow you to index instances of a user-defined type in the similar way as array indexing.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unlike array indices, which must be integer, the indexer arguments can be declared to be of any type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about indexers, see <bpt id="p1">[</bpt>Indexers<ept id="p1">](../../programming-guide/indexers/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Operator overloadability</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Element access <ph id="ph1">`[]`</ph> is not considered an overloadable operator.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>indexers<ept id="p1">](../../programming-guide/indexers/index.md)</ept> to support indexing with user-defined types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C# language specification</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Element access<ept id="p1">](~/_csharplang/spec/expressions.md#element-access)</ept> and <bpt id="p2">[</bpt>Pointer element access<ept id="p2">](~/_csharplang/spec/unsafe-code.md#pointer-element-access)</ept> sections of the <bpt id="p3">[</bpt>C# language specification<ept id="p3">](../language-specification/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](index.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](../../programming-guide/arrays/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Indexers<ept id="p1">](../../programming-guide/indexers/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pointer types<ept id="p1">](../../programming-guide/unsafe-code-pointers/pointer-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](../../programming-guide/concepts/attributes/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>?. and ?[] operators<ept id="p1">](null-conditional-operators.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>