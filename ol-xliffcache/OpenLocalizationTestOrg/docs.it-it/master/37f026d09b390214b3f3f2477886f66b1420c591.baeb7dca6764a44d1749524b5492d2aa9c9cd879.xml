{"content":"---\ntitle: \"Throw Statement (Visual Basic) | Microsoft Docs\"\n\nms.date: \"2015-07-20\"\nms.prod: .net\nms.reviewer: \"\"\nms.suite: \"\"\nms.technology: \n  - \"devlang-visual-basic\"\n\nms.topic: \"article\"\nf1_keywords: \n  - \"vb.Throw\"\ndev_langs: \n  - \"VB\"\nhelpviewer_keywords: \n  - \"structured exception handling, throw statements\"\n  - \"try-catch exception handling, throw statements\"\n  - \"throw statement, about throw statements\"\n  - \"throwing exceptions, throw statement\"\n  - \"exception handling, throw statement\"\n  - \"On Error statement, throwing exceptions\"\n  - \"throwing exceptions\"\n  - \"exception handling, unstructured\"\n  - \"throw statement\"\nms.assetid: a6e07406-5c8a-4498-87a2-8339f3651d62\ncaps.latest.revision: 15\nauthor: dotnet-bot\nms.author: dotnetcontent\n\ntranslation.priority.ht: \n  - \"cs-cz\"\n  - \"de-de\"\n  - \"es-es\"\n  - \"fr-fr\"\n  - \"it-it\"\n  - \"ja-jp\"\n  - \"ko-kr\"\n  - \"pl-pl\"\n  - \"pt-br\"\n  - \"ru-ru\"\n  - \"tr-tr\"\n  - \"zh-cn\"\n  - \"zh-tw\"\n---\n# Throw Statement (Visual Basic)\nThrows an exception within a procedure.  \n  \n## Syntax  \n  \n```  \nThrow [ expression ]  \n```  \n  \n## Part  \n `expression`  \n Provides information about the exception to be thrown. Optional when residing in a `Catch` statement, otherwise required.  \n  \n## Remarks  \n The `Throw` statement throws an exception that you can handle with structured exception-handling code (`Try`...`Catch`...`Finally`) or unstructured exception-handling code (`On Error GoTo`). You can use the `Throw` statement to trap errors within your code because Visual Basic moves up the call stack until it finds the appropriate exception-handling code.  \n  \n A `Throw` statement with no expression can only be used in a `Catch` statement, in which case the statement rethrows the exception currently being handled by the `Catch` statement.  \n  \n The `Throw` statement resets the call stack for the `expression` exception. If `expression` is not provided, the call stack is left unchanged. You can access the call stack for the exception through the <xref:System.Exception.StackTrace%2A> property.  \n  \n## Example  \n The following code uses the `Throw` statement to throw an exception:  \n  \n [!code-vb[VbVbalrStatements#84](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/throw-statement_1.vb)]  \n  \n## Requirements  \n **Namespace:** [Microsoft.VisualBasic](../../../visual-basic/language-reference/runtime-library-members.md)  \n  \n **Module:** `Interaction`  \n  \n **Assembly:** Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)  \n  \n## See Also  \n [Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)   \n [On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md)","nodes":[{"pos":[12,59],"content":"Throw Statement (Visual Basic) | Microsoft Docs","needQuote":false,"needEscape":true,"nodes":[{"content":"Throw Statement (Visual Basic) | Microsoft Docs","pos":[0,47]}]},{"pos":[941,971],"content":"Throw Statement (Visual Basic)","linkify":"Throw Statement (Visual Basic)","nodes":[{"content":"Throw Statement (Visual Basic)","pos":[0,30]}]},{"content":"Throws an exception within a procedure.","pos":[972,1011]},{"pos":[1020,1026],"content":"Syntax","linkify":"Syntax","nodes":[{"content":"Syntax","pos":[0,6]}]},{"pos":[1073,1077],"content":"Part","linkify":"Part","nodes":[{"content":"Part","pos":[0,4]}]},{"content":"Provides information about the exception to be thrown.","pos":[1097,1151]},{"content":"Optional when residing in a <ph id=\"ph1\">`Catch`</ph> statement, otherwise required.","pos":[1152,1218],"source":" Optional when residing in a `Catch` statement, otherwise required."},{"pos":[1227,1234],"content":"Remarks","linkify":"Remarks","nodes":[{"content":"Remarks","pos":[0,7]}]},{"content":"The <ph id=\"ph1\">`Throw`</ph> statement throws an exception that you can handle with structured exception-handling code (<ph id=\"ph2\">`Try`</ph>...<ph id=\"ph3\">`Catch`</ph>...<ph id=\"ph4\">`Finally`</ph>) or unstructured exception-handling code (<ph id=\"ph5\">`On Error GoTo`</ph>).","pos":[1238,1428],"source":"The `Throw` statement throws an exception that you can handle with structured exception-handling code (`Try`...`Catch`...`Finally`) or unstructured exception-handling code (`On Error GoTo`)."},{"content":"You can use the <ph id=\"ph1\">`Throw`</ph> statement to trap errors within your code because Visual Basic moves up the call stack until it finds the appropriate exception-handling code.","pos":[1429,1595],"source":" You can use the `Throw` statement to trap errors within your code because Visual Basic moves up the call stack until it finds the appropriate exception-handling code."},{"pos":[1602,1782],"content":"A <ph id=\"ph1\">`Throw`</ph> statement with no expression can only be used in a <ph id=\"ph2\">`Catch`</ph> statement, in which case the statement rethrows the exception currently being handled by the <ph id=\"ph3\">`Catch`</ph> statement.","source":"A `Throw` statement with no expression can only be used in a `Catch` statement, in which case the statement rethrows the exception currently being handled by the `Catch` statement."},{"content":"The <ph id=\"ph1\">`Throw`</ph> statement resets the call stack for the <ph id=\"ph2\">`expression`</ph> exception.","pos":[1789,1864],"source":"The `Throw` statement resets the call stack for the `expression` exception."},{"content":"If <ph id=\"ph1\">`expression`</ph> is not provided, the call stack is left unchanged.","pos":[1865,1931],"source":" If `expression` is not provided, the call stack is left unchanged."},{"content":"You can access the call stack for the exception through the <ph id=\"ph1\">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> property.","pos":[1932,2039],"source":" You can access the call stack for the exception through the <xref:System.Exception.StackTrace%2A> property."},{"pos":[2048,2055],"content":"Example","linkify":"Example","nodes":[{"content":"Example","pos":[0,7]}]},{"pos":[2059,2127],"content":"The following code uses the <ph id=\"ph1\">`Throw`</ph> statement to throw an exception:","source":"The following code uses the `Throw` statement to throw an exception:"},{"pos":[2134,2268],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>VbVbalrStatements#84<ept id=\"p2\">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/throw-statement_1.vb)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[VbVbalrStatements#84](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/throw-statement_1.vb)]"},{"pos":[2277,2289],"content":"Requirements","linkify":"Requirements","nodes":[{"content":"Requirements","pos":[0,12]}]},{"pos":[2293,2400],"content":"<bpt id=\"p1\">**</bpt>Namespace:<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>Microsoft.VisualBasic<ept id=\"p2\">](../../../visual-basic/language-reference/runtime-library-members.md)</ept>","source":"**Namespace:** [Microsoft.VisualBasic](../../../visual-basic/language-reference/runtime-library-members.md)"},{"pos":[2407,2432],"content":"<bpt id=\"p1\">**</bpt>Module:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`Interaction`</ph>","source":"**Module:** `Interaction`"},{"pos":[2439,2512],"content":"<bpt id=\"p1\">**</bpt>Assembly:<ept id=\"p1\">**</ept> Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)","source":"**Assembly:** Visual Basic Runtime Library (in Microsoft.VisualBasic.dll)"},{"pos":[2521,2529],"content":"See Also","linkify":"See Also","nodes":[{"content":"See Also","pos":[0,8]}]},{"content":"<bpt id=\"p1\">[</bpt>Try...Catch...Finally Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept><ph id=\"ph1\"> </ph>","pos":[2533,2651],"source":"[Try...Catch...Finally Statement](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md) "},{"content":"<bpt id=\"p1\"> [</bpt>On Error Statement<ept id=\"p1\">](../../../visual-basic/language-reference/statements/on-error-statement.md)</ept>","pos":[2654,2750],"source":" [On Error Statement](../../../visual-basic/language-reference/statements/on-error-statement.md)"}]}