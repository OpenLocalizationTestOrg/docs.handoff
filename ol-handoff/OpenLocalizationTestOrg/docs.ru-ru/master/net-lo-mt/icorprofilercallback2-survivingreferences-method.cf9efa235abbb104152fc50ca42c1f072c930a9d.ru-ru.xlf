<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="icorprofilercallback2-survivingreferences-method.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b8f4a1935a300bd47fcfdcd23b945d9ccf22211</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\profiling\icorprofilercallback2-survivingreferences-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aecedfdeb3ed0bc6d2a210050177fac75074890d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17e3ddb1629596b0c2bbaee6b040171ece949199</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ICorProfilerCallback2::SurvivingReferences Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ICorProfilerCallback2::SurvivingReferences Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Reports the layout of objects in the heap as a result of a non-compacting garbage collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] The number of blocks of contiguous objects that survived as the result of the non-compacting garbage collection.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>That is, the value of <ph id="ph1">`cSurvivingObjectIDRanges`</ph> is the size of the <ph id="ph2">`objectIDRangeStart`</ph> and <ph id="ph3">`cObjectIDRangeLength`</ph> arrays, which store an <ph id="ph4">`ObjectID`</ph> and a length, respectively, for each block of objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The next two arguments of <ph id="ph1">`SurvivingReferences`</ph> are parallel arrays.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In other words, <ph id="ph1">`objectIDRangeStart`</ph> and <ph id="ph2">`cObjectIDRangeLength`</ph> concern the same block of contiguous objects.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[in] An array of <ph id="ph1">`ObjectID`</ph> values, each of which is the starting address of a block of contiguous, live objects in memory.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>[in] An array of integers, each of which is the size of a surviving block of contiguous objects in memory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A size is specified for each block that is referenced in the <ph id="ph1">`objectIDRangeStart`</ph> array.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This method reports sizes as <ph id="ph1">`MAX_ULONG`</ph> for objects that are greater than 4 GB on 64-bit platforms.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For objects that are larger than 4 GB, use the <bpt id="p1">[</bpt>ICorProfilerCallback4::SurvivingReferences2<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-survivingreferences2-method.md)</ept> method instead.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The elements of the <ph id="ph1">`objectIDRangeStart`</ph> and <ph id="ph2">`cObjectIDRangeLength`</ph> arrays should be interpreted as follows to determine whether an object survived the garbage collection.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Assume that an <ph id="ph1">`ObjectID`</ph> value (<ph id="ph2">`ObjectID`</ph>) lies within the following range:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For any value of <ph id="ph1">`i`</ph> that is in the following range, the object has survived the garbage collection:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>0 &lt;= <ph id="ph1">`i`</ph><ph id="ph2"> &lt; </ph><ph id="ph3">`cSurvivingObjectIDRanges`</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A non-compacting garbage collection reclaims the memory occupied by "dead" objects, but does not compact that freed space.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As a result, memory is returned to the heap, but no "live" objects are moved.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The common language runtime (CLR) calls <ph id="ph1">`SurvivingReferences`</ph> for non-compacting garbage collections.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For compacting garbage collections, <bpt id="p1">[</bpt>ICorProfilerCallback::MovedReferences<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-movedreferences-method.md)</ept> is called instead.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A single garbage collection can be compacting for one generation and non-compacting for another.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For a garbage collection on any particular generation, the profiler will receive either a <ph id="ph1">`SurvivingReferences`</ph> callback or a <ph id="ph2">`MovedReferences`</ph> callback, but not both.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`SurvivingReferences`</ph> callbacks might be received during a particular garbage collection, due to limited internal buffering, multiple threads reporting in the case of server garbage collection, and other reasons.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the case of multiple callbacks during a garbage collection, the information is cumulative â€” all references that are reported in any <ph id="ph1">`SurvivingReferences`</ph> callback survive the garbage collection.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorProf.idl, CorProf.h</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorProfilerCallback Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorProfilerCallback2 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SurvivingReferences2 Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-survivingreferences2-method.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>