<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8c29002ae2287df60996ed2b23068eec1e2739b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\exceptions\using-exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1aac8e60de56dbc9ca6e83e84473c6c8b0028ab8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc0352c7afefa2599cabf9f61d05115dffd33874</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Exceptions (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Exceptions (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In C#, errors in the program at run time are propagated through the program by using a mechanism called exceptions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Exceptions are thrown by code that encounters an error and caught by code that can correct the error.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Exceptions can be thrown by the .NET Framework common language runtime (CLR) or by code in a program.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Once an exception is thrown, it propagates up the call stack until a <ph id="ph1">`catch`</ph> statement for the exception is found.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Uncaught exceptions are handled by a generic exception handler provided by the system that displays a dialog box.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Exceptions are represented by classes derived from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This class identifies the type of exception and contains properties that have details about the exception.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Throwing an exception involves creating an instance of an exception-derived class, optionally configuring properties of the exception, and then throwing the object by using the <ph id="ph1">`throw`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#1<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/using-exceptions_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>After an exception is thrown, the runtime checks the current statement to see whether it is within a <ph id="ph1">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If it is, any <ph id="ph1">`catch`</ph> blocks associated with the <ph id="ph2">`try`</ph> block are checked to see whether they can catch the exception.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Catch`</ph> blocks typically specify exception types; if the type of the <ph id="ph2">`catch`</ph> block is the same type as the exception, or a base class of the exception, the <ph id="ph3">`catch`</ph> block can handle the method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#2<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/using-exceptions_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the statement that throws an exception is not within a <ph id="ph1">`try`</ph> block or if the <ph id="ph2">`try`</ph> block that encloses it has no matching <ph id="ph3">`catch`</ph> block, the runtime checks the calling method for a <ph id="ph4">`try`</ph> statement and <ph id="ph5">`catch`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The runtime continues up the calling stack, searching for a compatible <ph id="ph1">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`catch`</ph> block is found and executed, control is passed to the next statement after that <ph id="ph2">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`try`</ph> statement can contain more than one <ph id="ph2">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`catch`</ph> statement that can handle the exception is executed; any following <ph id="ph2">`catch`</ph> statements, even if they are compatible, are ignored.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Therefore, catch blocks should always be ordered from most specific (or most-derived) to least specific.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#3<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/using-exceptions_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Before the <ph id="ph1">`catch`</ph> block is executed, the runtime checks for <ph id="ph2">`finally`</ph> blocks.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Finally`</ph> blocks enable the programmer to clean up any ambiguous state that could be left over from an aborted <ph id="ph2">`try`</ph> block, or to release any external resources (such as graphics handles, database connections or file streams) without waiting for the garbage collector in the runtime to finalize the objects.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#4<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/using-exceptions_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`WriteByte()`</ph> threw an exception, the code in the second <ph id="ph2">`try`</ph> block that tries to reopen the file would fail if <ph id="ph3">`file.Close()`</ph> is not called, and the file would remain locked.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`finally`</ph> blocks are executed even if an exception is thrown, the <ph id="ph2">`finally`</ph> block in the previous example allows for the file to be closed correctly and helps avoid an error.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If no compatible <ph id="ph1">`catch`</ph> block is found on the call stack after an exception is thrown, one of three things occurs:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the exception is within a finalizer, the finalizer is aborted and the base finalizer, if any, is called.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the call stack contains a static constructor, or a static field initializer, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is thrown, with the original exception assigned to the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of the new exception.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the start of the thread is reached, the thread is terminated.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exceptions and Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>