<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="nullable-references.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ce9efb890f0eff5a6c6747f96c143a4d093dbfb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\nullable-references.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60009f9382ef38a760adb7810d379912f752e6bc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50ef32bd639b9fcfb0c4ff844d04ff9d11ca2d65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Nullable reference types</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This article provides an overview of nullable reference types, added in C# 8.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>You'll learn how the feature provides safety against null reference exceptions, for new and existing projects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Nullable reference types</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>C# 8.0 introduces <bpt id="p1">**</bpt>nullable reference types<ept id="p1">**</ept> and <bpt id="p2">**</bpt>non-nullable reference types<ept id="p2">**</ept> that enable you to make important statements about the properties for reference type variables:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A reference is not supposed to be null<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When variables aren't supposed to be null, the compiler enforces rules that ensure it is safe to dereference these variables without first checking that it isn't null:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The variable must be initialized to a non-null value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The variable can never be assigned the value <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A reference may be null<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When variables may be null, the compiler enforces different rules to ensure that you've correctly checked for a null reference:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The variable may only be dereferenced when the compiler can guarantee that the value isn't null.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These variables may be initialized with the default <ph id="ph1">`null`</ph> value and may be assigned the value <ph id="ph2">`null`</ph> in other code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This new feature provides significant benefits over the handling of reference variables in earlier versions of C# where the design intent couldn't be determined from the variable declaration.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The compiler didn't provide safety against null reference exceptions for reference types:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A reference can be null<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>No warnings are issued when a reference type is initialized to null, or later assigned to null.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A reference is assumed to be not null<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The compiler doesn't issue any warnings when reference types are dereferenced.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(With nullable references,  the compiler issues warnings whenever you dereference a variable that may be null).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>With the addition of nullable reference types, you can declare your intent more clearly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`null`</ph> value is the correct way to represent that a variable doesn't refer to a value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Don't use this feature to remove all <ph id="ph1">`null`</ph> values from your code.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Rather, you should declare your intent to the compiler and other developers that read your code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>By declaring your intent, the compiler informs you when you write code that is inconsistent with that intent.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>nullable reference type<ept id="p1">**</ept> is noted using the same syntax as <bpt id="p2">[</bpt>nullable value types<ept id="p2">](programming-guide/nullable-types/index.md)</ept>: a <ph id="ph1">`?`</ph> is appended to the type of the variable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the following variable declaration represents a nullable string variable, <ph id="ph1">`name`</ph>:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any variable where the <ph id="ph1">`?`</ph> is not appended to the type name is a <bpt id="p1">**</bpt>non-nullable reference type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>That includes all reference type variables in existing code when you have enabled this feature.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The compiler uses static analysis to determine if a nullable reference is known to be non-null.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The compiler warns you if you dereference a nullable reference when it may be null.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can override this behavior by using the <bpt id="p1">**</bpt>null-forgiving operator<ept id="p1">**</ept> (<ph id="ph1">`!`</ph>) following a variable name.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, if you know the <ph id="ph1">`name`</ph> variable isn't null but the compiler issues a warning, you can write the following code to override the compiler's analysis:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can read details about this operator in the <bpt id="p1">[</bpt>draft nullable reference types<ept id="p1">](../../_csharplang/proposals/csharp-8.0/nullable-reference-types-specification.md#the-null-forgiving-operator)</ept> specification proposal on GitHub.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Nullability of types</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Any reference type can have one of four <bpt id="p1">*</bpt>nullabilities<ept id="p1">*</ept>, which describes when warnings are generated:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Nonnullable<ept id="p1">*</ept>: Null can't be assigned to variables of this type.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Variables of this type don't need to be null-checked before dereferencing.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Nullable<ept id="p1">*</ept>: Null can be assigned to variables of this type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Dereferencing variables of this type without first checking for <ph id="ph1">`null`</ph> causes a warning.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Oblivious<ept id="p1">*</ept>: This is the pre-C# 8 state.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Variables of this type can be dereferenced or assigned without warnings.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Unknown<ept id="p1">*</ept>: This is generally for type parameters where constraints don't tell the compiler that the type must be <bpt id="p2">*</bpt>nullable<ept id="p2">*</ept> or <bpt id="p3">*</bpt>nonnullable<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The nullability of a type in a variable declaration is controlled by the <bpt id="p1">*</bpt>nullable context<ept id="p1">*</ept> in which the variable is declared.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Nullable contexts</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Nullable contexts enable fine-grained control for how the compiler interprets reference type variables.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>nullable annotation context<ept id="p1">**</ept> of any given source line is <ph id="ph1">`enabled`</ph> or <ph id="ph2">`disabled`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can think of the pre-C# 8 compiler as compiling all your code in a <ph id="ph1">`disabled`</ph> nullable context: Any reference type may be null.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>nullable warnings context<ept id="p1">**</ept> may be set to <ph id="ph1">`enabled`</ph>, <ph id="ph2">`disabled`</ph>, or <ph id="ph3">`safeonly`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The nullable warnings context specifies the warnings generated by the compiler using its flow analysis.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The nullable annotation context and nullable warning context can be set for a project using the <ph id="ph1">`NullableContextOptions`</ph> element in your <ph id="ph2">`csproj`</ph> file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This element configures how the compiler interprets the nullability of types and what warnings are generated.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Valid settings are:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`enable`</ph>: The nullable annotation context is <bpt id="p1">**</bpt>enabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The nullable warning context is <bpt id="p1">**</bpt>enabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Variables of a reference type, <ph id="ph1">`string`</ph> for example, are non-nullable.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>All nullability warnings are enabled.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`disable`</ph>: The nullable annotation context is <bpt id="p1">**</bpt>disabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The nullable warning context is <bpt id="p1">**</bpt>disabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Variables of a reference type are oblivious, just like earlier versions of C#.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>All nullability warnings are disabled.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`safeonly`</ph>: The nullable annotation context is <bpt id="p1">**</bpt>enabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The nullable warning context is <bpt id="p1">**</bpt>safeonly<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Variables of a reference type are nonnullable.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>All safety nullability warnings are enabled.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`warnings`</ph>: The nullable annotation context is <bpt id="p1">**</bpt>disabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The nullable warning context is <bpt id="p1">**</bpt>enabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Variables of a reference type are oblivious.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>All nullability warnings are enabled.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`safeonlywarnings`</ph>: The nullable annotation context is <bpt id="p1">**</bpt>disabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The nullable warning context is <bpt id="p1">**</bpt>safeonly<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Variables of a reference type are oblivious.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>All safety nullability warnings are enabled.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also use directives to set these same contexts anywhere in your project:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#nullable enable`</ph>: Sets the nullable annotation context and nullable warning context to <bpt id="p1">**</bpt>enabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#nullable disable`</ph>: Sets the nullable annotation context and nullable warning context to <bpt id="p1">**</bpt>disabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#nullable safeonly`</ph>: Set the nullable annotation context to <bpt id="p1">**</bpt>enabled<ept id="p1">**</ept>, and the warning context to <bpt id="p2">**</bpt>safeonly<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#nullable restore`</ph>: Restores the nullable annotation context and nullable warning context to the project settings.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#pragma warning disable nullable`</ph>: Set the nullable warning context to <bpt id="p1">**</bpt>disabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#pragma warning enable nullable`</ph>: Set the nullable warning context to <bpt id="p1">**</bpt>enabled<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#pragma warning restore nullable`</ph>: Restores the nullable warning context to the project settings.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#pragma warning safeonly nullable`</ph>: Sets the nullable warning context to <bpt id="p1">**</bpt>safeonly<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default nullable annotation and warning contexts are <ph id="ph1">`disabled`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>That decision means that your existing code compiles without changes and without generating any new warnings.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The differences between the <ph id="ph1">`enabled`</ph> and <ph id="ph2">`safeonly`</ph> nullable warning contexts are warnings for assigning a nullable reference to a non-nullable reference.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following assignment generates a warning in an <ph id="ph1">`enabled`</ph> warning context, but not a <ph id="ph2">`safeonly`</ph> warning context.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>However, the second line, where <ph id="ph1">`s`</ph> is dereferenced, generates a warning in a <ph id="ph2">`safeonly`</ph> context:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Nullable annotation context</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The compiler uses the following rules in a disabled nullable annotation context:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can't declare nullable references in a disabled context.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>All reference variables may be assigned to null.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>No warnings are generated when a variable of a reference type is dereferenced.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The null-forgiving operator may not be used in a disabled context.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The behavior is the same as previous versions of C#.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The compiler uses the following rules in an enabled nullable annotation context:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Any variable of a reference type is a <bpt id="p1">**</bpt>non-nullable reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Any non-nullable reference may be dereferenced safely.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Any nullable reference type (noted by <ph id="ph1">`?`</ph> after the type in the variable declaration) may be null.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Static analysis determines if the value is known to be non-null when it is dereferenced.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If not, the compiler warns you.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can use the null-forgiving operator to declare that a nullable reference isn't null.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In an enabled nullable annotation context, the <ph id="ph1">`?`</ph> character appended to a reference type declares a <bpt id="p1">**</bpt>nullable reference type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>null forgiveness operator<ept id="p1">**</ept> (<ph id="ph1">`!`</ph>) may be appended to an expression to declare that the expression isn't null.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Nullable warning context</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The nullable warning context is distinct from the nullable annotation context.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Warnings can be enabled even when the new annotations are disabled.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The compiler uses static flow analysis to determine the <bpt id="p1">**</bpt>null state<ept id="p1">**</ept> of any reference.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The null state is either <bpt id="p1">**</bpt>not null<ept id="p1">**</ept> or <bpt id="p2">**</bpt>maybe null<ept id="p2">**</ept> when the <bpt id="p3">*</bpt>nullable warning context<ept id="p3">*</ept> isn't <bpt id="p4">**</bpt>disabled<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If you dereference a reference when the compiler has determined it's <bpt id="p1">**</bpt>maybe null<ept id="p1">**</ept>, the compiler warns you.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The state of a reference is <bpt id="p1">**</bpt>maybe null<ept id="p1">**</ept> unless the compiler can determine one of two conditions:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The variable has been definitely assigned to a non-null value.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The variable or expression has been checked against null before de-referencing it.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The compiler generates warnings whenever you dereference a variable or expression in a <bpt id="p1">**</bpt>maybe null<ept id="p1">**</ept> state when the nullable warning context is <ph id="ph1">`enabled`</ph> or <ph id="ph2">`safeonly`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Furthermore, warnings are generated when a <bpt id="p1">**</bpt>maybe null<ept id="p1">**</ept> variable or expression is assigned to a nonnullable reference type when the nullable annotation context is <ph id="ph1">`enabled`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Learn more</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Draft Nullable reference specification<ept id="p1">](https://github.com/dotnet/csharplang/blob/master/proposals/csharp-8.0/nullable-reference-types-specification.md)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Intro to nullable references tutorial<ept id="p1">](tutorials/nullable-reference-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migrate an existing codebase to nullable references<ept id="p1">](tutorials/upgrade-to-nullable-references.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>