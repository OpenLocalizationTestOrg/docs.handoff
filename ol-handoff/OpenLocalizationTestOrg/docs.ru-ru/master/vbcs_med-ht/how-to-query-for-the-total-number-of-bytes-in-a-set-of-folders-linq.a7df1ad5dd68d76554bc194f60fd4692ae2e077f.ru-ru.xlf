<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3a2784e97c30aefbdea2bbe3df3273edc3fdd20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\how-to-query-for-the-total-number-of-bytes-in-a-set-of-folders-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">046ae925bf4fccb082e386896d055c20520abee1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aed68e77553e9a4cd241bcfd56985a3d9474dc56</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Query for the Total Number of Bytes in a Set of Folders (LINQ) (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Query for the Total Number of Bytes in a Set of Folders (LINQ) (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to retrieve the total number of bytes used by all the files in a specified folder and all its subfolders.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> method adds the values of all the items selected in the <ph id="ph2">`select`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can easily modify this query to retrieve the biggest or smallest file in the specified directory tree by calling the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Min%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph> method instead of <ph id="ph3">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you only have to count the number of bytes in a specified directory tree, you can do this more efficiently without creating a LINQ query, which incurs the overhead of creating the list collection as a data source.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The usefulness of the LINQ approach increases as the query becomes more complex, or when you have to run multiple queries against the same data source.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The query calls out to a separate method to obtain the file length.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It does this in order to consume the possible exception that will be raised if the file was deleted on another thread after the <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object was created in the call to <ph id="ph2">`GetFiles`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Even though the <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> object has already been created, the exception can occur because a <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph> object will try to refresh its <ph id="ph3">&lt;xref:System.IO.FileInfo.Length%2A&gt;</ph> property with the most current length the first time the property is accessed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By putting this operation in a try-catch block outside the query, the code follows the rule of avoiding operations in queries that can cause side-effects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In general, great care must be taken when you consume exceptions to make sure that an application is not left in an unknown state.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to   System.Core.dll and <ph id="ph1">`using`</ph> directives for the System.Linq and System.IO namespaces.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Objects (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ and File Directories (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-and-file-directories.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>