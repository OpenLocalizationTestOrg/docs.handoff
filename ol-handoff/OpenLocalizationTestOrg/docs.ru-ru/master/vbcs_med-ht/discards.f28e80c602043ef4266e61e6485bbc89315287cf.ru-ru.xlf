<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="discards.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">761fb69d3bc774975caf63b8aa665f8c19c0430a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\discards.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58c9099977b18e0f3ac52d703e0d0417bfba8b6d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f5d89d5b5e48d636d75c0aa5de87932862ebb6dd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Discards - C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Describes C#'s support for discards, which are unassigned, discardable variables, and the ways in which discards can be used.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Discards - C# Guide</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, C# supports discards, which are temporary, dummy variables that are intentionally unused in application code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Discards are equivalent to unassigned variables; they do not have a value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Because there is only a single discard variable, and that variable may not even be allocated storage, discards can reduce memory allocations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because they make the intent of your code clear, they enhance its readability and maintainability.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You indicate that a variable is a discard by assigning it the underscore (<ph id="ph1">`_`</ph>) as its name.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, the following method call returns a 3-tuple in which the first and second values are discards and <bpt id="p1">*</bpt>area<ept id="p1">*</ept> is a previously declared variable to be set to the corresponding third component returned by <bpt id="p2">*</bpt>GetCityInformation<ept id="p2">*</ept>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In C# 7.0, discards are supported in assignments in the following contexts:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Tuple and object <bpt id="p1">[</bpt>deconstruction<ept id="p1">](deconstruct.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pattern matching with <bpt id="p1">[</bpt>is<ept id="p1">](language-reference/keywords/is.md)</ept> and <bpt id="p2">[</bpt>switch<ept id="p2">](language-reference/keywords/switch.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Calls to methods with <ph id="ph1">`out`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A standalone <ph id="ph1">`_`</ph> when no <ph id="ph2">`_`</ph> is in scope.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_`</ph> is a valid discard, attempting to retrieve its value or use it in an assignment operation generates compiler error CS0301, "The name '<ph id="ph2">\_</ph>' does not exist in the current context".</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is because <ph id="ph1">`_`</ph> is not assigned a value, and may not even be assigned a storage location.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If it were an actual variable, you could not discard more than one value, as the previous example did.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Tuple and object deconstruction</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Discards are particularly useful in working with tuples when your application code uses some tuple elements but ignores others.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`QueryCityDataForYears`</ph> method returns a 6-tuple with the name of a city, its area, a year, the city's population for that year, a second year, and the city's population for that second year.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The example shows the change in population between those two years.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Of the data available from the tuple, we're unconcerned with the city area, and we know the city name and the two dates at design-time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As a result, we're only interested in the two population values stored in the tuple, and can handle its remaining values as discards.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information on deconstructing tuples with discards, see <bpt id="p1">[</bpt>Deconstructing tuples and other types<ept id="p1">](deconstruct.md#deconstructing-tuple-elements-with-discards)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Deconstruct`</ph> method of a class, structure, or interface also allows you to retrieve and deconstruct a specific set of data from an object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use discards when you are interested in working with only a subset of the deconstructed values.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example deconstructs a <ph id="ph1">`Person`</ph> object into four strings (the first and last names, the city, and the state), but discards the last name and the state.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information on deconstructing user-defined types with discards, see <bpt id="p1">[</bpt>Deconstructing tuples and other types<ept id="p1">](deconstruct.md#deconstructing-a-user-defined-type-with-discards)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Pattern matching with <ph id="ph1">`switch`</ph> and <ph id="ph2">`is`</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>discard pattern<ept id="p1">*</ept> can be used in pattern matching with the <bpt id="p2">[</bpt>is<ept id="p2">](language-reference/keywords/is.md)</ept> and <bpt id="p3">[</bpt>switch<ept id="p3">](language-reference/keywords/switch.md)</ept> keywords.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Every expression always matches the discard pattern.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example defines a <ph id="ph1">`ProvidesFormatInfo`</ph> method that uses <bpt id="p1">[</bpt>is<ept id="p1">](language-reference/keywords/is.md)</ept> statements to determine whether an object provides an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation and tests whether the object is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It also uses the discard pattern to handle non-null objects of any other type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Calls to methods with out parameters</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When calling the <ph id="ph1">`Deconstruct`</ph> method to deconstruct a user-defined type (an instance of a class, structure, or interface), you can discard the values of individual <ph id="ph2">`out`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>But you can also discard the value of <ph id="ph1">`out`</ph> arguments when calling any method with an out parameter.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example calls the <bpt id="p1">[</bpt>DateTime.TryParse(String, out DateTime)<ept id="p1">](&lt;xref:System.DateTime.TryParse(System.String,System.DateTime@)&gt;)</ept> method to determine whether the string representation of a date is valid in the current culture.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Because the example is concerned only with validating the date string and not with parsing it to extract the date, the <ph id="ph1">`out`</ph> argument to the method is a discard.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A standalone discard</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use a standalone discard to indicate any variable that you choose to ignore.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example uses a standalone discard to ignore the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object returned by an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This has the effect of suppressing the exception that the operation throws as it is about to complete.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`_`</ph> is also a valid identifier.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When used outside of a supported context, <ph id="ph1">`_`</ph> is treated not as a discard but as a valid variable.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If an identifier named <ph id="ph1">`_`</ph> is already in scope, the use of <ph id="ph2">`_`</ph> as a standalone discard can result in:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Accidental modification of the value of the in-scope <ph id="ph1">`_`</ph> variable by assigning it the value of the intended discard.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A compiler error for violating type safety.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Compiler error CS0136, "A local or parameter named '<ph id="ph1">\_</ph>' cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter."</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deconstructing tuples and other types<ept id="p1">](deconstruct.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`is`</ph> keyword<ept id="p1">](language-reference/keywords/is.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`switch`</ph> keyword<ept id="p1">](language-reference/keywords/switch.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>