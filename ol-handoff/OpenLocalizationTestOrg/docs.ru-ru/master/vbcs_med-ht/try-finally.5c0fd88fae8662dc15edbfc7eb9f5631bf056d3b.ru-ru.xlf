<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3f7618aa6d4ae3535b2b6cb562349650b3eba1ed</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\try-finally.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7124178c231aec1e0be247e7598230243778fd49</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">703f0e042c2de49a3c2d689e736249ec423da0ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>try-finally (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>try-finally (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By using a <ph id="ph1">`finally`</ph> block, you can clean up any resources that are allocated in a <bpt id="p1">[</bpt>try<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept> block, and you can run code even if an exception occurs in the <ph id="ph2">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Typically, the statements of a <ph id="ph1">`finally`</ph> block run when control leaves a <ph id="ph2">`try`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The transfer of control can occur as a result of normal execution, of execution of a <ph id="ph1">`break`</ph>, <ph id="ph2">`continue`</ph>, <ph id="ph3">`goto`</ph>, or <ph id="ph4">`return`</ph> statement, or of propagation of an exception out of the <ph id="ph5">`try`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Within a handled exception, the associated <ph id="ph1">`finally`</ph> block is guaranteed to be run.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, if the exception is unhandled, execution of the <ph id="ph1">`finally`</ph> block is dependent on how the exception unwind operation is triggered.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>That, in turn, is dependent on how your computer is set up.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Unhandled Exception Processing in the CLR<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=128371)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Usually, when an unhandled exception ends an application, whether or not the <ph id="ph1">`finally`</ph> block is run is not important.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, if you have statements in a <ph id="ph1">`finally`</ph> block that must be run even in that situation, one solution is to add a <ph id="ph2">`catch`</ph> block to the <ph id="ph3">`try`</ph><ph id="ph4">-</ph><ph id="ph5">`finally`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Alternatively, you can catch the exception that might be thrown in the <ph id="ph1">`try`</ph> block of a <ph id="ph2">`try`</ph><ph id="ph3">-</ph><ph id="ph4">`finally`</ph> statement higher up the call stack.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>That is, you can catch the exception in the method that calls the method that contains the <ph id="ph1">`try`</ph><ph id="ph2">-</ph><ph id="ph3">`finally`</ph> statement, or in the method that calls that method, or in any method in the call stack.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the exception is not caught, execution of the <ph id="ph1">`finally`</ph> block depends on whether the operating system chooses to trigger an exception unwind operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the following example, an invalid conversion statement causes a <ph id="ph1">`System.InvalidCastException`</ph> exception.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The exception is unhandled.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsExceptions#4<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the following example, an exception from the <ph id="ph1">`TryCast`</ph> method is caught in a method farther up the call stack.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsExceptions#6<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/try-finally_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`finally`</ph>, see <bpt id="p1">[</bpt>try-catch-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>C# also contains the <bpt id="p1">[</bpt>using statement<ept id="p1">](../../../csharp/language-reference/keywords/using-statement.md)</ept>, which provides similar functionality for <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> objects in a convenient syntax.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try, throw, and catch Statements (C++)<ept id="p1">](https://docs.microsoft.com/cpp/cpp/try-throw-and-catch-statements-cpp)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling Statements<ept id="p1">](../../../csharp/language-reference/keywords/exception-handling-statements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>throw<ept id="p1">](../../../csharp/language-reference/keywords/throw.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>try-catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Explicitly Throw Exceptions<ept id="p1">](https://msdn.microsoft.com/library/xhcbs8fz)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>