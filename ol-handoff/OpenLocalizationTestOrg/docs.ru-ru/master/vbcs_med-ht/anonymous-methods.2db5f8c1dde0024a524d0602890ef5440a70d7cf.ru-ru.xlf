<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="anonymous-methods.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f438abfb00cda1a608f086aa973c06774e1d0084</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\anonymous-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">adcd70d3ed9706cd2770648d8bb3e32afc894993</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8dd592e2efc0cc288a9081a3857a91b1fd20dba5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Anonymous Methods (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Anonymous Methods (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In versions of C# before 2.0, the only way to declare a <bpt id="p1">[</bpt>delegate<ept id="p1">](../../../csharp/language-reference/keywords/delegate.md)</ept> was to use <bpt id="p2">[</bpt>named methods<ept id="p2">](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>C# 2.0 introduced anonymous methods and in C# 3.0 and later, lambda expressions supersede anonymous methods as the preferred way to write inline code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, the information about anonymous methods in this topic also applies to lambda expressions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There is one case in which an anonymous method provides functionality not found in lambda expressions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Anonymous methods enable you to omit the parameter list.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This means that an anonymous method can be converted to delegates with a variety of signatures.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is not possible with lambda expressions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information specifically about lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating anonymous methods is essentially a way to pass a code block as a delegate parameter.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Here are two examples:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By using anonymous methods, you reduce the coding overhead in instantiating delegates because you do not have to create a separate method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, specifying a code block instead of a delegate can be useful in a situation when having to create a method might seem an unnecessary overhead.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A good example would be when you start a new thread.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This class creates a thread and also contains the code that the thread executes without creating an additional method for the delegate.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The scope of the parameters of an anonymous method is the <bpt id="p1">*</bpt>anonymous-method-block<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is an error to have a jump statement, such as <bpt id="p1">[</bpt>goto<ept id="p1">](../../../csharp/language-reference/keywords/goto.md)</ept>, <bpt id="p2">[</bpt>break<ept id="p2">](../../../csharp/language-reference/keywords/break.md)</ept>, or <bpt id="p3">[</bpt>continue<ept id="p3">](../../../csharp/language-reference/keywords/continue.md)</ept>, inside the anonymous method block if the target is outside the block.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is also an error to have a jump statement, such as <ph id="ph1">`goto`</ph>, <ph id="ph2">`break`</ph>, or <ph id="ph3">`continue`</ph>, outside the anonymous method block if the target is inside the block.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The local variables and parameters whose scope contains an anonymous method declaration are called <bpt id="p1">*</bpt>outer<ept id="p1">*</ept> variables of the anonymous method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, in the following code segment, <ph id="ph1">`n`</ph> is an outer variable:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A reference to the outer variable <ph id="ph1">`n`</ph> is said to be <bpt id="p1">*</bpt>captured<ept id="p1">*</ept> when the delegate is created.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Unlike local variables, the lifetime of a captured variable extends until the delegates that reference the anonymous methods are eligible for garbage collection.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An anonymous method cannot access the <bpt id="p1">[</bpt>ref<ept id="p1">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id="p2">[</bpt>out<ept id="p2">](../../../csharp/language-reference/keywords/out.md)</ept> parameters of an outer scope.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>No unsafe code can be accessed within the <bpt id="p1">*</bpt>anonymous-method-block<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Anonymous methods are not allowed on the left side of the <bpt id="p1">[</bpt>is<ept id="p1">](../../../csharp/language-reference/keywords/is.md)</ept> operator.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example demonstrates two ways of instantiating a delegate:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Associating the delegate with an anonymous method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Associating the delegate with a named method (<ph id="ph1">`DoWork`</ph>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In each case, a message is displayed when the delegate is invoked.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../../../csharp/programming-guide/delegates/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsafe Code and Pointers<ept id="p1">](../../../csharp/programming-guide/unsafe-code-pointers/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Methods<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates with Named vs. Anonymous Methods<ept id="p1">](../../../csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>