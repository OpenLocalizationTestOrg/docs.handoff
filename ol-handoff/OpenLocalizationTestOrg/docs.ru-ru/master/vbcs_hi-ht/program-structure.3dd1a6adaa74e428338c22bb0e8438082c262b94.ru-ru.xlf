<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="program-structure.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ef19d7fa2164990edd5e27651d28aa085ec90ad</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\program-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b42b68ca87fc1988f1079d36d2d79507da7ef1e2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01f7665fbb72d1f497f927598879aebd068ed657</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>C# Program Structure | A Tour of the C# Language</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn the basic building blocks of a C# program</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>.NET .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Program Structure</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The key organizational concepts in C# are <bpt id="p1">***</bpt>programs<ept id="p1">***</ept>, <bpt id="p2">***</bpt>namespaces<ept id="p2">***</ept>, <bpt id="p3">***</bpt>types<ept id="p3">***</ept>, <bpt id="p4">***</bpt>members<ept id="p4">***</ept>, and <bpt id="p5">***</bpt>assemblies<ept id="p5">***</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>C# programs consist of one or more source files.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Programs declare types, which contain members and can be organized into namespaces.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Classes and interfaces are examples of types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Fields, methods, properties, and events are examples of members.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When C# programs are compiled, they are physically packaged into assemblies.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Assemblies typically have the file extension <ph id="ph1">`.exe`</ph> or <ph id="ph2">`.dll`</ph>, depending on whether they implement <bpt id="p1">***</bpt>applications<ept id="p1">***</ept> or <bpt id="p2">***</bpt>libraries<ept id="p2">***</ept>, respectively.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The example declares a class named <ph id="ph1">`Stack`</ph> in a namespace called <ph id="ph2">`Acme.Collections`</ph>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The fully qualified name of this class is <ph id="ph1">`Acme.Collections.Stack`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The class contains several members: a field named <ph id="ph1">`top`</ph>, two methods named <ph id="ph2">`Push`</ph> and <ph id="ph3">`Pop`</ph>, and a nested class named <ph id="ph4">`Entry`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Entry`</ph> class further contains three members: a field named <ph id="ph2">`next`</ph>, a field named <ph id="ph3">`data`</ph>, and a constructor.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Assuming that the source code of the example is stored in the file <ph id="ph1">`acme.cs`</ph>, the command line</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>compiles the example as a library (code without a <ph id="ph1">`Main`</ph> entry point) and produces an assembly named <ph id="ph2">`acme.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The examples above use <ph id="ph1">`csc`</ph> as the command line C# compiler.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This compiler is a windows executable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To use C# across other platforms, you should use the tools for .NET Core.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The .NET Core ecosystem uses the <ph id="ph1">`dotnet`</ph> CLI to manage command line builds.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This includes managing dependencies, and invoking the C# compiler.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>this tutorial<ept id="p1">](../../core/tutorials/using-with-xplat-cli.md)</ept> for a full description of those tools on the platforms supported by .NET Core.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Assemblies contain executable code in the form of Intermediate Language (IL) instructions, and symbolic information in the form of metadata.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Before it is executed, the IL code in an assembly is automatically converted to processor-specific code by the Just-In-Time (JIT) compiler of .NET Common Language Runtime.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because an assembly is a self-describing unit of functionality containing both code and metadata, there is no need for <ph id="ph1">`#include`</ph> directives and header files in C#.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The public types and members contained in a particular assembly are made available in a C# program simply by referencing that assembly when compiling the program.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, this program uses the <ph id="ph1">`Acme.Collections.Stack`</ph> class from the <ph id="ph2">`acme.dll`</ph> assembly:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the program is stored in the file <ph id="ph1">`example.cs`</ph>, when <ph id="ph2">`example.cs`</ph> is compiled, the acme.dll assembly can be referenced using the compiler’s /r option:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This creates an executable assembly named <ph id="ph1">`example.exe`</ph>, which, when run, produces the output:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C# permits the source text of a program to be stored in several source files.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When a multi-file C# program is compiled, all of the source files are processed together, and the source files can freely reference each other—conceptually, it is as if all the source files were concatenated into one large file before being processed.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Forward declarations are never needed in C# because, with very few exceptions, declaration order is insignificant.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>C# does not limit a source file to declaring only one public type nor does it require the name of the source file to match a type declared in the source file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](index.md)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Next<ept id="p2">](types-and-variables.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>