<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">523b537ba07afd1b6c56192c5e2589082fe5820f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\build\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afed810ad2861447705e1fc761c575ae97baa372</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b7e112c8eeefb5ce6d9e94bf1538c93375dcb9f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Build .NET Core from source</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to build .NET Core and the .NET Core CLI from the source code.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Build .NET Core from source</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The ability to build .NET Core from its source code is important in multiple ways: it makes it easier to port .NET Core to new platforms, it enables contributions and fixes to the product, and it enables the creation of custom versions of .NET.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article gives guidance to developers who want to build and distribute their own versions of .NET Core.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Build the CLR from source</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The source code for the .NET CoreCLR can be found in the <bpt id="p1">[</bpt>dotnet/coreclr<ept id="p1">](https://github.com/dotnet/coreclr/)</ept> repository on GitHub.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The build currently depends on the following prerequisites:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Git<ept id="p1">](https://git-scm.com/)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CMake<ept id="p1">](https://cmake.org/)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Python<ept id="p1">](https://www.python.org/)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>a C++ compiler.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>After you've installed these prerequisites, you can build the CLR by invoking the build script (<ph id="ph1">`build.cmd`</ph> on Windows, or <ph id="ph2">`build.sh`</ph> on Linux and macOS) at the base of the <bpt id="p1">[</bpt>dotnet/coreclr<ept id="p1">](https://github.com/dotnet/coreclr/)</ept> repository.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Installing the components differ depending on the operating system (OS).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See the build instructions for your specific OS:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/building/windows-instructions.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Linux<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/building/linux-instructions.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>macOS<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/building/osx-instructions.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>FreeBSD<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/building/freebsd-instructions.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NetBSD<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/building/netbsd-instructions.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There is no cross-building across OS (only for ARM, which is built on X64).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You have to be on the particular platform to build that platform.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The build has two main <ph id="ph1">`buildTypes`</ph>:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Debug (default)- Compiles the runtime with minimal optimizations and additional runtime checks (asserts).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This reduction in optimization level and the additional checks slow runtime execution but are valuable for debugging.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is the recommended setting for development and testing environments.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Release - Compiles the runtime with full optimizations and without the additional runtime checks.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This will yield much faster run time performance but it can take a bit longer to build and can be difficult to debug.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Pass <ph id="ph1">`release`</ph> to the build script to select this build type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In addition, by default the build not only creates the runtime executables, but it also builds all the tests.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There are quite a few tests, taking a significant amount of time that isn't necessary if you just want to experiment with changes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can skip the tests builds by adding the <ph id="ph1">`skiptests`</ph> argument to the build script, like in the following example (replace <ph id="ph2">`.\build`</ph> with <ph id="ph3">`./build.sh`</ph> on Unix machines):</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The previous example showed how to build the <ph id="ph1">`Debug`</ph> flavor, which has development time checks (asserts) enabled and optimizations disabled.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To build the release (full speed) flavor, do the following:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can find more build options with build by using the -?</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>or -help qualifier.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Using Your Build</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The build places all of its generated files under the <ph id="ph1">`bin`</ph> directory at the base of the repository.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>There is a <bpt id="p1">*</bpt>bin\Log<ept id="p1">*</ept> directory that contains log files generated during the build (Most useful when the build fails).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The actual output is placed in a <bpt id="p1">*</bpt>bin\Product<ph id="ph1">\[</ph>platform].[CPU architecture].[build type]<ept id="p1">*</ept> directory, such as <bpt id="p2">*</bpt>bin\Product\Windows_NT.x64.Release<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>While the 'raw' output of the build is sometimes useful, normally you're only interested in the NuGet packages, which are placed in the <ph id="ph1">`.nuget\pkg`</ph> subdirectory of the previous output directory.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are two basic techniques for using your new runtime:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Use dotnet.exe and NuGet to compose an application<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Using Your Build<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingYourBuild.md)</ept> for instructions on creating a program that uses your new runtime by using the NuGet packages you just created and the 'dotnet' command-line interface (CLI).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This technique is the expected way non-runtime developers are likely to consume your new runtime.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Use corerun.exe to run an application using unpackaged DLLs<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This repository also defines a simple host called corerun.exe that does NOT take any dependency on NuGet.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You need to tell the host where to get the required DLLs you actually use, and you have to manually gather them together.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This technique is used by all the tests in the <bpt id="p1">[</bpt>dotnet/coreclr<ept id="p1">](https://github.com/dotnet/coreclr)</ept> repo, and is useful for quick local 'edit-compile-debug' loop such as preliminary unit testing.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Executing .NET Core Apps with CoreRun.exe<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingCoreRun.md)</ept> for details on using this technique.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Build the CLI from source</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The source code for the .NET Core CLI can be found in the <bpt id="p1">[</bpt>dotnet/cli<ept id="p1">](https://github.com/dotnet/cli/)</ept> repository on GitHub.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In order to build the .NET Core CLI, you need the following installed on your machine.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Windows &amp; Linux:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>git on the PATH</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>macOS:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>git on the PATH</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Xcode</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>OpenSSL</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In order to build, run <ph id="ph1">`build.cmd`</ph> on Windows, or <ph id="ph2">`build.sh`</ph> on Linux and macOS from the root.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you don't want to execute tests, run <ph id="ph1">`build.cmd -t:Compile`</ph> or <ph id="ph2">`./build.sh -t:Compile`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To build the CLI in macOS Sierra, you need to set the DOTNET_RUNTIME_ID environment variable by running <ph id="ph1">`export DOTNET_RUNTIME_ID=osx.10.11-x64`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Using your build</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`dotnet`</ph> executable from <bpt id="p1">*</bpt>artifacts/{os}-{arch}/stage2<ept id="p1">*</ept> to try out the newly built CLI.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you want to use the build output when invoking <ph id="ph1">`dotnet`</ph> from the current console, you can also add <bpt id="p1">*</bpt>artifacts/{os}-{arch}/stage2<ept id="p1">*</ept> to the PATH.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Common Language Runtime (CoreCLR)<ept id="p1">](https://github.com/dotnet/coreclr/blob/master/README.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core CLI Developer Guide<ept id="p1">](https://github.com/dotnet/cli/blob/master/Documentation/project-docs/developer-guide.md)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core distribution packaging<ept id="p1">](./distribution-packaging.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>