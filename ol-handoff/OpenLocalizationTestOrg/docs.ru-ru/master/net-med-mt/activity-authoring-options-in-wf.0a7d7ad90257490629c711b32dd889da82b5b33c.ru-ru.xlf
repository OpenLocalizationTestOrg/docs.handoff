<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09575832b53b34c0f9c4c4b025447ea650808930</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\activity-authoring-options-in-wf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5197993df28777cb84a12dc1c24f6603e08f006</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee2b9360317e0385cc7a3fa2ff10ecf609da3b94</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Activity Authoring Options in WF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Activity Authoring Options in WF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> provides several options for creating custom activities.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The correct method to use for authoring a given activity depends on what run-time features are required.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Deciding Which Base Activity Class to Use for Authoring Custom Activities</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table lists the features available in the custom activity base classes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Base activity class</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Features available</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Composes groups of system-provided and custom activities into a composite activity.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Implements imperative functionality by providing an <ph id="ph1">&lt;xref:System.Activities.CodeActivity%601.Execute%2A&gt;</ph> method that can be overridden.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Also provides access to tracking, variables, and arguments..</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Provides all of the features of <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph>, plus aborting activity execution, canceling child activity execution, using bookmarks, and scheduling activities, activity actions, and functions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Provides a DOM-like approach to constructing activities that interfaces with the WF designer and the run-time machinery through <ph id="ph1">&lt;!--zz &lt;xref:System.ComponentModel.IcustomTypeDescriptor&gt;--&gt;</ph> <ph id="ph2">`IcustomTypeDescriptor`</ph>, allowing new activities to be created without defining new types.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Authoring Activities using Activity</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Activities that derive from <ph id="ph1">&lt;xref:System.Activities.Activity&gt;</ph> compose functionality by assembling other existing activities.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These activities can be existing custom activities and activities from the <ph id="ph1">[!INCLUDE[netfx_current_long](../../../includes/netfx-current-long-md.md)]</ph> activity library.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Assembling these activities is the most basic way to create custom functionality.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This approach is most typically taken when using a visual design environment for authoring workflows.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Authoring Activities using CodeActivity or AsyncCodeActivity</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Activities that derive from <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph> or <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> can implement imperative functionality by overriding the <ph id="ph3">&lt;xref:System.Activities.CodeActivity%601.Execute%2A&gt;</ph> method with custom imperative code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The custom code is executed when the activity is executed by the runtime.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>While activities created in this way have access to custom functionality, they do not have access to all of the features of the runtime, such as full access to the execution environment, the ability to schedule child activities, bookmark creation, or support for a Cancel or Abort method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph> executes, it has access to a reduced version of the execution environment (through the <ph id="ph2">&lt;xref:System.Activities.CodeActivityContext&gt;</ph> or <ph id="ph3">&lt;xref:System.Activities.AsyncCodeActivityContext&gt;</ph> class).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Activities created using <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph> have access to argument and variable resolution, extensions, and tracking.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Asynchronous activity scheduling can be done using <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Authoring Activities using NativeActivity</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Activities that derive from <ph id="ph1">&lt;xref:System.Activities.NativeActivity&gt;</ph>, like those that derive from <ph id="ph2">&lt;xref:System.Activities.CodeActivity&gt;</ph>, create imperative functionality by overriding <ph id="ph3">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph>, but also have access to all of the functionality of the workflow runtime through the <ph id="ph4">&lt;xref:System.Activities.NativeActivityContext&gt;</ph> that gets passed into the <ph id="ph5">&lt;xref:System.Activities.NativeActivity.Execute%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This context has support for scheduling and canceling child activities, executing <ph id="ph1">&lt;xref:System.Activities.ActivityAction&gt;</ph> and <ph id="ph2">&lt;!--zz &lt;xref:System.Activities.ActivityFunc&gt;--&gt;</ph> <ph id="ph3">`ActivityFunc`</ph> objects, flowing transactions into a workflow, invoking asynchronous processes, canceling and aborting execution, access to execution properties and extensions, and bookmarks (handles for resuming paused workflows).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Authoring Activities using DynamicActivity</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Unlike the other three types of activity, new functionality is not created by deriving new types from <ph id="ph1">&lt;xref:System.Activities.DynamicActivity&gt;</ph> (the class is sealed), but instead, by assembling functionality into the <ph id="ph2">&lt;xref:System.Activities.DynamicActivity.Properties%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Activities.DynamicActivity.Implementation%2A&gt;</ph> properties using an activity document object model (DOM).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Authoring Activities that Return a Result</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Many activities must return a result after their execution.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Although it is possible to always define a custom <ph id="ph1">&lt;xref:System.Activities.OutArgument%601&gt;</ph> on an activity for this purpose, it is suggested to instead use <ph id="ph2">&lt;xref:System.Activities.Activity%601&gt;</ph>, or derive from <ph id="ph3">&lt;xref:System.Activities.CodeActivity%601&gt;</ph> or <ph id="ph4">&lt;xref:System.Activities.NativeActivity%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Each of these base classes has an <ph id="ph1">&lt;xref:System.Activities.OutArgument%601&gt;</ph> named Result that your activity can use for its return value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Activities that return a result should only be used if only one result needs to be returned from an activity; if multiple results need to be returned, separate <ph id="ph1">&lt;xref:System.Activities.OutArgument%601&gt;</ph> members should be used instead.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>