<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">337fcecb7a8ef29d198af85a97a44d0733b05085</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\default-marshaling-for-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ecd84c2a56d114f6a9cd71daf2717a40b6ad83d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2e665866bf104d511dc19707f91b945a1283ef0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Default Marshaling for Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Default Marshaling for Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Parameters and fields typed as <ph id="ph1">&lt;xref:System.Object?displayProperty=fullName&gt;</ph> can be exposed to unmanaged code as one of the following types:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A variant when the object is a parameter.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An interface when the object is a structure field.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Only COM interop supports marshaling for object types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The default behavior is to marshal objects to COM variants.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These rules apply only to the type <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> and do not apply to strongly typed objects that derive from the <bpt id="p2">**</bpt>Object<ept id="p2">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic provides the following additional information about marshaling object types:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling Options<ept id="p1">](#cpcondefaultmarshalingforobjectsanchor7)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling Object to Interface<ept id="p1">](#cpcondefaultmarshalingforobjectsanchor2)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling Object to Variant<ept id="p1">](#cpcondefaultmarshalingforobjectsanchor3)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling Variant to Object<ept id="p1">](#cpcondefaultmarshalingforobjectsanchor4)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling ByRef Variants<ept id="p1">](#cpcondefaultmarshalingforobjectsanchor6)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Marshaling Options</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following table shows the marshaling options for the <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> data type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute provides several <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration values to marshal objects.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Enumeration type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description of unmanaged format</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UnmanagedType.Struct<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(default for parameters)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A COM-style variant.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UnmanagedType.Interface<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>IDispatch<ept id="p1">**</ept> interface, if possible; otherwise, an <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UnmanagedType.IUnknown<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>(default for fields)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>UnmanagedType.IDispatch<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>IDispatch<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows the managed interface definition for <ph id="ph1">`MarshalObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code exports the <ph id="ph1">`MarshalObject`</ph> interface to a type library.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The interop marshaler automatically frees any allocated object inside the variant after the call.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example shows a formatted value type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code exports the formatted type to a type library.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Marshaling Object to Interface</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When an object is exposed to COM as an interface, that interface is the class interface for the managed type <ph id="ph1">&lt;xref:System.Object&gt;</ph> (the <bpt id="p1">**</bpt>_Object<ept id="p1">**</ept> interface).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This interface is typed as an <bpt id="p1">**</bpt>IDispatch<ept id="p1">**</ept> (<ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph>) or an <bpt id="p2">**</bpt>IUnknown<ept id="p2">**</ept> (<bpt id="p3">**</bpt>UnmanagedType.IUnknown<ept id="p3">**</ept>) in the resulting type library.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>COM clients can dynamically invoke the members of the managed class or any members implemented by its derived classes through the <bpt id="p1">**</bpt>_Object<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The client can also call <bpt id="p1">**</bpt>QueryInterface<ept id="p1">**</ept> to obtain any other interface explicitly implemented by the managed type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Marshaling Object to Variant</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When an object is marshaled to a variant, the internal variant type is determined at run time, based on the following rules:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the object reference is null (<bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept> in Visual Basic), the object is marshaled to a variant of type <bpt id="p2">**</bpt>VT_EMPTY<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the object is an instance of any type listed in the following table, the resulting variant type is determined by the rules built into the marshaler and shown in the table.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Other objects that need to explicitly control the marshaling behavior can implement the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In that case, the variant type is determined by the type code returned from the <ph id="ph1">&lt;xref:System.IConvertible.GetTypeCode%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Otherwise, the object is marshaled as a variant of type <bpt id="p1">**</bpt>VT_UNKNOWN<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Marshaling System Types to Variant</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following table shows managed object types and their corresponding COM variant types.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These types are converted only when the signature of the method being called is of type <ph id="ph1">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Object type</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>COM variant type</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Null object reference (<bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_EMPTY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_NULL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_ERROR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_ERROR<ept id="p1">**</ept> with <bpt id="p2">**</bpt>E_PARAMNOTFOUND<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UNKNOWN<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_CY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_BOOL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_R4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_R8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DECIMAL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_BSTR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_INT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UINT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_ARRAY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`MarshalObject`</ph> interface defined in the previous example, the following code example demonstrates how to pass various types of variants to a COM server.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>COM types that do not have corresponding managed types can be marshaled using wrapper classes such as <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ErrorWrapper&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.InteropServices.DispatchWrapper&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.InteropServices.UnknownWrapper&gt;</ph>, and <ph id="ph4">&lt;xref:System.Runtime.InteropServices.CurrencyWrapper&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to use these wrappers to pass various types of variants to a COM server.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The wrapper classes are defined in the <ph id="ph1">&lt;xref:System.Runtime.InteropServices&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Marshaling the IConvertible Interface to Variant</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Types other than those listed in the previous section can control how they are marshaled by implementing the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the object implements the <bpt id="p1">**</bpt>IConvertible<ept id="p1">**</ept> interface, the COM variant type is determined at run time by the value of the <ph id="ph1">&lt;xref:System.TypeCode&gt;</ph> enumeration returned from the <ph id="ph2">&lt;xref:System.IConvertible.GetTypeCode%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following table shows the possible values for the <bpt id="p1">**</bpt>TypeCode<ept id="p1">**</ept> enumeration and the corresponding COM variant type for each value.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>TypeCode</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>COM variant type</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Empty<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_EMPTY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Object<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UNKNOWN<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.DBNull<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_NULL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Boolean<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_BOOL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Char<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Sbyte<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Byte<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Int16<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.UInt16<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Int32<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.UInt32<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Int64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.UInt64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Single<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_R4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Double<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_R8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.Decimal<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DECIMAL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.DateTime<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TypeCode.String<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_BSTR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_INT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UINT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_ARRAY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_RECORD<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_CY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_VARIANT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The value of the COM variant is determined by calling the <bpt id="p1">**</bpt>IConvertible.To<ept id="p1">**</ept> <bpt id="p2">*</bpt>Type<ept id="p2">*</ept> interface, where <bpt id="p3">**</bpt>To<ept id="p3">**</ept> <bpt id="p4">*</bpt>Type<ept id="p4">*</ept> is the conversion routine that corresponds to the type that was returned from <bpt id="p5">**</bpt>IConvertible.GetTypeCode<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For example, an object that returns <bpt id="p1">**</bpt>TypeCode.Double<ept id="p1">**</ept> from <bpt id="p2">**</bpt>IConvertible.GetTypeCode<ept id="p2">**</ept> is marshaled as a COM variant of type <bpt id="p3">**</bpt>VT_R8<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can obtain the value of the variant (stored in the <bpt id="p1">**</bpt>dblVal<ept id="p1">**</ept> field of the COM variant) by casting to the <bpt id="p2">**</bpt>IConvertible<ept id="p2">**</ept> interface and calling the <ph id="ph1">&lt;xref:System.IConvertible.ToDouble%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Marshaling Variant to Object</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>When marshaling a variant to an object, the type, and sometimes the value, of the marshaled variant determines the type of object produced.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following table identifies each variant type and the corresponding object type that the marshaler creates when a variant is passed from COM to the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>COM variant type</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Object type</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_EMPTY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Null object reference (<bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_NULL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>System.__ComObject<ept id="p1">**</ept> or null if (pdispVal == null)</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UNKNOWN<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>System.__ComObject<ept id="p1">**</ept> or null if (punkVal == null)</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_ERROR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_BOOL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_I8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UI8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_R4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_R8<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DECIMAL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_DATE<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_BSTR<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_INT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_UINT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_ARRAY<ept id="p1">**</ept> &amp;#124; <bpt id="p2">**</bpt>VT_<ph id="ph1">\*</ph><ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_CY<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_RECORD<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Corresponding boxed value type.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VT_VARIANT<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Variant types passed from COM to managed code and then back to COM might not retain the same variant type for the duration of the call.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Consider what happens when a variant of type <bpt id="p1">**</bpt>VT_DISPATCH<ept id="p1">**</ept> is passed from COM to the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>During marshaling, the variant is converted to a <ph id="ph1">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Object<ept id="p1">**</ept> is then passed back to COM, it is marshaled back to a variant of type <bpt id="p2">**</bpt>VT_UNKNOWN<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the variant produced when an object is marshaled from managed code to COM will be the same type as the variant initially used to produce the object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Marshaling ByRef Variants</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Although variants themselves can be passed by value or by reference, the <bpt id="p1">**</bpt>VT_BYREF<ept id="p1">**</ept> flag can also be used with any variant type to indicate that the contents of the variant are being passed by reference instead of by value.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The difference between marshaling variants by reference and marshaling a variant with the <bpt id="p1">**</bpt>VT_BYREF<ept id="p1">**</ept> flag set can be confusing.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The following illustration clarifies the differences.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Variant passed on the stack<ept id="p1">](../../../docs/framework/interop/media/interopvariant.gif "interopvariant")</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Variants passed by value and by reference</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default behavior for marshaling objects and variants by value<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When passing objects from managed code to COM, the contents of the object are copied into a new variant created by the marshaler, using the rules defined in <bpt id="p1">[</bpt>Marshaling Object to Variant<ept id="p1">](#cpcondefaultmarshalingforobjectsanchor3)</ept>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Changes made to the variant on the unmanaged side are not propagated back to the original object on return from the call.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>When passing variants from COM to managed code, the contents of the variant are copied to a newly created object, using the rules defined in <bpt id="p1">[</bpt>Marshaling Variant to Object<ept id="p1">](#cpcondefaultmarshalingforobjectsanchor4)</ept>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Changes made to the object on the managed side are not propagated back to the original variant on return from the call.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default behavior for marshaling objects and variants by reference<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>To propagate changes back to the caller, the parameters must be passed by reference.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For example, you can use the <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> keyword in C# (or <bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> in Visual Basic managed code) to pass parameters by reference.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>In COM, reference parameters are passed using a pointer such as a <bpt id="p1">**</bpt>variant <ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>When passing an object to COM by reference, the marshaler creates a new variant and copies the contents of the object reference into the variant before the call is made.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The variant is passed to the unmanaged function where the user is free to change the contents of the variant.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>On return from the call, any changes made to the variant on the unmanaged side are propagated back to the original object.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If the type of the variant differs from the type of the variant passed to the call, then the changes are propagated back to an object of a different type.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>That is, the type of the object passed into the call can differ from the type of the object returned from the call.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>When passing a variant to managed code by reference, the marshaler creates a new object and copies the contents of the variant into the object before making the call.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>A reference to the object is passed to the managed function, where the user is free to change the object.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>On return from the call, any changes made to the referenced object are propagated back to the original variant.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>If the type of the object differs from the type of the object passed in to the call, the type of the original variant is changed and the value is propagated back into the variant.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Again, the type of the variant passed into the call can differ from the type of the variant returned from the call.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default behavior for marshaling a variant with the VT_BYREF flag set<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A variant being passed to managed code by value can have the <bpt id="p1">**</bpt>VT_BYREF<ept id="p1">**</ept> flag set to indicate that the variant contains a reference instead of a value.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In this case, the variant is still marshaled to an object because the variant is being passed by value.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The marshaler automatically dereferences the contents of the variant and copies it into a newly created object before making the call.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The object is then passed into the managed function; however, on return from the call, the object is not propagated back into the original variant.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Changes made to the managed object are lost.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>There is no way to change the value of a variant passed by value, even if the variant has the <bpt id="p1">**</bpt>VT_BYREF<ept id="p1">**</ept> flag set.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A variant being passed to managed code by reference can also have the <bpt id="p1">**</bpt>VT_BYREF<ept id="p1">**</ept> flag set to indicate that the variant contains another reference.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>If it does, the variant is marshaled to a <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> object because the variant is being passed by reference.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The marshaler automatically dereferences the contents of the variant and copies it into a newly created object before making the call.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>On return from the call, the value of the object is propagated back to the reference within the original variant only if the object is the same type as the object passed in.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>That is, propagation does not change the type of a variant with the <bpt id="p1">**</bpt>VT_BYREF<ept id="p1">**</ept> flag set.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>If the type of the object is changed during the call, an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> occurs on return from the call.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The following table summarizes the propagation rules for variants and objects.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>From</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>To</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Changes propagated back</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variant<ept id="p1">**</ept>  <bpt id="p2">*</bpt>v<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object<ept id="p1">**</ept>  <bpt id="p2">*</bpt>o<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Never</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object<ept id="p1">**</ept>  <bpt id="p2">*</bpt>o<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variant<ept id="p1">**</ept>  <bpt id="p2">*</bpt>v<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Never</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variant<ept id="p1">**</ept>   <bpt id="p2">***</bpt><ph id="ph1">\*</ph><ept id="p2">***</ept>  <bpt id="p3">*</bpt>pv<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ref Object<ept id="p1">**</ept>  <bpt id="p2">*</bpt>o<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Always</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ref object<ept id="p1">**</ept>  <bpt id="p2">*</bpt>o<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variant<ept id="p1">**</ept>   <bpt id="p2">***</bpt><ph id="ph1">\*</ph><ept id="p2">***</ept>  <bpt id="p3">*</bpt>pv<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Always</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variant<ept id="p1">**</ept>  <bpt id="p2">*</bpt>v<ept id="p2">*</ept> <bpt id="p3">**</bpt>(VT_BYREF<ept id="p3">**</ept> <bpt id="p4">*</bpt>&amp;#124;<ept id="p4">*</ept> <bpt id="p5">**</bpt>VT_<ph id="ph1">\*</ph>)<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object<ept id="p1">**</ept>  <bpt id="p2">*</bpt>o<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Never</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Variant<ept id="p1">**</ept>  <bpt id="p2">*</bpt>v<ept id="p2">*</ept> <bpt id="p3">**</bpt>(VT_BYREF<ept id="p3">**</ept> <bpt id="p4">*</bpt>&amp;#124;<ept id="p4">*</ept> <bpt id="p5">**</bpt>VT_)<ept id="p5">**</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ref Object<ept id="p1">**</ept>  <bpt id="p2">*</bpt>o<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Only if the type has not changed.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Default Marshaling Behavior<ept id="p1">](../../../docs/framework/interop/default-marshaling-behavior.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Blittable and Non-Blittable Types<ept id="p1">](../../../docs/framework/interop/blittable-and-non-blittable-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Directional Attributes<ept id="p1">](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Copying and Pinning<ept id="p1">](../../../docs/framework/interop/copying-and-pinning.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>