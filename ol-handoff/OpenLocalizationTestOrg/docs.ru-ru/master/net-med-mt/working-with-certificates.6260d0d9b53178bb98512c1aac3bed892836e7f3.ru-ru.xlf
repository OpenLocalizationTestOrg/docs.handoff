<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="working-with-certificates.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a91979dc9933b693e1dee0c92b43e0304a06366f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\working-with-certificates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22785ead421bbaa5373ac370e1805a3ef71a5a0e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ebd2aa67bb347a048aa25a64ef820214306a15a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Working with Certificates | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Working with Certificates</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To program <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> security, X.509 digital certificates are commonly used to authenticate clients and servers, encrypt, and digitally sign messages.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic briefly explains X.509 digital certificate features and how to use them in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, and includes links to topics that explain these concepts further or that show how to accomplish common tasks using <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> and certificates.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In brief, a digital certificate is a part of a <bpt id="p1">*</bpt>public key infrastructure<ept id="p1">*</ept> (PKI), which is a system of digital certificates, certificate authorities, and other registration authorities that verify and authenticate the validity of each party involved in an electronic transaction through the use of public key cryptography.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A certification authority issues certificates and each certificate has a set of fields that contain data, such as <bpt id="p1">*</bpt>subject<ept id="p1">*</ept> (the entity to which the certificate is issued), validity dates (when the certificate is valid), issuer (the entity that issued the certificate), and a public key.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, each of these properties is processed as a <ph id="ph2">&lt;xref:System.IdentityModel.Claims.Claim&gt;</ph>, and each claim is further divided into two types: identity and right.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> X.509 certificates see <bpt id="p1">[</bpt>X.509 Public Key Certificates<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=209952)</ept><ph id="ph2">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> Claims and Authorization in WCF see <bpt id="p2">[</bpt>Managing Claims and Authorization with the Identity Model<ept id="p2">](../../../../docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> implementing a PKI, see <bpt id="p1">[</bpt>Windows Server 2008 R2 - Certificate Services<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=209949)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A primary function of the certificate is to authenticate the identity of the owner of the certificate to others.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A certificate contains the <bpt id="p1">*</bpt>public key<ept id="p1">*</ept> of the owner, while the owner retains the private key.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The public key can be used to encrypt messages sent to the owner of the certificate.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Only the owner has access to the private key, so only the owner can decrypt those messages.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Certificates must be issued by a certification authority, which is often a third-party  issuer of certificates.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On a Windows domain, a certification authority is included that can be used to issue certificates to computers on the domain.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Viewing Certificates</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To work with certificates, it is often necessary to view them and examine their properties.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is easily done with the Microsoft Management Console (MMC) snap-in tool.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: View Certificates with the MMC Snap-in<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-view-certificates-with-the-mmc-snap-in.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Certificate Stores</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Certificates are found in stores.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Two major store locations exist that are further divided into sub-stores.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you are the administrator on a computer, you can view both major stores by using the MMC snap-in tool.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Non-administrators can view only the current user store.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The local machine store<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This contains the certificates accessed by machine processes, such as <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use this location to store certificates that authenticate the server to clients.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The current user store<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Interactive applications typically place certificates here for the computer's current user.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you are creating a client application, this is where you typically place certificates that authenticate a user to a service.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These two stores are further divided into sub-stores.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The most important of these when programming with <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> include:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Trusted Root Certification Authorities<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use the certificates in this store to create a chain of certificates, which can be traced back to a certification authority certificate in this store.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The local computer implicitly trusts any certificate placed in this store, even if the certificate does not come from a trusted third-party certification authority.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For this reason, do not place any certificate into this store unless you fully trust the issuer and understand the consequences.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Personal<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This store is used for certificates associated with a user of a computer.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Typically this store is used for certificates issued by one of the certification authority certificates found in the Trusted Root Certification Authorities store.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Alternatively, a certificate found here may be self-issued and trusted by an application.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>certificate stores, see <bpt id="p1">[</bpt>Certificate Stores<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=88912)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Selecting a Store</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Selecting where to store a certificate depends how and when the service or client runs.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following general rules apply:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the WCF service is hosted in a Windows service use the <bpt id="p1">**</bpt>local machine<ept id="p1">**</ept> store.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Note that administrator privileges are required to install certificates into the local machine store.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If the service or client is an application that runs under a user account, then use the <bpt id="p1">**</bpt>current user<ept id="p1">**</ept> store.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Accessing Stores</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Stores are protected by access control lists (ACLs), just like folders on a computer.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When creating a service hosted by Internet Information Services (IIS), the <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> process runs under the <ph id="ph2">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> account.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>That account must have access to the store that contains the certificates a service uses.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each of the major stores is protected with a default access list, but the lists can be modified.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you create a separate role to access a store, you must grant that role access permission.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To learn how to modify the access list using the WinHttpCertConfig.exe tool, see <bpt id="p1">[</bpt>How to: Create Temporary Certificates for Use During Development<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-temporary-certificates-for-use-during-development.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> using client certificates with IIS, see <bpt id="p1">[</bpt>How to call a Web service by using a client certificate for authentication in an ASP.NET Web application<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=88914)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Chain Trust and Certificate Authorities</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Certificates are created in a hierarchy where each individual certificate is linked to the CA that issued the certificate.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This link is to the CA’s certificate.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The CA’s certificate then links to the CA that issued the orginal CA’s certificate.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This process is repeated up until the Root CA’s certificate is reached.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The Root CA’s certificate is inherently trusted.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Digital certificates are used to authenticate an entity by relying this hierarchy, also called a <bpt id="p1">*</bpt>chain of trust<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can view any certificate's chain using the MMC snap-in by double-clicking any certificate, then clicking the <bpt id="p1">**</bpt>Certificate Path<ept id="p1">**</ept> tab. <ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> importing certificate chains for a Certification authority, see <bpt id="p2">[</bpt>How to: Specify the Certificate Authority Certificate Chain Used to Verify Signatures<ept id="p2">](../../../../docs/framework/wcf/feature-details/specify-the-certificate-authority-chain-verify-signatures-wcf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Any issuer can be designated a trusted root authority by placing the issuer's certificate in the trusted root authority certificate store.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Disabling Chain Trust</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When creating a new service, you may be using a certificate that is not issued by a trusted root certificate, or the issuing certificate itself may not be in the Trusted Root Certification Authorities store.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For development purposes only, you can temporarily disable the mechanism that checks the chain of trust for a certificate.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To do this, set the <ph id="ph1">`CertificateValidationMode`</ph> property to either <ph id="ph2">`PeerTrust`</ph> or <ph id="ph3">`PeerOrChainTrust`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Either mode specifies that the certificate can either be self-issued (peer trust) or part of a chain of trust.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can set the property on any of the following classes.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can also set the property using configuration.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following elements are used to specify the validation mode:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>authentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/authentication-of-servicecertificate-element.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>peerAuthentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/peerauthentication-element.md)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>messageSenderAuthentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/messagesenderauthentication-element.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Custom Authentication</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CertificateValidationMode`</ph> property also enables you to customize how certificates are authenticated.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>By default, the level is set to <ph id="ph1">`ChainTrust`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">&lt;xref:System.ServiceModel.Security.X509CertificateValidationMode&gt;</ph> value, you must also set the <ph id="ph2">`CustomCertificateValidatorType`</ph> attribute to an assembly and type used to validate the certificate.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To create a custom validator, you must inherit from the abstract <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.X509CertificateValidator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When creating a custom authenticator, the most important method to override is the <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.X509CertificateValidator.Validate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For an example of custom authentication, see the <bpt id="p1">[</bpt>X.509 Certificate Validator<ept id="p1">](../../../../docs/framework/wcf/samples/x-509-certificate-validator.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Custom Credential and Credential Validation<ept id="p1">](../../../../docs/framework/wcf/extending/custom-credential-and-credential-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Using Makecert.exe to Build a Certificate Chain</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The Certificate Creation Tool (Makecert.exe) creates X.509 certificates and private key/public key pairs.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can save the private key to disk and then use it to issue and sign new certificates, thus simulating a hierarchy of chained certificates.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The tool is intended for use only as an aid when developing services and should never be used to create certificates for actual deployment.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When developing an <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service, use the following steps to build a chain of trust with Makecert.exe.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To build a chain of trust with Makecert.exe</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Create a temporary root authority (self-signed) certificate using the MakeCert.exe tool.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Save the private key to the disk.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Use the new certificate to issue another certificate that contains the public key.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Import the root authority certificate into the Trusted Root Certification Authorities store.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For step-by-step instructions, see <bpt id="p1">[</bpt>How to: Create Temporary Certificates for Use During Development<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-temporary-certificates-for-use-during-development.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Which Certificate to Use?</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Common questions about certificates are which certificate to use, and why.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The answer depends on whether you are programming a client or service.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following information provides a general guideline and is not an exhaustive answer to these questions.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Service Certificates</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Service certificates have the primary task of authenticating the server to clients.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>One of the initial checks when a client authenticates a server is to compare the value of the <bpt id="p1">**</bpt>Subject<ept id="p1">**</ept> field to the Uniform Resource Identifier (URI) used to contact the service: the DNS of both must match.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, if the URI of the service is "http://www.contoso.com/endpoint/" then the <bpt id="p1">**</bpt>Subject<ept id="p1">**</ept> field must also contain the value "www.contoso.com".</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Note that the field can contain several values, each prefixed with an initialization to indicate the value.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Most commonly, the initialization is "CN" for common name, for example, "CN = www.contoso.com".</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It is also possible for the <bpt id="p1">**</bpt>Subject<ept id="p1">**</ept> field to be blank, in which case the <bpt id="p2">**</bpt>Subject Alternative Name<ept id="p2">**</ept> field can contain the <bpt id="p3">**</bpt>DNS Name<ept id="p3">**</ept> value.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Also note the value of the <bpt id="p1">**</bpt>Intended Purposes<ept id="p1">**</ept> field of the certificate should include an appropriate value, such as "Server Authentication" or "Client Authentication".</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Client Certificates</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Client certificates are not typically issued by a third-party certification authority.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Instead, the Personal store of the current user location typically contains certificates placed there by a root authority, with an intended purpose of "Client Authentication".</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The client can use such a certificate when mutual authentication is required.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Online Revocation and Offline Revocation</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Certificate Validity</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Every certificate is valid only for a given period of time, called the <bpt id="p1">*</bpt>validity period<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The validity period is defined by the <bpt id="p1">**</bpt>Valid from<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Valid to<ept id="p2">**</ept> fields of an X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>During authentication, the certificate is checked to determine whether the certificate is still within the validity period.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Certificate Revocation List</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>At any time during the validity period, the certification authority can revoke a certificate.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This can occur for many reasons, such as a compromise of the private key of the certificate.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When this occurs, any chains that descend from the revoked certificate are also invalid, and are not trusted during authentication procedures.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To find out which certificates are revoked, each issuer publishes a time- and date-stamped <bpt id="p1">*</bpt>certificate revocation list<ept id="p1">*</ept> (CRL).</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The list can be checked using either online revocation or offline revocation by setting the <ph id="ph1">`RevocationMode`</ph> or <ph id="ph2">`DefaultRevocationMode`</ph> property of the following classes to one of the <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509RevocationMode&gt;</ph> enumeration values: <ph id="ph4">&lt;xref:System.ServiceModel.Security.X509ClientCertificateAuthentication&gt;</ph>, <ph id="ph5">&lt;xref:System.ServiceModel.Security.X509PeerCertificateAuthentication&gt;</ph>, <ph id="ph6">&lt;xref:System.ServiceModel.Security.X509ServiceCertificateAuthentication&gt;</ph>, and the <ph id="ph7">&lt;xref:System.ServiceModel.Security.IssuedTokenServiceCredential&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The default value for all properties is <ph id="ph1">`Online`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can also set the mode in configuration using the <ph id="ph1">`revocationMode`</ph> attribute of both the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>authentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/authentication-of-clientcertificate-element.md)</ept> (of the <bpt id="p2">[</bpt><ph id="ph3">\&lt;</ph>serviceBehaviors&gt;<ept id="p2">](../../../../docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md)</ept>) and the <bpt id="p3">[</bpt><ph id="ph4">\&lt;</ph>authentication&gt;<ept id="p3">](../../../../docs/framework/configure-apps/file-schema/wcf/authentication-of-clientcertificate-element.md)</ept> (of the <bpt id="p4">[</bpt><ph id="ph5">\&lt;</ph>endpointBehaviors&gt;<ept id="p4">](../../../../docs/framework/configure-apps/file-schema/wcf/endpointbehaviors.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The SetCertificate Method</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, you must often specify a certificate or set of certificates a service or client is to use to authenticate, encrypt, or digitally sign a message.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can do this programmatically by using the <ph id="ph1">`SetCertificate`</ph> method of various classes that represent X.509 certificates.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The following classes use the <ph id="ph1">`SetCertificate`</ph> method to specify a certificate.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetCertificate`</ph> method works by designating a store location and store, a "find" type (<ph id="ph2">`x509FindType`</ph> parameter) that specifies a field of the certificate, and a value to find in the field.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For example, the following code creates a <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> instance and sets the service certificate used to authenticate the service to clients with the <ph id="ph2">`SetCertificate`</ph> method.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Multiple Certificates with the Same Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A store may contain multiple certificates with the same subject name.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This means that if you specify that the <ph id="ph1">`x509FindType`</ph> is <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph> or <ph id="ph3">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph>, and more than one certificate has the same value, an exception is thrown becausethereisno way to distinguish which certificate is required.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can mitigate this by setting the <ph id="ph1">`x509FindType`</ph> to <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The thumbprint field contains a unique value that can be used to find a specific certificate in a store.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>However, this has its own disadvantage: if the certificate is revoked or renewed, the <ph id="ph1">`SetCertificate`</ph> method fails because the thumbprint is also gone.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Or, if the certificate is no longer valid, authentication fails.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The way to mitigate this is to set the <ph id="ph1">`x590FindType`</ph> parameter to <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph> and specify the issuer's name.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If no particular issuer is required, you can also set one of the other <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph> enumeration values, such as <ph id="ph2">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Certificates in Configuration</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You can also set certificates by using configuration.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If you are creating a service, credentials, including certificates, are specified under the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceBehaviors&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>When you are programming a client, certificates are specified under the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>endpointBehaviors&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/endpointbehaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Mapping a Certificate to a User Account</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A feature of IIS and Active Directory is the ability to map a certificate to a Windows user account.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> the feature, see <bpt id="p1">[</bpt>Map certificates to user accounts<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=88917)</ept>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>using Active Directory mapping, see <bpt id="p1">[</bpt>Mapping Client Certificates with Directory Service Mapping<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=88918)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>With this capability enabled, you can set the <ph id="ph1">&lt;xref:System.ServiceModel.Security.X509ClientCertificateAuthentication.MapClientCertificateToWindowsAccount%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.Security.X509ClientCertificateAuthentication&gt;</ph> class to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In configuration, you can set the <ph id="ph1">`mapClientCertificateToWindowsAccount`</ph> attribute of the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>authentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/authentication-of-servicecertificate-element.md)</ept> element to <ph id="ph3">`true`</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Mapping an X.509 certificate to the token that represents a Windows user account is considered an elevation of privilege because, once mapped, the Windows token can be used to gain access to protected resources.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Therefore, domain policy requires the X.509 certificate to comply with its policy prior to mapping.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>SChannel<ept id="p1">*</ept> security package enforces this requirement.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">[!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)]</ph> or later, <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures the certificate conforms to domain policy before it is mapped to a Windows account.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In the first release of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, mapping is done without consulting the domain policy.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Therefore it is possible that older applications that used to work when running under the first release, fails if the mapping is enabled and the X.509 certificate does not satisfy the domain policy.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels&gt;</ph></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Security&gt;</ph></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel&gt;</ph></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing Services and Clients<ept id="p1">](../../../../docs/framework/wcf/feature-details/securing-services-and-clients.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>