<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89f3033c8ac6d3ce9dc0a02c18e9bd7764c7b279</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\wcf\feed-customization-wcf-data-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30f5f4161f84da15498d7e364726988648db87b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32f2e85319fd4e19ce8798f05e01dec9767afa62</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Feed Customization (WCF Data Services) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Feed Customization (WCF Data Services)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ssAstoria](../../../../includes/ssastoria-md.md)]</ph> uses the <ph id="ph2">[!INCLUDE[ssODataFull](../../../../includes/ssodatafull-md.md)]</ph> to expose data as a feed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph> supports both Atom and JavaScript Object Notation (JSON) formats for data feeds.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you use an Atom feed, <ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph> provides a standard method to serialize data, such as entities and relationships, into an XML format that can be included in the body of HTTP message.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph> defines a default entity-property mapping between the data that is contained in entities and Atom elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>OData: Atom Format<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=185794)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You may have an application scenario that requires that the property data returned by the data service be serialized in a customized manner rather than in the standard feed format.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph>, you can customize the serialization in a data feed so that properties of an entity may be mapped to unused elements and attributes of an entry or to custom elements of an entry in the feed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Feed customization is only supported for Atom feeds.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Custom feeds are not returned when the JSON format is requested for the returned feed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">[!INCLUDE[ssAstoria](../../../../includes/ssastoria-md.md)]</ph>, you can define an alternate entity-property mapping for an Atom payload by manually applying attributes to entity types in the data model.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The data source provider of the data service determines how you should apply these attributes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you define custom feeds, you must guarantee that all entity properties that have custom mappings defined are included in the projection.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When a mapped entity property is not included in the projection, data loss might occur.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Query Projections<ept id="p1">](../../../../docs/framework/data/wcf/query-projections-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Customizing Feeds with the Entity Framework Provider</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The data model used with the <ph id="ph1">[!INCLUDE[adonet_ef](../../../../includes/adonet-ef-md.md)]</ph> provider is represented as XML in the .edmx file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this case, the attributes that define custom feeds are added to the <ph id="ph1">`EntityType`</ph> and <ph id="ph2">`Property`</ph> elements that represent entity types and properties in the data model.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These feed customization attributes are not defined in <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MC-CSDL<ph id="ph2">\]</ph>: Conceptual Schema Definition File Format<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=159072)</ept>, which is the format that the <ph id="ph3">[!INCLUDE[adonet_ef](../../../../includes/adonet-ef-md.md)]</ph> provider uses to define the data model.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Therefore, you must declare feed customization attributes in a specific schema namespace, which is defined as <ph id="ph1">`m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following XML fragment shows feed customization attributes applied to <ph id="ph1">`Property`</ph> elements of the <ph id="ph2">`Products`</ph> entity type that define the <ph id="ph3">`ProductName`</ph>, <ph id="ph4">`ReorderLevel`</ph>, and <ph id="ph5">`UnitsInStock`</ph> properties.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Astoria Custom Feeds#EdmFeedAttributes<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Misc/astoria custom feeds/xml/northwind.csdl#edmfeedattributes)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These attributes produce the following customized data feed for the <ph id="ph1">`Products`</ph> entity set.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the customized data feed, the <ph id="ph1">`ProductName`</ph> property value is displayed in both in the <ph id="ph2">`author`</ph> element and as the <ph id="ph3">`ProductName`</ph> property element, and the <ph id="ph4">`UnitsInStock`</ph> property is displayed in a custom element that has its own unique namespace and with the <ph id="ph5">`ReorderLevel`</ph> property as an attribute:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Astoria Custom Feeds#EdmFeedResultProduct<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Misc/astoria custom feeds/xml/edmfeedresult.xml#edmfeedresultproduct)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Customize Feeds with the Entity Framework Provider<ept id="p1">](../../../../docs/framework/data/wcf/how-to-customize-feeds-with-ef-provider-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because extensions to the data model are not supported by the Entity Designer, you must manually modify the XML file that contains the data model.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> the .edmx file that is generated by the <ph id="ph2">[!INCLUDE[adonet_edm](../../../../includes/adonet-edm-md.md)]</ph> tools, see <bpt id="p1">[</bpt>.edmx File Overview<ept id="p1">](http://msdn.microsoft.com/en-us/f4c8e7ce-1db6-417e-9759-15f8b55155d4)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Custom Feed Attributes</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following table shows the XML attributes that customize feeds that you can add to the conceptual schema definition language (CSDL) that defines the data model.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These attributes are equivalent to the properties of the <ph id="ph1">&lt;xref:System.Data.Services.Common.EntityPropertyMappingAttribute&gt;</ph> used with the reflection provider.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Attribute name</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Indicates the type of the content.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following keywords define syndication content types.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`text:`</ph> The property value is displayed in the feed as text.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`html:`</ph> The property value is displayed in the feed as HTML.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`xhtml:`</ph> The property value is displayed in the feed as XML-formatted HTML.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These keywords are equivalent to the values of the <ph id="ph1">&lt;xref:System.Data.Services.Common.SyndicationTextContentKind&gt;</ph> enumeration used with the reflection provider.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This attribute is not supported when the <ph id="ph1">`FC_NsPrefix`</ph> and <ph id="ph2">`FC_NsUri`</ph> attributes are used.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When you specify a value of <ph id="ph1">`xhtml`</ph> for the <ph id="ph2">`FC_ContentKind`</ph> attribute, you must ensure that the property value contains properly formatted XML.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The data service returns the value without performing any transformations.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You must also ensure that any XML element prefixes in the returned XML have a namespace URI and prefix defined in the mapped feed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Indicates that the referenced property value should be included both in the content section of the feed and in the mapped location.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Valid values are <ph id="ph1">`true`</ph> and <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To make the resulting feed backward-compatible with earlier versions of <ph id="ph1">[!INCLUDE[ssAstoria](../../../../includes/ssastoria-md.md)]</ph>, specify a value of <ph id="ph2">`true`</ph> to make sure that the value is included in the content section of the feed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The namespace prefix of the XML element in a non-syndication mapping.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This attribute must be used with the <ph id="ph1">`FC_NsUri`</ph> attribute and cannot be used with the <ph id="ph2">`FC_ContentKind`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The namespace URI of the XML element in a non-syndication mapping.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This attribute must be used with the <ph id="ph1">`FC_NsPrefix`</ph> attribute and cannot be used with the <ph id="ph2">`FC_ContentKind`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The path of the property of the entity to which this feed mapping rule applies.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This attribute is only supported when it is used in an <ph id="ph1">`EntityType`</ph> element.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Services.Common.EntityPropertyMappingAttribute.SourcePath%2A&gt;</ph> property cannot directly reference a complex type.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For complex types, you must use a path expression where property names are separated by a backslash (<ph id="ph1">`/`</ph>) character.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, the following values are allowed for an entity type <ph id="ph1">`Person`</ph> with an integer property <ph id="ph2">`Age`</ph> and a complex property</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Address`</ph>:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Services.Common.EntityPropertyMappingAttribute.SourcePath%2A&gt;</ph> property cannot be set to a value that contains a space or any other character that is not valid in a property name.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The name of the target element of the resulting feed to map the property.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This element can be an element defined by the Atom specification or a custom element.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following keywords are predefined syndication target-path values that point to specific location in an <ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph> feed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationAuthorEmail:`</ph> The <ph id="ph2">`atom:email`</ph> child element of the <ph id="ph3">`atom:author`</ph> element.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationAuthorName:`</ph> The <ph id="ph2">`atom:name`</ph> child element of the <ph id="ph3">`atom:author`</ph> element.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationAuthorUri:`</ph> The <ph id="ph2">`atom:uri`</ph> child element of the <ph id="ph3">`atom:author`</ph> element.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationContributorEmail:`</ph> The <ph id="ph2">`atom:email`</ph> child element of the <ph id="ph3">`atom:contributor`</ph> element.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationContributorName:`</ph> The <ph id="ph2">`atom:name`</ph> child element of the <ph id="ph3">`atom:contributor`</ph> element.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationContributorUri:`</ph> The <ph id="ph2">`atom:uri`</ph> child element of the <ph id="ph3">`atom:contributor`</ph> element.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationCustomProperty:`</ph> A custom property element.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When mapping to a custom element, the target must be a path expression in which nested elements are separated by a backslash (<ph id="ph1">`/`</ph>) and attributes are specified by an ampersand (<ph id="ph2">`@`</ph>).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the following example, the string <ph id="ph1">`UnitsInStock/@ReorderLevel`</ph> maps a property value to an attribute named <ph id="ph2">`ReorderLevel`</ph> on a child element named <ph id="ph3">`UnitsInStock`</ph> of the root entry element.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When the target is a custom element name, the <ph id="ph1">`FC_NsPrefix`</ph> and <ph id="ph2">`FC_NsUri`</ph> attributes must also be specified.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationPublished:`</ph> The <ph id="ph2">`atom:published`</ph> element.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationRights:`</ph> The <ph id="ph2">`atom:rights`</ph> element.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationSummary:`</ph> The <ph id="ph2">`atom:summary`</ph> element.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationTitle:`</ph> The <ph id="ph2">`atom:title`</ph> element.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyndicationUpdated:`</ph> The <ph id="ph2">`atom:updated`</ph> element.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>These keywords are equivalent to the values of the <ph id="ph1">&lt;xref:System.Data.Services.Common.SyndicationItemProperty&gt;</ph> enumeration used with the reflection provider.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Attribute names and values are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Attributes can be applied either to the <ph id="ph1">`EntityType`</ph> element or to one or more <ph id="ph2">`Property`</ph> elements, but not to both.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Customizing Feeds with the Reflection Provider</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To customize feeds for a data model that was implemented by using the reflection provider, add one or more instances of the <ph id="ph1">&lt;xref:System.Data.Services.Common.EntityPropertyMappingAttribute&gt;</ph> attribute to the classes that represent entity types in the data model.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The properties of the <ph id="ph1">&lt;xref:System.Data.Services.Common.EntityPropertyMappingAttribute&gt;</ph> class correspond to the feed customization attributes that are described in the previous section.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following is an example of the declaration of the <ph id="ph1">`Order`</ph> type, with custom feed mapping defined for both properties.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The data model for this example is defined in the topic <bpt id="p1">[</bpt>How to: Create a Data Service Using the Reflection Provider<ept id="p1">](../../../../docs/framework/data/wcf/create-a-data-service-using-rp-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Astoria Custom Feeds#CustomOrderFeed<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Misc/astoria custom feeds/cs/orderitems.svc.cs#customorderfeed)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Astoria Custom Feeds#CustomOrderFeed<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Misc/astoria custom feeds/vb/orderitems.svc.vb#customorderfeed)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>These attributes produce the following customized data feed for the <ph id="ph1">`Orders`</ph> entity set.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this customized feed, the <ph id="ph1">`OrderId`</ph>property value displays only in the <ph id="ph2">`title`</ph> element of the <ph id="ph3">`entry`</ph> and the <ph id="ph4">`Customer`</ph> property value displays both in the <ph id="ph5">`author`</ph> element and as the <ph id="ph6">`Customer`</ph> property element:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Astoria Custom Feeds#IQueryableFeedResult<ept id="p2">](../../../../samples/snippets/xml/VS_Snippets_Misc/astoria custom feeds/xml/iqueryablefeedresult.xml#iqueryablefeedresult)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Customize Feeds with the Reflection Provider<ept id="p1">](../../../../docs/framework/data/wcf/how-to-customize-feeds-with-the-reflection-provider-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Customizing Feeds with a Custom Data Service Provider</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Feed customization for a data model defined by using a custom data service provider is defined for a resource type by calling the <ph id="ph1">&lt;xref:System.Data.Services.Providers.ResourceType.AddEntityPropertyMappingAttribute%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Data.Services.Providers.ResourceType&gt;</ph> that represents an entity type in the data model.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Custom Data Service Providers<ept id="p1">](../../../../docs/framework/data/wcf/custom-data-service-providers-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Consuming Custom Feeds</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When your application directly consumes an <ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph> feed, it must be able to process any customized elements and attributes in the returned feed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When you have implemented custom feeds in your data model, regardless of the data service provider, the <ph id="ph1">`$metadata`</ph> endpoint returns custom feed information as custom feed attributes in the CSDL returned by the data service.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When you use the <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept> dialog or the <bpt id="p2">[</bpt>datasvcutil.exe<ept id="p2">](../../../../docs/framework/data/wcf/wcf-data-service-client-utility-datasvcutil-exe.md)</ept> tool to generate client data service classes, the customized feed attributes are used to guarantee that requests and responses to the data service are handled correctly.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Feed Customization Considerations</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You should consider the following when defining custom feed mappings.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[ssAstoria](../../../../includes/ssastoria-md.md)]</ph> client treats mapped elements in a feed as empty when they contain only whitespace.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Because of this, mapped elements that contain only whitespace are not materialized on the client with the same whitespace.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>To preserve this whitespace on the client, you must set the value of <ph id="ph1">`KeepInContext`</ph> to <ph id="ph2">`true`</ph> in the feed mapping attribute.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Versioning Requirements</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Feed customization has the following <ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph> protocol versioning requirements:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Feed customization requires that both the client and data service support version 2.0 of the <ph id="ph1">[!INCLUDE[ssODataShort](../../../../includes/ssodatashort-md.md)]</ph> protocol and later versions.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data Service Versioning<ept id="p1">](../../../../docs/framework/data/wcf/data-service-versioning-wcf-data-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection Provider<ept id="p1">](../../../../docs/framework/data/wcf/reflection-provider-wcf-data-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Entity Framework Provider<ept id="p1">](../../../../docs/framework/data/wcf/entity-framework-provider-wcf-data-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>