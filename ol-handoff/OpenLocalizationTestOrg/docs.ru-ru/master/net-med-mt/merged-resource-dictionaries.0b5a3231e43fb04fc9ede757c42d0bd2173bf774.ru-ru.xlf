<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf4394470bfd6200815370bed595f698f09dd8c8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\merged-resource-dictionaries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b83147659dd1386c4e62ba2a3381c2eaceffc86d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8ce6da5c2829fa0917dc53ff715901e21605b83</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Merged Resource Dictionaries | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Merged Resource Dictionaries</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> resources support a merged resource dictionary feature.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This feature provides a way to define the resources portion of a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> application outside of the compiled <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Resources can then be shared across applications and are also more conveniently isolated for localization.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Introducing a Merged Resource Dictionary</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In markup, you use the following syntax to introduce a merged resource dictionary into a page:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ResourceMergeDictionary#MergedXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ResourceMergeDictionary/CS/default.xaml#mergedxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> element does not have an <bpt id="p1">[</bpt>x:Key Directive<ept id="p1">](../../../../docs/framework/xaml-services/x-key-directive.md)</ept>, which is generally required for all items in a resource collection.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>But another <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> reference within the <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph> collection is a special case, reserved for this merged resource dictionary scenario.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> that introduces a merged resource dictionary cannot have an <bpt id="p1">[</bpt>x:Key Directive<ept id="p1">](../../../../docs/framework/xaml-services/x-key-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Typically, each <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> within the <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph> collection specifies a <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary.Source%2A&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary.Source%2A&gt;</ph> should be a <ph id="ph2">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> that resolves to the location of the resources file to be merged.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The destination of that <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> must be another <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file, with <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> as its root element.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It is legal to define resources within a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> that is specified as a merged dictionary, either as an alternative to specifying <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary.Source%2A&gt;</ph>, or in addition to whatever resources are included from the specified source.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, this is not a common scenario; the main scenario for merged dictionaries is to merge resources from external file locations.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you want to specify resources within the markup for a page, you should typically define these in the main <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> and not in the merged dictionaries.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Merged Dictionary Behavior</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Resources in a merged dictionary occupy a location in the resource lookup scope that is just after the scope of the main resource dictionary they are merged into.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Although a resource key must be unique within any individual dictionary, a key can exist multiple times in a set of merged dictionaries.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this case, the resource that is returned will come from the last dictionary found sequentially in the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph> collection was defined in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, then the order of the merged dictionaries in the collection is the order of the elements as provided in the markup.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a key is defined in the primary dictionary and also in a dictionary that was merged, then the resource that is returned will come from the primary dictionary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These scoping rules apply equally for both static resource references and dynamic resource references.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Merged Dictionaries and Code</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Merged dictionaries can be added to a <ph id="ph1">`Resources`</ph> dictionary through code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The default, initially empty <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> that exists for any <ph id="ph2">`Resources`</ph> property also has a default, initially empty <ph id="ph3">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph> collection property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To add a merged dictionary through code, you obtain a reference to the desired primary <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>, get its <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph> property value, and call <ph id="ph3">`Add`</ph> on the generic <ph id="ph4">`Collection`</ph> that is contained in <ph id="ph5">&lt;xref:System.Windows.ResourceDictionary.MergedDictionaries%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The object you add must be a new <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In code, you do not set the <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary.Source%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Instead, you must obtain a <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> object by either creating one or loading one.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>One way to load an existing <ph id="ph1">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> to call <ph id="ph2">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;</ph> on an existing <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file stream that has a <ph id="ph4">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> root, then casting the <ph id="ph5">&lt;xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName&gt;</ph> return value to <ph id="ph6">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Merged Resource Dictionary URIs</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>There are several techniques for how to include a merged resource dictionary, which are indicated by the <ph id="ph1">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> format that you will use.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Broadly speaking, these techniques can be divided into two categories: resources that are compiled as part of the project, and resources that are not compiled as part of the project.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For resources that are compiled as part of the project, you can use a relative path that refers to the resource location.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The relative path is evaluated during compilation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your resource must be defined as part of the project as a Resource build action.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you include a resource .xaml file in the project as Resource, you do not need to copy the resource file to the output directory, the resource is already included within the compiled application.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can also use Content build action, but you must then copy the files to the output directory and also deploy the resource files in the same path relationship to the executable.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Do not use the Embedded Resource build action.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The build action itself is supported for <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications, but the resolution of <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary.Source%2A&gt;</ph> does not incorporate <ph id="ph3">&lt;xref:System.Resources.ResourceManager&gt;</ph>, and thus cannot separate the individual resource out of the stream.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You could still use Embedded Resource for other purposes so long as you also used <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> to access the resources.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A related technique is to use a Pack URI to a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file, and refer to it as Source.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Pack URI enables references to components of referenced assemblies and other techniques.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information on Pack URIs, see <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For resources that are not compiled as part of the project, the URI is evaluated at run time.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can use a common URI transport such as file: or http: to refer to the resource file.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The disadvantage of using the noncompiled resource approach is that file: access requires additional deployment steps, and http: access implies the Internet security zone.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Reusing Merged Dictionaries</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can reuse or share merged resource dictionaries between applications, because the resource dictionary to merge can be referenced through any valid <ph id="ph1">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Exactly how you do this will depend on your application deployment strategy and which application model you follow.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The aforementioned Pack URI strategy provides a way to commonly source a merged resource across multiple projects during development by sharing an assembly reference.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In this scenario the resources are still distributed by the client, and at least one of the applications must deploy the referenced assembly.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It is also possible to reference merged resources through a distributed URI that uses the http protocol.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Writing merged dictionaries as local application files or to local shared storage is another possible merged dictionary / application deployment scenario.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Localization</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If resources that need to be localized are isolated to dictionaries that are merged into primary dictionaries, and kept as loose <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, these files can be localized separately.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This technique is a lightweight alternative to localizing  the satellite resource assemblies.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>WPF Globalization and Localization Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Resources and Code<ept id="p1">](../../../../docs/framework/wpf/advanced/resources-and-code.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>