<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e2be9b74e6c14d1ebe177e6ef53b81ebe24608e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\transactions\implementing-an-explicit-transaction-using-committabletransaction.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3a5195b3216da3159f82ab341828bef72fd9edf7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eeac9c8a6816f2c587fc48b837572edd60cb97c7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementing an Explicit Transaction using CommittableTransaction | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing an Explicit Transaction using CommittableTransaction</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class provides an explicit way for applications to use a transaction, as opposed to using the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class implicitly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is useful for applications that want to use the same transaction across multiple function calls or multiple thread calls.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, the application writer needs to specifically call the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> methods in order to commit or abort the transaction.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overview of the CommittableTransaction class</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class derives from the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class, therefore providing all the functionality of the latter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Specifically useful is the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class that can also be used to rollback a <ph id="ph3">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The  <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> class is similar to the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class but does not offer a <ph id="ph3">`Commit`</ph> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This enables you to pass the transaction object (or clones of it) to other methods (potentially on other threads) while still controlling when the transaction is committed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The called code is able to enlist and vote on the transaction, but only the creator of the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object has the ability to commit the transaction.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You should note the followings when working with the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class,</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Creating a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> transaction does not set the ambient transaction.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You need to specifically set and reset the ambient transaction, to ensure that resource managers operate under the right transaction context when appropriate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The way to set the current ambient transaction is by setting the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property on the global <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object cannot be reused.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Once a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object has been committed or rolled back, it cannot be used again in a transaction.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>That is, it cannot be set as the current ambient transaction context.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creating a CommittableTransaction</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following sample creates a new <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> and commits it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Tx_CommittableTx#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/tx_committabletx/cs/committabletxwithsql.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Tx_CommittableTx#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/tx_committabletx/vb/committabletxwithsql.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creating an instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> does not automatically set the ambient transaction context.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Therefore, any operation on a resource manager is not part of that transaction.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property on the global <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> object is used to set or retrieve the ambient transaction and the application must manually set it to ensure that resource managers can participate in the transaction.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It is also a good practice to save the old ambient transaction and restore it when you finish using the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To commit the transaction, you need to explicitly call the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For rolling back a transaction, you should call the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is important to note that until a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> has been committed or rolled back, all the resources involved in that transaction are still locked.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object can be used across function calls and threads.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, it is up to the application developer to handle exceptions and specifically call the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Rollback%28System.Exception%29&gt;</ph> method in case of failures.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Asynchronous Commit</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class also provides a mechanism for committing a transaction asynchronously.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A transaction commit can take substantial time, as it might involve multiple database access and possible network latency.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you want to avoid deadlocks in high throughput applications, you can use asynchronous commit to finish the transactional work as soon as possible, and run the commit operation as a background task.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class allow you to do so.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> to dispatch the commit holdup to a thread from the thread pool.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also call <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> to determine if the transaction has actually been committed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the transaction failed to commit for whatever reason, <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> raises a transaction exception.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the transaction is not yet committed by the time <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> is called, the caller is blocked until the transaction is committed or aborted.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The easiest way to do an asynchronous commit is by providing a callback method, to be called when committing is finished.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, you must call the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> method on the original <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object used to invoke the call.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To obtain that object, you can downcast the <bpt id="p1">*</bpt>IAsyncResult<ept id="p1">*</ept> parameter of the callback method, since the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class implements <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example shows how an asynchronous commit can be done.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing an Implicit Transaction using Transaction Scope<ept id="p1">](../../../../docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Transaction Processing<ept id="p1">](../../../../docs/framework/data/transactions/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>