<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0651ea5a4a9e7ac79d9a95c468482d2686cf4481</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\programming-pluggable-protocols.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e385762e5963554bce24ac1e8a305a3040637872</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ec99b540bd2f1da61d45872f6af7ca04bfffe58</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Programming Pluggable Protocols | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Programming Pluggable Protocols</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The abstract <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.WebResponse&gt;</ph> classes provide the base for pluggable protocols.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By deriving protocol-specific classes from <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.WebResponse&gt;</ph>, an application can request data from an Internet resource and read the response without specifying the protocol being used.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Before you can create a protocol-specific <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph>, you must register its Create method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use the static <ph id="ph1">&lt;xref:System.Net.WebRequest.RegisterPrefix%28System.String%2CSystem.Net.IWebRequestCreate%29&gt;</ph> method of <ph id="ph2">&lt;xref:System.Net.WebRequest&gt;</ph> to register a <ph id="ph3">&lt;xref:System.Net.WebRequest&gt;</ph> descendant to handle a set of requests to a particular Internet scheme, to a scheme and server, or to a scheme, server, and path.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In most cases you will be able to send and receive data using the methods and properties of the <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, if you need to access protocol-specific properties, you can typecast a <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> to a specific derived-class instance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To take advantage of pluggable protocols, your <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> descendants must provide a default request-and-response transaction that does not require protocol-specific properties to be set.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Net.HttpWebRequest&gt;</ph> class, which implements the <ph id="ph2">&lt;xref:System.Net.WebRequest&gt;</ph> class for HTTP, provides a <ph id="ph3">`GET`</ph> request by default and returns an <ph id="ph4">&lt;xref:System.Net.HttpWebResponse&gt;</ph> that contains the stream returned from the Web server.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deriving from WebRequest<ept id="p1">](../../../docs/framework/network-programming/deriving-from-webrequest.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Deriving from WebResponse<ept id="p1">](../../../docs/framework/network-programming/deriving-from-webresponse.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Network Programming in the .NET Framework<ept id="p1">](../../../docs/framework/network-programming/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Typecast a WebRequest to Access Protocol Specific Properties<ept id="p1">](../../../docs/framework/network-programming/how-to-typecast-a-webrequest-to-access-protocol-specific-properties.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>