<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e0a84e095e8e4cc067d211d93d50e00ff78ca50</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\generating-commands-with-commandbuilders.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7131d9e62a08354f002f3e8e014a9ca9d3a56e9b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6dfbf243db0b9c2d82fe0bb41c86651e19aa73bc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Generating Commands with CommandBuilders | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Generating Commands with CommandBuilders</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`SelectCommand`</ph> property is dynamically specified at run time, such as through a query tool that takes a textual command from the user, you may not be able to specify the appropriate <ph id="ph2">`InsertCommand`</ph>, <ph id="ph3">`UpdateCommand`</ph>, or <ph id="ph4">`DeleteCommand`</ph> at design time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> maps to or is generated from a single database table, you can take advantage of the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> object to automatically generate the <ph id="ph3">`DeleteCommand`</ph>, <ph id="ph4">`InsertCommand`</ph>, and <ph id="ph5">`UpdateCommand`</ph> of the <ph id="ph6">&lt;xref:System.Data.Common.DbDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>As a minimum requirement, you must set the <ph id="ph1">`SelectCommand`</ph> property in order for automatic command generation to work.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The table schema retrieved by the <ph id="ph1">`SelectCommand`</ph> property determines the syntax of the automatically generated INSERT, UPDATE, and DELETE statements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> must execute the <ph id="ph2">`SelectCommand`</ph> in order to return the metadata necessary to construct the INSERT, UPDATE, and DELETE SQL commands.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>As a result, an extra trip to the data source is necessary, and this can hinder performance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To achieve optimal performance, specify your commands explicitly rather than using the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SelectCommand`</ph> must also return at least one primary key or unique column.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If none are present, an <ph id="ph1">`InvalidOperation`</ph> exception is generated, and the commands are not generated.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When associated with a <ph id="ph1">`DataAdapter`</ph>, the <ph id="ph2">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> automatically generates the <ph id="ph3">`InsertCommand`</ph>, <ph id="ph4">`UpdateCommand`</ph>, and <ph id="ph5">`DeleteCommand`</ph> properties of the <ph id="ph6">`DataAdapter`</ph> if they are null references.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Command`</ph> already exists for a property, the existing <ph id="ph2">`Command`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Database views that are created by joining two or more tables together are not considered a single database table.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this instance you cannot use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> to automatically generate commands; you must specify your commands explicitly.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For information about explicitly setting commands to resolve updates to a <ph id="ph1">`DataSet`</ph> back to the data source, see <bpt id="p1">[</bpt>Updating Data Sources with DataAdapters<ept id="p1">](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You might want to map output parameters back to the updated row of a <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One common task would be retrieving the value of an automatically generated identity field or time stamp from the data source.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> will not map output parameters to columns in an updated row by default.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this instance you must specify your command explicitly.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For an example of mapping an automatically generated identity field back to a column of an inserted row, see <bpt id="p1">[</bpt>Retrieving Identity or Autonumber Values<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-identity-or-autonumber-values.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Rules for Automatically Generated Commands</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following table shows the rules for how automatically generated commands are generated.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Command</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Rule</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Inserts a row at the data source for all rows in the table with a <ph id="ph1">&lt;xref:System.Data.DataRow.RowState%2A&gt;</ph> of <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Inserts values for all columns that are updateable (but not columns such as identities, expressions, or timestamps).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Updates rows at the data source for all rows in the table with a <ph id="ph1">`RowState`</ph> of <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Updates the values of all columns except for columns that are not updateable, such as identities or expressions.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Updates all rows where the column values at the data source match the primary key column values of the row, and where the remaining columns at the data source match the original values of the row.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see "Optimistic Concurrency Model for Updates and Deletes," later in this topic.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Deletes rows at the data source for all rows in the table with a <ph id="ph1">`RowState`</ph> of <ph id="ph2">&lt;xref:System.Data.DataRowState&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Deletes all rows where the column values match the primary key column values of the row, and where the remaining columns at the data source match the original values of the row.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see "Optimistic Concurrency Model for Updates and Deletes," later in this topic.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Optimistic Concurrency Model for Updates and Deletes</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The logic for generating commands automatically for UPDATE and DELETE statements is based on <bpt id="p1">*</bpt>optimistic concurrency<ept id="p1">*</ept>--that is, records are not locked for editing and can be modified by other users or processes at any time.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because a record could have been modified after it was returned from the SELECT statement, but before the UPDATE or DELETE statement is issued, the automatically generated UPDATE or DELETE statement contains a WHERE clause, specifying that a row is only updated if it contains all original values and has not been deleted from the data source.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is done to avoid overwriting new data.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Where an automatically generated update attempts to update a row that has been deleted or that does not contain the original values found in the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph>, the command does not affect any records, and a <ph id="ph2">&lt;xref:System.Data.DBConcurrencyException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you want the UPDATE or DELETE to complete regardless of original values, you must explicitly set the <ph id="ph1">`UpdateCommand`</ph> for the <ph id="ph2">`DataAdapter`</ph> and not rely on automatic command generation.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Limitations of Automatic Command Generation Logic</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following limitations apply to automatic command generation.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Unrelated Tables Only</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The automatic command generation logic generates INSERT, UPDATE, or DELETE statements for stand-alone tables without taking into account any relationships to other tables at the data source.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As a result, you may encounter a failure when calling <ph id="ph1">`Update`</ph> to submit changes for a column that participates in a foreign key constraint in the database.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To avoid this exception, do not use the <ph id="ph1">&lt;xref:System.Data.Common.DbCommandBuilder&gt;</ph> for updating columns involved in a foreign key constraint; instead, explicitly specify the statements used to perform the operation.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Table and Column Names</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Automatic command generation logic may fail if column names or table names contain any special characters, such as spaces, periods, quotation marks, or other nonalphanumeric characters, even if delimited by brackets.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Depending on the provider, setting the QuotePrefix and QuoteSuffix parameters may allow the generation logic to process spaces, but it cannot escape special characters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Fully qualified table names in the form of <bpt id="p1">*</bpt>catalog.schema.table<ept id="p1">*</ept> are supported.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Using the CommandBuilder to Automatically Generate an SQL Statement</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To automatically generate SQL statements for a <ph id="ph1">`DataAdapter`</ph>, first set the <ph id="ph2">`SelectCommand`</ph> property of the <ph id="ph3">`DataAdapter`</ph>, then create a <ph id="ph4">`CommandBuilder`</ph> object, and specify as an argument the <ph id="ph5">`DataAdapter`</ph> for which the <ph id="ph6">`CommandBuilder`</ph> will automatically generate SQL statements.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Modifying the SelectCommand</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you modify the <ph id="ph1">`CommandText`</ph> of the <ph id="ph2">`SelectCommand`</ph> after the INSERT, UPDATE, or DELETE commands have been automatically generated, an exception may occur.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the modified <ph id="ph1">`SelectCommand.CommandText`</ph> contains schema information that is inconsistent with the <ph id="ph2">`SelectCommand.CommandText`</ph> used when the insert, update, or delete commands were automatically generated, future calls to the <ph id="ph3">`DataAdapter.Update`</ph> method may attempt to access columns that no longer exist in the current table referenced by the <ph id="ph4">`SelectCommand`</ph>, and an exception will be thrown.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can refresh the schema information used by the <ph id="ph1">`CommandBuilder`</ph> to automatically generate commands by calling the <ph id="ph2">`RefreshSchema`</ph> method of the <ph id="ph3">`CommandBuilder`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you want to know what command was automatically generated, you can obtain a reference to the automatically generated commands by using the <ph id="ph1">`GetInsertCommand`</ph>, <ph id="ph2">`GetUpdateCommand`</ph>, and <ph id="ph3">`GetDeleteCommand`</ph> methods of the <ph id="ph4">`CommandBuilder`</ph> object and checking the <ph id="ph5">`CommandText`</ph> property of the associated command.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code example writes to the console the update command that was automatically generated.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example recreates the <ph id="ph1">`Customers`</ph> table in the <ph id="ph2">`custDS`</ph> dataset.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RefreshSchema<ept id="p1">**</ept> method is called to refresh the automatically generated commands with this new column information.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commands and Parameters<ept id="p1">](../../../../docs/framework/data/adonet/commands-and-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Executing a Command<ept id="p1">](../../../../docs/framework/data/adonet/executing-a-command.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DbConnection, DbCommand and DbException<ept id="p1">](../../../../docs/framework/data/adonet/dbconnection-dbcommand-and-dbexception.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>