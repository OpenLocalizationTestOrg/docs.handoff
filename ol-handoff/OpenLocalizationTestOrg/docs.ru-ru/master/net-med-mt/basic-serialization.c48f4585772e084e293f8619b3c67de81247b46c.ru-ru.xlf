<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5fe8d6f3f8c6419149ede418fa65ae237b948a82</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\basic-serialization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d25f8212cb72f15036ad411e93fca41bf7a0ef3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb0806eae52dae37ad0958100a2ada29af0d0df6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Basic Serialization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Basic Serialization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The easiest way to make a class serializable is to mark it with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> as follows.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The code example below shows how an instance of this class can be serialized to a file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example uses a binary formatter to do the serialization.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All you need to do is create an instance of the stream and the formatter you intend to use, and then call the <bpt id="p1">**</bpt>Serialize<ept id="p1">**</ept> method on the formatter.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The stream and the object to serialize are provided as parameters to this call.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Although it is not explicitly demonstrated in this example, all member variables of a class will be serializedâ€”even variables marked as private.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this aspect, binary serialization differs from the <bpt id="p1">[</bpt>XMLSerializer Class<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept>, which only serializes public fields.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For information on excluding member variables from binary serialization, see <bpt id="p1">[</bpt>Selective Serialization<ept id="p1">](../../../docs/framework/serialization/selective-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Restoring the object back to its former state is just as easy.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>First, create a stream for reading and a <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatter&gt;</ph>, and then instruct the formatter to deserialize the object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The code example below shows how this is done.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph> used above is very efficient and produces a compact byte stream.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All objects serialized with this formatter can also be deserialized with it, which makes it an ideal tool for serializing objects that will be deserialized on the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It is important to note that constructors are not called when an object is deserialized.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This constraint is placed on deserialization for performance reasons.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, this violates some of the usual contracts the runtime makes with the object writer, and developers should ensure that they understand the ramifications when marking an object as serializable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If portability is a requirement, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Simply replace the <bpt id="p1">**</bpt>BinaryFormatter<ept id="p1">**</ept> in the code above with <bpt id="p2">**</bpt>SoapFormatter,<ept id="p2">**</ept> and call <bpt id="p3">**</bpt>Serialize<ept id="p3">**</ept> and <bpt id="p4">**</bpt>Deserialize<ept id="p4">**</ept> as before.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This formatter produces the following output for the example used above.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It is important to note that the <bpt id="p1">**</bpt>Serializable<ept id="p1">**</ept> attribute cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you derive a new class from <ph id="ph1">`MyObject`</ph>, the new class must be marked with the attribute as well, or it cannot be serialized.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, when you attempt to serialize an instance of the class below, you will get a <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> informing you that the <ph id="ph2">`MyStuff`</ph> type is not marked as serializable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>Serializable<ept id="p1">**</ept> attribute is convenient, but it has limitations as demonstrated above.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Refer to the <bpt id="p1">[</bpt>Serialization Guidelines<ept id="p1">](../../../docs/framework/serialization/serialization-guidelines.md)</ept> for information about when you should mark a class for serialization; serialization cannot be added to a class after it has been compiled.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binary Serialization<ept id="p1">](../../../docs/framework/serialization/binary-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>