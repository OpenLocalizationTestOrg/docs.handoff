<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="freezable-objects-overview.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c24a3f88c4e4c8ff7d9e4a449e6bbe99ede0aadf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\freezable-objects-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32580f96fb520d8c0a7e301ada4bac8134072e15</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">514490987fcb210b1fdf4f3410b90fea0d16771c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Freezable Objects Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Freezable Objects Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to effectively use and create <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> objects, which provide special features that can help improve application performance.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Examples of freezable objects include brushes, pens, transformations, geometries, and animations.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic contains the following sections:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What Is a Freezable?</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> is a special type of object that has two states: unfrozen and frozen.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When unfrozen, a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> appears to behave like any other object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When frozen, a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> can no longer be modified.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> provides a <ph id="ph2">&lt;xref:System.Windows.Freezable.Changed&gt;</ph> event to notify observers of any modifications to the object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Freezing a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> can improve its performance, because it no longer needs to spend resources on change notifications.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A frozen <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> can also be shared across threads, while an unfrozen <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> cannot.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> class has many applications, most <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> objects in <ph id="ph3">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> are related to the graphics sub-system.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> class makes it easier to use certain graphics system objects and can help improve application performance.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Examples of types that inherit from <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> include the <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.Transform&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.Geometry&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because they contain unmanaged resources, the system must monitor these objects for modifications, and then update their corresponding unmanaged resources when there is a change to the original object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Even if you don't actually modify a graphics system object, the system must still spend some of its resources monitoring the object, in case you do change it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, suppose you create a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> brush and use it to paint the background of a button.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the button is rendered, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> graphics sub-system uses the information you provided to paint a group of pixels to create the appearance of a button.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Although you used a solid color brush to describe how the button should be painted, your solid color brush doesn't actually do the painting.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The graphics system generates fast, low-level objects for the button and the brush, and it is those objects that actually appear on the screen.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you were to modify the brush, those low-level objects would have to be regenerated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The freezable class is what gives a brush the ability to find its corresponding generated, low-level objects and to update them when it changes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When this ability is enabled, the brush is said to be "unfrozen."</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A freezable's <ph id="ph1">&lt;xref:System.Windows.Freezable.Freeze%2A&gt;</ph> method enables you to disable this self-updating ability.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use this method to make the brush become "frozen," or unmodifiable.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Not every Freezable object can be frozen.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To avoid throwing an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, check the value of the Freezable object's <ph id="ph2">&lt;xref:System.Windows.Freezable.CanFreeze%2A&gt;</ph> property to determine whether it can be frozen before attempting to freeze it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you no longer need to modify a freezable, freezing it provides performance benefits.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you were to freeze the brush in this example, the graphics system would no longer need to monitor it for changes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The graphics system can also make other optimizations, because it knows the brush won't change.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For convenience, freezable objects remain unfrozen unless you explicitly freeze them.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using Freezables</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Using an unfrozen freezable is like using any other type of object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following example, the color of a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> is changed from yellow to red after it's used to paint the background of a button.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The graphics system works behind the scenes to automatically change the button from yellow to red the next time the screen is refreshed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Freezing a Freezable</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To make a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> unmodifiable, you call its <ph id="ph2">&lt;xref:System.Windows.Freezable.Freeze%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you freeze an object that contains freezable objects, those objects are frozen as well.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, if you freeze a <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>, the figures and segments it contains would be frozen too.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A Freezable <bpt id="p1">**</bpt>can't<ept id="p1">**</ept> be frozen if any of the following are true:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It has animated or data bound properties.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It has properties set by a dynamic resource.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(See the <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept> for more information about dynamic resources.)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It contains <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> sub-objects that can't be frozen.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If these conditions are false, and you don't intend to modify the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph>, then you should freeze it to gain the performance benefits described earlier.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Once you call a freezable's <ph id="ph1">&lt;xref:System.Windows.Freezable.Freeze%2A&gt;</ph> method, it can no longer be modified.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Attempting to modify a frozen object causes an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> to be thrown.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following code throws an exception, because we attempt to modify the brush after it's been frozen.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To avoid throwing this exception, you can use the <ph id="ph1">&lt;xref:System.Windows.Freezable.IsFrozen%2A&gt;</ph> method to determine whether a <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> is frozen.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the preceding code example, a modifiable copy was made of a frozen object using the <ph id="ph1">&lt;xref:System.Windows.Freezable.Clone%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The next section discusses cloning in more detail.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> Because a frozen freezable cannot be animated, the animation system will automatically create modifiable clones of frozen <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> objects when you try to animate them with a <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To eliminate the performance overhead caused by cloning, leave an object unfrozen if you intend to animate it.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information about animating with storyboards, see the <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Freezing from Markup</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To freeze a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> object declared in markup, you use the <ph id="ph2">`PresentationOptions:Freeze`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> is declared as a page resource and frozen.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It is then used to set the background of a button.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">`Freeze`</ph> attribute, you must map to the presentation options namespace: <ph id="ph2">`http://schemas.microsoft.com/winfx/2006/xaml/presentation/options`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PresentationOptions`</ph> is the recommended prefix for mapping this namespace:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because not all XAML readers recognize this attribute, it's recommended that you use the <bpt id="p1">[</bpt>mc:Ignorable Attribute<ept id="p1">](../../../../docs/framework/wpf/advanced/mc-ignorable-attribute.md)</ept> to mark the <ph id="ph1">`Presentation:Freeze`</ph> attribute as ignorable:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>mc:Ignorable Attribute<ept id="p1">](../../../../docs/framework/wpf/advanced/mc-ignorable-attribute.md)</ept> page.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>"Unfreezing" a Freezable</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Once frozen, a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> can never be modified or unfrozen; however, you can create an unfrozen clone using the <ph id="ph2">&lt;xref:System.Windows.Freezable.Clone%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Freezable.CloneCurrentValue%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the following example, the button's background is set with a brush and that brush is then frozen.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An unfrozen copy is made of the brush using the <ph id="ph1">&lt;xref:System.Windows.Freezable.Clone%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The clone is modified and used to change the button's background from yellow to red.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Regardless of which clone method you use, animations are never copied to the new <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Freezable.Clone%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Freezable.CloneCurrentValue%2A&gt;</ph> methods produce deep copies of the freezable.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the freezable contains other frozen freezable objects, they are also cloned and made modifiable.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, if you clone a frozen <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> to make it modifiable, the figures and segments it contains are also copied and made modifiable.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Creating Your Own Freezable Class</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A class that derives from <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> gains the following features.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Special states: a read-only (frozen) and a writable state.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Thread safety: a frozen <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> can be shared across threads.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Detailed change notification: Unlike other <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>s, Freezable objects provide change notifications when sub-property values change.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Easy cloning: the Freezable class has already implemented several methods that produce deep clones.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> is a type of <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>, and therefore uses the dependency property system.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Your class properties don't have to be dependency properties, but using dependency properties will reduce the amount of code you have to write, because the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> class was designed with dependency properties in mind.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information about the dependency property system, see the <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Every <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> subclass must override the <ph id="ph2">&lt;xref:System.Windows.Freezable.CreateInstanceCore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If your class uses dependency properties for all its data, you're finished.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If your class contains non-dependency property data members, you must also override the following methods:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You must also observe the following rules for accessing and writing to data members that are not dependency properties:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>At the beginning of any <ph id="ph1">[!INCLUDE[TLA#tla_api](../../../../includes/tlasharptla-api-md.md)]</ph> that reads non-dependency property data members, call the <ph id="ph2">&lt;xref:System.Windows.Freezable.ReadPreamble%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>At the beginning of any API that writes non-dependency property data members, call the <ph id="ph1">&lt;xref:System.Windows.Freezable.WritePreamble%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>(Once you've called <ph id="ph1">&lt;xref:System.Windows.Freezable.WritePreamble%2A&gt;</ph> in an <ph id="ph2">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph>, you don't need to make an additional call to <ph id="ph3">&lt;xref:System.Windows.Freezable.ReadPreamble%2A&gt;</ph> if you also read non-dependency property data members.)</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Freezable.WritePostscript%2A&gt;</ph> method before exiting methods that write to non-dependency property data members.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If your class contains non-dependency-property data members that are <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> objects, you must also call the <ph id="ph2">&lt;xref:System.Windows.Freezable.OnFreezablePropertyChanged%2A&gt;</ph> method each time you change on of their values, even if you're setting the member to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It's very important that you begin each <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> method you override with a call to the base implementation.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For an example of a custom <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> class, see the <bpt id="p1">[</bpt>Custom Animation Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159981)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Animation Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159981)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](../../../../docs/framework/wpf/advanced/custom-dependency-properties.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>