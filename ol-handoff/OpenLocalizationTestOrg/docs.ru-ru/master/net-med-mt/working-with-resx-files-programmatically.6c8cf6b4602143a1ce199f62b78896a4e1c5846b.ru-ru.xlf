<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c74a79b06503e105dd9ba47cc8079019e038b11f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\resources\working-with-resx-files-programmatically.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6e2257154b6fb52396a2f1e647181e5faa726fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b9a9a063585361652c47fc09947a82394be3f03</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with .resx Files Programmatically | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Working with .resx Files Programmatically</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Because XML resource (.resx) files must consist of well-defined XML, including a header that must follow a specific schema followed by data in name/value pairs, you may find that creating these files manually is error-prone.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As an alternative, you can create .resx files programmatically by using types and members in the .NET Framework Class Library.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also use the .NET Framework Class Library to retrieve resources that are stored in .resx files.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains how you can use the types and members in the <ph id="ph1">&lt;xref:System.Resources&gt;</ph> namespace to work with .resx files.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Note that this article discusses working with XML (.resx) files that contain resources.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For information on working with binary resource files that have been embedded in assemblies, see the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> topic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are also ways to work with .resx files other than programmatically.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you add a resource file to a Visual Studio project, Visual Studio provides an interface for creating and maintaining a .resx file, and automatically converts the .resx file to a .resources file at compile time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can also use a text editor to manipulate a .resx file directly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, to avoid corrupting the file, be careful not to modify any binary information that is stored in the file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Creating a .resx File</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter?displayProperty=fullName&gt;</ph> class to create a .resx file programmatically, by following these steps:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Instantiate a <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.%23ctor%28System.String%29?displayProperty=fullName&gt;</ph> method and supplying the name of the .resx file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The file name must include the .resx extension.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you instantiate the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> object in a <ph id="ph2">`using`</ph> block, you do not explicitly have to call the <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter.Close%2A?displayProperty=fullName&gt;</ph> method in step 3.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.AddResource%2A?displayProperty=fullName&gt;</ph> method for each resource you want to add to the file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use the overloads of this method to add string, object, and binary (byte array) data.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the resource is an object, it must be serializable.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter.Close%2A?displayProperty=fullName&gt;</ph> method to generate the resource file and to release all resources.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> object was created within a <ph id="ph2">`using`</ph> block, resources are written to the .resx file and the resources used by the <ph id="ph3">&lt;xref:System.Resources.ResXResourceWriter&gt;</ph> object are released at the end of the <ph id="ph4">`using`</ph> block.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The resulting .resx file has the appropriate header and a <ph id="ph1">`data`</ph> tag for each resource added by the <ph id="ph2">&lt;xref:System.Resources.ResXResourceWriter.AddResource%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Do not use resource files to store passwords, security-sensitive information, or private data.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example creates a .resx file named CarResources.resx that stores six strings, an icon, and two application-defined objects (two <ph id="ph1">`Automobile`</ph> objects).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`Automobile`</ph> class, which is defined and instantiated in the example, is tagged with the <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.ResX#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.resx/cs/create1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.ResX#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.resx/vb/create1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can also use Visual Studio to create .resx files.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>At compile time, Visual Studio uses the <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to convert the .resx file to a binary resource (.resources) file, and also embeds it in either an application assembly or a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You cannot embed a .resx file in a runtime executable or compile it into a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You must convert your .resx file into a binary resource (.resources) file by using the <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The resulting .resources file can then be embedded in an application assembly or a satellite assembly.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Enumerating Resources</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to retrieve all resources, instead of a specific resource, from a .resx file.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To do this, you can use the <ph id="ph1">&lt;xref:System.Resources.ResXResourceReader?displayProperty=fullName&gt;</ph> class, which provides an enumerator for all resources in the .resx file.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceReader?displayProperty=fullName&gt;</ph> class implements <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph>, which returns a <ph id="ph3">&lt;xref:System.Collections.DictionaryEntry&gt;</ph> object that represents a particular resource for each iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Its <ph id="ph1">&lt;xref:System.Collections.DictionaryEntry.Key%2A?displayProperty=fullName&gt;</ph> property returns the resource's key, and its <ph id="ph2">&lt;xref:System.Collections.DictionaryEntry.Value%2A?displayProperty=fullName&gt;</ph> property returns the resource's value.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Resources.ResXResourceReader&gt;</ph> object for the CarResources.resx file created in the previous example and iterates through the resource file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It adds the two <ph id="ph1">`Automobile`</ph> objects that are defined in the resource file to a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph> object, and it adds five of the six strings to a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The values in the <ph id="ph1">&lt;xref:System.Collections.SortedList&gt;</ph> object are converted to a parameter array, which is used to display column headings to the console.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Automobile`</ph> property values are also displayed to the console.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.ResX#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.resx/cs/enumerate1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.ResX#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.resx/vb/enumerate1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Retrieving a Specific Resource</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In addition to enumerating the items in a .resx file, you can retrieve a specific resource by name by using the <ph id="ph1">&lt;xref:System.Resources.ResXResourceSet?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetString%28System.String%29?displayProperty=fullName&gt;</ph> method retrieves the value of a named string resource.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceSet.GetObject%28System.String%29?displayProperty=fullName&gt;</ph> method retrieves the value of a named object or binary data.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The method returns an object that must then be cast (in C#) or converted (in Visual Basic) to an object of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example retrieves a form's caption string and icon by their resource names.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It also retrieves the application-defined <ph id="ph1">`Automobile`</ph> objects used in the previous example and displays them in a <ph id="ph2">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Resources.ResX#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.resx/cs/retrieve1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Resources.ResX#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.resx/vb/retrieve1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Converting .resx Files to Binary .resources Files</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Converting .resx files to embedded binary resource (.resources) files has significant advantages.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Although .resx files are easy to read and maintain during application development, they are rarely included with finished applications.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If they are distributed with an application, they exist as separate files apart from the application executable and its accompanying libraries.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In contrast, .resources files are embedded in the application executable or its accompanying assemblies.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In addition, for localized applications, relying on .resx files at run time places the responsibility for handling resource fallback on the developer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In contrast, if a set of satellite assemblies that contain embedded .resources files has been created, the common language runtime handles the resource fallback process.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To convert a .resx file to a .resources file, you use the <bpt id="p1">[</bpt>Resource File Generator (Resgen.exe)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>, which has the following basic syntax:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resgen.exe<ept id="p1">**</ept> <bpt id="p2">*</bpt>.resxFilename<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The result is a binary resource file that has the same root file name as the .resx file and a .resources file extension.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This file can then be compiled into an executable or a library at compile time.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you are using the Visual Basic compiler, use the following syntax to embed a .resources file in an application's executable:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc<ept id="p1">**</ept> <bpt id="p2">*</bpt>filename<ept id="p2">*</ept> <bpt id="p3">**</bpt>.vb /resource:<ept id="p3">**</ept> <bpt id="p4">*</bpt>.resourcesFilename<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If you are using C#, the syntax is as follows:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc<ept id="p1">**</ept> <bpt id="p2">*</bpt>filename<ept id="p2">*</ept> <bpt id="p3">**</bpt>.cs /resource:<ept id="p3">**</ept> <bpt id="p4">*</bpt>.resourcesFilename<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The .resources file can also be embedded in a satellite assembly by using <bpt id="p1">[</bpt>Assembly Linker (AL.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept>, which has the following basic syntax:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>al<ept id="p1">**</ept> <bpt id="p2">*</bpt>resourcesFilename<ept id="p2">*</ept> <bpt id="p3">**</bpt>/out:<ept id="p3">**</ept> <bpt id="p4">*</bpt>assemblyFilename<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Al.exe (Assembly Linker)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>