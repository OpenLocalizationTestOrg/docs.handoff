<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e90f12bf29691ba9cb4442e62fc00919d8636d4f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\advanced\pens-lines-and-rectangles-in-gdi.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf0eb2b853ae6af63824e15be87ff38af00ed675</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06ea767efd8121e769cc63548ef68b6a46374907</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pens, Lines, and Rectangles in GDI+ | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pens, Lines, and Rectangles in GDI+</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To draw lines with <ph id="ph1">[!INCLUDE[ndptecgdiplus](../../../../includes/ndptecgdiplus-md.md)]</ph> you need to create a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object and a <ph id="ph3">&lt;xref:System.Drawing.Pen&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object provides the methods that actually do the drawing, and the <ph id="ph2">&lt;xref:System.Drawing.Pen&gt;</ph> object stores attributes, such as line color, width, and style.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Drawing a Line</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To draw a line, call the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Pen&gt;</ph> object is passed as one of the arguments to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example draws a line from the point (4, 2) to the point (12, 6):</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LinesCurvesAndShapes#41<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/LinesCurvesAndShapes/CS/Class1.cs#41)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>LinesCurvesAndShapes#41<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/LinesCurvesAndShapes/VB/Class1.vb#41)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph> is an overloaded method of the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> class, so there are several ways you can supply it with arguments.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, you can construct two <ph id="ph1">&lt;xref:System.Drawing.Point&gt;</ph> objects and pass the <ph id="ph2">&lt;xref:System.Drawing.Point&gt;</ph> objects as arguments to the <ph id="ph3">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LinesCurvesAndShapes#42<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/LinesCurvesAndShapes/CS/Class1.cs#42)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>LinesCurvesAndShapes#42<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/LinesCurvesAndShapes/VB/Class1.vb#42)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Constructing a Pen</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can specify certain attributes when you construct a <ph id="ph1">&lt;xref:System.Drawing.Pen&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, one <ph id="ph1">`Pen`</ph> constructor allows you to specify color and width.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example draws a blue line of width 2 from (0, 0) to (60, 30):</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LinesCurvesAndShapes#43<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/LinesCurvesAndShapes/CS/Class1.cs#43)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>LinesCurvesAndShapes#43<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/LinesCurvesAndShapes/VB/Class1.vb#43)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Dashed Lines and Line Caps</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Pen&gt;</ph> object also exposes properties, such as <ph id="ph2">&lt;xref:System.Drawing.Pen.DashStyle%2A&gt;</ph>, that you can use to specify features of the line.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example draws a dashed line from (100, 50) to (300, 80):</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LinesCurvesAndShapes#44<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/LinesCurvesAndShapes/CS/Class1.cs#44)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>LinesCurvesAndShapes#44<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/LinesCurvesAndShapes/VB/Class1.vb#44)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can use the properties of the <ph id="ph1">&lt;xref:System.Drawing.Pen&gt;</ph> object to set many more attributes of the line.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Pen.StartCap%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Pen.EndCap%2A&gt;</ph> properties specify the appearance of the ends of the line; the ends can be flat, square, rounded, triangular, or a custom shape.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Pen.LineJoin%2A&gt;</ph> property lets you specify whether connected lines are mitered (joined with sharp corners), beveled, rounded, or clipped.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following illustration shows lines with various cap and join styles.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Lines<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/winforms/advanced/media/aboutgdip02-art04.gif "</bpt>Aboutgdip02_art04<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Drawing a Rectangle</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Drawing rectangles with <ph id="ph1">[!INCLUDE[ndptecgdiplus](../../../../includes/ndptecgdiplus-md.md)]</ph> is similar to drawing lines.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To draw a rectangle, you need a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object and a <ph id="ph2">&lt;xref:System.Drawing.Pen&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object provides a <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;</ph> method, and the <ph id="ph3">&lt;xref:System.Drawing.Pen&gt;</ph> object stores attributes, such as line width and color.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Pen&gt;</ph> object is passed as one of the arguments to the <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example draws a rectangle with its upper-left corner at (100, 50), a width of 80, and a height of 40:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LinesCurvesAndShapes#45<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/LinesCurvesAndShapes/CS/Class1.cs#45)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>LinesCurvesAndShapes#45<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/LinesCurvesAndShapes/VB/Class1.vb#45)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;</ph> is an overloaded method of the <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> class, so there are several ways you can supply it with arguments.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, you can construct a <ph id="ph1">&lt;xref:System.Drawing.Rectangle&gt;</ph> object and pass the <ph id="ph2">&lt;xref:System.Drawing.Rectangle&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;</ph> method as an argument:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LinesCurvesAndShapes#46<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/LinesCurvesAndShapes/CS/Class1.cs#46)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>LinesCurvesAndShapes#46<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/LinesCurvesAndShapes/VB/Class1.vb#46)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Drawing.Rectangle&gt;</ph> object has methods and properties for manipulating and gathering information about the rectangle.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Drawing.Rectangle.Inflate%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Drawing.Rectangle.Offset%2A&gt;</ph> methods change the size and position of the rectangle.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Drawing.Rectangle.IntersectsWith%2A&gt;</ph> method tells you whether the rectangle intersects another given rectangle, and the <ph id="ph2">&lt;xref:System.Drawing.Rectangle.Contains%2A&gt;</ph> method tells you whether a given point is inside the rectangle.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Drawing.Graphics?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Drawing.Pen?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Drawing.Rectangle?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Pen<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-create-a-pen.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Draw a Line on a Windows Form<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-draw-a-line-on-a-windows-form.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Draw an Outlined Shape<ept id="p1">](../../../../docs/framework/winforms/advanced/how-to-draw-an-outlined-shape.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>