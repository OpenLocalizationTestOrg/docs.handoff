<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f608f78f9031080ec6da7db4e7243ee6c7c7cfa1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\order-processing-with-policy.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cde1b6da06142bc3f85ff76117a7800b9a8a371d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45ec512e7442f1510864cc7c3bcc830698415ee0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Order Processing with Policy | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Order Processing with Policy</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Order Processing Policy sample demonstrates some of the key features introduced in the <ph id="ph1">[!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)]</ph> of the Windows Workflow Foundation (WF).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following functionality is new for the WF rules engine:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Support for operator overloading.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Support for the <ph id="ph1">`new`</ph> operator, allowing users to create new objects and arrays from WF rules.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Support for extension methods to make the user experience in calling extension methods from WF rules compatible with C# coding styles.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This sample requires that <ph id="ph1">[!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)]</ph> is installed to build and run.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> is required to open the project and solution files.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The sample demonstrates an <ph id="ph1">`OrderProcessingPolicy`</ph> project in which a customer order, which consists of a numbered list of available items and a zip code, is entered.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The order is processed successfully if both entries are correct; otherwise, the policy creates error objects, utilizing an overloaded <ph id="ph1">`+`</ph> operator and a predefined extension method to inform the user of the errors.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> [!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> extension methods, see <bpt id="p1">[</bpt>C# Version 3.0 Specification<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=95402)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The sample is comprised of the following projects:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OrderErrorLibrary`</ph> is a class library that defines <ph id="ph2">`OrderError`</ph> and <ph id="ph3">`OrderErrorCollection`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`OrderError`</ph> instance is created when an invalid input is entered.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The library also provides an extension method on the <ph id="ph1">`OrderErrorCollection`</ph> class that outputs the <ph id="ph2">`ErrorText`</ph> property on all <ph id="ph3">`OrderError`</ph> objects in the <ph id="ph4">`OrderErrorCollection`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OrderProcessingPolicy`</ph> project is a WF console application that defines a single <ph id="ph2">`PolicyFromFile`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The activity has the following rules:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This rule validates that the item number is between 1 and 6, inclusive.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the item number is within the valid range, the rule does nothing (other than printing to the console).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the item number is not between 1 and 6, the <ph id="ph1">`invalidItemNum`</ph> rule does the following:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creates a new <ph id="ph1">`OrderError`</ph> object, passing it the item number entered, and sets the <ph id="ph2">`ErrorText`</ph> and <ph id="ph3">`CustomerName`</ph> properties on the object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">`invalidItemNumErrorCollection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Adds the newly-created <ph id="ph1">`OrderError`</ph> instance to the <ph id="ph2">`invalidItemNumErrorCollection`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This demonstrates support for the <ph id="ph1">`new`</ph> operator, with which you can instantiate objects inside rules.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This rule validates that the zip code has 5 digits, and is within the range 600 to 99998.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the zip code is within the valid range, the rule does nothing (other than printing to the console).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the length of the zip code is less than 5, or the zip code is not between 00600 and 99998, the <ph id="ph1">`invalidZip`</ph> rule does the following:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">`OrderError`</ph> object, passing it the zip code entered, and sets the <ph id="ph2">`ErrorText`</ph> and <ph id="ph3">`CustomerName`</ph> properties on the object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">`invalidZipCodeErrorCollection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Adds the newly-created <ph id="ph1">`OrderError`</ph> instance to the newly-created <ph id="ph2">`invalidZipCodeErrorCollection`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This rule again demonstrates support for the <ph id="ph1">`new`</ph> operator, which allows you to instantiate objects inside rules.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This rule checks to see if there were any errors added by the previous two rules in the two <ph id="ph1">`OrderErrorCollection`</ph> objects <ph id="ph2">`invalidItemNumErrorCollection`</ph> and <ph id="ph3">`invalidIZipCodeErrorCollection`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If there were errors (either <ph id="ph1">`invalidItemNumErrorCollection`</ph> or <ph id="ph2">`invalidZipCodeErrorCollection`</ph> is not <ph id="ph3">`null`</ph>), the rule does the following:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Calls the overloaded <ph id="ph1">`+`</ph> operator to copy the contents of <ph id="ph2">`invalidItemNumErrorCollection`</ph> and <ph id="ph3">`invalidZipCodeErrorCollection`</ph> to an <ph id="ph4">`invalidOrdersCollection``OrderErrorCollection`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Calls the <ph id="ph1">`PrintOrderErrors`</ph> extension method on <ph id="ph2">`invalidOrdersCollection`</ph> and outputs the <ph id="ph3">`ErrorText`</ph> property on all <ph id="ph4">`orderError`</ph> objects in <ph id="ph5">`invalidOrdersCollection`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The overloaded operator <ph id="ph1">`+`</ph> on the <ph id="ph2">`OrderErrorCollection`</ph> is defined in the <ph id="ph3">`OrderErrorCollection`</ph> class, in the <ph id="ph4">`OrderErrorLibrary`</ph> project.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It takes two <ph id="ph1">`OrderErrorCollection`</ph> objects and combines them into one <ph id="ph2">`OrderErrorCollection`</ph> object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`PrintOrderErrors`</ph> extension method is also defined in the <ph id="ph2">`OrderErrorLibrary`</ph> project.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Extension methods are a new C# feature that enables developers to add new methods to the public contract of an existing CLR type, without having to derive a class from it or recompile the original type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you run the sample you are prompted to enter a name, the item number of the item to be purchased, and a zip code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This information is then verified by the rules defined in the policy activity.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following is sample output from the program.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Open the OrderProcessingPolicy.sln project file in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There are two different projects in the solution: <ph id="ph1">`OrderErrorLibrary`</ph> and <ph id="ph2">`OrderProcessingPolicy`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OrderProcessingPolicy`</ph> project uses classes and methods defined in the <ph id="ph2">`OrderErrorLibrary`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Build all projects.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Run<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your computer.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>