<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17a31b250118d95d8c61e73bcd883ff22db5ebd9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\making-an-image-easier-to-debug.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7fe0bd7abab78274cea402303ad37d3f9511ddd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e53956dd43ea50d6300b5da0e2348a29de111c3a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Making an Image Easier to Debug | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Making an Image Easier to Debug</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When compiling unmanaged code, you can configure an executable image for debugging by setting IDE switches or command-line options.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you can use the /<bpt id="p1">**</bpt>Zi<ept id="p1">**</ept> command-line option in Visual C++ to ask it to emit debug symbol files (file extension .pdb).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Similarly, the /<bpt id="p1">**</bpt>Od<ept id="p1">**</ept> command-line option tells the compiler to disable optimization.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The resulting code runs more slowly, but is easier to debug, should this be necessary.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When compiling .NET Framework managed code, compilers such as Visual C++, Visual Basic, and C# compile their source program into Microsoft Intermediate Language (MSIL).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>MSIL is subsequently JIT-compiled, just before execution, into native machine code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As with unmanaged code, you can configure an executable image for debugging by setting IDE switches or command-line options.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition, you can configure the JIT compilation for debugging in much the same way.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This JIT configuration has two aspects:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can request the JIT-compiler to generate tracking information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This makes it possible for the debugger to match up a chain of MSIL with its machine code counterpart, and to track where local variables and function arguments are stored.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 2.0, the JIT compiler will always generate tracking information, so there is no need to request it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can request the JIT-compiler to not optimize the resulting machine code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Normally, the compiler that generates the MSIL sets these JIT-compiler options appropriately, based upon the IDE switches or command-line options you specify, for example, /<bpt id="p1">**</bpt>Od<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In some cases, you might want to change the behavior of the JIT compiler so that the machine code it generates is easier to debug.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, you might want to generate JIT tracking information for a retail build or control optimization.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can do so with an initialization (.ini) file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if the assembly you want to debug is called MyApp.exe, then you can create a text file named MyApp.ini, in the same folder as MyApp.exe, which contains these three lines:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can set the value of each option to 0 or 1, and any absent option defaults to 0.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">`GenerateTrackingInfo`</ph> to 1 and <ph id="ph2">`AllowOptimize`</ph> to 0 provides the easiest debugging.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 2.0, the JIT compiler always generates tracking information regardless of the value for <ph id="ph1">`GenerateTrackingInfo`</ph>; however, the <ph id="ph2">`AllowOptimize`</ph> value still has an effect.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When using the <bpt id="p1">[</bpt>Ngen.exe (Native Image Generator)<ept id="p1">](../../../docs/framework/tools/ngen-exe-native-image-generator.md)</ept> to precompile the native image without optimization, the .ini file must be present in the target folder with <ph id="ph1">`AllowOptimize=0`</ph> when Ngen.exe executes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you have precompiled an assembly without optimization, you must remove the precompiled code using the NGen.exe <bpt id="p1">**</bpt>/uninstall<ept id="p1">**</ept> option before rerunning Ngen.exe to precompile the code as optimized.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the .ini file is not present in the folder, by default Ngen.exe precompiles the code as optimized.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.DebuggableAttribute?displayProperty=fullName&gt;</ph> controls the settings for an assembly.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DebuggableAttribute<ept id="p1">**</ept> includes two fields that record the settings for whether the JIT compiler should optimize, and/or generate tracking information.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 2.0, the JIT compiler will always generate tracking information.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For a retail build, compilers do not set any <bpt id="p1">**</bpt>DebuggableAttribute<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The JIT-compiler default behavior is to generate the highest performance, hardest to debug machine code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Enabling JIT tracking lowers performance a little, and disabling optimization lowers performance a lot.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DebuggableAttribute<ept id="p1">**</ept> applies to a whole assembly at a time, not to individual modules within the assembly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Development tools must therefore attach custom attributes to the assembly metadata token, if an assembly has already been created, or to the class called <bpt id="p1">**</bpt>System.Runtime.CompilerServices.AssemblyAttributesGoHere<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The ALink tool will then promote these <bpt id="p1">**</bpt>DebuggableAttribute<ept id="p1">**</ept> attributes from each module to the assembly they become a part of.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If there is a conflict, the ALink operation will fail.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In version 1.0 of the .NET Framework, the Microsoft Visual C++ compiler adds the <bpt id="p1">**</bpt>DebuggableAttribute<ept id="p1">**</ept> when the <bpt id="p2">**</bpt>/clr<ept id="p2">**</ept> and <bpt id="p3">**</bpt>/Zi<ept id="p3">**</ept> compiler options are specified.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In version 1.1 of the .NET Framework, you must either add the <bpt id="p1">**</bpt>DebugabbleAttribute<ept id="p1">**</ept> manually in your code or use the <bpt id="p2">**</bpt>/ASSEMBLYDEBUG<ept id="p2">**</ept> linker option.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging, Tracing, and Profiling<ept id="p1">](../../../docs/framework/debug-trace-profile/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enabling JIT-Attach Debugging<ept id="p1">](../../../docs/framework/debug-trace-profile/enabling-jit-attach-debugging.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enabling Profiling<ept id="p1">](http://msdn.microsoft.com/en-us/3b669676-f0e0-4ebf-8674-68986dd2020d)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>