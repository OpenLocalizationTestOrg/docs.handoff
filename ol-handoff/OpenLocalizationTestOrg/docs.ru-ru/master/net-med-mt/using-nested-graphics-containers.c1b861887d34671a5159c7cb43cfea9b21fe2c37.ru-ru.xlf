<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-nested-graphics-containers.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7860d6531385844a90a2b492f4f0dd29bad4327c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\advanced\using-nested-graphics-containers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da4eb0c489abb4912b2d6c20b750dbb5d801aa45</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e3e7ef2cb07408e753710ee98a7d0ac40f4893ba</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Nested Graphics Containers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Nested Graphics Containers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ndptecgdiplus](../../../../includes/ndptecgdiplus-md.md)]</ph> provides containers that you can use to temporarily replace or augment part of the state in a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You create a container by calling the <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> repeatedly to form nested containers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each call to <ph id="ph1">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> must be paired with a call to <ph id="ph2">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Transformations in Nested Containers</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object and a container within that <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The world transformation of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object is a translation 100 units in the x direction and 80 units in the y direction.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The world transformation of the container is a 30-degree rotation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The code makes the call <ph id="ph1">`DrawRectangle(pen, -60, -30, 120, 60)`</ph> twice.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The first call to <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;</ph> is inside the container; that is, the call is in between the calls to <ph id="ph2">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The second call to <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawRectangle%2A&gt;</ph> is after the call to <ph id="ph2">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the preceding code, the rectangle drawn from inside the container is transformed first by the world transformation of the container (rotation) and then by the world transformation of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object (translation).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The rectangle drawn from outside the container is transformed only by the world transformation of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object (translation).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following illustration shows the two rectangles.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Nested Containers<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/winforms/advanced/media/csnestedcontainers1.png "</bpt>csnestedcontainers1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Clipping in Nested Containers</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how nested containers handle clipping regions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The code creates a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object and a container within that <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The clipping region of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object is a rectangle, and the clipping region of the container is an ellipse.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code makes two calls to the <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The first call to <ph id="ph1">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph> is inside the container, and the second call to <ph id="ph2">&lt;xref:System.Drawing.Graphics.DrawLine%2A&gt;</ph> is outside the container (after the call to <ph id="ph3">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first line is clipped by the intersection of the two clipping regions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second line is clipped only by the rectangular clipping region of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following illustration shows the two clipped lines.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Nested Container<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/winforms/advanced/media/nestedcontainers2.png "</bpt>nestedcontainers2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As the two preceding examples show, transformations and clipping regions are cumulative in nested containers.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you set the world transformations of the container and the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object, both transformations will apply to items drawn from inside the container.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The transformation of the container will be applied first, and the transformation of the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object will be applied second.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you set the clipping regions of the container and the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object, items drawn from inside the container will be clipped by the intersection of the two clipping regions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Quality Settings in Nested Containers</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Quality settings (<ph id="ph1">&lt;xref:System.Drawing.Graphics.SmoothingMode%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph>, and the like) in nested containers are not cumulative; rather, the quality settings of the container temporarily replace the quality settings of a <ph id="ph3">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you create a new container, the quality settings for that container are set to default values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object with a smoothing mode of <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.SmoothingMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>When you create a container, the smoothing mode inside the container is the default smoothing mode.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You are free to set the smoothing mode of the container, and any items drawn from inside the container will be drawn according to the mode you set.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Items drawn after the call to <ph id="ph1">&lt;xref:System.Drawing.Graphics.EndContainer%2A&gt;</ph> will be drawn according to the smoothing mode (<ph id="ph2">&lt;xref:System.Drawing.Drawing2D.SmoothingMode&gt;</ph>) that was in place before the call to <ph id="ph3">&lt;xref:System.Drawing.Graphics.BeginContainer%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Several Layers of Nested Containers</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You are not limited to one container in a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can create a sequence of containers, each nested in the preceding, and you can specify the world transformation, clipping region, and quality settings of each of those nested containers.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you call a drawing method from inside the innermost container, the transformations will be applied in order, starting with the innermost container and ending with the outermost container.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Items drawn from inside the innermost container will be clipped by the intersection of all the clipping regions.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object and sets its text rendering hint to <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.SmoothingMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The code creates two containers, one nested within the other.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The text rendering hint of the outer container is set to <ph id="ph1">&lt;xref:System.Drawing.Text.TextRenderingHint&gt;</ph>, and the text rendering hint of the inner container is set to <ph id="ph2">&lt;xref:System.Drawing.Drawing2D.SmoothingMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The code draws three strings: one from the inner container, one from the outer container, and one from the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object itself.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following illustration shows the three strings.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The strings drawn from the inner container and from the <ph id="ph1">&lt;xref:System.Drawing.Graphics&gt;</ph> object are smoothed by antialiasing.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The string drawn from the outer container is not smoothed by antialiasing because the <ph id="ph1">&lt;xref:System.Drawing.Graphics.TextRenderingHint%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Drawing.Text.TextRenderingHint&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Nested Containers<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/winforms/advanced/media/nestedcontainers3.png "</bpt>nestedcontainers3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managing the State of a Graphics Object<ept id="p1">](../../../../docs/framework/winforms/advanced/managing-the-state-of-a-graphics-object.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>