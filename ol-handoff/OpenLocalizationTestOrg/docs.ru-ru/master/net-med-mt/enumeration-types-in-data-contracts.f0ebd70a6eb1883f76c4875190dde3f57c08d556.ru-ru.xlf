<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="enumeration-types-in-data-contracts.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a46d98bf4aad168635410b482a0a1eac98c84057</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\enumeration-types-in-data-contracts.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b72830658e2b1b382698ea3813e8ff88e8f8fb9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f46982583052dc64979fd2927724181865c3715</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Enumeration Types in Data Contracts | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Enumeration Types in Data Contracts</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enumerations can be expressed in the data contract model.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic walks through several examples that explain the programming model.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Enumeration Basics</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One way to use enumeration types in the data contract model is to apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute to the type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You must then apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute to each member that must be included in the data contract.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example shows two classes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first uses the enumeration and the second defines the enumeration.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An instance of the <ph id="ph1">`Car`</ph> class can be sent or received only if the <ph id="ph2">`condition`</ph> field is set to one of the values <ph id="ph3">`New`</ph>, <ph id="ph4">`Used`</ph>, or <ph id="ph5">`Rental`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`condition`</ph> is <ph id="ph2">`Broken`</ph> or <ph id="ph3">`Stolen`</ph>, a <ph id="ph4">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> properties (<ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph>) as usual for enumeration data contracts.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Enumeration Member Values</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Generally the data contract includes enumeration member names, not numerical values.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, when using the data contract model, if the receiving side is a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client, the exported schema preserves the numerical values.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that this is not the case when using the <bpt id="p1">[</bpt>Using the XmlSerializer Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-xmlserializer-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the preceding example, if <ph id="ph1">`condition`</ph> is set to <ph id="ph2">`Used`</ph> and the data is serialized to XML, the resulting XML is <ph id="ph3">`&lt;condition&gt;Used&lt;/condition&gt;`</ph> and not <ph id="ph4">`&lt;condition&gt;1&lt;/condition&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, the following data contract is equivalent to the data contract of <ph id="ph1">`CarConditionEnum`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, you can use <ph id="ph1">`CarConditionEnum`</ph> on the sending side and <ph id="ph2">`CarConditionWithNumbers`</ph> on the receiving side.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Although the sending side uses the value "1" for <ph id="ph1">`Used`</ph> and the receiving side uses the value "20," the XML representation is <ph id="ph2">`&lt;condition&gt;Used&lt;/condition&gt;`</ph> for both sides.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To be included in the data contract, you must apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph>, you can always apply the special value 0 (zero) to an enumeration, which is also the default value for any enumeration.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, even this special zero value cannot be serialized unless it is marked with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There are two exceptions to this:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Flag enumerations (discussed later in this topic).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Enumeration data members with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue%2A&gt;</ph> property set to <ph id="ph2">`false`</ph> (in which case, the enumeration with the value zero is omitted from the serialized data).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Customizing Enumeration Member Values</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can customize the enumeration member value that forms a part of the data contract by using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute.Value%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, the following data contract is also equivalent to the data contract of the <ph id="ph1">`CarConditionEnum`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When serialized, the value of <ph id="ph1">`PreviouslyOwned`</ph> has the XML representation <ph id="ph2">`&lt;condition&gt;Used&lt;/condition&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Simple Enumerations</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also serialize enumeration types to which the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute has not been applied.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Such enumeration types are treated exactly as previously described, except that every member (that does not have the <ph id="ph1">&lt;xref:System.NonSerializedAttribute&gt;</ph> attribute applied) is treated as if the <ph id="ph2">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute has been applied.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, the following enumeration implicitly has a data contract equivalent to the preceding <ph id="ph1">`CarConditionEnum`</ph> example.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can use simple enumerations when you do not need to customize the enumeration's data contract name and namespace and the enumeration member values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Notes on Simple Enumerations</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Applying the <ph id="ph1">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute to simple enumerations has no effect.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It makes no difference whether or not the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute is applied to the enumeration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The fact that the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> class honors the <ph id="ph2">&lt;xref:System.NonSerializedAttribute&gt;</ph> attribute applied to enumeration members is different from the behavior of the <ph id="ph3">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph> and the <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Both of those serializers ignore the <ph id="ph1">&lt;xref:System.NonSerializedAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Flag Enumerations</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can apply the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute to enumerations.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In that case, a list of zero or more enumeration values can be sent or received simultaneously.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To do so, apply the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute to the flag enumeration and then mark all the members that are powers of two with the <ph id="ph2">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that to use a flag enumeration, the progression must be an uninterrupted sequence of powers of 2 (for example, 1, 2, 4, 8, 16, 32, 64).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following steps apply to sending a flag's enumeration value:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Attempt to find an enumeration member (with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute applied) that maps to the numeric value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If found, send a list that contains just that member.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Attempt to break the numeric value into a sum such that there are enumeration members (each with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute applied) that map to each part of the sum.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Send the list of all these members.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">*</bpt>greedy algorithm<ept id="p1">*</ept> is used to find such a sum, and thus there is no guarantee that such a sum is found even if it is present.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To avoid this problem, make sure that the numeric values of the enumeration members are powers of two.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the preceding two steps fail, and the numeric value is nonzero, throw a <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the numeric value is zero, send the empty list.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following enumeration example can be used in a flag operation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example values are serialized as indicated.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-data-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>