<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46014fa337c7e116c71f44a3cabe5dadaa6c69af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\transforms-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2539652d03224d1551b614bf8ec3d1d872438caa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64e0949c6814a80b37b79b703d2c90473c49dfbb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Transforms Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Transforms Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to use the <ph id="ph1">[!INCLUDE[TLA#tla_2d](../../../../includes/tlasharptla-2d-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Media.Transform&gt;</ph> classes to rotate, scale, move (translate), and skew <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What Is a Transform?</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Transform&gt;</ph> defines how to map, or transform, points from one coordinate space to another coordinate space.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This mapping is described by a transformation <ph id="ph1">&lt;xref:System.Windows.Media.Matrix&gt;</ph>, which is a collection of three rows with three columns of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> [!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> uses row-major matrices.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Vectors are expressed as row-vectors, not column vectors.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following table shows the structure of a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> matrix.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A 2-D transformation matrix</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Default: 1.0</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Default: 0.0</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>0.0</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Default: 0.0</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Default: 1.0</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>0.0</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Default: 0.0</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Default: 0.0</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>1.0</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By manipulating matrix values, you can rotate, scale, skew, and move (translate) an object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if you change the value in the first column of the third row (the <ph id="ph1">&lt;xref:System.Windows.Media.Matrix.OffsetX%2A&gt;</ph> value) to 100, you can use it to move an object 100 units along the x-axis.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you change the value in the second column of the second row to 3, you can use it to stretch an object to three times its current height.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you change both values, you move the object 100 units along the x-axis and stretch its height by a factor of 3.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> only supports affine transforms, the values in the right column are always 0, 0, 1.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> enables you to directly manipulate matrix values, it also provides several <ph id="ph2">&lt;xref:System.Windows.Media.Transform&gt;</ph> classes that enable you to transform an object without knowing how the underlying matrix structure is configured.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Media.ScaleTransform&gt;</ph> class enables you to scale an object by setting its <ph id="ph2">&lt;xref:System.Windows.Media.ScaleTransform.ScaleX%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Media.ScaleTransform.ScaleY%2A&gt;</ph> properties, instead of manipulating a transformation matrix.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Likewise, the <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> class enables you to rotate an object by just setting its <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform.Angle%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Transform Classes</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> provides the following <ph id="ph2">[!INCLUDE[TLA#tla_2d](../../../../includes/tlasharptla-2d-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Media.Transform&gt;</ph> classes for common transformation operations:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Illustration</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Rotates an element by the specified <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform.Angle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rotate an Object<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-rotate-an-object.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Rotate illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-thumbnails-rotate.png "</bpt>graphicsmm_thumbnails_rotate<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Scales an element by the specified <ph id="ph1">&lt;xref:System.Windows.Media.ScaleTransform.ScaleX%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.ScaleTransform.ScaleY%2A&gt;</ph> amounts.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Scale an Element<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-scale-an-element.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Scale illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-thumbnails-scale.png "</bpt>graphicsmm_thumbnails_scale<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Skews an element by the specified <ph id="ph1">&lt;xref:System.Windows.Media.SkewTransform.AngleX%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.SkewTransform.AngleY%2A&gt;</ph> amounts.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Skew an Element<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-skew-an-element.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Skew illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-thumbnails-skew.png "</bpt>graphicsmm_thumbnails_skew<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Moves (translates) an element by the specified <ph id="ph1">&lt;xref:System.Windows.Media.TranslateTransform.X%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform.Y%2A&gt;</ph> amounts.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Translate an Element<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-translate-an-element.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Translate illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-thumbnails-translate.png "</bpt>graphicsmm_thumbnails_translate<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For creating more complex transformations, <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> provides the following two classes:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Class</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Groups multiple <ph id="ph1">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph> objects into a single <ph id="ph2">&lt;xref:System.Windows.Media.Transform&gt;</ph> that you can then apply to transform properties.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Apply Multiple Transforms to an Object<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-apply-multiple-transforms-to-an-object.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Creates custom transformations that are not provided by the other <ph id="ph1">&lt;xref:System.Windows.Media.Transform&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When you use a <ph id="ph1">&lt;xref:System.Windows.Media.MatrixTransform&gt;</ph>, you manipulate a Matrix directly.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use a MatrixTransform to Create Custom Transforms<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-use-a-matrixtransform-to-create-custom-transforms.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> also provides <ph id="ph2">[!INCLUDE[TLA#tla_3d](../../../../includes/tlasharptla-3d-md.md)]</ph> transformations.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Transform3D&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Common Transformation Properties</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>One way to transform an object is to declare the appropriate <ph id="ph1">&lt;xref:System.Windows.Media.Transform&gt;</ph> type and apply it to the transformation property of the object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Different types of objects have different types of transformation properties.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following table lists several commonly used <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> types and their transformation properties.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Transformation properties</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Brush.Transform%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Brush.RelativeTransform%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Transformations and Coordinate Systems</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When you transform an object, you do not just transform the object, you transform coordinate space in which that object exists.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>By default, a transform is centered at the origin of the target object's coordinate system: (0,0).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The only exception is <ph id="ph1">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph>; a <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> has no center properties to set because the translation effect is the same regardless of where it is centered.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to rotate a <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> element, a type of <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, by 45 degrees about its default center, (0, 0).</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following illustration shows the effect of the rotation.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A FrameworkElement rotated 45 degrees about &amp;#40;0,0&amp;#41;<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-fe-rotated-about-upperleft-corner.png "graphicsmm_FE_rotated_about_upperleft_corner")</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A Rectangle element rotated 45 degrees about the point (0,0)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Transforms_snip#TransformsFERotatedAboutTopLeft<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Transforms_snip/CS/CoordinateSystemExample.xaml#transformsferotatedabouttopleft)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>By default, the element rotates about its upper-left corner, (0, 0).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.ScaleTransform&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.SkewTransform&gt;</ph> classes provide CenterX and CenterY properties that enable you to specify the point at which the transform is applied.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The next example also uses a <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to rotate a <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> element by 45 degrees; however, this time the <ph id="ph3">&lt;xref:System.Windows.Media.RotateTransform.CenterX%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Media.RotateTransform.CenterY%2A&gt;</ph> properties are set so that the <ph id="ph5">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> has a center of (25, 25).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following illustration shows the effect of the rotation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A Geometry rotated 45 degrees about &amp;#40;25, 25&amp;#41;<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-fe-rotated-about-center.png "graphicsmm_FE_rotated_about_center")</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A Rectangle element rotated 45 degrees about the point (25, 25)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Transforms_snip#TransformsFERotatedAboutCenter<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Transforms_snip/CS/CoordinateSystemExample.xaml#transformsferotatedaboutcenter)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Transforming a FrameworkElement</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To apply transformations to a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, create a <ph id="ph2">&lt;xref:System.Windows.Media.Transform&gt;</ph> and apply it to one of the two properties that the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class provides:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> – A transform that is applied before the layout pass.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>After the transform is applied, the layout system processes the transformed size and position of the element.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> – A transform that modifies the appearance of the element but is applied after the layout pass is complete.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>By using the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property instead of the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> property, you can obtain performance benefits.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Which property should you use?</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Because of the performance benefits that it provides, use the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property whenever possible, especially when you use animated <ph id="ph2">&lt;xref:System.Windows.Media.Transform&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> property when scaling, rotating, or skewing and you need the  parent of the element to adjust to the transformed size of the element.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Note that, when they are used with the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> property, <ph id="ph2">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph> objects appear to have no effect on elements.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>That is because the layout system returns the translated element to its original position as part of its processing.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For additional information about layout in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>, see <bpt id="p1">[</bpt>Layout<ept id="p1">](../../../../docs/framework/wpf/advanced/layout.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Example: Rotate a FrameworkElement 45 Degrees</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to rotate a button clockwise by 45 degrees.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The button is contained in a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> that has two other buttons.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>By default, a <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> rotates about the point (0, 0).</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Because the example does not specify a center value, the button rotates about the point (0, 0), which is its upper-left corner.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> is applied to the <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The following illustration shows the result of the transformation.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A button transformed using RenderTransform<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-rendertransformwithdefaultcenter.png "graphicsmm_RenderTransformWithDefaultCenter")</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Clockwise rotation 45 degrees from upper-left corner</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Transforms_snip#GraphicsMMRotateButtonExample1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Transforms_snip/CS/ButtonRotateTransformExample.xaml#graphicsmmrotatebuttonexample1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The next example also uses a <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to rotate a button 45 degrees clockwise, but it also sets the <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> of the button to (0.5, 0.5).</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> property is relative to the size of the button.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>As a result, the rotation is applied to the center of the button, instead of its upper-left corner.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following illustration shows the result of the transformation.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A button transformed about its center<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-rendertransformrelativecenter.png "graphicsmm_RenderTransformRelativeCenter")</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Clockwise rotation 45 degrees around center</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Transforms_snip#GraphicsMMRotateButtonExample2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Transforms_snip/CS/ButtonRotateTransformExample.xaml#graphicsmmrotatebuttonexample2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> property instead of the <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> property to rotate the button.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This causes the transformation to affect the layout of the button, which triggers a full pass by the layout system.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>As a result, the button is rotated and then repositioned because its size has changed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following illustration shows the result of the transformation.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A button transformed using LayoutTransform<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/media/graphicsmm-layouttransform.png "graphicsmm_LayoutTransform")</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>LayoutTransform used to rotate the button</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Transforms_snip#GraphicsMMRotateButtonExample3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Transforms_snip/CS/ButtonRotateTransformExample.xaml#graphicsmmrotatebuttonexample3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Animating Transformations</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Because they inherit from the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Animatable&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Windows.Media.Transform&gt;</ph> classes can be animated.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>To animate a <ph id="ph1">&lt;xref:System.Windows.Media.Transform&gt;</ph>, apply an animation of a compatible type to the property you want to animate.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard&gt;</ph> and a <ph id="ph2">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> with a <ph id="ph3">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to make a <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> spin in place when it is clicked.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>Transforms_snip#GraphicsMMAnimatedRotateButtonExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Transforms_snip/CS/ButtonAnimatedRotateTransformExample.xaml#graphicsmmanimatedrotatebuttonexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For the complete sample, see <bpt id="p1">[</bpt>2-D Transforms Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information about animations, see the <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Freezable Features</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Because it inherits from the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Windows.Media.Transform&gt;</ph> class  provide several special features: <ph id="ph3">&lt;xref:System.Windows.Media.Transform&gt;</ph> objects can be declared as <bpt id="p1">[</bpt>resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>, shared among multiple objects, made read-only to improve performance, cloned, and made thread-safe.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For more information about the different features that are provided by <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> objects, see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/transformations-how-to-topics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>2-D Transforms Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>