<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a99bd74c79c863269d384ceae6f96f0f58c6d262</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ado-net-code-examples.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acbac4f83f2f024ad56ab3fbb143399970c998cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e009704846bcfe4a554ef15b210ce323f8070ed</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ADO.NET Code Examples | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ADO.NET Code Examples</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The code listings in this topic demonstrate how to retrieve data from a database by using the following ADO.NET technologies:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ADO.NET data providers:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SqlClient<ept id="p1">](#_SqlClient)</ept> (<ph id="ph1">`System.Data.SqlClient`</ph>)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OleDb<ept id="p1">](#_OleDb)</ept> (<ph id="ph1">`System.Data.OleDb`</ph>)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Odbc<ept id="p1">](#_Odbc)</ept> (<ph id="ph1">`System.Data.Odbc`</ph>)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OracleClient<ept id="p1">](#_OracleClient)</ept> (<ph id="ph1">`System.Data.OracleClient`</ph>)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>ADO.NET Entity Framework:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Entities<ept id="p1">](#_LINQ)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Typed ObjectQuery<ept id="p1">](#_QBM)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EntityClient<ept id="p1">](#_EntityClient)</ept> (<ph id="ph1">`System.Data.EntityClient`</ph>)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to SQL<ept id="p1">](#_LINQ2SQL)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>ADO.NET Data Provider Examples</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following code listings demonstrate how to retrieve data from a database using ADO.NET data providers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data is returned in a <ph id="ph1">`DataReader`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Retrieving Data Using a DataReader<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-data-using-a-datareader.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>SqlClient</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The code in this example assumes that you can connect to the <ph id="ph1">`Northwind`</ph> sample database on Microsoft <ph id="ph2">[!INCLUDE[ssNoVersion](../../../../includes/ssnoversion-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The code creates a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> to select rows from the Products table, adding a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> is opened inside of a <ph id="ph2">`using`</ph> block, which ensures that resources are closed and disposed when the code exits.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code executes the command by using a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph>, and displays the results in the console window.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks SampleApp.SqlClient#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.SqlClient/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks SampleApp.SqlClient#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.SqlClient/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>OleDb</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The code in this example assumes that you can connect to the Microsoft Access Northwind sample database.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The code creates a <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbCommand&gt;</ph> to select rows from the Products table, adding a <ph id="ph2">&lt;xref:System.Data.OleDb.OleDbParameter&gt;</ph> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbConnection&gt;</ph> is opened inside of a <ph id="ph2">`using`</ph> block, which ensures that resources are closed and disposed when the code exits.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The code executes the command by using a <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph>, and displays the results in the console window.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks SampleApp.OleDb#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.OleDb/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks SampleApp.OleDb#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.OleDb/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Odbc</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The code in this example assumes that you can connect to the Microsoft Access Northwind sample database.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The code creates a <ph id="ph1">&lt;xref:System.Data.Odbc.OdbcCommand&gt;</ph> to select rows from the Products table, adding a <ph id="ph2">&lt;xref:System.Data.Odbc.OdbcParameter&gt;</ph> to restrict the results to rows with a UnitPrice greater than the specified parameter value, in this case 5.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.Odbc.OdbcConnection&gt;</ph> is opened inside of a <ph id="ph2">`using`</ph> block, which ensures that resources are closed and disposed when the code exits.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The executes the command by using a <ph id="ph1">&lt;xref:System.Data.Odbc.OdbcDataReader&gt;</ph>, and displays the results in the console window.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks SampleApp.Odbc#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.Odbc/CS/source.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DataWorks SampleApp.Odbc#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.Odbc/VB/source.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>OracleClient</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The code in this example assumes a connection to DEMO.CUSTOMER on an Oracle server.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You must also add a reference to the System.Data.OracleClient.dll.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The code returns the data in an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks SampleApp.Oracle#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SampleApp.Oracle/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks SampleApp.Oracle#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SampleApp.Oracle/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Entity Framework Examples</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following code listings demonstrate how to retrieve data from a data source by querying entities in an Entity Data Model (EDM).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These examples use the <bpt id="p1">[</bpt>Northwind model<ept id="p1">](http://msdn.microsoft.com/en-us/74521f8c-e974-48cb-8858-c08deff52638)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Entity Framework Overview<ept id="p1">](../../../../docs/framework/data/adonet/ef/overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>LINQ to Entities</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The code in this example uses a LINQ query to return data as Categories objects, which are projected as an anonymous type that contains only the CategoryID and CategoryName properties.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ to Entities Overview<ept id="p1">](http://msdn.microsoft.com/en-us/86d87a27-c17a-45ac-b28d-72c8500333c6)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Typed ObjectQuery</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The code in this example uses an <ph id="ph1">&lt;xref:System.Data.Objects.ObjectQuery%601&gt;</ph> to return data as Categories objects.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Queries<ept id="p1">](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>EntityClient</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The code in this example uses an <ph id="ph1">&lt;xref:System.Data.EntityClient.EntityCommand&gt;</ph> to execute an Entity SQL query.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This query returns a list of records that represent instances of the Categories entity type.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Data.EntityClient.EntityDataReader&gt;</ph> is used to access data records in the result set.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>EntityClient Provider for the Entity Framework<ept id="p1">](../../../../docs/framework/data/adonet/ef/entityclient-provider-for-the-entity-framework.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>LINQ to SQL</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The code in this example uses a LINQ query to return data as Categories objects, which are projected as an anonymous type that contains only the CategoryID and CategoryName properties.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This example is based on the Northwind data context.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../../docs/framework/data/adonet/sql/linq/getting-started.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>&amp;#91;Top&amp;#93;<ept id="p1">](#_TOP)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Overview<ept id="p1">](../../../../docs/framework/data/adonet/ado-net-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Retrieving and Modifying Data in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-and-modifying-data.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating Data Applications<ept id="p1">](http://msdn.microsoft.com/library/ab334d5f-4f49-4346-bce0-3325d6130b3e)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Querying an Entity Data Model (Entity Framework Tasks)<ept id="p1">](http://msdn.microsoft.com/en-us/187f1caa-e4d3-4e31-bd99-5d5c2b329c77)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Execute a Query that Returns Anonymous Type Objects<ept id="p1">](http://msdn.microsoft.com/en-us/3b264025-e911-4d73-90ce-992d2b9d189d)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>