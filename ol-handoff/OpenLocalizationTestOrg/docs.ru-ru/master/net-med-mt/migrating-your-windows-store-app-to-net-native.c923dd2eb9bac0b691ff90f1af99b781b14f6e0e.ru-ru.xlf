<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="migrating-your-windows-store-app-to-net-native.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e5adad904dee9a18df9ececa7b012cbddf1743c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\net-native\migrating-your-windows-store-app-to-net-native.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">766202fb70320c65bc8666b01251c41fd6d5d8b3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d9d2d17b468223a9812bb50db585bd841efde38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Migrating Your Windows Store App to .NET Native | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Migrating Your Windows Store App to .NET Native</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> provides static compilation of apps in the Windows Store or on the developerâ€™s computer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This differs from the dynamic compilation performed for Windows Store apps by the just-in-time (JIT) compiler or the <bpt id="p1">[</bpt>Native Image Generator (Ngen.exe)<ept id="p1">](../../../docs/framework/tools/ngen-exe-native-image-generator.md)</ept> on the device.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Despite the differences, <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tries to maintain compatibility with the <bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/br230302.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For the most part, things that work on the .NET for Windows Store apps also work with <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, in some cases, you may encounter behavioral changes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This document discusses these differences between the standard .NET for Windows Store apps and <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> in the following areas:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>General runtime differences<ept id="p1">](#Runtime)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dynamic programming differences<ept id="p1">](#Dynamic)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Other reflection-related differences<ept id="p1">](#Reflection)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsupported scenarios and APIs<ept id="p1">](#Unsupported)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio differences<ept id="p1">](#VS)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>General runtime differences</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Exceptions, such as <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph>, that are thrown by the JIT compiler when an app runs on the common language runtime (CLR) generally result in compile-time errors when processed by <ph id="ph2">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Don't call the <ph id="ph1">&lt;xref:System.GC.WaitForPendingFinalizers%2A?displayProperty=fullName&gt;</ph> method from an app's UI thread.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This can result in a deadlock on <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Don't rely on static class constructor invocation ordering.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, the invocation order is different from the order on the standard runtime.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(Even with the standard runtime, you shouldn't rely on the order of execution of static class constructors.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Infinite looping without making a call (for example, <ph id="ph1">`while(true);`</ph>) on any thread may bring the app to a halt.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Similarly, large or infinite waits may bring the app to a halt.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Certain generic initialization cycles don't throw exceptions in <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the following code throws a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> exception on the standard CLR.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, it doesn't.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In some cases, <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> provides different implementations of .NET Framework class libraries.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An object returned from a method will always implement the members of the returned type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, since its backing implementation is different, you may not be able to cast it to the same set of types as you could on other .NET Framework platforms.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, in some cases, you may not be able to cast the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface object returned by methods such as <ph id="ph2">&lt;xref:System.Reflection.TypeInfo.DeclaredMembers%2A?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.Reflection.TypeInfo.DeclaredProperties%2A?displayProperty=fullName&gt;</ph> to <ph id="ph4">`T[]`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The WinInet cache isn't enabled by default on .NET for Windows Store apps, but it is on <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This improves performance but has working set implications.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>No developer action is necessary.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Dynamic programming differences</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> statically links in code from the .NET Framework to make the code app-local for maximum performance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, binary sizes have to remain small, so the entire .NET Framework can't be brought in.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> compiler resolves this limitation by using a dependency reducer that removes references to unused code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> might not maintain or generate some type information and code when that information can't be inferred statically at compile time, but instead is retrieved dynamically at runtime.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> does enable reflection and dynamic programming.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, not all types can be marked for reflection, because this would make the generated code size too large (especially because reflecting on public APIs in the .NET Framework is supported).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> compiler makes smart choices about which types should support reflection, and it keeps the metadata and generates code only for those types.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, data binding requires an app to be able to map property names to functions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In .NET for Windows Store apps, the common language runtime automatically uses reflection to provide this capability for managed types and publicly available native types.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, the compiler automatically includes metadata for types to which you bind data.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> compiler can also handle commonly used generic types such as <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, which work without requiring any hints or directives.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>dynamic<ept id="p1">](~/docs/csharp/language-reference/keywords/dynamic.md)</ept> keyword is also supported within certain limits.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You should test all dynamic code paths thoroughly when porting your app to <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The default configuration for <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> is sufficient for most developers, but some developers might want to fine- tune their configurations by using a runtime directives (.rd.xml) file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In addition, in some cases, the <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> compiler is unable to determine which metadata must be available for reflection and relies on hints, particularly in the following cases:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Some constructs like <ph id="ph1">&lt;xref:System.Type.MakeGenericType%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName&gt;</ph> can't be determined statically.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because the compiler can't determine the instantiations, a generic type that you want to reflect on has to be specified by runtime directives.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This isn't just because all code must be included, but because reflection on generic types can form an infinite cycle (for example, when a generic method is invoked on a generic type).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Runtime directives are defined in a runtime directives (.rd.xml) file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For general information about using this file, see <bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../docs/framework/net-native/getting-started-with-net-native.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For information about the runtime directives, see <bpt id="p1">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> also includes profiling tools that help the developer determine which types outside the default set should support reflection.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Other reflection-related differences</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There are a number of other individual reflection-related differences in behavior between the .NET for Windows Store apps and <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Private reflection over types and members in the .NET Framework class library is not supported.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can, however, reflect over your own private types and members, as well as types and members in third-party libraries.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo.HasDefaultValue%2A?displayProperty=fullName&gt;</ph> property correctly returns <ph id="ph2">`false`</ph> for a <ph id="ph3">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> object that represents a return value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the .NET for Windows Store apps, it returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Intermediate language (IL) doesnâ€™t support this directly, and interpretation is left to the language.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Public members on the <ph id="ph1">&lt;xref:System.RuntimeFieldHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.RuntimeMethodHandle&gt;</ph> structures aren't supported.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>These types are supported only for LINQ, expression trees, and static array initialization.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents%2A?displayProperty=fullName&gt;</ph> include hidden members in base classes and thus may be overridden without explicit overrides.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is also true of other <bpt id="p1">[</bpt>RuntimeReflectionExtensions.GetRuntime*<ept id="p1">](http://msdn.microsoft.com/library/system.reflection.runtimereflectionextensions_methods.aspx)</ept> methods.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type.MakeArrayType%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Type.MakeByRefType%2A?displayProperty=fullName&gt;</ph> don't fail when you try to create certain combinations (for example, an array of byrefs).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can't use reflection to invoke members that have pointer parameters.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can't use reflection to get or set a pointer field.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When the argument count is wrong and the type of one of the arguments is incorrect, <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> instead of a <ph id="ph3">&lt;xref:System.Reflection.TargetParameterCountException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Binary serialization of exceptions is generally not supported.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>As a result, non-serializable objects can be added to the <ph id="ph1">&lt;xref:System.Exception.Data%2A?displayProperty=fullName&gt;</ph> dictionary.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Unsupported scenarios and APIs</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following sections list unsupported scenarios and APIs for general development, interop, and technologies such as HTTPClient and Windows Communication Foundation (WCF):</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>General development<ept id="p1">](#General)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>HttpClient<ept id="p1">](#HttpClient)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interop<ept id="p1">](#Interop)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Unsupported APIs<ept id="p1">](#APIs)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>General development differences</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Value types<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you override the <ph id="ph1">&lt;xref:System.ValueType.Equals%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.ValueType.GetHashCode%2A?displayProperty=fullName&gt;</ph> methods for a value type, don't call the base class implementations.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In .NET for Windows Store apps, these methods rely on reflection.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>At compile time, <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> generates an implementation that doesn't rely on runtime reflection.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This means that if you don't override these two methods, they will work as expected, because <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> generates the implementation at compile time.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, overriding these methods but calling the base class implementation results in an exception.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Value types larger than one megabyte aren't supported.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Value types can't have a default constructor in <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>(C# and Visual Basic prohibit default constructors on value types.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>However, these can be created in IL.)</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Arrays<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Arrays with a lower bound other than zero aren't supported.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Typically, these arrays are created by calling the <ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Dynamic creation of multidimensional arrays isn't supported.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Such arrays are typically created by calling an overload of the <ph id="ph1">&lt;xref:System.Array.CreateInstance%2A?displayProperty=fullName&gt;</ph> method that includes a <ph id="ph2">`lengths`</ph> parameter, or by calling the <ph id="ph3">&lt;xref:System.Type.MakeArrayType%28System.Int32%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays that have four or more dimensions aren't supported; that is, their <ph id="ph1">&lt;xref:System.Array.Rank%2A?displayProperty=fullName&gt;</ph> property value is four or greater.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>jagged arrays<ept id="p1">](~/docs/csharp/programming-guide/arrays/jagged-arrays.md)</ept> (an array of arrays) instead.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`array[x,y,z]`</ph> is invalid, but <ph id="ph2">`array[x][y][z]`</ph> isn't.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Variance for multidimensional arrays isn't supported and causes an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> exception at run time.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Generics<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Infinite generic type expansion results in a compiler error.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, this code fails to compile:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Pointers<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Arrays of pointers aren't supported.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can't use reflection to get or set a pointer field.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Serialization<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute.%23ctor%28System.String%29&gt;</ph> attribute isn't supported.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute.%23ctor%28System.Type%29&gt;</ph> attribute instead.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resources<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The use of localized resources with the <ph id="ph1">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> class isn't supported.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Tracing.EventSourceAttribute.LocalizationResources%2A?displayProperty=fullName&gt;</ph> property doesn't define localized resources.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Delegates<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Delegate.BeginInvoke`</ph> and <ph id="ph2">`Delegate.EndInvoke`</ph> aren't supported.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Async<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Threading logic in overloads of Task IAsync isn't supported.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Miscellaneous APIs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeInfo.GUID%2A?displayProperty=fullName&gt;</ph> property throws a <ph id="ph2">&lt;xref:System.PlatformNotSupportedException&gt;</ph> exception if a <ph id="ph3">&lt;xref:System.Runtime.InteropServices.GuidAttribute&gt;</ph> attribute isn't applied to the type.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The GUID is used primarily for COM support.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.DateTime.Parse%2A?displayProperty=fullName&gt;</ph> method correctly parses strings that contain short dates in <ph id="ph2">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>However, it doesn't maintain compatibility with the changes in date and time parsing described in the Microsoft Knowledge Base articles <bpt id="p1">[</bpt>KB2803771<ept id="p1">](http://support.microsoft.com/kb/2803771)</ept> and <bpt id="p2">[</bpt>KB2803755<ept id="p2">](http://support.microsoft.com/kb/2803755)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Numerics.BigInteger.ToString%2A?displayProperty=fullName&gt;</ph> <ph id="ph2">`("E")`</ph> is correctly rounded in <ph id="ph3">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In some versions of the CLR, the result string is truncated instead of rounded.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>HttpClient differences</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Net.Http.HttpClientHandler&gt;</ph> class internally uses WinINet (through the <bpt id="p1">[</bpt>HttpBaseProtocolFilter<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.web.http.filters.httpbaseprotocolfilter.aspx)</ept> class) instead of the <ph id="ph3">&lt;xref:System.Net.WebRequest&gt;</ph> and <ph id="ph4">&lt;xref:System.Net.WebResponse&gt;</ph> classes used in the standard .NET for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>WinINet doesn't support all the configuration options that the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler&gt;</ph> class supports.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>As a result:</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Some of the capability properties on <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler&gt;</ph> return <ph id="ph2">`false`</ph> on <ph id="ph3">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, whereas they return <ph id="ph4">`true`</ph> in the standard .NET for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Some of the configuration property <ph id="ph1">`get`</ph> accessors always return a fixed value on <ph id="ph2">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> that is different than the default configurable value in .NET for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Some additional behavior differences are covered in the following subsections.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Proxy<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>HttpBaseProtocolFilter<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.web.http.filters.httpbaseprotocolfilter.aspx)</ept> class doesnâ€™t support configuring or overriding the proxy on a per-request basis.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This means that all requests on <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> use the system-configured proxy server or no proxy server, depending on the value of the <ph id="ph2">&lt;xref:System.Net.Http.HttpClientHandler.UseProxy%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In .NET for Windows Store apps, the proxy server is defined by the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.Proxy%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, setting the <ph id="ph2">&lt;xref:System.Net.Http.HttpClientHandler.Proxy%2A?displayProperty=fullName&gt;</ph> to a value other than <ph id="ph3">`null`</ph> throws a <ph id="ph4">&lt;xref:System.PlatformNotSupportedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.SupportsProxy%2A?displayProperty=fullName&gt;</ph> property returns <ph id="ph2">`false`</ph> on <ph id="ph3">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, whereas it returns <ph id="ph4">`true`</ph> in the standard .NET Framework for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Automatic redirection<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>HttpBaseProtocolFilter<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.web.http.filters.httpbaseprotocolfilter.aspx)</ept> class doesn't allow the maximum number of automatic redirections to be configured.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections%2A?displayProperty=fullName&gt;</ph> property is 50 by default in the standard .NET for Windows Store apps and can be modified.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, the value of this property is 10, and trying to modify it throws a <ph id="ph2">&lt;xref:System.PlatformNotSupportedException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration%2A?displayProperty=fullName&gt;</ph> property returns <ph id="ph2">`false`</ph> on <ph id="ph3">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, whereas it returns <ph id="ph4">`true`</ph> in .NET for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Automatic decompression<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>.NET for Windows Store apps allows you to set the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.AutomaticDecompression%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph2">&lt;xref:System.Net.DecompressionMethods&gt;</ph>, <ph id="ph3">&lt;xref:System.Net.DecompressionMethods&gt;</ph>, both <ph id="ph4">&lt;xref:System.Net.DecompressionMethods&gt;</ph> and <ph id="ph5">&lt;xref:System.Net.DecompressionMethods&gt;</ph>, or <ph id="ph6">&lt;xref:System.Net.DecompressionMethods&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> only supports <ph id="ph2">&lt;xref:System.Net.DecompressionMethods&gt;</ph> together with <ph id="ph3">&lt;xref:System.Net.DecompressionMethods&gt;</ph>, or <ph id="ph4">&lt;xref:System.Net.DecompressionMethods&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Trying to set the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.AutomaticDecompression%2A&gt;</ph> property to either <ph id="ph2">&lt;xref:System.Net.DecompressionMethods&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.DecompressionMethods&gt;</ph> alone silently sets it to both <ph id="ph4">&lt;xref:System.Net.DecompressionMethods&gt;</ph> and <ph id="ph5">&lt;xref:System.Net.DecompressionMethods&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cookies<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Cookie handling is performed simultaneously by <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> and WinINet.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Cookies from the <ph id="ph1">&lt;xref:System.Net.CookieContainer&gt;</ph> are combined with cookies in the WinINet cookie cache.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Removing a cookie from <ph id="ph1">&lt;xref:System.Net.CookieContainer&gt;</ph> prevents <ph id="ph2">&lt;xref:System.Net.Http.HttpClient&gt;</ph> from sending the cookie, but if the cookie was already seen by WinINet, and cookies weren't deleted by the user, WinINet sends it.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>It isn't possible to programmatically remove a cookie from WinINet by using the <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph>, <ph id="ph2">&lt;xref:System.Net.Http.HttpClientHandler&gt;</ph>, or <ph id="ph3">&lt;xref:System.Net.CookieContainer&gt;</ph> API.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.UseCookies%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph2">`false`</ph> causes only <ph id="ph3">&lt;xref:System.Net.Http.HttpClient&gt;</ph> to stop sending cookies; WinINet might still include its cookies in the request.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Credentials<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>In .NET for Windows Store apps, the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.UseDefaultCredentials%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Http.HttpClientHandler.Credentials%2A?displayProperty=fullName&gt;</ph> properties work independently.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.Credentials%2A&gt;</ph> property accepts any object that implements the <ph id="ph2">&lt;xref:System.Net.ICredentials&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, setting the <ph id="ph2">&lt;xref:System.Net.Http.HttpClientHandler.UseDefaultCredentials%2A&gt;</ph> property to <ph id="ph3">`true`</ph> causes the <ph id="ph4">&lt;xref:System.Net.Http.HttpClientHandler.Credentials%2A&gt;</ph> property to become <ph id="ph5">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.Credentials%2A&gt;</ph> property can be set only to <ph id="ph2">`null`</ph>, <ph id="ph3">&lt;xref:System.Net.CredentialCache.DefaultCredentials%2A&gt;</ph>, or an object of type <ph id="ph4">&lt;xref:System.Net.NetworkCredential&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Assigning any other <ph id="ph1">&lt;xref:System.Net.ICredentials&gt;</ph> object, the most popular of which is <ph id="ph2">&lt;xref:System.Net.CredentialCache&gt;</ph>, to the <ph id="ph3">&lt;xref:System.Net.Http.HttpClientHandler.Credentials%2A&gt;</ph> property throws a <ph id="ph4">&lt;xref:System.PlatformNotSupportedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Other unsupported or unconfigurable features<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.ClientCertificateOptions%2A?displayProperty=fullName&gt;</ph> property is always <ph id="ph2">&lt;xref:System.Net.Http.ClientCertificateOption&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In .NET for Windows Store apps, the default is <ph id="ph1">&lt;xref:System.Net.Http.ClientCertificateOption&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize%2A?displayProperty=fullName&gt;</ph> property isn't configurable.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.HttpClientHandler.PreAuthenticate%2A?displayProperty=fullName&gt;</ph> property is always <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In .NET for Windows Store apps, the default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetCookie2`</ph> header in responses is ignored as obsolete.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Interop differences</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Deprecated APIs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A number of infrequently used APIs for interoperability with managed code have been deprecated.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>When used with <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, these APIs may throw a <ph id="ph2">&lt;xref:System.NotImplementedException&gt;</ph> or <ph id="ph3">&lt;xref:System.PlatformNotSupportedException&gt;</ph> exception, or result in a compiler error.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>In .NET for Windows Store apps, these APIs are marked as obsolete, although calling them generates a compiler warning rather than a compiler error.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Deprecated APIs for <ph id="ph1">`VARIANT`</ph> marshaling:</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph> is supported, but it throws an exception in some scenarios, such as when it is used with <bpt id="p1">[</bpt>IDispatch<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/ms221608.aspx)</ept> or byref variants.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Deprecated APIs for <bpt id="p1">[</bpt>IDispatch<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/ms221608.aspx)</ept> support:</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Attribute isn't supported</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Deprecated APIs for classic COM events:</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Deprecated APIs in the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomQueryInterface?displayProperty=fullName&gt;</ph> interface, which isn't supported in <ph id="ph2">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>All members.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>All members.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>All members.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Other unsupported interop features:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>All members.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>All members.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Rarely used marshalling APIs:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Member</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platform invoke and COM interop compatibility<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Most platform invoke and COM interop scenarios are still supported in <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>In particular, all interoperability with Windows Runtime (WinRT) APIs and all marshaling required for the Windows Runtime is supported.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This includes marshaling support for:</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Arrays (including <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Delegates</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Strings (Unicode, Ansi, and HSTRING)</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Structs (<ph id="ph1">`byref`</ph> and <ph id="ph2">`byval`</ph>)</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Unions</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Win32 handles</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>All WinRT constructs</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Partial support for marshaling variant types.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The following are supported:</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IUnknown<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680509.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> doesn't support the following:</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Using classic COM events</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Implementing the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ICustomQueryInterface?displayProperty=fullName&gt;</ph> interface on a managed type</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Implementing the <bpt id="p1">[</bpt>IDispatch<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/ms221608.aspx)</ept> interface on a managed type through the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComDefaultInterfaceAttribute?displayProperty=fullName&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>However, note that you can't call COM objects through <ph id="ph1">`IDispatch`</ph>, and your managed object can't implement <ph id="ph2">`IDispatch`</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Using reflection to invoke a platform invoke method isn't supported.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>You can work around this limitation by wrapping the method call in another method and using reflection to call the wrapper instead.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Other differences from .NET APIs for Windows Store apps</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>This section lists the remaining APIs that aren't supported in <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The largest set of the unsupported APIs are Windows Communication Foundation (WCF) APIs.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DataAnnotations (System.ComponentModel.DataAnnotations)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The types in the <ph id="ph1">&lt;xref:System.ComponentModel.DataAnnotations&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.DataAnnotations.Schema&gt;</ph> namespaces aren't supported in <ph id="ph3">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>These include the following types that are present in the .NET for Windows Store apps for Windows 8:</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Visual Basic<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Visual Basic isn't currently supported in <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The following types in the <ph id="ph1">&lt;xref:Microsoft.VisualBasic&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.VisualBasic.CompilerServices&gt;</ph> namespaces aren't available in <ph id="ph3">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reflection Context (System.Reflection.Context namespace)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext?displayProperty=fullName&gt;</ph> class isn't supported in <ph id="ph2">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RTC (System.Net.Http.Rtc)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Http.RtcRequestFactory?displayProperty=fullName&gt;</ph> class isn't supported in <ph id="ph2">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows Communication Foundation (WCF) (System.ServiceModel.<ph id="ph1">\*</ph>)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The types in the <bpt id="p1">[</bpt>System.ServiceModel.* namespaces<ept id="p1">](http://msdn.microsoft.com/library/gg145010.aspx)</ept> aren't supported in <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>These includes the following types:</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Differences in serializers</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The following differences concern serialization and deserialization with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> classes:</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> fail to serialize or deserialize a derived class that has a base class member whose type isn't a root serialization type.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>For example, in the following code, trying to serialize or deserialize <ph id="ph1">`Y`</ph> results in an error:</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`InnerType`</ph> isn't known to the serializer, because the members of the base class aren't traversed during serialization.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> fail to serialize a class or structure that implements the <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>For example, the following types fail to serialize or deserialize:</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> fails to serialize the following object value, because it doesn't know the exact type of the object to be serialized:</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> fails to serialize or deserialize if the type of the serialized object is <ph id="ph2">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>All serializers (<ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>) fail to generate serialization code for type <ph id="ph4">&lt;xref:System.Xml.Linq.XElement?displayProperty=fullName&gt;</ph> or for a type that contains <ph id="ph5">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>They display build-time errors instead.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The following constructors of the serialization types aren't guaranteed to work as expected:</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> fails to generate code for a type that has methods attributed with any of the following attributes:</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> doesn't honor the <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> custom serialization interface.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>If you have a class that implements this interface, <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> considers the type a plain old CLR object (POCO) type and serializes only its public properties.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Serializing a plain <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object, such as the following, doesn't work well with <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Visual Studio differences</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exceptions and debugging<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>When you're running apps compiled by using <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> in the debugger, first-chance exceptions are enabled for the following exception types:</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Building apps<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Use the x86 build tools that are used by default by Visual Studio.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>We don't recommend using the AMD64 MSBuild tools, which are found in C:\Program Files (x86)\MSBuild\12.0\bin\amd64; these may create build problems.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Profilers<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The Visual Studio CPU Profiler and XAML Memory Profiler don't display Just-My-Code correctly.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The XAML Memory Profiler doesn't accurately display managed heap data.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The CPU Profiler doesn't correctly identify modules, and displays prefixed function names.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Unit Test Library projects<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Enabling <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> on a Unit Test Library for a Windows Store apps project isn't supported and causes the project to fail to build.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../docs/framework/net-native/getting-started-with-net-native.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET For Windows Store apps overview<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/br230302.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>