<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2a09045629fdcfd319c6e56b89a0e3855fde7bc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\csharp-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30b6b0a8c02546028d0f00c187b046eef1c4bf38</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a933482c6b4ada907805aa9f01b716ee38b2070</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C# Expressions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C# Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, C# expressions are supported in <ph id="ph2">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>New C# workflow projects created in <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph> that target <ph id="ph2">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> use C# expressions, and Visual Basic workflow projects use Visual Basic expressions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Existing <ph id="ph1">[!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)]</ph> workflow projects that use Visual Basic expressions can be migrated to <ph id="ph2">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> regardless of the project language and are supported.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of C# expressions in <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using C# expressions in workflows</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using C# expressions in the Workflow Designer<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#WFDesigner)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Backwards compatibility<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#BackwardCompat)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using C# expressions in code workflows<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#CodeWorkflows)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using C# expressions in XAML workflows<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#XamlWorkflows)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiled Xaml<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#CompiledXaml)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loose Xaml<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#LooseXaml)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using C# expressions in XAMLX workflow services<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#WFServices)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="WFDesigner"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Using C# expressions in the Workflow Designer</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, C# expressions are supported in <ph id="ph2">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C# workflow projects created in <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph> that target <ph id="ph2">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> use C# expressions, while Visual Basic workflow projects use Visual Basic expressions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To specify the desired C# expression, type it into the box labeled <bpt id="p1">**</bpt>Enter a C# expression<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This label is displayed in the properties window when the activity is selected in the designer, or on the activity in the workflow designer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the following example, two <ph id="ph1">`WriteLine`</ph> activities are contained within a <ph id="ph2">`Sequence`</ph> inside a <ph id="ph3">`NoPersistScope`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Automatically created sequence activity<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/autosurround2.png "</bpt>AutoSurround2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>C# expressions are supported only in <ph id="ph1">[!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)]</ph>, and are not supported in the re-hosted workflow designer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> new WF45 features supported in the re-hosted designer, see <bpt id="p1">[</bpt>Support for New Workflow Foundation 4.5 Features in the Rehosted Workflow Designer<ept id="p1">](../../../docs/framework/windows-workflow-foundation/wf-features-in-the-rehosted-workflow-designer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BackwardCompat"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Backwards compatibility</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Visual Basic expressions in existing <ph id="ph1">[!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)]</ph> C# workflow projects that have been migrated to <ph id="ph2">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> are supported.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When the Visual Basic expressions are viewed in the workflow designer, the text of the existing Visual Basic expression is replaced with <bpt id="p1">**</bpt>Value was set in XAML<ept id="p1">**</ept>, unless the Visual Basic expression is valid C# syntax.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the Visual Basic expression is valid C# syntax, then the expression is displayed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To update the Visual Basic expressions to C#, you can edit them in the workflow designer and specify the equivalent C# expression.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It is not required to update the Visual Basic expressions to C#, but once the expressions are updated in the workflow designer they are converted to C# and may not be reverted to Visual Basic.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="CodeWorkflows"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Using C# expressions in code workflows</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C# expressions are supported in <ph id="ph1">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> code based workflows, but before the workflow can be invoked the C# expressions must be compiled using <ph id="ph2">&lt;xref:System.Activities.XamlIntegration.TextExpressionCompiler.Compile%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Workflow authors can use <ph id="ph1">`CSharpValue`</ph> to represent the r-value of an expression, and <ph id="ph2">`CSharpReference`</ph> to represent the l-value of an expression.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following example, a workflow is created with an <ph id="ph1">`Assign`</ph> activity and a <ph id="ph2">`WriteLine`</ph> activity contained in a <ph id="ph3">`Sequence`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSharpReference`</ph> is specified for the <ph id="ph2">`To`</ph> argument of the <ph id="ph3">`Assign`</ph>, and represents the l-value of the expression.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CSharpValue`</ph> is specified for the <ph id="ph2">`Value`</ph> argument of the <ph id="ph3">`Assign`</ph>, and for the <ph id="ph4">`Text`</ph> argument of the <ph id="ph5">`WriteLine`</ph>, and represents the r-value for those two expressions.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>After the workflow is constructed, the C# expressions are compiled by calling the <ph id="ph1">`CompileExpressions`</ph> helper method and then the workflow is invoked.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example is the <ph id="ph1">`CompileExpressions`</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the C# expressions are not compiled, a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph> is thrown when the workflow is invoked with a message similar to the following: <ph id="ph2">`Expression Activity type 'CSharpValue`</ph>1' requires compilation in order to run.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Please ensure that the workflow has been compiled.`</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If your custom code based workflow uses <ph id="ph1">`DynamicActivity`</ph>, then some changes to the <ph id="ph2">`CompileExpressions`</ph> method are required, as demonstrated in the following code example.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There are several differences in the <ph id="ph1">`CompileExpressions`</ph> overload that compiles the C# expressions in a dynamic activity.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The parameter to <ph id="ph1">`CompileExpressions`</ph> is a <ph id="ph2">`DynamicActivity`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The type name and namespace are retrieved using the <ph id="ph1">`DynamicActivity.Name`</ph> property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TextExpressionCompilerSettings.ForImplementation`</ph> is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CompiledExpressionInvoker.SetCompiledExpressionRootForImplementation`</ph> is called instead of <ph id="ph2">`CompiledExpressionInvoker.SetCompiledExpressionRoot`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> working with expressions in code, see <bpt id="p1">[</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id="p1">](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="XamlWorkflows"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Using C# expressions in XAML workflows</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>C# expressions are supported in XAML workflows.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Compiled XAML workflows are compiled into a type, and loose XAML workflows are loaded by the runtime and compiled into an activity tree when the workflow is executed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Compiled Xaml<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#CompiledXaml)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loose Xaml<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#LooseXaml)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="CompiledXaml"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Compiled Xaml</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C# expressions are supported in compiled XAML workflows that are compiled to a type as part of a C# workflow project that targets <ph id="ph1">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Compiled XAML is the default type of workflow authoring in <ph id="ph1">[!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)]</ph>, and C# workflow projects created in <ph id="ph2">[!INCLUDE[vs_current_short](../../../includes/vs-current-short-md.md)]</ph> that target <ph id="ph3">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph> use C# expressions.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="LooseXaml"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Loose Xaml</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>C# expressions are supported in loose XAML workflows.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The workflow host program that loads and invokes the loose XAML workflow must target <ph id="ph1">[!INCLUDE[netfx_current_short](../../../includes/netfx-current-short-md.md)]</ph>, and <ph id="ph2">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A&gt;</ph> must be set to <ph id="ph3">`true`</ph> (the default is <ph id="ph4">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To set <ph id="ph1">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A&gt;</ph> to <ph id="ph2">`true`</ph>, create an <ph id="ph3">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings&gt;</ph> instance with its <ph id="ph4">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A&gt;</ph> property set to <ph id="ph5">`true`</ph>, and pass it as a parameter to <ph id="ph6">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`CompileExpressions`</ph> Is not set to <ph id="ph2">`true`</ph>, a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> will be thrown with a message similar to the following: <ph id="ph4">`Expression Activity type 'CSharpValue`</ph>1' requires compilation in order to run.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Please ensure that the workflow has been compiled.`</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> working with XAML workflows, see <bpt id="p1">[</bpt>Serializing Workflows and Activities to and from XAML<ept id="p1">](../../../docs/framework/windows-workflow-foundation/serializing-workflows-and-activities-to-and-from-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="WFServices"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Using C# expressions in XAMLX workflow services</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>C# expressions are supported in XAMLX workflow services.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When a workflow service is hosted in IIS or WAS then no additional steps are required, but if the XAML workflow service is self-hosted, then the C# expressions must be compiled.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To compile the C# expressions in a self-hosted XAMLX workflow service, first load the XAMLX file into a <ph id="ph1">`WorkflowService`</ph>, and then pass the <ph id="ph2">`Body`</ph> of the <ph id="ph3">`WorkflowService`</ph> to the <ph id="ph4">`CompileExpressions`</ph> method described in the previous <bpt id="p1">[</bpt>Using C# expressions in code workflows<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#CodeWorkflows)</ept> section.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the following example, a XAMLX workflow service is loaded, the C# expressions are compiled, and then the workflow service is opened and waits for requests.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the C# expressions are not compiled, the <ph id="ph1">`Open`</ph> operation succeeds but the workflow will fail when it is invoked.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">`CompileExpressions`</ph> method is the same as the method from the previous <bpt id="p1">[</bpt>Using C# expressions in code workflows<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md#CodeWorkflows)</ept> section.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>