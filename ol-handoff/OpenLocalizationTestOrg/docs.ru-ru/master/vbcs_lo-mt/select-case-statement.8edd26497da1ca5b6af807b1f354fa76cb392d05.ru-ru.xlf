<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">486dfe2b4c2917660cc61e54564f378e68451e8d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\select-case-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1078f17ce667e3e3c47ebb9ba391f37374d5a92</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3878c17f44483490bf57c151e5d1210aa26aaabd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Select...Case Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Select...Case Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Runs one of several groups of statements, depending on the value of an expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Expression.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Must evaluate to one of the elementary data types (<ph id="ph1">`Boolean`</ph>, <ph id="ph2">`Byte`</ph>, <ph id="ph3">`Char`</ph>, <ph id="ph4">`Date`</ph>, <ph id="ph5">`Double`</ph>, <ph id="ph6">`Decimal`</ph>, <ph id="ph7">`Integer`</ph>, <ph id="ph8">`Long`</ph>, <ph id="ph9">`Object`</ph>, <ph id="ph10">`SByte`</ph>, <ph id="ph11">`Short`</ph>, <ph id="ph12">`Single`</ph>, <ph id="ph13">`String`</ph>, <ph id="ph14">`UInteger`</ph>, <ph id="ph15">`ULong`</ph>, and <ph id="ph16">`UShort`</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Required in a <ph id="ph1">`Case`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>List of expression clauses representing match values for <ph id="ph1">`testexpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Multiple expression clauses are separated by commas.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each clause can take one of the following forms:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">*</bpt>expression1<ept id="p1">*</ept> <ph id="ph2">`To`</ph> <bpt id="p2">*</bpt>expression2<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>-   [ <ph id="ph1">`Is`</ph> ] <bpt id="p1">*</bpt>comparisonoperator<ept id="p1">*</ept> <bpt id="p2">*</bpt>expression<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">-   </ph><bpt id="p1">*</bpt>expression<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`To`</ph> keyword to specify the boundaries of a range of match values for <ph id="ph2">`testexpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`expression1`</ph> must be less than or equal to the value of <ph id="ph2">`expression2`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Is`</ph> keyword with a comparison operator (<ph id="ph2">`=`</ph>, <ph id="ph3">`&lt;&gt;`</ph>, <ph id="ph4">`&lt;`</ph>, <ph id="ph5">`&lt;=`</ph>, <ph id="ph6">`&gt;`</ph>, or <ph id="ph7">`&gt;=`</ph>) to specify a restriction on the match values for <ph id="ph8">`testexpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Is`</ph> keyword is not supplied, it is automatically inserted before <bpt id="p1">*</bpt>comparisonoperator<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The form specifying only <ph id="ph1">`expression`</ph> is treated as a special case of the <ph id="ph2">`Is`</ph> form where <bpt id="p1">*</bpt>comparisonoperator<ept id="p1">*</ept> is the equal sign (<ph id="ph3">`=`</ph>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This form is evaluated as <ph id="ph1">`testexpression`</ph><ph id="ph2"> = </ph><ph id="ph3">`expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The expressions in <ph id="ph1">`expressionlist`</ph> can be of any data type, provided they are implicitly convertible to the type of <ph id="ph2">`testexpression`</ph> and the appropriate <ph id="ph3">`comparisonoperator`</ph> is valid for the two types it is being used with.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>One or more statements following <ph id="ph1">`Case`</ph> that run if <ph id="ph2">`testexpression`</ph> matches any clause in <ph id="ph3">`expressionlist`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One or more statements following <ph id="ph1">`Case Else`</ph> that run if <ph id="ph2">`testexpression`</ph> does not match any clause in the <ph id="ph3">`expressionlist`</ph> of any of the <ph id="ph4">`Case`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Terminates the definition of the <ph id="ph1">`Select`</ph>...<ph id="ph2">`Case`</ph> construction.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`testexpression`</ph> matches any <ph id="ph2">`Case`</ph> <ph id="ph3">`expressionlist`</ph> clause, the statements following that <ph id="ph4">`Case`</ph> statement run up to the next <ph id="ph5">`Case`</ph>, <ph id="ph6">`Case Else`</ph>, or <ph id="ph7">`End Select`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Control then passes to the statement following <ph id="ph1">`End Select`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`testexpression`</ph> matches an <ph id="ph2">`expressionlist`</ph> clause in more than one <ph id="ph3">`Case`</ph> clause, only the statements following the first match run.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Case Else`</ph> statement is used to introduce the <ph id="ph2">`elsestatements`</ph> to run if no match is found between the <ph id="ph3">`testexpression`</ph> and an <ph id="ph4">`expressionlist`</ph> clause in any of the other <ph id="ph5">`Case`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although not required, it is a good idea to have a <ph id="ph1">`Case Else`</ph> statement in your <ph id="ph2">`Select Case`</ph> construction to handle unforeseen <ph id="ph3">`testexpression`</ph> values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`Case`</ph> <ph id="ph2">`expressionlist`</ph> clause matches <ph id="ph3">`testexpression`</ph> and there is no <ph id="ph4">`Case Else`</ph> statement, control passes to the statement following <ph id="ph5">`End Select`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can use multiple expressions or ranges in each <ph id="ph1">`Case`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, the following line is valid.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Is`</ph> keyword used in the <ph id="ph2">`Case`</ph> and <ph id="ph3">`Case Else`</ph> statements is not the same as the <bpt id="p1">[</bpt>Is Operator<ept id="p1">](../../../visual-basic/language-reference/operators/is-operator.md)</ept>, which is used for object reference comparison.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can specify ranges and multiple expressions for character strings.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`Case`</ph> matches any string that is exactly equal to "apples", has a value between "nuts" and "soup" in alphabetical order, or contains the exact same value as the current value of <ph id="ph2">`testItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The setting of <ph id="ph1">`Option Compare`</ph> can affect string comparisons.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Under <ph id="ph1">`Option Compare Text`</ph>, the strings "Apples" and "apples" compare as equal, but under <ph id="ph2">`Option Compare Binary`</ph>, they do not.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Case`</ph> statement with multiple clauses can exhibit behavior known as <bpt id="p1">*</bpt>short-circuiting<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Visual Basic evaluates the clauses from left to right, and if one produces a match with <ph id="ph1">`testexpression`</ph>, the remaining clauses are not evaluated.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Short-circuiting can improve performance, but it can produce unexpected results if you are expecting every expression in <ph id="ph1">`expressionlist`</ph> to be evaluated.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information on short-circuiting, see <bpt id="p1">[</bpt>Boolean Expressions<ept id="p1">](../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the code within a <ph id="ph1">`Case`</ph> or <ph id="ph2">`Case Else`</ph> statement block does not need to run any more of the statements in the block, it can exit the block by using the <ph id="ph3">`Exit Select`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This transfers control immediately to the statement following <ph id="ph1">`End Select`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Select Case`</ph> constructions can be nested.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Each nested <ph id="ph1">`Select Case`</ph> construction must have a matching <ph id="ph2">`End Select`</ph> statement and must be completely contained within a single <ph id="ph3">`Case`</ph> or <ph id="ph4">`Case Else`</ph> statement block of the outer <ph id="ph5">`Select Case`</ph> construction within which it is nested.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example uses a <ph id="ph1">`Select Case`</ph> construction to write a line corresponding to the value of the variable <ph id="ph2">`number`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`Case`</ph> statement contains the value that matches the current value of <ph id="ph2">`number`</ph>, so the statement that writes "Between 6 and 8, inclusive" runs.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#54<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/select-case-statement_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.Choose%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>End Statement<ept id="p1">](../../../visual-basic/language-reference/statements/end-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>If...Then...Else Statement<ept id="p1">](../../../visual-basic/language-reference/statements/if-then-else-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Option Compare Statement<ept id="p1">](../../../visual-basic/language-reference/statements/option-compare-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>