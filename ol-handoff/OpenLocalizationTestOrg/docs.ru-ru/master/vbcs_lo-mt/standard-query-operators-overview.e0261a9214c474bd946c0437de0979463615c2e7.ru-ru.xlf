<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">229b63db761f2a1ed5333fd6f8e4eb9b5c0b75de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\standard-query-operators-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">898bc11a5b03859bdb2efd9dc1d067c1e87ccc38</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f83f829e4752760b925ce79da69f66ecab1b7c52</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Standard Query Operators Overview (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Standard Query Operators Overview (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>standard query operators<ept id="p1">*</ept> are the methods that form the LINQ pattern.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Most of these methods operate on sequences, where a sequence is an object whose type implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface or the <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The standard query operators provide query capabilities including filtering, projection, aggregation, sorting and more.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are two sets of LINQ standard query operators, one that operates on objects of type <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and the other that operates on objects of type <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The methods that make up each set are static members of the <ph id="ph1">&lt;xref:System.Linq.Enumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Queryable&gt;</ph> classes, respectively.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>They are defined as <bpt id="p1">*</bpt>extension methods<ept id="p1">*</ept> of the type that they operate on.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This means that they can be called by using either static method syntax or instance method syntax.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition, several standard query operator methods operate on types other than those based on <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable&gt;</ph> type defines two such methods that both operate on objects of type <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These methods, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29&gt;</ph>, let you enable a non-parameterized, or non-generic, collection to be queried in the LINQ pattern.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>They do this by creating a strongly-typed collection of objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> class defines two similar methods, <ph id="ph2">&lt;xref:System.Linq.Queryable.Cast%60%601%28System.Linq.IQueryable%29&gt;</ph> and <ph id="ph3">&lt;xref:System.Linq.Queryable.OfType%60%601%28System.Linq.IQueryable%29&gt;</ph>, that operate on objects of type <ph id="ph4">&lt;xref:System.Linq.Queryable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The standard query operators differ in the timing of their execution, depending on whether they return a singleton value or a sequence of values.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Those methods that return a singleton value (for example, <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph>) execute immediately.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Methods that return a sequence defer the query execution and return an enumerable object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the case of the methods that operate on in-memory collections, that is, those methods that extend <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, the returned enumerable object captures the arguments that were passed to the method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When that object is enumerated, the logic of the query operator is employed and the query results are returned.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In contrast, methods that extend <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> do not implement any querying behavior, but build an expression tree that represents the query to be performed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The query processing is handled by the source <ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Calls to query methods can be chained together in one query, which enables queries to become arbitrarily complex.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how the standard query operators can be used to obtain information about a sequence.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Query Expression Syntax</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Some of the more frequently used standard query operators have dedicated C# and Visual Basic language keyword syntax that enables them to be called as part of a <bpt id="p1">*</bpt>query<ept id="p1">*</ept> <bpt id="p2">*</bpt>expression<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about standard query operators that have dedicated keywords and their corresponding syntaxes, see <bpt id="p1">[</bpt>Query Expression Syntax for Standard Query Operators (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Extending the Standard Query Operators</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can augment the set of standard query operators by creating domain-specific methods that are appropriate for your target domain or technology.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also replace the standard query operators with your own implementations that provide additional services such as remote evaluation, query translation, and optimization.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Linq.Enumerable.AsEnumerable%2A&gt;</ph> for an example.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following links take you to topics that provide additional information about the various standard query operators based on functionality.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sorting Data<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sorting-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Set Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/set-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Filtering Data (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/filtering-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Quantifier Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/quantifier-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Projection Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projection-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Partitioning Data (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/partitioning-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Join Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/join-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Grouping Data (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/grouping-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generation Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/generation-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Equality Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/equality-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Element Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/element-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Converting Data Types (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/converting-data-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Concatenation Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/concatenation-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Aggregation Operations (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/aggregation-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to LINQ (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Query Expression Syntax for Standard Query Operators (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/query-expression-syntax-for-standard-query-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Classification of Standard Query Operators by Manner of Execution (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/classification-of-standard-query-operators-by-manner-of-execution.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Extension Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/extension-methods.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>