<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70c9be04205d50e7b4518627b39df097f58c0caa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\operators\istrue-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bac227ae051fa5ce999effb1f4b9606b08c2c9a4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">754c6a09726059317407c2e129f9f839dcb7d980</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>IsTrue Operator (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IsTrue Operator (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Determines whether an expression is <ph id="ph1">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You cannot call <ph id="ph1">`IsTrue`</ph> explicitly in your code, but the Visual Basic compiler can use it to generate code from <ph id="ph2">`OrElse`</ph> clauses.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you define a class or structure and then use a variable of that type in an <ph id="ph1">`OrElse`</ph> clause, you must define <ph id="ph2">`IsTrue`</ph> on that class or structure.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The compiler considers the <ph id="ph1">`IsTrue`</ph> and <ph id="ph2">`IsFalse`</ph> operators as a <bpt id="p1">*</bpt>matched pair<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This means that if you define one of them, you must also define the other one.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compiler Use of IsTrue</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you have defined a class or structure, you can use a variable of that type in a <ph id="ph1">`For`</ph>, <ph id="ph2">`If`</ph>, <ph id="ph3">`Else``If`</ph>, or <ph id="ph4">`While`</ph> statement, or in a <ph id="ph5">`When`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you do this, the compiler requires an operator that converts your type into a <ph id="ph1">`Boolean`</ph> value so it can test a condition.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It searches for a suitable operator in the following order:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A widening conversion operator from your class or structure to <ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A widening conversion operator from your class or structure to <ph id="ph1">`Boolean?`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsTrue`</ph> operator on your class or structure.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A narrowing conversion to <ph id="ph1">`Boolean?`</ph> that does not involve a conversion from <ph id="ph2">`Boolean`</ph> to <ph id="ph3">`Boolean?`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A narrowing conversion operator from your class or structure to <ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you have not defined any conversion to <ph id="ph1">`Boolean`</ph> or an <ph id="ph2">`IsTrue`</ph> operator, the compiler signals an error.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsTrue`</ph> operator can be <bpt id="p1">*</bpt>overloaded<ept id="p1">*</ept>, which means that a class or structure can redefine its behavior when its operand has the type of that class or structure.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If your code uses this operator on such a class or structure, be sure you understand its redefined behavior.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Procedures<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/operator-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code example defines the outline of a structure that includes definitions for the <ph id="ph1">`IsFalse`</ph> and <ph id="ph2">`IsTrue`</ph> operators.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#28<ept id="p2">](../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/istrue-operator_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IsFalse Operator<ept id="p1">](../../../visual-basic/language-reference/operators/isfalse-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Define an Operator<ept id="p1">](../../../visual-basic/programming-guide/language-features/procedures/how-to-define-an-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>OrElse Operator<ept id="p1">](../../../visual-basic/language-reference/operators/orelse-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>