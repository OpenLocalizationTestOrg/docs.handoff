<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ac0662e281dce21d92e08cbaffd313dc701ee5c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\parameter-arrays.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51210232ec028c1b7aa28a9ad93ac944cf044b96</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">efcad007b22747a1dd6ac25fcb0d9c2956d29d53</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Parameter Arrays (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Parameter Arrays (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Usually, you cannot call a procedure with more arguments than the procedure declaration specifies.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you need an indefinite number of arguments, you can declare a <bpt id="p1">*</bpt>parameter array<ept id="p1">*</ept>, which allows a procedure to accept an array of values for a parameter.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You do not have to know the number of elements in the parameter array when you define the procedure.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The array size is determined individually by each call to the procedure.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Declaring a ParamArray</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">[</bpt>ParamArray<ept id="p1">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> keyword to denote a parameter array in the parameter list.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following rules apply:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A procedure can define only one parameter array, and it must be the last parameter in the procedure definition.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The parameter array must be passed by value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is good programming practice to explicitly include the <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept> keyword in the procedure definition.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The parameter array is automatically optional.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Its default value is an empty one-dimensional array of the parameter array's element type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All parameters preceding the parameter array must be required.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The parameter array must be the only optional parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Calling a ParamArray</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you call a procedure that defines a parameter array, you can supply the argument in any one of the following ways:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Nothing â€” that is, you can omit the <bpt id="p1">[</bpt>ParamArray<ept id="p1">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> argument.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, an empty array is passed to the procedure.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also pass the <bpt id="p1">[</bpt>Nothing<ept id="p1">](../../../../visual-basic/language-reference/nothing.md)</ept> keyword, with the same effect.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A list of an arbitrary number of arguments, separated by commas.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data type of each argument must be implicitly convertible to the <ph id="ph1">`ParamArray`</ph> element type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An array with the same element type as the parameter array's element type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In all cases, the code within the procedure treats the parameter array as a one-dimensional array with elements of the same data type as the <ph id="ph1">`ParamArray`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Whenever you deal with an array which can be indefinitely large, there is a risk of overrunning some internal capacity of your application.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you accept a parameter array, you should test for the size of the array that the calling code passed to it.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Take appropriate steps if it is too large for your application.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example defines and calls the function <ph id="ph1">`calcSum`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ParamArray`</ph> modifier for the parameter <ph id="ph2">`args`</ph> enables the function to accept a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#26<ept id="p2">](../../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/parameter-arrays_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example defines a procedure with a parameter array, and outputs the values of all the array elements passed to the parameter array.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#48<ept id="p2">](./codesnippet/VisualBasic/parameter-arrays_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#49<ept id="p2">](./codesnippet/VisualBasic/parameter-arrays_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Value and by Reference<ept id="p1">](./passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Passing Arguments by Position and by Name<ept id="p1">](./passing-arguments-by-position-and-by-name.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Optional Parameters<ept id="p1">](./optional-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Optional<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>