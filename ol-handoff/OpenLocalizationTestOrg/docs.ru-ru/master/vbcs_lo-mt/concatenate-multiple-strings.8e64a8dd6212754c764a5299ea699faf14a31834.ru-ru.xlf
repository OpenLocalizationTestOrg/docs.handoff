<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="concatenate-multiple-strings.md" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da83a79f58c236692e284a7920c7b98c3520e5d6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\how-to\concatenate-multiple-strings.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e9e191d75e4f1052dc097a89da272019d4d3d6a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6419bb93fcbd0fc87be58c88629c404e6e29b99</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Concatenate Multiple Strings (C# Guide)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>There are multiple ways to concatenate strings in C#.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn the options and the reasons behind different choices.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: Concatenate Multiple Strings (C# Guide)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Concatenation<ept id="p1">*</ept> is the process of appending one string to the end of another string.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You concatenate strings by using the <ph id="ph1">`+`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For string literals and string constants, concatenation occurs at compile time; no run-time concatenation occurs.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For string variables, concatenation occurs only at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example uses concatenation to split a long string literal into smaller strings in order to improve readability in the source code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These parts are concatenated into a single string at compile time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There is no run-time performance cost regardless of the number of strings involved.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To concatenate string variables, you can use the <ph id="ph1">`+`</ph> or <ph id="ph2">`+=`</ph> operators, <bpt id="p1">[</bpt>string interpolation<ept id="p1">](../language-reference/tokens/interpolated.md)</ept> or the <ph id="ph3">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph5">&lt;xref:System.String.Join%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph6">&lt;xref:System.Text.StringBuilder.Append%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`+`</ph> operator is easy to use and makes for intuitive code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Even if you use several <ph id="ph1">`+`</ph> operators in one statement, the string content is copied only once.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following code shows examples of using the <ph id="ph1">`+`</ph> and <ph id="ph2">`+=`</ph> operators to concatenate strings:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In some expressions, it's easier to concatenate strings using string interpolation, as the following code shows:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In string concatenation operations, the C# compiler treats a null string the same as an empty string.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Other method to concatenate strings is <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This method works well when you are building a string from a small number of component strings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In other cases you may be combining strings in a loop, where you don't know how many source strings you are combining, and the actual number of source strings may be quite large.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class was designed for these scenarios.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code uses the <ph id="ph1">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> class to concatenate strings.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can read more about the <bpt id="p1">[</bpt>reasons to choose string concatenation or the <ph id="ph1">`StringBuilder`</ph> class<ept id="p1">](xref:System.Text.StringBuilder#StringAndSB)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Another option to join strings from a collection is to use <ph id="ph1">&lt;xref:System.String.Concat%2A?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.String.Join%2A?displayProperty=nameWithType&gt;</ph> method if source strings should be separated by a delimeter.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code combines an array of words using both methods:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>At last, you can use <bpt id="p1">[</bpt>LINQ<ept id="p1">](../programming-guide/concepts/linq/index.md)</ept> and the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=nameWithType&gt;</ph> method to join strings from a collection.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This method combines the source strings using a lambda expression.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The lambda expression does the work to add each string to the existing accumulation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example combines an array of words by adding a space between each word in the array:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can try these samples by looking at the code in our <bpt id="p1">[</bpt>GitHub repository<ept id="p1">](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/strings)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Or you can download the samples <bpt id="p1">[</bpt>as a zip file<ept id="p1">](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/strings.zip)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strings<ept id="p1">](../programming-guide/strings/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>