<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c2db6fcbbd3d3736d9ab0e1e9190c2516a17937</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16364e0130891311220e58fa7de9c0bc6ddd69c5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e21a2b24382506cf90a1559608b06bb974d08840</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Objects and classes in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Objects and classes in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>object<ept id="p1">*</ept> is a combination of code and data that can be treated as a unit.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An object can be a piece of an application, like a control or a form.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An entire application can also be an object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you create an application in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, you constantly work with objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use objects provided by <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, such as controls, forms, and data access objects.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can also use objects from other applications within your <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can even create your own objects and define additional properties and methods for them.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Objects act like prefabricated building blocks for programs â€” they let you write a piece of code once and reuse it over and over.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This topic discusses objects in detail.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Objects and classes</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each object in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> is defined by a <bpt id="p1">*</bpt>class<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A class describes the variables, properties, procedures, and events of an object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Objects are instances of classes; you can create as many objects you need once you have defined a class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To understand the relationship between an object and its class, think of cookie cutters and cookies.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The cookie cutter is the class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It defines the characteristics of each cookie, for example size and shape.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The class is used to create objects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The objects are the cookies.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You must create an object before you can access its members.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To create an object from a class</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Determine from which class you want to create an object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Write a <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept> to create a variable to which you can assign a class instance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The variable should be of the type of the desired class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the <bpt id="p1">[</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept> keyword to initialize the variable to a new instance of the class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can now access the members of the class through the object variable.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Whenever possible, you should declare the variable to be of the class type you intend to assign to it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>early binding<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you don't know the class type at compile time, you can invoke <bpt id="p1">*</bpt>late binding<ept id="p1">*</ept> by declaring the variable to be of the <bpt id="p2">[</bpt>Object Data Type<ept id="p2">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, late binding can make performance slower and limit access to the run-time object's members.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Object Variable Declaration<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-declaration.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Multiple instances</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Objects newly created from a class are often identical to each other.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Once they exist as individual objects, however, their variables and properties can be changed independently of the other instances.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, if you add three check boxes to a form, each check box object is an instance of the <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The individual <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> objects share a common set of characteristics and capabilities (properties, variables, procedures, and events) defined by the class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, each has its own name, can be separately enabled and disabled, and can be placed in a different location on the form.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Object members</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An object is an element of an application, representing an <bpt id="p1">*</bpt>instance<ept id="p1">*</ept> of a class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Fields, properties, methods, and events are the building blocks of objects and constitute their <bpt id="p1">*</bpt>members<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Member Access</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You access a member of an object by specifying, in order, the name of the object variable, a period (<ph id="ph1">`.`</ph>), and the name of the member.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>IntelliSense listing of members</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>IntelliSense lists members of a class when you invoke its List Members option, for example when you type a period (<ph id="ph1">`.`</ph>) as a member-access operator.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you type the period following the name of a variable declared as an instance of that class, IntelliSense lists all the instance members and none of the shared members.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you type the period following the class name itself, IntelliSense lists all the shared members and none of the instance members.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using IntelliSense<ept id="p1">](/visualstudio/ide/using-intellisense)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Fields and properties</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Fields<ept id="p1">*</ept> and <bpt id="p2">*</bpt>properties<ept id="p2">*</ept> represent information stored in an object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You retrieve and set their values with assignment statements the same way you retrieve and set local variables in a procedure.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example retrieves the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Width%2A&gt;</ph> property and sets the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.ForeColor%2A&gt;</ph> property of a <ph id="ph3">&lt;xref:System.Windows.Forms.Label&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Note that a field is also called a <bpt id="p1">*</bpt>member variable<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use property procedures when:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You need to control when and how a value is set or retrieved.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The property has a well-defined set of values that need to be validated.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Setting the value causes some perceptible change in the object's state, such as an <ph id="ph1">`IsVisible`</ph> property.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Setting the property causes changes to other internal variables or to the values of other properties.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A set of steps must be performed before the property can be set or retrieved.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use fields when:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The value is of a self-validating type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, an error or automatic data conversion occurs if a value other than <ph id="ph1">`True`</ph> or <ph id="ph2">`False`</ph> is assigned to a <ph id="ph3">`Boolean`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Any value in the range supported by the data type is valid.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is true of many properties of type <ph id="ph1">`Single`</ph> or <ph id="ph2">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The property is a <ph id="ph1">`String`</ph> data type, and there is no constraint on the size or value of the string.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Property Procedures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/property-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Methods</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>method<ept id="p1">*</ept> is an action that an object can perform.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A&gt;</ph> is a method of the <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> object that adds a new entry to a combo box.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Start%2A&gt;</ph> method of a <ph id="ph2">&lt;xref:System.Windows.Forms.Timer&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Note that a method is simply a <bpt id="p1">*</bpt>procedure<ept id="p1">*</ept> that is exposed by an object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Events</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An event is an action recognized by an object, such as clicking the mouse or pressing a key, and for which you can write code to respond.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Events can occur as a result of a user action or program code, or they can be caused by the system.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Code that signals an event is said to <bpt id="p1">*</bpt>raise<ept id="p1">*</ept> the event, and code that responds to it is said to <bpt id="p2">*</bpt>handle<ept id="p2">*</ept> it.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can also develop your own custom events to be raised by your objects and handled by other objects.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Instance members and shared members</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When you create an object from a class, the result is an instance of that class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Members that are not declared with the <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept> keyword are <bpt id="p2">*</bpt>instance members<ept id="p2">*</ept>, which belong strictly to that particular instance.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An instance member in one instance is independent of the same member in another instance of the same class.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An instance member variable, for example, can have different values in different instances.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Members declared with the <ph id="ph1">`Shared`</ph> keyword are <bpt id="p1">*</bpt>shared members<ept id="p1">*</ept>, which belong to the class as a whole and not to any particular instance.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A shared member exists only once, no matter how many instances of its class you create, or even if you create no instances.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A shared member variable, for example, has only one value, which is available to all code that can access the class.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Accessing nonshared members</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To access a nonshared member of an object</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Make sure the object has been created from its class and assigned to an object variable.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In the statement that accesses the member, follow the object variable name with the <bpt id="p1">*</bpt>member-access operator<ept id="p1">*</ept> (<ph id="ph1">`.`</ph>) and then the member name.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Accessing shared members</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To access a shared member of an object</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Follow the class name with the <bpt id="p1">*</bpt>member-access operator<ept id="p1">*</ept> (<ph id="ph1">`.`</ph>) and then the member name.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You should always access a <ph id="ph1">`Shared`</ph> member of the object directly through the class name.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you have already created an object from the class, you can alternatively access a <ph id="ph1">`Shared`</ph> member through the object's variable.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Differences between classes and modules</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The main difference between classes and modules is that classes can be instantiated as objects while standard modules cannot.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Because there is only one copy of a standard module's data, when one part of your program changes a public variable in a standard module, any other part of the program gets the same value if it then reads that variable.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In contrast, object data exists separately for each instantiated object.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Another difference is that unlike standard modules, classes can implement interfaces.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Shared`</ph> modifier is applied to a class member, it is associated with the class itself instead of a particular instance of the class.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The member is accessed directly by using the class name, the same way module members are accessed.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Classes and modules also use different scopes for their members.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Members defined within a class are scoped within a specific instance of the class and exist only for the lifetime of the object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>To access class members from outside a class, you must use fully qualified names in the format of <bpt id="p1">*</bpt>Object<ept id="p1">*</ept>.<bpt id="p2">*</bpt>Member<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>On the other hand, members declared within a module are publicly accessible by default, and can be accessed by any code that can access the module.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This means that variables in a standard module are effectively global variables because they are visible from anywhere in your project, and they exist for the life of the program.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Reusing classes and objects</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Objects let you declare variables and procedures once and then reuse them whenever needed.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, if you want to add a spelling checker to an application you could define all the variables and support functions to provide spell-checking functionality.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If you create your spelling checker as a class, you can then reuse it in other applications by adding a reference to the compiled assembly.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Better yet, you may be able to save yourself some work by using a spelling checker class that someone else has already developed.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> provides many examples of components that are available for use.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.TimeZone&gt;</ph> class in the <ph id="ph2">&lt;xref:System&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.TimeZone&gt;</ph> provides members that allow you to retrieve information about the time zone of the current computer system.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In the preceding example, the first <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept> declares an object variable of type <ph id="ph1">&lt;xref:System.TimeZone&gt;</ph> and assigns to it a <ph id="ph2">&lt;xref:System.TimeZone&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.TimeZone.CurrentTimeZone%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Relationships among objects</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Objects can be related to each other in several ways.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The principal kinds of relationship are <bpt id="p1">*</bpt>hierarchical<ept id="p1">*</ept> and <bpt id="p2">*</bpt>containment<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Hierarchical relationship</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>When classes are derived from more fundamental classes, they are said to have a <bpt id="p1">*</bpt>hierarchical relationship<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Class hierarchies are useful when describing items that are a subtype of a more general class.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In the following example, suppose you want to define a special kind of <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> that acts like a normal <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> but also exposes a method that reverses the foreground and background colors.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To define a class is derived from an already existing class</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Use a <bpt id="p1">[</bpt>Class Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/class-statement.md)</ept> to define a class from which to create the object you need.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Be sure an <ph id="ph1">`End Class`</ph> statement follows the last line of code in your class.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>By default, the integrated development environment (IDE) automatically generates an <ph id="ph1">`End Class`</ph> when you enter a <ph id="ph2">`Class`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Follow the <ph id="ph1">`Class`</ph> statement immediately with an <bpt id="p1">[</bpt>Inherits Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/inherits-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Specify the class from which your new class derives.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Your new class inherits all the members defined by the base class.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Add the code for the additional members your derived class exposes.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For example, you might add a <ph id="ph1">`reverseColors`</ph> method, and your derived class might look as follows:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>If you create an object from the <ph id="ph1">`reversibleButton`</ph> class, it can access all the members of the <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> class, as well as the <ph id="ph3">`reverseColors`</ph> method and any other new members you define on <ph id="ph4">`reversibleButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Derived classes inherit members from the class they are based on, allowing you to add complexity as you progress in a class hierarchy.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Inheritance Basics<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Compiling the code</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Be sure the compiler can access the class from which you intend to derive your new class.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This might mean fully qualifying its name, as in the preceding example, or identifying its namespace in an <bpt id="p1">[</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If the class is in a different project, you might need to add a reference to that project.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Managing references in a project<ept id="p1">](/visualstudio/ide/managing-references-in-a-project)</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Containment relationship</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Another way that objects can be related is a <bpt id="p1">*</bpt>containment relationship<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Container objects logically encapsulate other objects.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.OperatingSystem&gt;</ph> object logically contains a <ph id="ph2">&lt;xref:System.Version&gt;</ph> object, which it returns through its <ph id="ph3">&lt;xref:System.OperatingSystem.Version%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Note that the container object does not physically contain any other object.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Collections</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>One particular type of object containment is represented by <bpt id="p1">*</bpt>collections<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Collections are groups of similar objects that can be enumerated.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> supports a specific syntax in the <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept> that allows you to iterate through the items of a collection.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Additionally, collections often allow you to use an <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Collection.Item%2A&gt;</ph> to retrieve elements by their index or by associating them with a unique string.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Collections can be easier to use than arrays because they allow you to add or remove items without using indexes.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Because of their ease of use, collections are often used to store forms and controls.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Related topics</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Defining Classes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/walkthrough-defining-classes.md)</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Provides a step-by-step description of how to create a class.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overloaded Properties and Methods<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/overloaded-properties-and-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Overloaded Properties and Methods</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inheritance Basics<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/inheritance-basics.md)</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Covers inheritance modifiers, overriding methods and properties, MyClass, and MyBase.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Lifetime: How Objects Are Created and Destroyed<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-lifetime-how-objects-are-created-and-destroyed.md)</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Discusses creating and disposing of class instances.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Describes how to create and use anonymous types, which allow you to create objects without writing a class definition for the data type.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Discusses object initializers, which are used to create instances of named and anonymous types by using a single expression.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Infer Property Names and Types in Anonymous Type Declarations<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Explains how to infer property names and types in anonymous type declarations.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Provides examples of successful and unsuccessful inference.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>