<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">416e97cd7f59b0fc63052673acee8b55a3c11c1f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\whats-new\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84dd575907cdb61171be0e797b94289ecd1d798f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6e86e6499ac5d364cd459a983b62f4d64ba1a0d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>What's new in the .NET Framework | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>What's new in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept>This article summarizes key new features and improvements in the following versions of the .NET Framework:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4.7<ept id="p1">](#v47)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4.6.2<ept id="p1">](#v462)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4.6.1<ept id="p1">](#v461)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET 2015 and .NET Framework 4.6<ept id="p1">](#v46)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4.5.2<ept id="p1">](#v452)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4.5.1<ept id="p1">](#v451)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4.5<ept id="p1">](#core)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This article does not provide comprehensive information about each new feature and is subject to change.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For general information about the .NET Framework, see <bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../docs/framework/get-started/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For supported platforms, see <bpt id="p1">[</bpt>System Requirements<ept id="p1">](~/docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For download links and installation instructions, see <bpt id="p1">[</bpt>Installation Guide<ept id="p1">](../../../docs/framework/install/guide-for-developers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The .NET Framework team also releases features out of band with NuGet to expand platform support and to introduce new functionality, such as immutable collections and SIMD-enabled vector types.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Additional Class Libraries and APIs<ept id="p1">](../additional-apis/index.md)</ept> and <bpt id="p2">[</bpt>The .NET Framework and Out-of-Band Releases<ept id="p2">](~/docs/framework/get-started/the-net-framework-and-out-of-band-releases.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See a <bpt id="p1">[</bpt>complete list of NuGet packages<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/p/nugetpackages/)</ept> for the .NET Framework, or subscribe to <bpt id="p2">[</bpt>our feed<ept id="p2">](https://nuget.org/api/v2/curated-feeds/dotnetframework/Packages/)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Introducing the .NET Framework 4.7</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.7 builds on the .NET Framework 4.6, 4.6.1, and 4.6.2 by adding many new fixes and several new features while remaining a very stable product.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Downloading and installing the .NET Framework 4.7</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can download the .NET Framework 4.7  from the following locations:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework 4.7 Web Installer<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=825299)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NET Framework 4.7 Offline Installer<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=825303)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.7 can be installed on Windows 10, Windows 8.1, Windows 7, and the corresponding server platforms starting with Windows Server 2008 R2 SP1.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can install the .NET Framework 4.7 by using either the web installer or the offline installer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The recommended way for most users is to use the web installer.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can target the .NET Framework 4.7 in Visual Studio 2012 or later by installing the <bpt id="p1">[</bpt>.NET Framework 4.7 Developer Pack<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=825319)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>What's new in the .NET Framework 4.7</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.7 includes new features in the following areas:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Core<ept id="p1">](#Core47)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Networking<ept id="p1">](#net47)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET<ept id="p1">](#ASP-NET47)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Communication Foundation (WCF)<ept id="p1">](#wcf47)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Forms<ept id="p1">](#wf47)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Presentation Foundation (WPF)<ept id="p1">](#WPF47)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For a list of new APIs added to the .NET Framework 4.7, see <bpt id="p1">[</bpt>.NET Framework 4.7 API Changes<ept id="p1">](https://github.com/Microsoft/dotnet/blob/master/releases/net47/dotnet47-api-changes.md)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For a list of feature improvements and bug fixes in the .NET Framework 4.7, see <bpt id="p1">[</bpt>.NET Framework 4.7 List of Changes<ept id="p1">](http://gutithub.com/Microsoft/dotnet/blob/master/releases/net47/dotnet47-changes.md)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For additional information, see <bpt id="p1">[</bpt>Announcing the .NET Framework 4.7<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2017/04/05/announcing-the-net-framework-4-7/)</ept> in the .NET Blog.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Core</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.7 improves serialization by the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Enhanced functionality with Elliptic Curve Cryptography (ECC)<ept id="p1">**</ept><ph id="ph1">*</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.7, <ph id="ph1">`ImportParameters(ECParameters)`</ph> methods were added to the <ph id="ph2">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph> classes to allow for an object to represent an already-established key.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`ExportParameters(Boolean)`</ph> method was also added for exporting the key using explicit curve parameters.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.7 also adds support for additional curves (including the Brainpool curve suite), and has added predefined definitions for ease-of-creation through the new <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDsa.Create%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Cryptography.ECDiffieHellman.Create%2A&gt;</ph> factory methods.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can see an <bpt id="p1">[</bpt>example of .NET Framework 4.7 cryptography improvements<ept id="p1">](https://gist.github.com/richlander/5a182899895a87a296c21ada97f7a54e)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Better support for control characters by the DataContractJsonSerializer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.7, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> serializes control characters in conformity with the ECMAScript 6 standard.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This behavior is enabled by default for applications that target the .NET Framework 4.7, and is an opt-in feature for applications that are running under the .NET Framework 4.7 but target a previous version of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Retargeting Changes in the .NET Framework 4.7<ept id="p1">](../../../docs/framework/migration-guide/retargeting-changes-in-the-net-framework-4-7.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Networking</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.7 adds the following network-related feature:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default operating system support for TLS protocols<ept id="p1">**</ept><ph id="ph1">*</ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The TLS stack, which is used by <ph id="ph1">&lt;xref:System.Net.Security.SslStream?displayProperty=fullName&gt;</ph> and up-stack components such as HTTP, FTP, and SMTP, allows developers to use the default TLS protocols supported by the operating system.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Developers need no longer hard-code a TLS version.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>ASP.NET</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.7, ASP.NET includes the following new features:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object Cache Extensibility<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.7, ASP.NET adds a new set of APIs that allow developers to replace the default ASP.NET implementations for in-memory object caching and memory monitoring.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Developers can now replace any of the following three components if the ASP.NET implementation is not adequate:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Object Cache Store<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>By using the new cache providers configuration section, developers can plug in new implementations of an object cache for an ASP.NET application by using the new <bpt id="p1">**</bpt>ICacheStoreProvider<ept id="p1">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Memory monitoring<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The default memory monitor in ASP.NET notifies applications when they are running close to the configured private bytes limit for the process, or when the machine is low on total available physical RAM.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When these limits are near, notifications are fired.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For some applications, notifications are fired too close to the configured limits to allow for useful reactions.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Developers can now write their own memory monitors to replace the default by using the <ph id="ph1">&lt;xref:System.Web.Hosting.ApplicationMonitors.MemoryMonitor%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Memory Limit Reactions<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>By default, ASP.NET attempts to trim the object cache and periodically call <ph id="ph1">&lt;xref:System.GC.Collect%2A?displayProperty=fullName&gt;</ph> when the private byte process limit is near.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For some applications, the frequency of calls to <ph id="ph1">&lt;xref:System.GC.Collect%2A?displayProperty=fullName&gt;</ph> or the amount of cache that is trimmed are inefficient.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Developers can now replace or supplement the default behavior by subscribing <bpt id="p1">**</bpt>IObserver<ept id="p1">**</ept> implementations to the application's memory monitor.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Windows Communication Foundation (WCF)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Windows Communication Foundation (WFC) adds the following features and changes:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ability to configure the default message security settings to TLS 1.1 or TLS 1.2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.7, WCF allows you to configure TSL 1.1 or TLS 1.2 in addition to SSL 3.0 and TSL 1.0 as the default message security protocol.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is an opt-in setting; to enable it, you must add the following entry to your application configuration file:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Improved reliability of WCF applications and WCF serialization<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>WCF includes a number of code changes that eliminate race conditions, thereby improving performance and the reliability of serialization options.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Better support for mixing asynchronous and synchronous code in calls to <bpt id="p1">**</bpt>SocketConnection.BeginRead<ept id="p1">**</ept> and <bpt id="p2">**</bpt>SocketConnection.Read<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Improved reliability when aborting a connection with <bpt id="p1">**</bpt>SharedConnectionListener<ept id="p1">**</ept> and <bpt id="p2">**</bpt>DuplexChannelBinder<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Improved reliability of serialization operations when calling the <ph id="ph1">&lt;xref:System.Runtime.Serialization.FormatterServices.GetSerializableMembers%28System.Type%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Improved reliability when removing a waiter by calling the <bpt id="p1">**</bpt>ChannelSynchronizer.RemoveWaiter<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Windows Forms</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.7, Windows Forms improves support for high DPI monitors.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>High DPI support<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Starting with applications that target the .NET Framework 4.7, the .NET Framework features high DPI and dynamic DPI support for Windows Forms applications.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>High DPI support improves the layout and appearance of forms and controls on high DPI monitors.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Dynamic DPI changes the layout and appearance of forms and controls when the user changes the DPI or display scale factor of a running application.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>High DPI support is an opt-in feature that you configure by defining a <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>System.Windows.Forms.ConfigurationSection&gt;<ept id="p1">](../configure-apps/file-schema/winforms/index.md)</ept> section in your application configuration file.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more information on adding high DPI support and dynamic DPI support to your Windows Forms application, see <bpt id="p1">[</bpt>High DPI Support in Windows Forms<ept id="p1">](../winforms/high-dpi-support-in-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Windows Presentation Foundation (WPF)</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4.7, WPF includes the following enhancements:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for a touch/stylus stack based on Windows WM_POINTER messages<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You now have the option of using a touch/stylus stack based on <bpt id="p1">[</bpt>WM_POINTER messages<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh454903.aspx)</ept> instead of the Windows Ink Services Platform (WISP).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is an opt-in feature in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Retargeting Changes in the .NET Framework 4.7<ept id="p1">](../migration-guide/retargeting-changes-in-the-net-framework-4-7.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New implementation for WPF printing APIs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>WPF's printing APIs in the <ph id="ph1">&lt;xref:System.Printing.PrintQueue?displayProperty=fullName&gt;</ph> class call the Windows <bpt id="p1">[</bpt>Print Document Package API<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/hh448418(v=vs.85).aspx)</ept> instead of the deprecated <bpt id="p2">[</bpt>XPS Print API<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ff686814(v=vs.85).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For the impact of this change on application compatibility, see <bpt id="p1">[</bpt>Retargeting Changes in the .NET Framework 4.7<ept id="p1">](../migration-guide/retargeting-changes-in-the-net-framework-4-7.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>What's new in the .NET Framework 4.6.2</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> includes new features in the following areas:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET<ept id="p1">](#ASPNET462)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Character categories<ept id="p1">](#Strings)</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cryptography<ept id="p1">](#Crypto462)</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SqlClient<ept id="p1">](#SQLClient)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Communication Foundation<ept id="p1">](#WCF)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Presentation Foundation (WPF)<ept id="p1">](#WPF462)</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Workflow Foundation (WF)<ept id="p1">](#WF462)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ClickOnce<ept id="p1">](#ClickOnce)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Converting Windows Forms and WPF apps to UWP apps<ept id="p1">](#UWPConvert)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging improvements<ept id="p1">](#Debug462)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For a list of new APIs added to the .NET Framework 4.6.2, see <bpt id="p1">[</bpt>.NET Framework 4.6.2 API Changes<ept id="p1">](https://github.com/Microsoft/dotnet/blob/master/releases/net462/dotnet462-api-changes.md)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For a list of feature improvements and bug fixes in the .NET Framework 4.6.2, see <bpt id="p1">[</bpt>.NET Framework 4.6.2 List of Changes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=708778)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For additional information, see <bpt id="p1">[</bpt>Announcing .NET Framework 4.6.2<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2016/08/02/announcing-net-framework-4-6-2/)</ept> in the .NET Blog.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>ASP.NET</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, ASP.NET includes the following enhancements:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Improved support for localized error messages in data annotation validators<ept id="p1">**</ept> Data annotation validators enable you to perform validation by adding one or more attributes to a class property.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The attribute's <ph id="ph1">&lt;xref:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage%2A?displayProperty=fullName&gt;</ph> element defines the text of the error message if validation fails.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, ASP.NET makes it easy to localize error messages.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Error messages will be localized if:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage%2A?displayProperty=fullName&gt;</ph> is provided in the validation attribute.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The resource file is stored in the App_LocalResources folder.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The name of the localized resources file has the form <ph id="ph1">`DataAnnotation.Localization.{`</ph><bpt id="p1">*</bpt>name<ept id="p1">*</ept><ph id="ph2">`}.resx`</ph>, where <bpt id="p2">*</bpt>name<ept id="p2">*</ept> is a culture name in the format <bpt id="p3">*</bpt>languageCode<ept id="p3">*</ept><ph id="ph3">`-`</ph><bpt id="p4">*</bpt>country/regionCode<ept id="p4">*</ept> or <bpt id="p5">*</bpt>languageCode<ept id="p5">*</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The key name of the resource is the string assigned to the <ph id="ph1">&lt;xref:System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage%2A?displayProperty=fullName&gt;</ph> attribute,  and its value is the localized error message.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, the following data annotation attribute defines the default culture's error message for an invalid rating.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You can then create a resource file, DataAnnotation.Localization.fr.resx, whose key is the error message string and whose value is the localized error message.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The file must be found in the <ph id="ph1">`App.LocalResources`</ph> folder.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For example, the following is the key and its value in a localized French (fr) language error message:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The rating must be between 1 and 10.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>La note doit être comprise entre 1 et 10.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This file can then</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In addition, data annotation localization is extensible.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Developers can plug in their own string localizer provider by implementing the <ph id="ph1">&lt;xref:System.Web.Globalization.IStringLocalizerProvider&gt;</ph> interface to store localization string somewhere other than in a resource file.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Async support with session-state store providers<ept id="p1">**</ept> ASP.NET now allows task-returning methods to be used with session-state store providers, thereby allowing ASP.NET apps to get the scalability benefits of async.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>To supports asynchronous operations with session state store providers, ASP.NET includes  a new interface, <ph id="ph1">&lt;xref:System.Web.SessionState.ISessionStateModule?displayProperty=fullName&gt;</ph>, which inherits from <ph id="ph2">&lt;xref:System.Web.IHttpModule&gt;</ph> and allows developers to implement their own session-state module and async session store providers.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The interface is defined as follows:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Web.SessionState.SessionStateUtility&gt;</ph> class includes two new methods, <ph id="ph2">&lt;xref:System.Web.SessionState.SessionStateUtility.IsSessionStateReadOnly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.SessionState.SessionStateUtility.IsSessionStateRequired%2A&gt;</ph>, that can be used to support asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Async support for output-cache providers<ept id="p1">**</ept> Starting with the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, task-returning methods can be used with output-cache providers to provide the scalability benefits of async.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Providers that implement these methods reduce thread-blocking on a web server and improve the scalability of an ASP.NET service.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The following APIs have been added to support asynchronous output-cache providers:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.OutputCacheProviderAsync?displayProperty=fullName&gt;</ph> class, which inherits from <ph id="ph2">&lt;xref:System.Web.Caching.OutputCacheProvider?displayProperty=fullName&gt;</ph> and allows developers to implement an asynchronous output-cache provider.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.OutputCacheUtility&gt;</ph> class, which provides helper methods for configuring the output cache.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>18 new methods in the <ph id="ph1">&lt;xref:System.Web.HttpCachePolicy?displayProperty=fullName&gt;</ph>class.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>These include <ph id="ph1">&lt;xref:System.Web.HttpCachePolicy.GetCacheability%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Web.HttpCachePolicy.GetCacheExtensions%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Web.HttpCachePolicy.GetETag%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Web.HttpCachePolicy.GetETagFromFileDependencies%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Web.HttpCachePolicy.GetMaxAge%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Web.HttpCachePolicy.GetMaxAge%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Web.HttpCachePolicy.GetNoStore%2A&gt;</ph>, <ph id="ph8">&lt;xref:System.Web.HttpCachePolicy.GetNoTransforms%2A&gt;</ph>, <ph id="ph9">&lt;xref:System.Web.HttpCachePolicy.GetOmitVaryStar%2A&gt;</ph>, <ph id="ph10">&lt;xref:System.Web.HttpCachePolicy.GetProxyMaxAge%2A&gt;</ph>, <ph id="ph11">&lt;xref:System.Web.HttpCachePolicy.GetRevalidation%2A&gt;</ph>, <ph id="ph12">&lt;xref:System.Web.HttpCachePolicy.GetUtcLastModified%2A&gt;</ph>, <ph id="ph13">&lt;xref:System.Web.HttpCachePolicy.GetVaryByCustom%2A&gt;</ph>, <ph id="ph14">&lt;xref:System.Web.HttpCachePolicy.HasSlidingExpiration%2A&gt;</ph>, and <ph id="ph15">&lt;xref:System.Web.HttpCachePolicy.IsValidUntilExpires%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>2 new methods in the <ph id="ph1">&lt;xref:System.Web.HttpCacheVaryByContentEncodings?displayProperty=fullName&gt;</ph> class:  <ph id="ph2">&lt;xref:System.Web.HttpCacheVaryByContentEncodings.GetContentEncodings%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpCacheVaryByContentEncodings.SetContentEncodings%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>2 new methods in the <ph id="ph1">&lt;xref:System.Web.HttpCacheVaryByHeaders?displayProperty=fullName&gt;</ph> class: <ph id="ph2">&lt;xref:System.Web.HttpCacheVaryByHeaders.GetHeaders%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpCacheVaryByHeaders.SetHeaders%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>2 new methods in the <ph id="ph1">&lt;xref:System.Web.HttpCacheVaryByParams?displayProperty=fullName&gt;</ph> class: <ph id="ph2">&lt;xref:System.Web.HttpCacheVaryByParams.GetParams%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.HttpCacheVaryByParams.SetParams%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Web.Caching.AggregateCacheDependency?displayProperty=fullName&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Web.Caching.AggregateCacheDependency.GetFileDependencies%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph>, the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.GetFileDependencies%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Character categories</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Characters in the  <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> are classified based on the <bpt id="p1">[</bpt>Unicode Standard, Version 8.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode8.0.0/)</ept>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> and <ph id="ph2">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph>, characters were classified based on Unicode 6.3 character categories.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Support for Unicode 8.0 is limited to the classification of characters by the <ph id="ph1">&lt;xref:System.Globalization.CharUnicodeInfo&gt;</ph> class and to types and methods that rely on it.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>These include the <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> class, the overloaded <ph id="ph2">&lt;xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method, and the <bpt id="p1">[</bpt>character classes<ept id="p1">](../../../docs/standard/base-types/character-classes-in-regular-expressions.md)</ept> recognized by the .NET Framework regular expression engine.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Character and string comparison and sorting is unaffected by this change and continues to rely on the underlying operating system or, on Windows 7 systems, on character data provided by the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>For changes in character categories from Unicode 6.0 to Unicode 7.0, see <bpt id="p1">[</bpt>The Unicode Standard, Version 7.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode7.0.0/)</ept> at The Unicode Consortium website.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For changes from Unicode 7.0 to Unicode 8.0, see <bpt id="p1">[</bpt>The Unicode Standard, Version 8.0.0<ept id="p1">](http://www.unicode.org/versions/Unicode8.0.0/)</ept> at The Unicode Consortium website.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Cryptography</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for X509 certificates containing FIPS 186-3 DSA<ept id="p1">**</ept> The <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> adds support for DSA (Digital Signature Algorithm) X509 certificates whose keys exceed the FIPS 186-2 1024-bit limit.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In addition to supporting the larger key sizes of FIPS 186-3, the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> allows computing signatures with the SHA-2 family of hash algorithms (SHA256, SHA384, and SHA512).</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>FIPS 186-3 support is provided by the new <ph id="ph1">&lt;xref:System.Security.Cryptography.DSACng?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>In keeping with recent changes to the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSA&gt;</ph> class in the .NET Framework 4.6 and the <ph id="ph2">&lt;xref:System.Security.Cryptography.ECDsa&gt;</ph> class in the .NET Framework 4.6.1, the <ph id="ph3">&lt;xref:System.Security.Cryptography.DSA&gt;</ph> abstract base class in <ph id="ph4">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> has additional methods to allow callers to use this functionality without casting.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPrivateKey%2A?displayProperty=fullName&gt;</ph> extension method to sign data, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>And you can call the <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPublicKey%2A?displayProperty=fullName&gt;</ph> extension method to verify signed data, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Increased clarity for inputs to ECDiffieHellman key derivation routines<ept id="p1">**</ept> The .NET Framework 3.5 added support for Ellipic Curve Diffie-Hellman Key Agreement with three different Key Derivation Function (KDF) routines.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The inputs to the routines, and the routines themselves, were configured via properties on the <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>But since not every routine read every input property, there was ample room for confusion on the past of the developer.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>To address this in the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, the following three methods have been added to the  <ph id="ph2">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph> base class to more clearly represent these KDF routines and their inputs:</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>ECDiffieHellman method</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Derives key material using the formula</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>HASH(secretPrepend &amp;#124;&amp;#124; <bpt id="p1">*</bpt>x<ept id="p1">*</ept> &amp;#124;&amp;#124; secretAppend)</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>HASH(secretPrepend OrElse <bpt id="p1">*</bpt>x<ept id="p1">*</ept> OrElse secretAppend)</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>x<ept id="p1">*</ept> is the computed result of the EC Diffie-Hellman algorithm.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Derives key material using the formula</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>HMAC(hmacKey, secretPrepend &amp;#124;&amp;#124; <bpt id="p1">*</bpt>x<ept id="p1">*</ept> &amp;#124;&amp;#124; secretAppend)</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>HMAC(hmacKey, secretPrepend OrElse <bpt id="p1">*</bpt>x<ept id="p1">*</ept> OrElse secretAppend)</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>x<ept id="p1">*</ept> is the computed result of the EC Diffie-Hellman algorithm.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Derives key material using the TLS pseudo-random function (PRF) derivation algorithm.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for persisted-key symmetric encryption<ept id="p1">**</ept> The Windows cryptography library (CNG) added support for storing persisted symmetric keys and using hardware-stored symmetric keys, and the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> mades it possible for developers to make use of this feature.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Since the notion of key names and key providers is implementation-specific, using this feature requires utilizing the constructor of the concrete implementation types instead of the preferred factory approach (such as calling <ph id="ph1">`Aes.Create`</ph>).</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Persisted-key symmetric encryption support exists for the AES (<ph id="ph1">&lt;xref:System.Security.Cryptography.AesCng&gt;</ph>) and 3DES (<ph id="ph2">&lt;xref:System.Security.Cryptography.TripleDESCng&gt;</ph>) algorithms.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SignedXml support for SHA-2 hashing<ept id="p1">**</ept> The <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> adds support to  the <ph id="ph2">&lt;xref:System.Security.Cryptography.Xml.SignedXml&gt;</ph> class for RSA-SHA256, RSA-SHA384, and RSA-SHA512 PKCS#1 signature methods, and SHA256, SHA384, and SHA512 reference digest algorithms.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The URI constants are all exposed on <ph id="ph1">&lt;xref:System.Security.Cryptography.Xml.SignedXml&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>SignedXml field</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Constant</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>"http://www.w3.org/2001/04/xmlenc#sha256"</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>"http://www.w3.org/2001/04/xmldsig-more#sha384"</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>"http://www.w3.org/2001/04/xmlenc#sha512"</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Any programs that have registered a custom <ph id="ph1">&lt;xref:System.Security.Cryptography.SignatureDescription&gt;</ph> handler into <ph id="ph2">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> to add support for these algorithms will continue to function as they did in the past, but since there are now platform defaults, the <ph id="ph3">&lt;xref:System.Security.Cryptography.CryptoConfig&gt;</ph> registration is no longer necessary.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>SqlClient</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>.NET Framework Data Provider for SQL Server (<ph id="ph1">&lt;xref:System.Data.SqlClient?displayProperty=fullName&gt;</ph>) includes the following new features in the <ph id="ph2">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Connection pooling and timeouts with Azure SQL databases<ept id="p1">**</ept> When connection pooling is enabled and a timeout or other login error occurs, an exception is cached, and the cached exception is thrown on any subsequent connection attempt for the next 5 seconds  to 1 minute.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>For more details, see <bpt id="p1">[</bpt>SQL Server Connection Pooling (ADO.NET)<ept id="p1">](../../../docs/framework/data/adonet/sql-server-connection-pooling.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>This behavior is not desirable when connecting to Azure SQL Databases, since connection attempts can fail with transient errors that are typically recovered quickly.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>To better optimize the connection retry experience, the connection pool blocking period behavior is removed when connections to Azure SQL Databases fail.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The addition of the new <ph id="ph1">`PoolBlockingPeriod`</ph> keyword lets you to select the blocking period best suited for your app.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Values include:</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Auto`</ph> The connection pool blocking period for an application that connects to an Azure SQL Database is disabled, and the connection pool blocking period for an application that connects to any other SQL Server instance is enabled.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>This is the default value.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>If the Server endpoint name ends with any of the following, they are considered Azure SQL Databases:</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>.database.windows.net</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>.database.chinacloudapi.cn</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>.database.usgovcloudapi.net</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>.database.cloudapi.de</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AlwaysBlock`</ph> The connection pool blocking period is always enabled.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`NeverBlock`</ph> The connection pool blocking period is always disabled.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Enhancements for Always Encrypted<ept id="p1">**</ept> SQLClient introduces two enhancements for Always Encrypted:</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>To improve performance of parameterized queries against encrypted database columns, encryption metadata for query parameters is now cached.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled%2A?displayProperty=fullName&gt;</ph> property set to <ph id="ph2">`true`</ph> (which is the default value), if the same query is called multiple times, the client retrieves parameter metadata from the server only once.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Column encryption key entries in the key cache are now evicted after a configurable time interval, set using the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Windows Communication Foundation</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, Windows Communication Foundation has been enhanced in the following areas:</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WCF transport security support for certificates stored using CNG<ept id="p1">**</ept> WCF transport security supports certificates stored using the Windows cryptography library (CNG).</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, this support is limited to using certificates with a public key that has an exponent no more than 32 bits in length.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>When an application targets the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, this feature is on by default.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For applications that target the <ph id="ph1">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph> and earlier but are running on the <ph id="ph2">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, this feature can be enabled by adding the following line to the <bpt id="p1">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the app.config or web.config file.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This can also be done programmatically with code like the following:</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Better support for multiple daylight saving time adjustment rules by the DataContractJsonSerializer class<ept id="p1">**</ept> Customers can use an application configuration setting to determine whether the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> class supports multiple adjustment rules for a single time zone.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This is an opt-in feature.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>To enable it, add the following setting to your app.config file:</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>When this feature is enabled, a <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> object  uses the <ph id="ph2">&lt;xref:System.TimeZoneInfo&gt;</ph> type instead of the <ph id="ph3">&lt;xref:System.TimeZone&gt;</ph> type to deserialize date and time data.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> supports multiple adjustment rules, which makes it possible to work with historic time zone data;   <ph id="ph2">&lt;xref:System.TimeZone&gt;</ph> does not.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> structure and time zone adjustments, see <bpt id="p1">[</bpt>Time Zone Overview<ept id="p1">](../../../docs/standard/datetime/time-zone-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for preserving a UTC time when serializing and deserializing with the XMLSerializer class<ept id="p1">**</ept> Ordinarily, when the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class is used to serialize a UTC <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value, it creates a serialized time string that preserves the date and time but assumes the time is local.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>For example, if you instantiate a UTC date and time by calling the following code:</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The result is the serialized time string "03:00:00.0000000-08:00" for a system eight hours behind UTC.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>And serialized values are always deserialized as local date and time values.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>You can use an application configuration setting to determine whether the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> preserves UTC time zone information when serializing and deserializing <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> values:</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>When this feature is enabled, a <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> object  uses the <ph id="ph2">&lt;xref:System.TimeZoneInfo&gt;</ph> type instead of the <ph id="ph3">&lt;xref:System.TimeZone&gt;</ph> type to deserialize date and time data.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> supports multiple adjustment rules, which makes it possible to work with historic time zone data;   <ph id="ph2">&lt;xref:System.TimeZone&gt;</ph> does not.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">&lt;xref:System.TimeZoneInfo&gt;</ph> structure and time zone adjustments, see <bpt id="p1">[</bpt>Time Zone Overview<ept id="p1">](../../../docs/standard/datetime/time-zone-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NetNamedPipeBinding best match<ept id="p1">**</ept> WCF has a new app setting that can be set on client applications to ensure they always connect to the service listening on the URI that best matches the one that they request.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>With this app setting set to <ph id="ph1">`false`</ph> (the default), it is possible for clients using <ph id="ph2">&lt;xref:System.ServiceModel.NetNamedPipeBinding&gt;</ph> to attempt to connect to a service listening on a URI that is a substring of the requested URI.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>For example, a client tries to connect to a service listening at <ph id="ph1">`net.pipe://localhost/Service1`</ph>, but a different service on that machine running with administrator privilege is listening at <ph id="ph2">`net.pipe://localhost`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>With this app setting set to <ph id="ph1">`false`</ph>, the client would attempt to connect to the wrong service.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>After setting the app setting to <ph id="ph1">`true`</ph>, the client will always connect to the best matching service.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Clients using <ph id="ph1">&lt;xref:System.ServiceModel.NetNamedPipeBinding&gt;</ph> find services based on the service's base address (if it exists) rather than the full endpoint address.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>To ensure this setting always works the service should use a unique base address.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>To enable this change, add the following app setting to your client application's App.config or Web.config file:</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SSL 3.0 is not a default protocol<ept id="p1">**</ept> When using NetTcp with transport security and a credential type of certificate, SSL 3.0 is no longer a default protocol used for negotiating a secure connection.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>In most cases, there should be no impact to existing apps, because TLS 1.0 is included in the protocol list for NetTcp.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>All existing clients should be able to negotiate a connection using at least TLS 1.0.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>If Ssl3 is required, use one of the following configuration mechanisms to add it to the list of negotiated protocols.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.SslStreamSecurityBindingElement.SslProtocols%2A?displayProperty=fullName&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.TcpTransportSecurity.SslProtocols%2A?displayProperty=fullName&gt;</ph> property</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>transport&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/wcf/transport-of-nettcpbinding.md)</ept> section of the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>netTcpBinding&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/wcf/nettcpbinding.md)</ept> section</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>sslStreamSecurity&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/wcf/sslstreamsecurity.md)</ept> section of the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>customBinding&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)</ept> section</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Windows Presentation Foundation (WPF)</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, Windows Presentation Foundation has been enhanced in the following areas:</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Group sorting<ept id="p1">**</ept> An application that uses a <ph id="ph1">&lt;xref:System.Windows.Data.CollectionView&gt;</ph> object to group data can now explicitly declare how to  sort the groups.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Explicit sorting addresses the problem of non-intuitive ordering that occurs when an app dynamically adds or removes groups, or when it changes the value of item properties involved in grouping.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>It can also improve the performance of the group creation process by moving comparisons of the grouping properties from the sort of the full collection to the sort of the groups.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>To support group sorting, the new <ph id="ph1">&lt;xref:System.ComponentModel.GroupDescription.SortDescriptions%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.GroupDescription.CustomSort%2A?displayProperty=fullName&gt;</ph> properties describe how to sort the collection of groups produced by the <ph id="ph3">&lt;xref:System.ComponentModel.GroupDescription&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>This is analogous to the way the identically named <ph id="ph1">&lt;xref:System.Windows.Data.ListCollectionView&gt;</ph> properties describe how to sort the data items.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Two new static properties of the <ph id="ph1">&lt;xref:System.Windows.Data.PropertyGroupDescription&gt;</ph> class,  <ph id="ph2">&lt;xref:System.Windows.Data.PropertyGroupDescription.CompareNameAscending%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.PropertyGroupDescription.CompareNameDescending%2A&gt;</ph>, can be used for the most common cases.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>For example, the following XAML groups data by age, sort the age groups in ascending order, and group the items within each age group by last name.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Soft keyboard support<ept id="p1">**</ept> Soft Keyboard support enables focus tracking in a WPF applications by automatically invoking and dismissing the new Soft Keyboard in Windows 10 when the touch input is received by a control that can take textual input.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>In previous versions of the .NET Framework, WPF applications cannot opt into the focus tracking without disabling WPF pen/touch gesture support.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>As a result, WPF applications must choose between full WPF touch support or rely on Windows mouse promotion.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Per-monitor DPI<ept id="p1">**</ept> To support the recent proliferation of high-DPI and hybrid-DPI environments for WPF apps, WPF in the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> enables per-monitor awareness.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>samples and developer guide<ept id="p1">](https://github.com/Microsoft/WPF-Samples/tree/master/PerMonitorDPI)</ept> on GitHub for more information about how to enable your WPF app to become per-monitor DPI aware.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>In previous versions of the .NET Framework, WPF apps are system-DPI aware.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>In other words, the application's UI is scaled by the OS as appropriate, depending on the DPI of the monitor on which the app is rendered.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>For apps running under the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, you can disable per-monitor DPI changes in WPF apps by adding a configuration statement to the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>runtime&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application configuration file, as follows:</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation (WF)</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, Windows Workflow Foundation has been enhanced in the following area:</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for C# expressions and IntelliSense in the Re-hosted WF Designer<ept id="p1">**</ept> Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, WF supports C# expressions in both the Visual Studio Designer and in code workflows.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>The Re-hosted Workflow Designer is a key feature of WF that allows for the Workflow Designer to be in an application outside Visual Studio (for example, in WPF).</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation provides the ability to support C# expressions and IntelliSense in the Re-hosted Workflow Designer.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Windows Workflow Foundation blog<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=809042&amp;clcid=0x409)</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Availability of IntelliSense when a customer rebuilds a workflow project from Visual Studio`</ph> In versions of the .NET Framework prior to the <ph id="ph2">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, WF Designer IntelliSense is broken when a customer rebuilds a workflow project from Visual Studio.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>While the project build is successful, the workflow types are not found on the designer, and warnings from IntelliSense for the missing workflow types appear in the <bpt id="p1">**</bpt>Error List<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> addresses this issue and makes IntelliSense available.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Workflow V1 applications with Workflow Tracking on now run under FIPS-mode<ept id="p1">**</ept> Machines with FIPS Compliance Mode enabled can now successfully run a workflow Version 1-style application with Workflow tracking on.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>To enable this scenario, you must make the following change to your app.config file:</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>If this scenario is not enabled, running the application continues to generate an exception with the message, "This implementation is not part of the Windows Platform FIPS validated cryptographic algorithms."</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Workflow Improvements when using Dynamic Update with Visual Studio Workflow Designer<ept id="p1">**</ept> The Workflow Designer, FlowChart Activity Designer, and other Workflow Activity Designers now successfully load and display workflows that have been saved after calling  the <ph id="ph1">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>In versions of the .NET Framework before the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph>, loading a XAML file in Visual Studio for a workflow that has been saved after calling <ph id="ph2">&lt;xref:System.Activities.DynamicUpdate.DynamicUpdateServices.PrepareForUpdate%2A?displayProperty=fullName&gt;</ph> can result in the following issues:</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The Workflow Designer can't load the XAML file correctly (when the <ph id="ph1">&lt;xref:System.Activities.Presentation.ViewState.ViewStateData.Id%2A?displayProperty=fullName&gt;</ph> is at the end of the line).</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Flowchart Activity Designer or other Workflow Activity Designers may display all objects in their default locations as opposed to attached property values.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>ClickOnce</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>ClickOnce has been updated to support TLS 1.1 and TLS 1.2 in addition to the 1.0 protocol, which it already supports.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>ClickOnce automatically detects which protocol is required; no extra steps within the ClickOnce application are required to enable TLS 1.1 and 1.2 support.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Converting Windows Forms and WPF apps to  UWP apps</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Windows now offers capabilities to bring existing Windows desktop apps, including WPF and Windows Forms apps, to the Universal Windows Platform (UWP).</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>This technology acts as a bridge by enabling you to gradually migrate your existing code base to UWP, thereby bringing your app to all Windows 10 devices.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Converted desktop apps gain an app identity similar to the app identity of UWP apps, which makes UWP APIs accessible to enable features such as Live Tiles and notifications.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The app continues to behave as before and runs as a full trust app.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Once the app is converted, an app container process can be added to the existing full trust process to add an adaptive user interface.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>When all functionality is moved to the app container process, the full trust process can be removed and the new UWP app can be made available to all Windows 10 devices.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Debugging improvements</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>unmanaged debugging API<ept id="p1">*</ept> has been enhanced in the <ph id="ph1">[!INCLUDE[net_v462](../../../includes/net-v462-md.md)]</ph> to perform additional analysis when a <ph id="ph2">&lt;xref:System.NullReferenceException&gt;</ph> is thrown so that it is possible to determine which variable in a single line of source code is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>To support this scenario, the following APIs have been added to the unmanaged debugging API.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorDebugCode4<ept id="p1">](../../../docs/framework/unmanaged-api/debugging/icordebugcode4-interface.md)</ept>, <bpt id="p2">[</bpt>ICorDebugVariableHome<ept id="p2">](../../../docs/framework/unmanaged-api/debugging/icordebugvariablehome-interface.md)</ept>, and <bpt id="p3">[</bpt>ICorDebugVariableHomeEnum<ept id="p3">](../../../docs/framework/unmanaged-api/debugging/icordebugvariablehomeenum-interface.md)</ept> interfaces, which expose the native homes of managed variables.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This enables debuggers to do some code flow analysis when a  <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> occurs and to work backwards to determine the managed variable that corresponds to the native location that was <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorDebugType2::GetTypeID<ept id="p1">](../../../docs/framework/unmanaged-api/debugging/icordebugtype2-gettypeid-method.md)</ept> method provides a mapping for ICorDebugType to <bpt id="p2">[</bpt>COR_TYPEID<ept id="p2">](../../../docs/framework/unmanaged-api/debugging/cor-typeid-structure.md)</ept>, which allows the debugger to obtain a <bpt id="p3">[</bpt>COR_TYPEID<ept id="p3">](../../../docs/framework/unmanaged-api/debugging/cor-typeid-structure.md)</ept> without an instance of the ICorDebugType.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Existing APIs on <bpt id="p1">[</bpt>COR_TYPEID<ept id="p1">](../../../docs/framework/unmanaged-api/debugging/cor-typeid-structure.md)</ept> can then be used to determine the class layout of the type.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>What's new in the .NET Framework 4.6.1</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph> includes new features in the following areas:</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cryptography<ept id="p1">](#Crypto)</ept></source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET<ept id="p1">](#ADO.NET461)</ept></source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Presentation Foundation (WPF)<ept id="p1">](#WPF461)</ept></source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Workflow Foundation<ept id="p1">](#WWF461)</ept></source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Profiling<ept id="p1">](#Profile461)</ept></source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NGen<ept id="p1">](#NGEN461)</ept></source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>For more information on the <ph id="ph1">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph>, see the following topics:</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Framework 4.6.1 list of changes<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=622964)</ept></source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Compatibility in 4.6.1<ept id="p1">](../../../docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-6-1.md)</ept></source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The .NET Framework API diff<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=622989)</ept> (on GitHub)</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Cryptography: Support for X509 certificates containing ECDSA</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.6 added RSACng support for X509 certificates.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph> adds support for ECDSA (Elliptic Curve Digital Signature Algorithm) X509 certificates.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>ECDSA offers better performance and is a more secure cryptography algorithm than RSA, providing an excellent choice where Transport Layer Security (TLS) performance and scalability is a concern.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The .NET Framework implementation wraps calls into existing Windows functionality.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The following example code shows how easy it is to generate a signature for a byte stream by using the new  support for ECDSA  X509 certificates included in the <ph id="ph1">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>whatsnew.461.crypto#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/whatsnew.461.crypto/cs/Code46.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>whatsnew.461.crypto#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/whatsnew.461.crypto/vb/Code461.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>This offers a marked contrast to the code needed to generate a signature in the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>whatsnew.461.crypto#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/whatsnew.461.crypto/cs/Code46.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>whatsnew.461.crypto#2<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/whatsnew.461.crypto/vb/Code46.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>ADO.NET</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The following have been added to ADO.NET:</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Always Encrypted support for hardware protected keys ADO.NET now supports storing Always Encrypted column master keys natively in Hardware Security Modules (HSMs).</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>With this support, customers can leverage asymmetric keys stored in HSMs without having to write custom column master key store providers and registering them in applications.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Customers need to install the HSM vendor-provided CSP provider or CNG key store providers on the app servers or client computers in order to access Always Encrypted data protected with column master keys stored in a HSM.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Improve <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover%2A&gt;</ph> connection behavior for AlwaysOn SqlClient now automatically provides faster connection to an AlwaysOn Availability Group (AG).</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>It transparently detects whether your application is connecting to an AlwaysOn availability group (AG) on a different subnet and quickly discovers the current active server and provides a connection to the server.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Prior to this release, an application had to set the connection string to include <ph id="ph1">`"MultisubnetFailover=true"`</ph> to indicate that it was connecting to an AlwaysOn Availability Group.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Without setting the connection keyword to <ph id="ph1">`true`</ph>, an application might experience a timeout while connecting to an AlwaysOn Availability Group.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>With this release, an application does <bpt id="p1">*</bpt>not<ept id="p1">*</ept> need to set <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover%2A&gt;</ph> to <ph id="ph2">`true`</ph> anymore.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>For more information about SqlClient support for Always On Availability Groups, see <bpt id="p1">[</bpt>SqlClient Support for High Availability, Disaster Recovery<ept id="p1">](../../../docs/framework/data/adonet/sql/sqlclient-support-for-high-availability-disaster-recovery.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Windows Presentation Foundation (WPF)</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Windows Presentation Foundation includes a number of improvements and changes.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Improved performance The delay in firing touch events has been fixed in the <ph id="ph1">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>In addition, typing in a <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> control no longer ties up the render thread during fast input.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Spell checking improvements The spell checker in WPF has been updated on Windows 8.1 and later versions to leverage operating system support for spell-checking additional languages.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>There is no change in functionality on Windows versions prior to Windows 8.1.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>As in previous versions of the .NET Framework, the language for a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control ora <ph id="ph2">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> block is detected by looking for information in the following order:</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`xml:lang`</ph>, if it is present.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Current input language.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Current thread culture.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>For additional information on language support in WPF, see the <bpt id="p1">[</bpt>WPF blog post on .NET Framework 4.6.1 features<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=691819)</ept>.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Additional support for per-user custom dictionaries In <ph id="ph1">[!INCLUDE[net_v461](../../../includes/net-v461-md.md)]</ph>, WPF recognizes custom dictionaries that are registered globally.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>This capability is available in addition to the ability to register them per-control.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>In previous versions of WPF, custom dictionaries did not recognize Excluded Words and AutoCorrect lists.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>They are supported on Windows 8.1 and Windows 10 through the use of files that can be placed under the <ph id="ph1">`%AppData%\Microsoft\Spelling\&lt;language tag&gt;`</ph> directory.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>The following rules apply to these files:</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>The files should have extensions of .dic (for added words), .exc (for excluded words), or .acl (for AutoCorrect).</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The files should be UTF-16 LE plaintext that starts with the Byte Order Mark (BOM).</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>Each line should consist of a word (in the added and excluded word lists), or an autocorrect pair with the words separated by a vertical bar ("&amp;#124;") (in the AutoCorrect word list).</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>These files are considered read-only and are not modified by the system.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>These new file-formats are not directly supported by the WPF spell checking API’s, and the custom dictionaries supplied to WPF in applications should continue to use .lex files.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>Samples There are a number of <bpt id="p1">[</bpt>WPF Samples<ept id="p1">](https://msdn.microsoft.com/library/ms771633.aspx)</ept> on MSDN.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>More than 200 of the most popular samples (based on their usage) will be moved into an <bpt id="p1">[</bpt>Open Source GitHub repository<ept id="p1">](https://github.com/Microsoft/WPF-Samples)</ept>.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Help us improve our samples by sending us a pull-request or opening a <bpt id="p1">[</bpt>GitHub issue<ept id="p1">](https://github.com/Microsoft/WPF-Samples/issues)</ept>.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>DirectX extensions WPF includes a <bpt id="p1">[</bpt>NuGet package<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=691342)</ept> that provides new implementations of <ph id="ph1">&lt;xref:System.Windows.Interop.D3DImage&gt;</ph> that make it easy for you to interoperate with DX10 and Dx11 content.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The code for this package has been open sourced and is available <bpt id="p1">[</bpt>on GitHub<ept id="p1">](https://github.com/Microsoft/WPFDXInterop)</ept>.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation: Transactions</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistPromotableSinglePhase%2A?displayProperty=fullName&gt;</ph> method can now use a distributed transaction manager other than MSDTC to promote the transaction.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>You do this by specifying a GUID transaction promoter identifier to the  new <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistPromotableSinglePhase%28System.Transactions.IPromotableSinglePhaseNotification%2CSystem.Guid%29?displayProperty=fullName&gt;</ph> overload .</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>If this operation is successful, there are limitations placed on the capabilities of the transaction.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Once a non-MSDTC transaction promoter is enlisted, the following methods throw a <ph id="ph1">&lt;xref:System.Transactions.TransactionPromotionException&gt;</ph> because these methods require promotion to MSDTC:</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>Once a non-MSDTC transaction promoter is enlisted, it must be used for future durable enlistments by using protocols that it defines.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Guid&gt;</ph> of the transaction promoter can be obtained by using the <ph id="ph2">&lt;xref:System.Transactions.Transaction.PromoterType%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>When the transaction promotes, the transaction promoter provides a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array that represents the promoted token.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>An application can obtain the promoted token for a non-MSDTC promoted transaction with the <ph id="ph1">&lt;xref:System.Transactions.Transaction.GetPromotedToken%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Users of the new <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistPromotableSinglePhase%28System.Transactions.IPromotableSinglePhaseNotification%2CSystem.Guid%29?displayProperty=fullName&gt;</ph> overload must follow a specific call sequence in order for the promotion operation to complete successfully.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>These rules are documented in the method's documentation.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Profiling</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The unmanaged profiling API has been enhanced follows:</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Better support for accessing PDBs in the <bpt id="p1">[</bpt>ICorProfilerInfo7<ept id="p1">](../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo7-interface.md)</ept> interface In ASP.Net 5, it is becoming much more common for assemblies to be compiled in-memory by Roslyn.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>For developers making profiling tools, this means that PDBs that historically were serialized on disk may no longer be present.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Profiler tools often use PDBs to map code back to source lines for tasks such as code coverage or line-by-line performance analysis.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorProfilerInfo7<ept id="p1">](../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo7-interface.md)</ept> interface now includes two new methods, <bpt id="p2">[</bpt>ICorProfilerInfo7::GetInMemorySymbolsLength<ept id="p2">](../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo7-getinmemorysymbolslength-method.md)</ept> and <bpt id="p3">[</bpt>ICorProfilerInfo7::ReadInMemorySymbols<ept id="p3">](../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo7-readinmemorysymbols.md)</ept>, to provide these profiler tools with access to the in-memory PDB data, By using the new APIs, a profiler can obtain the contents of an in-memory PDB as a byte array and then process it or serialize it to disk.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Better instrumentation with the ICorProfiler interface Profilers that are using the <ph id="ph1">`ICorProfiler`</ph> API’s ReJit functionality for dynamic instrumentation can now modify some metadata.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Previously such tools could instrument IL at any time, but metadata could only be modified at module load time.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Because IL refers to metadata, this limited the kinds of instrumentation that could be done.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>We have lifted some of those limits by adding the <bpt id="p1">[</bpt>ICorProfilerInfo7::ApplyMetaData<ept id="p1">](../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo7-applymetadata-method.md)</ept> method to support a subset of metadata edits after the module loads, in particular by adding new <ph id="ph1">`AssemblyRef`</ph>, <ph id="ph2">`TypeRef`</ph>, <ph id="ph3">`TypeSpec`</ph>, <ph id="ph4">`MemberRef`</ph>, <ph id="ph5">`MemberSpec`</ph>, and <ph id="ph6">`UserString`</ph> records.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>This change makes a much broader range of on-the-fly instrumentation possible.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Native Image Generator (NGEN) PDBs</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Cross-machine event tracing allows customers to profile a program on Machine A and look at the profiling data with source line mapping on Machine B. Using previous versions of the .NET Framework, the user would copy all the modules and native images from the profiled machine to the analysis machine that contains the IL PDB to create the source-to-native mapping.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>While this process may work well when the files are relatively small, such as for phone applications, the files can be very large on desktop systems and require significant time to copy.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>With Ngen PDBs, NGen can create a PDB that contains the IL-to-native mapping without a dependency on the IL PDB.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>In our cross-machine event tracing scenario, all that is needed is to copy the native image PDB that is generated by Machine A to Machine B and to use <bpt id="p1">[</bpt>Debug Interface Access APIs<ept id="p1">](https://msdn.microsoft.com/library/ee8x173s.aspx)</ept> to read the IL PDB's source-to-IL mapping and the native image PDB's IL-to-native mapping.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Combining both mappings provides a source-to-native mapping.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Since the native image PDB is much smaller than all the modules and native images, the process of copying from Machine A to Machine B is much faster.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>What's new in .NET 2015</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>.NET 2015 introduces the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> and .NET Core.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Some new features apply to both, and other features are specific to <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> or <ph id="ph2">[!INCLUDE[net_core](../../../includes/net-core-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ASP.NET 5<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>.NET 2015 includes ASP.NET 5, which is a lean .NET platform for building modern cloud-based apps.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The platform is modular so you can include only those features that are needed in your application.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>It can be hosted on IIS or self-hosted in a custom process, and you can run apps with different versions of the .NET Framework on the same server.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>It includes a new environment configuration system that is designed for cloud deployment.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>MVC, Web API, and Web Pages are unified into a single framework called MVC 6.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>You build ASP.NET 5 apps through the new tools in Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Your existing applications will work on the new .NET Framework; however to build an app that uses MVC 6 or SignalR 3, you must use the project system in Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>For information, see <bpt id="p1">[</bpt>ASP.NET 5<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=518238)</ept>.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ASP.NET Updates<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Task-based API for Asynchronous Response Flushing<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>ASP.NET now provides a simple task-based API for asynchronous response flushing, <ph id="ph1">&lt;xref:System.Web.HttpResponse.FlushAsync%2A?displayProperty=fullName&gt;</ph>, that allows responses to be flushed asynchronously by using your language's <ph id="ph2">`async/await`</ph> support.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, ASP.NET added the Model Binding feature that enabled an extensible, code-focused approach to CRUD-based data operations in Web Forms pages and user controls.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The Model Binding system now supports <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>-returning model binding methods.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>This feature allows Web Forms developers to get the scalability benefits of async with the ease of the data-binding system when using newer versions of ORMs, including the Entity Framework.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Async model binding is controlled by the <ph id="ph1">`aspnet:EnableAsyncModelBinding`</ph> configuration setting.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>On apps the target the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph>, it defaults to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>On apps running on the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> that target an earlier version of the .NET Framework, it is <ph id="ph2">`false`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>It can be enabled by setting the configuration setting to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HTTP/2 Support (Windows 10)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>HTTP/2<ept id="p1">](http://www.wikipedia.org/wiki/HTTP/2)</ept> is a new version of the HTTP protocol that provides much better connection utilization (fewer round-trips between client and server), resulting in lower latency web page loading for users.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Web pages (as opposed to services) benefit the most from HTTP/2, since the protocol optimizes for multiple artifacts being requested as part of a single experience.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>HTTP/2 support has been added to ASP.NET in the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Because networking functionality exists at multiple layers, new features were required in Windows, in IIS, and in ASP.NET to enable HTTP/2.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>You must be running on Windows 10 to use HTTP/2 with ASP.NET.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>HTTP/2 is also supported and on by default for Windows 10 Universal Windows Platform (UWP) apps that use the <ph id="ph1">&lt;xref:System.Net.Http.HttpClient?displayProperty=fullName&gt;</ph> API.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>In order to provide a way to use the <bpt id="p1">[</bpt>PUSH_PROMISE<ept id="p1">](http://http2.github.io/http2-spec/#PUSH_PROMISE)</ept> feature in ASP.NET applications, a new method with two overloads, <ph id="ph1">&lt;xref:System.Web.HttpResponse.PushPromise%28System.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpResponse.PushPromise%28System.String%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29&gt;</ph>, has been added to the <ph id="ph3">&lt;xref:System.Web.HttpResponse&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>While ASP.NET 5 supports HTTP/2, support for the PUSH PROMISE feature has not yet been added.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The browser and the web server (IIS on Windows) do all the work.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>You don't have to do any heavy-lifting for your users.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Most of the <bpt id="p1">[</bpt>major browsers support HTTP/2<ept id="p1">](http://www.wikipedia.org/wiki/HTTP/2)</ept>, so it's likely that your users will benefit from HTTP/2 support if your server supports it.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for the Token Binding Protocol<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Microsoft and Google have been collaborating on a new approach to authentication, called the <bpt id="p1">[</bpt>Token Binding Protocol<ept id="p1">](https://github.com/TokenBinding/Internet-Drafts)</ept>.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>The premise is that authentication tokens (in your browser cache) can be stolen and used by criminals to access otherwise secure resources (e.g. your bank account) without requiring your password or any other privileged knowledge.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The new protocol aims to mitigate this problem.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The Token Binding Protocol will be implemented in Windows 10 as a browser feature.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>ASP.NET apps will participate in the protocol, so that authentication tokens are validated to be legitimate.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The client and the server implementations establish the end-to-end protection specified by the protocol.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Randomized string hash algorithms<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.5 introduced a <bpt id="p1">[</bpt>randomized string hash algorithm<ept id="p1">](../configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>However, it was not supported by ASP.NET because of some ASP.NET features depended on a stable hash code.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph>, randomized string hash algorithms are now supported.</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>To enable this feature, use the <ph id="ph1">`aspnet:UseRandomizedStringHashAlgorithm`</ph> config setting.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ADO.NET<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>ADO .NET now supports the Always Encrypted feature available in SQL Server 2016 Community Technology Preview 2 (CTP2).</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>With Always Encrypted, SQL Server can perform operations on encrypted data, and best of all the encryption key resides with the application inside the customer’s trusted environment and not on the server.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Always Encrypted secures customer data so DBAs do not have access to plain text data.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Encryption and decryption of data happens transparently at the driver level, minimizing changes that have to be made to existing applications.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Always Encrypted (Database Engine)<ept id="p1">](/sql/relational-databases/security/encryption/always-encrypted-database-engine)</ept> and <bpt id="p2">[</bpt>Always Encrypted (client development)<ept id="p2">](/sql/relational-databases/security/encryption/always-encrypted-client-development)</ept>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>64-bit JIT Compiler for managed code<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.6 features a new version of the 64-bit JIT compiler (originally code-named RyuJIT).</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The new 64-bit compiler provides significant performance improvements over the older 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>The new 64-bit compiler is enabled for 64-bit processes running on top of the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Your app will run in a 64-bit process if it is compiled as 64-bit or AnyCPU and is running on a 64-bit operating system.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>While care has been taken to make the transition to the new compiler as transparent as possible, changes in behavior are possible.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>We would like to hear directly about any issues encountered when using the new JIT compiler.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Please contact us through <bpt id="p1">[</bpt>Microsoft Connect<ept id="p1">](http://connect.microsoft.com/)</ept> if you encounter an issue that may be related to the new 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The new 64-bit JIT compiler also includes hardware SIMD acceleration features when coupled with SIMD-enabled types in the <ph id="ph1">&lt;xref:System.Numerics&gt;</ph> namespace, which can yield good performance improvements.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assembly loader improvements<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The assembly loader now uses memory more efficiently by unloading IL assemblies after a corresponding NGEN image is loaded.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>This change decreases virtual memory, which is particularly beneficial for large 32-bit apps (such as Visual Studio), and also saves physical memory.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Base class library changes<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Many new APIs have been added around to <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> to enable key scenarios.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>These include the following changes and additions:</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IReadOnlyCollection<ph id="ph1">\&lt;</ph>T&gt; implementations<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Additional collections implement <ph id="ph1">&lt;xref:System.Collections.Generic.IReadOnlyCollection%601&gt;</ph> such as <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CultureInfo.CurrentCulture and CultureInfo.CurrentUICulture<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> properties are now read-write rather than read-only.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>If you assign a new <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object to these properties, the current thread culture defined by the <ph id="ph2">`Thread.CurrentThread.CurrentCulture`</ph> property and the current UI thread culture defined by the <ph id="ph3">`Thread.CurrentThread.CurrentUICulture`</ph> properties also change.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Enhancements to garbage collection (GC)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.GC&gt;</ph> class now includes <ph id="ph2">&lt;xref:System.GC.TryStartNoGCRegion%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.GC.EndNoGCRegion%2A&gt;</ph> methods that allow you to disallow garbage collection during the execution of a critical path.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>A new overload of the <ph id="ph1">&lt;xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName&gt;</ph> method allows you to control whether both the small object heap and the large object heap are swept and compacted or swept only.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SIMD-enabled types<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics&gt;</ph> namespace now includes a number of SIMD-enabled types, such as <ph id="ph2">&lt;xref:System.Numerics.Matrix3x2&gt;</ph>, <ph id="ph3">&lt;xref:System.Numerics.Matrix4x4&gt;</ph>, <ph id="ph4">&lt;xref:System.Numerics.Plane&gt;</ph>, <ph id="ph5">&lt;xref:System.Numerics.Quaternion&gt;</ph>, <ph id="ph6">&lt;xref:System.Numerics.Vector2&gt;</ph>, <ph id="ph7">&lt;xref:System.Numerics.Vector3&gt;</ph>, and <ph id="ph8">&lt;xref:System.Numerics.Vector4&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Because the new 64-bit JIT compiler also includes hardware SIMD acceleration features, there are especially significant performance improvements when using the SIMD-enabled types with the new 64-bit JIT compiler.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cryptography updates<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography?displayProperty=fullName&gt;</ph> API is being updated to support the <bpt id="p1">[</bpt>Windows CNG cryptography APIs<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/aa376214.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Previous versions of the .NET Framework have relied entirely on an <bpt id="p1">[</bpt>earlier version of the Windows Cryptography APIs<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/aa380255.aspx)</ept> as the basis for the <ph id="ph1">&lt;xref:System.Security.Cryptography?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>We have had requests to support the CNG API, since it supports <bpt id="p1">[</bpt>modern cryptography algorithms<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/bb204775.aspx#suite_b_support)</ept>, which are important for certain categories of apps.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.6 includes the following new enhancements to support the Windows CNG cryptography APIs:</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>A set of extension methods for X509 Certificates, <ph id="ph1">`System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)`</ph> and <ph id="ph2">`System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)`</ph>, that return a CNG-based implementation rather than a CAPI-based implementation when possible.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>(Some smartcards, etc., still require CAPI, and the APIs handle the fallback).</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACng?displayProperty=fullName&gt;</ph> class, which provides a CNG implementation of the RSA algorithm.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Enhancements to the RSA API so that common actions no longer require casting.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>For example, encrypting data using an <ph id="ph1">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2&gt;</ph> object requires code like the following in previous versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WhatsNew.Casting#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/whatsnew.casting/cs/program.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>WhatsNew.Casting#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/whatsnew.casting/vb/module1.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Code that uses the new cryptography APIs in the .NET Framework 4.6 can be rewritten as follows to avoid the cast.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WhatsNew.Casting#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/whatsnew.casting/cs/program.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>WhatsNew.Casting#2<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/whatsnew.casting/vb/module1.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for converting dates and times to or from Unix time<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The following new methods have been added to the <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> structure to support converting date and time values to or from Unix time:</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Compatibility switches<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref:System.AppContext&gt;</ph> class adds a new compatibility feature that enables library writers to provide a uniform opt-out mechanism for new functionality for their users.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>It establishes a loosely-coupled contract between components in order to communicate an opt-out request.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>This capability is typically important when a change is made to existing functionality.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Conversely, there is already an implicit opt-in for new functionality.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">&lt;xref:System.AppContext&gt;</ph>, libraries define and expose compatibility switches, while code that depends on them can set those switches to affect the library behavior.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>By default, libraries provide the new functionality, and they only alter it (that is, they provide the previous functionality) if the switch is set.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>An application (or a library) can declare the value of a switch (which is always a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value) that a dependent library defines.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>The switch is always implicitly <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Setting the switch to <ph id="ph1">`true`</ph> enables it.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Explicitly setting the switch to <ph id="ph1">`false`</ph> provides the new behavior.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>The library must check if a consumer has declared the value of the switch and then appropriately act on it.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>It's beneficial to use a consistent format for switches, since they are a formal contract exposed by a library.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>The following are two obvious formats.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>namespace<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept>.<bpt id="p2">*</bpt>library<ept id="p2">*</ept>.<bpt id="p3">*</bpt>switchname<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Changes to the task-based asynchronous pattern (TAP)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>For apps that target the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects inherit the culture and UI culture of the calling thread.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>The behavior of apps that target previous versions of the .NET Framework, or that do not target a specific version of the .NET Framework, is unaffected.</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>For more information, see the "Culture and task-based asynchronous operations" section of the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class topic.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AsyncLocal%601?displayProperty=fullName&gt;</ph> class allows you to represent ambient data that is local to a given asynchronous control flow, such as an <ph id="ph2">`async`</ph> method.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>It can be used to persist data across threads.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>You can also define a callback method that is notified whenever the ambient data changes either because the <ph id="ph1">&lt;xref:System.Threading.AsyncLocal%601.Value%2A?displayProperty=fullName&gt;</ph> property was explicitly changed, or because the thread encountered a context transition.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Three convenience methods, <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.CompletedTask%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.FromCanceled%2A?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Tasks.Task.FromException%2A?displayProperty=fullName&gt;</ph>, have been added to the task-based asynchronous pattern (TAP) to return completed tasks in a particular state.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.Pipes.NamedPipeClientStream&gt;</ph> class now supports asynchronous communication with its new <ph id="ph2">&lt;xref:System.IO.Pipes.NamedPipeClientStream.ConnectAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>method.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EventSource now supports writing to the Event log<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>You now can use the <ph id="ph1">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> class to log administrative or operational messages to the event log, in addition to any existing ETW sessions created on the machine.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>In the past, you had to use the Microsoft.Diagnostics.Tracing.EventSource NuGet package for this functionality.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>This functionality is now built-into the .NET Framework 4.6.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Both the NuGet package and the .NET Framework 4.6 have been updated with the following features:</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dynamic events<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Allows events defined "on the fly" without creating event methods.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Rich payloads<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Allows specially attributed classes and arrays as well as primitive types to be passed as a payload</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Activity tracking<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>Causes Start and Stop events to tag events between them with an ID that represents all currently active activities.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>To support these features, the overloaded <ph id="ph1">&lt;xref:System.Diagnostics.Tracing.EventSource.Write%2A&gt;</ph> method has been added to the <ph id="ph2">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows Presentation Foundation (WPF)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HDPI improvements<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>HDPI support in WPF is now better in the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Changes have been made to layout rounding to reduce instances of clipping in controls with borders.</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>By default, this feature is enabled only if your <ph id="ph1">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph> is set to .NET 4.6.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Applications that target earlier versions of the framework but are running on the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> can opt in to the new behavior by adding the following line to the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>runtime&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the app.config file:</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>WPF windows straddling multiple monitors with different DPI settings (Multi-DPI setup) are now completely rendered without blacked-out regions.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>You can opt out of this behavior by adding the following line to the <ph id="ph1">`&lt;appSettings&gt;`</ph> section of the app.config file to disable this new behavior:</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>Support for automatically loading the right cursor based on DPI setting has been added to  <ph id="ph1">&lt;xref:System.Windows.Input.Cursor?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Touch is better<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Customer reports on <bpt id="p1">[</bpt>Connect<ept id="p1">](https://connect.microsoft.com/VisualStudio/feedback/details/903760/)</ept> that touch produces unpredictable behavior have been addressed in the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>The double tap threshold for Windows Store applications and WPF applications is now the same in Windows 8.1 and above.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Transparent child window support<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>WPF in the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> supports transparent child windows in Windows 8.1 and above.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>This allows you to create non-rectangular and transparent child windows in your top-level windows.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>You can enable this feature by setting the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelTransparency%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows Communication Foundation (WCF)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SSL support<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>WCF now supports SSL version TLS 1.1 and TLS 1.2, in addition to SSL 3.0 and TLS 1.0, when using NetTcp with transport security and client authentication.</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>It is now possible to select which protocol to use, or to disable old lesser secure protocols.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>This can be done either by setting the <ph id="ph1">&lt;xref:System.ServiceModel.TcpTransportSecurity.SslProtocols%2A&gt;</ph> property or by adding the following to a configuration file.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sending messages using different HTTP connections<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>WCF now allows users to ensure certain messages are sent using different underlying HTTP connections.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>There are two ways to do this:</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Using a connection group name prefix<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Users can specify a string that WCF will use as a prefix achieve for the connection group name.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Two messages with different prefixes are sent using different underlying HTTP connections.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>You set the prefix by adding a key/value pair to the message's <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.Properties%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>The key is "HttpTransportConnectionGroupNamePrefix"; the value is the desired prefix.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Using different channel factories<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Users can also enable a feature that ensures that messages sent using channels created by different channel factories will use different underlying HTTP connections.</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>To enable this feature, users must set the following <ph id="ph1">`appSetting`</ph> to <ph id="ph2">`true`</ph>:</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows Workflow Foundation (WWF)<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>You can now specify the number of seconds a workflow service will hold on to an out-of-order operation request when there is an outstanding "non-protocol" bookmark before timing out the request.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>A "non-protocol" bookmark is a bookmark that is not related to outstanding Receive activities.</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Some activities create non-protocol bookmarks within their implementation, so it may not be obvious that a non-protocol bookmark exists.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>These include State and Pick.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>So if you have a workflow service implemented with a state machine or containing a Pick activity, you will most likely have non-protocol bookmarks.</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>You specify the interval by adding a line like the following to the <ph id="ph1">`appSettings`</ph> section of your app.config file:</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>The default value is 60 seconds.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`value`</ph> is set to 0, out-of-order requests are immediately rejected with a fault with text that looks like this:</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>This is the same message that you receive if an out-of-order operation message is received and there are no non-protocol bookmarks.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>If the value of the <ph id="ph1">`FilterResumeTimeoutInSeconds`</ph> element is non-zero, there are non-protocol bookmarks, and the timeout interval expires, the operation fails with a timeout message.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Transactions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>You can now include the distributed transaction identifier for the transaction that has caused an exception derived from <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> to be thrown.</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>You do this by adding the following key to the <ph id="ph1">`appSettings`</ph> section of your app.config file:</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Networking<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Socket reuse<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Windows 10 includes a new high-scalability networking algorithm that makes better use of machine resources by reusing local ports for outbound TCP connections.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.6 supports the new algorithm, enabling .NET apps to take advantage of the new behavior.</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>In previous versions of Windows, there was an artificial concurrent connection limit (typically 16,384, the default size of the dynamic port range), which could limit the scalability of a service by causing port exhaustion when under load.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph>, two new APIs have been added to enable port reuse, which effectively removes the 64K limit on concurrent connections:</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph> enumeration value.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.ServicePointManager.ReusePort%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">&lt;xref:System.Net.ServicePointManager.ReusePort%2A?displayProperty=fullName&gt;</ph> property is <ph id="ph2">`false`</ph> unless the <ph id="ph3">`HWRPortReuseOnSocketBind`</ph> value of the <ph id="ph4">`HKLM\SOFTWARE\Microsoft\.NETFramework\v4.0.30319`</ph> registry key is set to 0x1.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>To enable local port reuse on HTTP connections, set the <ph id="ph1">&lt;xref:System.Net.ServicePointManager.ReusePort%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>This causes all outgoing TCP socket connections from <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.HttpWebRequest&gt;</ph> to use a new Windows 10 socket option, <bpt id="p1">[</bpt>SO_REUSE_UNICASTPORT<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms740532.aspx)</ept>, that enables local port reuse.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Developers writing a sockets-only application can specify the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName&gt;</ph> option when calling a method such as <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=fullName&gt;</ph> so that outbound sockets reuse local ports during binding.</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for international domain names and PunyCode<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>A new property, <ph id="ph1">&lt;xref:System.Uri.IdnHost%2A&gt;</ph>, has been added to the <ph id="ph2">&lt;xref:System.Uri&gt;</ph> class to better support international domain names and PunyCode.</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resizing in Windows Forms controls.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>This feature has been expanded in <ph id="ph1">[!INCLUDE[net_v46](../../../includes/net-v46-md.md)]</ph> to include the <ph id="ph2">&lt;xref:System.Windows.Forms.DomainUpDown&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.NumericUpDown&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.DataGridViewComboBoxColumn&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.DataGridViewColumn&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Forms.ToolStripSplitButton&gt;</ph> types and the rectangle specified by the <ph id="ph7">&lt;xref:System.Drawing.Design.PaintValueEventArgs.Bounds%2A&gt;</ph> property used when drawing a <ph id="ph8">&lt;xref:System.Drawing.Design.UITypeEditor&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>This is an opt-in feature.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>To enable it, set the <ph id="ph1">`EnableWindowsFormsHighDpiAutoResizing`</ph> element to <ph id="ph2">`true`</ph> in the application configuration (app.config) file:</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for code page encodings<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_core](../../../includes/net-core-md.md)]</ph> primarily supports the Unicode encodings and by default provides limited support for code page encodings.</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>You can add support for code page encodings available in the .NET Framework but unsupported in <ph id="ph1">[!INCLUDE[net_core](../../../includes/net-core-md.md)]</ph> by registering code page encodings with the <ph id="ph2">&lt;xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Text.CodePagesEncodingProvider?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Native<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Windows apps for Windows 10 that target <ph id="ph1">[!INCLUDE[net_core](../../../includes/net-core-md.md)]</ph> and are written in C# or Visual Basic can take advantage of a new technology that compiles apps to native code rather than IL.</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>They produce apps characterized by faster startup and execution times.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Compiling Apps with .NET Native<ept id="p1">](../../../docs/framework/net-native/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>For an overview of .NET Native that examines how it differs from both JIT compilation and NGEN and what that means for your code, see <bpt id="p1">[</bpt>.NET Native and Compilation<ept id="p1">](../../../docs/framework/net-native/net-native-and-compilation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Your apps are compiled to native code by default when you compile them with Visual Studio 2015.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Getting Started with .NET Native<ept id="p1">](../../../docs/framework/net-native/getting-started-with-net-native.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>To support debugging .NET Native apps, a number of new interfaces and enumerations have been added to the unmanaged debugging API.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Debugging (Unmanaged API Reference)<ept id="p1">](../../../docs/framework/unmanaged-api/debugging/index.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Open-source .NET Framework packages<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_core](../../../includes/net-core-md.md)]</ph> packages such as the immutable collections, <bpt id="p1">[</bpt>SIMD APIs<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=518639)</ept>, and networking APIs such as those found in the <ph id="ph2">&lt;xref:System.Net.Http&gt;</ph> namespace are now available as open source packages on <bpt id="p2">[</bpt>GitHub<ept id="p2">](https://github.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>To access the code, see <bpt id="p1">[</bpt>NetFx on GitHub<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=518634)</ept>.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>For more information and how to contribute to these packages, see <bpt id="p1">[</bpt>.NET Core and Open-Source<ept id="p1">](../../../docs/framework/get-started/net-core-and-open-source.md)</ept>, <bpt id="p2">[</bpt>.NET Home Page on GitHub<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=518635)</ept>.</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#introduction)</ept></source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>What's new in the .NET Framework 4.5.2</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New APIs for ASP.NET apps.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref:System.Web.HttpResponse.AddOnSendingHeaders%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpResponseBase.AddOnSendingHeaders%2A?displayProperty=fullName&gt;</ph> methods let you inspect and modify response headers and status code as the response is being flushed to the client app.</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Consider using these methods instead of the <ph id="ph1">&lt;xref:System.Web.HttpApplication.PreSendRequestHeaders&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpApplication.PreSendRequestContent&gt;</ph> events; they are more efficient and reliable.</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.HostingEnvironment.QueueBackgroundWorkItem%2A?displayProperty=fullName&gt;</ph> method lets you schedule small background work items.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>ASP.NET tracks these items and prevents IIS from abruptly terminating the worker process until all background work items have completed.</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>This method can't be called outside an ASP.NET managed app domain.</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref:System.Web.HttpResponse.HeadersWritten?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.HttpResponseBase.HeadersWritten?displayProperty=fullName&gt;</ph> properties return Boolean values that indicate whether the response headers have been written.</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>You can use these properties to make sure that calls to APIs such as <ph id="ph1">&lt;xref:System.Web.HttpResponse.StatusCode%2A?displayProperty=fullName&gt;</ph> (which throw exceptions if the headers have been written) will succeed.</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resizing in Windows Forms controls.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>This feature has been expanded.</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>You can now use the system DPI setting to resize components of the following additional controls (for example, the drop-down arrow in combo boxes):</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph>    <ph id="ph2">&lt;xref:System.Windows.Forms.ToolStripComboBox&gt;</ph>    <ph id="ph3">&lt;xref:System.Windows.Forms.ToolStripMenuItem&gt;</ph>    <ph id="ph4">&lt;xref:System.Windows.Forms.Cursor&gt;</ph>    <ph id="ph5">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph>    <ph id="ph6">&lt;xref:System.Windows.Forms.DataGridViewComboBoxColumn&gt;</ph></source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>This is an opt-in feature.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>To enable it, set the <ph id="ph1">`EnableWindowsFormsHighDpiAutoResizing`</ph> element to <ph id="ph2">`true`</ph> in the application configuration (app.config) file:</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>New workflow feature.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>A resource manager that's using the <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistPromotableSinglePhase%2A&gt;</ph> method (and therefore implementing the <ph id="ph2">&lt;xref:System.Transactions.IPromotableSinglePhaseNotification&gt;</ph> interface) can use the new <ph id="ph3">&lt;xref:System.Transactions.Transaction.PromoteAndEnlistDurable%2A?displayProperty=fullName&gt;</ph> method to request the following:</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>Promote the transaction to a Microsoft Distributed Transaction Coordinator (MSDTC) transaction.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">&lt;xref:System.Transactions.IPromotableSinglePhaseNotification&gt;</ph> with an <ph id="ph2">&lt;xref:System.Transactions.ISinglePhaseNotification&gt;</ph>, which is a durable enlistment that supports single phase commits.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>This can be done within the same app domain, and doesn't require any extra unmanaged code to interact with MSDTC to perform the promotion.</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>The new method can be called only when there's an outstanding call from <ph id="ph1">&lt;xref:System.Transactions?displayProperty=fullName&gt;</ph> to the <ph id="ph2">&lt;xref:System.Transactions.IPromotableSinglePhaseNotification&gt;</ph><ph id="ph3">`Promote`</ph> method that's implemented by the promotable enlistment.</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Profiling improvements.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>The following new unmanaged profiling APIs provide more robust profiling:</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COR_PRF_ASSEMBLY_REFERENCE_INFO Structure<ept id="p1">](../../../docs/framework/unmanaged-api/profiling/cor-prf-assembly-reference-info-structure.md)</ept> <bpt id="p2">[</bpt>COR_PRF_HIGH_MONITOR Enumeration<ept id="p2">](../../../docs/framework/unmanaged-api/profiling/cor-prf-high-monitor-enumeration.md)</ept> <bpt id="p3">[</bpt>GetAssemblyReferences Method<ept id="p3">](../../../docs/framework/unmanaged-api/profiling/icorprofilercallback6-getassemblyreferences-method.md)</ept> <bpt id="p4">[</bpt>GetEventMask2 Method<ept id="p4">](../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo5-geteventmask2-method.md)</ept> <bpt id="p5">[</bpt>SetEventMask2 Method<ept id="p5">](../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo5-seteventmask2-method.md)</ept> <bpt id="p6">[</bpt>AddAssemblyReference Method<ept id="p6">](../../../docs/framework/unmanaged-api/profiling/icorprofilerassemblyreferenceprovider-addassemblyreference-method.md)</ept></source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Previous <ph id="ph1">`ICorProfiler`</ph> implementations supported lazy loading of dependent assemblies.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>The new profiling APIs require dependent assemblies that are injected by the profiler to be loadable immediately, instead of being loaded after the app is fully initialized.</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>This change doesn't affect users of the existing <ph id="ph1">`ICorProfiler`</ph> APIs.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Debugging improvements.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>The following new unmanaged debugging APIs provide better integration with a profiler.</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>You can now access metadata inserted by the profiler as well as local variables and code produced by compiler ReJIT requests when dump debugging.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SetWriteableMetadataUpdateMode Method<ept id="p1">](../../../docs/framework/unmanaged-api/debugging/icordebugprocess7-setwriteablemetadataupdatemode-method.md)</ept> <bpt id="p2">[</bpt>EnumerateLocalVariablesEx Method<ept id="p2">](../../../docs/framework/unmanaged-api/debugging/icordebugilframe4-enumeratelocalvariablesex-method.md)</ept> <bpt id="p3">[</bpt>GetLocalVariableEx Method<ept id="p3">](../../../docs/framework/unmanaged-api/debugging/icordebugilframe4-getlocalvariableex-method.md)</ept> <bpt id="p4">[</bpt>GetCodeEx Method<ept id="p4">](../../../docs/framework/unmanaged-api/debugging/icordebugilframe4-getcodeex-method.md)</ept> <bpt id="p5">[</bpt>GetActiveReJitRequestILCode Method<ept id="p5">](../../../docs/framework/unmanaged-api/debugging/icordebugfunction3-getactiverejitrequestilcode-method.md)</ept> <bpt id="p6">[</bpt>GetInstrumentedILMap Method<ept id="p6">](../../../docs/framework/unmanaged-api/debugging/icordebugilcode2-getinstrumentedilmap-method.md)</ept></source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Event tracing changes.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.5.2 enables out-of-process, Event Tracing for Windows (ETW)-based activity tracing for a larger surface area.</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>This enables Advanced Power Management (APM) vendors to provide lightweight tools that accurately track the costs of individual requests and activities that cross threads.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>These events are raised only when ETW controllers enable them; therefore, the changes don't affect previously written ETW code or code that runs with ETW disabled.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Promoting a transaction and converting it to a durable enlistment<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Transactions.Transaction.PromoteAndEnlistDurable%2A?displayProperty=fullName&gt;</ph> is a new API added to the .NET Framework 4.5.2 and 4.6:</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>The method may be used by an enlistment that was previously created by <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistPromotableSinglePhase%2A?displayProperty=fullName&gt;</ph> in response to the <ph id="ph2">&lt;xref:System.Transactions.ITransactionPromoter.Promote%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>It asks <ph id="ph1">`System.Transactions`</ph> to promote the transaction to an MSDTC transaction and to "convert" the promotable enlistment to a durable enlistment.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>After this method completes successfully, the <ph id="ph1">&lt;xref:System.Transactions.IPromotableSinglePhaseNotification&gt;</ph> interface will no longer be referenced by <ph id="ph2">`System.Transactions`</ph>, and any future notifications will arrive on the provided <ph id="ph3">&lt;xref:System.Transactions.ISinglePhaseNotification&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>The enlistment in question must act as a durable enlistment, supporting transaction logging and recovery.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Refer to <ph id="ph1">&lt;xref:System.Transactions.Transaction.EnlistDurable%2A?displayProperty=fullName&gt;</ph> for details.</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>In addition, the enlistment must support <ph id="ph1">&lt;xref:System.Transactions.ISinglePhaseNotification&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>This method can <bpt id="p1">*</bpt>only<ept id="p1">*</ept> be called while processing an <ph id="ph1">&lt;xref:System.Transactions.ITransactionPromoter.Promote%2A?displayProperty=fullName&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>If that is not the case, a <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#introduction)</ept></source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>What's new in the .NET Framework 4.5.1</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>April 2014 updates<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio 2013 Update 2<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=393658)</ept> includes updates to the Portable Class Library templates to support these scenarios:</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>You can use Windows Runtime APIs in portable libraries that target Windows 8.1, Windows Phone 8.1, and Windows Phone Silverlight 8.1.</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>You can include XAML (Windows.UI.XAML types) in portable libraries when you target Windows 8.1 or Windows Phone 8.1.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>The following XAML templates are supported:  Blank Page, Resource Dictionary, Templated Control, and User Control.</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>You can create a portable Windows Runtime component (.winmd file) for use in Store apps that target Windows 8.1 and Windows Phone 8.1.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>You can retarget a Windows Store or Windows Phone Store class library like a Portable Class Library.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>For more information about these changes, see <bpt id="p1">[</bpt>Portable Class Library<ept id="p1">](../../../docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>The .NET Framework content set now includes documentation for <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, which is a precompilation technology for building and deploying Windows apps.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> compiles your apps directly to native code, rather than to intermediate language (IL), for better performance.</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Compiling Apps with .NET Native<ept id="p1">](../../../docs/framework/net-native/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>.NET Framework Reference Source<ept id="p1">](http://referencesource.microsoft.com/)</ept> provides a new browsing experience and enhanced functionality.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>You can now browse through the .NET Framework source code online, <bpt id="p1">[</bpt>download the reference<ept id="p1">](http://referencesource.microsoft.com/download.html)</ept> for offline viewing, and step through the sources (including patches and updates) during debugging.</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>For more information, see the blog entry <bpt id="p1">[</bpt>A new look for .NET Reference Source<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2014/02/24/a-new-look-for-net-reference-source/)</ept>.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>Core new features and enhancements in the .NET Framework 4.5.1 include:</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>Automatic binding redirection for assemblies.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph>, when you compile an app that targets the <ph id="ph2">[!INCLUDE[net_v451](../../../includes/net-v451-md.md)]</ph>, binding redirects may be added to the app configuration file if your app or its components reference multiple versions of the same assembly.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>You can also enable this feature for projects that target older versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Enable and Disable Automatic Binding Redirection<ept id="p1">](../../../docs/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Ability to collect diagnostics information to help developers improve the performance of server and cloud applications.</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A&gt;</ph> methods in the <ph id="ph3">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>Ability to explicitly compact the large object heap (LOH) during garbage collection.</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Additional performance improvements such as ASP.NET app suspension, multi-core JIT improvements, and faster app startup after a .NET Framework update.</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>For details, see the <bpt id="p1">[</bpt>.NET Framework 4.5.1 announcement<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2013/06/26/announcing-the-net-framework-4-5-1-preview/)</ept> and the <bpt id="p2">[</bpt>ASP.NET app suspend<ept id="p2">](https://blogs.msdn.microsoft.com/dotnet/2013/10/09/asp-net-app-suspend-responsive-shared-net-web-hosting/)</ept> blog post.</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Improvements to Windows Forms include:</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>Resizing in Windows Forms controls.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>You can use the system DPI setting to resize components of controls (for example, the icons that appear in a property grid) by opting in with an entry in the application configuration file (app.config) for your app.</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>This feature is currently supported in the following Windows Forms controls:</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.PropertyGrid&gt;</ph>    <ph id="ph2">&lt;xref:System.Windows.Forms.TreeView&gt;</ph>    Some aspects of the <ph id="ph3">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> (see <bpt id="p1">[</bpt>new features in 4.5.2<ept id="p1">](#v452)</ept> for additional controls supported)</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>To enable this feature, add a new <ph id="ph1">\&lt;</ph>appSettings&gt; element to the configuration file (app.config) and set the <ph id="ph2">`EnableWindowsFormsHighDpiAutoResizing`</ph> element to <ph id="ph3">`true`</ph>:</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Improvements when debugging your .NET Framework apps in <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph> include:</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Return values in the Visual Studio debugger.</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>When you debug a managed app in <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph>, the Autos window displays return types and values for methods.</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>This information is available for desktop, Windows Store, and Windows Phone apps.</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Examine return values of method calls<ept id="p1">](http://msdn.microsoft.com/library/e3245b37-8e2e-4200-ba84-133726e95f1f\(v=vs.120\).aspx)</ept> in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>Edit and Continue for 64-bit apps.</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph> supports the Edit and Continue feature for 64-bit managed apps for desktop, Windows Store, and Windows Phone.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>The existing limitations remain in effect for both 32-bit and 64-bit apps (see the last section of the <bpt id="p1">[</bpt>Supported Code Changes (C#)<ept id="p1">](/visualstudio/debugger/supported-code-changes-csharp)</ept> article).</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>Async-aware debugging.</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>To make it easier to debug asynchronous apps in <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph>, the call stack hides the infrastructure code provided by compilers to support asynchronous programming, and also chains in logical parent frames so you can follow logical program execution more clearly.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>A Tasks window replaces the Parallel Tasks window and displays tasks that relate to a particular breakpoint, and also displays any other tasks that are currently active or scheduled in the app.</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>You can read about this feature in the "Async-aware debugging" section of the <bpt id="p1">[</bpt>.NET Framework 4.5.1 announcement<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2013/06/26/announcing-the-net-framework-4-5-1-preview/)</ept>.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>Better exception support for Windows Runtime components.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[win81](../../../includes/win81-md.md)]</ph>, exceptions that arise from Windows Store apps preserve information about the error that caused the exception, even across language boundaries.</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>You can read about this feature in the "Windows Store app development" section of the <bpt id="p1">[</bpt>.NET Framework 4.5.1 announcement<ept id="p1">](https://blogs.msdn.microsoft.com/dotnet/2013/06/26/announcing-the-net-framework-4-5-1-preview/)</ept>.</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph>, you can use the <bpt id="p1">[</bpt>Managed Profile Guided Optimization Tool (Mpgo.exe)<ept id="p1">](../../../docs/framework/tools/mpgo-exe-managed-profile-guided-optimization-tool.md)</ept> to optimize <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps as well as desktop apps.</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>For new features in ASP.NET 4.5.1, see <bpt id="p1">[</bpt>ASP.NET 4.5.1 and Visual Studio 2013<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=309094)</ept> on the ASP.NET site.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#introduction)</ept></source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>What's new in the .NET Framework 4.5</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Core new features and improvements</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Ability to reduce system restarts by detecting and closing .NET Framework 4 applications during deployment.</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Reducing System Restarts During .NET Framework 4.5 Installations<ept id="p1">](../../../docs/framework/deployment/reducing-system-restarts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Support for arrays that are larger than 2 gigabytes (GB) on 64-bit platforms.</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>This feature can be enabled in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>gcAllowVeryLargeObjects&gt; element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)</ept>, which also lists other restrictions on object size and array size.</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>Better performance through background garbage collection for servers.</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>When you use server garbage collection in the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, background garbage collection is automatically enabled.</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>See the Background Server Garbage Collection section of the <bpt id="p1">[</bpt>Fundamentals of Garbage Collection<ept id="p1">](../../../docs/standard/garbage-collection/fundamentals.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Background just-in-time (JIT) compilation, which is optionally available on multi-core processors to improve application performance.</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Runtime.ProfileOptimization&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Ability to limit how long the regular expression engine will attempt to resolve a regular expression before it times out. See the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Ability to define the default culture for an application domain.</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Console support for Unicode (UTF-16) encoding.</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Support for versioning of cultural string ordering and comparison data.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.Globalization.SortVersion&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Better performance when retrieving resources.</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Zip compression improvements to reduce the size of a compressed file.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.IO.Compression?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Ability to customize a reflection context to override default reflection behavior through the <ph id="ph1">&lt;xref:System.Reflection.Context.CustomReflectionContext&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Support for the 2008 version of the Internationalized Domain Names in Applications (IDNA) standard when the <ph id="ph1">&lt;xref:System.Globalization.IdnMapping?displayProperty=fullName&gt;</ph> class is used  on <ph id="ph2">[!INCLUDE[win8](../../../includes/win8-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>Delegation of string comparison to the operating system, which implements Unicode 6.0, when the .NET Framework is used on <ph id="ph1">[!INCLUDE[win8](../../../includes/win8-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>When running on other platforms, the .NET Framework includes its own string comparison data, which implements Unicode 5.x.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">&lt;xref:System.String&gt;</ph> class and the Remarks section of the <ph id="ph2">&lt;xref:System.Globalization.SortVersion&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Ability to compute the hash codes for strings on a per application domain basis.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>UseRandomizedStringHashAlgorithm&gt; Element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Type reflection support split between <ph id="ph1">&lt;xref:System.Type&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.TypeInfo&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Reflection in the .NET Framework for Windows Store Apps<ept id="p1">](../../../docs/framework/reflection-and-codedom/reflection-for-windows-store-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Managed Extensibility Framework (MEF)</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the Managed Extensibility Framework (MEF) provides the following new features:</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>Support for generic types.</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Convention-based programming model that enables you to create parts based on naming conventions rather than attributes.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Multiple scopes.</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>A subset of MEF that you can use when you create <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>This subset is available as a <bpt id="p1">[</bpt>downloadable package<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=256238)</ept> from the NuGet Gallery.</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>To install the package, open your project in Visual Studio, choose <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, and search online for the <ph id="ph1">`Microsoft.Composition`</ph> package.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Managed Extensibility Framework (MEF)<ept id="p1">](../../../docs/framework/mef/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Asynchronous file operations</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, new asynchronous features were added to the C# and Visual Basic languages.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>These features add a task-based model for performing asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>To use this new model, use the asynchronous methods in the I/O classes.</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../../../docs/standard/io/asynchronous-file-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Tools</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, Resource File Generator (Resgen.exe) enables you to create a .resw file for use in <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps from a .resources file embedded in a .NET Framework assembly.</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Managed Profile Guided Optimization (Mpgo.exe) enables you to improve application startup time, memory utilization (working set size), and throughput by optimizing native image assemblies.</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>The command-line tool generates profile data for native image application assemblies.</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Mpgo.exe (Managed Profile Guided Optimization Tool)<ept id="p1">](../../../docs/framework/tools/mpgo-exe-managed-profile-guided-optimization-tool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph>, you can use Mpgo.exe to optimize <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps as well as desktop apps.</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>Parallel computing</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> provides several new features and improvements for parallel computing.</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>These include improved performance, increased control, improved support for asynchronous programming, a new dataflow library, and improved support for parallel debugging and performance analysis.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>See the entry <bpt id="p1">[</bpt>What’s New for Parallelism in .NET 4.5<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=235061)</ept> in the Parallel Programming with .NET blog.</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>Web</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>ASP.NET 4.5 and 4.5.1 add model binding for Web Forms, WebSocket support, asynchronous handlers, performance enhancements, and many other features.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>For more information, see the following resources:</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET 4.5 and Visual Studio 2012<ept id="p1">](http://msdn.microsoft.com/library/ac9bb7f6-f094-4af7-bad0-acf49a5dbc55)</ept> in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET 4.5.1 and Visual Studio 2013<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=309094)</ept> on the ASP.NET site.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Networking</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> provides a new programming interface for HTTP applications.</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>For more information, see the new <ph id="ph1">&lt;xref:System.Net.Http?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Http.Headers?displayProperty=fullName&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Support is also included for a new programming interface for accepting and interacting with a WebSocket connection by using the existing <ph id="ph1">&lt;xref:System.Net.HttpListener&gt;</ph> and related classes.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>For more information, see the new <ph id="ph1">&lt;xref:System.Net.WebSockets&gt;</ph> namespace and the <ph id="ph2">&lt;xref:System.Net.HttpListener&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> includes the following networking improvements:</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>RFC-compliant URI support.</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Uri&gt;</ph> and related classes.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Support for Internationalized Domain Name (IDN) parsing.</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Uri&gt;</ph> and related classes.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Support for Email Address Internationalization (EAI).</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Net.Mail&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>Improved IPv6 support.</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Net.NetworkInformation&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Dual-mode socket support.</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Windows Presentation Foundation (WPF)</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, Windows Presentation Foundation (WPF) contains changes and improvements in the following areas:</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref:System.Windows.Controls.Ribbon.Ribbon&gt;</ph> control, which enables you to implement a ribbon user interface that hosts a Quick Access Toolbar, Application Menu, and tabs.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>The new <ph id="ph1">&lt;xref:System.ComponentModel.INotifyDataErrorInfo&gt;</ph> interface, which supports synchronous and asynchronous data validation.</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>New features for the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>Improved performance when displaying large sets of grouped data, and by accessing collections on non-UI threads.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Data binding to static properties, data binding to custom types that implement the <ph id="ph1">&lt;xref:System.Reflection.ICustomTypeProvider&gt;</ph> interface, and retrieval of data binding information from a binding expression.</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>Repositioning of data as the values change (live shaping).</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>Ability to check whether the data context for an item container is disconnected.</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>Ability to set the amount of time that should elapse between property changes and data source updates.</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>Improved support for implementing weak event patterns.</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Also, events can now accept markup extensions.</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>Windows Communication Foundation (WCF)</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the following features have been added to make it simpler to write and maintain Windows Communication Foundation (WCF) applications:</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Simplification of generated configuration files.</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Support for contract-first development.</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>Ability to configure ASP.NET compatibility mode more easily.</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Changes in default transport property values to reduce the likelihood that you will have to set them.</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>Updates to the <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> class to reduce the likelihood that you will have to manually configure quotas for XML dictionary readers.</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>Validation of WCF configuration files by Visual Studio as part of the build process, so you can detect configuration errors before you run your application.</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>New asynchronous streaming support.</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>New HTTPS protocol mapping to make it easier to expose an endpoint over HTTPS with Internet Information Services (IIS).</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>Ability to generate metadata in a single WSDL document by appending <ph id="ph1">`?singleWSDL`</ph> to the service URL.</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>Websockets support to enable true bidirectional communication over ports 80 and 443 with performance characteristics similar to the TCP transport.</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>Support for configuring services in code.</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>XML Editor tooltips.</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph> caching support.</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>Binary encoder compression support.</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>Support for a UDP transport that enables developers to write services that use "fire and forget" messaging.</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>A client sends a message to a service and expects no response from the service.</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>Ability to support multiple authentication modes on a single WCF endpoint when using the HTTP transport and transport security.</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>Support for WCF services that use internationalized domain names (IDNs).</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>What's New in Windows Communication Foundation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228173)</ept>.</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation (WF)</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, several new features were added to Windows Workflow Foundation (WF), including:</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>State machine workflows, which were first introduced as part of the .NET Framework 4.0.1 (<bpt id="p1">[</bpt>.NET Framework 4 Platform Update 1<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=215092)</ept>).</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>This update included several new classes and activities that enabled developers to create state machine workflows.</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>These classes and activities were updated for the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> to include:</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>The ability to set breakpoints on states.</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>The ability to copy and paste transitions in the workflow designer.</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>Designer support for shared trigger transition creation.</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>Activities for creating state machine workflows, including: <ph id="ph1">&lt;xref:System.Activities.Statements.StateMachine&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.Statements.State&gt;</ph>, and <ph id="ph3">&lt;xref:System.Activities.Statements.Transition&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>Enhanced Workflow Designer features such as the following:</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>Enhanced workflow search capabilities in Visual Studio, including <bpt id="p1">**</bpt>Quick Find<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Find in Files<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>Ability to automatically create a Sequence activity when a second child activity is added to a container activity, and to include both activities in the Sequence activity.</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Panning support, which enables the visible portion of a workflow to be changed without using the scroll bars.</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">**</bpt>Document Outline<ept id="p1">**</ept> view that shows the components of a workflow in a tree-style outline view and lets you select a component in the <bpt id="p2">**</bpt>Document Outline<ept id="p2">**</ept> view.</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>Ability to add annotations to activities.</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>Ability to define and consume activity delegates by using the workflow designer.</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>Auto-connect and auto-insert for activities and transitions in state machine and flowchart workflows.</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>Storage of the view state information for a workflow in a single element in the XAML file, so you can easily locate and edit the view state information.</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>A NoPersistScope container activity to prevent child activities from persisting.</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>Support for C# expressions:</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>Workflow projects that use Visual Basic will use Visual Basic expressions, and C# workflow projects will use C# expressions.</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>C# workflow projects that were created in Visual Studio 2010 and that have Visual Basic expressions are compatible with C# workflow projects that use C# expressions.</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>Versioning enhancements:</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>The new  <ph id="ph1">&lt;xref:System.Activities.WorkflowIdentity&gt;</ph> class, which provides a mapping between a persisted workflow instance and its workflow definition.</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Side-by-side execution of multiple workflow versions in the same host, including <ph id="ph1">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>In Dynamic Update, the ability to modify the definition of a persisted workflow instance.</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>Contract-first workflow service development, which provides support for automatically generating activities to match an existing service contract.</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>What's New in Windows Workflow Foundation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228176)</ept>.</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps are designed for specific form factors and leverage the power of the Windows operating system.</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>A subset of the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> or 4.5.1 is available for building <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps for Windows by using C# or Visual Basic.</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>This subset is called <ph id="ph1">[!INCLUDE[net_win8_profile](../../../includes/net-win8-profile-md.md)]</ph> and is discussed in an <bpt id="p1">[</bpt>overview<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228491)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Portable Class Libraries</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>The Portable Class Library project in <ph id="ph1">[!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)]</ph> (and later versions) enables you to write and build managed assemblies that work on multiple .NET Framework platforms.</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>Using a Portable Class Library project, you choose the platforms (such as Windows Phone and <ph id="ph1">[!INCLUDE[net_win8_profile](../../../includes/net-win8-profile-md.md)]</ph>) to target.</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>The available types and members in your project are automatically restricted to the common types and members across these platforms.</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Portable Class Library<ept id="p1">](../../../docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The .NET Framework and Out-of-Band Releases<ept id="p1">](../../../docs/framework/get-started/the-net-framework-and-out-of-band-releases.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What's New in Visual Studio 2017<ept id="p1">](/visualstudio/ide/whats-new-in-visual-studio)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET<ept id="p1">](/aspnet)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What’s New in Visual C++<ept id="p1">](/cpp/what-s-new-for-visual-cpp-in-visual-studio)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>