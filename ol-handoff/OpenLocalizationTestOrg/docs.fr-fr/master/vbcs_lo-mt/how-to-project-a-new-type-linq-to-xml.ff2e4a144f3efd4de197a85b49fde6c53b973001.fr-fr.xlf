<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0e3149ca2fb5e36ebc759421e9489cbfe3dde5f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\how-to-project-a-new-type-linq-to-xml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4afdd9dd6957d746af3cd81606d18e97500e949b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8562827fde133e9d04e8945dec1f30bd614fb95</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Project a New Type (LINQ to XML) (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Project a New Type (LINQ to XML) (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Other examples in this section have shown queries that return results as <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id="ph4">`string`</ph>, and <ph id="ph5">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of <ph id="ph6">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These are common result types, but they are not appropriate for every scenario.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In many cases you will want your queries to return an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of some other type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example shows how to instantiate objects in the <ph id="ph1">`Select`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The code first defines a new class with a constructor, and then modifies the <ph id="ph1">`Select`</ph> statement so that the expression is a new instance of the new class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This example uses the following XML document: <bpt id="p1">[</bpt>Sample XML File: Typical Purchase Order (LINQ to XML)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/sample-xml-file-typical-purchase-order-linq-to-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`M:System.Xml.Linq.XElement.Element`</ph> method that was introduced in the topic <bpt id="p1">[</bpt>How to: Retrieve a Single Child Element (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/how-to-retrieve-a-single-child-element-linq-to-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It also uses casts to retrieve the values of the elements that are returned by the <ph id="ph1">`M:System.Xml.Linq.XElement.Element`</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Projections and Transformations (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/projections-and-transformations-linq-to-xml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>