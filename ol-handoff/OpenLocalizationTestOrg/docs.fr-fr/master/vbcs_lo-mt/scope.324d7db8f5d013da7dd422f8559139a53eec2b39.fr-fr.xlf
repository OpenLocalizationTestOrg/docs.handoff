<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b938ed940dd0fd57707c39626f7b69dc0589af1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\declared-elements\scope.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab566a28373c28b55bf0610654778601f7eabd7c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8928d77752bfb67381ea9023c03e4530ecb10779</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Scope in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Scope in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>scope<ept id="p1">*</ept> of a declared element is the set of all code that can refer to it without qualifying its name or making it available through an <bpt id="p2">[</bpt>Imports Statement (.NET Namespace and Type)<ept id="p2">](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An element can have scope at one of the following levels:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Level</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Block scope</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Available only within the code block in which it is declared</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Procedure scope</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Available to all code within the procedure in which it is declared</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Module scope</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Available to all code within the module, class, or structure in which it is declared</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Namespace scope</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Available to all code in the namespace in which it is declared</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These levels of scope progress from the narrowest (block) to the widest (namespace), where <bpt id="p1">*</bpt>narrowest scope<ept id="p1">*</ept> means the smallest set of code that can refer to the element without qualification.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see "Levels of Scope" on this page.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifying Scope and Defining Variables</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You specify the scope of an element when you declare it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The scope can depend on the following factors:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The region (block, procedure, module, class, or structure) in which you declare the element</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The namespace containing the element's declaration</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The access level you declare for the element</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use care when you define variables with the same name but different scope, because doing so can lead to unexpected results.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Levels of Scope</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A programming element is available throughout the region in which you declare it.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>All code in the same region can refer to the element without qualifying its name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Block Scope</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A block is a set of statements enclosed within initiating and terminating declaration statements, such as the following:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Do`</ph> and <ph id="ph2">`Loop`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`For`</ph> [<ph id="ph2">`Each`</ph>] and <ph id="ph3">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`If`</ph> and <ph id="ph2">`End If`</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Select`</ph> and <ph id="ph2">`End Select`</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SyncLock`</ph> and <ph id="ph2">`End SyncLock`</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Try`</ph> and <ph id="ph2">`End Try`</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`While`</ph> and <ph id="ph2">`End While`</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`With`</ph> and <ph id="ph2">`End With`</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you declare a variable within a block, you can use it only within that block.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the following example, the scope of the integer variable <ph id="ph1">`cube`</ph> is the block between <ph id="ph2">`If`</ph> and <ph id="ph3">`End If`</ph>, and you can no longer refer to <ph id="ph4">`cube`</ph> when execution passes out of the block.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Even if the scope of a variable is limited to a block, its lifetime is still that of the entire procedure.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you enter the block more than once during the procedure, each block variable retains its previous value.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To avoid unexpected results in such a case, it is wise to initialize block variables at the beginning of the block.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Procedure Scope</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An element declared within a procedure is not available outside that procedure.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Only the procedure that contains the declaration can use it.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Variables at this level are also known as <bpt id="p1">*</bpt>local variables<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You declare them with the <bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept>, with or without the <bpt id="p2">[</bpt>Static<ept id="p2">](../../../../visual-basic/language-reference/modifiers/static.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Procedure and block scope are closely related.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you declare a variable inside a procedure but outside any block within that procedure, you can think of the variable as having block scope, where the block is the entire procedure.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All local elements, even if they are <ph id="ph1">`Static`</ph> variables, are private to the procedure in which they appear.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You cannot declare any element using the <bpt id="p1">[</bpt>Public<ept id="p1">](../../../../visual-basic/language-reference/modifiers/public.md)</ept> keyword within a procedure.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Module Scope</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For convenience, the single term <bpt id="p1">*</bpt>module level<ept id="p1">*</ept> applies equally to modules, classes, and structures.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can declare elements at this level by placing the declaration statement outside of any procedure or block but within the module, class, or structure.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you make a declaration at the module level, the access level you choose determines the scope.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The namespace that contains the module, class, or structure also affects the scope.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Elements for which you declare <bpt id="p1">[</bpt>Private<ept id="p1">](../../../../visual-basic/language-reference/modifiers/private.md)</ept> access level are available to every procedure in that module, but not to any code in a different module.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Dim`</ph> statement at module level defaults to <ph id="ph2">`Private`</ph> if you do not use any access level keywords.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>However, you can make the scope and access level more obvious by using the <ph id="ph1">`Private`</ph> keyword in the <ph id="ph2">`Dim`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the following example, all procedures defined in the module can refer to the string variable <ph id="ph1">`strMsg`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When the second procedure is called, it displays the contents of the string variable <ph id="ph1">`strMsg`</ph> in a dialog box.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Namespace Scope</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you declare an element at module level using the <bpt id="p1">[</bpt>Friend<ept id="p1">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept> or <bpt id="p2">[</bpt>Public<ept id="p2">](../../../../visual-basic/language-reference/modifiers/public.md)</ept> keyword, it becomes available to all procedures throughout the namespace in which the element is declared.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>With the following alteration to the preceding example, the string variable <ph id="ph1">`strMsg`</ph> can be referred to by code anywhere in the namespace of its declaration.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Namespace scope includes nested namespaces.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An element available from within a namespace is also available from within any namespace nested inside that namespace.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If your project does not contain any <bpt id="p1">[</bpt>Namespace Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/namespace-statement.md)</ept>s, everything in the project is in the same namespace.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this case, namespace scope can be thought of as project scope.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Public`</ph> elements in a module, class, or structure are also available to any project that references their project.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Choice of Scope</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When you declare a variable, you should keep in mind the following points when choosing its scope.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Advantages of Local Variables</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Local variables are a good choice for any kind of temporary calculation, for the following reasons:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name Conflict Avoidance.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Local variable names are not susceptible to conflict.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, you can create several different procedures containing a variable called <ph id="ph1">`intTemp`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As long as each <ph id="ph1">`intTemp`</ph> is declared as a local variable, each procedure recognizes only its own version of <ph id="ph2">`intTemp`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Any one procedure can alter the value in its local <ph id="ph1">`intTemp`</ph> without affecting <ph id="ph2">`intTemp`</ph> variables in other procedures.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Memory Consumption.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Local variables consume memory only while their procedure is running.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Their memory is released when the procedure returns to the calling code.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>By contrast, <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept> and <bpt id="p2">[</bpt>Static<ept id="p2">](../../../../visual-basic/language-reference/modifiers/static.md)</ept> variables consume memory resources until your application stops running, so use them only when necessary.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Instance variables<ept id="p1">*</ept> consume memory while their instance continues to exist, which makes them less efficient than local variables, but potentially more efficient than <ph id="ph1">`Shared`</ph> or <ph id="ph2">`Static`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Minimizing Scope</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In general, when declaring any variable or constant, it is good programming practice to make the scope as narrow as possible (block scope is the narrowest).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This helps conserve memory and minimizes the chances of your code erroneously referring to the wrong variable.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Similarly, you should declare a variable to be <bpt id="p1">[</bpt>Static<ept id="p1">](../../../../visual-basic/language-reference/modifiers/static.md)</ept> only when it is necessary to preserve its value between procedure calls.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declared Element Characteristics<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Control the Scope of a Variable<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lifetime in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/lifetime.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Access Levels in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>References to Declared Elements<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/references-to-declared-elements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variable Declaration<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/variable-declaration.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>