<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bafecac1c507b2eaea162d78c8b94b9261a45fd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\type-list.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab9db8a6d7f38653a090173b5018dd0e2fb22a9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3460991f12162b6e520429d88558b4c0317dce0c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type List (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type List (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the <bpt id="p1">*</bpt>type parameters<ept id="p1">*</ept> for a <bpt id="p2">*</bpt>generic<ept id="p2">*</ept> programming element.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Multiple parameters are separated by commas.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Following is the syntax for one type parameter.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Can be used only in generic interfaces and delegates.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can declare a type covariant by using the <bpt id="p1">[</bpt>Out<ept id="p1">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept> keyword or contravariant by using the <bpt id="p2">[</bpt>In<ept id="p2">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Covariance and Contravariance<ept id="p1">](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name of the type parameter.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is a placeholder, to be replaced by a defined type supplied by the corresponding type argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>List of requirements that constrain the data type that can be supplied for <ph id="ph1">`typename`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you have multiple constraints, enclose them in curly braces (<ph id="ph1">`{ }`</ph>) and separate them with commas.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You must introduce the constraint list with the <bpt id="p1">[</bpt>As<ept id="p1">](../../../visual-basic/language-reference/statements/as-clause.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`As`</ph> only once, at the beginning of the list.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Every generic programming element must take at least one type parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A type parameter is a placeholder for a specific type (a <bpt id="p1">*</bpt>constructed element<ept id="p1">*</ept>) that client code specifies when it creates an instance of the generic type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can define a generic class, structure, interface, procedure, or delegate.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information on when to define a generic type, see <bpt id="p1">[</bpt>Generic Types in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information on type parameter names, see <bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Rules</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parentheses.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the <bpt id="p1">[</bpt>Of<ept id="p1">](../../../visual-basic/language-reference/statements/of-clause.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">`Of`</ph> only once, at the beginning of the list.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Constraints.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A list of <bpt id="p1">*</bpt>constraints<ept id="p1">*</ept> on a type parameter can include the following items in any combination:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Any number of interfaces.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The supplied type must implement every interface in this list.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At most one class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The supplied type must inherit from that class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`New`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The supplied type must expose a parameterless constructor that your generic type can access.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is useful if you constrain a type parameter by one or more interfaces.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A type that implements interfaces does not necessarily expose a constructor, and depending on the access level of a constructor, the code within the generic type might not be able to access it.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Either the <ph id="ph1">`Class`</ph> keyword or the <ph id="ph2">`Structure`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Class`</ph> keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Structure`</ph> keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You cannot include both <ph id="ph1">`Class`</ph> and <ph id="ph2">`Structure`</ph> in the same <ph id="ph3">`constraintlist`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The supplied type must satisfy every requirement you include in <ph id="ph1">`constraintlist`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Constraints on each type parameter are independent of constraints on other type parameters.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Behavior</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Compile-Time Substitution.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you create a constructed type from a generic programming element, you supply a defined type for each type parameter.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The Visual Basic compiler substitutes that supplied type for every occurrence of <ph id="ph1">`typename`</ph> within the generic element.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Absence of Constraints.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the <bpt id="p1">[</bpt>Object Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept> for that type parameter.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example shows a skeleton definition of a generic dictionary class, including a skeleton function to add a new entry to the dictionary.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#3<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/type-list_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`dictionary`</ph> is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example shows a line of code that creates a <ph id="ph1">`dictionary`</ph> object with <ph id="ph2">`String`</ph> entries and <ph id="ph3">`Integer`</ph> keys.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#4<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/type-list_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example shows the equivalent skeleton definition generated by the preceding example.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#5<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/type-list_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Of<ept id="p1">](../../../visual-basic/language-reference/statements/of-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>New Operator<ept id="p1">](../../../visual-basic/language-reference/operators/new-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Access Levels in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/access-levels.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/object-data-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Structure Statement<ept id="p1">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Statement<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Use a Generic Class<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/how-to-use-a-generic-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Covariance and Contravariance<ept id="p1">](http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>In<ept id="p1">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Out<ept id="p1">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>