<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="named-and-optional-arguments.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9827553c1362d92bdf68a50e840b33474a22dcaa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\named-and-optional-arguments.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0f5b9113b2f91a1a5aeeb3ae693fd196f75f885</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43c3f8175192f1885f70e8743ebb75888d75593c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Named and Optional Arguments (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Named and Optional Arguments (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>introduces named and optional arguments.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Named arguments<ept id="p1">*</ept> enable you to specify an argument for a particular parameter by associating the argument with the parameter's name rather than with the parameter's position in the parameter list.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Optional arguments<ept id="p1">*</ept> enable you to omit arguments for some parameters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Both techniques can be used with methods, indexers, constructors, and delegates.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you use named and optional arguments, the arguments are evaluated in the order in which they appear in the argument list, not the parameter list.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Named and optional parameters, when used together, enable you to supply arguments for only a few parameters from a list of optional parameters.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This capability greatly facilitates calls to COM interfaces such as the Microsoft Office Automation APIs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Named Arguments</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Named arguments free you from the need to remember or to look up the order of parameters in the parameter lists of called methods.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The parameter for each argument can be specified by parameter name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, a function that calculates body mass index (BMI) can be called in the standard way by sending arguments for weight and height by position, in the order defined by the function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you do not remember the order of the parameters but you do know their names, you can send the arguments in either order, weight first or height first.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Named arguments also improve the readability of your code by identifying what each argument represents.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A named argument can follow positional arguments, as shown here.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, a positional argument cannot follow a named argument.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following statement causes a compiler error.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code implements the examples from this section.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional Arguments</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The definition of a method, constructor, indexer, or delegate can specify that its parameters are required or that they are optional.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any call must provide arguments for all required parameters, but can omit arguments for optional parameters.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Each optional parameter has a default value as part of its definition.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If no argument is sent for that parameter, the default value is used.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A default value must be one of the following types of expressions:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>a constant expression;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>an expression of the form <ph id="ph1">`new ValType()`</ph>, where <ph id="ph2">`ValType`</ph> is a value type, such as an <bpt id="p1">[</bpt>enum<ept id="p1">](../../../csharp/language-reference/keywords/enum.md)</ept> or a <bpt id="p2">[</bpt>struct<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/structs.md)</ept>;</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>an expression of the form <bpt id="p1">[</bpt>default(ValType)<ept id="p1">](../../../csharp/programming-guide/generics/default-keyword-in-generic-code.md)</ept>,  where <ph id="ph1">`ValType`</ph> is a value type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional parameters are defined at the end of the parameter list, after any required parameters.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the caller provides an argument for any one of a succession of optional parameters, it must provide arguments for all preceding optional parameters.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Comma-separated gaps in the argument list are not supported.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, in the following code, instance method <ph id="ph1">`ExampleMethod`</ph> is defined with one required and two optional parameters.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following call to <ph id="ph1">`ExampleMethod`</ph> causes a compiler error, because an argument is provided for the third parameter but not for the second.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, if you know the name of the third parameter, you can use a named argument to accomplish the task.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>IntelliSense uses brackets to indicate optional parameters, as shown in the following illustration.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>IntelliSense Quick Info for method ExampleMethod.<ept id="p1">]</ept><bpt id="p2">(../../../csharp/programming-guide/classes-and-structs/media/optional_parameters.png "</bpt>Optional_Parameters<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Optional parameters in ExampleMethod</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can also declare optional parameters by using the .NET <ph id="ph1">&lt;xref:System.Runtime.InteropServices.OptionalAttribute&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`OptionalAttribute`</ph> parameters do not require a default value.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the following example, the constructor for <ph id="ph1">`ExampleClass`</ph> has one parameter, which is optional.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Instance method <ph id="ph1">`ExampleMethod`</ph> has one required parameter, <ph id="ph2">`required`</ph>, and two optional parameters, <ph id="ph3">`optionalstr`</ph> and <ph id="ph4">`optionalint`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The code in <ph id="ph1">`Main`</ph> shows the different ways in which the constructor and method can be invoked.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>COM Interfaces</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Named and optional arguments, along with support for dynamic objects and other enhancements, greatly improve interoperability with COM APIs, such as Office Automation APIs.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>AutoFormat<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=148201)</ept> method in the Microsoft Office Excel <bpt id="p2">[</bpt>Range<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=148196)</ept> interface has seven parameters, all of which are optional.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These parameters are shown in the following illustration.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>IntelliSense Quick Info for the AutoFormat method.<ept id="p1">]</ept><bpt id="p2">(../../../csharp/programming-guide/classes-and-structs/media/autoformat_parameters.png "</bpt>AutoFormat_Parameters<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>AutoFormat parameters</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In C# 3.0 and earlier versions, an argument is required for each parameter, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, you can greatly simplify the call to <ph id="ph1">`AutoFormat`</ph> by using named and optional arguments, introduced in C# 4.0.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Named and optional arguments enable you to omit the argument for an optional parameter if you do not want to change the parameter's default value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the following call, a value is specified for only one of the seven parameters.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information and examples, see <bpt id="p1">[</bpt>How to: Use Named and Optional Arguments in Office Programming<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)</ept> and <bpt id="p2">[</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id="p2">](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Overload Resolution</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Use of named and optional arguments affects overload resolution in the following ways:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A method, indexer, or constructor is a candidate for execution if each of its parameters either is optional or corresponds, by name or by position, to a single argument in the calling statement, and that argument can be converted to the type of the parameter.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If more than one candidate is found, overload resolution rules for preferred conversions are applied to the arguments that are explicitly specified.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Omitted arguments for optional parameters are ignored.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If two candidates are judged to be equally good, preference goes to a candidate that does not have optional parameters for which arguments were omitted in the call.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is a consequence of a general preference in overload resolution for candidates that have fewer parameters.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use Named and Optional Arguments in Office Programming<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Type dynamic<ept id="p1">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Constructors<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/using-constructors.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Indexers<ept id="p1">](../../../csharp/programming-guide/indexers/using-indexers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>