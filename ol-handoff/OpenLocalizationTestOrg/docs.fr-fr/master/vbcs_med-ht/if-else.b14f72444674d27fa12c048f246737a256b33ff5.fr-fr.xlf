<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b327d1cc654db0c7b6a91c4fdc88c725408cacc5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\if-else.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c372a4a50627bf7e8632ea402bddc51f3b20c4f0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12881e93c5de1f8b2e83d81fb15882c17d4848f8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>if-else (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>if-else (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`if`</ph> statement identifies which statement to run based on the value of a <ph id="ph2">`Boolean`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`Boolean`</ph> variable <ph id="ph2">`result`</ph> is set to <ph id="ph3">`true`</ph> and then checked in the <ph id="ph4">`if`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The output is <ph id="ph1">`The condition is true`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsSelection#1<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/if-else_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can run the examples in this topic by placing them in the <ph id="ph1">`Main`</ph> method of a console app.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`if`</ph> statement in C# can take two forms, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In an <ph id="ph1">`if-else`</ph> statement, if <ph id="ph2">`condition`</ph> evaluates to true, the <ph id="ph3">`then-statement`</ph> runs.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> is false, the <ph id="ph2">`else-statement`</ph> runs.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`condition`</ph> can’t be simultaneously true and false, the <ph id="ph2">`then-statement`</ph> and the <ph id="ph3">`else-statement`</ph> of an <ph id="ph4">`if-else`</ph> statement can never both run.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>After the <ph id="ph1">`then-statement`</ph> or the <ph id="ph2">`else-statement`</ph> runs, control is transferred to the next statement after the <ph id="ph3">`if`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In an <ph id="ph1">`if`</ph> statement that doesn’t include an <ph id="ph2">`else`</ph> statement, if <ph id="ph3">`condition`</ph> is true, the <ph id="ph4">`then-statement`</ph> runs.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> is false, control is transferred to the next statement after the <ph id="ph2">`if`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">`then-statement`</ph> and the <ph id="ph2">`else-statement`</ph> can consist of a single statement or multiple statements that are enclosed in braces (<ph id="ph3">`{}`</ph>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For a single statement, the braces are optional but recommended.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The statement or statements in the <ph id="ph1">`then-statement`</ph> and the <ph id="ph2">`else-statement`</ph> can be of any kind, including another <ph id="ph3">`if`</ph> statement nested inside the original <ph id="ph4">`if`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In nested <ph id="ph1">`if`</ph> statements, each <ph id="ph2">`else`</ph> clause belongs to the last <ph id="ph3">`if`</ph> that doesn’t have a corresponding <ph id="ph4">`else`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`Result1`</ph> appears if both <ph id="ph2">`m &gt; 10`</ph> and <ph id="ph3">`n &gt; 20`</ph> evaluate to true.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`m &gt; 10`</ph> is true but <ph id="ph2">`n &gt; 20`</ph> is false, <ph id="ph3">`Result2`</ph> appears.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsSelection#2<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/if-else_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If, instead, you want <ph id="ph1">`Result2`</ph> to appear when <ph id="ph2">`(m &gt; 10)`</ph> is false, you can specify that association by using braces to establish the start and end of the nested <ph id="ph3">`if`</ph> statement, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsSelection#3<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/if-else_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Result2`</ph> appears if the condition <ph id="ph2">`(m &gt; 10)`</ph> evaluates to false.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the following example, you enter a character from the keyboard, and the program uses a nested <ph id="ph1">`if`</ph> statement to determine whether the input character is an alphabetic character.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the input character is an alphabetic character, the program checks whether the input character is lowercase or uppercase.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A message appears for each case.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsSelection#4<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/if-else_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You also can nest an <ph id="ph1">`if`</ph> statement inside an else block, as the following partial code shows.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The example nests <ph id="ph1">`if`</ph> statements inside two else blocks and one then block.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The comments specify which conditions are true or false in each block.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsSelection#5<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/if-else_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example determines whether an input character is a lowercase letter, an uppercase letter, or a number.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If all three conditions are false, the character isn’t an alphanumeric character.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The example displays a message for each case.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsSelection#6<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/if-else_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Just as a statement in the else block or the then block can be any valid statement, you can use any valid Boolean expression for the condition.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use logical operators such as <bpt id="p1">[</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">&amp;</ph><ept id="p2">](../../../csharp/language-reference/operators/and-operator.md)</ept>, <bpt id="p3">[</bpt>&amp;#124;&amp;#124;<ept id="p3">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept>, <bpt id="p4">[</bpt>&amp;#124;<ept id="p4">](../../../csharp/language-reference/operators/or-operator.md)</ept> and <bpt id="p5">[</bpt>!<ept id="p5">](../../../csharp/language-reference/operators/logical-negation-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>to make compound conditions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following code shows examples.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>?: Operator<ept id="p1">](../../../csharp/language-reference/operators/conditional-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>if-else Statement (C++)<ept id="p1">](https://docs.microsoft.com/cpp/cpp/if-else-statement-cpp)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>switch<ept id="p1">](../../../csharp/language-reference/keywords/switch.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>