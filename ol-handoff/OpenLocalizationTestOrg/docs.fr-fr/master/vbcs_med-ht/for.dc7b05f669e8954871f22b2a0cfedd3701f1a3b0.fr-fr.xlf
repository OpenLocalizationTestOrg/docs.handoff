<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="for.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b458c92e1778910285fa0afe7a6204fcfddd8ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\for.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">102f243d6ec6f6a2e67e550e7421288ecff481c5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40c0a84447ecf3a0075f7fb1a23c1739fcf588bd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>for (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>for (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By using a <ph id="ph1">`for`</ph> loop, you can run a statement or a block of statements repeatedly until a specified expression evaluates to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This kind of loop is useful for iterating over arrays and for other applications in which you know in advance how many times you want the loop to iterate.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the following example, the value of <ph id="ph1">`i`</ph> is written to the console and incremented by 1 during each iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`for`</ph> statement in the previous example performs the following actions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>First, the initial value of variable <ph id="ph1">`i`</ph> is established.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This step happens only once, regardless of how many times the loop repeats.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can think of this initialization as happening outside the looping process.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To evaluate the condition (<ph id="ph1">`i &lt;= 5`</ph>), the value of <ph id="ph2">`i`</ph> is compared to 5.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`i`</ph> is less than or equal to 5, the condition evaluates to <ph id="ph2">`true`</ph>, and the following actions occur.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Console.WriteLine`</ph> statement in the body of the loop displays the value of <ph id="ph2">`i`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">`i`</ph> is incremented by 1.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The loop returns to the start of step 2 to evaluate the condition again.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`i`</ph> is greater than 5, the condition evaluates to <ph id="ph2">`false`</ph>, and you exit the loop.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that, if the initial value of <ph id="ph1">`i`</ph> is greater than 5, the body of the loop doesn't run even once.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Every <ph id="ph1">`for`</ph> statement defines initializer, condition, and iterator sections.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These sections usually determine how many times the loop iterates.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The sections serve the following purposes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The initializer section sets the initial conditions.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The statements in this section run only once, before you enter the loop.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The section can contain only one of the following two options.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The declaration and initialization of a local loop variable, as the first example shows (<ph id="ph1">`int i = 1`</ph>).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The variable is local to the loop and can't be accessed from outside the loop.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Zero or more statement expressons from the following list, separated by commas.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>assignment<ept id="p1">](../../../csharp/language-reference/operators/assignment-operator.md)</ept> statement</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>invocation of a method</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>increment<ept id="p1">](../../../csharp/language-reference/operators/increment-operator.md)</ept> expression, such as <ph id="ph1">`++i`</ph> or <ph id="ph2">`i++`</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>decrement<ept id="p1">](../../../csharp/language-reference/operators/decrement-operator.md)</ept> expression, such as <ph id="ph1">`--i`</ph> or <ph id="ph2">`i--`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>creation of an object by using <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../../../csharp/language-reference/keywords/await.md)</ept> expression</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The condition section contains a boolean expression thatâ€™s evaluated to determine whether the loop should exit or should run again.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The iterator section defines what happens after each iteration of the body of the loop.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The iterator section contains zero or more of the following statement expressions, separated by commas:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>assignment<ept id="p1">](../../../csharp/language-reference/operators/assignment-operator.md)</ept> statement</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>invocation of a method</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>increment<ept id="p1">](../../../csharp/language-reference/operators/increment-operator.md)</ept> expression, such as <ph id="ph1">`++i`</ph> or <ph id="ph2">`i++`</ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>prefix or postfix <bpt id="p1">[</bpt>decrement<ept id="p1">](../../../csharp/language-reference/operators/decrement-operator.md)</ept> expression, such as <ph id="ph1">`--i`</ph> or <ph id="ph2">`i--`</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>creation of an object by using <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>await<ept id="p1">](../../../csharp/language-reference/keywords/await.md)</ept> expression</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The body of the loop consists of a statement, an empty statement, or a block of statements, which you create by enclosing zero or more statements in braces.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can break out of a <ph id="ph1">`for`</ph> loop by using the <bpt id="p1">[</bpt>break<ept id="p1">](../../../csharp/language-reference/keywords/break.md)</ept> keyword, or you can step to the next iteration by using the <bpt id="p2">[</bpt>continue<ept id="p2">](../../../csharp/language-reference/keywords/continue.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You also can exit any loop by using a <bpt id="p1">[</bpt>goto<ept id="p1">](../../../csharp/language-reference/keywords/goto.md)</ept>, <bpt id="p2">[</bpt>return<ept id="p2">](../../../csharp/language-reference/keywords/return.md)</ept>, or <bpt id="p3">[</bpt>throw<ept id="p3">](../../../csharp/language-reference/keywords/throw.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The first example in this topic shows the most typical kind of <ph id="ph1">`for`</ph> loop, which makes the following choices for the sections.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The initializer declares and initializes a local loop variable, <ph id="ph1">`i`</ph>, that maintains a count of the iterations of the loop.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The condition checks the value of the loop variable against a known final value, 5.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The iterator section uses a postfix increment statement, <ph id="ph1">`i++`</ph>, to tally each iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example illustrates several less common choices: assigning a value to an external loop variable in the initializer section,  invoking the <ph id="ph1">`Console.WriteLine`</ph> method in both the initializer and the iterator sections, and changing the values of two variables in the iterator section.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All of the expressions that define a <ph id="ph1">`for`</ph> statement are optional.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, the following statement creates an infinite loop.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>foreach, in<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>for Statement (C++)<ept id="p1">](https://docs.microsoft.com/cpp/cpp/for-statement-cpp)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iteration Statements<ept id="p1">](../../../csharp/language-reference/keywords/iteration-statements.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>