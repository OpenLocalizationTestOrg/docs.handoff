<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">677fd5fb931cca704fa6a0550a229ebb2fccdd7a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tour-of-csharp\enums.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7306e6215fddae53a2c9f82efdbe27d358f070fe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b28332c9b3ad54a14a66149035e0e9e53b4bf857</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C# Enums | A tour of the C# language</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about enums, discrete named constants in C#</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, csharp</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Enums</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">***</bpt>enum type<ept id="p1">***</ept> is a distinct value type with a set of named constants.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You define enums when you need to define a type that can have a set of discrete values.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They use one of the integral value types as their underlying storage.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>They provide semantic meaning to the discrete values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example declares and uses an <ph id="ph1">`enum`</ph> type named <ph id="ph2">`Color`</ph> with three constant values, <ph id="ph3">`Red`</ph>, <ph id="ph4">`Green`</ph>, and <ph id="ph5">`Blue`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>EnumExample<ept id="p2">](../../../samples/snippets/csharp/tour/enums/Program.cs#L3-L36)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`enum`</ph> type has a corresponding integral type called the <bpt id="p1">***</bpt>underlying type<ept id="p1">***</ept> of the <ph id="ph2">`enum`</ph> type.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`enum`</ph> type that does not explicitly declare an underlying type has an underlying type of <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`enum`</ph> typeâ€™s storage format and range of possible values are determined by its underlying type.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The set of values that an <ph id="ph1">`enum`</ph> type can take on is not limited by its <ph id="ph2">`enum`</ph> members.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In particular, any value of the underlying type of an <ph id="ph1">`enum`</ph> can be cast to the <ph id="ph2">`enum`</ph> type and is a distinct valid value of that <ph id="ph3">`enum`</ph> type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following example declares an <ph id="ph1">`enum`</ph> type named <ph id="ph2">`Alignment`</ph> with an underlying type of <ph id="ph3">`sbyte`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>EnumStorage<ept id="p2">](../../../samples/snippets/csharp/tour/enums/Program.cs#L38-L43)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As shown by the previous example, an <ph id="ph1">`enum`</ph> member declaration can include a constant expression that specifies the value of the member.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The constant value for each <ph id="ph1">`enum`</ph> member must be in the range of the underlying type of the <ph id="ph2">`enum`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When an <ph id="ph1">`enum`</ph> member declaration does not explicitly specify a value, the member is given the value zero (if it is the first member in the <ph id="ph2">`enum`</ph> type) or the value of the textually preceding <ph id="ph3">`enum`</ph> member plus one.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Enum`</ph> values can be converted to integral values and vice versa using type casts.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>EnumStorage<ept id="p2">](../../../samples/snippets/csharp/tour/enums/Program.cs#L49-L50)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default value of any <ph id="ph1">`enum`</ph> type is the integral value zero converted to the <ph id="ph2">`enum`</ph> type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In cases where variables are automatically initialized to a default value, this is the value given to variables of <ph id="ph1">`enum`</ph> types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In order for the default value of an <ph id="ph1">`enum`</ph> type to be easily available, the literal <ph id="ph2">`0`</ph> implicitly converts to any <ph id="ph3">`enum`</ph> type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Thus, the following is permitted.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>EnumZero<ept id="p2">](../../../samples/snippets/csharp/tour/enums/Program.cs#L58-L58)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous<ept id="p1">](interfaces.md)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Next<ept id="p2">](delegates.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>