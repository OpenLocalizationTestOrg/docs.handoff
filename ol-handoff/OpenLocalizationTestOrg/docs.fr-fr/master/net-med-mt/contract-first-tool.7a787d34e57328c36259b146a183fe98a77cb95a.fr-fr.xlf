<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ce0f0328f725b0a3da5ad417b77ddc5e54e7325</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\contract-first-tool.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c641264a0514280942256b343a412b80db36c34b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc1b07d28b69030f895186a15dfb2d1aed0f298d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contract-First Tool | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Contract-First Tool</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Service contracts often need to be created from existing services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, data contract classes can be created automatically from existing services using the contract-first tool.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To use the contract-first tool, the XML schema definition file (XSD) must be downloaded locally; the tool cannot import remote data contracts via HTTP.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The contract-first tool is integrated into <ph id="ph1">[!INCLUDE[vs_current_long](../../../includes/vs-current-long-md.md)]</ph> as a build task.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The code files generated by the build task are created every time the project is built, so that the project can easily adopt changes in the underlying service contract.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Schema types that the contract-first tool can import include the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Simple types will not be generated if they are primitives such as <ph id="ph1">`Int16`</ph> or <ph id="ph2">`String`</ph>; complex types will not be generated if they are of type <ph id="ph3">`Collection`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Types will also not be generated if they are part of another <ph id="ph1">`xsd:complexType`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In all these cases, the types will be referenced to existing types in the project instead.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Adding a data contract to a project</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Before the contract-first tool can be used, the service contract (XSD) must be added to the project.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For the purposes of this overview, the following contract will be used to illustrate contract-first functions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This service definition is a small subset of the service contract used by Bing’s search API.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To add the above service contract to the project, right-click the project and select <bpt id="p1">**</bpt>Add New…<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Select Schema Definition from the WCF pane of the Templates dialog, and name the new file SampleContract.xsd.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copy and paste the above code into the code view of the new file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Configuring contract-first options</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Contract-first options can be configured in the Properties menu of a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To enable contract-first development, select the <bpt id="p1">**</bpt>Enable XSD as Type Definition Language<ept id="p1">**</ept> check box in the WCF page of the project properties window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>WCF Project Options showing contract&amp;#45;first<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/wcf/media/contractfirstoptions.png "</bpt>ContractFirstOptions<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To configure advanced properties, click the Advanced button.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Advanced Contract&amp;#45;First Properties<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/wcf/media/contractfirstadvanced.png "</bpt>ContractFirstAdvanced<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following advanced settings can be configured for code generation from contracts.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Settings can only be configured for all of the files in the project; settings cannot be configured for individual files at this time.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept>: This setting determines which serializer is used for reading service contract files.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>XML Serializer<ept id="p1">**</ept> is selected, the <bpt id="p2">**</bpt>Collection Types<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Reuse Types<ept id="p3">**</ept> options are disabled.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These options only apply to the <bpt id="p1">**</bpt>Data Contract Serializer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reuse Types<ept id="p1">**</ept>: This setting specifies which libraries are used for type reuse.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This setting only applies if <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Data Contract Serializer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Collection Type<ept id="p1">**</ept>: This setting specifies the fully-qualified or assembly-qualified type to be used for the collection data type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This setting only applies if <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Data Contract Serializer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dictionary Type<ept id="p1">**</ept>: This setting specifies the fully-qualified or assembly-qualified type to be used for the dictionary data type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EnableDataBinding<ept id="p1">**</ept>: This setting specifies whether to implement the <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface on all data types to implement data binding.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExcludedTypes<ept id="p1">**</ept>:This setting specifies the list of fully-qualified or assembly-qualified types to be excluded from the referenced assemblies.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This setting only applies if <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Data Contract Serializer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GenerateInternalTypes<ept id="p1">**</ept>: This setting specifies whether to generate classes that are marked as internal.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This setting only applies if <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Data Contract Serializer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GenerateSerializableTypes<ept id="p1">**</ept>: This setting specifies whether to generate classes with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This setting only applies if <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Data Contract Serializer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ImportXMLTypes<ept id="p1">**</ept>: This setting specifies whether to configure the data contract serializer to apply the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute to classes without the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This setting only applies if <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Data Contract Serializer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SupportFx35TypedDataSets<ept id="p1">**</ept>: This setting specifies whether to provide additional functionality for typed data sets created for .Net Framework 3.5.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When  <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>XML Serializer<ept id="p2">**</ept>, the <ph id="ph1">&lt;xref:System.Data.Design.TypedDataSetSchemaImporterExtensionFx35&gt;</ph> extension will be added to the XML schema importer when this value is set to True.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When  <bpt id="p1">**</bpt>Serializer Mode<ept id="p1">**</ept> is set to <bpt id="p2">**</bpt>Data Contract Serializer<ept id="p2">**</ept>, the type <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> will be excluded from the References when this value is set to False, so that a <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph> is always generated for older framework versions.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InputXsdFiles<ept id="p1">**</ept>: This setting specifies the list of input files.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each file must contain a valid XML schema.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Language<ept id="p1">**</ept>: This setting specifies the language of the generated contract code.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The setting must be recognizable by <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NamespaceMappings<ept id="p1">**</ept>: This setting specifies the mappings from the XSD Target Namespaces to CLR namespaces.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each mapping should use the following format:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The XML Serializer only accepts one mapping in the following format:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OutputDirectory<ept id="p1">**</ept>: This setting specifies the directory where the code files will be generated.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The settings will be used to generate service contract types from the service contract files when the project is built.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using contract-first development</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>After adding the service contract to the project and confirming the build settings, build the project by pressing <bpt id="p1">**</bpt>F6<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The types defined in the service contract will then be available for use in the project.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To use the types defined in the service contract, add a reference to <ph id="ph1">`ContractTypes`</ph> under the current namespace:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The types defined in the service contract will then be resolvable in the project, as shown below.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Using types derived from a service contract<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/wcf/media/contractfirsttypes.png "</bpt>ContractFirstTypes<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The types generated by the tool are created in the GeneratedXSDTypes.cs file.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The file is created in the <ph id="ph1">\&lt;</ph>project directory&gt;/obj/<ph id="ph2">\&lt;</ph>build configuration&gt;/XSDGeneratedCode/ directory by default.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The sample schema at the beginning of this topic is converted as follows:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Errors and warnings</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Errors and warnings encountered in parsing the XSD schema will appear as build errors and warnings.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Interface Inheritance</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It is not possible to use interface inheritance with contract-first development; this is consistent with the way interfaces behave in other operations.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In order to use an interface that inherits a base interface, use two separate endpoints.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The first endpoint uses the inherited contract, and the second endpoint implements the base interface.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>