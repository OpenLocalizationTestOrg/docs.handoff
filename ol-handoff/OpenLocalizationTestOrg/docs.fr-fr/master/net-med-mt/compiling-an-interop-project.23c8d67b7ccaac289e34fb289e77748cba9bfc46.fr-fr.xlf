<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c10ce9732816f4399d3ad97a7d94e3844a95591</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\compiling-an-interop-project.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8eb75da8ec4b878b4b3f6a9827e4f589e58ceba5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57e8bc3d406095885561d57ccaf09392eabe2946</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiling an Interop Project | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiling an Interop Project</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>COM interop projects that reference one or more assemblies containing imported COM types are compiled like any other managed project.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can reference interop assemblies in a development environment such as Visual Studio, or you can reference them when you use a command-line compiler.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In either case, to compile properly, the interop assembly must be in the same directory as the other project files.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are two ways to reference interop assemblies:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Embedded interop types: Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph> and <ph id="ph2">[!INCLUDE[vs_dev10_long](../../../includes/vs-dev10-long-md.md)]</ph>, you can instruct the compiler to embed type information from an interop assembly into your executable.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is the recommended technique.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Deploying interop assemblies: You can create a standard reference to an interop assembly.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this case, the interop assembly must be deployed with your application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The differences between these two techniques are discussed in greater detail in <bpt id="p1">[</bpt>Using COM Types in Managed Code<ept id="p1">](http://msdn.microsoft.com/en-us/1a95a8ca-c8b8-4464-90b0-5ee1a1135b66)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Embedding interop types with Visual Studio is demonstrated in <bpt id="p1">[</bpt>Walkthrough: Embedding Type Information from Microsoft Office Assemblies<ept id="p1">](http://msdn.microsoft.com/library/85b55e05-bc5e-4665-b6ae-e1ada9299fd3)</ept> and <bpt id="p2">[</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id="p2">](http://msdn.microsoft.com/library/b28ec92c-1867-4847-95c0-61adfe095e21)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To reference an interop assembly with a command-line compiler and embed type information in your executables, use the <bpt id="p1">[</bpt>/link (C# Compiler Options)<ept id="p1">](~/docs/csharp/language-reference/compiler-options/link-compiler-option.md)</ept> or the <bpt id="p2">[</bpt>/link (Visual Basic)<ept id="p2">](~/docs/visual-basic/reference/command-line-compiler/link.md)</ept> compiler switch and specify the name of the interop assembly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Visual C++ applications cannot embed type information, but they can interoperate with applications or add-ins that do.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To compile an application that includes a primary interop assembly when it is deployed, use the <bpt id="p1">**</bpt>/reference<ept id="p1">**</ept> compiler switch and specify the name of the interop assembly.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exposing COM Components to the .NET Framework<ept id="p1">](../../../docs/framework/interop/exposing-com-components.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Language Independence and Language-Independent Components<ept id="p1">](../../../docs/standard/language-independence-and-language-independent-components.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using COM Types in Managed Code<ept id="p1">](http://msdn.microsoft.com/en-us/1a95a8ca-c8b8-4464-90b0-5ee1a1135b66)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Embedding Type Information from Microsoft Office Assemblies<ept id="p1">](http://msdn.microsoft.com/library/85b55e05-bc5e-4665-b6ae-e1ada9299fd3)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Embedding Types from Managed Assemblies<ept id="p1">](http://msdn.microsoft.com/library/b28ec92c-1867-4847-95c0-61adfe095e21)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Importing a Type Library as an Assembly<ept id="p1">](../../../docs/framework/interop/importing-a-type-library-as-an-assembly.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>