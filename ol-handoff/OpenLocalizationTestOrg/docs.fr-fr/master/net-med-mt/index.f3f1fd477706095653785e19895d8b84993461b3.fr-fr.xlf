<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8a89b8987eaff4d94f5e620c45b551b7be682d8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab9eba132b57ebce799f401f01a6bc3b0db78c1a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06740e9db4062f0ba97e2ae355ef102115c76d4d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Patterns | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Patterns</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides three patterns for performing asynchronous operations:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming Model (APM) pattern (also called the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern), where asynchronous operations require <ph id="ph2">`Begin`</ph> and <ph id="ph3">`End`</ph> methods (for example, <ph id="ph4">`BeginWrite`</ph> and <ph id="ph5">`EndWrite`</ph> for asynchronous write operations).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This pattern is no longer recommended for new development.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming Model (APM)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Event-based Asynchronous Pattern (EAP), which requires a method that has the <ph id="ph1">`Async`</ph> suffix, and also requires one or more events, event handler delegate types, and <ph id="ph2">`EventArg`</ph>-derived types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>EAP was introduced in the .NET Framework 2.0.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It is no longer recommended for new development.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Task-based Asynchronous Pattern (TAP), which uses a single method to represent the initiation and completion of an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>TAP was introduced in the .NET Framework 4 and is the recommended approach to asynchronous programming in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>async<ept id="p1">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>await<ept id="p2">](~/docs/csharp/language-reference/keywords/await.md)</ept> keywords in C# and the <bpt id="p3">[</bpt>Async<ept id="p3">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id="p4">[</bpt>Await<ept id="p4">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> operators in Visual Basic Language add language support for TAP.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Comparing Patterns</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For a quick comparison of how the three patterns model asynchronous operations, consider a <ph id="ph1">`Read`</ph> method that reads a specified amount of data into a provided buffer starting at a specified offset:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The APM counterpart of this method would expose the <ph id="ph1">`BeginRead`</ph> and <ph id="ph2">`EndRead`</ph> methods:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The EAP counterpart would expose the following set of types and members:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The TAP counterpart would expose the following single <ph id="ph1">`ReadAsync`</ph> method:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For a comprehensive discussion of TAP, APM, and EAP, see the links provided in the next section.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming Model (APM)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Describes the legacy model that uses the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface to provide asynchronous behavior.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This model is no longer recommended for new development.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Describes the event-based legacy model for providing asynchronous behavior.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This model is no longer recommended for new development.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Describes the new asynchronous pattern based on the <ph id="ph1">&lt;xref:System.Threading.Tasks&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This model is the recommended approach to asynchronous programming in the .NET Framework 4 and later versions.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>