<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-handle-the-contextmenuopening-event.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46357ea74930bcbddbc25e0de23d592569df8a9b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\how-to-handle-the-contextmenuopening-event.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b752a531ebe9560f4375863c0b893f6963daa2ad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c2e3f2d7af08ce7a64f514dd03f1e173146db6e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Handle the ContextMenuOpening Event | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Handle the ContextMenuOpening Event</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> event can be handled in an application to either adjust an existing context menu prior to display or to suppress the menu that would otherwise be displayed by setting the <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property to <ph id="ph3">`true`</ph> in the event data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The typical reason for setting <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> to <ph id="ph2">`true`</ph> in the event data is to replace the menu entirely with a new <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> object, which sometimes requires canceling the operation and starting a new open.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you write handlers for the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> event, you should be aware of timing issues between a <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> control and the service that is responsible for opening and positioning context menus for controls in general.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic illustrates some of the code techniques for various context menu opening scenarios and illustrates a case where the timing issue comes into play.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are several scenarios for handling the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> event:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Adjusting the menu items before display.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Replacing the entire menu before display.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Completely suppressing any existing context menu and displaying no context menu.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Adjusting the Menu Items Before Display</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Adjusting the existing menu items is fairly simple and is probably the most common scenario.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You might do this in order to add or subtract context menu options in response to current state information in your application or particular state information that is available as a property on the object where the context menu is requested.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The general technique is to get the source of the event, which is the specific control that was right-clicked, and get the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A&gt;</ph> property from it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You typically want to check the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.Items%2A&gt;</ph> collection to see what context menu items already exist in the menu, and then add or remove appropriate new <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> items to or from the collection.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Replacing the Entire Menu Before Display</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An alternative scenario is if you want to replace the entire context menu.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You could of course also use a variation of the preceding code, to remove every item of an existing context menu and add new ones starting with item zero.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>But the more intuitive approach for replacing all items in the context menu is to create a new <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>, populate it with items, and then set the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;</ph> property of a control to be the new <ph id="ph3">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following is the simple handler code for replacing a <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The code references a custom <ph id="ph1">`BuildMenu`</ph> method, which is separated out because it is called by more than one of the example handlers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, if you use this style of handler for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph>, you can potentially expose a timing issue if the object where you are setting the <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> does not have a preexisting context menu.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When a user right-clicks a control, <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> is raised even if the existing <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> is empty or null.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>But in this case, whatever new <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> you set on the source element arrives too late to be displayed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Also, if the user happens to right-click a second time, this time your new <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> appears, the value is non null, and your handler will properly replace and display the menu when the handler runs a second time.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This suggests two possible workarounds:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Insure that <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> handlers always run against controls that have at least a placeholder <ph id="ph2">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> available, which you intend to be replaced by the handler code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this case, you can still use the handler shown in the previous example, but you typically want to assign a placeholder <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> in the initial markup:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Assume that the initial <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> value might be null, based on some preliminary logic.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You could either check <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> for null, or use a flag in your code to check whether your handler has been run at least once.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because you assume that the <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> is about to be displayed, your handler then sets <ph id="ph2">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> to <ph id="ph3">`true`</ph> in the event data.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To the <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenuService&gt;</ph> that is responsible for context menu display, a <ph id="ph2">`true`</ph> value for <ph id="ph3">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> in the event data represents a request to cancel the display for the context menu / control combination that raised the event.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now that you have suppressed the potentially suspect context menu, the next step is to supply a new one, then display it.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Setting the new one is basically the same as the previous handler: you build a new <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph> and set the control source's <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;</ph> property with it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The additional step is that you must now force the display of the context menu, because you suppressed the first attempt.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To force the display, you set the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Popup.IsOpen%2A?displayProperty=fullName&gt;</ph> property to <ph id="ph2">`true`</ph> within the handler.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Be careful when you do this, because opening the context menu in the handler raises the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> event again.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you reenter your handler, it becomes infinitely recursive.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is why you always need to check for <ph id="ph1">`null`</ph> or use a flag if you open a context menu from within a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ContextMenuOpening&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Suppressing Any Existing Context Menu and Displaying No Context Menu</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The final scenario, writing a handler that suppresses a menu totally, is uncommon.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If a given control is not supposed to display a context menu, there are probably more appropriate ways to assure this than by suppressing the menu just when a user requests it.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>But if you want to use the handler to suppress a context menu and show nothing, then your handler should simply set <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> to <ph id="ph2">`true`</ph> in the event data.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenuService&gt;</ph> that is responsible for displaying a context menu will check the event data of the event it raised on the control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the event was marked <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> anywhere along the route, then the context menu open action that initiated the event is suppressed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/base-elements-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ContextMenu Overview<ept id="p1">](../../../../docs/framework/wpf/controls/contextmenu-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>