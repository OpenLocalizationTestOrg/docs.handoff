<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="panels-overview.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46ccb18f0d01dfeb0ef6324da7418063eea01ee6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\panels-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60e36babb4232a812655e674fce79624256f2498</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02b4eed40da98790e17e9a8f6262556eaeb695e6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Panels Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Panels Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements are components that control the rendering of elementsâ€”their size and dimensions, their position, and the arrangement of their child content.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a number of predefined <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements as well as the ability to construct custom <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic contains the following sections.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The Panel Class<ept id="p1">](#Panels_view_from_10000_feet)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Panel Element Common Members<ept id="p1">](#Panels_declared_members)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Derived Panel Elements<ept id="p1">](#Panels_derived_elements)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>User Interface Panels<ept id="p1">](#Panels_main_UI_elements)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nested Panel Elements<ept id="p1">](#Panels_nested_panel_elements)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Panel Elements<ept id="p1">](#Panels_custom_panel_elements)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Localization/Globalization Support<ept id="p1">](#Panels_global_localization)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Panel Class</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> is the base class for all elements that provide layout support in <ph id="ph2">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Derived <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements are used to position and arrange elements in <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> and code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> includes a comprehensive suite of derived panel implementations that enable many complex layouts.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These derived classes expose properties and methods that enable most standard <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> scenarios.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Developers who are unable to find a child arrangement behavior that meets their needs can create new layouts by overriding the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information on custom layout behaviors, see <bpt id="p1">[</bpt>Custom Panel Elements<ept id="p1">](#Panels_custom_panel_elements)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Panel Common Members</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements support the base sizing and positioning properties defined by <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, including <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For additional information on positioning properties defined by <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, see <bpt id="p1">[</bpt>Alignment, Margins, and Padding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> exposes additional properties that are of critical importance in understanding and using layout.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Background%2A&gt;</ph> property is used to fill the area between the boundaries of a derived panel element with a <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> represents the child collection of elements that the <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph> is comprised of.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel.InternalChildren%2A&gt;</ph> represents the content of the <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection plus those members generated by data binding.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Both consist of a <ph id="ph1">&lt;xref:System.Windows.Controls.UIElementCollection&gt;</ph> of child elements hosted within the parent <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Panel also exposes a <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.ZIndex%2A?displayProperty=fullName&gt;</ph> attached property that can be used to achieve layered order in a derived <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Members of a panel's <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection with a higher <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.ZIndex%2A?displayProperty=fullName&gt;</ph> value appear in front of those with a lower <ph id="ph3">&lt;xref:System.Windows.Controls.Panel.ZIndex%2A?displayProperty=fullName&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is particularly useful for panels such as <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> which allow children to share the same coordinate space.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> also defines the <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.OnRender%2A&gt;</ph> method, which can be used to override the default presentation behavior of a <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Attached Properties</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Derived panel elements make extensive use of attached properties.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An attached property is a specialized form of dependency property that does not have the conventional <ph id="ph1">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> property "wrapper".</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Attached properties have a specialized syntax in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>, which can be seen in several of the examples that follow.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>One purpose of an attached property is to allow child elements to store unique values of a property that is actually defined by a parent element.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An application of this functionality is having child elements inform the parent how they wish to be presented in the <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>, which is extremely useful for application layout.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Derived Panel Elements</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Many objects derive from <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, but not all of them are intended for use as root layout providers.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There are six defined panel classes (<ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Controls.WrapPanel&gt;</ph>) that are designed specifically for creating application <ph id="ph7">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each panel element encapsulates its own special functionality, as seen in the following table.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Element Name</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>UI Panel?</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Defines an area within which you can explicitly position child elements by coordinates relative to the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> area.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Defines an area within which you can arrange child elements either horizontally or vertically, relative to each other.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Defines a flexible grid area consisting of columns and rows.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Child elements of a <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> can be positioned precisely using the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Arranges child elements into a single line that can be oriented horizontally or vertically.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Handles the layout of tab buttons in a <ph id="ph1">&lt;xref:System.Windows.Controls.TabControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Arranges content within a <ph id="ph1">&lt;xref:System.Windows.Controls.ToolBar&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.UniformGrid&gt;</ph> is used to arrange children in a grid with all equal cell sizes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Provides a base class for panels that can "virtualize" their children collection.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Arranges and virtualizes content on a single line oriented horizontally or vertically.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.WrapPanel&gt;</ph> positions child elements in sequential position from left to right, breaking content to the next line at the edge of the containing box.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Subsequent ordering happens sequentially from top to bottom or right to left, depending on the value of the <ph id="ph1">&lt;xref:System.Windows.Controls.WrapPanel.Orientation%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>User Interface Panels</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>There are six panel classes available in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> that are optimized to support <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> scenarios: <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>, <ph id="ph7">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph>, and <ph id="ph8">&lt;xref:System.Windows.Controls.WrapPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>These panel elements are easy to use, versatile, and extensible enough for most applications.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Each derived <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element treats sizing constraints differently.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Understanding how a <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> handles constraints in either the horizontal or vertical direction can make layout more predictable.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Panel Name<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>x-Dimension<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>y-Dimension<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Constrained to content</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Constrained to content</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Constrained</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Constrained</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> (Vertical Orientation)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Constrained</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Constrained to content</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> (Horizontal Orientation)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Constrained to content</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Constrained</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Constrained</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Constrained, except in cases where <ph id="ph1">&lt;xref:System.Windows.GridUnitType&gt;</ph> apply to rows and columns</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Constrained to content</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Constrained to content</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>More detailed descriptions and usage examples of each of these elements can be found below.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Canvas</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> element enables positioning of content according to absolute <bpt id="p1">*</bpt>x-<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y-<ept id="p2">*</ept>coordinates.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Elements can be drawn in a unique location; or, if elements occupy the same coordinates, the order in which they appear in markup determines the order in which the elements are drawn.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> provides the most flexible layout support of any <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Height and Width properties are used to define the area of the canvas, and elements inside are assigned absolute coordinates relative to the area of the parent <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Four attached properties, <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas.Left%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas.Top%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas.Right%2A?displayProperty=fullName&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Controls.Canvas.Bottom%2A?displayProperty=fullName&gt;</ph>, allow fine control of object placement within a <ph id="ph5">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, allowing the developer to position and arrange elements precisely on the screen.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>ClipToBounds Within a Canvas</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> can position child elements at any position on the screen, even at coordinates that are outside of its own defined <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Furthermore, <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is not affected by the size of its children.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>As a result, it is possible for a child element to overdraw other elements outside the bounding rectangle of the parent <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The default behavior of a <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is to allow children to be drawn outside the bounds of the parent <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If this behavior is undesirable, the <ph id="ph1">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> property can be set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This causes <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> to clip to its own size.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is the only layout element that allows children to be drawn outside its bounds.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This behavior is graphically illustrated in the <bpt id="p1">[</bpt>Width Properties Comparison Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160050)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Defining and Using a Canvas</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> can be instantiated simply by using <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> or code.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> to absolutely position content.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This code produces three 100-pixel squares.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The first square is red, and its top-left (<bpt id="p1">*</bpt>x, y<ept id="p1">*</ept>) position is specified as (0, 0).</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The second square is green, and its top-left position is (100, 100), just below and to the right of the first square.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The third square is blue, and its top-left position is (50, 50), thus encompassing the lower-right quadrant of the first square and the upper-left quadrant of the second.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Because the third square is laid out last, it appears to be on top of the other two squaresâ€”that is, the overlapping portions assume the color of the third box.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CanvasOvwSample#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/CanvasOvwSample/CSharp/Canvas_Ovw_Sample.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CanvasOvwSample#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/CanvasOvwSample/VisualBasic/canvas_vb.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CanvasOvwSample#1<ept id="p2">](../../../../samples/snippets/xaml/VS_Snippets_Wpf/CanvasOvwSample/XAML/default.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The compiled application yields a new <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that looks like this.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A typical Canvas Element.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/panel-intro-canvas.PNG "</bpt>panel_intro_canvas<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>DockPanel</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> element uses the <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;</ph> attached property as set in child content elements to position content along the edges of a container.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Controls.Dock&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Controls.Dock&gt;</ph>, it positions child elements above or below each other.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName&gt;</ph> is set to <ph id="ph2">&lt;xref:System.Windows.Controls.Dock&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Controls.Dock&gt;</ph>, it positions child elements to the left or right of each other.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.LastChildFill%2A&gt;</ph> property determines the position of the final element added as a child of a <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> to position a group of related controls, such as a set of buttons.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Alternately, you can use it to create a "paned" <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, similar to that found in <ph id="ph2">[!INCLUDE[TLA#tla_outlook](../../../../includes/tlasharptla-outlook-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Sizing to Content</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If its <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> properties are not specified, <ph id="ph3">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> sizes to its content.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The size can increase or decrease to accommodate the size of its child elements.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>However, when these properties are specified and there is no longer room for the next specified child element, <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> does not display that child element or subsequent child elements and does not measure subsequent child elements.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>LastChildFill</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>By default, the last child of a <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> element will "fill" the remaining, unallocated space.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If this behavior is not desired, set the <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel.LastChildFill%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Defining and Using a DockPanel</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to partition space using a <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Five <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph> elements are added as children of a parent <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Each uses a different positioning property of a <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> to partition space.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The final element "fills" the remaining, unallocated space.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>DockPanelOvwSample#1<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/DockPanelOvwSample/CPP/DockPanel_Ovw_Sample.cpp#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DockPanelOvwSample#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DockPanelOvwSample/CSharp/DockPanel_Ovw_Sample.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DockPanelOvwSample#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DockPanelOvwSample/VisualBasic/dockpanel_vb.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DockPanelOvwSample#1<ept id="p2">](../../../../samples/snippets/xaml/VS_Snippets_Wpf/DockPanelOvwSample/XAML/default.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The compiled application yields a new <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that looks like this.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A typical DockPanel scenario.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/panel-intro-dockpanel.PNG "</bpt>panel_intro_dockpanel<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Grid</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element merges the functionality of an absolute positioning and tabular data control.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> enables you to easily position and style elements.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> allows you to define flexible row and column groupings, and even provides a mechanism to share sizing information between multiple <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>How is Grid Different from Table?</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> share some common functionality, but each is best suited for different scenarios.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> is designed for use within flow content (see <bpt id="p1">[</bpt>Flow Document Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/flow-document-overview.md)</ept> for more information on flow content).</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Grids are best used inside of forms (basically anywhere outside of flow content).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Within a <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Documents.Table&gt;</ph> supports flow content behaviors like pagination, column reflow, and content selection while a <ph id="ph3">&lt;xref:System.Windows.Controls.Grid&gt;</ph> does not.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> on the other hand is best used outside of a <ph id="ph2">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> for many reasons including <ph id="ph3">&lt;xref:System.Windows.Controls.Grid&gt;</ph> adds elements based on a row and column index, <ph id="ph4">&lt;xref:System.Windows.Documents.Table&gt;</ph> does not.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element allows layering of child content, allowing more than one element to exist within a single "cell."</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> does not support layering.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Child elements of a <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> can be absolutely positioned relative to the area of their "cell" boundaries.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> does not support this feature.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Finally, a <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> is lighter weight than a <ph id="ph2">&lt;xref:System.Windows.Documents.Table&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Sizing Behavior of Columns and Rows</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Columns and rows defined within a <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> can take advantage of <ph id="ph2">&lt;xref:System.Windows.GridUnitType&gt;</ph> sizing in order to distribute remaining space proportionally.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Windows.GridUnitType&gt;</ph> is selected as the Height or Width of a row or column, that column or row receives a weighted proportion of remaining available space.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This is in contrast to <ph id="ph1">&lt;xref:System.Windows.GridUnitType&gt;</ph>, which will distribute space evenly based on the size of the content within a column or row.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This value is expressed as <ph id="ph1">`*`</ph> or <ph id="ph2">`2*`</ph> when using <ph id="ph3">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>In the first case, the row or column would receive one times the available space, in the second case, two times, and so on.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>By combining this technique to proportionally distribute space with a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph> value of <ph id="ph3">`Stretch`</ph> it is possible to partition layout space by percentage of screen space.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> is the only layout panel that can distribute space in this manner.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Defining and Using a Grid</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to build a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> similar to that found on the Run dialog available on the <ph id="ph2">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> Start menu.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>GridRunDialog#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/GridRunDialog/CSharp/window1.xaml.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>GridRunDialog#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/GridRunDialog/VisualBasic/grid_vb.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The compiled application yields a new <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that looks like this.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A typical Grid Element.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/avalon-run-dialog.PNG "</bpt>avalon_run_dialog<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>StackPanel</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> enables you to "stack" elements in an assigned direction.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The default stack direction is vertical.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel.Orientation%2A&gt;</ph> property can be used to control content flow.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>StackPanel vs. DockPanel</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> can also "stack" child elements, <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> do not produce analogous results in some usage scenarios.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example, the order of child elements can affect their size in a <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> but not in a <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This is because <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> measures in the direction of stacking at <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, whereas <ph id="ph3">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> measures only the available size.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The following example demonstrates this key difference.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>StackPanelOvw4#1<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/StackPanelOvw4/CPP/StackPanel_Ovw_Sample4.cpp#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StackPanelOvw4#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StackPanelOvw4/CSharp/StackPanel_Ovw_Sample4.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StackPanelOvw4#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StackPanelOvw4/VisualBasic/StackPanelSamp.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>StackPanelOvw4#1<ept id="p2">](../../../../samples/snippets/xaml/VS_Snippets_Wpf/StackPanelOvw4/XAML/default.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The difference in rendering behavior can be seen in this image.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: StackPanel vs. DockPanel screenshot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/layout-smiley-stackpanel.PNG "</bpt>layout_smiley_stackpanel<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Defining and Using a StackPanel</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> to create a set of vertically-positioned buttons.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For horizontal positioning, set the <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel.Orientation%2A&gt;</ph> property to <ph id="ph2">&lt;xref:System.Windows.Controls.Orientation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StackPanel_ovw2#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/StackPanel_ovw2/CSharp/StackPanel_Ovw_Sample2.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>StackPanel_ovw2#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/StackPanel_ovw2/VisualBasic/StackPanelOvw.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The compiled application yields a new <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that looks like this.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A typical StackPanel element.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/panel-intro-stackpanel.PNG "</bpt>panel_intro_stackpanel<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>VirtualizingStackPanel</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> also provides a variation of the <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> element that automatically "virtualizes" data-bound child content.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>In this context, the word virtualize refers to a technique by which a subset of elements are generated from a larger number of data items based upon which items are visible on-screen.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>It is intensive, both in terms of memory and processor, to generate a large number of UI elements when only a few may be on the screen at a given time.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> (through functionality provided by <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingPanel&gt;</ph>) calculates visible items and works with the <ph id="ph3">&lt;xref:System.Windows.Controls.ItemContainerGenerator&gt;</ph> from an <ph id="ph4">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> (such as <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> or <ph id="ph6">&lt;xref:System.Windows.Controls.ListView&gt;</ph>) to only create elements for visible items.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> element is automatically set as the items host for controls such as the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>When hosting a data bound collection, content is automatically virtualized, as long as the content is within the bounds of a <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>This greatly improves performance when hosting many child items.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The following markup demonstrates how to use a <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> as an items host.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty%2A?displayProperty=fullName&gt;</ph> attached property must be set to <ph id="ph2">`true`</ph> (default) for virtualization to occur.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>VirtualizingStackPanel_Intro#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/VirtualizingStackPanel_Intro/CS/default.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>WrapPanel</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.WrapPanel&gt;</ph> is used to position child elements in sequential position from left to right, breaking content to the next line when it reaches the edge of its parent container.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Content can be oriented horizontally or vertically.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.WrapPanel&gt;</ph> is useful for simple flowing <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> scenarios.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>It can also be used to apply uniform sizing to all of its child elements.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Windows.Controls.WrapPanel&gt;</ph> to display <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> controls that wrap when they reach the edge of their container.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>WrapPanel_Intro#1<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/WrapPanel_Intro/CPP/WrapPanel_Code.cpp#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WrapPanel_Intro#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WrapPanel_Intro/CSharp/WrapPanel_Code.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>WrapPanel_Intro#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WrapPanel_Intro/VisualBasic/WrapPanel_vb.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WrapPanel_Intro#1<ept id="p2">](../../../../samples/snippets/xaml/VS_Snippets_Wpf/WrapPanel_Intro/XAML/default.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The compiled application yields a new <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that looks like this.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A typical WrapPanel Element.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/wrappanel-element.PNG "</bpt>WrapPanel_Element<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Nested Panel Elements</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements can be nested within each other in order to produce complex layouts.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This can prove very useful in situations where one <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> is ideal for a portion of a <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, but may not meet the needs of a different portion of the <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>There is no practical limit to the amount of nesting that your application can support, however, it is generally best to limit your application to only use those panels that are actually necessary for your desired layout.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>In many cases, a <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element can be used instead of nested panels due to its flexibility as a layout container.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This can increase performance in your application by keeping unnecessary elements out of the tree.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to create a <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that takes advantage of nested <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements in order to achieve a specific layout.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>In this particular case, a <ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph> element is used to provide <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> structure, and nested <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> elements, a <ph id="ph4">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, and a <ph id="ph5">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> are used to position child elements precisely within the parent <ph id="ph6">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Nested_Panels#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Nested_Panels/CSharp/nestedpanels.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>Nested_Panels#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/Nested_Panels/VisualBasic/nestedpanels.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The compiled application yields a new <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that looks like this.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A UI that takes advantage of nested panels.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/nested-panels.PNG "</bpt>nested_panels<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Custom Panel Elements</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>While <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides an array of flexible layout controls, custom layout behaviors can also be achieved by overriding the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Custom sizing and positioning can be accomplished by defining new positioning behaviors within these override methods.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Similarly, custom layout behaviors based on derived classes (such as <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>) can be defined by overriding their <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The following markup demonstrates how to create a custom <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>This new <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, defined as <ph id="ph2">`PlotPanel`</ph>, supports the positioning of child elements through the use of hard-coded <bpt id="p1">*</bpt>x-<ept id="p1">*</ept> and <bpt id="p2">*</bpt>y-<ept id="p2">*</ept>coordinates.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>In this example, a <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> element (not shown) is positioned at plot point 50 (<bpt id="p1">*</bpt>x<ept id="p1">*</ept>), and 50 (<bpt id="p2">*</bpt>y<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>PlotPanel#1<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>PlotPanel#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>PlotPanel#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>To view a more complex custom panel implementation, see <bpt id="p1">[</bpt>Create a Custom Content-Wrapping Panel Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159979)</ept>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Localization/Globalization Support</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supports a number of features that assist in the creation of localizable <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>All panel elements natively support the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph> property, which can be used to dynamically re-flow content based on a user's locale or language settings.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.FlowDirection%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> property provides a mechanism that enables application developers to anticipate the needs of localized <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Windows.SizeToContent&gt;</ph> value of this property, a parent <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> always sizes dynamically to fit content and is not constrained by artificial height or width restrictions.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.DockPanel&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> are all good choices for localizable <ph id="ph4">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> is not a good choice, however, because it positions content absolutely, making it difficult to localize.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For additional information on creating <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications with localizable <ph id="ph2">[!INCLUDE[TLA#tla_ui#plural](../../../../includes/tlasharptla-uisharpplural-md.md)]</ph>s, see the <bpt id="p1">[</bpt>Use Automatic Layout Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/use-automatic-layout-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: My First WPF Desktop Application<ept id="p1">](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Layout Gallery Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160054)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout<ept id="p1">](../../../../docs/framework/wpf/advanced/layout.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Controls Gallery Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160053)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Alignment, Margins, and Padding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Custom Content-Wrapping Panel Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159979)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/attached-properties-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Use Automatic Layout Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/use-automatic-layout-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout and Design<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>