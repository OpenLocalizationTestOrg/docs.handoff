<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="implementing-an-implicit-transaction-using-transaction-scope.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a75ddc22f7e664c8abcb74aad6b4a98046dacdd3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\transactions\implementing-an-implicit-transaction-using-transaction-scope.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90a836649a6ba37d5c460cd11f67f42b1768392c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed98fef441830a8557f3b59547f47d5e9c172b51</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Implementing an Implicit Transaction using Transaction Scope | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing an Implicit Transaction using Transaction Scope</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class provides a simple way to mark a block of code as participating in a transaction, without requiring you to interact with the transaction itself.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A transaction scope can select and manage the ambient transaction automatically.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Due to its ease of use and efficiency, it is recommended that you use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class when developing a transaction application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition, you do not need to enlist resources explicitly with the transaction.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> resource manager (such as SQL Server 2005) can detect the existence of an ambient transaction created by the scope and automatically enlist.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating a transaction scope</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following sample shows a simple usage of the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TransactionScope#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Remoting/TransactionScope/cs/ScopeWithSQL.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>TransactionScope#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Remoting/TransactionScope/vb/ScopeWithSQL.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The transaction scope is started once you create a new <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>As illustrated in the code sample, it is recommended that you create scopes with a <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement is available both in C# and in Visual Basic, and works like a <bpt id="p2">**</bpt>try...finally<ept id="p2">**</ept> block to ensure that the scope is disposed of properly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When you instantiate <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>, the transaction manager determines which transaction to participate in.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once determined, the scope always participates in that transaction.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The decision is based on two factors: whether an ambient transaction is present and the value of the <bpt id="p1">**</bpt>TransactionScopeOption<ept id="p1">**</ept> parameter in the constructor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The ambient transaction is the transaction within which your code executes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can obtain a reference to the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information on how this parameter is used, see the Managing transaction flow using TransactionScopeOption section of this topic.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Completing a transaction scope</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When your application completes all the work it wants to perform in a transaction, you should call the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method only once to inform the transaction manager that it is acceptable to commit the transaction.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is very good practice to put the call to <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> as the last statement in the <bpt id="p1">**</bpt>using<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Failing to call this method aborts the transaction, because the transaction manager interprets this as a system failure, or equivalent to an exception thrown within the scope of transaction.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, calling this method does not guarantee that the transaction wil be committed.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It is merely a way of informing the transaction manager of your status.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After calling the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method, you can no longer access the ambient transaction by using the <ph id="ph2">&lt;xref:System.Transactions.Transaction.Current%2A&gt;</ph> property, and attempting to do so will result in an exception being thrown.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object created the transaction initially, the actual work of committing the transaction by the transaction manager occurs after the last line of code in the <bpt id="p1">**</bpt>using<ept id="p1">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If it did not create the transaction, the commit occurs whenever <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> is called by the owner of the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>At that point the Transaction Manager calls the resource managers and informs them to either commit or rollback, based on whether the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method was called on the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>using<ept id="p1">**</ept> statement ensures that the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object is called even if an exception occurs.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Dispose%2A&gt;</ph> method marks the end of the transaction scope.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Exceptions that occur after calling this method may not affect the transaction.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This method also restores the ambient transaction to it previous state.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.TransactionAbortedException&gt;</ph> is thrown if the scope creates the transaction, and the transaction is aborted.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.TransactionInDoubtException&gt;</ph> is thrown if the transaction manager cannot reach a Commit decision.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>No exception is thrown if the transaction is committed.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Rolling back a transaction</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you want to rollback a transaction, you should not call the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> method within the transaction scope.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, you can throw an exception within the scope.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The transaction in which it participates in will be rolled back.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="ManageTxFlow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Managing transaction flow using TransactionScopeOption</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Transaction scope can be nested by calling a method that uses a <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> from within a method that uses its own scope, as is the case with the <ph id="ph2">`RootMethod`</ph> method in the following example,</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The top-most transaction scope is referred to as the root scope.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class provides several overloaded constructors that accept an enumeration of the type <ph id="ph2">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph>, which defines the transactional behavior of the scope.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object has three options:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Join the ambient transaction, or create a new one if one does not exist.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Be a new root scope, that is, start a new transaction and have that transaction be the new ambient transaction inside its own scope.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Not take part in a transaction at all.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There is no ambient transaction as a result.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the scope is instantiated with <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph>, and an ambient transaction is present, the scope joins that transaction.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If, on the other hand, there is no ambient transaction, then the scope creates a new transaction, and become the root scope.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is the default value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph> is used, the code inside the scope does not need to behave differently whether it is the root or just joining the ambient transaction.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It should operate identically in both cases.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the scope is instantiated with <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph>, it is always the root scope.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It starts a new transaction, and its transaction becomes the new ambient transaction inside the scope.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the scope is instantiated with <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph>, it never takes part in a transaction, regardless of whether an ambient transaction is present.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A scope instantiated with this value always have <bpt id="p1">**</bpt>null<ept id="p1">**</ept> as its ambient transaction.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The above options are summarized in the following table.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>TransactionScopeOption</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Ambient Transaction</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The scope takes part in</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Required</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>New Transaction (will be the root)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Requires New</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>New Transaction (will be the root)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Suppress</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>No Transaction</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Required</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Ambient  Transaction</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Requires New</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>New Transaction (will be the root)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Suppress</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>No Transaction</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object joins an existing ambient transaction, disposing of the scope object may not end the transaction, unless the scope aborts the transaction.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If the ambient transaction was created by a root scope, only when the root scope is disposed of, does <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> get called on the transaction.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the transaction was created manually, the transaction ends when it is either aborted, or committed by its creator.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object that creates three nested scope objects, each instantiated with a different <ph id="ph2">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The example shows a code block without any ambient transaction creating a new scope (<ph id="ph1">`scope1`</ph>) with <ph id="ph2">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The scope <ph id="ph1">`scope1`</ph> is a root scope as it creates a new transaction (Transaction A) and makes Transaction A the ambient transaction.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Scope1`</ph> then creates three more objects, each with a different <ph id="ph2">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`scope2`</ph> is created with <ph id="ph2">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph>, and since there is an ambient transaction, it joins the first transaction created by <ph id="ph3">`scope1`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`scope3`</ph> is the root scope of a new transaction, and that <ph id="ph2">`scope4`</ph> has no ambient transaction.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Although the default and most commonly used value of <ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph> is <ph id="ph2">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph>, each of the other values has its unique purpose.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Transactions.TransactionScopeOption&gt;</ph> is useful when you want to preserve the operations performed by the code section, and do not want to abort the ambient transaction if the operations fail.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, when you want to perform logging or audit operations, or when you want to publish events to subscribers regardless of whether your ambient transaction commits or aborts.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This value allows you to have a non-transactional code section inside a transaction scope, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Voting inside a nested scope</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Although a nested scope can join the ambient transaction of the root scope, calling <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> in the nested scope has no affect on the root scope.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Only if all the scopes from the root scope down to the last nested scope vote to commit the transaction, will the transaction be committed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Not calling <ph id="ph1">&lt;xref:System.Transactions.TransactionScope.Complete%2A&gt;</ph> in a nested scope will affect the root scope as the ambient transaction will immediately be aborted.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Setting the TransactionScope timeout</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Some of the overloaded constructors of <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> accept a value of type <ph id="ph2">&lt;xref:System.TimeSpan&gt;</ph>, which is used to control the timeout of the transaction.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>A timeout set to zero means an infinite timeout.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Infinite timeout is useful mostly for debugging, when you want to isolate a problem in your business logic by stepping through your code, and you do not want the transaction you debug to time out while you attempt to locate the problem.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Be extremely careful using the infinite timeout value in all other cases, because it overrides the safeguards against transaction deadlocks.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You typically set the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> timeout to values other than default in two cases.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The first is during development, when you want to test the way your application handles aborted transactions.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>By setting the timeout to a small value (such as one millisecond), you cause your transaction to fail and can thus observe your error handling code.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The second case in which you set the value to be less than the default timeout is when you believe that the scope is involved in resource contention, resulting in deadlocks.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In that case, you want to abort the transaction as soon as possible and not wait for the default timeout to expire.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>When a scope joins an ambient transaction but specifies a smaller timeout than the one the ambient transaction is set to, the new, shorter timeout is enforced on the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object, and the scope must end within the nested time specified, or the transaction is automatically aborted.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If the nested scope's timeout is more than that of the ambient transaction, it has no effect.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Setting the TransactionScope isolation level</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Some of the overloaded constructors of <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> accept a structure of type <ph id="ph2">&lt;xref:System.Transactions.TransactionOptions&gt;</ph> to specify an isolation level, in addition to a timeout value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>By default, the transaction executes with isolation level set to <ph id="ph1">&lt;xref:System.Transactions.IsolationLevel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Selecting an isolation level other than <ph id="ph1">&lt;xref:System.Transactions.IsolationLevel&gt;</ph> is commonly used for read-intensive systems.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This requires a solid understanding of transaction processing theory and the semantics of the transaction itself, the concurrency issues involved, and the consequences for system consistency.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In addition, not all resource managers support all levels of isolation, and they may elect to take part in the transaction at a higher level than the one configured.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Every isolation level besides <ph id="ph1">&lt;xref:System.Transactions.IsolationLevel&gt;</ph> is susceptible to inconsistency resulting from other transactions accessing the same information.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The difference between the different isolation levels is in the way read and write locks are used.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A lock can be held only when the transaction accesses the data in the resource manager, or it can be held until the transaction is committed or aborted.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The former is better for throughput, the latter for consistency.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The two kinds of locks and the two kinds of operations (read/write) give four basic isolation levels.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Transactions.IsolationLevel&gt;</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When using nested <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> objects, all nested scopes must be configured to use exactly the same isolation level if they want to join the ambient transaction.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If a nested <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> object tries to join the ambient transaction yet it specifies a different isolation level, an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Interop with COM+</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>When you create a new <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> instance, you can use the <ph id="ph2">&lt;xref:System.Transactions.EnterpriseServicesInteropOption&gt;</ph> enumeration in one of the constructors to specify how to interact with COM+.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information on this, see <bpt id="p1">[</bpt>Interoperability with Enterprise Services and COM+ Transactions<ept id="p1">](../../../../docs/framework/data/transactions/interoperability-with-enterprise-services-and-com-transactions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>