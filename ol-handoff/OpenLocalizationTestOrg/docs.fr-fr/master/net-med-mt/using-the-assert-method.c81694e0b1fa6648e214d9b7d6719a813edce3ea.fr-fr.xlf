<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">840388e1acf1541d873a2198af42021299ed826b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\misc\using-the-assert-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df0f1370317d8b8269b1b4e85ad15d5b304128e5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a74928a9a1ce4fd980c4b2dc5f11d34c97809567</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using the Assert Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the Assert Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> is a method that can be called on code access permission classes and on the <ph id="ph2">&lt;xref:System.Security.PermissionSet&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> to enable your code (and downstream callers) to perform actions that your code has permission to do but its callers might not have permission to do.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A security assertion changes the normal process that the runtime performs during a security check.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you assert a permission, it tells the security system not to check the callers of your code for the asserted permission.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use assertions carefully because they can open security holes and undermine the runtime's mechanism for enforcing security restrictions.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Assertions are useful in situations in which a library calls into unmanaged code or makes a call that requires a permission that is not obviously related to the library's intended use.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, all managed code that calls into unmanaged code must have <bpt id="p1">**</bpt>SecurityPermission<ept id="p1">**</ept> with the <bpt id="p2">**</bpt>UnmanagedCode<ept id="p2">**</ept> flag specified.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Code that does not originate from the local computer, such as code that is downloaded from the local intranet, will not be granted this permission by default.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, in order for code that is downloaded from the local intranet to be able to call a library that uses unmanaged code, it must have the permission asserted by the library.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Additionally, some libraries might make calls that are unseen to callers and require special permissions.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can also use assertions in situations in which your code accesses a resource in a way that is completely hidden from callers.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, suppose your library acquires information from a database, but in the process also reads information from the computer registry.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because developers using your library do not have access to your source, they have no way of knowing that their code requires <bpt id="p1">**</bpt>RegistryPermission<ept id="p1">**</ept> in order to use your code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case, if you decide that it is not reasonable or necessary to require that callers of your code have permission to access the registry, you can assert permission for reading the registry.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this situation, it is appropriate for the library to assert the permission so that callers without <bpt id="p1">**</bpt>RegistryPermission<ept id="p1">**</ept> can use the library.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The assertion affects the stack walk only if the asserted permission and a permission demanded by a downstream caller are of the same type and if the demanded permission is a subset of the asserted permission.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if you assert <bpt id="p1">**</bpt>FileIOPermission<ept id="p1">**</ept> to read all files on the C drive, and a downstream demand is made for <bpt id="p2">**</bpt>FileIOPermission<ept id="p2">**</ept> to read files in C:\Temp, the assertion could affect the stack walk; however, if the demand was for <bpt id="p3">**</bpt>FileIOPermission<ept id="p3">**</ept> to write to the C drive, the assertion would have no effect.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To perform assertions, your code must be granted both the permission you are asserting and the <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> that represents the right to make assertions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Although you could assert a permission that your code has not been granted, the assertion would be pointless because the security check would fail before the assertion could cause it to succeed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following illustration shows what happens when you use <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Assume that the following statements are true about assemblies A, B, C, E, and F, and two permissions, P1 and P1A:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>P1A represents the right to read .txt files on the C drive.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>P1 represents the right to read all files on the C drive.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>P1A and P1 are both <bpt id="p1">**</bpt>FileIOPermission<ept id="p1">**</ept> types, and P1A is a subset of P1.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assemblies E and F have been granted P1A permission.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Assembly C has been granted P1 permission.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assemblies A and B have been granted neither P1 nor P1A permissions.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Method A is contained in assembly A, method B is contained in assembly B, and so on.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using Assert</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In this scenario, method A calls B, B calls C, C calls E, and E calls F. Method C asserts permission to read files on the C drive (permission P1), and method E demands permission to read .txt files on the C drive (permission P1A).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When the demand in F is encountered at run time, a stack walk is performed to check the permissions of all callers of F, starting with E. E has been granted P1A permission, so the stack walk proceeds to examine the permissions of C, where C's assertion is discovered.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Because the demanded permission (P1A) is a subset of the asserted permission (P1), the stack walk stops and the security check automatically succeeds.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It does not matter that assemblies A and B have not been granted permission P1A.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>By asserting P1, method C ensures that its callers can access the resource protected by P1, even if the callers have not been granted permission to access that resource.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you design a class library and a class accesses a protected resource, you should, in most cases, make a security demand requiring that the callers of the class have the appropriate permission.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the class then performs an operation for which you know most of its callers will not have permission, and if you are willing to take the responsibility for letting these callers call your code, you can assert the permission by calling the <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> method on a permission object that represents the operation the code is performing.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Using <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> in this way lets callers that normally could not do so call your code.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Therefore, if you assert a permission, you should be sure to perform appropriate security checks beforehand to prevent your component from being misused.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, suppose your highly trusted library class has a method that deletes files.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It accesses the file by calling an unmanaged Win32 function.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A caller invokes your code's <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> method, passing in the name of the file to be deleted, C:\Test.txt.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Within the <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> method, your code creates a <ph id="ph1">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> object representing write access to C:\Test.txt.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(Write access is required to delete a file.) Your code then invokes an imperative security check by calling the <bpt id="p1">**</bpt>FileIOPermission<ept id="p1">**</ept> object's <bpt id="p2">**</bpt>Demand<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If one of the callers in the call stack does not have this permission, a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If no exception is thrown, you know that all callers have the right to access C:\Test.txt.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because you believe that most of your callers will not have permission to access unmanaged code, your code then creates a <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> object that represents the right to call unmanaged code and calls the object's <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Finally, it calls the unmanaged Win32 function to delete C:\Text.txt and returns control to the caller.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You must be sure that your code does not use assertions in situations where your code can be used by other code to access a resource that is protected by the permission you are asserting.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, in code that writes to a file whose name is specified by the caller as a parameter, you would not assert the <bpt id="p1">**</bpt>FileIOPermission<ept id="p1">**</ept> for writing to files because your code would be open to misuse by a third party.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you use the imperative security syntax, calling the <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> method on multiple permissions in the same method causes a security exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Instead, you should create a <bpt id="p1">**</bpt>PermissionSet<ept id="p1">**</ept> object, pass it the individual permissions you want to invoke, and then call the <bpt id="p2">**</bpt>Assert<ept id="p2">**</ept> method on the <bpt id="p3">**</bpt>PermissionSet<ept id="p3">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can call the <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> method more than once when you use the declarative security syntax.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example shows declarative syntax for overriding security checks using the <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Notice that the <bpt id="p1">**</bpt>FileIOPermissionAttribute<ept id="p1">**</ept> syntax takes two values: a <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph> enumeration and the location of the file or directory to which permission is to be granted.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> causes demands for access to <ph id="ph1">`C:\Log.txt`</ph> to succeed, even though callers are not checked for permission to access the file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code fragments show imperative syntax for overriding security checks using the <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this example, an instance of the <bpt id="p1">**</bpt>FileIOPermission<ept id="p1">**</ept> object is declared.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Its constructor is passed <bpt id="p1">**</bpt>FileIOPermissionAccess.AllAccess<ept id="p1">**</ept> to define the type of access allowed, followed by a string describing the file's location.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Once the <bpt id="p1">**</bpt>FileIOPermission<ept id="p1">**</ept> object is defined, you only need to call its <bpt id="p2">**</bpt>Assert<ept id="p2">**</ept> method to override the security check.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.PermissionSet&gt;</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](../../../docs/standard/attributes/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Code Access Security<ept id="p1">](../../../docs/framework/misc/code-access-security.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>