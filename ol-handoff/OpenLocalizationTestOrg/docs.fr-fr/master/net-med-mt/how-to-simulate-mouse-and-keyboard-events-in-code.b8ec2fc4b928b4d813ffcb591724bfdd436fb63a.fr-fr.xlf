<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-simulate-mouse-and-keyboard-events-in-code.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98832b7084d2c1352f395fb45332513d7ae18e30</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\how-to-simulate-mouse-and-keyboard-events-in-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84b6db8df5fc34871db0c1757eadd0469ec81b59</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ed53ac80c94b2f3558e6c81c52e2e542965fe96</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Simulate Mouse and Keyboard Events in Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Simulate Mouse and Keyboard Events in Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Forms provides several options for programmatically simulating mouse and keyboard input.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of these options.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Simulating Mouse Input</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The best way to simulate mouse events is to call the <ph id="ph1">`On`</ph><bpt id="p1">*</bpt>EventName<ept id="p1">*</ept> method that raises the mouse event you want to simulate.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This option is usually possible only within custom controls and forms, because the methods that raise events are protected and cannot be accessed outside the control or form.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the following steps illustrate how to simulate clicking the right mouse button in code.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To programmatically click the right mouse button</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Windows.Forms.MouseEventArgs&gt;</ph> whose <ph id="ph2">&lt;xref:System.Windows.Forms.MouseEventArgs.Button%2A&gt;</ph> property is set to the <ph id="ph3">&lt;xref:System.Windows.Forms.MouseButtons?displayProperty=fullName&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnMouseClick%2A&gt;</ph> method with this <ph id="ph2">&lt;xref:System.Windows.Forms.MouseEventArgs&gt;</ph> as the argument.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information on custom controls, see <bpt id="p1">[</bpt>Developing Windows Forms Controls at Design Time<ept id="p1">](../../../docs/framework/winforms/controls/developing-windows-forms-controls-at-design-time.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>There are other ways to simulate mouse input.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, you can programmatically set a control property that represents a state that is typically set through mouse input (such as the <ph id="ph1">&lt;xref:System.Windows.Forms.CheckBox.Checked%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.CheckBox&gt;</ph> control), or you can directly call the delegate that is attached to the event you want to simulate.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Simulating Keyboard Input</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Although you can simulate keyboard input by using the strategies discussed above for mouse input, Windows Forms also provides the <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class for sending keystrokes to the active application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If your application is intended for international use with a variety of keyboards, the use of <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys.Send%2A?displayProperty=fullName&gt;</ph> could yield unpredictable results and should be avoided.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class is susceptible to timing issues, which some developers have had to work around.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class tries to use the previous implementation first, and if that fails, uses the new implementation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As a result, the <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class may behave differently on different operating systems.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Additionally, when the <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class uses the new implementation, the <ph id="ph2">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> method will not wait for messages to be processed when they are sent to another process.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If your application relies on consistent behavior regardless of the operating system, you can force the <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the new implementation by adding the following application setting to your app.config file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To force the <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the previous implementation, use the value <ph id="ph2">`"JournalHook"`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To send a keystroke to the same application</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The specified keystrokes will be received by the active control of the application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt;</ph> to simulate pressing the ENTER key when the user double-clicks the surface of the form.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example assumes a <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph> with a single <ph id="ph2">&lt;xref:System.Windows.Forms.Button&gt;</ph> control that has a tab index of 0.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#10<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/cpp/form1.cpp#10)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#10<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/CS/form1.cs#10)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#10<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/VB/form1.vb#10)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To send a keystroke to a different application</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Activate the application window that will receive the keystrokes, and then call the <ph id="ph1">&lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because there is no managed method to activate another application, you must use native Windows methods to force focus on other applications.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code example uses platform invoke to call the <ph id="ph1">`FindWindow`</ph> and <ph id="ph2">`SetForegroundWindow`</ph> methods to activate the Calculator application window, and then calls <ph id="ph3">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> to issue a series of calculations to the Calculator application.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The correct parameters of the <ph id="ph1">`FindWindow`</ph> call that locates the Calculator application vary based on your version of Windows.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code finds the Calculator application on <ph id="ph1">[!INCLUDE[win7](../../../includes/win7-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>On <ph id="ph1">[!INCLUDE[windowsver](../../../includes/windowsver-md.md)]</ph>, change the first parameter to "SciCalc".</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can use the Spy++ tool, included with Visual Studio, to determine the correct parameters.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#5<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/cpp/form1.cpp#5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/CS/form1.cs#5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#5<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/VB/form1.vb#5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following code example is the complete application for the previous code examples.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#0<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/cpp/form1.cpp#0)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#0<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/CS/form1.cs#0)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SimulateKeyPress#0<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SimulateKeyPress/VB/form1.vb#0)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This example requires:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>References to the System, System.Drawing and System.Windows.Forms assemblies.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For information about building this example from the command line for <ph id="ph1">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> or <ph id="ph2">[!INCLUDE[csprcs](../../../includes/csprcs-md.md)]</ph>, see <bpt id="p1">[</bpt>Building from the Command Line<ept id="p1">](~/docs/visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id="p2">[</bpt>Command-line Building With csc.exe<ept id="p2">](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can also build this example in <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> by pasting the code into a new project.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Also see <bpt id="p1">[</bpt>How to: Compile and Run a Complete Windows Forms Code Example Using Visual Studio<ept id="p1">](http://msdn.microsoft.com/library/Bb129228\(v=vs.110\))</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>User Input in Windows Forms<ept id="p1">](../../../docs/framework/winforms/user-input-in-windows-forms.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>