<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">261ab95e29f3f06df7fc3ebfcb8420849d737761</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\linq-to-sql-n-tier-with-web-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29093c93516085870b7d1731a31345908d7297b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3e224d012b8949bb92e9bcbd79fc06352eaeb79</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ to SQL N-Tier with Web Services | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ to SQL N-Tier with Web Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> is designed especially for use on the middle tier in a loosely-coupled data access layer (DAL) such as a Web service.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If the presentation tier is an ASP.NET Web page, then you use the <ph id="ph1">&lt;xref:System.Web.UI.WebControls.LinqDataSource&gt;</ph> Web server control to manage the data transfer between the user interface and <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> on the middle-tier.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the presentation tier is not an ASP.NET page, then both the middle-tier and the presentation tier must do some additional work to manage the serialization and deserialization of data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Setting up LINQ to SQL on the Middle Tier</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In a Web service or n-tier application, the middle tier contains the data context and the entity classes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can create these classes manually, or by using either SQLMetal.exe or the <ph id="ph1">[!INCLUDE[vs_ordesigner_long](../../../../../../includes/vs-ordesigner-long-md.md)]</ph> as described elsewhere in the documentation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>At design time, you have the option to make the entity classes serializable.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Make Entities Serializable<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/how-to-make-entities-serializable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Another option is to create a separate set of classes that encapsulate the data to be serialized, and then project into those serializable types when you return data in your <ph id="ph1">[!INCLUDE[vbteclinq](../../../../../../includes/vbteclinq-md.md)]</ph> queries.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You then define the interface with the methods that the clients will call to retrieve, insert and update data.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The interface methods wrap your <ph id="ph1">[!INCLUDE[vbteclinq](../../../../../../includes/vbteclinq-md.md)]</ph> queries.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can use any kind of serialization mechanism to handle the remote method calls and the serialization of data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The only requirement is that if you have cyclic or bi-directional relationships in your object model, such as that between Customers and Orders in the standard Northwind object model, then you must use a serializer that supports it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Windows Communication Foundation (WCF) <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> supports bi-directional relationships but the XmlSerializer that is used with non-WCF Web services does not.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you select to use the XmlSerializer, then you must make sure that your object model has no cyclic relationships.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about Windows Communication Foundation, see <bpt id="p1">[</bpt>Windows Communication Foundation Services and WCF Data Services in Visual Studio<ept id="p1">](/visualstudio/data-tools/windows-communication-foundation-services-and-wcf-data-services-in-visual-studio)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Implement your business rules or other domain-specific logic by using the partial classes and methods on the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph> and entity classes to hook into <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> runtime events.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing N-Tier Business Logic<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/implementing-business-logic-linq-to-sql.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Defining the Serializable Types</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The client or presentation tier must have type definitions for the classes that it will be receiving from the middle tier.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Those types may be the entity classes themselves, or special classes that wrap only certain fields from the entity classes for remoting.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In any case, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> is completely unconcerned about how the presentation tier acquires those type definitions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, the presentation tier could use WCF to generate the types automatically, or it could have a copy of a DLL in which those types are defined, or it could just define its own versions of the types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Retrieving and Inserting Data</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The middle tier defines an interface that specifies how the presentation tier accesses the data.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example <ph id="ph1">`GetProductByID(int productID)`</ph>, or <ph id="ph2">`GetCustomers()`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>On the middle tier, the method body typically creates a new instance of the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>, executes a query against one or more of its table.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The middle tier then returns the result as an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, where <ph id="ph2">`T`</ph> is either an entity class or another type that is used for serialization.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The presentation tier never sends or receives query variables directly to or from the middle tier.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The two tiers exchange values, objects, and collections of concrete data.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>After it has received a collection, the presentation tier can use <ph id="ph1">[!INCLUDE[vbteclinq](../../../../../../includes/vbteclinq-md.md)]</ph> to Objects to query it if necessary.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When inserting data, the presentation tier can construct a new object and send it to the middle tier, or it can have the middle tier construct the object based on values that it provides.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In general, retrieving and inserting data in n-tier applications does not differ much from the process in 2-tier applications.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Querying the Database<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/querying-the-database.md)</ept> and <bpt id="p2">[</bpt>Making and Submitting Data Changes<ept id="p2">](../../../../../../docs/framework/data/adonet/sql/linq/making-and-submitting-data-changes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Tracking Changes for Updates and Deletes</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> supports optimistic concurrency based on timestamps (also named RowVersions) and on original values.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the database tables have timestamps, then updates and deletions require little extra work on either the middle-tier or presentation tier.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, if you must use original values for optimistic concurrency checks, then the presentation tier is responsible for tracking those values and sending them back when it makes updates.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is because changes that were made to entities on the presentation tier are not tracked on the middle tier.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In fact, the original retrieval of an entity, and the eventual update made to it are typically performed by two completely separate instances of the <ph id="ph1">&lt;xref:System.Data.Linq.DataContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The greater the number of changes that the presentation tier makes, the more complex it becomes to track those changes and package them back to the middle tier.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The implementation of a mechanism for communicating changes is completely up to the application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The only requirement is that <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> must be given those original values that are required for optimistic concurrency checks.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>N-Tier and Remote Applications with LINQ to SQL<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/n-tier-and-remote-applications-with-linq-to-sql.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NIB: LinqDataSource Web Server Control Overview<ept id="p1">](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>