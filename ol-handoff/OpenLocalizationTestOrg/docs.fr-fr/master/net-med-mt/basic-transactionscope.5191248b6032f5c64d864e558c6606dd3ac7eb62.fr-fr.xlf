<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf68bbdbce400a96b1ff42dab18575ceaeb70a31</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\basic-transactionscope.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55a14cf5a6994e6a2d732836d4230d06c5d7b79e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6656be55d92f9fcf12d4924f994ecae0db3614a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Basic TransactionScope | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Basic TransactionScope</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample consists of four scenarios that run showing how to nest <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> instances.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The first scenario shows nesting a 3rd party activity of which the author has no knowledge of the construction.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The second and third scenarios show how time-outs are respected and the final scenario shows the <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope.AbortInstanceOnTransactionFailure%2A&gt;</ph> setting.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Nesting of TransactionScopeActivity</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The workflow for the first scenario consists of a sequence of two <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities and a <ph id="ph2">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The body of the <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> is a sequence of two more <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activities, a custom activity that prints the local identifier of the transaction and a third party activity.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The third party activity <ph id="ph1">`TransactionScopeTest`</ph> contains a <ph id="ph2">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> although the workflow author has no way of knowing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This scenario shows that <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activities can be nested.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Time-Outs</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The workflow for the second scenario is nearly identical to the first.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TransactionScopeTest`</ph> has been replaced with a <ph id="ph2">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The body of the <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> is a five-second delay and the time-out for the transaction is set to two seconds.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The time-out for the outer <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> is set to 10 seconds.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that the smallest time-out in scope is respected and the transaction times out.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The workflow for the third scenario is nearly identical to scenario two.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The delay activity has been moved from the body of the inner <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> to immediately after it in the sequence that is the body of the outer <ph id="ph2">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The transaction still times out but because the two second time-out of the inner <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> no longer applies.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The transaction times out at 10 seconds when the outer <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> time-out is exceeded.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Aborting on Transaction Failure</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This workflow is similar to scenario three except the time-outs have been replaced by the <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope.AbortInstanceOnTransactionFailure%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the flags of all inner children, if set, must match the outer <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this scenario, they do not and an exception is thrown when the workflow opens.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To run the sample</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open the BasicTransactionScopeSample.sln solution in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To build the solution, press CTRL+SHIFT+B or select <bpt id="p1">**</bpt>Build Solution<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Once the build has succeeded, press F5 or select <bpt id="p1">**</bpt>Start Debugging<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Alternatively you can press CTRL+F5 or select <bpt id="p1">**</bpt>Start Without Debugging<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu to run without debugging.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>