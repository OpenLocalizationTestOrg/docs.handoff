<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">881e018664b4a3322a165c114749838495f04ac9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\ilasm-exe-il-assembler.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a7bb81f5c2aa9a59bd1860d2f37a0dfcd60e60bb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e35a2f3d77e284744f8708b2bcbec2c60e9accc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Ilasm.exe (IL Assembler) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Ilasm.exe (IL Assembler)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The IL Assembler generates a portable executable (PE) file from intermediate language (IL).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(For more information on IL, see <bpt id="p1">[</bpt>Managed Execution Process<ept id="p1">](../../../docs/standard/managed-execution-process.md)</ept>.) You can run the resulting executable, which contains IL and the required metadata, to determine whether the IL performs as expected.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tool is automatically installed with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>filename<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The name of the .il source file.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This file consists of metadata declaration directives and symbolic IL instructions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Multiple source file arguments can be supplied to produce a single PE file with Ilasm.exe.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  Ensure that the last line of code in the .il source file has either trailing white space or an end-of-line character.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/32bitpreferred<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Creates a 32-bit-preferred image (PE32).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/alignment<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">*</bpt>integer<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sets FileAlignment to the value specified by <bpt id="p1">*</bpt>integer<ept id="p1">*</ept> in the NT Optional header.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the .alignment IL directive is specified in the file, this option overrides it.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/appcontainer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Produces a .dll or .exe file that runs in the Windows app container, as output.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/arm<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Specifies the Advanced RISC Machine (ARM) as the target processor.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If no image bitness is specified, the default is <bpt id="p1">**</bpt>/32bitpreferred<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/base<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">*</bpt>integer<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Sets ImageBase to the value specified by <bpt id="p1">*</bpt>integer<ept id="p1">*</ept> in the NT Optional header.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the .imagebase IL directive is specified in the file, this option overrides it.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/clock<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Measures and reports the following compilation times in milliseconds for the specified .il source file:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Total Run<ept id="p1">**</ept>: The total time spent performing all the specific operations that follow.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Startup<ept id="p1">**</ept>: Loading and opening the file.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Emitting MD<ept id="p1">**</ept>: Emitting metadata.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Ref to Def Resolution<ept id="p1">**</ept>: Resolving references to definitions in the file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CEE File Generation<ept id="p1">**</ept>: Generating the file image in memory.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PE File Writing<ept id="p1">**</ept>: Writing the image to a PE file.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/debug<ept id="p1">**</ept>[=<ph id="ph1">`IMPL`</ph>&amp;#124;<ph id="ph2">`OPT`</ph>]</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Includes debug information (local variable and argument names, and line numbers).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Creates a PDB file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/debug<ept id="p1">**</ept> with no additional value disables JIT optimization and uses sequence points from the PDB file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IMPL<ept id="p1">**</ept> disables JIT optimization and uses implicit sequence points.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OPT<ept id="p1">**</ept> enables JIT optimization and uses implicit sequence points.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/dll<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Produces a .dll file as output.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/enc<ept id="p1">**</ept><ph id="ph1">=</ph><ph id="ph2">`file`</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Creates Edit-and-Continue deltas from the specified source file.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This argument is for academic use only and is not supported for commercial use.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/exe<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Produces an executable file as output.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This is the default.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/flags<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">*</bpt>integer<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Sets ImageFlags to the value specified by <bpt id="p1">*</bpt>integer<ept id="p1">*</ept> in the common language runtime header.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the .corflags IL directive is specified in the file, this option overrides it.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See CorHdr.h, COMIMAGE_FLAGS for a list of valid values for <bpt id="p1">*</bpt>integer<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/fold<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Folds identical method bodies into one.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">/</ph><bpt id="p1">**</bpt>highentropyva<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Produces an output executable that supports high-entropy address space layout randomization (ASLR).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>(Default for <bpt id="p1">**</bpt>/appcontainer<ept id="p1">**</ept>.)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/include<ept id="p1">**</ept><ph id="ph1">=</ph><ph id="ph2">`includePath`</ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Sets a path to search for files included with <ph id="ph1">`#include`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/itanium<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Specifies Intel Itanium as the target processor.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If no image bitness is specified, the default is <bpt id="p1">**</bpt>/pe64<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/key:<ept id="p1">**</ept> <bpt id="p2">*</bpt>keyFile<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Compiles <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> with a strong signature using the private key contained in <bpt id="p2">*</bpt>keyFile<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/key:@<ept id="p1">**</ept> <bpt id="p2">*</bpt>keySource<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Compiles <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> with a strong signature using the private key produced at <bpt id="p2">*</bpt>keySource<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/listing<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Produces a listing file on the standard output.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If you omit this option, no listing file is produced.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This parameter is not supported in the .NET Framework 2.0 or later.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/mdv<ept id="p1">**</ept><ph id="ph1">=</ph><ph id="ph2">`versionString`</ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Sets the metadata version string.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/msv<ept id="p1">**</ept><ph id="ph1">=</ph><ph id="ph2">`major``.``minor`</ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sets the metadata stream version, where <ph id="ph1">`major`</ph> and <ph id="ph2">`minor`</ph> are integers.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/noautoinherit<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Disables default inheritance from <ph id="ph1">&lt;xref:System.Object&gt;</ph> when no base class is specified.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/nocorstub<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Suppresses generation of the CORExeMain stub.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/nologo<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Suppresses the Microsoft startup banner display.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/output:<ept id="p1">**</ept> <bpt id="p2">*</bpt>22<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Specifies the output file name and extension.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>By default, the output file name is the same as the name of the first source file.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The default extension is .exe.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you specify the <bpt id="p1">**</bpt>/dll<ept id="p1">**</ept> option, the default extension is .dll.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  Specifying <bpt id="p2">**</bpt>/output:<ept id="p2">**</ept>myfile.dll does not set the <bpt id="p3">**</bpt>/dll<ept id="p3">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you do not specify <bpt id="p1">**</bpt>/dll<ept id="p1">**</ept>, the result will be an executable file named myfile.dll.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/optimize<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Optimizes long instructions to short.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`br`</ph> to <ph id="ph2">`br.s`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/pe64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Creates a 64-bit image (PE32+).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If no target processor is specified, the default is <ph id="ph1">`/itanium`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/pdb<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Creates a PDB file without enabling debug information tracking.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/quiet<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Specifies quiet mode; does not report assembly progress.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/resource:<ept id="p1">**</ept> <bpt id="p2">*</bpt>file.res<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Includes the specified resource file in <ph id="ph1">\*</ph>.res format in the resulting .exe or .dll file.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Only one .res file can be specified with the <bpt id="p1">**</bpt>/resource<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/ssver<ept id="p1">**</ept><ph id="ph1">=</ph><ph id="ph2">`int`</ph>.<ph id="ph3">`int`</ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Sets the subsystem version number in the NT optional header.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>/appcontainer<ept id="p1">**</ept> and <bpt id="p2">**</bpt>/arm<ept id="p2">**</ept> the minimum version number is 6.02.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/stack<ept id="p1">**</ept><ph id="ph1">=</ph><ph id="ph2">`stackSize`</ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Sets the SizeOfStackReserve value in the NT Optional header to <ph id="ph1">`stackSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/stripreloc<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Specifies that no base relocations are needed.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/subsystem<ept id="p1">**</ept><ph id="ph1">=</ph><bpt id="p2">*</bpt>integer<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Sets subsystem to the value specified by <bpt id="p1">*</bpt>integer<ept id="p1">*</ept> in the NT Optional header.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If the .subsystem IL directive is specified in the file, this command overrides it.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>See winnt.h, IMAGE_SUBSYSTEM for a list of valid values for <bpt id="p1">*</bpt>integer<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/x64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Specifies a 64-bit AMD processor as the target processor.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If no image bitness is specified, the default is <bpt id="p1">**</bpt>/pe64<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>All options for Ilasm.exe are case-insensitive and recognized by the first three letters.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>/lis<ept id="p1">**</ept> is equivalent to <bpt id="p2">**</bpt>/listing<ept id="p2">**</ept> and <bpt id="p3">**</bpt>/res:<ept id="p3">**</ept>myresfile.res is equivalent to <bpt id="p4">**</bpt>/resource:<ept id="p4">**</ept>myresfile.res. Options that specify arguments accept either a colon (:) or an equal sign (=) as the separator between the option and the argument.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>/output:<ept id="p1">**</ept> <bpt id="p2">*</bpt>file.ext<ept id="p2">*</ept> is equivalent to <bpt id="p3">**</bpt>/output=<ept id="p3">**</ept> <bpt id="p4">*</bpt>file.ext<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The IL Assembler helps tool vendors design and implement IL generators.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Using Ilasm.exe, tool and compiler developers can concentrate on IL and metadata generation without being concerned with emitting IL in the PE file format.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Similar to other compilers that target the runtime, such as C# and Visual Basic, Ilasm.exe does not produce intermediate object files and does not require a linking stage to form a PE file.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The IL Assembler can express all the existing metadata and IL features of the programming languages that target the runtime.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This allows managed code written in any of these programming languages to be adequately expressed in IL Assembler and compiled with Ilasm.exe.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Compilation might fail if the last line of code in the .il source file does not have either trailing white space or an end-of-line character.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can use Ilasm.exe in conjunction with its companion tool, <bpt id="p1">[</bpt>Ildasm.exe<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Ildasm.exe takes a PE file that contains IL code and creates a text file suitable as input to Ilasm.exe.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>This is useful, for example, when compiling code in a programming language that does not support all the runtime metadata attributes.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>After compiling the code and running the output through Ildasm.exe, the resulting IL text file can be hand-edited to add the missing attributes.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can then run this text file through the Ilasm.exe to produce a final executable file.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can also use this technique to produce a single PE file from several PE files originally generated by different compilers.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Currently, you cannot use this technique with PE files that contain embedded native code (for example, PE files produced by Visual C++).</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>To make this combined use of Ildasm.exe and Ilasm.exe as accurate as possible, by default the assembler does not substitute short encodings for long ones you might have written in your IL sources (or that might be emitted by another compiler).</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>/optimize<ept id="p1">**</ept> option to substitute short encodings wherever possible.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Ildasm.exe only operates on files on disk.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It does not operate on files installed in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information about the grammar of IL, see the asmparse.grammar file in the <ph id="ph1">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Version Information</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, you can attach a custom attribute to an interface implementation by using code similar to the following:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, you can specify an arbitrary marshal BLOB (binary large object) by using its raw binary representation, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For more information about the grammar of IL, see the asmparse.grammar file in the <ph id="ph1">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The following command assembles the IL file <ph id="ph1">`myTestFile.il`</ph> and produces the executable <ph id="ph2">`myTestFile.exe.`</ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The following command assembles the IL file <ph id="ph1">`myTestFile.il`</ph> and produces the .dll file <ph id="ph2">`myTestFile.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The following command assembles the IL file <ph id="ph1">`myTestFile.il`</ph> and produces the .dll file <ph id="ph2">`myNewTestFile.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following code example shows an extremely simple application that displays "Hello World!"</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>to the console.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can compile this code and then use the <bpt id="p1">[</bpt>Ildasm.exe<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool to generate an IL file.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The following IL code example corresponds to the previous C# code example.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can compile this code into an assembly using the IL Assembler tool.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Both IL and C# code examples display "Hello World!"</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>to the console.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed Execution Process<ept id="p1">](../../../docs/standard/managed-execution-process.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>