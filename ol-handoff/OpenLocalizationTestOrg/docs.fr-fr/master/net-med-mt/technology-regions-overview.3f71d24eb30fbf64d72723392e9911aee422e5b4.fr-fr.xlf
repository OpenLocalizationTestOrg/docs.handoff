<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="technology-regions-overview.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bbd6237465db69f6c09dd65048e1bb946c625b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\technology-regions-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e397917700a5959fc81c65edbc82c2136b58518f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc138aeb84ed7e4d06f883f864fc6e6092efac40</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Technology Regions Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Technology Regions Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If multiple presentation technologies are used in an application, such as WPF, Win32, or DirectX, they must share the rendering areas within a common top-level window.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes issues that might influence the presentation and input for your WPF interoperation application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Regions</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Within a top-level window, you can conceptualize that each HWND that comprises one of the technologies of an interoperation application has its own region (also called "airspace").</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each pixel within the window belongs to exactly one HWND, which constitutes the region of that HWND.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>(Strictly speaking, there is more than one <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> region if there is more than one <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> HWND, but for purposes of this discussion, you can assume there is only one).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The region implies that all layers or other windows that attempt to render above that pixel during application lifetime must be part of the same render-level technology.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Attempting to render <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> pixels over <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> leads to undesirable results, and is disallowed as much as possible through the interoperation <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Region Examples</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following illustration shows an application that mixes <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph>, and <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each technology uses its own separate, non-overlapping set of pixels, and there are no region issues.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A window that does not have airspace issues<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/migrationinteroparchitectarticle01.png "</bpt>MigrationInteropArchitectArticle01<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Suppose that this application uses the mouse pointer position to create an animation that attempts to render over any of these three regions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>No matter which technology was responsible for the animation itself, that technology would violate the region of the other two.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following illustration shows an attempt to render a WPF circle over a Win32 region.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Interop diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/migrationinteroparchitectarticle02.png "</bpt>MigrationInteropArchitectArticle02<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Another violation is if you try to use transparency/alpha blending between different technologies.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the following illustration, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> box violates the <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> regions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because pixels in that <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> box are semi-transparent, they would have to be owned jointly by both <ph id="ph2">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, which is not possible.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>So this is another violation and cannot be built.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Interop diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/migrationinteroparchitectarticle03.png "</bpt>MigrationInteropArchitectArticle03<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The previous three examples used rectangular regions, but different shapes are possible.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, a region can have a hole.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following illustration shows a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> region with a rectangular hole this is the size of the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> regions combined.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Interop diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/migrationinteroparchitectarticle04.png "</bpt>MigrationInteropArchitectArticle04<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Regions can also be completely nonrectangular, or any shape describable by a <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> HRGN (region).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Interop diagram<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/migrationinteroparchitectarticle05.png "</bpt>MigrationInteropArchitectArticle05<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Transparency and Top-Level Windows</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The window manager in Windows only really processes <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> HWNDs.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Therefore, every <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> is an HWND.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> HWND must abide by the general rules for any HWND.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Within that HWND, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> code can do whatever the overall <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> support.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>But for interactions with other HWNDs on the desktop, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> must abide by <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> processing and rendering rules.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supports non-rectangular windows by using <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph>—HRGNs for non-rectangular windows, and layered windows for a per-pixel alpha.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Constant alpha and color keys are not supported.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> layered window capabilities vary by platform.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Layered windows can make the entire window translucent (semi-transparent) by specifying an alpha value to apply to every pixel in the window.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> in fact supports per-pixel alpha, but this is very difficult to use in practical programs because in this mode you would need to draw any child HWND yourself, including dialogs and dropdowns).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supports HRGNs; however, there are no managed <ph id="ph2">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> for this functionality.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can use platform invoke and <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> to call the relevant <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> <ph id="ph3">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Calling Native Functions from Managed Code<ept id="p1">](/cpp/dotnet/calling-native-functions-from-managed-code)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> layered windows have different capabilities on different operating systems.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is because <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses <ph id="ph2">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> to render, and layered windows were primarily designed for <ph id="ph3">[!INCLUDE[TLA2#tla_gdi](../../../../includes/tla2sharptla-gdi-md.md)]</ph> rendering, not <ph id="ph4">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> rendering.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> supports hardware accelerated layered windows on <ph id="ph2">[!INCLUDE[TLA#tla_longhorn](../../../../includes/tlasharptla-longhorn-md.md)]</ph> and later.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Hardware accelerated layered windows on <ph id="ph1">[!INCLUDE[TLA2#tla_winxp](../../../../includes/tla2sharptla-winxp-md.md)]</ph> require support from <ph id="ph2">[!INCLUDE[TLA#tla_dx](../../../../includes/tlasharptla-dx-md.md)]</ph>, so the capabilities will depend on the version of <ph id="ph3">[!INCLUDE[TLA#tla_dx](../../../../includes/tlasharptla-dx-md.md)]</ph> on that machine.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> does not support transparency color keys, because <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> cannot guarantee to render the exact color you requested, particularly when rendering is hardware-accelerated.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If your application is running on <ph id="ph1">[!INCLUDE[TLA2#tla_winxp](../../../../includes/tla2sharptla-winxp-md.md)]</ph>, layered windows on top of <ph id="ph2">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> surfaces flicker when the <ph id="ph3">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> application renders.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>(The actual rendering sequence is that <ph id="ph1">[!INCLUDE[TLA#tla_gdi](../../../../includes/tlasharptla-gdi-md.md)]</ph> hides the layered window, then <ph id="ph2">[!INCLUDE[TLA2#tla_dx](../../../../includes/tla2sharptla-dx-md.md)]</ph> draws, and then <ph id="ph3">[!INCLUDE[TLA#tla_gdi](../../../../includes/tlasharptla-gdi-md.md)]</ph> puts the layered window back).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Non-<ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> layered windows also have this limitation.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Hosting a WPF Clock in Win32<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-a-wpf-clock-in-win32.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hosting Win32 Content in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/hosting-win32-content-in-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>