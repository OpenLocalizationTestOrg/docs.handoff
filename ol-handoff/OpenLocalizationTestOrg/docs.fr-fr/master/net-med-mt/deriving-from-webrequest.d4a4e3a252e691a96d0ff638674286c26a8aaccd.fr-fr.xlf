<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa75498364f4457da8fdfef3fbf1aa5baf659640</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\deriving-from-webrequest.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd7427ff3d9223ad04a9e83e9ba65a09d500a8a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26cf016298cc7b3a9b385e243c1f7b50d6884882</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Deriving from WebRequest | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Deriving from WebRequest</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest&gt;</ph> class is an abstract base class that provides the basic methods and properties for creating a protocol-specific request handler that fits the .NET Framework pluggable protocol model.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Applications that use the <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> class can request data using any supported protocol without needing to specify the protocol used.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Two criteria must be met in order for a protocol-specific class to be used as a pluggable protocol: The class must implement the <ph id="ph1">&lt;xref:System.Net.IWebRequestCreate&gt;</ph> interface, and it must register with the <ph id="ph2">&lt;xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The class must override all the abstract methods and properties of <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> to provide the pluggable interface.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> instances are intended for one-time use; if you want to make another request, create a new <bpt id="p2">**</bpt>WebRequest<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> supports the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface to enable developers to serialize a template <bpt id="p2">**</bpt>WebRequest<ept id="p2">**</ept> and then reconstruct the template for additional requests.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>IWebRequest Create Method</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.IWebRequestCreate.Create%2A&gt;</ph> method is responsible for initializing a new instance of the protocol-specific class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a new <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> is created, the <ph id="ph1">&lt;xref:System.Net.WebRequest.Create%2A?displayProperty=fullName&gt;</ph> method matches the requested URI with the URI prefixes registered with the <bpt id="p2">**</bpt>RegisterPrefix<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> method of the proper protocol-specific descendant must return an initialized instance of the descendant capable of performing a standard request/response transaction for the protocol without needing any protocol-specific fields modified.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>ConnectionGroupName Property</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.ConnectionGroupName%2A&gt;</ph> property is used to name a group of connections to a resource so that multiple requests can be made over a single connection.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To implement connection-sharing, you must use a protocol-specific method of pooling and assigning connections.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, the provided <ph id="ph1">&lt;xref:System.Net.ServicePointManager&gt;</ph> class implements connection sharing for the <ph id="ph2">&lt;xref:System.Net.HttpWebRequest&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ServicePointManager<ept id="p1">**</ept> class creates a <ph id="ph1">&lt;xref:System.Net.ServicePoint&gt;</ph> that provides a connection to a specific server for each connection group.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>ContentLength Property</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.ContentLength%2A&gt;</ph> property specifies the number of bytes of data that will be sent to the server when uploading data.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Typically the <ph id="ph1">&lt;xref:System.Net.WebRequest.Method%2A&gt;</ph> property must be set to indicate that an upload is taking place when the <bpt id="p1">**</bpt>ContentLength<ept id="p1">**</ept> property is set to a value greater than zero.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ContentType Property</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.ContentType%2A&gt;</ph> property provides any special information that your protocol requires you to send to the server to identify the type of content that you are sending.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Typically this is the MIME content type of any data uploaded.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Credentials Property</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.Credentials%2A&gt;</ph> property contains information needed to authenticate the request with the server.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You must implement the details of the authentication process for your protocol.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.AuthenticationManager&gt;</ph> class is responsible for authenticating requests and providing an authentication token.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The class that provides the credentials used by your protocol must implement the <ph id="ph1">&lt;xref:System.Net.ICredentials&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Headers Property</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.Headers%2A&gt;</ph> property contains an arbitrary collection of name/value pairs of metadata associated with the request.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Any metadata needed by the protocol that can be expressed as a name/value pair can be included in the <bpt id="p1">**</bpt>Headers<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Typically this information must be set before calling the <ph id="ph1">&lt;xref:System.Net.WebRequest.GetRequestStream%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.WebRequest.GetResponse%2A&gt;</ph> methods; once the request has been made, the metadata is considered read-only.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You are not required to use the <bpt id="p1">**</bpt>Headers<ept id="p1">**</ept> property to use header metadata.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Protocol-specific metadata can be exposed as properties; for example, the <ph id="ph1">&lt;xref:System.Net.HttpWebRequest.UserAgent%2A?displayProperty=fullName&gt;</ph> property exposes the <bpt id="p1">**</bpt>User-Agent<ept id="p1">**</ept> HTTP header.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you expose header metadata as a property, you should not allow the same property to be set using the <bpt id="p1">**</bpt>Headers<ept id="p1">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Method Property</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.Method%2A&gt;</ph> property contains the verb or action that the request is asking the server to perform.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default for the <bpt id="p1">**</bpt>Method<ept id="p1">**</ept> property must enable a standard request/response action without requiring any protocol-specific properties to be set.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Net.HttpWebResponse.Method%2A&gt;</ph> method defaults to GET, which requests a resource from a Web server and returns the response.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Typically the <bpt id="p1">**</bpt>ContentLength<ept id="p1">**</ept> property must be set to a value greater than zero when the <bpt id="p2">**</bpt>Method<ept id="p2">**</ept> property is set to a verb or action that indicates that an upload is taking place.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>PreAuthenticate Property</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Applications set the <ph id="ph1">&lt;xref:System.Net.WebRequest.PreAuthenticate%2A&gt;</ph> property to indicate that authentication information should be sent with the initial request rather than waiting for an authentication challenge.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PreAuthenticate<ept id="p1">**</ept> property is only meaningful if the protocol supports authentication credentials sent with the initial request.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Proxy Property</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.Proxy%2A&gt;</ph> property contains an <ph id="ph2">&lt;xref:System.Net.IWebProxy&gt;</ph> interface that is used to access the requested resource.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Proxy<ept id="p1">**</ept> property is meaningful only if your protocol supports proxied requests.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You must set the default proxy if one is required by your protocol.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In some environments, such as behind a corporate firewall, your protocol might be required to use a proxy.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In that case, you must implement the <bpt id="p1">**</bpt>IWebProxy<ept id="p1">**</ept> interface to create a proxy class that will work for your protocol.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>RequestUri Property</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.RequestUri%2A&gt;</ph> property contains the URI that was passed to the <bpt id="p1">**</bpt>WebRequest.Create<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is read-only and cannot be changed once the <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> has been created.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If your protocol supports redirection, the response can come from a resource identified by a different URI.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you need to provide access to the URI that responded, you must provide an additional property containing that URI.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Timeout Property</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.Timeout%2A&gt;</ph> property contains the length of time, in milliseconds, to wait before the request times out and throws an exception.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Timeout<ept id="p1">**</ept> applies only to synchronous requests made with the <ph id="ph1">&lt;xref:System.Net.WebRequest.GetResponse%2A&gt;</ph> method; asynchronous requests must use the <ph id="ph2">&lt;xref:System.Net.WebRequest.Abort%2A&gt;</ph> method to cancel a pending request.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Setting the <bpt id="p1">**</bpt>Timeout<ept id="p1">**</ept> property is meaningful only if the protocol-specific class implements a time-out process.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Abort Method</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.Abort%2A&gt;</ph> method cancels a pending asynchronous request to a server.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>After the request has been canceled, calling <bpt id="p1">**</bpt>GetResponse<ept id="p1">**</ept>, <bpt id="p2">**</bpt>BeginGetResponse<ept id="p2">**</ept>, <bpt id="p3">**</bpt>EndGetResponse<ept id="p3">**</ept>, <bpt id="p4">**</bpt>GetRequestStream<ept id="p4">**</ept>, <bpt id="p5">**</bpt>BeginGetRequestStream<ept id="p5">**</ept>, or <bpt id="p6">**</bpt>EndGetRequestStream<ept id="p6">**</ept> will throw a <ph id="ph1">&lt;xref:System.Net.WebException&gt;</ph> with the <ph id="ph2">&lt;xref:System.Net.WebException.Status%2A&gt;</ph> property set to <ph id="ph3">&lt;xref:System.Net.WebExceptionStatus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>BeginGetRequestStream and EndGetRequestStream Methods</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.BeginGetRequestStream%2A&gt;</ph> method starts an asynchronous request for the stream that is used to upload data to the server.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.EndGetRequestStream%2A&gt;</ph> method completes the asynchronous request and returns the requested stream.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>These methods implement the <bpt id="p1">**</bpt>GetRequestStream<ept id="p1">**</ept> method using the standard .NET Framework asynchronous pattern.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>BeginGetResponse and EndGetResponse Methods</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.BeginGetResponse%2A&gt;</ph> method starts an asynchronous request to a server.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.EndGetResponse%2A&gt;</ph> method completes the asynchronous request and returns the requested response.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>These methods implement the <bpt id="p1">**</bpt>GetResponse<ept id="p1">**</ept> method using the standard .NET Framework asynchronous pattern.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>GetRequestStream Method</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.GetRequestStream%2A&gt;</ph> method returns a stream that is used to write data to the requested server.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The stream returned should be a write-only stream that does not seek; it is intended as a one-way stream of data that is written to the server.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The stream returns false for the <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties and true for the <ph id="ph3">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetRequestStream<ept id="p1">**</ept> method typically opens a connection to the server and, before returning the stream, sends header information that indicates that data is being sent to the server.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Because <bpt id="p1">**</bpt>GetRequestStream<ept id="p1">**</ept> begins the request, setting any <bpt id="p2">**</bpt>Header<ept id="p2">**</ept> properties or the <bpt id="p3">**</bpt>ContentLength<ept id="p3">**</ept> property is typically not allowed after calling <bpt id="p4">**</bpt>GetRequestStream<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>GetResponse Method</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.GetResponse%2A&gt;</ph> method returns a protocol-specific descendant of the <ph id="ph2">&lt;xref:System.Net.WebResponse&gt;</ph> class that represents the response from the server.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Unless the request has already been initiated by the <bpt id="p1">**</bpt>GetRequestStream<ept id="p1">**</ept> method, the <bpt id="p2">**</bpt>GetResponse<ept id="p2">**</ept> method creates a connection to the resource identified by <bpt id="p3">**</bpt>RequestUri<ept id="p3">**</ept>, sends header information indicating the type of request being made, and then receives the response from the resource.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Once the <bpt id="p1">**</bpt>GetResponse<ept id="p1">**</ept> method is called, all properties should be considered read-only.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> instances are intended for one-time use; if you want to make another request, you should create a new <bpt id="p2">**</bpt>WebRequest<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GetResponse<ept id="p1">**</ept> method is responsible for creating an appropriate <bpt id="p2">**</bpt>WebResponse<ept id="p2">**</ept> descendant to contain the incoming response.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Programming Pluggable Protocols<ept id="p1">](../../../docs/framework/network-programming/programming-pluggable-protocols.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Deriving from WebResponse<ept id="p1">](../../../docs/framework/network-programming/deriving-from-webresponse.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>