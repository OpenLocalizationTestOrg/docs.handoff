<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b4a1f3e7a4aee58339e661fd08854aea9a8e8ca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\wcf\writing-a-windows-store-app-that-consumes-an-odata-service.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c104f379b755d6b2a25114d7f58d775a0297f3ce</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96bcaf3f97ea802ef31fb53954be9e570e90e0ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing a Windows Store App that consumes an OData Service | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing a Windows Store App that consumes an OData Service</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows 8 introduces a new type of application: the Windows Store app.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Windows Store apps have a brand new look and feel, run on a variety of devices, and are made available on the Windows Store.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes how to write a Windows Store app that consumes an OData service, specifically the NetFlix Catalog OData service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about Windows Store Apps, please read <bpt id="p1">[</bpt>Getting Started with Windows Store apps<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/br211386.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft Windows 8<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=266654)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft Visual Studio 2012<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=266655)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Data Services<ept id="p1">](http://msdn.microsoft.com/data/bb931106)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating the default Windows Store Grid Application</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a new Windows Store Grid Application using C# and XAML.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name the application OData.WindowsStore.NetflixDemo:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>New Project Dialog<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/win8clientcreatenewproject.png "</bpt>Win8ClientCreateNewProject<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open the Package.appxmanifest and enter a friendly name in the Display name text box.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This specifies the application name used with the Windows 8 search functionality.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Application manifest file<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/appxmanifest.png "</bpt>appxmanifest<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Enter a friendly name in the <ph id="ph1">\&lt;</ph>AppName&gt; element in the App.xaml file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This sets the application name that is displayed when the application is launched:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>App.xaml file<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/appxaml.png "</bpt>appxaml<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Build and launch the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You first see the application’s splash screen.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The screenshot below displays the default splash screen.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The image used is stored in the project’s Assets folder.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The default app splash screen<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/defualtappsplash.png "</bpt>defualtAppSplash<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Then the application will be displayed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The default application<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/defaultapplication.png "</bpt>DefaultApplication<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The default application defines a set of classes in SampleDataSource.cs: SampleDataGroup and SampleDataItem, both of which are derived from SampleDataCommon, which itself is derived from BindableBase.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>SampleDataGroup and SampleDataItem are bound to the default GridView.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>SampleDataSource.cs is located in the DataModel folder within the NetflixDemo project.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The application displays a grouped collection.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each group contains any number of items, represented by SampleDataGroup and SampleDataItem, respectively.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the previous screen shot you can see a group called Group Title 1 and all of the items in the group displayed together.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The main page of the application is GroupedItemsPage.xaml.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It contains a GridView that displays the sample data created by the SampleDataSource.cs class.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The GroupedItemsPage is loaded by the App.xaml.cs in a call to rootFrame.Navigate:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This causes the GroupedItemsPage to be instantiated and it’s LoadState method is called.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>LoadState causes the static SampleDataSource instance to be created, which creates a collection of SampleDataGroup objects.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Each SampleDataGroup object contains a collection of SampleDataItem objects.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>LoadState stores the collection of SampleDataGroup objects in the DefaultViewModel:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The DefaultViewModel is then bound to the GridView.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is referenced in the GroupedItemsPage.xaml file when configuring the data binding.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The CollectionViewSource is used as a proxy for handling grouped collections.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When binding occurs, it iterates through the collection of SampleDataGroup objects to populate the GridView.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The ItemsPath attribute tells the CollectionViewSource what property on each SampleDataGroup object to use to find the SampleDataItems it contains.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this case each SampleDataGroup object contains a TopItems collection of SampleDataItem objects.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For the Netflix application, movies are grouped by genre.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>So the application displays a number of genres and a list of movies within that genre.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Add a Service Reference to the Netflix OData Service</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Before we can make any calls to the Netflix OData service we need to add a service reference.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Right-click the project in the Solution Explorer and select Add Service Reference…</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add Service Reference Dialog<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/addservicereferenceodata.png "</bpt>AddServiceReferenceOData<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enter the URL for the Netflix OData service in the Address bar and click Go.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Set the Namespace of the service reference to Netflix and click OK.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add Service Reference Error<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/addservicereferenceerror.png "</bpt>AddServiceReferenceError<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you have not yet installed <bpt id="p1">[</bpt>WCF Data Services Tools for Windows Store Apps<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=266652)</ept>, you will be prompted with a message such as the one above.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You will need to download and install the tools referenced in the link to continue.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Adding a service reference generates strongly typed classes that WCF Data Services will use to parse the OData returned by the Netflix OData service.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The classes defined in SampleDataSource.cs can be bound to the GridView so we need to transfer the data from the generated OData client classes into the bindable classes defined in SampleDataSource.cs.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In order to do this, we need to make some changes to the data model defined in SampleDataSource.cs.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Update the data model for the application</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Replace the existing code in SampleDataSource.cs with the code from <bpt id="p1">[</bpt>this gist<ept id="p1">](https://gist.github.com/3419288)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The updated code adds a LoadMovies method (to the SampleDataSource class)  that performs a query against the Netflix OData service and populates a list of genres (allGroups) and within each genre a list of movies.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The SampleDataGroup class is used to represent a genre and the SampleDataItem class is used to represent a movie.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Task-based Asynchronous Pattern<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=266651)</ept> (TAP) is used to asynchronously get 300 (Take) recent (OrderByDescending) PG-rated (Where) movies back from Netflix.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The rest of the code constructs SimpleDataItems and SimpleDataGroups from the entities that were returned in the OData feed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The SampleDataSource class also implements a simple search method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this case, it does a simple in-memory search of the loaded movies.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Also in SampleDataSource.cs a class called ExtensionMethods is defined.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each of these extension methods uses the TAP pattern to allow the SampleDataSource to execute an OData query without blocking the UI.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, the following code uses the Task.Factory.FromAsync method to implement TAP.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>As in the default application, the main page of the application is GroupedItemsPage.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This time, however, it displays the movies retrieved from Netflix grouped by genre.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When the GroupedItemsPage is instantiated, its LoadState method is called.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>LoadState causes the static SampleDataSource instance to be created, making a call to the Netflix OData service as discussed previously.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>LoadState stores the collection of genres (SampleDataGroup objects) in the DefaultViewModel:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>As described previously, the DefaultViewModel is then used to bind the data to the GridView.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Add a search contract to allow the application to participate in Windows search</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Add a search contract to the application.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This allows the application to integrate with the Windows 8 search experience.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Name the search contract SearchResultsPage.xaml</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add a search contract<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/data/wcf/media/addsearchcontract.png "</bpt>AddSearchContract<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Modify line 58 of SearchResultsPage.xaml.cs by removing the embedded quotes around queryText.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Insert the following two lines of code at line 81 in SearchResultsPage.xaml.cs to retrieve the search results.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When a user invokes Windows search, types in a search term and then touches the Netflix Demo app icon in the search bar, the LoadState method of the SearchResultsPage is executed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The navigation parameter sent to LoadState contains the query text.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Next the Filter_SelectionChanged method is called which then calls the Search method on the SampleDataSource class.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The results are returned and displayed in the SearchResultsPage.xaml page.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For more information on integrating search into an application see, <bpt id="p1">[</bpt>Search: integrating into the Windows 8 search experience<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=266650)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Run the application</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Launch the application by pressing F5.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Note that it will take a few seconds to load the images upon application launch.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Also, your first search attempt may not return any results.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In a real-world application, you would want to deal with both of these issues.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The application calls the Netflix OData service, receives the data in the generated OData client classes and then transfers that data to bindable data classes (SampleDataSource, SampleDataGroup, and SampleDataItem).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It uses these bindable classes to bind the data to the GridView.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with how XAML databinding works see <bpt id="p1">[</bpt>How to group items in a list or grid (Windows Store apps using C#/VB/C++ and XAML)<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/xaml/hh780627)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>