<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-receive-first-chance-exception-notifications.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5d3cd1e19d8a8156c4ee7968cb06770dcae58d0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\app-domains\how-to-receive-first-chance-exception-notifications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7fccbc3e47e408b575a6ecd3a77c5a4eb1693ea5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">313305262bb20b96994cfd13dc515cdfe80c2be7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Receive First-Chance Exception Notifications | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Receive First-Chance Exception Notifications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event of the <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> class lets you receive a notification that an exception has been thrown, before the common language runtime has begun searching for exception handlers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The event is raised at the application domain level.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A thread of execution can pass through multiple application domains, so an exception that is unhandled in one application domain could be handled in another application domain.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The notification occurs in each application domain that has added a handler for the event, until an application domain handles the exception.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The procedures and examples in this article show how to receive first-chance exception notifications in a simple program that has one application domain, and in an application domain that you create.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For a more complex example that spans several application domains, see the example for the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Receiving First-Chance Exception Notifications in the Default Application Domain</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following procedure, the entry point for the application, the <ph id="ph1">`Main()`</ph> method, runs in the default application domain.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To demonstrate first-chance exception notifications in the default application domain</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Define an event handler for the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event, using a lambda function, and attach it to the event.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this example, the event handler prints the name of the application domain where the event was handled and the exception's <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Throw an exception and catch it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Before the runtime locates the exception handler, the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event is raised and displays a message.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This message is followed by the message that is displayed by the exception handler.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Throw an exception, but do not catch it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Before the runtime looks for an exception handler, the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event is raised and displays a message.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There is no exception handler, so the application terminates.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The code that is shown in the first three steps of this procedure forms a complete console application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The output from the application varies, depending on the name of the .exe file, because the name of the default application domain consists of the name and extension of the .exe file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See the following for sample output.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Receiving First-Chance Exception Notifications in Another Application Domain</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If your program contains more than one application domain, you can choose which application domains receive notifications.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To receive first-chance exception notifications in an application domain that you create</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Define an event handler for the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This example uses a <ph id="ph1">`static`</ph> method (<ph id="ph2">`Shared`</ph> method in Visual Basic) that prints the name of the application domain where the event was handled and the exception's <ph id="ph3">&lt;xref:System.Exception.Message%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Create an application domain and add the event handler to the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event for that application domain.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this example, the application domain is named <ph id="ph1">`AD1`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can handle this event in the default application domain in the same way.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.AppDomain.CurrentDomain%2A?displayProperty=fullName&gt;</ph> property in <ph id="ph4">`Main()`</ph> to get a reference to the default application domain.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To demonstrate first-chance exception notifications in the application domain</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">`Worker`</ph> object in the application domain that you created in the previous procedure.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Worker`</ph> class must be public, and must derive from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, as shown in the complete example at the end of this article.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Call a method of the <ph id="ph1">`Worker`</ph> object that throws an exception.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`Thrower`</ph> method is called twice.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The first time, the method argument is <ph id="ph1">`true`</ph>, which causes the method to catch its own exception.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The second time, the argument is <ph id="ph1">`false`</ph>, and the <ph id="ph2">`Main()`</ph> method catches the exception in the default application domain.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Place code in the <ph id="ph1">`Thrower`</ph> method to control whether the method handles its own exception.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example creates an application domain named <ph id="ph1">`AD1`</ph> and adds an event handler to the application domain's <ph id="ph2">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The example creates an instance of the <ph id="ph1">`Worker`</ph> class in the application domain, and calls a method named <ph id="ph2">`Thrower`</ph> that throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Depending on the value of its argument, the method either catches the exception or fails to handle it.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each time the <ph id="ph1">`Thrower`</ph> method throws an exception in <ph id="ph2">`AD1`</ph>, the <ph id="ph3">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event is raised in <ph id="ph4">`AD1`</ph>, and the event handler displays a message.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The runtime then looks for an exception handler.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the first case, the exception handler is found in <ph id="ph1">`AD1`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the second case, the exception is unhandled in <ph id="ph1">`AD1`</ph>, and instead is caught in the default application domain.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The name of the default application domain is the same as the name of the executable.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you add a handler for the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException&gt;</ph> event to the default application domain, the event is raised and handled before the default application domain handles the exception.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To see this, add the C# code <ph id="ph1">`AppDomain.CurrentDomain.FirstChanceException += FirstChanceException;`</ph> (in Visual Basic, <ph id="ph2">`AddHandler AppDomain.CurrentDomain.FirstChanceException, FirstChanceExceptio`</ph>n) at the beginning of <ph id="ph3">`Main()`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This example is a command-line application.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To compile and run this code in <ph id="ph1">[!INCLUDE[vs_dev10_long](../../../includes/vs-dev10-long-md.md)]</ph>, add the C# code <ph id="ph2">`Console.ReadLine();`</ph> (in Visual Basic, <ph id="ph3">`Console.ReadLine()`</ph>) at the end of <ph id="ph4">`Main()`</ph>, to prevent the command window from closing before you can read the output.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>