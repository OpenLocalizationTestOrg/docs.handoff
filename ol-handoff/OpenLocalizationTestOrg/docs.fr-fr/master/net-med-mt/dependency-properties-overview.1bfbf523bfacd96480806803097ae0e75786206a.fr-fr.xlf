<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dependency-properties-overview.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">24daee1bbfb2b77f5671a91c24d01f48dfd3e987</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\dependency-properties-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa504d792df563bd8e333d2b0576fea6ed4651b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3478f2feb80fe13e12e2cf86b1d844d46301574d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Dependency Properties Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dependency Properties Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a set of services that can be used to extend the functionality of a <ph id="ph2">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Collectively, these services are typically referred to as the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A property that is backed by the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system is known as a dependency property.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This overview describes the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system and the capabilities of a dependency property.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This includes how to use existing dependency properties in XAML and in code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This overview also introduces specialized aspects of dependency properties, such as dependency property metadata, and how to create your own dependency property in a custom class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic assumes that you have some basic knowledge of the <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> and object-oriented programming.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to follow the examples in this topic, you should also understand <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> and know how to write <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Walkthrough: My First WPF Desktop Application<ept id="p1">](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Dependency Properties and CLR Properties</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, properties are typically exposed as <ph id="ph2">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> properties.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At a basic level, you could interact with these properties directly and never know that they are implemented as a dependency property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, you should become familiar with some or all of the features of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system, so that you can take advantage of these features.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The purpose of dependency properties is to provide a way to compute the value of a property based on the value of other inputs.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These other inputs might include system properties such as themes and user preference, just-in-time property determination mechanisms such as data binding and animations/storyboards, multiple-use templates such as resources and styles, or values known through parent-child relationships with other elements in the element tree.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In addition, a dependency property can be implemented to provide self-contained validation, default values, callbacks that monitor changes to other properties, and a system that can coerce property values based on potentially runtime information.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Derived classes can also change some specific characteristics of an existing property by overriding dependency property metadata, rather than overriding the actual implementation of existing properties or creating new properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the SDK reference, you can identify which property is a dependency property by the presence of the Dependency Property Information section on the managed reference page for that property.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The Dependency Property Information section includes a link to the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> identifier field for that dependency property, and also includes a list of the metadata options that are set for that property, per-class override information, and other details.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Dependency Properties Back CLR Properties</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Dependency properties and the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system extend property functionality by providing a type that backs a property, as an alternative implementation to the standard pattern of backing the property with a private field.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The name of this type is <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The other important type that defines the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system is <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> defines the base class that can register and own a dependency property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Following is a summation of the terminology that is used in this <ph id="ph1">[!INCLUDE[TLA#tla_sdk](../../../../includes/tlasharptla-sdk-md.md)]</ph> documentation when discussing dependency properties:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dependency property:<ept id="p1">**</ept> A property that is backed by a <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dependency property identifier:<ept id="p1">**</ept> A <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> instance, which is obtained as a return value when registering a dependency property, and then stored as a static member of a class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This identifier is used as a parameter for many of the <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> that interact with the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CLR "wrapper":<ept id="p1">**</ept> The actual get and set implementations for the property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These implementations incorporate the dependency property identifier by using it in the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> calls, thus providing the backing for the property using the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example defines the <ph id="ph1">`IsSpinning`</ph> dependency property, and shows the relationship of the <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> identifier to the property that it backs.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The naming convention of the property and its backing <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> field is important.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The name of the field is always the name of the property, with the suffix <ph id="ph1">`Property`</ph> appended.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about this convention and the reasons for it, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](../../../../docs/framework/wpf/advanced/custom-dependency-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Setting Property Values</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can set properties either in code or in XAML.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Setting Property Values in XAML</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following XAML example specifies the background color of a button as red.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This example illustrates a case where the simple string value for a XAML attribute is type-converted by the WPF XAML parser into a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> type (a <ph id="ph2">&lt;xref:System.Windows.Media.Color&gt;</ph>, by way of a <ph id="ph3">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>) in the generated code.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>XAML supports a variety of syntax forms for setting properties.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Which syntax to use for a particular property will depend on the value type that a property uses, as well as other factors such as the presence of a type converter.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information on XAML syntax for property setting, see <bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept> and <bpt id="p2">[</bpt>XAML Syntax In Detail<ept id="p2">](../../../../docs/framework/wpf/advanced/xaml-syntax-in-detail.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As an example of non-attribute syntax, the following XAML example shows another button background.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This time rather than setting a simple solid color, the background is set to an image, with an element representing that image and the source of that image specified as an attribute of the nested element.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This is an example of property element syntax.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Setting Properties in Code</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Setting dependency property values in code is typically just a call to the set implementation exposed by the <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> "wrapper".</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Getting a property value is also essentially a call to the get "wrapper" implementation:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also call the property system <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> directly.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is not typically necessary if you are using existing properties (the wrappers are more convenient, and provide better exposure of the property for developer tools), but calling the <ph id="ph1">[!INCLUDE[TLA2#tla_api#plural](../../../../includes/tla2sharptla-apisharpplural-md.md)]</ph> directly is appropriate for certain scenarios.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Properties can be also set in XAML and then accessed later in code, through code-behind.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Code-Behind and XAML in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/code-behind-and-xaml-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Property Functionality Provided by a Dependency Property</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A dependency property provides functionality that extends the functionality of a property as opposed to a property that is backed by a field.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Often, each such functionality represents or supports a specific feature of the overall <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> set of features:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources<ept id="p1">](#setting_properties_resources)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data binding<ept id="p1">](#setting_properties_data_binding)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styles<ept id="p1">](#setting_properties_styles)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animations<ept id="p1">](#animations)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Metadata overrides<ept id="p1">](#metadata)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Property value inheritance<ept id="p1">](#setting_properties_inheritance)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Designer integration<ept id="p1">](#vs2008_integration)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Resources</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A dependency property value can be set by referencing a resource.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Resources are typically specified as the <ph id="ph1">`Resources`</ph> property value of a page root element, or of the application (these locations enable the most convenient access to the resource).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following example shows how to define a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> resource.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Once the resource is defined, you can reference the resource and use it to provide a property value:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This particular resource is referenced as a <bpt id="p1">[</bpt>DynamicResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept> (in WPF XAML, you can use either a static or dynamic resource reference).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To use a dynamic resource reference, you must be setting to a dependency property, so it is specifically the dynamic resource reference usage that is enabled by the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Resources are treated as a local value, which means that if you set another local value, you will eliminate the resource reference.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Data Binding</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A dependency property can reference a value through data binding.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Data binding works through a specific markup extension syntax in XAML, or the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object in code.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>With data binding, the final property value determination is deferred until run time, at which time the value is obtained from a data source.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following example sets the <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl.Content%2A&gt;</ph> property for a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, using a binding declared in XAML.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The binding uses an inherited data context and an <ph id="ph1">&lt;xref:System.Windows.Data.XmlDataProvider&gt;</ph> data source (not shown).</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The binding itself specifies the desired source property by <ph id="ph1">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> within the data source.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Bindings are treated as a local value, which means that if you set another local value, you will eliminate the binding.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Dependency properties, or the <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class, do not natively support <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> for purposes of producing notifications of changes in <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph> source property value for data binding operations.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information on how to create properties for use in data binding that can report changes to a data binding target, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Styles</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Styles and templates are two of the chief motivating scenarios for using dependency properties.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Styles are particularly useful for setting properties that define application <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Styles are typically defined as resources in XAML.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Styles interact with the property system because they typically contain "setters" for particular properties, as well as "triggers" that change a property value based on the real-time value for another property.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following example creates a very simple style (which would be defined inside a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Resources%2A&gt;</ph> dictionary, not shown), then applies that style directly to the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property for a <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The setter within the style sets the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property for a styled <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> to green.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Animations</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Dependency properties can be animated.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When an animation is applied and is running, the animated value operates at a higher precedence than any value (such as a local value) that the property otherwise has.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The following example animates the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> property (technically, the <ph id="ph3">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> is animated by using property element syntax to specify a blank <ph id="ph4">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> as the <ph id="ph5">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>, then the <ph id="ph6">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> property of that <ph id="ph7">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> is the property that is directly animated).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information on animating properties, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept> and <bpt id="p2">[</bpt>Storyboards Overview<ept id="p2">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Metadata Overrides</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can change certain behaviors of a dependency property by overriding the metadata for that property when you derive from the class that originally registers the dependency property.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Overriding metadata relies on the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> identifier.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Overriding metadata does not require re-implementing the property.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The metadata change is handled natively by the property system; each class potentially holds individual metadata for all properties that are inherited from base classes, on a per-type basis.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The following example overrides metadata for a dependency property <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Overriding this particular dependency property metadata is part of an implementation pattern that creates controls that can use default styles from themes.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information about overriding or obtaining property metadata, see <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Property Value Inheritance</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An element can inherit the value of a dependency property from its parent in the object tree.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Property value inheritance behavior is not globally enabled for all dependency properties, because the calculation time for inheritance does have some performance impact.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Property value inheritance is typically only enabled for properties where a particular scenario suggests that property value inheritance is appropriate.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You can determine whether a dependency property inherits by looking at the <bpt id="p1">**</bpt>Dependency Property Information<ept id="p1">**</ept> section for that dependency property in the SDK reference.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following example shows a binding, and sets the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> property that specifies the source of the binding, which was not shown in the earlier binding example.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Any subsequent bindings in child objects do not need to specify the source, they can use the inherited value from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> in the parent <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>(Alternatively, a child object could instead choose to directly specify its own <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> or a <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.Data.Binding&gt;</ph>, and to deliberately not use the inherited value for data context of its bindings.)</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](../../../../docs/framework/wpf/advanced/property-value-inheritance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>WPF Designer Integration</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A custom control with properties that are implemented as dependency properties will receive appropriate <ph id="ph1">[!INCLUDE[wpfdesigner_current_long](../../../../includes/wpfdesigner-current-long-md.md)]</ph> support.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One example is the ability to edit direct and attached dependency properties with the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Dependency Property Value Precedence</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>When you get the value of a dependency property, you are potentially obtaining a value that was set on that property through any one of the other property-based inputs that participate in the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Dependency property value precedence exists so that a variety of scenarios for how properties obtain their values can interact in a predictable way.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Consider the following example.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The example includes a style that applies to all buttons and their <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> properties, but then also specifies one button with a locally set <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The SDK documentation uses the terms "local value" or "locally set value" occasionally when discussing dependency properties.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A locally set value is a property value that is set directly on an object instance in code, or as an attribute on an element in XAML.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In principle, for the first button, the property is set twice, but only one value applies: the value with the highest precedence.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A locally set value has the highest precedence (except for a running animation, but no animation applies in this example) and thus the locally set value is used instead of the style setter value for the background on the first button.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The second button has no local value (and no other value with higher precedence than a style setter) and thus the background in that button comes from the style setter.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Why Does Dependency Property Precedence Exist?</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Typically, you would not want styles to always apply and to obscure even a locally set value of an individual element (otherwise, it would be very difficult to use either styles or elements in general).</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Therefore, the values that come from styles operate at a lower precedent than a locally set value.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For a more thorough listing of dependency properties and where a dependency property effective value might come from, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>There are a number of properties defined on <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> elements that are not dependency properties.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>By and large, properties were implemented as dependency properties only when there were needs to support at least one of the scenarios enabled by the property system: data binding, styling, animation, default value support, inheritance, attached properties, or invalidation.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Learning More About Dependency Properties</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>An attached property is a type of property that supports a specialized syntax in XAML.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>An attached property often does not have a 1:1 correspondence with a <ph id="ph1">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> property, and is not necessarily a dependency property.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The typical purpose of a attached property is to allow child elements to report property values to a parent element, even if the parent element and child element do not both possess that property as part of the class members listings.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>One primary scenario is to enable child elements to inform the parent how they should be presented in <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>; for an example, see <ph id="ph2">&lt;xref:System.Windows.Controls.DockPanel.Dock%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Controls.Canvas.Left%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Component developers or application developers may wish to create their own dependency property, in order to enable capabilities such as data binding or styles support, or for invalidation and value coercion support.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](../../../../docs/framework/wpf/advanced/custom-dependency-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Dependency properties should generally be considered to be public properties, accessible or at least discoverable by any caller that has access to an instance.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Security<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](../../../../docs/framework/wpf/advanced/custom-dependency-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Read-Only Dependency Properties<ept id="p1">](../../../../docs/framework/wpf/advanced/read-only-dependency-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Architecture<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-architecture.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>