<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6ff4c2103b863d97f96a0312a353b563f7ab843</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\accessing-services-using-a-client.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3eeac1cdeafcfc8e8925994d5b963183496fe8ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdaa83b5c9f4441ac9190c03d0631ae34cdfb413</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessing Services Using a Client | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing Services Using a Client</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Client applications must create, configure, and use <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client or channel objects to communicate with services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept> topic provides an overview of the objects and steps involved in creating basic client and channel objects and using them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic provides in-depth information about some of the issues with client applications and client and channel objects that may be useful depending upon your scenario.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic describes behavior and issues relating to:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Channel and session lifetimes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Handling exceptions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Understanding blocking issues.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Initializing channels interactively.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Channel and Session Lifetimes</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> applications includes two categories of channels, datagram and sessionful.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>datagram<ept id="p1">*</ept> channel is a channel in which all messages are uncorrelated.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>With a datagram channel, if an input or output operation fails, the next operation is typically unaffected, and the same channel can be reused.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because of this, datagram channels typically do not fault.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Sessionful<ept id="p1">*</ept> channels, however, are channels with a connection to the other endpoint.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Messages in a session on one side are always correlated with the same session on the other side.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In addition, both participants in a session must agree that the requirements of their conversation were met for that session to be considered successful.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If they cannot agree, the sessionful channel may fault.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Open clients explicitly or implicitly by calling the first operation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Trying to explicitly detect faulted sessionful channels is not typically useful, because when you are notified depends upon the session implementation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, because the <ph id="ph1">&lt;xref:System.ServiceModel.NetTcpBinding?displayProperty=fullName&gt;</ph> (with the reliable session disabled) surfaces the session of the TCP connection, if you listen to the <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Faulted?displayProperty=fullName&gt;</ph> event on the service or the client you are likely to be notified quickly in the event of a network failure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>But reliable sessions (established by bindings in which the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=fullName&gt;</ph> is enabled) are designed to insulate services from small network failures.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the session can be reestablished within a reasonable period of time, the same binding—configured for reliable sessions—might not fault until the interruption continued for a longer period of time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Most of the system-provided bindings (which expose channels to the application layer) use sessions by default, but the <ph id="ph1">&lt;xref:System.ServiceModel.BasicHttpBinding?displayProperty=fullName&gt;</ph> does not.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Using Sessions<ept id="p1">](../../../../docs/framework/wcf/using-sessions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Proper Use of Sessions</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Sessions provide a way to know if the entire message exchange is complete, and if both sides considered it successful.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is recommended that a calling application open the channel, use it, and close the channel inside one try block.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a session channel is open, and the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A?displayProperty=fullName&gt;</ph> method is called once, and that call returns successfully, then the session was successful.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Successful in this case means that all delivery guarantees the binding specified were met, and the other side did not call <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Abort%2A?displayProperty=fullName&gt;</ph> on the channel before calling <ph id="ph2">&lt;xref:System.ServiceModel.ICommunicationObject.Close%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following section provides an example of this client approach.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Handling Exceptions</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Handling exceptions in client applications is straightforward.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a channel is opened, used, and closed inside a try block, then the conversation has succeeded, unless an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Typically, if an exception is thrown the conversation is aborted.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use of the <ph id="ph1">`using`</ph> statement (<ph id="ph2">`Using`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph>) is not recommended.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is because the end of the <ph id="ph1">`using`</ph> statement can cause exceptions that can mask other exceptions you may need to know about.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Avoiding Problems with the Using Statement<ept id="p1">](../../../../docs/framework/wcf/samples/avoiding-problems-with-the-using-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following code example shows the recommended client pattern using a try/catch block and not the <ph id="ph1">`using`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FaultContractAttribute#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FaultContractAttribute#3<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Checking the value of the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.State%2A?displayProperty=fullName&gt;</ph> property is a race condition and is not recommended to determine whether to reuse or close a channel.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Datagram channels never fault even if exceptions occur when they are closed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In addition, non-duplex clients that fail to authenticate using a secure conversation typically throw a <ph id="ph1">&lt;xref:System.ServiceModel.Security.MessageSecurityException?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>However if the duplex client using a secure conversation fails to authenticate, the client receives a <ph id="ph1">&lt;xref:System.TimeoutException?displayProperty=fullName&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more complete information about working with error information at the application level, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](../../../../docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expected Exceptions<ept id="p1">](../../../../docs/framework/wcf/samples/expected-exceptions.md)</ept> describes expected exceptions and shows how to handle them.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> how to handle errors when developing channels, see <bpt id="p1">[</bpt>Handling Exceptions and Faults<ept id="p1">](../../../../docs/framework/wcf/extending/handling-exceptions-and-faults.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Client Blocking and Performance</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When an application synchronously calls a request-reply operation, the client blocks until a return value is received or an exception (such as a <ph id="ph1">&lt;xref:System.TimeoutException?displayProperty=fullName&gt;</ph>) is thrown.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This behavior is similar to local behavior.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When an application synchronously invokes an operation on a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client object or channel, the client does not return until the channel layer can write the data to the network or until an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>And while the one-way message exchange pattern (specified by marking an operation with <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A?displayProperty=fullName&gt;</ph> set to <ph id="ph2">`true`</ph>) can make some clients more responsive, one-way operations can also block, depending upon the binding and what messages have already been sent.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>One-way operations are only about the message exchange, no more and no less.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>One-Way Services<ept id="p1">](../../../../docs/framework/wcf/feature-details/one-way-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Large data chunks can slow client processing no matter what the message exchange pattern.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To understand how to handle these issues, see <bpt id="p1">[</bpt>Large Data and Streaming<ept id="p1">](../../../../docs/framework/wcf/feature-details/large-data-and-streaming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If your application must do more work while an operation completes, you should create an asynchronous method pair on the service contract interface that your <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client implements.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is to use the <ph id="ph1">`/async`</ph> switch on the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Call Service Operations Asynchronously<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> increasing client performance, see <bpt id="p1">[</bpt>Middle-Tier Client Applications<ept id="p1">](../../../../docs/framework/wcf/feature-details/middle-tier-client-applications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enabling the User to Select Credentials Dynamically</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer&gt;</ph> interface enables applications to display a user interface that enables the user to choose credentials with which a channel is created before the timeout timers start.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Application developers can make use of an inserted <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer&gt;</ph> in two ways.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The client application can call either <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName&gt;</ph> (or an asynchronous version) prior to opening the channel (the <bpt id="p1">*</bpt>explicit<ept id="p1">*</ept> approach) or call the first operation (the <bpt id="p2">*</bpt>implicit<ept id="p2">*</ept> approach).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If using the implicit approach, the application must call the first operation on a <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> extension.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If it calls anything other than the first operation, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If using the explicit approach, the application must perform the following steps in order:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Call either <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601.DisplayInitializationUI%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A?displayProperty=fullName&gt;</ph> (or an asynchronous version).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When the initializers have returned, call either the <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> object or on the <ph id="ph3">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> object returned from the <ph id="ph4">&lt;xref:System.ServiceModel.ClientBase%601.InnerChannel%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Call operations.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It is recommended that production-quality applications control the user-interface process by adopting the explicit approach.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Applications that use the implicit approach invoke the user-interface initializers, but if the user of the application fails to respond within the send timeout period of the binding, an exception is thrown when the user interface returns.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Duplex Services<ept id="p1">](../../../../docs/framework/wcf/feature-details/duplex-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access Services with One-Way and Request-Reply Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-access-wcf-services-with-one-way-and-request-reply-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access Services with a Duplex Contract<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-access-services-with-a-duplex-contract.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access a WSE 3.0 Service<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-access-a-wse-3-0-service-with-a-wcf-client.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use the ChannelFactory<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Call Service Operations Asynchronously<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Middle-Tier Client Applications<ept id="p1">](../../../../docs/framework/wcf/feature-details/middle-tier-client-applications.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>