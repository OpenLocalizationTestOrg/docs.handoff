<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-discover-whether-a-print-job-can-be-printed-at-this-time-of-day.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3aaca3b2fb027e5680c17d8e2bcb9f228d1977e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\how-to-discover-whether-a-print-job-can-be-printed-at-this-time-of-day.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68d9d981e56074f76a857949c928b53ad38dd1a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8c8007e8650de307369a51e7986093b957ddfce</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Discover Whether a Print Job Can Be Printed At This Time of Day | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Discover Whether a Print Job Can Be Printed At This Time of Day</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Print queues are not always available for 24 hours a day.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They have start and end time properties that can be set to make them unavailable at certain times of day.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This feature can be used, for example, to reserve a printer for the exclusive use of a certain department after 5 P.M..</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>That department would have a different queue servicing the printer than other departments use.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The queue for the other departments would be set to be unavailable after 5 P.M., while queue for the favored department could be set to be available at all times.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Moreover, print jobs themselves can be set to be printable only within a specified span of time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Printing.PrintQueue&gt;</ph> and <ph id="ph2">&lt;xref:System.Printing.PrintSystemJobInfo&gt;</ph> classes exposed in the <ph id="ph3">[!INCLUDE[TLA#tla_api#plural](../../../../includes/tlasharptla-apisharpplural-md.md)]</ph> of <ph id="ph4">[!INCLUDE[TLA#tla_winfx](../../../../includes/tlasharptla-winfx-md.md)]</ph> provide a means for remotely checking whether a given print job can print on a given queue at the current time.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The example below is a sample that can diagnose problems with a print job.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>There are two major steps for this kind of function as follows.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Read the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.StartTimeOfDay%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Printing.PrintQueue.UntilTimeOfDay%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Printing.PrintQueue&gt;</ph> to determine whether the current time is between them.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Read the <ph id="ph1">&lt;xref:System.Printing.PrintSystemJobInfo.StartTimeOfDay%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Printing.PrintSystemJobInfo.UntilTimeOfDay%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Printing.PrintSystemJobInfo&gt;</ph> to determine whether the current time is between them.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>But complications arise from the fact that these properties are not <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instead they are <ph id="ph1">&lt;xref:System.Int32&gt;</ph> objects that express the time of day as the number of minutes since midnight.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Moreover, this is not midnight in the current time zone, but midnight UTC (Coordinated Universal Time).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The first code example presents the static method <bpt id="p1">**</bpt>ReportQueueAndJobAvailability<ept id="p1">**</ept>, which is passed a <ph id="ph1">&lt;xref:System.Printing.PrintSystemJobInfo&gt;</ph> and calls helper methods to determine whether the job can print at the current time and, if not, when it can print.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Notice that a <ph id="ph1">&lt;xref:System.Printing.PrintQueue&gt;</ph> is not passed to the method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">&lt;xref:System.Printing.PrintSystemJobInfo&gt;</ph> includes a reference to the queue in its <ph id="ph2">&lt;xref:System.Printing.PrintSystemJobInfo.HostingPrintQueue%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The subordinate methods include the overloaded <bpt id="p1">**</bpt>ReportAvailabilityAtThisTime<ept id="p1">**</ept> method which can take either a <ph id="ph1">&lt;xref:System.Printing.PrintQueue&gt;</ph> or a <ph id="ph2">&lt;xref:System.Printing.PrintSystemJobInfo&gt;</ph> as a parameter.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There is also a <bpt id="p1">**</bpt>TimeConverter.ConvertToLocalHumanReadableTime<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All of these methods are discussed below.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ReportQueueAndJobAvailability<ept id="p1">**</ept> method begins by checking to see if either the queue or the print job is unavailable at this time.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If either of them is unavailable, it then checks to see if the queue unavailable.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If it is not available, then the method reports this fact and the time when the queue will become available again.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It then checks the job and if it is unavailable, it reports the next time span when it when it can print.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Finally, the method reports the earliest time when the job can print.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is the later of following two times.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The time when the print queue is next available.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The time when the print job is next available.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When reporting times of day, the <ph id="ph1">&lt;xref:System.DateTime.ToShortTimeString%2A&gt;</ph> method is also called because this method suppresses the years, months, and days from the output.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You cannot restrict the availability of either a print queue or a print job to particular years, months, or days.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The two overloads of the <bpt id="p1">**</bpt>ReportAvailabilityAtThisTime<ept id="p1">**</ept> method are identical except for the type passed to them, so only the <ph id="ph1">&lt;xref:System.Printing.PrintQueue&gt;</ph> version is presented below.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The fact that the methods are identical except for type raises the question of why the sample does not create a generic method <bpt id="p1">**</bpt>ReportAvailabilityAtThisTime<ph id="ph1">\&lt;</ph>T&gt;<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The reason is that such a method would have to be restricted to a class that has the <bpt id="p1">**</bpt>StartTimeOfDay<ept id="p1">**</ept> and <bpt id="p2">**</bpt>UntilTimeOfDay<ept id="p2">**</ept> properties that the method calls, but a generic method can only be restricted to a single class and the only class common to both <ph id="ph1">&lt;xref:System.Printing.PrintQueue&gt;</ph> and <ph id="ph2">&lt;xref:System.Printing.PrintSystemJobInfo&gt;</ph> in the inheritance tree is <ph id="ph3">&lt;xref:System.Printing.PrintSystemObject&gt;</ph> which has no such properties.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ReportAvailabilityAtThisTime<ept id="p1">**</ept> method (presented in the code example below) begins by initializing a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> sentinel variable to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It will be reset to <ph id="ph1">`false`</ph>, if the queue is not available.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Next, the method checks to see if the start and "until" times are identical.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If they are, the queue is always available, so the method returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the queue is not available all the time, the method uses the static <ph id="ph1">&lt;xref:System.DateTime.UtcNow%2A&gt;</ph> property to get the current time as a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(We do not need local time because the <ph id="ph1">&lt;xref:System.Printing.PrintQueue.StartTimeOfDay%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Printing.PrintQueue.UntilTimeOfDay%2A&gt;</ph> properties are themselves in UTC time.)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, these two properties are not <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>They are <ph id="ph1">&lt;xref:System.Int32&gt;</ph>s expressing the time as the number of minutes-after-UTC-midnight.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>So we do have to convert our <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> object to minutes-after-midnight.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When that is done, the method simply checks to see whether "now" is between the queue's start and "until" times, sets the sentinel to false if "now" is not between the two times, and returns the sentinel.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TimeConverter.ConvertToLocalHumanReadableTime<ept id="p1">**</ept> method (presented in the code example below) does not use any methods introduced with <ph id="ph1">[!INCLUDE[TLA#tla_winfx](../../../../includes/tlasharptla-winfx-md.md)]</ph>, so the discussion is brief.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The method has a double conversion task: it must take an integer expressing minutes-after-midnight and convert it to a human-readable time and it must convert this to the local time.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It accomplishes this by first creating a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> object that is set to midnight UTC and then it uses the <ph id="ph2">&lt;xref:System.DateTime.AddMinutes%2A&gt;</ph> method to add the minutes that were passed to the method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This returns a new <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> expressing the original time that was passed to the method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.DateTime.ToLocalTime%2A&gt;</ph> method then converts this to local time.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Documents in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/documents-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Printing Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/printing-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>