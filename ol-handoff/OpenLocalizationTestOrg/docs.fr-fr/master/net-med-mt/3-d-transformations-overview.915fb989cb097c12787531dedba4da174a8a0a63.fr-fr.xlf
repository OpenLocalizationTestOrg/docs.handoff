<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="3-d-transformations-overview.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1982838fe11b549d1f01189b773d37fb2d4a3fc1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\3-d-transformations-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">403f024761e37977644c4e43a7edb2672cd49a9c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14230d5ff4a26be351ecabe366750ba457c61628</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>3-D Transformations Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>3-D Transformations Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to apply transformations to 3-D models in the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> graphics system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Transformations allow the developer to reposition, resize, and reorient models without changing the base values that define them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>3-D Coordinate Space</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>3-D graphics content in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> is encapsulated in an element, <ph id="ph2">&lt;xref:System.Windows.Controls.Viewport3D&gt;</ph>, that can participate in the two-dimensional element structure.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The graphics system treats Viewport3D as a two-dimensional visual element like many others in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Viewport3D functions as a window—a viewport—into a three-dimensional scene.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>More accurately, it is a surface on which a 3-D scene is projected.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Although you can use Viewport3D with other 2-D drawing objects in the same scene graph, you cannot interpenetrate 2-D and 3-D objects within a Viewport3D.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the following discussion, the coordinate space described is contained by the Viewport3D element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> coordinate system for 2-D graphics locates the origin in the upper left of the rendering surface (typically the screen).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the 2-D system, positive x-axis values proceed to the right and positive y-axis values proceed downward.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the 3-D coordinate system, however, the origin is located in the center of the screen, with positive x-axis values proceeding to the right but positive y-axis values proceeding upward instead, and positive z-axis values proceeding outward from the origin, toward the viewer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Coordinate systems<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/coordsystem-1.png "</bpt>CoordSystem-1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Coordinate System Comparison</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The space defined by these axes is the stationary frame of reference for 3-D objects in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As you build models in this space and create lights and cameras to view them, it's helpful to distinguish this stationary frame of reference, or "world space," from the local frame of reference you create for each model when you apply transformations to it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remember also that objects in world space might look entirely different, or not be visible at all, depending on light and camera settings, but the position of the camera does not change the location of objects in world space.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Transforming Models</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you create models, they have a particular location in the scene.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To move those models around in the scene, to rotate them, or to change their size, it's not practical to change the vertices that define the models themselves.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instead, just as in 2-D, you apply transformations to models.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Each model object has a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Model3D.Transform%2A&gt;</ph> property with which you can move, re-orient, or resize the model.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you apply a transform, you effectively offset all the points of the model by whatever vector or value is specified by the transform.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In other words, you've transformed the coordinate space in which the model is defined ("model space"), but you haven't changed the values that make up the model's geometry in the coordinate system of the entire scene ("world space").</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Translation Transformations</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>3-D transformations inherit from the abstract base class <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Transform3D&gt;</ph>; these include the affine transform classes <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.TranslateTransform3D&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.ScaleTransform3D&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> 3-D system also provides a <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.MatrixTransform3D&gt;</ph> class that lets you specify the same transformations in more concise matrix operations.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.TranslateTransform3D&gt;</ph> moves all the points in the Model3D in the direction of the offset vector you specify with the <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.TranslateTransform3D.OffsetX%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.TranslateTransform3D.OffsetY%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.Media3D.TranslateTransform3D.OffsetZ%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, given one vertex of a cube at (2,2,2), an offset vector of (0,1.6,1) would move that vertex (2,2,2) to (2,3.6,3).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The cube's vertex is still (2,2,2) in model space, but now that model space has changed its relationship to world space so that (2,2,2) in model space is (2,3.6,3) in world space.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Translation figure<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/transforms-translate.png "</bpt>Transforms-Translate<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Translation with Offset</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following code examples show how to apply a translation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation3dgallery_snip#Translation3DAnimationExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Animation3DGallery_snip/CS/Translation3DAnimationExample.xaml#translation3danimationexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Scale Transformations</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Media3D.ScaleTransform3D&gt;</ph> changes the model's scale by a specified scale vector with reference to a center point.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specify a uniform scale, which scales the model by the same value in the X, Y, and Z axes, to change the model's size proportionally.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, setting the transform's <ph id="ph1">&lt;xref:System.Windows.Media.ScaleTransform.ScaleX%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.ScaleTransform.ScaleY%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.ScaleTransform3D.ScaleZ%2A&gt;</ph> properties to 0.5 halves the size of the model; setting the same properties to 2 doubles its scale in all three axes.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Uniform ScaleTransform3D<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/threecubes-uniformscale-1.png "</bpt>threecubes_uniformscale_1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>ScaleVector Example</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>By specifying a non-uniform scale transformation—a scale transformation whose X, Y, and Z values are not all the same—you can cause a model to stretch or contract in one or two dimensions without affecting the others.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, setting <ph id="ph1">&lt;xref:System.Windows.Media.ScaleTransform.ScaleX%2A&gt;</ph> to 1, <ph id="ph2">&lt;xref:System.Windows.Media.ScaleTransform.ScaleY%2A&gt;</ph> to 2, and <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.ScaleTransform3D.ScaleZ%2A&gt;</ph> to 1 would cause the transformed model to double in height but remain unchanged along the X and Z axes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By default, ScaleTransform3D causes vertices to expand or contract about the origin (0,0,0).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the model you want to transform is not drawn from the origin, however, scaling the model from the origin will not scale the model "in place."</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Instead, when the model's vertices are multiplied by the scale vector, the scale operation will have the effect of translating the model as well as scaling it.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Three cubes scaled with center point specified<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/threecubes-scaledwithcenter-1.png "</bpt>threecubes_scaledwithcenter_1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Scale Center Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To scale a model "in place," specify the center of the model by setting the ScaleTransform3D's <ph id="ph1">&lt;xref:System.Windows.Media.ScaleTransform.CenterX%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.ScaleTransform.CenterY%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.ScaleTransform3D.CenterZ%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This ensures that the graphics system scales the model space and then translates it to center on the specified <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Point3D&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Conversely, if you've built the model about the origin and specify a different center point, expect to see the model translated away from the origin.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Rotation Transformations</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can rotate a model in 3-D in several different ways.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A typical rotation transformation specifies an axis and an angle of rotation around that axis.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D&gt;</ph> class allows you to define a <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.Rotation3D&gt;</ph> with its <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D.Rotation%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You then specify <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.AxisAngleRotation3D.Axis%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.AxisAngleRotation3D.Angle%2A&gt;</ph> properties on the Rotation3D, in this case an <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.AxisAngleRotation3D&gt;</ph>, to define the transformation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following examples rotate a model by 60 degrees around the Y axis.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>animation3dgallery_snip#Rotate3DUsingAxisAngleRotation3DExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/Animation3DGallery_snip/CS/Rotat3DUsingAxisAngleRotation3DExample.xaml#rotate3dusingaxisanglerotation3dexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note:<ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> 3-D is a right-handed system, which means that a positive angle value for a rotation results in a counter-clockwise rotation about the axis.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Axis-angle rotations assume rotation about the origin if a value is not specified for the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D.CenterX%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D.CenterY%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D.CenterZ%2A&gt;</ph> properties on RotateTransform3D.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>As with scaling, it's helpful to remember that the rotation transforms the model's entire coordinate space.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the model was not created about the origin, or has been translated previously, the rotation might "pivot" about the origin instead of rotating in place.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Rotation with new center point<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/threecubes-rotationwithcenter-1.png "</bpt>threecubes_rotationwithcenter_1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Rotation with new center specified</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To rotate the model "in place," specify the model's actual center as the center of rotation.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because geometry is typically modeled about the origin, you can most often get the expected result of a set of transformations by first sizing the model (scaling it), then setting its orientation (rotating it), and finally moving it to the desired location (translating it).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Rotation by 60 degrees in x&amp;#45; and y&amp;#45;axes<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/twocubes-rotation2axes-1.png "</bpt>twocubes_rotation2axes_1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Rotation Example</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Axis-angle rotations work well for static transformations and some animations.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>However, consider rotating a cube model 60 degrees around the X axis, then 45 degrees around the Z axis.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can describe this transformation as two discrete affine transformations, or as a matrix.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>However, it might be difficult to smoothly animate a rotation defined this way.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Although the beginning and ending positions of the model computed by either approach are the same, the intermediate positions taken by the model are computationally uncertain.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Quaternions represent an alternative way to compute the interpolation between the start and end of a rotation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A quaternion represents an axis in 3-D space and a rotation around that axis.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, a quaternion might represent a (1,1,2) axis and a rotation of 50 degrees.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Quaternions’ power in defining rotations comes from the two operations that you can perform on them: composition and interpolation.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The composition of two quaternions applied to a geometry means "rotate the geometry around axis2 by rotation2, then rotate it around axis1 by rotation1."</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>By using composition, you can combine the two rotations on the geometry to get a single quaternion that represents the result.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Because quaternion interpolation can calculate a smooth and reasonable path from one axis and orientation to another, you can interpolate from the original to the composed quaternion to achieve a smooth transition from one to the other, enabling you to animate the transformation.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For models that you want to animate, you can specify a destination <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Quaternion&gt;</ph> for the rotation by using a <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.QuaternionRotation3D&gt;</ph> for the <ph id="ph3">&lt;xref:System.Windows.Media.Media3D.RotateTransform3D.Rotation%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Using Transformation Collections</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When building a scene, it's common to apply more than one transformation to a model.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Add transforms to the <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Transform3DGroup.Children%2A&gt;</ph> collection of the <ph id="ph2">&lt;xref:System.Windows.Media.Media3D.Transform3DGroup&gt;</ph> class to group transforms conveniently to apply to various models in the scene.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It's often convenient to reuse a transformation in several different groups, in much the way that you can reuse a model by applying a different set of transforms to each instance.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that order in which the transformations are added to the collection is significant: transforms in the collection are applied from first to last.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Animating Transformations</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> 3-D implementation participates in the same timing and animation system as 2-D graphics.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In other words, to animate a 3-D scene, animate the properties of its models.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It's possible to animate properties of primitives directly, but it's typically easier to animate transformations that change the position or appearance of models.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Because transformations can be applied to <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Model3DGroup&gt;</ph> objects as well as individual models, it's possible to apply one set of animations to the children of a Model3Dgroup and another set of animations to a group of objects.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For background information on the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> timing and animation system, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept> and <bpt id="p2">[</bpt>Storyboards Overview<ept id="p2">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To animate an object in <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph>, create a timeline, define an animation (which is really a change in some property value over time), and specify the property to which to apply the animation.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This property must be a property of a FrameworkElement.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Because all the objects in a 3-D scene are children of Viewport3D, the properties targeted by any animation you want to apply to the scene are properties of properties of Viewport3D.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It's important to work out the property path for the animation carefully, because the syntax can be verbose.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Suppose you want to rotate an object in place, but also to apply a swinging motion to expose more of the object to view.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You might choose to apply a RotateTransform3D to the model, and animate the axis of its rotation from one vector to another.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates applying a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Vector3DAnimation&gt;</ph> to the Axis property of the transformation's Rotation3D, assuming the RotateTransform3D to be one of several transforms applied to the model with a <ph id="ph2">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>3doverview#3DOverview3DN1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/3DOverview/CSharp/Window1.xaml.cs#3doverview3dn1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>3doverview#3DOverview3DN1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/3DOverview/visualbasic/window1.xaml.vb#3doverview3dn1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>3doverview#3DOverview3DN3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/3DOverview/CSharp/Window1.xaml.cs#3doverview3dn3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>3doverview#3DOverview3DN3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/3DOverview/visualbasic/window1.xaml.vb#3doverview3dn3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Use a similar syntax to target other transformation properties to move or scale the object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For example, you might apply a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Point3DAnimation&gt;</ph> to the ScaleCenter property on a scale transform to cause a model to smoothly distort its shape.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Although the preceding examples transform the properties of <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.GeometryModel3D&gt;</ph>, it’s also possible to transform the properties of other models in the scene.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>By animating translations applied to Light objects, for example, you can create moving light and shadow effects that can dramatically change the appearance of your models.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Because cameras are also models, it’s possible to transform camera properties as well.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>While you can certainly change the appearance of the scene by transforming the camera location or plane distances—in effect, transforming the entire scene projection—note that many of the effects you achieve this way may not make as much "visual sense" to the viewer as transformations applied to the location or position of the models in the scene.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>3-D Graphics Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/3-d-graphics-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Transforms Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/transforms-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>2-D Transforms Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>