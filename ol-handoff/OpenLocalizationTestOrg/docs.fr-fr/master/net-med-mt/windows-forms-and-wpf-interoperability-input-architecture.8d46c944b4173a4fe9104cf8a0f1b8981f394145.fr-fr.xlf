<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="windows-forms-and-wpf-interoperability-input-architecture.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34cd9855a529d121f9335d8877326d278c44a26f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\windows-forms-and-wpf-interoperability-input-architecture.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8d548e9459f5a1e92cfa1d2cde8095e40b330e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">790065e04f9ef0f794d163d38d75e74d98a2dbae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Windows Forms and WPF Interoperability Input Architecture | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Forms and WPF Interoperability Input Architecture</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Interoperation between the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> requires that both technologies have the appropriate keyboard input processing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes how these technologies implement keyboard and message processing to enable smooth interoperation in hybrid applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic contains the following subsections:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Modeless Forms and Dialog Boxes</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>WindowsFormsHost Keyboard and Message Processing</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ElementHost Keyboard and Message Processing</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Modeless Forms and Dialog Boxes</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> element to open a modeless form or dialog box from a <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>-based application.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.ElementHost.EnableModelessKeyboardInterop%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Windows.Forms.Integration.ElementHost&gt;</ph> control to open a modeless <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> page in a <ph id="ph4">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph>-based application.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>WindowsFormsHost Keyboard and Message Processing</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When hosted by a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>-based application, <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> keyboard and message processing consists of the following:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> class acquires messages from the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> message loop, which is implemented by the <ph id="ph3">&lt;xref:System.Windows.Interop.ComponentDispatcher&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> class creates a surrogate <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> message loop to ensure that ordinary <ph id="ph3">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> keyboard processing occurs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> interface to coordinate focus management with <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> controls register themselves and start their message loops.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sections describe these parts of the process in more detail.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Acquiring Messages from the WPF Message Loop</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.ComponentDispatcher&gt;</ph> class implements the message loop manager for <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.ComponentDispatcher&gt;</ph> class provides hooks to enable external clients to filter messages before <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> processes them.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The interoperation implementation handles the <ph id="ph1">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage?displayProperty=fullName&gt;</ph> event, which enables <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> controls to process messages before <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> controls.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Surrogate Windows Forms Message Loop</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.Forms.Application?displayProperty=fullName&gt;</ph> class contains the primary message loop for <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>During interoperation, the <ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> message loop does not process messages.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Therefore, this logic must be reproduced.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The handler for the <ph id="ph1">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage?displayProperty=fullName&gt;</ph> event performs the following steps:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Filters the message using the <ph id="ph1">&lt;xref:System.Windows.Forms.IMessageFilter&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Calls the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Translates and dispatches the message, if it is required.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Passes the message to the hosting control, if no other controls process the message.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>IKeyboardInputSink Implementation</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The surrogate message loop handles keyboard management.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A?displayProperty=fullName&gt;</ph> method is the only <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> member that requires an implementation in the <ph id="ph3">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">&lt;xref:System.Windows.Interop.HwndHost&gt;</ph> class returns <ph id="ph2">`false`</ph> for its <ph id="ph3">&lt;xref:System.Windows.Interop.HwndHost.System%23Windows%23Interop%23IKeyboardInputSink%23TabInto%2A&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This prevents tabbing from a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> control to a <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> control.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> implementation of the <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A?displayProperty=fullName&gt;</ph> method performs the following steps:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Finds the first or last <ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> control that is contained by the <ph id="ph2">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> control and that can receive focus.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The control choice depends on traversal information.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Sets focus to the control and returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If no control can receive focus, returns <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>WindowsFormsHost Registration</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When the window handle to a <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> control is created, the <ph id="ph2">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> control calls an internal static method that registers its presence for the message loop.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>During registration, the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> control examines the message loop.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the message loop has not been started, the <ph id="ph1">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage?displayProperty=fullName&gt;</ph> event handler is created.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The message loop is considered to be running when the <ph id="ph1">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage?displayProperty=fullName&gt;</ph> event handler is attached.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When the window handle is destroyed, the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.WindowsFormsHost&gt;</ph> control removes itself from registration.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ElementHost Keyboard and Message Processing</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When hosted by a <ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> application, <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> keyboard and message processing consists of the following:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSite&gt;</ph> interface implementations.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Tabbing and arrow keys.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Command keys and dialog box keys.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> accelerator processing.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following sections describe these parts in more detail.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Interface Implementations</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph>, keyboard messages are routed to the window handle of the control that has focus.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.ElementHost&gt;</ph> control, these messages are routed to the hosted element.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To accomplish this, the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.ElementHost&gt;</ph> control provides an <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.ElementHost&gt;</ph> control has focus, the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> instance routes most keyboard input so that it can be processed by the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph4">&lt;xref:System.Windows.Input.InputManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSite&gt;</ph> interfaces.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Keyboard interoperation relies on implementing the <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A&gt;</ph> method to handle TAB key and arrow key input that moves focus out of hosted elements.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Tabbing and Arrow Keys</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> selection logic is mapped to the <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.System%23Windows%23Interop%23IKeyboardInputSink%23TabInto%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A&gt;</ph> methods to implement TAB and arrow key navigation.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.ElementHost.Select%2A&gt;</ph> method accomplishes this mapping.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Command Keys and Dialog Box Keys</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To give <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> the first opportunity to process command keys and dialog keys, <ph id="ph2">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> command preprocessing is connected to the <ph id="ph3">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessCmdKey%2A?displayProperty=fullName&gt;</ph> method connects the two technologies.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A&gt;</ph> method, the hosted elements can handle any key message, such as WM_KEYDOWN, WM_KEYUP, WM_SYSKEYDOWN, or WM_SYSKEYUP, including command keys, such as TAB, ENTER, ESC, and arrow keys.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If a key message is not handled, it is sent up the <ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> ancestor hierarchy for handling.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Accelerator Processing</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To process accelerators correctly, <ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> accelerator processing must be connected to the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Additionally, all WM_CHAR messages must be correctly routed to hosted elements.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Because the default <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> implementation of the <ph id="ph2">&lt;xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A&gt;</ph> method returns <ph id="ph3">`false`</ph>, WM_CHAR messages are processed using the following logic:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A?displayProperty=fullName&gt;</ph> method is overridden to ensure that all WM_CHAR messages are forwarded to hosted elements.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If the ALT key is pressed, the message is WM_SYSCHAR.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winforms](../../../../includes/tlasharptla-winforms-md.md)]</ph> does not preprocess this message through the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.IsInputChar%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.ProcessMnemonic%2A&gt;</ph> method is overridden to query the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph3">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph> for a registered accelerator.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If a registered accelerator is found, <ph id="ph1">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph> processes it.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the ALT key is not pressed, the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Input.InputManager&gt;</ph> class processes the unhandled input.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the input is an accelerator, the <ph id="ph1">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph> processes it.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputManager.PostProcessInput&gt;</ph> event is handled for WM_CHAR messages that were not processed.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When the user presses the ALT key, accelerator visual cues are shown on the whole form.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>To support this behavior, all <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.ElementHost&gt;</ph> controls on the active form receive WM_SYSKEYDOWN messages, regardless of which control has focus.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Messages are sent only to <ph id="ph1">&lt;xref:System.Windows.Forms.Integration.ElementHost&gt;</ph> controls in the active form.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Hosting a Windows Forms Composite Control in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-a-windows-forms-composite-control-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Hosting a WPF Composite Control in Windows Forms<ept id="p1">](../../../../docs/framework/wpf/advanced/walkthrough-hosting-a-wpf-composite-control-in-windows-forms.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF and Win32 Interoperation<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>