<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bf2abdf32dfc67c8f175c8461aa4c2671c68569</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\managed-and-unmanaged-threading-in-windows.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3355a2194a0f3312541b1bb8d07c0f4298eeb7d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b733a58b6969284c4bad58fa912496d53e3d8ee9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managed and Unmanaged Threading in Windows | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Managed and Unmanaged Threading in Windows</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Management of all threads is done through the <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> class, including threads created by the common language runtime and those created outside the runtime that enter the managed environment to execute code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The runtime monitors all the threads in its process that have ever executed code within the managed execution environment.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It does not track any other threads.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Threads can enter the managed execution environment through COM interop (because the runtime exposes managed objects as COM objects to the unmanaged world), the COM <bpt id="p1">[</bpt>DllGetClassObject<ept id="p1">](https://msdn.microsoft.com/en-us/library/ms680760.aspx)</ept> function, and platform invoke.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When an unmanaged thread enters the runtime through, for example, a COM callable wrapper, the system checks the thread-local store of that thread to look for an internal managed <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If one is found, the runtime is already aware of this thread.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If it cannot find one, however, the runtime builds a new <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> object and installs it in the thread-local store of that thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In managed threading, <ph id="ph1">&lt;xref:System.Threading.Thread.GetHashCode%2A?displayProperty=fullName&gt;</ph> is the stable managed thread identification.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For the lifetime of your thread, it will not collide with the value from any other thread, regardless of the application domain from which you obtain this value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An operating-system <bpt id="p1">**</bpt>ThreadId<ept id="p1">**</ept> has no fixed relationship to a managed thread, because an unmanaged host can control the relationship between managed and unmanaged threads.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifically, a sophisticated host can use the Fiber API to schedule many managed threads against the same operating system thread, or to move a managed thread among different operating system threads.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Mapping from Win32 Threading to Managed Threading</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following table maps Win32 threading elements to their approximate runtime equivalent.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that this mapping does not represent identical functionality.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>TerminateThread<ept id="p1">**</ept> does not execute <bpt id="p2">**</bpt>finally<ept id="p2">**</ept> clauses or free up resources, and cannot be prevented.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph> executes all your rollback code, reclaims all the resources, and can be denied using <ph id="ph2">&lt;xref:System.Threading.Thread.ResetAbort%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Be sure to read the documentation closely before making assumptions about functionality.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Win32</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the common language runtime</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CreateThread<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Combination of <bpt id="p1">**</bpt>Thread<ept id="p1">**</ept> and <ph id="ph1">&lt;xref:System.Threading.ThreadStart&gt;</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TerminateThread<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SuspendThread<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ResumeThread<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Sleep<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WaitForSingleObject<ept id="p1">**</ept> on the thread handle</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ExitThread<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>No equivalent</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetCurrentThread<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SetThreadPriority<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>No equivalent</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>No equivalent</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Close to <bpt id="p1">**</bpt>CoInitializeEx<ept id="p1">**</ept> (OLE32.DLL)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Managed Threads and COM Apartments</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A managed thread can be marked to indicate that it will host a <bpt id="p1">[</bpt>single-threaded<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms680112.aspx)</ept> or <bpt id="p2">[</bpt>multithreaded<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms693421.aspx)</ept> apartment.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>(For more information on the COM threading architecture, see <bpt id="p1">[</bpt>Processes, threads, and Apartments<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms693344.aspx)</ept>.) The <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> methods of the <ph id="ph4">&lt;xref:System.Threading.Thread&gt;</ph> class return and assign the apartment state of a thread.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the state has not been set, <ph id="ph1">&lt;xref:System.Threading.Thread.GetApartmentState%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Threading.ApartmentState?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The property can be set only when the thread is in the <ph id="ph1">&lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt;</ph> state; it can be set only once for a thread.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the apartment state is not set before the thread is started, the thread is initialized as a multithreaded apartment (MTA).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The finalizer thread and all threads controlled by <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> are MTA.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For application startup code, the only way to control apartment state is to apply the <ph id="ph1">&lt;xref:System.MTAThreadAttribute&gt;</ph> or the <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph> to the entry point procedure.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 1.0 and 1.1, the <ph id="ph1">&lt;xref:System.Threading.Thread.ApartmentState%2A&gt;</ph> property can be set as the first line of code.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is not permitted in the .NET Framework 2.0.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Managed objects that are exposed to COM behave as if they had aggregated the free-threaded marshaler.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In other words, they can be called from any COM apartment in a free-threaded manner.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The only managed objects that do not exhibit this free-threaded behavior are those objects that derive from <ph id="ph1">&lt;xref:System.EnterpriseServices.ServicedComponent&gt;</ph>or <ph id="ph2">&lt;xref:System.Runtime.InteropServices.StandardOleMarshalObject&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the managed world, there is no support for the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Contexts.SynchronizationAttribute&gt;</ph> unless you use contexts and context-bound managed instances.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you are using Enterprise Services, then your object must derive from <ph id="ph1">&lt;xref:System.EnterpriseServices&gt;</ph> (which is itself derived from <ph id="ph2">&lt;xref:System.ContextBoundObject&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When managed code calls out to COM objects, it always follows COM rules.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In other words, it calls through COM apartment proxies and COM+ 1.0 context wrappers as dictated by OLE32.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Blocking Issues</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If a thread makes an unmanaged call into the operating system that has blocked the thread in unmanaged code, the runtime will not take control of it for <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the case of <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>, the runtime marks the thread for <bpt id="p1">**</bpt>Abort<ept id="p1">**</ept> and takes control of it when it re-enters managed code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It is preferable for you to use managed blocking rather than unmanaged blocking.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName&gt;</ph>,<ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=fullName&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt;</ph>, <ph id="ph5">&lt;xref:System.Threading.Monitor.TryEnter%2A?displayProperty=fullName&gt;</ph>, <ph id="ph6">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;</ph>, <ph id="ph7">&lt;xref:System.GC.WaitForPendingFinalizers%2A?displayProperty=fullName&gt;</ph>, and so on are all responsive to <ph id="ph8">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> and to <ph id="ph9">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Also, if your thread is in a single-threaded apartment, all these managed blocking operations will correctly pump messages in your apartment while your thread is blocked.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>