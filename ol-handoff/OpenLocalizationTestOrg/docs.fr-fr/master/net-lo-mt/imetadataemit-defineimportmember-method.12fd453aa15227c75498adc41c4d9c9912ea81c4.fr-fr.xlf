<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="imetadataemit-defineimportmember-method.md" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">daa2c63db5aa8e2706a8752bfcef04c2ebb0ce20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\metadata\imetadataemit-defineimportmember-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2766cb17c8645e46d5b591b2e1de6eac7a9a33a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3111e7a679f5306d5d914796549d63b58510e918</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>IMetaDataEmit::DefineImportMember Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IMetaDataEmit::DefineImportMember Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates a reference to the specified member of a type or module that is defined outside the current scope, and defines a token for that reference.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] An <bpt id="p1">[</bpt>IMetaDataAssemblyImport<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyimport-interface.md)</ept> interface that represents the assembly from which the target member is imported.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in] An array that contains the hash for the assembly specified by <ph id="ph1">`pAssemImport`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[in] The number of bytes in the <ph id="ph1">`pbHashValue`</ph> array.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[in] An <bpt id="p1">[</bpt>IMetaDataImport<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)</ept> interface that represents the metadata scope from which the target member is imported.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>[in] The metadata token that specifies the target member.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The token can be an <ph id="ph1">`mdMethodDef`</ph> (for a member method), <ph id="ph2">`mdProperty`</ph> (for a member property), or <ph id="ph3">`mdFieldDef`</ph> (for a member field) token.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>[in] An <bpt id="p1">[</bpt>IMetaDataAssemblyEmit<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataassemblyemit-interface.md)</ept> interface that represents the assembly into which the target member is imported.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[in] The <ph id="ph1">`mdTypeRef`</ph> or <ph id="ph2">`mdModuleRef`</ph> token for the type or module, respectively, that owns the target member.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>[out] The <ph id="ph1">`mdMemberRef`</ph> token that is defined in the current scope for the member reference.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefineImportMember`</ph> method looks up the member, specified by <ph id="ph2">`mbMember`</ph>, that is defined in another scope, specified by <ph id="ph3">`pImport`</ph>, and retrieves its properties.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It uses this information to call the <bpt id="p1">[</bpt>IMetaDataEmit::DefineMemberRef<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-definememberref-method.md)</ept> method in the current scope to create the member reference.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Generally, before you use the <ph id="ph1">`DefineImportMember`</ph> method, you must create, in the current scope, a type reference or module reference for the target member's parent class, interface, or module.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The metadata token for this reference is then passed in the <ph id="ph1">`tkParent`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You do not need to create a reference to the target member's parent if it will be resolved later by the compiler or linker.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To summarize:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the target member is a field or method, use either the <bpt id="p1">[</bpt>IMetaDataEmit::DefineTypeRefByName<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-definetyperefbyname-method.md)</ept> or the <bpt id="p2">[</bpt>IMetaDataEmit::DefineImportType<ept id="p2">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-defineimporttype-method.md)</ept> method to create a type reference, in the current scope, for the member's parent class or parent interface.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the target member is a global variable or global function (that is, not a member of a class or interface), use the <bpt id="p1">[</bpt>IMetaDataEmit::DefineModuleRef<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-definemoduleref-method.md)</ept> method to create a module reference, in the current scope, for the member's parent module.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the target member's parent will be resolved later by the compiler or linker, then pass <ph id="ph1">`mdTokenNil`</ph> in <ph id="ph2">`tkParent`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The only scenario in which this applies is when a global function or global variable is being imported from a .obj file that will ultimately be linked into the current module and the metadata merged.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> Cor.h</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> Used as a resource in MSCorEE.dll</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IMetaDataEmit Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IMetaDataEmit2 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>