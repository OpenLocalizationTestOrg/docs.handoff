<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7062102ff17c13b7cf25a1cfbb266c696221151b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\tools\project-json-to-csproj.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">564c9f617e4da69cfba767200797ff35ca8dea99</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ba04801d5c5cf330cabfd0ee37974b5a156afff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>project.json and csproj comparison - .NET Core | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>See a mapping between project.json and csproj elements.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>project.json, csproj, .NET Core, MSBuild</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A mapping between project.json and csproj properties</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By <bpt id="p1">[</bpt>Nate McMaster<ept id="p1">](https://github.com/natemcmaster)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>During the development of the .NET Core tooling, an important design change was made to no longer support <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> files and instead move the .NET Core projects to the MSBuild/csproj format.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article shows how the settings in <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept> are represented in the MSBuild/csproj format so you can learn how to use the new format and understand the changes made by the migration tools when you're upgrading your project to the latest version of the tooling.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The csproj format</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The new format, <ph id="ph1">\*</ph>.csproj, is an XML-based format.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows the root node of a .NET Core project using the <ph id="ph1">`Microsoft.NET.Sdk`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For web projects, the SDK used is <ph id="ph1">`Microsoft.NET.Sdk.Web`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Common top-level properties</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>No longer supported.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In csproj, this is determined by the project filename, which is defined by the directory name.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`MyProjectName.csproj`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, the project filename also specifies the value of the <ph id="ph1">`&lt;AssemblyName&gt;`</ph> and <ph id="ph2">`&lt;PackageId&gt;`</ph> properties.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;AssemblyName&gt;`</ph> will have a different value then <ph id="ph2">`&lt;PackageId&gt;`</ph> if <ph id="ph3">`buildOptions\outputName`</ph> property was defined in project.json.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Other common build options<ept id="p1">](#other-common-build-options)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>version</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`VersionPrefix`</ph> and <ph id="ph2">`VersionSuffix`</ph> properties:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`Version`</ph> property, but this may override version settings during packaging:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Other common root-level options</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>frameworks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One target framework</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Multiple target frameworks</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`TargetFrameworks`</ph> property to define your list of target frameworks.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use semi-colon to separate multiple framework values.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>dependencies</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the dependency is a <bpt id="p1">**</bpt>project<ept id="p1">**</ept> and not a package, the format is different.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>dependency type<ept id="p1">](#dependency-type)</ept> section.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>NETStandard.Library metapackage</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Microsoft.NETCore.App metapackage</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`&lt;RuntimeFrameworkVersion&gt;`</ph> value in the migrated project is determined by the version of the SDK you have installed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Top-level dependencies</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Per-framework dependencies</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>imports</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>dependency type</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>type: project</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This will break the way that <ph id="ph1">`dotnet pack --version-suffix $suffix`</ph> determines the dependency version of a project reference.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>type: build</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>type: platform</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>There is no equivalent in csproj.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>runtimes</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Standalone apps (self-contained deployment)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In project.json, defining a <ph id="ph1">`runtimes`</ph> section means the app was standalone during build and publish.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In MSBuild, all projects are <bpt id="p1">*</bpt>portable<ept id="p1">*</ept> during build, but can be published as standalone.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Self-contained deployments (SCD)<ept id="p1">](../deploying/index.md#self-contained-deployments-scd)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>tools</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`imports`</ph> on tools are not supported in csproj.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Tools that need imports will not work with the new <ph id="ph1">`Microsoft.NET.Sdk`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>buildOptions</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See also <bpt id="p1">[</bpt>Files<ept id="p1">](#files)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>emitEntryPoint</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`emitEntryPoint`</ph> was <ph id="ph2">`false`</ph>, the value of <ph id="ph3">`OutputType`</ph> is converted to <ph id="ph4">`Library`</ph>, which is the default value:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>keyFile</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`keyFile`</ph> element expands to three properties in MSBuild:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Other common build options</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>packOptions</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See also <bpt id="p1">[</bpt>Files<ept id="p1">](#files)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Common pack options</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>There is no equivalent for the <ph id="ph1">`owners`</ph> element in MSBuild.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`summary`</ph>, you can use the MSBuild <ph id="ph2">`&lt;Description&gt;`</ph> property, even though the value of <ph id="ph3">`summary`</ph> is not migrated automatically to that property, since that property is mapped to the <bpt id="p1">[</bpt><ph id="ph4">`description`</ph><ept id="p1">](#-other-common-root-level-options)</ept> element.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>scripts</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Their equivalent in MSBuild are <bpt id="p1">[</bpt>targets<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/msbuild-targets)</ept>:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>runtimeOptions</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>All settings in this group, except for the "System.GC.Server" property, are placed into a file called <bpt id="p1">*</bpt>runtimeconfig.template.json<ept id="p1">*</ept> in the project folder, with options lifted to the root object during the migration process:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The "System.GC.Server" property is migrated into the csproj file:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>However, you can set all those values in the csproj as well as MSBuild properties:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>shared</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Not supported in csproj.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You must instead create include content files in your <bpt id="p1">*</bpt>.nuspec<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Including content files<ept id="p1">](https://docs.microsoft.com/nuget/schema/nuspec#including-content-files)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>files</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>project.json<ept id="p1">*</ept>, build and pack could be extended to compile and embed from different folders.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In MSBuild, this is done using <bpt id="p1">[</bpt>items<ept id="p1">](https://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-items)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following example is a common conversion:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Many of the default <bpt id="p1">[</bpt>globbing patterns<ept id="p1">](https://en.wikipedia.org/wiki/Glob_(programming))</ept> are added automatically by the .NET Core SDK.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Default Compile Item Values<ept id="p1">](https://aka.ms/sdkimplicititems)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>All MSBuild <ph id="ph1">`ItemGroup`</ph> elements support <ph id="ph2">`Include`</ph>, <ph id="ph3">`Exclude`</ph>, and <ph id="ph4">`Remove`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Package layout inside the .nupkg can be modified with <ph id="ph1">`PackagePath="path"`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Except for <ph id="ph1">`Content`</ph>, most item groups require explicitly adding <ph id="ph2">`Pack="true"`</ph> to be included in the package.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Content`</ph> will be put in the <bpt id="p1">*</bpt>content<ept id="p1">*</ept> folder in a package since the MSBuild <ph id="ph2">`&lt;IncludeContentInPack&gt;`</ph> property is set to <ph id="ph3">`true`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Including content in a package<ept id="p1">](https://docs.microsoft.com/nuget/schema/msbuild-targets#including-content-in-a-package)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PackagePath="%(Identity)"`</ph> is a short way of setting package path to the project-relative file path.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>testRunner</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>xUnit</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>MSTest</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>High-level overview of changes in CLI<ept id="p1">](../tools/cli-msbuild-architecture.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>