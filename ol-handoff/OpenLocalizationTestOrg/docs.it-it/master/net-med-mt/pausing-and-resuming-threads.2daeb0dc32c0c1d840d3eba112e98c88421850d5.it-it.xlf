<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e6a21758932bed54ab9bf62892eb50f9d05ba96</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\pausing-and-resuming-threads.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67312b0b6cc8e260012cb900a1fd5cc75711a530</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f09ef305881392406c1f7c3c4a92c35c1c17323b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pausing and Resuming Threads | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pausing and Resuming Threads</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The most common ways to synchronize the activities of threads are to block and release threads, or to lock objects or regions of code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information on these locking and blocking mechanisms, see <bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also have threads put themselves to sleep.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When threads are blocked or sleeping, you can use a <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> to break them out of their wait states.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Thread.Sleep Method</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Calling the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> method causes the current thread to immediately block for the number of milliseconds or the time interval you pass to the method, and yields the remainder of its time slice to another thread.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Once that interval elapses, the sleeping thread resumes execution.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>One thread cannot call <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> on another thread.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> is a static method that always causes the current thread to sleep.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> with a value of <ph id="ph2">&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;</ph> causes a thread to sleep until it is interrupted by another thread that calls the  <ph id="ph3">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> method on the sleeping thread, or until it is terminated by a call to its <ph id="ph4">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example illustrates both methods of interrupting a sleeping thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Threading.Resuming#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Conceptual.Threading.Resuming/cs/Sleep1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Threading.Resuming#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Conceptual.Threading.Resuming/vb/Sleep1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Interrupting Threads</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can interrupt a waiting thread by calling the <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> method on the blocked thread to throw a <ph id="ph2">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph>, which breaks the thread out of the blocking call.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The thread should catch the <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> and do whatever is appropriate to continue working.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the thread ignores the exception, the runtime catches the exception and stops the thread.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the target thread is not blocked when <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> is called, the thread is not interrupted until it blocks.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the thread never blocks, it could complete without ever being interrupted.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a wait is a managed wait, then <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph> both wake the thread immediately.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If a wait is an unmanaged wait (for example, a platform invoke call to the Win32 <bpt id="p1">[</bpt>WaitForSingleObject<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms687032\(v=vs.85\).aspx)</ept> function), neither <ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> nor <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph> can take control of the thread until it returns to or calls into managed code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In managed code, the behavior is as follows:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Interrupt%2A?displayProperty=fullName&gt;</ph> wakes a thread out of any wait it might be in and causes a <ph id="ph2">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> to be thrown in the destination thread.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph> wakes a thread out of any wait it might be in and causes a <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to be thrown on the thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Destroying Threads<ept id="p1">](../../../docs/standard/threading/destroying-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Threading<ept id="p1">](../../../docs/standard/threading/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Threads and Threading<ept id="p1">](../../../docs/standard/threading/using-threads-and-threading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>