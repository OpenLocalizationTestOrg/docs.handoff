<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="reliable-messaging-protocol-version-1-1.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a60003129b8b71bcc6350b39f40ba4713d16c031</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\reliable-messaging-protocol-version-1-1.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80fa08a2860614a6d5073c76f750ed00504d8545</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d65acf17e2c68d3ebfb585a3b5777b4ddb99ac9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Reliable Messaging Protocol version 1.1 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reliable Messaging Protocol version 1.1</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic covers <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> implementation details for the WS-ReliableMessaging February 2007 (version 1.1) protocol necessary for interoperation using the HTTP transport.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> follows the WS-ReliableMessaging specification with the constraints and clarifications explained in this topic.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Note that the WS-ReliableMessaging version 1.1 protocol is implemented starting with the <ph id="ph1">[!INCLUDE[netfx35_long](../../../../includes/netfx35-long-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The WS-ReliableMessaging February 2007 protocol is implemented in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> by the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ReliableSessionBindingElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For convenience, the topic uses the following roles:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Initiator: The client that initiates WS-Reliable Message sequence creation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Responder: The service that receives the initiator's requests.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This document uses the prefixes and namespaces in the following table.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Prefix</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Namespace</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>wsrm</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>http://docs.oasis-open.org/ws-rx/wsrm/200702</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>netrm</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>http://schemas.microsoft.com/ws/2006/05/rm</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>s</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>http://www.w3.org/2003/05/soap-envelope</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>wsa</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>http://schemas.xmlsoap.org/ws/2005/08/addressing</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>wsse</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>http://docs.oasis-open.org/wss/2004/01/oasis-200401-wssecurity-secext-1.0.xsd</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>wsrmp</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>http://docs.oasis-open.org/ws-rx/wsrmp/200702</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>netrmp</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>http://schemas.microsoft.com/ws-rx/wsrmp/200702</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>wsp</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>(Either WS-Policy 1.2 or WS-Policy 1.5)</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Messaging</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Sequence Creation</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements <ph id="ph2">`CreateSequence`</ph> and <ph id="ph3">`CreateSequenceResponse`</ph> messages to establish a reliable messaging sequence.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following constraints apply:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>B1101: The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator uses the same endpoint reference as the <ph id="ph2">`CreateSequence`</ph> messageâ€™s <ph id="ph3">`ReplyTo`</ph>, <ph id="ph4">`AcksTo`</ph> and <ph id="ph5">`Offer/Endpoint`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>R1102: The <ph id="ph1">`AcksTo`</ph>, <ph id="ph2">`ReplyTo`</ph> and <ph id="ph3">`Offer/Endpoint`</ph> endpoint references in the <ph id="ph4">`CreateSequence`</ph> message must have address values with identical string representations such that they match the octet-wise.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder verifies that the URI portion of the <ph id="ph2">`AcksTo`</ph>, <ph id="ph3">`ReplyTo`</ph> and <ph id="ph4">`Endpoint`</ph> endpoint references are identical before creating a sequence.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>R1103: The <ph id="ph1">`AcksTo`</ph>, <ph id="ph2">`ReplyTo`</ph> and <ph id="ph3">`Offer/Endpoint`</ph> endpoint references in the <ph id="ph4">`CreateSequence`</ph> message should have the same set of reference parameters.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not enforce, but assumes that reference parameters of the <ph id="ph2">`AcksTo`</ph>, <ph id="ph3">`ReplyTo`</ph> and <ph id="ph4">`Offer/Endpoint`</ph> endpoint references on <ph id="ph5">`CreateSequence`</ph> are identical and uses reference parameters from the <ph id="ph6">`ReplyTo`</ph> endpoint reference for acknowledgements and converse sequence messages.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>B1104: The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator does not generate the optional <ph id="ph2">`Expires`</ph> or <ph id="ph3">`Offer/Expires`</ph> element in the <ph id="ph4">`CreateSequence`</ph> message.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>B1105: When accessing the <ph id="ph1">`CreateSequence`</ph> message, the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder uses the <ph id="ph3">`Expires`</ph> value in the <ph id="ph4">`CreateSequence`</ph> element as the <ph id="ph5">`Expires`</ph> value in the <ph id="ph6">`CreateSequenceResponse`</ph> element.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Otherwise, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder reads and ignores the <ph id="ph2">`Expires`</ph> and <ph id="ph3">`Offer/Expires`</ph> values.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>B1106: When accessing the <ph id="ph1">`CreateSequenceResponse`</ph> message, the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator reads the optional <ph id="ph3">`Expires`</ph> value but does not use it.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>B1107: The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator and Responder always generate the optional <ph id="ph2">`IncompleteSequenceBehavior`</ph> element in the <ph id="ph3">`CreateSequence/Offer`</ph> and <ph id="ph4">`CreateSequenceResponse`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>B1108: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses only the <ph id="ph2">`DiscardFollowingFirstGap`</ph> and <ph id="ph3">`NoDiscard`</ph> values in the <ph id="ph4">`IncompleteSequenceBehavior`</ph> element.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>WS-ReliableMessaging utilizes the <ph id="ph1">`Offer`</ph> mechanism to establish the two converse correlated sequences that form a session.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>B1109: If <ph id="ph1">`CreateSequence`</ph> contains an <ph id="ph2">`Offer`</ph> element, the one way <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder rejects the offered sequence by responding with a <ph id="ph4">`CreateSequenceResponse`</ph> without an <ph id="ph5">`Accept`</ph> element.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>B1110: If a Reliable Messaging Responder rejects the offered sequence, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator faults the newly established sequence.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>B1111: If <ph id="ph1">`CreateSequence`</ph> does not contain an <ph id="ph2">`Offer`</ph> element, the two-way <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder rejects the offered sequence by responding with a <ph id="ph4">`CreateSequenceRefused`</ph> fault.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>R1112: When two converse sequences are established using the <ph id="ph1">`Offer`</ph> mechanism, the <ph id="ph2">`[address]`</ph> property of the <ph id="ph3">`CreateSequenceResponse/Accept/AcksTo`</ph> endpoint reference must match the destination URI of the <ph id="ph4">`CreateSequence`</ph> message byte for byte.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>R1113: When two converse sequences are established using the <ph id="ph1">`Offer`</ph> mechanism, all messages on both sequences flowing from the Initiator to the Responder must be sent to the same endpoint reference.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses WS-ReliableMessaging to establish reliable sessions between the Initiator and the Responder.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WS-ReliableMessaging implementation provides a reliable session for one-way, request-reply and full duplex messaging patterns.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The WS-ReliableMessaging <ph id="ph1">`Offer`</ph> mechanism on <ph id="ph2">`CreateSequence`</ph> and <ph id="ph3">`CreateSequenceResponse`</ph> lets you establish two correlated converse sequences and provides a session protocol that is suitable for all message endpoints.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a security guarantee for such a session including end-to-end protection for session integrity, it is practical to ensure that messages intended for the same party arrive at the same destination.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This also allows "piggy-backing" of sequence acknowledgements on application messages.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Therefore, constraints R1102, R1112, and R1113 apply to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`CreateSequence`</ph> message.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`CreateSequenceResponse`</ph> message.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Closing a Sequence</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the <ph id="ph2">`CloseSequence`</ph> and <ph id="ph3">`CloseSequenceResponse`</ph> messages for a Reliable Messaging source-initiated shutdown.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging destination does not initiate shutdown and the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging source does not support a Reliable Messaging destination-initiated shutdown.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following constraints apply:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>B1201: The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging source always sends a <ph id="ph2">`CloseSequence`</ph> message to shut down the sequence.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>B1202: The Reliable Messaging source waits for acknowledgement of the full range of sequence messages before sending the <ph id="ph1">`CloseSequence`</ph> message.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>B1203: The Reliable Messaging source always includes the optional <ph id="ph1">`LastMsgNumber`</ph> element unless the sequence does not contain messages.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>R1204: The Reliable Messaging destination must not initiate shutdown by sending a <ph id="ph1">`CloseSequence`</ph> message.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>B1205: Upon receiving a <ph id="ph1">`CloseSequence`</ph> message, the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging source considers the sequence incomplete and sends a fault.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`CloseSequence`</ph> message.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Sequence Termination</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> primarily uses the <ph id="ph2">`TerminateSequence/TerminateSequenceResponse`</ph> handshake after completing the <ph id="ph3">`CloseSequence/CloseSequenceResponse`</ph> handshake.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging destination does not initiate termination and the Reliable Messaging source does not support a Reliable Messaging destination-initiated termination.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following constraints apply:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>B1301: The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator only sends the <ph id="ph2">`TerminateSequence`</ph> message after the successful completion of the <ph id="ph3">`CloseSequence/CloseSequenceResponse`</ph> handshake.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>R1302: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> validates that the <ph id="ph2">`LastMsgNumber`</ph> element is consistent across all <ph id="ph3">`CloseSequence`</ph> and <ph id="ph4">`TerminateSequence`</ph> messages for a given sequence.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This means that <ph id="ph1">`LastMsgNumber`</ph> is either not present on all <ph id="ph2">`CloseSequence`</ph> and <ph id="ph3">`TerminateSequence`</ph> messages, or it is present and identical on all <ph id="ph4">`CloseSequence`</ph> and <ph id="ph5">`TerminateSequence`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>B1303: When receiving a <ph id="ph1">`TerminateSequence`</ph> message after the <ph id="ph2">`CloseSequence/CloseSequenceResponse`</ph> handshake, the Reliable Messaging destination responds with a <ph id="ph3">`TerminateSequenceResponse`</ph> message.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Because the Reliable Messaging source has the final acknowledgement before sending the <ph id="ph1">`TerminateSequence`</ph> message, the Reliable Messaging destination knows without doubt that the sequence ends, and reclaims resources immediately.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>B1304: When receiving a <ph id="ph1">`TerminateSequence`</ph> message prior to the <ph id="ph2">`CloseSequence/CloseSequenceResponse`</ph> handshake, the <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging destination responds with a <ph id="ph4">`TerminateSequenceResponse`</ph> message.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the Reliable Messaging destination determines that there are no inconsistencies in the sequence, the Reliable Messaging destination waits for an application destination-specified time before reclaiming resources, to allow the client the chance to receive the final acknowledgement.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Otherwise, the Reliable Messaging destination reclaims resources immediately and indicates to the application destination that the sequence ends with doubt by raising the <ph id="ph1">`Faulted`</ph> event.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`TerminateSequence`</ph> message.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Sequences</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following is a list of constraints that apply to sequences:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>B1401:<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and accesses sequence numbers no higher than <ph id="ph2">`xs:long`</ph>â€™s maximum inclusive value, 9223372036854775807.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`Sequence`</ph> header.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Request Acknowledgement</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the <ph id="ph2">`AckRequested`</ph> header as a keep-alive mechanism.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An example of an <ph id="ph1">`AckRequested`</ph> header.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>SequenceAcknowledgement</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses a "piggy-back" mechanism for sequence acknowledgements provided in WS-Reliable Messaging.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following constraints apply:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>R1601: When two converse sequences are established using the <ph id="ph1">`Offer`</ph> mechanism, the <ph id="ph2">`SequenceAcknowledgement`</ph> header may be included in any application message transmitted to the intended recipient.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The remote endpoint must be able to access a piggybacked <ph id="ph1">`SequenceAcknowledgement`</ph> header.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>B1602: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not generate <ph id="ph2">`SequenceAcknowledgement`</ph> headers that contain <ph id="ph3">`Nack`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> validates that each <ph id="ph2">`Nack`</ph> element contains a sequence number, but otherwise ignores the <ph id="ph3">`Nack`</ph> element and value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`SequenceAcknowledgement`</ph> header.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>WS-ReliableMessaging Faults</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following is a list of constraints that apply to the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implementation of WS-ReliableMessaging faults.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The following constraints apply:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>B1701: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not generate <ph id="ph2">`MessageNumberRollover`</ph> faults.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>B1702: Over SOAP 1.2, when the service endpoint reaches its connection limit and cannot process new connections, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates a nested <ph id="ph2">`CreateSequenceRefused`</ph> fault subcode, <ph id="ph3">`netrm:ConnectionLimitReached`</ph>, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>WS-Addressing Faults</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Because WS-ReliableMessaging uses WS-Addressing, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WS-ReliableMessaging implementation may generate and transmit WS-Addressing faults.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This section covers the WS-Addressing faults that <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> explicitly generates and transmits at the WS-ReliableMessaging layer:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>B1801:<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and transmits the <ph id="ph2">`Message Addressing Header Required`</ph> fault when one of the following is true:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CreateSequence`</ph>, <ph id="ph2">`CloseSequence`</ph> or <ph id="ph3">`TerminateSequence`</ph> message is missing a <ph id="ph4">`MessageId`</ph> header.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CreateSequence`</ph>, <ph id="ph2">`CloseSequence`</ph> or <ph id="ph3">`TerminateSequence`</ph> message is missing a <ph id="ph4">`ReplyTo`</ph> header.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CreateSequenceResponse`</ph>, <ph id="ph2">`CloseSequenceResponse`</ph>, or <ph id="ph3">`TerminateSequenceResponse`</ph> message is missing a <ph id="ph4">`RelatesTo`</ph> header.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>B1802:<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and transmits the <ph id="ph2">`Endpoint Unavailable`</ph> fault to indicate there is no endpoint listening that can process the sequence based on examination of the addressing headers in the <ph id="ph3">`CreateSequence`</ph> message.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Protocol Composition</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Composition with WS-Addressing</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports two versions of WS-Addressing: WS-Addressing 2004/08 [WS-ADDR] and W3C WS-Addressing 1.0 Recommendations [WS-ADDR-CORE] and [WS-ADDR-SOAP].</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>While the WS-ReliableMessaging specification mentions only WS-Addressing 2004/08, it does not restrict the WS-Addressing version to be used.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following is a list of constraints that apply to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>R2101: Both WS-Addressing 2004/08 and WS-Addressing 1.0 can be used with WS-Reliable Messaging.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>R2102: A single version of WS-Addressing must be used throughout a given WS-ReliableMessaging sequence or a pair of converse sequences correlated by using the <ph id="ph1">`Offer`</ph> mechanism.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Composition with SOAP</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports the use of both SOAP 1.1 and SOAP 1.2 with WS-Reliable Messaging.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Composition with WS-Security and WS-SecureConversation</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides protection for WS-ReliableMessaging sequences by using secure Transport (HTTPS), composition with WS-Security, and composition with WS-Secure Conversation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The WS-ReliableMessaging 1.1 protocol, WS-Security 1.1 and WS-Secure Conversation 1.3 protocol should be used together.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following is a list of constraints that apply to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>R2301: To protect the integrity of a WS-ReliableMessaging sequence in addition to the integrity and confidentiality of individual messages, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> requires that WS-Secure Conversation must be used.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>R2302:AWS-Secure Conversation session must be established prior to establishing WS-ReliableMessaging sequence(s).</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>R2303: If the WS-ReliableMessaging sequence lifetime exceeds the WS-Secure Conversation sessionâ€™s lifetime, the <ph id="ph1">`SecurityContextToken`</ph> established by using WS-Secure Conversation must be renewed by using the corresponding WS-Secure Conversation Renewal binding.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>B2304:WS-ReliableMessaging sequence or a pair of correlated converse sequences are always bound to a single WS-SecureConversation session.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>R2305: When composed with WS-Secure Conversation, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> responder requires that the <ph id="ph2">`CreateSequence`</ph> message contain the <ph id="ph3">`wsse:SecurityTokenReference`</ph> element and the <ph id="ph4">`wsrm:UsesSequenceSTR`</ph> header.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`UsesSequenceSTR`</ph> header.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Composition with SSL/TLS sessions</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not support composition with SSL/TLS sessions:</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>B2401: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not generate the <ph id="ph2">`wsrm:UsesSequenceSSL`</ph> header.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>R2402: A Reliable Messaging Initiator must not send a <ph id="ph1">`CreateSequence`</ph> message with a <ph id="ph2">`wsrm:UsesSequenceSSL`</ph> header to a <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Composition with WS-Policy</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports two versions of WS-Policy: WS-Policy 1.2 and WS-Policy 1.5.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>WS-ReliableMessaging WS-Policy Assertion</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses WS-ReliableMessaging WS-Policy Assertion <ph id="ph2">`wsrm:RMAssertion`</ph> to describe endpoints capabilities.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The following is a list of constraints that apply to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>B3001: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> attaches <ph id="ph2">`wsrmn:RMAssertion`</ph> WS-Policy Assertion to <ph id="ph3">`wsdl:binding`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports both attachments to <ph id="ph2">`wsdl:binding`</ph> and <ph id="ph3">`wsdl:port`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>B3002: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> never generates the <ph id="ph2">`wsp:Optional`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>B3003: When accessing the <ph id="ph1">`wsrmp:RMAssertion`</ph> WS-Policy Assertion, <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ignores the <ph id="ph3">`wsp:Optional`</ph> tag and treats the WS-RM policy as mandatory.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>R3004: Because <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not compose with SSL/TLS sessions, <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not accept policy that specifies <ph id="ph3">`wsrmp:SequenceTransportSecurity`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>B3005: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> always generates the <ph id="ph2">`wsrmp:DeliveryAssurance`</ph> element.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>B3006: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> always specifies the <ph id="ph2">`wsrmp:ExactlyOnce`</ph> delivery assurance.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>B3007: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates and reads the following properties of the WS-ReliableMessaging assertion and provides control over them on the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph><ph id="ph3">`ReliableSessionBindingElement`</ph>:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>An example of a <ph id="ph1">`RMAssertion`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Flow Control WS-ReliableMessaging Extension</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses WS-ReliableMessaging extensibility to provide optional additional tighter control over sequence message flow.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Flow control is enabled by setting the <ph id="ph1">`ReliableSessionBindingElement`</ph>â€™s <ph id="ph2">`FlowControlEnabled``boolean`</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The following is a list of constraints that apply to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>B4001: When Reliable Messaging Flow Control is enabled, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates a <ph id="ph2">`netrm:BufferRemaining`</ph> element in the element extensibility of the <ph id="ph3">`SequenceAcknowledgement`</ph> header, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>B4002: Even when Reliable Messaging Flow Control is enabled, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not require a <ph id="ph2">`netrm:BufferRemaining`</ph> element in the <ph id="ph3">`SequenceAcknowledgement`</ph> header.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>B4003: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging Destination uses <ph id="ph2">`netrm:BufferRemaining`</ph> to indicate how many new messages it can buffer.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>B4004:When Reliable Messaging Flow Control is enabled, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Reliable Messaging Source uses the value of <ph id="ph2">`netrm:BufferRemaining`</ph> to throttle message transmission.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>B4005: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates <ph id="ph2">`netrm:BufferRemaining`</ph> integer values between 0 and 4096 inclusive, and reads integer values between 0 and <ph id="ph3">`xs:int`</ph>â€™s <ph id="ph4">`maxInclusive`</ph> value 214748364 inclusive.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Message Exchange Patterns</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>This section describes <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>'s behavior when WS-ReliableMessaging is used for different Message Exchange Patterns.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>For each Message Exchange Pattern the following two deployments scenarios are considered:</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Non-Addressable Initiator: Initiator is behind a firewall; Responder can deliver messages to the Initiator only on HTTP responses.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Addressable Initiator: Initiator and Responder both can be sent HTTP requests; in other words, two converse HTTP connections can be established.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>One-way, Non-addressable Initiator</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Binding</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a one-way message exchange pattern using one sequence over one HTTP channel.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>CreateSequence Exchange</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`CreateSequence`</ph> message with no <ph id="ph3">`Offer`</ph> element on an HTTP request and expects the <ph id="ph4">`CreateSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder creates a sequence and transmits the <ph id="ph2">`CreateSequenceResponse`</ph> message with no <ph id="ph3">`Accept`</ph> element on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>SequenceAcknowledgement</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator processes acknowledgements on the reply of all messages except the <ph id="ph2">`CreateSequence`</ph> message and fault messages.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder always transmits a stand-alone acknowledgement on the HTTP response to all sequence and <ph id="ph2">`AckRequested`</ph> messages.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CloseSequence Exchange</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`CloseSequence`</ph> message on an HTTP request and expects the <ph id="ph3">`CreateSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder transmits the <ph id="ph2">`CloseSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>TerminateSequence Exchange</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`TerminateSequence`</ph> message on an HTTP request and expects the <ph id="ph3">`TerminateSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder transmits the <ph id="ph2">`TerminateSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>One Way, Addressable Initiator</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Binding</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a one-way message exchange pattern using one sequence over one inbound and one outbound HTTP channel.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the HTTP requests to transmit all messages.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>All HTTP responses have an empty body and HTTP 202 status code.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>CreateSequence Exchange</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`CreateSequence`</ph> message with no <ph id="ph3">`Offer`</ph> element on an HTTP request.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder creates a sequence and transmits the <ph id="ph2">`CreateSequenceResponse`</ph> message with no <ph id="ph3">`Accept`</ph> element on an HTTP request.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Duplex, Addressable Initiator</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Binding</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a fully-asynchronous, two-way message exchange pattern using two sequences over one inbound and one outbound HTTP channel.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This message exchange pattern can be mixed with the <ph id="ph1">`Request/Reply`</ph>, <ph id="ph2">`Addressable`</ph> Initiator message exchange pattern in a limited way.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses HTTP requests to transmit all messages.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>All HTTP responses have an empty body and HTTP 202 status code.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>CreateSequence Exchange</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`CreateSequence`</ph> message with an <ph id="ph3">`Offer`</ph> element on an HTTP request.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder ensures that the <ph id="ph2">`CreateSequence`</ph> has an <ph id="ph3">`Offer`</ph> element, then creates a sequence and transmits the <ph id="ph4">`CreateSequenceResponse`</ph> message with an <ph id="ph5">`Accept`</ph> element.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Sequence Lifetime</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> treats the two sequences as one fully-duplex session.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Upon generating a fault that faults one sequence, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> expects the remote endpoint to fault both sequences.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Upon reading a fault that faults one sequence, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> faults both sequences.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can close its outbound sequence and continue to process messages on its inbound sequence.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Conversely, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can process the close of the inbound sequence and continue to send messages on its outbound sequence.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Request-Reply and One-Way, Non-Addressable Initiator</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Binding</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a one-way and request-reply message exchange pattern using two sequences over one HTTP channel.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses HTTP requests to transmit all messages from the Initiator to the Responder and HTTP responses to transmit all messages from the Responder to the Initiator.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>CreateSequence Exchange</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`CreateSequence`</ph> message with an <ph id="ph3">`Offer`</ph> element on an HTTP request and expects the <ph id="ph4">`CreateSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder creates a sequence and transmits the <ph id="ph2">`CreateSequenceResponse`</ph> message with an <ph id="ph3">`Accept`</ph> element on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>One-way Message</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>To complete a one-way message exchange successfully, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a request sequence message on the HTTP request and receives a standalone <ph id="ph2">`SequenceAcknowledgement`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SequenceAcknowledgement`</ph> must acknowledge the message transmitted.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder may reply to the request with an acknowledgement, a fault, or a response with an empty body and HTTP 202 status code.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Two Way Messages</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>To complete a two way message exchange protocol successfully, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a request sequence message on the HTTP request and receives a reply sequence message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The response must carry a <ph id="ph1">`SequenceAcknowledgement`</ph> acknowledging the request sequence message transmitted.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder may reply to the request with an application reply, a fault or a response with an empty body and HTTP 202 status code.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Because of the presence of one-way messages and the timing of application replies, the request sequence messageâ€™s sequence number and the response messageâ€™s sequence number have no correlation.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Retrying Replies</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> relies on HTTP request-reply correlation for two-way message exchange protocol correlation.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Because of this, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator does not stop retrying a request sequence message when the request sequence message is acknowledged but rather when the HTTP response carries a <ph id="ph2">`SequenceAcknowledgement`</ph>, application reply, or fault.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder retries replies on the HTTP response of the request to which the reply is correlated.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>CloseSequence Exchange</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>After receiving all reply sequence messages and acknowledgements for all one way request sequence messages, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`CloseSequence`</ph> message for the request sequence on an HTTP request and expects the <ph id="ph3">`CloseSequenceResponse`</ph> on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Closing the request sequence implicitly closes the reply sequence.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>This means the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator includes the reply sequenceâ€™s Final <ph id="ph2">`SequenceAcknowledgement`</ph> on the <ph id="ph3">`CloseSequence`</ph> message and the reply sequence does not have a <ph id="ph4">`CloseSequence`</ph> exchange.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder ensures all replies are acknowledged and transmits the <ph id="ph2">`CloseSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>TerminateSequence Exchange</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>After receiving the <ph id="ph1">`CloseSequenceResponse`</ph> message, the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph3">`TerminateSequence`</ph> message for the request sequence on an HTTP request and expects the <ph id="ph4">`TerminateSequenceResponse`</ph> on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">`CloseSequence`</ph> exchange, terminating the request sequence implicitly terminates the reply sequence.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>This means the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator includes the reply sequenceâ€™s final <ph id="ph2">`SequenceAcknowledgement`</ph> on the <ph id="ph3">`TerminateSequence`</ph> message and the reply sequence does not have a <ph id="ph4">`TerminateSequence`</ph> exchange.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder transmits the <ph id="ph2">`TerminateSequenceResponse`</ph> message on the HTTP response.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Request/Reply, Addressable Initiator</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Binding</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a request-reply message exchange pattern using two sequences over one inbound and one outbound HTTP channel.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This message exchange pattern can be mixed with the <ph id="ph1">`Duplex, Addressable`</ph> Initiator message exchange pattern in a limited way.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the HTTP requests to transmit all messages.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>All HTTP responses have an empty body and HTTP 202 status code.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>CreateSequence Exchange</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Initiator transmits a <ph id="ph2">`CreateSequence`</ph> message with an <ph id="ph3">`Offer`</ph> element on an HTTP request.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Responder ensures that the <ph id="ph2">`CreateSequence`</ph> has an <ph id="ph3">`Offer`</ph> element then creates a sequence and transmits the <ph id="ph4">`CreateSequenceResponse`</ph> message with an <ph id="ph5">`Accept`</ph> element.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Request/Reply Correlation</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The following applies to all correlated requests and replies:</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures all application request messages bear a <ph id="ph2">`ReplyTo`</ph> endpoint reference and a <ph id="ph3">`MessageId`</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> applies the local endpoint reference as each application request messageâ€™s <ph id="ph2">`ReplyTo`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The local endpoint reference is the <ph id="ph1">`CreateSequence`</ph> messageâ€™s <ph id="ph2">`ReplyTo`</ph> for the Initiator and the <ph id="ph3">`CreateSequence`</ph> messageâ€™s <ph id="ph4">`To`</ph> for the Responder.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures that incoming request messages bear a <ph id="ph2">`MessageId`</ph> and a <ph id="ph3">`ReplyTo`</ph>.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures the <ph id="ph2">`ReplyTo`</ph> endpoint referenceâ€™s URI of all application request messages match the local endpoint reference as defined earlier.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ensures that all replies bear the correct <ph id="ph2">`RelatesTo`</ph> and <ph id="ph3">`To`</ph> headers following <ph id="ph4">`wsa`</ph> request/reply correlation rules.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>