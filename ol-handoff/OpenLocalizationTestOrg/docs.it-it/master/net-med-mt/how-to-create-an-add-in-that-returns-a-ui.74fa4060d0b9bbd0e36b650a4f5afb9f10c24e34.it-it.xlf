<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-create-an-add-in-that-returns-a-ui.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5856b87c96b5f41161357948f692a6acd1733a47</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\how-to-create-an-add-in-that-returns-a-ui.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d66d0c97cfdbd3be520c4b9fdb36b00b02e95c40</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89d7b53e4ef002cac899409835e8dd2621ed7179</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Create an Add-In That Returns a UI | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create an Add-In That Returns a UI</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to create an add-in that returns a              <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph><ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> to a host              <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> standalone application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The add-in returns a              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that is a              <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> user control.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The content of the user control is a single button that, when clicked, displays a message box.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> standalone application hosts the add-in and displays the user control (returned by the add-in) as the content of the main application window.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Prerequisites<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This example highlights the              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extensions to the              <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model that enable this scenario, and assumes the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Knowledge of the                      <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model, including pipeline, add-in, and host development.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with these concepts, see                      <bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a tutorial that demonstrates the implementation of a pipeline, an add-in, and a host application, see                      <bpt id="p1">[</bpt>Walkthrough: Creating an Extensible Application<ept id="p1">](../../../../docs/framework/add-ins/walkthrough-create-extensible-app.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Knowledge of the                      <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extensions to the                      <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model, which can be found here:                      <bpt id="p1">[</bpt>WPF Add-Ins Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-add-ins-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create an add-in that returns a                      <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph><ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> requires specific code for each pipeline segment, the add-in, and the host application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Implementing the Contract Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A method must be defined by the contract for returning a                              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, and its return value must be of type                              <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is demonstrated by the                              <ph id="ph1">`GetAddInUI`</ph> method of the                              <ph id="ph2">`IWPFAddInContract`</ph> contract in the following code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Implementing the Add-In View Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the add-in implements the                              <ph id="ph1">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph> it provides as subclasses of                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, the method on the add-in view that correlates to                              <ph id="ph3">`IWPFAddInView.GetAddInUI`</ph> must return a value of type                              <ph id="ph4">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code shows the add-in view of the contract, implemented as an interface.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Implementing the Add-In-Side Adapter Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The contract method returns an                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, but the add-in returns a                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> (as specified by the add-in view).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Consequently, the                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> must be converted to an                              <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> before crossing the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This work is performed by the add-in-side adapter by calling                              <ph id="ph1">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Implementing the Host View Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because the host application will display a                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, the method on the host view that correlates to                              <ph id="ph2">`IWPFAddInHostView.GetAddInUI`</ph> must return a value of type                              <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code shows the host view of the contract, implemented as an interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Implementing the Host-Side Adapter Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The contract method returns an                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, but the host application expects a                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> (as specified by the host view).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Consequently, the                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> must be converted to a                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> after crossing the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This work is performed by the host-side adapter by calling                              <ph id="ph1">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Implementing the Add-In</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With the add-in-side adapter and add-in view created, the add-in (                             <ph id="ph1">`WPFAddIn1.AddIn`</ph>) must implement the                              <ph id="ph2">`IWPFAddInView.GetAddInUI`</ph> method to return a                              <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> object (a                              <ph id="ph4">&lt;xref:System.Windows.Controls.UserControl&gt;</ph> in this example).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The implementation of the                              <ph id="ph1">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>,                              <ph id="ph2">`AddInUI`</ph>, is shown by the following code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The implementation of the                              <ph id="ph1">`IWPFAddInView.GetAddInUI`</ph> by the add-in simply needs to return a new instance of                              <ph id="ph2">`AddInUI`</ph>, as shown by the following code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Implementing the Host Application</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>With the host-side adapter and host view created, the host application can use the                              <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model to open the pipeline, acquire a host view of the add-in, and call the                              <ph id="ph2">`IWPFAddInHostView.GetAddInUI`</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These steps are shown in the following code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Add-Ins Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-add-ins-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>