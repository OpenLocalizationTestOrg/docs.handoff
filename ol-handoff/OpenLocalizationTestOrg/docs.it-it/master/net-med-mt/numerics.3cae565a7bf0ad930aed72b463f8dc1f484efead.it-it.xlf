<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9b62cffb136abde67ab6952e7849e5681ec99a24</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\numerics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c629ea1b6ce690e5abeffe4bd9f4ea542759f52</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2548091e91dbbc73ff34623cb1f71afaeaa8a71</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Numerics in the .NET Framework | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Numerics in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework supports the standard numeric integral and floating-point primitives, as well as <ph id="ph1">&lt;xref:System.Numerics.BigInteger&gt;</ph>, an integral type with no theoretical upper or lower bound, <ph id="ph2">&lt;xref:System.Numerics.Complex&gt;</ph>, a type that represents complex numbers, and a set of SIMD-enabled vector types in the <ph id="ph3">&lt;xref:System.Numerics&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In addition, System.Numerics.Vectors, the SIMD-enabled library of vectory types, was released as a NuGet package.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Integral types</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The .NET Framework supports both signed and unsigned integers ranging from one byte to eight bytes in length.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following table lists the integral types and their size, indicates whether they are signed or unsigned, and documents their range.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All integers are value types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Signed/Unsigned</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Size (bytes)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Minimum value</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Maximum Value</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>255</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>-32,768</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>32,767</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>-2,147,483,648</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>2,147,483,647</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>-9,223,372,036,854,775,808</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>9,223,372,036,854,775,807</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Signed</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>-128</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>127</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>65,535</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>4,294,967,295</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Unsigned</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>18,446,744,073,709,551,615</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Each integral type supports a standard set of arithmetic, comparison, equality, explicit conversion, and implicit conversion operators.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each integer also includes methods to perform equality comparisons and relative comparisons, to convert the string representation of a number to that integer, and to convert an integer to its string representation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Some additional mathematical operations beyond those handled by the standard operators, such as rounding and identifying the smaller or larger value of two integers, are available from the <ph id="ph1">&lt;xref:System.Math&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can also work with the individual bits in an integer value by using the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Note that the unsigned integral types are not CLS-compliant.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Language Independence and Language-Independent Components<ept id="p1">](../../docs/standard/language-independence-and-language-independent-components.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Floating-point types</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The .NET Framework includes three primitive floating point types, which are listed in the following table.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Size (in bytes)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Minimum</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Maximum</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>-1.79769313486232e308</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>1.79769313486232e308</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-3.402823e38</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>3.402823e38</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>16</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>-79,228,162,514,264,337,593,543,950,335</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>79,228,162,514,264,337,593,543,950,335</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Each floating-point type supports a standard set of arithmetic, comparison, equality, explicit conversion, and implicit conversion operators.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Each also includes methods to perform equality comparisons and relative comparisons, to convert the string representation of a floating-point number, and to convert a floating-point number to its string representation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Some additional mathematical, algebraic, and trigonometric operations are available from the <ph id="ph1">&lt;xref:System.Math&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can also work with the individual bits in <ph id="ph1">&lt;xref:System.Double&gt;</ph> and <ph id="ph2">&lt;xref:System.Single&gt;</ph> values by using the <ph id="ph3">&lt;xref:System.BitConverter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Decimal?displayProperty=fullName&gt;</ph> structure has its own methods, <ph id="ph2">&lt;xref:System.Decimal.GetBits%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Decimal.%23ctor%28System.Int32%5B%5D%29?displayProperty=fullName&gt;</ph>, for working with a decimal value's individual bits, as well as its own set of methods for performing some additional mathematical operations.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> and <ph id="ph2">&lt;xref:System.Single&gt;</ph> types are intended to be used for values that by their nature are imprecise (such as the distance between two stars in the solar system) and for applications in which a high degree of precision and small rounding error is not required.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You should use the <ph id="ph1">&lt;xref:System.Decimal?displayProperty=fullName&gt;</ph> type for cases in which greater precision is required and rounding error is undesirable,</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>BigInteger</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Numerics.BigInteger?displayProperty=fullName&gt;</ph> is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The methods of the <ph id="ph1">&lt;xref:System.Numerics.BigInteger&gt;</ph> type closely parallel those of the other integral types.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Complex</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Complex&gt;</ph> type represents a complex number, that is, a number with a real number part and an imaginary number part.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>It supports a standard set of arithmetic, comparison, equality, explicit conversion, and implicit conversion operators, as well as mathematical, algebraic, and trigonometric methods.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>SIMD-enabled vector types</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics&gt;</ph> namespace includes a set of SIMD-enabled vector types for the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>SIMD (Single Instruction Multiple Data operations) allows some operations to be parallelized at the hardware level, which results in huge performance improvements in mathematical, scientific, and graphics apps that perform computations over vectors.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The SIMD-enabled vector types in the .NET Framework include the following: .</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In addition, System.Numerics.Vectors includes a Plane type and a Quaternion type.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Numerics.Vector2&gt;</ph>,  <ph id="ph2">&lt;xref:System.Numerics.Vector3&gt;</ph>, and  <ph id="ph3">&lt;xref:System.Numerics.Vector4&gt;</ph> types, which are 2-, 3-, and 4-dimensional vectors of type <ph id="ph4">&lt;xref:System.Single&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Two matrix types, <ph id="ph1">&lt;xref:System.Numerics.Matrix3x2&gt;</ph>, which represents a 3x2 matrix; and <ph id="ph2">&lt;xref:System.Numerics.Matrix4x4&gt;</ph>, which represents a 4x4 matrix.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Plane&gt;</ph> and <ph id="ph2">&lt;xref:System.Numerics.Quaternion&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The SimD-enabled vector types are implemented in IL, which allows them to be used on non-SimD-enabled hardware and JIT compilers.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To take advantage of SIMD instructions, your 64-bit apps must be compiled by the new 64-bit JIT Compiler for managed code, which is included with the .NET Framework 4.6; it adds SIMD support when targeting x64 processors.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>SIMD can also be downloaded as a <bpt id="p1">[</bpt>NuGet package<ept id="p1">](http://www.nuget.org/packages/System.Numerics.Vectors)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The NuGET package also includes a generic <ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> structure that allows you to create a vector of any primitive numeric type.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>(The primitive numeric types include all numeric types in the <ph id="ph1">&lt;xref:System&gt;</ph> namespace except for <ph id="ph2">&lt;xref:System.Decimal&gt;</ph>.) In addition, the <ph id="ph3">&lt;xref:System.Numerics.Vector%601&gt;</ph> structure provides a library of convenience methods that you can call when working with vectors.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Essentials<ept id="p1">](../../docs/standard/application-essentials.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>