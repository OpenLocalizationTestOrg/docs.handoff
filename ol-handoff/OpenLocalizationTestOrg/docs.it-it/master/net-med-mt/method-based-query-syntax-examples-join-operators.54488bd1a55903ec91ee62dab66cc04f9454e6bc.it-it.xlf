<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="method-based-query-syntax-examples-join-operators.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f118bd55afd974f922285e32b9efd61a1d5e841</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\method-based-query-syntax-examples-join-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffebaaf802a3f816d48690c865cf9a5c3b7fc940</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c693a1cb34e38bb61f75b2795d699cbc972a3b56</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Method-Based Query Syntax Examples: Join Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Method-Based Query Syntax Examples: Join Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The examples in this topic demonstrate how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> methods to query the <bpt id="p1">[</bpt>AdventureWorks Sales Model<ept id="p1">](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832)</ept> using method-based query syntax.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The AdventureWorks Sales Model used in these examples is built from the Contact, Address, Product, SalesOrderHeader, and SalesOrderDetail tables in the AdventureWorks sample database.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The examples in this topic use the following <ph id="ph1">`using`</ph><ph id="ph2">/</ph><ph id="ph3">`Imports`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>GroupJoin</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example performs a <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> over the SalesOrderHeader and SalesOrderDetail tables to find the number of orders per customer.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A group join is the equivalent of a left outer join, which returns each element of the first (left) data source, even if no correlated elements are in the other data source.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example performs a <ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph> over the Contact and SalesOrderHeader tables to find the number of orders per contact.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The order count and IDs for each contact are displayed.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Join</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example performs a join over the Contact and SalesOrderHeader tables.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example performs a join over the Contact and SalesOrderHeader tables, grouping the results by contact ID.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queries in LINQ to Entities<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/queries-in-linq-to-entities.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>