<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56b6ff2e22c91545c865f34f5d840055228b43d4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\performance\writing-large-responsive-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">854a1a44f4c46f9ef6da26ad999829dace54042f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca2943a493d9efac8d5fc57c48f545d17a4dbbe1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing Large, Responsive .NET Framework Apps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing Large, Responsive .NET Framework Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article provides tips for improving the performance of large .NET Framework apps, or apps that process a large amount of data such as files or databases.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These tips come from rewriting the C# and Visual Basic compilers in managed code, and this article includes several real examples from the C# compiler.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Framework is highly productive for building apps.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Powerful and safe languages and a rich collection of libraries make app building highly fruitful.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, with great productivity comes responsibility.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You should use all the power of the .NET Framework, but be prepared to tune your code’s performance when needed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Why the new compiler performance applies to your app</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The .NET Compiler Platform ("Roslyn") team rewrote the C# and Visual Basic compilers in managed code to provide new APIs for modeling and analyzing code, building tools, and enabling much richer, code-aware experiences in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Rewriting the compilers and building Visual Studio experiences on the new compilers revealed useful performance insights that are applicable to any large .NET Framework app or any app that processes a lot of data.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You don't need to know about compilers to take advantage of the insights and examples from the C# compiler.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Visual Studio uses the compiler APIs to build all the IntelliSense features that users love, such as colorization of identifiers and keywords, syntax completion lists, squiggles for errors, parameter tips, code issues, and code actions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Visual Studio provides this help while developers are typing and changing their code, and Visual Studio must remain responsive while the compiler continually models the code developers edit.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When your end users interact with your app, they expect it to be responsive.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Typing or command handling should never be blocked.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Help should pop up quickly or give up if the user continues typing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Your app should avoid blocking the UI thread with long computations that make the app feel sluggish.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you want to know more about the new compilers, visit the <bpt id="p1">[</bpt>.NET Compiler Platform ("Roslyn") open source project<ept id="p1">](http://roslyn.codeplex.com/)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Just the Facts</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Consider these facts when tuning performance and creating responsive .NET Framework apps.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Fact 1: Don’t prematurely optimize</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Writing code that is more complex than it needs to be incurs maintenance, debugging, and polishing costs.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Experienced programmers have an intuitive grasp of how to solve coding problems and write more efficient code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, they sometimes prematurely optimize their code.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, they use a hash table when a simple array would suffice, or use complicated caching that may leak memory instead of simply recomputing values.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Even if you’re an experience programmer, you should test for performance and analyze your code when you find issues.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Fact 2: If you’re not measuring, you’re guessing</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Profiles and measurements don’t lie.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Profiles show you whether the CPU is fully loaded or whether you’re blocked on disk I/O.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Profiles tell you what kind and how much memory you’re allocating and whether your CPU is spending a lot of time in <bpt id="p1">[</bpt>garbage collection<ept id="p1">](../../../docs/standard/garbage-collection/index.md)</ept> (GC).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You should set performance goals for key customer experiences or scenarios in your app and write tests to measure performance.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Investigate failing tests by applying the scientific method: use profiles to guide you, hypothesize what the issue might be, and test your hypothesis with an experiment or code change.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Establish baseline performance measurements over time with regular testing, so you can isolate changes that cause regressions in performance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By approaching performance work in a rigorous way, you’ll avoid wasting time with code updates you don’t need.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Fact 3: Good tools make all the difference</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Good tools let you drill quickly into the biggest performance issues (CPU, memory, or disk) and help you locate the code that causes those bottlenecks.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Microsoft ships a variety of performance tools such as <bpt id="p1">[</bpt>Visual Studio Profiler<ept id="p1">](/visualstudio/profiling/beginners-guide-to-performance-profiling)</ept>, <bpt id="p2">[</bpt>Windows Phone Analysis Tool<ept id="p2">](http://msdn.microsoft.com/en-us/e67e3199-ea43-4d14-ab7e-f7f19266253f)</ept>, and <bpt id="p3">[</bpt>PerfView<ept id="p3">](http://www.microsoft.com/download/details.aspx?id=28567)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>PerfView is a free and amazingly powerful tool that helps you focus on deep issues such as disk I/O, GC events, and memory.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can capture performance-related <bpt id="p1">[</bpt>Event Tracing for Windows<ept id="p1">](../../../docs/framework/wcf/samples/etw-tracing.md)</ept> (ETW) events and view easily per app, per process, per stack, and per thread information.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>PerfView shows you how much and what kind of memory your app allocates, and which functions or call stacks contribute how much to the memory allocations.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For details, see the rich help topics, demos, and videos included with the tool (such as the <bpt id="p1">[</bpt>PerfView tutorials<ept id="p1">](http://channel9.msdn.com/Series/PerfView-Tutorial)</ept> on Channel 9).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Fact 4: It’s all about allocations</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You might think that building a responsive .NET Framework app is all about algorithms, such as using quick sort instead of bubble sort, but that's not the case.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The biggest factor in building a responsive app is allocating memory, especially when your app is very large or processes large amounts of data.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Almost all the work to build responsive IDE experiences with the new compiler APIs involved avoiding allocations and managing caching strategies.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>PerfView traces show that the performance of the new C# and Visual Basic compilers is rarely CPU bound.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The compilers can be I/O bound when reading hundreds of thousands or millions of lines of code, reading metadata, or emitting generated code.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The UI thread delays are nearly all due to garbage collection.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The .NET Framework GC is highly tuned for performance and does much of its work concurrently while app code executes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, a single allocation can trigger an expensive <bpt id="p1">[</bpt>gen2<ept id="p1">](../../../docs/standard/garbage-collection/fundamentals.md)</ept> collection, stopping all threads.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Common allocations and examples</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The example expressions in this section have hidden allocations that appear small.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>However, if a large app executes the expressions enough times, they can causes hundreds of megabytes, even gigabytes, of allocations.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, one-minute tests that simulated a developer’s typing in the editor allocated gigabytes of memory and led the performance team to focus on typing scenarios.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Boxing</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boxing<ept id="p1">](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md)</ept> occurs when value types that normally live on the stack or in data structures are wrapped in an object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>That is, you allocate an object to hold the data, and then return a pointer to the object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The .NET Framework sometimes boxes values due to the signature of a method or the type of a storage location.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Wrapping a value type in an object causes memory allocation.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Many boxing operations can contribute megabytes or gigabytes of allocations to your app, which means that your app will cause more GCs.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The .NET Framework and the language compilers avoid boxing when possible, but sometimes it happens when you least expect it.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To see boxing in PerfView, open a trace and look at GC Heap Alloc Stacks under your app’s process name (remember, PerfView reports on all processes).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you see types like <ph id="ph1">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Char?displayProperty=fullName&gt;</ph> under allocations, you are boxing value types.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Choosing one of these types will show the stacks and functions in which they are boxed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example 1: string methods and value type arguments<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This sample code illustrates potentially unnecessary and excessive boxing:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This code provides logging functionality, so an app may call the <ph id="ph1">`Log`</ph> function frequently, maybe millions of times.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The problem is that the call to <ph id="ph1">`string.Format`</ph> resolves to the <ph id="ph2">&lt;xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29&gt;</ph> overload.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This overload requires the .NET Framework to box the <ph id="ph1">`int`</ph> values into objects to pass them to this method call.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A partial fix is to call <ph id="ph1">`id.ToString()`</ph> and <ph id="ph2">`size.ToString()`</ph> and pass all strings (which are objects) to the <ph id="ph3">`string.Format`</ph> call.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`ToString()`</ph> does allocate a string, but that allocation will happen anyway inside <ph id="ph2">`string.Format`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You might consider that this basic call to <ph id="ph1">`string.Format`</ph> is just string concatenation, so you might write this code instead:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>However, that line of code introduces a boxing allocation because it compiles to <ph id="ph1">&lt;xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The .NET Framework must box the character literal to invoke <ph id="ph1">`Concat`</ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fix for example 1<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The complete fix is simple.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Just replace the character literal with a string literal, which incurs no boxing because strings are already objects:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example 2: enum boxing<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This example was responsible for a huge amount of allocation in the new C# and Visual Basic compilers due to frequent use of enumeration types, especially in dictionary lookup operations.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This problem is very subtle.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>PerfView would report this as <ph id="ph1">&lt;xref:System.Enum.GetHashCode&gt;</ph> boxing because the method boxes the underlying representation of the enumeration type, for implementation reasons.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If you look closely in PerfView, you may see two boxing allocations for each call to <ph id="ph1">&lt;xref:System.Enum.GetHashCode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The compiler inserts one, and the .NET Framework inserts the other.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fix for example 2<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You can easily avoid both allocations by casting to the underlying representation before calling <ph id="ph1">&lt;xref:System.Enum.GetHashCode&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Another common source of boxing on enumeration types is the <ph id="ph1">&lt;xref:System.Enum.HasFlag%28System.Enum%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The argument passed to <ph id="ph1">&lt;xref:System.Enum.HasFlag%28System.Enum%29&gt;</ph> has to be boxed.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In most cases, replacing calls to <ph id="ph1">&lt;xref:System.Enum.HasFlag%28System.Enum%29?displayProperty=fullName&gt;</ph> with a bitwise test is simpler and allocation-free.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Keep the first performance fact in mind (that is, don’t prematurely optimize) and don’t start rewriting all your code in this way.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Be aware of these boxing costs, but change your code only after profiling your app and finding the hot spots.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Strings</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>String manipulations are some of the biggest culprits for allocations, and they often show up in PerfView in the top five allocations.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Programs use strings for serialization, JSON, and REST APIs.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You can use strings as programmatic constants for interoperating with systems when you can’t use enumeration types.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When your profiling shows that strings are highly affecting performance, look for calls to <ph id="ph1">&lt;xref:System.String&gt;</ph> methods such as <ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.String.Concat%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.String.Split%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.String.Join%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.String.Substring%2A&gt;</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> to avoid the cost of creating one string from many pieces helps, but even allocating the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object might become a bottleneck that you need to manage.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example 3: string operations<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The C# compiler had this code that writes the text of a formatted XML doc comment:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can see that this code does a lot of string manipulation.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The code uses library methods to split lines into separate strings, to trim white space, to check whether the argument <ph id="ph1">`text`</ph> is an XML documentation comment, and to extract substrings from lines.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>On the first line inside <ph id="ph1">`WriteFormattedDocComment`</ph>, the <ph id="ph2">`text.Split`</ph> call allocates a new three-element array as the argument every time it’s called.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The compiler has to emit code to allocate this array each time.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>That’s because the compiler doesn’t know if <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> stores the array somewhere where the array might be modified by other code, which would affect later calls to <ph id="ph2">`WriteFormattedDocComment`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">&lt;xref:System.String.Split%2A&gt;</ph> also allocates a string for every line in <ph id="ph2">`text`</ph> and allocates other memory to perform the operation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WriteFormattedDocComment`</ph> has three calls to the <ph id="ph2">&lt;xref:System.String.TrimStart%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Two are in inner loops that duplicate work and allocations.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To make matters worse, calling the <ph id="ph1">&lt;xref:System.String.TrimStart%2A&gt;</ph> method with no arguments allocates an empty array (for the <ph id="ph2">`params`</ph> parameter) in addition to the string result.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Lastly, there is a call to the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method, which usually allocates a new string.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fix for example 3<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Unlike the earlier examples, small edits cannot fix these allocations.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You need to step back, look at the problem, and approach it differently.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For example, you'll notice that the argument to <ph id="ph1">`WriteFormattedDocComment()`</ph> is a string that has all the information that the method needs, so the code could do more indexing instead of allocating many partial strings.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The compiler’s performance team tackled all these allocations with code like this:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The first version of <ph id="ph1">`WriteFormattedDocComment()`</ph> allocated an array, several substrings, and a trimmed substring along with an empty <ph id="ph2">`params`</ph> array.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>It also checked for <ph id="ph1">`"///"`</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The revised code uses only indexing and allocates nothing.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It finds the first character that is not white space, and then checks character by character to see if the string starts with <ph id="ph1">`"///"`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The new code uses <ph id="ph1">`IndexOfFirstNonWhiteSpaceChar`</ph> instead of <ph id="ph2">&lt;xref:System.String.TrimStart%2A&gt;</ph> to return the first index (after a specified start index) where a non-whitespace character occurs.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The fix is not complete, but you can see how to apply similar fixes for a complete solution.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>By applying this approach throughout the code, you can remove all allocations in <ph id="ph1">`WriteFormattedDocComment()`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example 4: StringBuilder<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This example uses a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following function generates a full type name for generic types:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The focus is on the line that creates a new <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The code causes an allocation for <ph id="ph1">`sb.ToString()`</ph> and internal allocations within the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> implementation, but you cannot control those allocations if you want the string result.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fix for example 4<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To fix the <ph id="ph1">`StringBuilder`</ph> object allocation, cache the  object.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Even caching a single instance that might get thrown away can improve performance significantly.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This is the function’s new implementation, omitting all the code except for the new first and last lines:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The key parts are the new <ph id="ph1">`AcquireBuilder()`</ph> and <ph id="ph2">`GetStringAndReleaseBuilder()`</ph> functions:</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Because the new compilers use threading, these implementations use a thread-static field (<ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute) to cache the <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph>, and you likely can forgo the <ph id="ph3">`ThreadStatic`</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The thread-static field holds a unique value for each thread that executes this code.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AcquireBuilder()`</ph> returns the cached <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> instance if there is one, after clearing it and setting the field or cache to null.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`AcquireBuilder()`</ph> creates a new instance and returns it, leaving the field or cache set to null.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When you’re done with <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> , you call <ph id="ph2">`GetStringAndReleaseBuilder()`</ph> to get the string result, save the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> instance in the field or cache, and then return the result.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>It is possible for execution to re-enter this code and to create multiple <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> objects (although that rarely happens).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The code saves only the last released <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> instance for later use.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This simple caching strategy significantly reduced allocations in the new compilers.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Parts of the .NET Framework and MSBuild ("MSBuild") use a similar technique to improve performance.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This simple caching strategy adheres to good cache design because it has a size cap.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>However, there is more code now than in the original, which means more maintenance costs.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You should adopt the caching strategy only if you’ve found a performance problem, and PerfView has shown that <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> allocations are a significant contributor.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>LINQ and lambdas</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Using Language-Integrated Query (LINQ) and lambda expressions is a great example of using productive features that you might later find you need to rewrite if the code becomes a significant impact on performance.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example 5: Lambdas, List<ph id="ph1">\&lt;</ph>T&gt;, and IEnumerable<ph id="ph2">\&lt;</ph>T&gt;<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This example uses <bpt id="p1">[</bpt>LINQ and functional style code<ept id="p1">](http://blogs.msdn.com/b/charlie/archive/2007/01/26/anders-hejlsberg-on-linq-and-functional-programming.aspx)</ept> to find a symbol in the compiler’s model, given a name string:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The new compiler and the IDE experiences built on it call <ph id="ph1">`FindMatchingSymbol()`</ph> very frequently, and there are several hidden allocations in this function’s single line of code.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To examine those allocations, first split the function’s single line of code into two lines:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In the first line, the <bpt id="p1">[</bpt>lambda expression<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept><ph id="ph1">`s =&gt; s.Name == name`</ph><bpt id="p2">[</bpt>closes over<ept id="p2">](http://blogs.msdn.com/b/ericlippert/archive/2003/09/17/53028.aspx)</ept> the local variable <ph id="ph2">`name`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This means that in addition to allocating an object for the <bpt id="p1">[</bpt>delegate<ept id="p1">](~/docs/csharp/language-reference/keywords/delegate.md)</ept> that <ph id="ph1">`predicate`</ph> holds, the code allocates a static class to hold the environment that captures the value of <ph id="ph2">`name`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The compiler generates code like the following:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The two <ph id="ph1">`new`</ph> allocations (one for the environment class and one for the delegate) are explicit now.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Now look at the call to <ph id="ph1">`FirstOrDefault`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This extension method on the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName&gt;</ph> type incurs an allocation too.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`FirstOrDefault`</ph> takes an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> object as its first argument, you can expand the call to the following code (simplified a bit for discussion):</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`symbols`</ph> variable has type <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> collection type implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and cleverly defines an enumerator (<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> interface) that <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> implements with a <ph id="ph5">`struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Using a structure instead of a class means that you usually avoid any heap allocations, which, in turn, can affect garbage collection performance.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Enumerators are typically used with the language’s <ph id="ph1">`foreach`</ph> loop, which uses the enumerator structure as it is returned on the call stack.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Incrementing the call stack pointer to make room for an object does not affect GC the way a heap allocation does.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In the case of the expanded <ph id="ph1">`FirstOrDefault`</ph> call, the code needs to call <ph id="ph2">`GetEnumerator()`</ph> on an <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Assigning <ph id="ph1">`symbols`</ph> to the <ph id="ph2">`enumerable`</ph> variable of type <ph id="ph3">`IEnumerable&lt;Symbol&gt;`</ph> loses the information that the actual object is a <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>This means that when the code fetches the enumerator with <ph id="ph1">`enumerable.GetEnumerator()`</ph>, the .NET Framework has to box the returned structure to assign it to the <ph id="ph2">`enumerator`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fix for example 5<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The fix is to rewrite <ph id="ph1">`FindMatchingSymbol`</ph> as follows, replacing its single line of code with six lines of code that are still concise, easy to read and understand, and easy to maintain:</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>This code doesn’t use LINQ extension methods, lambdas, or enumerators, and it incurs no allocations.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>There are no allocations because the compiler can see that the <ph id="ph1">`symbols`</ph> collection is a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> and can bind the resulting enumerator (a structure) to a local variable with the right type to avoid boxing.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The original version of this function was a great example of the expressive power of C# and the productivity of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>This new and more efficient version preserves those qualities without adding any complex code to maintain.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Async method caching</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The next example shows a common problem when you try to use cached results in an <bpt id="p1">[</bpt>async<ept id="p1">](http://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7)</ept> method.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Example 6: caching in async methods<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The Visual Studio IDE features built on the new C# and Visual Basic compilers frequently fetch syntax trees, and the compilers use async when doing so to keep Visual Studio responsive.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Here’s the first version of the code you might write to get a syntax tree:</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can see that calling <ph id="ph1">`GetSyntaxTreeAsync()`</ph> instantiates a <ph id="ph2">`Parser`</ph>, parses the code, and then returns a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object, <ph id="ph4">`Task&lt;SyntaxTree&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The expensive part is allocating the <ph id="ph1">`Parser`</ph> instance and parsing the code.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The function returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> so that callers can await the parsing work and free the UI thread to be responsive to user input.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Several Visual Studio features might try to get the same syntax tree, so you might write the following code to cache the parsing result to save time and allocations.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>However, this code incurs an allocation:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>You see that the new code with caching has a <ph id="ph1">`SyntaxTree`</ph> field named <ph id="ph2">`cachedResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>When this field is null, <ph id="ph1">`GetSyntaxTreeAsync()`</ph> does the work and saves the result in the cache.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetSyntaxTreeAsync()`</ph> returns the <ph id="ph2">`SyntaxTree`</ph> object.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The problem is that when you have an <ph id="ph1">`async`</ph> function of type <ph id="ph2">`Task&lt;SyntaxTree&gt;`</ph>, and you return a value of type <ph id="ph3">`SyntaxTree`</ph>, the compiler emits code to allocate a Task to hold the result (by using <ph id="ph4">`Task&lt;SyntaxTree&gt;.FromResult()`</ph>).</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The Task is marked as completed, and the result is immediately available.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In the code for the new compilers, <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects that were already completed occurred so often that fixing these allocations improved responsiveness noticeably.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fix for example 6<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>To remove the completed <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>allocation, you can cache the Task object with the completed result:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This code changes the type of <ph id="ph1">`cachedResult`</ph> to <ph id="ph2">`Task&lt;SyntaxTree&gt;`</ph> and employs an <ph id="ph3">`async`</ph> helper function that holds the original code from <ph id="ph4">`GetSyntaxTreeAsync()`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetSyntaxTreeAsync()`</ph> now uses the <bpt id="p1">[</bpt>null coalescing operator<ept id="p1">](~/docs/csharp/language-reference/operators/null-conditional-operator.md)</ept> to return <ph id="ph2">`cachedResult`</ph> if it isn't null.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`cachedResult`</ph> is null, then <ph id="ph2">`GetSyntaxTreeAsync()`</ph> calls <ph id="ph3">`GetSyntaxTreeUncachedAsync()`</ph> and caches the result.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`GetSyntaxTreeAsync()`</ph> doesn’t await the call to <ph id="ph2">`GetSyntaxTreeUncachedAsync()`</ph> as the code would normally.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Not using await means that when <ph id="ph1">`GetSyntaxTreeUncachedAsync()`</ph> returns its <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object, <ph id="ph3">`GetSyntaxTreeAsync()`</ph> immediately returns the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Now, the cached result is a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, so there are no allocations to return the cached result.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Additional considerations</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Here are a few more points about potential problems in large apps or apps that process a lot of data.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dictionaries<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Dictionaries are used ubiquitously in many programs, and though dictionaries are very convenient and inherently efficient.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>However, they’re often used inappropriately.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In Visual Studio and the new compilers, analysis shows that many of the dictionaries contained a single element or were empty.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>An empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> has ten fields and occupies 48 bytes on the heap on an x86 machine.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Dictionaries are great when you need a mapping or associative data structure with constant-time lookup.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>However, when you have only a few elements, you waste a lot of space by using a dictionary.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Instead, for example, you could iteratively look through a <ph id="ph1">`List&lt;KeyValuePair\&lt;K,V&gt;&gt;`</ph>, just as fast.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>If you use a dictionary only to load it with data and then read from it (a very common pattern), using a sorted array with an N(log(N)) lookup might be nearly as fast, depending on the number of elements you're using.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Classes vs. structures<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>In a way, classes and structures provide a classic space/time tradeoff for tuning your apps.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Classes incur 12 bytes of overhead on an x86 machine even if they have no fields, but they are inexpensive to pass around because it only takes a pointer to refer to a class instance.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Structures incur no heap allocations if they aren’t boxed, but when you pass large structures as function arguments or return values, it takes CPU time to atomically copy all the data members of the structures.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Watch out for repeated calls to properties that return structures, and cache the property’s value in a local variable to avoid excessive data copying.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caches<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A common performance trick is to cache results.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>However, a cache without a size cap or disposal policy can be a memory leak.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>When processing large amounts of data, if you hold on to a lot of memory in caches, you can cause garbage collection to override the benefits of your cached lookups.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>In this article, we discussed how you should be aware of performance bottleneck symptoms that can affect your app's responsiveness, especially for large systems or systems that process a large amount of data.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Common culprits include boxing, string manipulations, LINQ and lambda, caching in async methods, caching without a size limit or disposal policy, inappropriate use of dictionaries, and passing around structures.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Keep in mind the four facts for tuning your apps:</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Don’t prematurely optimize – be productive and tune your app when you spot problems.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Profiles don’t lie – you’re guessing if you’re not measuring.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Good tools make all the difference – download PerfView and try it out.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>It's all about allocations – that is where the compiler platform team spent most of their time improving the performance of the new compilers.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Video of presentation of this topic<ept id="p1">](http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/DEV-B333)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Beginners Guide to Performance Profiling<ept id="p1">](/visualstudio/profiling/beginners-guide-to-performance-profiling)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Performance<ept id="p1">](../../../docs/framework/performance/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>.NET Performance Tips<ept id="p1">](http://msdn.microsoft.com/library/ms973839.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Windows Phone Performance Analysis Tool<ept id="p1">](http://msdn.microsoft.com/magazine/hh781024.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Find Application Bottlenecks with Visual Studio Profiler<ept id="p1">](http://msdn.microsoft.com/magazine/cc337887.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Channel 9 PerfView tutorials<ept id="p1">](http://channel9.msdn.com/Series/PerfView-Tutorial)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>High-level Performance Tips<ept id="p1">](http://curah.microsoft.com/4604/improving-your-net-apps-startup-performance)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>.NET Compiler Platform ("Roslyn") open source project<ept id="p1">](http://roslyn.codeplex.com/)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>