<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea4addae1a761fe7e78fd0505303f0e8c7126a7e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\performance.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dc5c65ef6d16c7e869488b65dd712c847de5fc1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2848f959633d8da2d1cbe68622f1ad79e5b1a6a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Windows Workflow Foundation 4 Performance | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Workflow Foundation 4 Performance</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dustin Metzgar</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Wenlong Dong</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Microsoft Corporation, September 2010</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Microsoft <ph id="ph1">[!INCLUDE[netfx40_long](../../../includes/netfx40-long-md.md)]</ph> includes a major revision of the <ph id="ph2">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph> with heavy investments in performance.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This new revision introduces significant design changes from the previous versions of <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> that shipped as part of .NET Framework 3.0 and <ph id="ph2">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It has been re-architected from the core of the programming model, runtime, and tooling to greatly improve performance and usability.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic shows the important performance characteristics of these revisions and compares them against those of the previous version.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Individual workflow component performance has increased by orders of magnitude between WF3 and WF4.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This leaves the gap between hand-coded <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> services and <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> workflow services to be quite small.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Workflow latency has been significantly reduced in WF4.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Persistence performance has increased by a factor of 2.5 - 3.0.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Health monitoring by means of workflow tracking has significantly less overhead.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These are compelling reasons to migrate to or adopt WF4 in your applications.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Terminology</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The version of <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> introduced in <ph id="ph2">[!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)]</ph> will be referred to as WF4 for the rest of this topic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> was introduced in .Net 3.0 and had a few minor revisions through <ph id="ph2">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph> SP1.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[netfx35_short](../../../includes/netfx35-short-md.md)]</ph> version of Workflow Foundation will be referred to as WF3 for the rest of this topic.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>WF3 is shipped in <ph id="ph1">[!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)]</ph> side-by-side with WF4.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> migrating WF3 artifacts to WF4 see: <bpt id="p1">[</bpt>Windows Workflow Foundation 4 Migration Guide<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=153313)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> is Microsoftâ€™s unified programming model for building service-oriented applications.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It was first introduced as part of .Net 3.0 together with WF3 and now is one of the key components of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Windows Server AppFabric is a set of integrated technologies that make it easier to build, scale and manage Web and composite applications that run on IIS.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It provides tools for monitoring and managing services and workflows.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Windows Server AppFabric<ept id="p1">](http://msdn.microsoft.com/windowsserver/ee695849.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Goals</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The goal of this topic is to show the performance characteristics of WF4 with data measured for different scenarios.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It also provides detailed comparisons between WF4 and WF3, and thus shows the great improvements that have been made in this new revision.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The scenarios and data presented in this article quantify the underlying cost of different aspects of WF4 and WF3.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This data is useful in understanding the performance characteristics of WF4 and can be helpful in planning migrations from WF3 to WF4 or using WF4 in application development.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, care should be taken in the conclusions drawn from the data presented in this article.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The performance of a composite workflow application is highly dependent on how the workflow is implemented and how different components are integrated.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>One must measure each application to determine the performance characteristics of that application.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Overview of WF4 Performance Enhancements</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>WF4 was carefully designed and implemented with high performance and scalability which are described in the following sections.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>WF Runtime</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>At the core of the <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> runtime is an asynchronous scheduler that drives the execution of the activities in a workflow.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It provides a performant, predictable execution environment for activities.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The environment has a well-defined contract for execution, continuation, completion, cancellation, exceptions, and a predictable threading model.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In comparison to WF3, the WF4 runtime has a more efficient scheduler.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It leverages the same I/O thread pool that is used for <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph>, which is very efficient at executing batched work items.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The internal work item scheduler queue is optimized for most common usage patterns.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The WF4 runtime also manages the execution states in a very light-weight way with minimal synchronization and event handling logic, while WF3 depends on heavy-weight event registration and invocation to perform complex synchronization for state transitions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Data Storage and Flow</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In WF3, data associated with an activity is modeled through dependency properties implemented by the type <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The dependency property pattern was introduced in <ph id="ph1">[!INCLUDE[avalon1](../../../includes/avalon1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In general, this pattern is very flexible to support easy data binding and other UI features.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, the pattern requires the properties to be defined as static fields in the workflow definition.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Whenever the <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> runtime sets or gets the property values, it involves heavily-weighted look-up logic.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>WF4 uses clear data scoping logic to greatly improve how data is handled in a workflow.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It separates the data stored in an activity from the data that is flowing across the activity boundaries by using two different concepts: variables and arguments.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>By using a clear hierarchical scope for variables and "In/Out/InOut" arguments, the data usage complexity for activities is dramatically reduced and the lifetime of the data is also automatically scoped.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Activities have a well-defined signature described by its arguments.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>By simply inspecting an activity you can determine what data it expects to receive and what data will be produced by it as the result of its execution.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In WF3 activities were initialized when a workflow was created.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In WF 4 activities are initialized only when the corresponding activities are executing.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This allows a simpler activity lifecycle without performing Initialize/Uninitialize operations when a new workflow instance is created, and thus has achieved more efficiency</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Control Flow</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Just as in any programming language, <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> provides support for control flows for workflow definitions by introducing a set of control flow activities for sequencing, looping, branching and other patterns.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In WF3, when the same activity needs to be re-executed, a new <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.ActivityExecutionContext&gt;</ph> is created and the activity is cloned through a heavy-weight serialization and deserialization logic based on <ph id="ph2">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Usually the performance for iterative control flows is much slower than executing a sequence of activities.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>WF4 handles this quite differently.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It takes the activity template, creates a new ActivityInstance object, and adds it to the scheduler queue.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This whole process only involves explicit object creation and is very light-weight.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Asynchronous Programming</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Applications usually have better performance and scalability with asynchronous programming for long running blocking operations such as I/O or distributed computing operations.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>WF4 provides asynchronous support through base activity types <ph id="ph1">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The runtime natively understands asynchronous activities and therefore can automatically put the instance in a no-persist zone while the asynchronous work is outstanding.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Custom activities can derive from these types to perform asynchronous work without holding the workflow scheduler thread and blocking any activities that may be able to run in parallel.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Messaging</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Initially WF3 had very limited messaging support through external events or web services invocations.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In .Net 3.5, workflows could be implemented as <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> clients or exposed as <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> services through <ph id="ph3">&lt;xref:System.Workflow.Activities.SendActivity&gt;</ph> and <ph id="ph4">&lt;xref:System.Workflow.Activities.ReceiveActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In WF4, the concept of workflow-based messaging programming has been further strengthened through the tight integration of <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> messaging logic into WF.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The unified message processing pipeline provided in <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> in .Net 4 helps WF4 services to have significantly better performance and scalability than WF3.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>WF4 also provides richer messaging programming support that can model complex Message Exchange Patterns (MEPs).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Developers can use either typed service contracts to achieve easy programming or un-typed service contracts to achieve better performance without paying serialization costs.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The client-side channel caching support through the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageChannelCache&gt;</ph> class in WF4 helps developers build fast applications with minimal effort.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Changing the Cache Sharing Levels for Send Activities<ept id="p1">](../../../docs/framework/wcf/feature-details/changing-the-cache-sharing-levels-for-send-activities.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Declarative Programming</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>WF4 provides a clean and simple declarative programming framework to model business processes and services.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The programming model supports fully declarative composition of activities, with no code-beside, greatly simplifying workflow authoring.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[netfx40_short](../../../includes/netfx40-short-md.md)]</ph>, the XAML-based declarative programming framework has been unified into the single assembly System.Xaml.dll to support both WPF and WF.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In WF4, XAML provides a truly declarative experience and allows for the entire definition of the workflow to be defined in XML markup, referencing activities and types built using .NET.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This was difficult to do in WF3 with XOML format without involving custom code-behind logic.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The new XAML-stack in .Net 4 has much better performance in serializing/deserializing workflow artifacts and makes declarative programming more attractive and solid.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Workflow Designer</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Fully declarative programming support for WF4 explicitly imposes higher requirements for design time performance for large workflows.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The Workflow designer in WF4 has much better scalability for large workflows than that for WF3.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>With UI virtualization support, the designer can easily load a large workflow of 1000 activities in a few seconds, while it is almost impossible to load a workflow of a few hundred activities with the WF3 designer.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Component-level Performance Comparisons</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This section contains data on direct comparisons between individual activities in WF3 and WF4 workflows.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Key areas like persistence have a more profound impact on performance than the individual activity components.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The performance improvements in individual components in WF4 are important though because the components are now fast enough to be compared against hand-coded orchestration logic.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An example of which is covered in the next section: "Service Composition Scenario."</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Environment Setup</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Performance Test Environment<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/wfperfenvironment.gif "</bpt>WFPerfEnvironment<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The above figure shows the machine configuration used for component-level performance measurement.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A single server and five clients connected over one 1-Gbps Ethernet network interface.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For easy measurements, the server is configured to use a single core of a dual-proc/quad-core server  running Windows Server 2008 x86.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The system CPU utilization is maintained at nearly 100%.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Test Details</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The WF3 <ph id="ph1">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph> is likely the simplest activity that can be used in a WF3 workflow.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The activity calls a method in the code-behind that the workflow programmer can put custom code into.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In WF4, there is no direct analog to the WF3 <ph id="ph1">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph> that provides the same functionality.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Note that there is a <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph> base class in WF4 that is not related to the WF3 <ph id="ph2">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Workflow authors are encouraged to create custom activities and build XAML-only workflows.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the tests below, an activity called <ph id="ph1">`Comment`</ph> is used in place of an empty <ph id="ph2">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph> in WF4 workflows.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The code in the <ph id="ph1">`Comment`</ph> activity is as follows:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Empty Workflow</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This test uses a sequence workflow with no child activities.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Single Activity</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The workflow is a sequence workflow containing one child activity.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The activity is a <ph id="ph1">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph> with no code in the WF3 case and a <ph id="ph2">`Comment`</ph> activity in the WF4 case.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>While with 1000 Iterations</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The sequence workflow contains one <ph id="ph1">&lt;xref:System.Activities.Statements.While&gt;</ph> activity with one child activity in the loop that does not perform any work.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Replicator compared to ParallelForEach</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Workflow.Activities.ReplicatorActivity&gt;</ph> in WF3 has sequential and parallel execution modes.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In sequential mode, the activityâ€™s performance is similar to the <ph id="ph1">&lt;xref:System.Workflow.Activities.WhileActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Activities.ReplicatorActivity&gt;</ph> is most useful for parallel execution.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The WF4 analog for this is the <ph id="ph1">&lt;xref:System.Activities.Statements.ParallelForEach%601&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following diagram shows the workflows used for this test.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The WF3 workflow is on the left and the WF4 workflow is on the right.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>WF3 ReplicatorActivity and WF4 ParallelForEach<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/replicatorandparallelforeach.gif "</bpt>ReplicatorAndParallelForEach<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Sequential Workflow with Five Activities</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This test is meant to show the effect of having several activities execute in sequence.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>There are five activities in the sequence.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Transaction Scope</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The transaction scope test differs from the other tests slightly in that a new workflow instance is not created for every iteration.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Instead, the workflow is structured with a while loop containing a <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> activity containing a single activity that does no work.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Each run of a batch of 50 iterations through the while loop is counted as a single operation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Compensation</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The WF3 workflow has a single compensatable activity named <ph id="ph1">`WorkScope`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The activity simply implements the <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.ICompensatableActivity&gt;</ph> interface:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The fault handler targets the <ph id="ph1">`WorkScope`</ph> activity.The WF4 workflow is equally simplistic.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Activities.Statements.CompensableActivity&gt;</ph> has a body and a compensation handler.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An explicit compensate is next in the sequence.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The body activity and compensation handler activity are both empty implementations:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>WF3 and WF basic compensation workflows<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/basiccompensationworkflows.gif "</bpt>BasicCompensationWorkflows<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Figure 2 â€“ WF3 (left) and WF4 (right) basic compensation workflows</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Performance Test Results</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Performance Test Results<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/performancedata.gif "</bpt>PerformanceData<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Performance Test Data Graph<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/performancetestchart.gif "</bpt>PerformanceTestChart<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>All tests are measured in workflows per second with the exception of the transaction scope test.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>As can be seen above, the <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> runtime performance has improved across the board, especially in areas that require multiple executions of the same activity like the while loop.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Service Composition Scenario</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>As is shown in the previous section, "Component-level Performance Comparisons," there has been a significant reduction in overhead between WF3 and WF4.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> workflow services can now almost match the performance of hand-coded <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> services but still have all the benefits of the <ph id="ph3">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> runtime.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This test scenario compares a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service against a <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> workflow service in WF4.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Online Store Service</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>One of the strengths of <ph id="ph1">[!INCLUDE[wf2](../../../includes/wf2-md.md)]</ph> is the ability to compose processes using several services.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For this example, there is an online store service that orchestrates two service calls to purchase an order.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The first step is to validate the order using an Order Validating Service.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The second step is to fill the order using a Warehouse Service.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The two backend services, Order Validating Service and Warehouse Service, remain the same for both tests.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The part that changes is the Online Store Service that performs the orchestration.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In one case, the service is hand-coded as a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>For the other case, the service is written as a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> workflow service in WF4.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph>-specific features like tracking and persistence are turned off for this test.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Environment</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Performance Test Environment<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/wfperfenvironment.gif "</bpt>WFPerfEnvironment<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Client requests are made to the Online Store Service via HTTP from multiple computers.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A single computer hosts all three services.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The transport layer between the Online Store Service and the backend services is TCP or HTTP.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The measurement of operations/second is based on the number of completed <ph id="ph1">`PurchaseOrder`</ph> calls made to the Online Store Service.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Channel pooling is a new feature available in WF4.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> portion of this test channel pooling is not provided out of the box so a hand-coded implementation of a simple pooling technique was used in the Online Store Service.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Performance</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Online Store Service Performance Graph<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/onlinestoreperfgraph.gif "</bpt>OnlineStorePerfGraph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Connecting to backend TCP services without channel pooling, the <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> service has a 17.2% impact on throughput.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>With channel pooling, the penalty is about 23.8%.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For HTTP, the impact is much less: 4.3% without pooling and 8.1% with pooling.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>It is also important to note that the channel pooling provides very little benefit when using HTTP.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>While there is overhead from the WF4 runtime compared with a hand-coded <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service in this test, it could be considered a worst-case scenario.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The two backend services in this test do very little work.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>In a real end-to-end scenario, these services would perform more expensive operations like database calls, making the performance impact of the transport layer less important.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This plus the benefits of the features available in WF4 makes Workflow Foundation a viable choice for creating orchestration services.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Key Performance Considerations</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The feature areas in this section, with the exception of interop, have dramatically changed between WF3 and WF4.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>This affects the design of workflow applications as well as the performance.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Workflow Activation Latency</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> workflow service application, the latency for starting a new workflow or loading an existing workflow is important as it can be blocking.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This test case measures a WF3 XOML host against a WF4 XAMLX host in a typical scenario.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Environment Setup</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Environment setup for latency and throughput tests<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/latencyandthroughputenvironment.gif "</bpt>LatencyAndThroughputEnvironment<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Test Setup</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>In the scenario, a client computer contacts a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> workflow service using context-based correlation.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Context correlation requires a special context binding and uses a context header or cookie to relate messages to the correct workflow instance.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>It has a performance benefit in that the correlation Id is located in the message header so the message body does not need to be parsed.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> context correlation see <bpt id="p1">[</bpt>Context Exchange Correlation<ept id="p1">](../../../docs/framework/wcf/feature-details/context-exchange-correlation.md)</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The service will create a new workflow with the request and send an immediate response so that the measurement of latency does not include the time spent running the workflow.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The WF3 workflow is XOML with a code-behind and the WF4 workflow is entirely XAML.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The WF4 workflow looks like this:</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>WF 4 Correlation Scope<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/correlationscopeworkflow.gif "</bpt>CorrelationScopeWorkflow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity creates the workflow instance.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>A value passed in the received message is echoed in the reply message.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A sequence following the reply contains the rest of the workflow.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>In the above case, only one comment activity is shown.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The number of comment activities is changed to simulate workflow complexity.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>A comment activity is equivalent to a WF3 <ph id="ph1">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph> that performs no work.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> the comment activity, see the "Component-level Performance Comparison" section earlier in this article.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Test Results</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Latency Results<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/latencyresultsgraph.gif "</bpt>LatencyResultsGraph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Figure 3 â€“ Cold and warm latency for WCF workflow services</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>In the graph above, cold refers to the case where there is not an existing <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> for the given workflow.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>In other words, cold latency is when the workflow is being used for the first time and the XOML or XAML needs to be compiled.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Warm latency is the time to create a new workflow instance when the workflow type has already been compiled.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The complexity of the workflow makes very little difference in the WF4 case but has a linear progression in the WF3 case.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Correlation Throughput</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>WF4 introduces a new content-based correlation feature.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>WF3 provided only context-based correlation.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Context-based correlation could only be done over specific <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> channel bindings.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The workflow Id is inserted into the message header when using these bindings.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The WF3 runtime could only identify a workflow by its Id.  With content-based correlation, the workflow author can create a correlation key out of a relevant piece of data like an account number or customer Id. <ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> content-based correlation see <bpt id="p1">[</bpt>Content Based Correlation<ept id="p1">](../../../docs/framework/wcf/feature-details/content-based-correlation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Context-based correlation has a performance advantage in that the correlation key is located in the message header.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The key can be read from the message without de-serialization/message-copying.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In content-based correlation, the correlation key is stored in the message body.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>An XPath expression is used to locate the key.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The cost of this extra processing depends on the size of the message, depth of the key in the body, and the number of keys.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>This test compares context- and content-based correlation and also shows the performance degradation when using multiple keys.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Environment Setup</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Performance Test Environment<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/wfperfenvironment.gif "</bpt>WFPerfEnvironment<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Test Setup</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Correlation Throughput Workflow Test<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/correlationthroughputworkflow.gif "</bpt>CorrelationThroughputWorkflow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The workflow shown above is the same one used in the "Persistence" section below.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>For the correlation tests without persistence there is no persistence provider installed in the runtime.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Correlation occurs in two places: CreateOrder and CompleteOrder.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Test Results</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Correlation Throughput<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/correlationthroughputgraph.gif "</bpt>CorrelationThroughputGraph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>This graph shows a decrease in performance as the number of keys used in content-based correlation increases.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The similarity in the curves between TCP and HTTP indicates the overhead associated with these protocols.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Correlation with Persistence</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>With a persisted workflow, the CPU pressure from content-based correlation shifts from the workflow runtime to the SQL database.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The stored procedures in the SQL persistence provider do the work of matching the keys to locate the appropriate workflow.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Correlation and persistence results<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/correlationandpersistencegraph.gif "</bpt>CorrelationAndPersistenceGraph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Context-based correlation is still faster than content-based correlation.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>However, the difference is less pronounced as persistence has more impact on performance than correlation.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Complex Workflow Throughput</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The complexity of a workflow is not measured only by the number of activities.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Composite activities can contain many children and those children can also be composite activities.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>As the number of levels of nesting increases, so does the number of activities that can be currently in the executing state and the number of variables that can be in state.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>This test compares throughput between WF3 and WF4 when executing complex workflows.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Test Setup</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>These tests were executed on an Intel Xeon X5355 @ 2.66GHz 4-way computer with 4GB RAM running Windows Server 2008 x64.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The test code runs in a single process with one thread per core to reach 100% CPU utilization.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The workflows generated for this test have two main variables: depth and number of activities in each sequence.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Each depth level includes a parallel activity, while loop, decisions, assignments, and sequences.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>In the WF4 designer pictured below, the top-level flow chart is pictured.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Each flowchart activity resembles the main flowchart.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>It may be helpful to think of a fractal when picturing this workflow, where the depth is limited to the parameters of the test.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The number of activities in a given test is determined by the depth and number of activities per sequence.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The following equation computes the number of activities in the WF4 test:</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Equation to compute number of activities<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/numberofactivitiesequation.gif "</bpt>NumberOfActivitiesEquation<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The WF3 testâ€™s activity count can be computed with a slightly different equation due to an extra sequence:</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Equation to compute number of activities<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/w3numberofactivitiesequation.gif "</bpt>W3NumberOfActivitiesEquation<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Where d is the depth and a is the number of activities per sequence.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>The logic behind these equations is that the first constant, multiplied by a, is the number of sequences and the second constant is the static number of activities in the current level.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>There are three flowchart child activities in each flowchart.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>At the bottom depth level, these flowcharts are empty but at the other levels they are copies of the main flowchart.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The number of activities in each test variationâ€™s workflow definition is indicated in the following table:</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Compares number of activities used in each test<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/comparechart.gif "</bpt>CompareChart<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The number of activities in the workflow definition increases sharply with each depth level.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>But only one path per decision point is executed in a given workflow instance, so only a small subset of the actual activities are executed.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Complex Workflow<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/complexworkflowthroughputworkflow.gif "</bpt>ComplexWorkflowThroughputWorkflow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>An equivalent workflow was created for WF3.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>The WF3 designer shows the entire workflow in the design area instead of nesting, therefore it is too big to display in this topic.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A snippet of the workflow is shown below.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>WF3 Workflow<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/wf3workflow.gif "</bpt>WF3Workflow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>To exercise nesting in an extreme case, another workflow that is part of this test uses 100 nested sequences.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>In the innermost sequence is a single <ph id="ph1">`Comment`</ph> or <ph id="ph2">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Nested sequences<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/nestedsequencewf.gif "</bpt>NestedSequenceWF<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Tracking and persistence are not used as part of this test.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Test Results</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Throughput Graph<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/testresults1.gif "</bpt>TestResults1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Even with complex workflows with lots of depth and a high number of activities, the performance results are consistent with other throughput numbers shown earlier in this article.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>WF4â€™s throughput is orders of magnitude faster and has to be compared on a logarithmic scale.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Memory</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The memory overhead of Windows Workflow Foundation is measured in two key areas: workflow complexity and number of workflow definitions.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Memory measurements were taken on a Windows 7 64-bit workstation.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>There are many ways to obtain the measurement of working set size such as monitoring performance counters, polling Environment.WorkingSet, or using a tool like VMMap available from <bpt id="p1">[</bpt>VMMap<ept id="p1">](http://technet.microsoft.com/sysinternals/dd535533.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>A combination of methods was used to obtain and verify the results of each test.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Workflow Complexity Test</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The workflow complexity test measures the working set difference based on the complexity of the workflow.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>In addition to the complex workflows used in the previous section, new variations are added to cover two basic cases: a single activity workflow and a sequence with 1000 activities.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>For these tests the workflows are initialized and executed to completion in a single serial loop for a period of one minute.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Each test variation is run three times and the data recorded is the average of those three runs.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The two new basic tests have workflows that look like those shown below:</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Complex Workflows<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/complexworkflowboth.gif "</bpt>ComplexWorkflowBoth<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>In the WF3 workflow shown above, empty <ph id="ph1">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph> activities are used.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The WF4 workflow above uses <ph id="ph1">`Comment`</ph> activities.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Comment`</ph> activity was described in the Component-level Performance Comparisons section earlier in this article.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Memory Usage Graph<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/complexmemoryusage.gif "</bpt>ComplexMemoryUsage<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>One of the clear trends to notice in this graph is that nesting has relatively minimal impact on memory usage in both WF3 and WF4.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The most significant memory impact comes from the number of activities in a given workflow.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Given the data from the sequence 1000, complex depth 5 sequence 5, and complex depth 7 sequence 1 variations, it is clear that as the number of activities enters the thousands, the memory usage increase becomes more noticeable.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>In the extreme case (depth 7 sequence 1) where there are ~29K activities, WF4 is using almost 79% less memory than WF3.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Multiple Workflow Definitions Test</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Measuring memory per workflow definition is divided into two different tests because of the available options for hosting workflows in WF3 and WF4.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The tests are run in a different manner than the workflow complexity test in that a given workflow is instanced and executed only once per definition.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>This is because the workflow definition and its host remain in memory for the lifetime of the AppDomain.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The memory used by running a given workflow instance should be cleaned up during garbage collection.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The migration guidance for WF4 contains more detailed information on the hosting options.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>WF Migration Cookbook: Workflow Hosting<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=153313)</ept>.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Creating many workflow definitions for a workflow definition test can be done in several ways.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>For instance, one could use code generation to create a set of 1000 workflows that are identical except in name and save each of those workflows into separate files.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>This approach was taken for the console-hosted test.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>In WF3, the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph> class was used to run the workflow definitions.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>WF4 can either use <ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> to create a single workflow instance or directly use <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> to run the activity as if it were a method call.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.WorkflowApplication&gt;</ph> is a host of a single workflow instance and has closer feature parity to <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph> so that was used in this test.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>When hosting workflows in IIS it is possible to use a <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> to create a new <ph id="ph2">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> instead of generating all of the XAMLX or XOML files.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> handles the incoming request and responds with a "virtual file" that can be loaded from a database or, in this case, generated on the fly.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>It is therefore unnecessary to create 1000 physical files.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>The workflow definitions used in the console test were simple sequential workflows with a single activity.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The single activity was an empty <ph id="ph1">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph> for the WF3 case and a <ph id="ph2">`Comment`</ph> activity for the WF4 case.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>The IIS-hosted case used workflows that start on receiving a message and end on sending a reply:</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Services in WF3 and WF4<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/receiveworkflowboth.gif "</bpt>ReceiveWorkflowBoth<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Figure 4 â€“ WF3 workflow with ReceiveActivity and WF4 workflow with request/response pattern</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The table below shows the delta in working set between a single workflow definition and 1001 definitions:</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Hosting Options</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>WF3 Working Set Delta</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>WF4 Working Set Delta</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Console Application Hosted Workflows</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>18 MB</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>9 MB</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>IIS Hosted Workflow Services</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>446 MB</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>364 MB</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Hosting workflow definitions in IIS consumes much more memory due to the <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph>, detailed <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service artifacts, and the message processing logic associated with the host.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>For console hosting in WF3 the workflows were implemented in code instead of XOML.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>In WF4 the default is to use XAML.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The XAML is stored as an embedded resource in the assembly and compiled during runtime to provide the implementation of the workflow.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>There is some overhead associated with this process.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>In order to make a fair comparison between WF3 and WF4, coded workflows were used instead of XAML.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>An example of one of the WF4 workflows is shown below:</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>There are many other factors that can affect memory consumption.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>The same advice for all managed programs still applies.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>In IIS-hosted environments, the <ph id="ph1">&lt;xref:System.ServiceModel.WorkflowServiceHost&gt;</ph> object created for a workflow definition stays in memory until the application pool is recycled.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>This should be kept in mind when writing extensions.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Also, it is best to avoid "global" variables (variables scoped to the whole workflow) and limit the scope of variables wherever possible.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>Workflow Runtime Services</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Persistence</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>WF3 and WF4 both ship with a SQL persistence provider.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The WF3 SQL persistence provider is a simple implementation that serializes the workflow instance and stores it in a blob.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>For this reason, the performance of this provider depends heavily on the size of the workflow instance.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>In WF3, the instance size could increase for many reasons, as is discussed previously in this paper.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Many customers choose not to use the default SQL persistence provider because storing a serialized instance in a database gives no visibility into the state of the workflow.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>In order to find a particular workflow without knowing the workflow id, one would have to deserialize each persisted instance and examine the contents.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Many developers prefer to write their own persistence providers to overcome this obstacle.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The WF4 SQL persistence provider has tried to address some of these concerns.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The persistence tables expose certain information such as the active bookmarks and promotable properties.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The new content-based correlation feature in WF4 would not perform well using the WF3 SQL persistence approach, which has driven some change in the organization of the persisted workflow instance.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>This makes the job of the persistence provider more complex and puts extra stress on the database.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Environment Setup</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Performance Test Environment<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/wfperfenvironment.gif "</bpt>WFPerfEnvironment<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Test Setup</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Even with an improved feature set and better concurrency handling, the SQL persistence provider in WF4 is faster than the provider in WF3.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>To showcase this, two workflows that perform essentially the same operations in WF3 and WF4 are compared below.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Persistence Workflows<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/persistworkflow.gif "</bpt>PersistWorkflow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Figure 5 â€“ Persistence workflow in WF3 on left and WF4 on right</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>The two workflows are both created by a received message.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>After sending an initial reply, the workflow is persisted.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>In the WF3 case, an empty <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.TransactionScopeActivity&gt;</ph> is used to initiate the persistence.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>The same could be achieved in WF3 by marking an activity as "persist on close."</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>A second, correlated message completes the workflow.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>The workflows are persisted but not unloaded.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>Test Results</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Throughput Persistence<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/throughputpersistence.gif "</bpt>ThroughputPersistence<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>When the transport between client and middle tier is HTTP, persistence in WF4 shows an improvement of 2.6 times.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The TCP transport increases that factor to 3.0 times.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>In all cases, CPU utilization on the middle tier is 98% or higher.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The reason that WF4 throughput is greater is due to the faster workflow runtime.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>The size of the serialized instance is low for both cases and is not a major contributing element in this situation.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Both the WF3 and WF4 workflows in this test use an activity to explicitly indicate when persistence should occur.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>This has the benefit of persisting the workflow without unloading it.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>In WF3, it is also possible to persist using the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.TimeToUnload%2A&gt;</ph> feature, but this unloads the workflow instance from memory.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>If a developer using WF3 wants to make sure a workflow persists at certain points, they either have to alter the workflow definition or pay the cost for unloading and re-loading the workflow instance.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>A new feature in WF4 makes it possible to persist without unloading: <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.TimeToPersist%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>This feature allows the workflow instance to be persisted on idle but stay in memory until the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Description.WorkflowIdleBehavior.TimeToUnload%2A&gt;</ph> threshold is met or execution is resumed.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Note that the WF4 SQL persistence provider performs more work in the database tier.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>The SQL database can become a bottleneck so it is important to monitor the CPU and disk usage there.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Be sure to include the following performance counters from the SQL database when performance testing workflow applications:</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>PhysicalDisk<ph id="ph1">\\</ph>%Disk Read Time</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>PhysicalDisk<ph id="ph1">\\</ph>% Disk Time</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>PhysicalDisk<ph id="ph1">\\</ph>% Disk Write Time</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>PhysicalDisk<ph id="ph1">\\</ph>% Avg. Disk Queue Length</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>PhysicalDisk\Avg. Disk Read Queue Length</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>PhysicalDisk\Avg. Disk Write Queue Length</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>PhysicalDisk\Current Disk Queue Length</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Processor Information<ph id="ph1">\\</ph>% Processor Time</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>SQLServer:Latches\Average Latch Wait Time (ms)</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>SQLServer:Latches\Latch Waits/sec</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Tracking</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Workflow tracking can be used to track the progress of a workflow.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>The information that is included in the tracking events is determined by a tracking profile.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The more complex the tracking profile, the more expensive tracking becomes.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>WF3 shipped with a SQL-based tracking service.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>This service could work in batched and non-batched modes.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>In non-batched mode, tracking events are written directly to the database.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>In batched mode, tracking events are collected into the same batch as the workflow instance state.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>The batched mode has the best performance for the widest range of workflow designs.</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>However, batching can have a negative performance impact if the workflow runs many activities without persisting and those activities are tracked.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>This would commonly happen in loops and the best way to avoid this scenario is to design large loops to contain a persistence point.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Introducing a persistence point into a loop can negatively affect performance as well so it is important to measure the costs of each and come up with a balance.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>WF4 is not shipped with a SQL tracking service.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Recording tracking information to a SQL database can be handled better from an application server rather than built into the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Therefore SQL tracking is now handled by AppFabric.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>The out-of-the-box tracking provider in WF4 is based on Event Tracing for Windows (ETW).</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>ETW is a kernel-level, low-latency event system built into Windows.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>It uses a provider/consumer model that makes it possible to only incur the penalty for event tracing when there is actually a consumer.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>In addition to kernel events such as processor, disk, memory, and network usage, many applications leverage ETW as well.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>ETW events are more powerful than performance counters in that events can be customized to the application.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>An event can contain text such as a workflow ID or an informational message.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Also, events are categorized with bitmasks so that consuming a certain subset of events will have less performance impact than capturing all events.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Benefits to the approach of using ETW for tracking instead of SQL include:</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Collection of tracking events can be separated to another process.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>This gives greater flexibility in how the events are recorded.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>ETW tracking events are easily combined with the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> ETW events or other ETW providers such as a SQL Server or kernel provider.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Workflow authors do not need to alter a workflow to work better with a particular tracking implementation, such as the WF3 SQL tracking serviceâ€™s batch mode.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>An administrator can turn tracking on or off without recycling the host process.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The performance benefits to ETW tracking come with a drawback.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>ETW events can be lost if the system is under intense resource pressure.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The processing of events is not meant to block normal program execution and therefore it is not guaranteed that all ETW events will be broadcast to their subscribers.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>This makes ETW tracking great for health monitoring but not suitable for auditing.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>While WF4 does not have a SQL tracking provider, AppFabric does.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>AppFabricâ€™s SQL tracking approach is to subscribe to ETW events with a Windows Service that batches the events and writes them to a SQL table designed for quick inserts.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>A separate job drains the data from this table and reforms it into reporting tables that can be viewed on the AppFabric dashboard.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>This means that a batch of tracking events is handled independent of the workflow it came from and therefore does not have to wait for a persistence point before being recorded.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>ETW events can be recorded with tools such as logman or xperf.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>The compact ETL file can be viewed with a tool like xperfview or converted to a more readable format, such as XML, with tracerpt.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>In WF3, the only option for getting tracking events without a SQL database is to create a custom tracking service.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> ETW, see <bpt id="p1">[</bpt>WCF Services and Event Tracing for Windows<ept id="p1">](../../../docs/framework/wcf/samples/wcf-services-and-event-tracing-for-windows.md)</ept> and <bpt id="p2">[</bpt>Event Tracing for Windows<ept id="p2">](http://msdn.microsoft.com/library/ff190903.aspx\))</ept>.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Enabling workflow tracking will impact performance in varying degrees.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The benchmark below uses the logman tool to consume the ETW tracking events and record them to an ETL file.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The cost of the SQL tracking in AppFabric is not in the scope of this article.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The basic tracking profile, also used in AppFabric, is shown in this benchmark.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Also included is the cost of tracking only health monitoring events.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>These events are useful for troubleshooting problems and determining the average throughput of the system.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Environment Setup</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Performance Test Environment<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/wfperfenvironment.gif "</bpt>WFPerfEnvironment<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Test Results</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Tracing Cost<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/workflowtracingcost.gif "</bpt>WorkflowTracingCost<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Health monitoring has roughly a 3% impact on throughput.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>The basic profileâ€™s cost is around 8%.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Interop</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>WF4 is almost a complete rewrite of <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> and therefore WF3 workflows and activities are not directly compatible with WF4.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Many customers that adopted <ph id="ph1">[!INCLUDE[wf2](../../../includes/wf2-md.md)]</ph> early will have in-house or third-party workflow definitions and custom activities for WF3.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>One way to ease the transition to WF4 is to use the Interop activity, which can execute WF3 activities from within a WF4 workflow.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>It is recommended that the <ph id="ph1">&lt;xref:System.Activities.Statements.Interop&gt;</ph> activity only be used when necessary.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> migrating to WF4 check out the <bpt id="p1">[</bpt>WF4 Migration Guidance<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=153313)</ept>.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Environment Setup</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Workflow Performance Test Environment<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/windows-workflow-foundation/media/wfperfenvironment.gif "</bpt>WFPerfEnvironment<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Test Results</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>The table below shows the results of running a workflow containing five activities in a sequence in various configurations.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Test</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Throughput (workflows/sec)</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>WF3 Sequence in WF3 runtime</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>1,576</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>WF3 Sequence in WF4 runtime using Interop</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>2,745</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>WF4 Sequence</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>153,582</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>There is a notable performance increase to using Interop over straight WF3.</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>However, when compared against WF4 activities, the increase is negligible.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Heavy investments in performance for WF4 have paid off in many crucial areas.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Individual workflow component performance is in some cases hundreds of times faster in WF4 compared to WF3 due to a leaner <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> runtime.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Latency numbers are significantly better as well.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>This means the performance penalty for using <ph id="ph1">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph> as opposed to hand-coding <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> orchestration services is very small considering the added benefits of using <ph id="ph3">[!INCLUDE[wf1](../../../includes/wf1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Persistence performance has increased by a factor of 2.5 - 3.0.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Health monitoring by means of workflow tracking now has very little overhead.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>A comprehensive set of migration guides are available for those that are considering moving from WF3 to WF4.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>All of this should make WF4 an attractive option for writing complex applications.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>Acknowledgements</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Many thanks to the following contributors and reviewers for their efforts:</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Leon Welicki, Microsoft Corporation</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Ryszard Kwiecinski, Microsoft Corporation</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Emil Velinov, Microsoft Corporation</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Nate Talbert, Microsoft Corporation</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Bob Schmidt, Microsoft Corporation</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Stefan Batres, Microsoft Corporation</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>