<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2487ec38d6a7bb62df8e7830c1255388fb6b2c3e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\deployment\how-to-get-progress-from-the-dotnet-installer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">007ce169782866e85c3364c0658188755d144bc8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84eee739a2dfab226f4567a3a6f48b35e9ee6a7f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Get Progress from the .NET Framework 4.5 Installer | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Get Progress from the .NET Framework 4.5 Installer</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> is a redistributable runtime.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you develop apps for this version of the .NET Framework, you can include (chain) <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> setup as a prerequisite part of your app's setup.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To present a customized or unified setup experience, you may want to silently launch <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> setup and track its progress while showing your app's setup progress.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To enable silent tracking, <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> setup (which can be watched) defines a protocol by using a memory-mapped I/O (MMIO) segment to communicate with your setup (the watcher or chainer).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This protocol defines a way for a chainer to obtain progress information, get detailed results, respond to messages, and cancel the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> setup.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Invocation<ept id="p1">**</ept> .</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To call <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> setup and receive progress information from the MMIO section, your setup program must do the following:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>redistributable program:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>section name<ept id="p1">*</ept> is any name you want to use to identify your app.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>.NET Framework setup reads and writes to the MMIO section asynchronously, so you might find it convenient to use events and messages during that time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the example, the .NET Framework setup process is created by a constructor that both allocates the MMIO section (<ph id="ph1">`TheSectionName`</ph>) and defines an event (<ph id="ph2">`TheEventName`</ph>):</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Please replace those names with names that are unique to your setup program.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Read from the MMIO section.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the download and installation operations are simultaneous: One part of the .NET Framework might be installing while another part is downloading.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As a result, progress is sent back (that is, written) to the MMIO section as two numbers (<ph id="ph1">`m_downloadSoFar`</ph> and <ph id="ph2">`m_installSoFar`</ph>) that increase from 0 to 255.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When 255 is written and the .NET Framework exits, the installation is complete.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exit codes<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following exit codes from the command to call the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> redistributable program indicate whether setup has succeeded or failed:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>0 - Setup completed successfully.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>3010 – Setup completed successfully; a system restart is required.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>1602 – Setup has been canceled.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All other codes - Setup encountered errors; examine the log files created in %temp% for details.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Canceling setup<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can cancel setup at any time by using the <ph id="ph1">`Abort`</ph> method to set the <ph id="ph2">`m_downloadAbort`</ph> and <ph id="ph3">`m_ installAbort`</ph> flags in the MMIO section.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Chainer Sample</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The Chainer sample silently launches and tracks <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> setup while showing progress.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This sample is similar to the Chainer sample provided for the .NET Framework 4.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, in addition, it can avoid system restarts by processing the message box for closing .NET Framework 4 apps.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For information about this message box, see <bpt id="p1">[</bpt>Reducing System Restarts During .NET Framework 4.5 Installations<ept id="p1">](../../../docs/framework/deployment/reducing-system-restarts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use this sample with the .NET Framework 4 installer; in that scenario, the message is simply not sent.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You must run the example as an administrator.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can download the complete Visual Studio solution for the <bpt id="p1">[</bpt>.NET Framework 4.5 Chainer Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=231345)</ept> from the MSDN Samples Gallery.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following sections describe the significant files in this sample: MMIOChainer.h, ChainingdotNet4.cpp, and IProgressObserver.h.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>MMIOChainer.h</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The MMIOChainer.h file (see <bpt id="p1">[</bpt>complete code<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=231369)</ept>) contains the data structure definition and the base class from which the chainer class should be derived.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> extends the MMIO data structure to handle data that the <ph id="ph2">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> installer needs.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The changes to the MMIO structure are backward-compatible, so a .NET Framework 4 chainer can work with .NET Framework 4.5 setup without requiring recompilation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, this scenario does not support the feature for reducing system restarts.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A version field provides a means of identifying revisions to the structure and message format.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The .NET Framework setup determines the version of the chainer interface by calling the <ph id="ph1">`VirtualQuery`</ph> function to determine the size of the file mapping.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the size is large enough to accommodate the version field, .NET Framework setup uses the specified value.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the file mapping is too small to contain a version field, which is the case with the .NET Framework 4, the setup process assumes version 0 (4).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the chainer does not support the version of the message that .NET Framework setup wants to send, .NET Framework setup assumes an ignore response.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The MMIO data structure is defined as follows:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MmioDataStructure`</ph> data structure should not be used directly; use the <ph id="ph2">`MmioChainer`</ph> class instead to implement your chainer.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Derive from the <ph id="ph1">`MmioChainer`</ph> class to chain the <ph id="ph2">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> redistributable.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>IProgressObserver.h</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The IProgressObserver.h file implements a progress observer (<bpt id="p1">[</bpt>see complete code<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=231370)</ept>).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This observer gets notified of download and installation progress (specified as an unsigned <ph id="ph1">`char`</ph>, 0-255, indicating 1%-100% complete).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The observer is also notified when the chainee sends a message, and the observer should send a response.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>ChainingdotNet4.5.cpp</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ChainingdotNet4.5.cpp<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=231368)</ept> file implements the <ph id="ph1">`Server`</ph> class, which derives from the <ph id="ph2">`MmioChainer`</ph> class and overrides the appropriate methods to display progress information.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The MmioChainer creates a section with the specified section name and initializes the chainer with the specified event name.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The event name is saved in the mapped data structure.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You should make the section and event names unique.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Server`</ph> class in the following code launches the specified setup program, monitors its progress, and returns an exit code.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The installation is started in the Main method.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Before launching the installation, the chainer checks to see if the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> is already installed by calling <ph id="ph2">`IsNetFx4Present`</ph>:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can change the path of the executable (Setup.exe in the example) in the <ph id="ph1">`Launch`</ph> method to point to its correct location, or customize the code to determine the location.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MmioChainer`</ph> base class provides a blocking <ph id="ph2">`Run()`</ph> method that the derived class calls.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Send`</ph> method intercepts and processes the messages.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In this version of the .NET Framework, the only supported message is the close application message.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Progress data is an unsigned <ph id="ph1">`char`</ph> between 0 (0%) and 255 (100%).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The HRESULT is passed to the <ph id="ph1">`Finished`</ph> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> redistributable typically writes many progress messages and a single message that indicates completion (on the chainer side).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It also reads asynchronously, looking for <ph id="ph1">`Abort`</ph> records.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If it receives an <ph id="ph1">`Abort`</ph> record, it cancels the installation, and writes a finished record with E_ABORT as its data after the installation has been aborted and setup operations have been rolled back.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A typical server creates a random MMIO file name, creates the file (as shown in the previous code example, in <ph id="ph1">`Server::CreateSection`</ph>), and launches the redistributable by using the <ph id="ph2">`CreateProcess`</ph> method and passing the pipe name with the <ph id="ph3">`-pipe someFileSectionName`</ph> option.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The server should implement <ph id="ph1">`OnProgress`</ph>, <ph id="ph2">`Send`</ph>, and <ph id="ph3">`Finished`</ph> methods with application UI-specific code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deployment Guide for Developers<ept id="p1">](../../../docs/framework/deployment/deployment-guide-for-developers.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deployment<ept id="p1">](../../../docs/framework/deployment/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>