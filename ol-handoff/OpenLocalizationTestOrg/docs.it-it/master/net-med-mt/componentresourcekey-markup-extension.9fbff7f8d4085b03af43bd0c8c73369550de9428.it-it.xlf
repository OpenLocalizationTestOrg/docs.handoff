<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34a5b569a89e1bc7a03a4d7ca9ef125a3ec85091</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\componentresourcekey-markup-extension.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef31ae4b606b8f537786a9a2b9c0b4deb98024b0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6d16584815e2c5ca47bd03e5efd092c6d06207f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ComponentResourceKey Markup Extension | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ComponentResourceKey Markup Extension</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defines and references keys for resources that are loaded from external assemblies.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This enables a resource lookup to specify a target type in an assembly, rather than an explicit resource dictionary in an assembly or on a class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage (setting key, compact)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage (setting key, verbose)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage (requesting resource, compact)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage (requesting resource, verbose)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The name of the public <ph id="ph1">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> type that is defined in the resource assembly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The key for the resource.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When resources are looked up, <ph id="ph1">`targetID`</ph> will be analogous to the <bpt id="p1">[</bpt>x:Key Directive<ept id="p1">](../../../../docs/framework/xaml-services/x-key-directive.md)</ept> of the resource.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As seen in the usages above, a {<ph id="ph1">`ComponentResourceKey`</ph>} markup extension usage is found in two places:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The definition of a key within a theme resource dictionary, as provided by a control author.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Accessing a theme resource from the assembly, when you are retemplating the control but want to use property values that come from resources provided by the control's themes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For referencing component resources that come from themes, it is generally recommended that you use <ph id="ph1">`{DynamicResource}`</ph> rather than <ph id="ph2">`{StaticResource}`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is shown in the usages.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{DynamicResource}`</ph> is recommended because the theme itself can be changed by the user.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you want the component resource that most closely matches the control author's intent for supporting a theme, you should enable your component resource reference to be dynamic also.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> identifies a type that exists in the target assembly where the resource is actually defined.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ComponentResourceKey`</ph> can be defined and used independently of knowing exactly where the <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> is defined, but eventually must resolve the type through referenced assemblies.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A common usage for <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> is to define keys that are then exposed as members of a class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For this usage, you use the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> class constructor, not the markup extension.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph>, or the "Defining and Referencing Keys for Theme Resources" section of the topic <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For both establishing keys and referencing keyed resources, attribute syntax is commonly used for the <ph id="ph1">`ComponentResourceKey`</ph> markup extension.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The compact syntax shown relies on the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.%23ctor%2A?displayProperty=fullName&gt;</ph> constructor signature and positional parameter usage of a markup extension.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The order in which the <ph id="ph1">`targetTypeName`</ph> and <ph id="ph2">`targetID`</ph> are given is important.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The verbose syntax relies on the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.%23ctor%2A?displayProperty=fullName&gt;</ph> default constructor, and then sets the <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> in a way that is analogous to a true attribute syntax on an object element.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the verbose syntax, the order in which the properties are set is not important.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The relationship and mechanisms of these two alternatives (compact and verbose) is described in more detail in the topic <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Technically, the value for <ph id="ph1">`targetID`</ph> can be any object, it does not have to be a string.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>However, the most common usage in WPF is to align the <ph id="ph1">`targetID`</ph> value with forms that are strings, and where such strings are valid in the <bpt id="p1">[</bpt>XamlName Grammar<ept id="p1">](../../../../docs/framework/xaml-services/xamlname-grammar.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ComponentResourceKey`</ph> can be used in object element syntax.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this case, specifying the value of both the <ph id="ph1">&lt;xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ComponentResourceKey.ResourceId%2A&gt;</ph> properties is required to properly initialize the extension.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> reader implementation, the handling for this markup extension is defined by the <ph id="ph3">&lt;xref:System.Windows.ComponentResourceKey&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ComponentResourceKey`</ph> is a markup extension.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than just putting type converters on certain types or properties.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>All markup extensions in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> use the { and } characters in their attribute syntax, which is the convention by which a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor recognizes that a markup extension must process the attribute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Control Authoring Overview<ept id="p1">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XAML Overview (WPF)<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>