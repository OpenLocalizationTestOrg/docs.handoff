<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a95be06de4cd4aaadd1114ec77cf005886135780</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\net-native\getting-started-with-net-native.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01b7f14cd25cfbbd648ae557565d18c67d47747b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e630866f00e96e87840598d1cbd568158e9c039f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Getting Started with .NET Native | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Getting Started with .NET Native</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Whether you are writing a new Windows app for Windows 10 or you are migrating an existing Windows Store app, you can follow the same set of procedures.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To create a <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> app, follow these steps:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Develop a Universal Windows Platform (UWP) app that targets Windows 10<ept id="p1">](#Step1)</ept>, and test the debug builds of your app to ensure that it works properly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Handle additional reflection and serialization usage<ept id="p1">](#Step4)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deploy and test the release builds of your app<ept id="p1">](#Step5)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Manually resolve missing metadata<ept id="p1">](#Step6)</ept>, and repeat <bpt id="p2">[</bpt>step 3<ept id="p2">](#Step5)</ept> until all issues are resolved.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you are migrating an existing Windows Store app to <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, be sure to review <bpt id="p1">[</bpt>Migrating Your Windows Store App to .NET Native<ept id="p1">](../../../docs/framework/net-native/migrating-your-windows-store-app-to-net-native.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Step 1: Develop and test debug builds of your UWP app</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Whether you are developing a new app or migrating an existing one, you follow the same process as for any Windows app.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a new UWP project in Visual Studio by using the Universal Windows app template for Visual C# or Visual Basic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By default, all UWP applications target the CoreCLR and their release builds are compiled by using the .NET Native tool chain.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note that there are some known compatibility issues between compiling UWP app projects with the .NET Native tool chain and without it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Refer to the <bpt id="p1">[</bpt>migration guide<ept id="p1">](../../../docs/framework/net-native/migrating-your-windows-store-app-to-net-native.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can now write C# or Visual Basic code against the <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> surface area that runs on the local system (or in the simulator).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As you develop your app, note any use of serialization or reflection in your code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By default, debug builds are JIT-compiled to enable rapid F5 deployment, while release builds are compiled by using the <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> pre-compilation technology.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This means you should build and test the debug builds of your app to ensure that they work normally before compiling them with the .NET Native tool chain.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Step 2: Handle additional reflection and serialization usage</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A runtime directives file, Default.rd.xml, is automatically added to your project when you create it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you develop in C#, it is found in your project's <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you develop in Visual Basic, it is found in your project's <bpt id="p1">**</bpt>My Project<ept id="p1">**</ept> folder.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For an overview of the .NET Native compilation process that provides background on why a runtime directives file is needed, see <bpt id="p1">[</bpt>.NET Native and Compilation<ept id="p1">](../../../docs/framework/net-native/net-native-and-compilation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The runtime directives file is used to define the metadata that your app needs at run time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In some cases, the default version of the file may be adequate.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, some code that relies on serialization or reflection may require additional entries in the runtime directives file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Serialization<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There are two categories of serializers, and both may require additional entries in the runtime directives file:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Non-reflection based serializers.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The serializers found in the .NET Framework class library, such as the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> classes, do not rely on reflection.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, they do require that code be generated based on the object to be serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see the "Microsoft Serializers" section in <bpt id="p1">[</bpt>Serialization and Metadata<ept id="p1">](../../../docs/framework/net-native/serialization-and-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Third-party serializers.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Third-party serialization libraries, the most common of which is the Newtonsoft JSON serializer, are generally reflection-based and require entries in the *.rd.xml file to support object serialization and deserialization.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see the "Third-Party Serializers" section in <bpt id="p1">[</bpt>Serialization and Metadata<ept id="p1">](../../../docs/framework/net-native/serialization-and-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Methods that rely on reflection<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In some cases, the use of reflection in code is not obvious.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Some common APIs or programming patterns aren't considered part of the reflection API but rely on reflection to execute successfully.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This includes the following type instantiation and method construction methods:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type.MakeGenericType%2A?displayProperty=fullName&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Array.CreateInstance%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Type.MakeArrayType%2A?displayProperty=fullName&gt;</ph> methods</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>APIs That Rely on Reflection<ept id="p1">](../../../docs/framework/net-native/apis-that-rely-on-reflection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Type names used in runtime directives files must be fully qualified.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, the file must specify "System.String" instead of "String".</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Step 3: Deploy and test the release builds of your app</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>After you’ve updated the runtime directives file, you can rebuild and deploy release builds of your app.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>.NET Native binaries are placed in the ILC.out subdirectory of the directory specified in the <bpt id="p1">**</bpt>Build output path<ept id="p1">**</ept> text box of  the project's <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> dialog box, <bpt id="p3">**</bpt>Compile<ept id="p3">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Binaries that aren't in this folder haven't been compiled with .NET Native.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Test your app thoroughly, and test all scenarios, including failure scenarios, on each of its target platforms.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If your app doesn’t work properly (particularly in cases where it throws <bpt id="p1">[</bpt>MissingMetadataException<ept id="p1">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> or <bpt id="p2">[</bpt>MissingInteropDataException<ept id="p2">](../../../docs/framework/net-native/missinginteropdataexception-class-net-native.md)</ept> exceptions at run time), follow the instructions in the next section, <bpt id="p3">[</bpt>Step 5: Manually resolve missing metadata<ept id="p3">](#Step6)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enabling first-chance exceptions may help you find these bugs.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When you’ve tested and debugged the debug builds of your app and you’re confident that you’ve eliminated the <bpt id="p1">[</bpt>MissingMetadataException<ept id="p1">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> and <bpt id="p2">[</bpt>MissingInteropDataException<ept id="p2">](../../../docs/framework/net-native/missinginteropdataexception-class-net-native.md)</ept> exceptions, you should test your app as an optimized <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> app.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To do this, change your active project configuration from <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Release<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Step 4: Manually resolve missing metadata</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The most common failure you'll encounter with <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> that you don't encounter on the desktop is a runtime <bpt id="p1">[</bpt>MissingMetadataException<ept id="p1">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept>, <bpt id="p2">[</bpt>MissingInteropDataException<ept id="p2">](../../../docs/framework/net-native/missinginteropdataexception-class-net-native.md)</ept>, or <bpt id="p3">[</bpt>MissingRuntimeArtifactException<ept id="p3">](../../../docs/framework/net-native/missingruntimeartifactexception-class-net-native.md)</ept> exception.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In some cases, the absence of metadata can manifest itself in unpredictable behavior or even in app failures.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This section discusses how you can debug and resolve these exceptions by adding directives to the runtime directives file.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For information about the format of runtime directives, see <bpt id="p1">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>After you’ve added runtime directives, you should <bpt id="p1">[</bpt>deploy and test your app<ept id="p1">](#Step5)</ept> again and resolve any new <bpt id="p2">[</bpt>MissingMetadataException<ept id="p2">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept>, <bpt id="p3">[</bpt>MissingInteropDataException<ept id="p3">](../../../docs/framework/net-native/missinginteropdataexception-class-net-native.md)</ept>, and  <bpt id="p4">[</bpt>MissingRuntimeArtifactException<ept id="p4">](../../../docs/framework/net-native/missingruntimeartifactexception-class-net-native.md)</ept> exceptions until you encounter no more exceptions.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Specify the runtime directives at a high level to enable your app to be resilient to code changes.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>We recommend adding runtime directives at the namespace and type levels rather than the member level.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Note that there may be a tradeoff between resiliency and larger binaries with longer compile times.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When addressing a missing metadata exception, consider these issues:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>What was the app trying to do before the exception?</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, was it data binding, serializing or deserializing data, or directly using the reflection API?</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Is this an isolated case, or do you believe you'll encounter the same issue for other types?</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, a <bpt id="p1">[</bpt>MissingMetadataException<ept id="p1">](../../../docs/framework/net-native/missingmetadataexception-class-net-native.md)</ept> exception is thrown when serializing a type in the app’s object model.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If you know other types that will be serialized, you can add runtime directives for those types (or for their containing namespaces, depending on how well the code is organized) at the same time.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Can you rewrite the code so it doesn’t use reflection?</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, does the code use the <ph id="ph1">`dynamic`</ph> keyword when you know what type to expect?</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Does the code call a method that depends on reflection when some better alternative is available?</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For additional information about handling problems that stem from differences in reflection and the availability of metadata in desktop apps and <ph id="ph1">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph>, see <bpt id="p1">[</bpt>APIs That Rely on Reflection<ept id="p1">](../../../docs/framework/net-native/apis-that-rely-on-reflection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For some specific examples of handling exceptions and other issues that occur when testing your app, see:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Example: Handling Exceptions When Binding Data<ept id="p1">](../../../docs/framework/net-native/example-handling-exceptions-when-binding-data.md)</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Example: Troubleshooting Dynamic Programming<ept id="p1">](../../../docs/framework/net-native/example-troubleshooting-dynamic-programming.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Exceptions in .NET Native Apps<ept id="p1">](../../../docs/framework/net-native/runtime-exceptions-in-net-native-apps.md)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>NIB: .NET Native Setup and Configuration<ept id="p1">](http://msdn.microsoft.com/en-us/7c9bc375-8b87-4c33-bede-72d513e362ec)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>.NET Native and Compilation<ept id="p1">](../../../docs/framework/net-native/net-native-and-compilation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Reflection and .NET Native<ept id="p1">](../../../docs/framework/net-native/reflection-and-net-native.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>APIs That Rely on Reflection<ept id="p1">](../../../docs/framework/net-native/apis-that-rely-on-reflection.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Serialization and Metadata<ept id="p1">](../../../docs/framework/net-native/serialization-and-metadata.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Migrating Your Windows Store App to .NET Native<ept id="p1">](../../../docs/framework/net-native/migrating-your-windows-store-app-to-net-native.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>