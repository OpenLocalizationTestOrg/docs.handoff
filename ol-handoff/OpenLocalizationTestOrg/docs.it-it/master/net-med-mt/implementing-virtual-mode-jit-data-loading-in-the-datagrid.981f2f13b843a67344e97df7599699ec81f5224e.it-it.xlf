<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="implementing-virtual-mode-jit-data-loading-in-the-datagrid.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bd2f479f0ccb653f82628df3cbd3141a587ae91</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\implementing-virtual-mode-jit-data-loading-in-the-datagrid.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84c41e023a5817aabe241b192129f64ec89c0364</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b3659cb06fea7b4e64acd0c327b66a323d217c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Implementing Virtual Mode with Just-In-Time Data Loading in the Windows Forms DataGridView Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing Virtual Mode with Just-In-Time Data Loading in the Windows Forms DataGridView Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>One reason to implement virtual mode in the <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control is to retrieve data only as it is needed.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>just-in-time data loading<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you are working with a very large table in a remote database, for example, you might want to avoid startup delays by retrieving only the data that is necessary for display and retrieving additional data only when the user scrolls new rows into view.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If the client computers running your application have a limited amount of memory available for storing data, you might also want to discard unused data when retrieving new values from the database.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following sections describe how to use a <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control with a just-in-time cache.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To copy the code in this topic as a single listing, see <bpt id="p1">[</bpt>How to: Implement Virtual Mode with Just-In-Time Data Loading in the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/virtual-mode-with-just-in-time-data-loading-in-the-datagrid.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Form</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following code example defines a form containing a read-only <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control that interacts with a <ph id="ph2">`Cache`</ph> object through a <ph id="ph3">&lt;xref:System.Windows.Forms.DataGridView.CellValueNeeded&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Cache`</ph> object manages the locally stored values and uses a <ph id="ph2">`DataRetriever`</ph> object to retrieve values from the Orders table of the sample Northwind database.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataRetriever`</ph> object, which implements the <ph id="ph2">`IDataPageRetriever`</ph> interface required by the <ph id="ph3">`Cache`</ph> class, is also used to initialize the <ph id="ph4">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control rows and columns.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IDataPageRetriever`</ph>, <ph id="ph2">`DataRetriever`</ph>, and <ph id="ph3">`Cache`</ph> types are described later in this topic.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Storing sensitive information, such as a password, within the connection string can affect the security of your application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Using Windows Authentication (also known as integrated security) is a more secure way to control access to a database.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Protecting Connection Information<ept id="p1">](../../../../docs/framework/data/adonet/protecting-connection-information.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The IDataPageRetriever Interface</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following code example defines the <ph id="ph1">`IDataPageRetriever`</ph> interface, which is implemented by the <ph id="ph2">`DataRetriever`</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The only method declared in this interface is the <ph id="ph1">`SupplyPageOfData`</ph> method, which requires an initial row index and a count of the number of rows in a single page of data.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These values are used by the implementer to retrieve a subset of data from a data source.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Cache`</ph> object uses an implementation of this interface during construction to load two initial pages of data.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Whenever an uncached value is needed, the cache discards one of these pages and requests a new page containing the value from the <ph id="ph1">`IDataPageRetriever`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The DataRetriever Class</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code example defines the <ph id="ph1">`DataRetriever`</ph> class, which implements the <ph id="ph2">`IDataPageRetriever`</ph> interface to retrieve pages of data from a server.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataRetriever`</ph> class also provides <ph id="ph2">`Columns`</ph> and <ph id="ph3">`RowCount`</ph> properties, which the <ph id="ph4">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control uses to create the necessary columns and to add the appropriate number of empty rows to the <ph id="ph5">&lt;xref:System.Windows.Forms.DataGridView.Rows%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Adding the empty rows is necessary so that the control will behave as though it contains all the data in the table.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means that the scroll box in the scroll bar will have the appropriate size, and the user will be able to access any row in the table.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The rows are filled by the <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView.CellValueNeeded&gt;</ph> event handler only when they are scrolled into view.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The Cache Class</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code example defines the <ph id="ph1">`Cache`</ph> class, which manages two pages of data populated through an <ph id="ph2">`IDataPageRetriever`</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Cache`</ph> class defines an inner <ph id="ph2">`DataPage`</ph> structure, which contains a <ph id="ph3">&lt;xref:System.Data.DataTable&gt;</ph> to store the values in a single cache page and which calculates the row indexes that represent the upper and lower boundaries of the page.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Cache`</ph> class loads two pages of data at construction time.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Whenever the <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView.CellValueNeeded&gt;</ph> event requests a value, the <ph id="ph2">`Cache`</ph> object determines if the value is available in one of its two pages and, if so, returns it.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the value is not available locally, the <ph id="ph1">`Cache`</ph> object determines which of its two pages is farthest from the currently displayed rows and replaces the page with a new one containing the requested value, which it then returns.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Assuming that the number of rows in a data page is the same as the number of rows that can be displayed on screen at once, this model allows users paging through the table to efficiently return to the most recently viewed page.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Additional Considerations</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The previous code examples are provided as a demonstration of just-in-time data loading.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You will need to modify the code for your own needs to achieve maximum efficiency.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>At minimum, you will need to choose an appropriate value for the number of rows per page of data in the cache.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This value is passed into the <ph id="ph1">`Cache`</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The number of rows per page should be no less than the number of rows that can be displayed simultaneously in your <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For best results, you will need to conduct performance testing and usability testing to determine the requirements of your system and your users.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Several factors that you will need to take into consideration include the amount of memory in the client machines running your application, the available bandwidth of the network connection used, and the latency of the server used.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The bandwidth and latency should be determined at times of peak usage.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To improve the scrolling performance of your application, you can increase the amount of data stored locally.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To improve startup time, however, you must avoid loading too much data initially.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You may want to modify the <ph id="ph1">`Cache`</ph> class to increase the number of data pages it can store.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Using more data pages can improve scrolling efficiency, but you will need to determine the ideal number of rows in a data page, depending on the available bandwidth and the server latency.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>With smaller pages, the server will be accessed more frequently, but will take less time to return the requested data.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If latency is more of an issue than bandwidth, you may want to use larger data pages.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Performance Tuning in the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/performance-tuning-in-the-windows-forms-datagridview-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Best Practices for Scaling the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Virtual Mode in the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/virtual-mode-in-the-windows-forms-datagridview-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Implementing Virtual Mode in the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/implementing-virtual-mode-wf-datagridview-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement Virtual Mode with Just-In-Time Data Loading in the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/virtual-mode-with-just-in-time-data-loading-in-the-datagrid.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>