<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3152f0b42c931a94a0d46512b1d2c2814140b273</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\marshaling-classes-structures-and-unions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fcc6a5698ae7fef6616e8569694ac6e290894074</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a838ce2e83a2025323390c6b56ca298741d97b8c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Marshaling Classes, Structures, and Unions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Marshaling Classes, Structures, and Unions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Classes and structures are similar in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Both can have fields, properties, and events.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They can also have static and nonstatic methods.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One notable difference is that structures are value types and classes are reference types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following table lists marshaling options for classes, structures, and unions; describes their usage; and provides a link to the corresponding platform invoke sample.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Sample</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Class by value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Passes a class with integer members as an In/Out parameter, like the managed case.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>SysTime sample</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Structure by value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Passes structures as In parameters.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Structures sample</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Structure by reference.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Passes structures as In/Out parameters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>OSInfo sample</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Structure with nested structures (flattened).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Passes a class that represents a structure with nested structures in the unmanaged function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The structure is flattened to one big structure in the managed prototype.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>FindFile sample</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Structure with a pointer to another structure.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Passes a structure that contains a pointer to a second structure as a member.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Structures Sample</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Array of structures with integers by value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Passes an array of structures that contain only integers as an In/Out parameter.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Members of the array can be changed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Arrays Sample</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Array of structures with integers and strings by reference.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Passes an array of structures that contain integers and strings as an Out parameter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The called function allocates memory for the array.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>OutArrayOfStructs Sample</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Unions with value types.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Passes unions with value types (integer and double).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Unions sample</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Unions with mixed types.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Passes unions with mixed types (integer and string).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Unions sample</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Null values in structure.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Passes a null reference (<bpt id="p1">**</bpt>Nothing<ept id="p1">**</ept> in Visual Basic) instead of a reference to a value type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>HandleRef sample</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Structures sample</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to pass a structure that points to a second structure, pass a structure with an embedded structure, and pass a structure with an embedded array.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The Structs sample uses the following unmanaged functions, shown with their original function declaration:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TestStructInStruct<ept id="p1">**</ept> exported from PinvokeLib.dll.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TestStructInStruct3<ept id="p1">**</ept> exported from PinvokeLib.dll.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TestArrayInStruct<ept id="p1">**</ept> exported from PinvokeLib.dll.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>PinvokeLib.dll<ept id="p1">](http://msdn.microsoft.com/en-us/5d1438d7-9946-489d-8ede-6c694a08f614)</ept> is a custom unmanaged library that contains implementations for the previously listed functions and four structures: <bpt id="p2">**</bpt>MYPERSON<ept id="p2">**</ept>, <bpt id="p3">**</bpt>MYPERSON2<ept id="p3">**</ept>, <bpt id="p4">**</bpt>MYPERSON3<ept id="p4">**</ept>, and <bpt id="p5">**</bpt>MYARRAYSTRUCT<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>These structures contain the following elements:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The managed <ph id="ph1">`MyPerson`</ph>, <ph id="ph2">`MyPerson2`</ph>, <ph id="ph3">`MyPerson3`</ph>, and <ph id="ph4">`MyArrayStruct`</ph> structures have the following characteristic:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyPerson`</ph> contains only string members.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CharSet<ept id="p1">](../../../docs/framework/interop/specifying-a-character-set.md)</ept> field sets the strings to ANSI format when passed to the unmanaged function.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyPerson2`</ph> contains an <bpt id="p1">**</bpt>IntPtr<ept id="p1">**</ept> to the <ph id="ph2">`MyPerson`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>IntPtr<ept id="p1">**</ept> type replaces the original pointer to the unmanaged structure because .NET Framework applications do not use pointers unless the code is marked <bpt id="p2">**</bpt>unsafe<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyPerson3`</ph> contains <ph id="ph2">`MyPerson`</ph> as an embedded structure.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A structure embedded within another structure can be flattened by placing the elements of the embedded structure directly into the main structure, or it can be left as an embedded structure, as is done in this sample.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyArrayStruct`</ph> contains an array of integers.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute sets the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration value to <bpt id="p1">**</bpt>ByValArray<ept id="p1">**</ept>, which is used to indicate the number of elements in the array.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For all structures in this sample, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute is applied to ensure that the members are arranged in memory sequentially, in the order in which they appear.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LibWrap`</ph> class contains managed prototypes for the <ph id="ph2">`TestStructInStruct`</ph>, <ph id="ph3">`TestStructInStruct3`</ph>, and <ph id="ph4">`TestArrayInStruct`</ph> methods called by the <ph id="ph5">`App`</ph> class.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Each prototype declares a single parameter, as follows:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestStructInStruct`</ph> declares a reference to type <ph id="ph2">`MyPerson2`</ph> as its parameter.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestStructInStruct3`</ph> declares type <ph id="ph2">`MyPerson3`</ph> as its parameter and passes the parameter by value.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestArrayInStruct`</ph> declares a reference to type <ph id="ph2">`MyArrayStruct`</ph> as its parameter.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Structures as arguments to methods are passed by value unless the parameter contains the <bpt id="p1">**</bpt>ref<ept id="p1">**</ept> (<bpt id="p2">**</bpt>ByRef<ept id="p2">**</ept> in Visual Basic) keyword.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`TestStructInStruct`</ph> method passes a reference (the value of an address) to an object of type <ph id="ph2">`MyPerson2`</ph> to unmanaged code.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To manipulate the structure that <ph id="ph1">`MyPerson2`</ph> points to, the sample creates a buffer of a specified size and returns its address by combining the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Next, the sample copies the content of the managed structure to the unmanaged buffer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Finally, the sample uses the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A?displayProperty=fullName&gt;</ph> method to marshal data from the unmanaged buffer to a managed object and the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName&gt;</ph> method to free the unmanaged block of memory.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Declaring Prototypes</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#23<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/structures.cpp#23)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#23<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/structures.cs#23)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#23<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/structures.vb#23)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Calling Functions</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#24<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/structures.cpp#24)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#24<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/structures.cs#24)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#24<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/structures.vb#24)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>FindFile sample</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to pass a structure that contains a second, embedded structure to an unmanaged function.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It also demonstrates how to use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute to declare a fixed-length array within the structure.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this sample, the embedded structure elements are added to the parent structure.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For a sample of an embedded structure that is not flattened, see <bpt id="p1">[</bpt>Structures Sample<ept id="p1">](http://msdn.microsoft.com/en-us/96a62265-dcf9-4608-bc0a-1f762ab9f48e)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The FindFile sample uses the following unmanaged function, shown with its original function declaration:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FindFirstFile<ept id="p1">**</ept> exported from Kernel32.dll.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The original structure passed to the function contains the following elements:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this sample, the <ph id="ph1">`FindData`</ph> class contains a corresponding data member for each element of the original structure and the embedded structure.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In place of two original character buffers, the class substitutes strings.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MarshalAsAttribute<ept id="p1">**</ept> sets the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration to <bpt id="p2">**</bpt>ByValTStr<ept id="p2">**</ept>, which is used to identify the inline, fixed-length character arrays that appear within the unmanaged structures.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LibWrap`</ph> class contains a managed prototype of the <ph id="ph2">`FindFirstFile`</ph> method, which passes the <ph id="ph3">`FindData`</ph> class as a parameter.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The parameter must be declared with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> attributes because classes, which are reference types, are passed as In parameters by default.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Declaring Prototypes</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#17<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/findfile.cpp#17)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#17<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/findfile.cs#17)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#17<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/findfile.vb#17)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Calling Functions</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#18<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/findfile.cpp#18)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#18<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/findfile.cs#18)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#18<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/findfile.vb#18)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Unions sample</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to pass structures containing only value types, and structures containing a value type and a string as parameters to an unmanaged function expecting a union.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A union represents a memory location that can be shared by two or more variables.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The Unions sample uses the following unmanaged function, shown with its original function declaration:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TestUnion<ept id="p1">**</ept> exported from PinvokeLib.dll.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>PinvokeLib.dll<ept id="p1">](http://msdn.microsoft.com/en-us/5d1438d7-9946-489d-8ede-6c694a08f614)</ept> is a custom unmanaged library that contains an implementation for the previously listed function and two unions, <bpt id="p2">**</bpt>MYUNION<ept id="p2">**</ept> and <bpt id="p3">**</bpt>MYUNION2<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The unions contain the following elements:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In managed code, unions are defined as structures.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyUnion`</ph> structure contains two value types as its members: an integer and a double.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute is set to control the precise position of each data member.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.FieldOffsetAttribute&gt;</ph> attribute provides the physical position of fields within the unmanaged representation of a union.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Notice that both members have the same offset values, so the members can define the same piece of memory.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyUnion2_1`</ph> and <ph id="ph2">`MyUnion2_2`</ph> contain a value type (integer) and a string, respectively.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>In managed code, value types and reference types are not permitted to overlap.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This sample uses method overloading to enable the caller to use both types when calling the same unmanaged function.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The layout of <ph id="ph1">`MyUnion2_1`</ph> is explicit and has a precise offset value.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In contrast, <ph id="ph1">`MyUnion2_2`</ph> has a sequential layout, because explicit layouts are not permitted with reference types.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute sets the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.UnmanagedType&gt;</ph> enumeration to <bpt id="p1">**</bpt>ByValTStr<ept id="p1">**</ept>, which is used to identify the inline, fixed-length character arrays that appear within the unmanaged representation of the union.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LibWrap`</ph> class contains the prototypes for the <ph id="ph2">`TestUnion`</ph> and <ph id="ph3">`TestUnion2`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestUnion2`</ph> is overloaded to declare <ph id="ph2">`MyUnion2_1`</ph> or <ph id="ph3">`MyUnion2_2`</ph> as parameters.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Declaring Prototypes</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#28<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/unions.cpp#28)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#28<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/unions.cs#28)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#28<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/unions.vb#28)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Calling Functions</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#29<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/unions.cpp#29)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#29<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/unions.cs#29)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#29<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/unions.vb#29)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>SysTime sample</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to pass a pointer to a class to an unmanaged function that expects a pointer to a structure.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The SysTime sample uses the following unmanaged function, shown with its original function declaration:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetSystemTime<ept id="p1">**</ept> exported from Kernel32.dll.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The original structure passed to the function contains the following elements:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In this sample, the <ph id="ph1">`SystemTime`</ph> class contains the elements of the original structure represented as class members.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.StructLayoutAttribute&gt;</ph> attribute is set to ensure that the members are arranged in memory sequentially, in the order in which they appear.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LibWrap`</ph> class contains a managed prototype of the <ph id="ph2">`GetSystemTime`</ph> method, which passes the <ph id="ph3">`SystemTime`</ph> class as an In/Out parameter by default.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The parameter must be declared with the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> attributes because classes, which are reference types, are passed as In parameters by default.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For the caller to receive the results, these <bpt id="p1">[</bpt>directional attributes<ept id="p1">](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2)</ept> must be applied explicitly.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`App`</ph> class creates a new instance of the <ph id="ph2">`SystemTime`</ph> class and accesses its data fields.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Code Samples</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#25<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/systime.cpp#25)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#25<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/systime.cs#25)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#25<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/systime.vb#25)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>OutArrayOfStructs sample</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This sample shows how to pass an array of structures that contains integers and strings as Out parameters to an unmanaged function.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to call a native function by using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class and by using unsafe code.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This sample uses a wrapper functions and platform invokes defined in <bpt id="p1">[</bpt>PinvokeLib.dll<ept id="p1">](http://msdn.microsoft.com/en-us/5d1438d7-9946-489d-8ede-6c694a08f614)</ept>, also provided in the source files.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">`TestOutArrayOfStructs`</ph> function and the <ph id="ph2">`MYSTRSTRUCT2`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The structure contains the following elements:</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MyStruct`</ph> class contains a string object of ANSI characters.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.CharSet&gt;</ph> field specifies ANSI format.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyUnsafeStruct`</ph>, is a structure containing an <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> type instead of a string.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`LibWrap`</ph> class contains the overloaded <ph id="ph2">`TestOutArrayOfStructs`</ph> prototype method.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If a method declares a pointer as a parameter, the class should be marked with the <ph id="ph1">`unsafe`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph> cannot use unsafe code, the overloaded method, unsafe modifier, and the <ph id="ph2">`MyUnsafeStruct`</ph> structure are unnecessary.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`App`</ph> class implements the <ph id="ph2">`UsingMarshaling`</ph> method, which performs all the tasks necessary to pass the array.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The array is marked with the <ph id="ph1">`out`</ph> (<ph id="ph2">`ByRef`</ph> in Visual Basic) keyword to indicate that data passes from callee to caller.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The implementation uses the following <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class methods:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A&gt;</ph> to marshal data from the unmanaged buffer to a managed object.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A&gt;</ph> to release the memory reserved for strings in the structure.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A&gt;</ph> to release the memory reserved for the array.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>As previously mentioned, C# allows unsafe code and <ph id="ph1">[!INCLUDE[vbprvblong](../../../includes/vbprvblong-md.md)]</ph> does not.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In the C# sample, <ph id="ph1">`UsingUnsafePointer`</ph> is an alternative method implementation that uses pointers instead of the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class to pass back the array containing the <ph id="ph3">`MyUnsafeStruct`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Declaring Prototypes</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#20<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/outarrayofstructs.cpp#20)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#20<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/outarrayofstructs.cs#20)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#20<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/outarrayofstructs.vb#20)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Calling Functions</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.Interop.Marshaling#21<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.interop.marshaling/cpp/outarrayofstructs.cpp#21)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.Interop.Marshaling#21<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.interop.marshaling/cs/outarrayofstructs.cs#21)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.Interop.Marshaling#21<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.interop.marshaling/vb/outarrayofstructs.vb#21)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Marshaling Data with Platform Invoke<ept id="p1">](../../../docs/framework/interop/marshaling-data-with-platform-invoke.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Platform Invoke Data Types<ept id="p1">](http://msdn.microsoft.com/en-us/16014d9f-d6bd-481e-83f0-df11377c550f)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Marshaling Strings<ept id="p1">](../../../docs/framework/interop/marshaling-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Marshaling Arrays of Types<ept id="p1">](http://msdn.microsoft.com/en-us/049b1c1b-228f-4445-88ec-91bc7fd4b1e8)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>