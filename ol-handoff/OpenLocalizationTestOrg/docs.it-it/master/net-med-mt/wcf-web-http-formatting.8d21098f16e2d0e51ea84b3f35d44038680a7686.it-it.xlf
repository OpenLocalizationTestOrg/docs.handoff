<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d536b4f908516e90d72a8eb5dade1c21448bafb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\wcf-web-http-formatting.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50db022a9f42ebb9eb4319e8fdd2c21b25cee135</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01d517273eeb69a667dff3bc23a62e71a086cad8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WCF Web HTTP Formatting | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WCF Web HTTP Formatting</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The WCF Web HTTP programming model allows you to dynamically determine the best format for a service operation to return its response in.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Two methods for determining an appropriate format are supported: automatic and explicit.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Automatic Formatting</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When enabled, automatic formatting chooses the best format in which to return the response.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It determines the best format by checking the following, in order:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The media types in the request message’s Accept header.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The content-type of the request message.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The default format setting in the operation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default format setting in the WebHttpBehavior.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the request message contains an Accept header the <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> infrastructure searches for a type that it supports.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Accept`</ph> header specifies priorities for its media types, they are honored.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If no suitable format is found in the <ph id="ph1">`Accept`</ph> header, the content-type of the request message is used.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If no suitable content-type is specified, the default format setting for the operation is used.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The default format is set with the <ph id="ph1">`ResponseFormat`</ph> parameter of the <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> attributes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If no default format is specified on the operation, the value of the <ph id="ph1">&lt;xref:System.ServiceModel.Description.WebHttpBehavior.DefaultOutgoingResponseFormat%2A&gt;</ph> property is used.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Automatic formatting relies on the <ph id="ph1">&lt;xref:System.ServiceModel.Description.WebHttpBehavior.AutomaticFormatSelectionEnabled%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When this property is set to <ph id="ph1">`true`</ph>, the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> infrastructure determines the best format to use.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Automatic format selection is disabled by default for backwards compatibility.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Automatic format selection can be enabled programmatically or through configuration.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example shows how to enable automatic format selection in code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Automatic formatting can also be enabled through configuration.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can set the <ph id="ph1">&lt;xref:System.ServiceModel.Description.WebHttpBehavior.AutomaticFormatSelectionEnabled%2A&gt;</ph> property directly on the <ph id="ph2">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph> or using the <ph id="ph3">&lt;xref:System.ServiceModel.Description.WebHttpEndpoint&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example shows how to enable the automatic format selection on the <ph id="ph1">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to enable automatic format selection using <ph id="ph1">&lt;xref:System.ServiceModel.Description.WebHttpEndpoint&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Explicit Formatting</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As the name implies, in explicit formatting the developer determines the best format to use within the operation code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the best format is XML or JSON the developer sets <ph id="ph1">&lt;xref:System.ServiceModel.Web.OutgoingWebResponseContext.Format%2A&gt;</ph> to either <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebMessageFormat&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebMessageFormat&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.Web.OutgoingWebResponseContext.Format%2A&gt;</ph> property is not explicitly set, then the operation’s default format is used.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example checks the format query string parameter for a format to use.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If it has been specified, it sets the operation’s format using <ph id="ph1">&lt;xref:System.ServiceModel.Web.OutgoingWebResponseContext.Format%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you need to support formats other than XML or JSON, define your operation to have a return type of <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Within the operation code, determine the appropriate format to use and then create a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> object using one of the following methods:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Each of these methods takes content and creates a message with the appropriate format.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WebOperationContext.Current.IncomingRequest.GetAcceptHeaderElements`</ph> method can be used to get a list of formats preferred by the client in order of decreasing preference.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example shows how to use <ph id="ph1">`WebOperationContext.Current.IncomingRequest.GetAcceptHeaderElements`</ph> to determine the format to use and then uses the appropriate create response method to create the response message.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UriTemplate&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UriTemplateMatch&gt;</ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Web HTTP Programming Model<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UriTemplate and UriTemplateTable<ept id="p1">](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Web HTTP Programming Model Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Web HTTP Programming Object Model<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-object-model.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>