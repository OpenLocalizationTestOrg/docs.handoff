<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="tlbexp-exe-type-library-exporter.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">059400ff2f925bdb3532c9792a4c725950982a32</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\tlbexp-exe-type-library-exporter.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91182034b2c6d4edc062c74ee9dc2d9af036c391</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa98af0c556c5a973a6084041d1feebf72896bdf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Tlbexp.exe (Type Library Exporter) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tlbexp.exe (Type Library Exporter)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Type Library Exporter generates a type library that describes the types defined in a common language runtime assembly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tool is automatically installed with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To run the tool, use the Developer Command Prompt (or the Visual Studio Command Prompt in Windows 7).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>assemblyName<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The assembly for which to export a type library.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/asmpath:<ept id="p1">**</ept> <bpt id="p2">*</bpt>directory<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifies the location to search for assemblies.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you use this option, you must explicitly specify the locations to search for referenced assemblies, including the current directory.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When you use the <bpt id="p1">**</bpt>asmpath<ept id="p1">**</ept> option, the Type Library Exporter will not look for an assembly in the global assembly cache (GAC).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/help<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/names:<ept id="p1">**</ept> <bpt id="p2">*</bpt>filename<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Specifies the capitalization of names in a type library.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>filename<ept id="p1">*</ept> argument is a text file.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Each line in the file specifies the capitalization of one name in the type library.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/nologo<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Suppresses the Microsoft startup banner display.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/oldnames<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Forces Tlbexp.exe to export decorated type names if there is a type name conflict.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that this was the default behavior in versions prior to the .NET Framework version 2.0.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/out:<ept id="p1">**</ept> <bpt id="p2">*</bpt>file<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Specifies the name of the type library file to generate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you omit this option, Tlbexp.exe generates a type library with the same name as the assembly (the actual assembly name, which might not necessarily be the same as the file containing the assembly) and a .tlb extension.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/silence:<ept id="p1">**</ept> <ph id="ph1">`warningnumber`</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Suppresses the display of the specified warning.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This option cannot be used with <bpt id="p1">**</bpt>/silent<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/silent<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Suppresses the display of success messages.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This option cannot be used with <bpt id="p1">**</bpt>/silence<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/tlbreference:<ept id="p1">**</ept> <bpt id="p2">*</bpt>typelibraryname<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Forces Tlbexp.exe to explicitly resolve type library references without consulting the registry.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, if assembly B references assembly A, you can use this option to provide an explicit type library reference, rather than relying on the type library specified in the registry.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Tlbexp.exe performs a version check to ensure that the type library version matches the assembly version; otherwise, it generates an error.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Note that the <bpt id="p1">**</bpt>tlbreference<ept id="p1">**</ept> option still consults the registry in cases where the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComImportAttribute&gt;</ph> attribute is applied to an interface that is then implemented by another type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/tlbrefpath:<ept id="p1">**</ept> <bpt id="p2">*</bpt>path<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Fully qualified path to a referenced type library.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/win32<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When compiling on a 64-bit computer, this option specifies that Tlbexp.exe generates a 32-bit type library.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/win64<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When compiling on a 32-bit computer, this option specifies that Tlbexp.exe generates a 64-bit type library.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/verbose<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specifies verbose mode; displays a list of any referenced assemblies for which a type library needs to be generated.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The command-line options for Tlbexp.exe are case-insensitive and can be supplied in any order.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You only need to specify enough of the option to uniquely identify it.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>/n<ept id="p1">**</ept> is equivalent to <bpt id="p2">**</bpt>/nologo<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>/o:<ept id="p3">**</ept> <bpt id="p4">*</bpt>outfile.tlb<ept id="p4">*</ept> is equivalent to <bpt id="p5">**</bpt>/out:<ept id="p5">**</ept> <bpt id="p6">*</bpt>outfile.tlb<ept id="p6">*</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Tlbexp.exe generates a type library that contains definitions of the types defined in the assembly.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Applications such as Visual Basic 6.0 can use the generated type library to bind to the .NET types defined in the assembly.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You cannot use Tlbexp.exe to export Windows metadata (.winmd) files.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Exporting Windows Runtime assemblies is not supported.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The entire assembly is converted at once.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You cannot use Tlbexp.exe to generate type information for a subset of the types defined in an assembly.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You cannot use Tlbexp.exe to produce a type library from an assembly that was imported using the <bpt id="p1">[</bpt>Type Library Importer (Tlbimp.exe)<ept id="p1">](../../../docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Instead, you should refer to the original type library that was imported with Tlbimp.exe.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can export a type library from an assembly that references assemblies that were imported using Tlbimp.exe.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See the examples section below.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Tlbexp.exe places generated type libraries in the current working directory or the directory specified for the output file.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A single assembly might cause several type libraries to be generated.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Tlbexp.exe generates a type library but does not register it.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This is in contrast to the <bpt id="p1">[</bpt>Assembly Registration tool (Regasm.exe)<ept id="p1">](../../../docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept>, which both generates and registers a type library.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To generate and register a type library with COM, use Regasm.exe.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you do not specify either the <ph id="ph1">`/win32`</ph> or <ph id="ph2">`/win64`</ph> option, Tlbexp.exe generates a 32-bit or 64-bit type library that corresponds to the type of computer on which you are performing the compilation (32-bit or 64-bit computer).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For cross-compilation purposes, you can use the <ph id="ph1">`/win64`</ph> option on a 32-bit computer to generate a 64-bit type library and you can use the <ph id="ph2">`/win32`</ph> option on a 64-bit computer to generate a 32-bit type library.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In 32-bit type libraries, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComTypes.SYSKIND&gt;</ph> value is set to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComTypes.SYSKIND&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In 64-bit type libraries, the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.ComTypes.SYSKIND&gt;</ph> value is set to <ph id="ph2">&lt;xref:System.Runtime.InteropServices.ComTypes.SYSKIND&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>All data type transformations (for example, pointer-sized data types such as <ph id="ph1">`IntPtr`</ph> and <ph id="ph2">`UIntPtr`</ph>) are converted appropriately.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph> attribute to specify a <ph id="ph2">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType&gt;</ph> value of <ph id="ph3">`VT_UNKOWN`</ph> or <ph id="ph4">`VT_DISPATCH`</ph>, Tlbexp.exe ignores any subsequent use of the <ph id="ph5">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, given the following signatures:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>the following type library is generated:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Note that Tlbexp.exe ignores the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType&gt;</ph> field.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Because type libraries cannot accommodate all the information found in assemblies, Tlbexp.exe might discard some data during the export process.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For an explanation of the transformation process and identification of the source of each piece of information emitted to a type library, see the <bpt id="p1">[</bpt>Assembly to Type Library Conversion Summary<ept id="p1">](http://msdn.microsoft.com/en-us/3a37eefb-a76c-4000-9080-7dbbf66a4896)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Note that the Type Library Exporter exports methods that have <ph id="ph1">&lt;xref:System.TypedReference&gt;</ph> parameters as <ph id="ph2">`VARIANT`</ph>, even though the <ph id="ph3">&lt;xref:System.TypedReference&gt;</ph> object has no meaning in unmanaged code.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you export methods that have <ph id="ph1">&lt;xref:System.TypedReference&gt;</ph> parameters, the Type Library Exporter will not generate a warning or error and unmanaged code that uses the resulting type library will not run properly.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The Type Library Exporter is supported on Microsoft Windows 2000 and later.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following command generates a type library with the same name as the assembly found in <ph id="ph1">`myTest.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following command generates a type library with the name <ph id="ph1">`clipper.tlb`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following example illustrates using Tlbexp.exe to export a type library from an assembly that references assemblies that were imported using Tlbimp.exe.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>First use Tlbimp.exe to import the type library <ph id="ph1">`myLib.tlb`</ph> and save it as <ph id="ph2">`myLib.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following command uses the C# compiler to compile the <ph id="ph1">`Sample.dll,`</ph> which references <ph id="ph2">`myLib.dll`</ph> created in the previous example.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following command generates a type library for <ph id="ph1">`Sample.dll`</ph> that references <ph id="ph2">`myLib.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Regasm.exe (Assembly Registration Tool)<ept id="p1">](../../../docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assembly to Type Library Conversion Summary<ept id="p1">](http://msdn.microsoft.com/en-us/3a37eefb-a76c-4000-9080-7dbbf66a4896)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tlbimp.exe (Type Library Importer)<ept id="p1">](../../../docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>