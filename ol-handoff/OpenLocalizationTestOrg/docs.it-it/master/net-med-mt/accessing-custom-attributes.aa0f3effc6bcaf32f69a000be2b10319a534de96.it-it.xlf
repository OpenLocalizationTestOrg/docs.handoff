<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fbbc83b6aafdd5f2cbf554de66bc19f49d635aff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\accessing-custom-attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3931b6b02df3d67e04805d1b2726a1843431e77</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ff87bc0d6876c468e4b3b36aab6f6b66bbefe65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Accessing Custom Attributes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Accessing Custom Attributes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>After attributes have been associated with program elements, reflection can be used to query their existence and values.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 1.0 and 1.1, custom attributes are examined in the execution context.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Framework version 2.0 provides a new load context, the reflection-only context, which can be used to examine code that cannot be loaded for execution.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Reflection-Only Context</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Code loaded into the reflection-only context cannot be executed.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This means that instances of custom attributes cannot be created, because that would require executing their constructors.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To load and examine custom attributes in the reflection-only context, use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can obtain instances of this class by using the appropriate overload of the static <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Execution Context</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The main reflection methods to query attributes in the execution context are <ph id="ph1">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The accessibility of a custom attribute is checked with respect to the assembly in which it is attached.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is equivalent to checking whether a method on a type in the assembly in which the custom attribute is attached can call the constructor of the custom attribute.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Methods such as <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%28System.Boolean%29?displayProperty=fullName&gt;</ph> check the visibility and accessibility of the type argument.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Only code in the assembly that contains the user-defined type can retrieve a custom attribute of that type using <bpt id="p1">**</bpt>GetCustomAttributes<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following C# example is a typical custom attribute design pattern.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It illustrates the runtime custom attribute reflection model.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the runtime is attempting to retrieve the custom attributes for the public custom attribute type <ph id="ph1">&lt;xref:System.ComponentModel.DescriptionAttribute&gt;</ph> attached to the <bpt id="p1">**</bpt>GetLanguage<ept id="p1">**</ept> method, it performs the following actions:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The runtime checks that the type argument <bpt id="p1">**</bpt>DescriptionAttribute<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Type.GetCustomAttributes<ept id="p2">**</ept>(Type <bpt id="p3">*</bpt>type<ept id="p3">*</ept>) is public, and therefore is visible and accessible.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The runtime checks that the user-defined type <bpt id="p1">**</bpt>MyDescriptionAttribute<ept id="p1">**</ept> that is derived from <bpt id="p2">**</bpt>DescriptionAttribute<ept id="p2">**</ept> is visible and accessible within the <bpt id="p3">**</bpt>System.Web.DLL<ept id="p3">**</ept> assembly, where it is attached to the method <bpt id="p4">**</bpt>GetLanguage<ept id="p4">**</ept>().</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The runtime checks that the constructor of <bpt id="p1">**</bpt>MyDescriptionAttribute<ept id="p1">**</ept> is visible and accessible within the <bpt id="p2">**</bpt>System.Web.DLL<ept id="p2">**</ept> assembly.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The runtime calls the constructor of <bpt id="p1">**</bpt>MyDescriptionAttribute<ept id="p1">**</ept> with the custom attribute parameters and returns the new object to the caller.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The custom attribute reflection model could leak instances of user-defined types outside the assembly in which the type is defined.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is no different from the members in the runtime system library that return instances of user-defined types, such as <ph id="ph1">&lt;xref:System.Type.GetMethods%2A?displayProperty=fullName&gt;</ph> returning an array of <bpt id="p1">**</bpt>RuntimeMethodInfo<ept id="p1">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To prevent a client from discovering information about a user-defined custom attribute type, define the type's members to be nonpublic.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the basic way of using reflection to get access to custom attributes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>CustomAttributeData#2<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/CustomAttributeData/CPP/source2.cpp#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>CustomAttributeData#2<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/CustomAttributeData/CS/source2.cs#2)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>CustomAttributeData#2<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/CustomAttributeData/VB/source2.vb#2)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Viewing Type Information<ept id="p1">](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Security Considerations for Reflection<ept id="p1">](../../../docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>