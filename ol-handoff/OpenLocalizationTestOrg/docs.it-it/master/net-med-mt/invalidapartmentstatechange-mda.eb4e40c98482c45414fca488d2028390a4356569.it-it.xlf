<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e857dfdcb48dd1a0572e077529bdc73923d41c03</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\invalidapartmentstatechange-mda.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">843915dc42df4a1bf60bda37cc3f230ef897fc9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f21ac19452b637ce4f15102f7731c97e9032bd3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>invalidApartmentStateChange MDA | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>invalidApartmentStateChange MDA</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`invalidApartmentStateChange`</ph> managed debugging assistant (MDS) is activated by either of two problems:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An attempt is made to change the COM apartment state of a thread that has already been initialized by COM to a different apartment state.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The COM apartment state of a thread changes unexpectedly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Symptoms</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A thread's COM apartment state is not what was requested.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This may cause proxies to be used for COM components that have a threading model different from the current one.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This in turn may cause an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> to be thrown when calling the COM object through interfaces that are not set up for cross-apartment marshaling.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The COM apartment state of the thread is different than expected.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This can cause a <ph id="ph1">&lt;xref:System.Runtime.InteropServices.COMException&gt;</ph> with an HRESULT of RPC_E_WRONG_THREAD as well as a <ph id="ph2">&lt;xref:System.InvalidCastException&gt;</ph> when making calls on a <bpt id="p1">[</bpt>Runtime Callable Wrapper<ept id="p1">](../../../docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This can also cause some single-threaded COM components to be accessed by multiple threads at the same time, which can lead to corruption or data loss.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Cause</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The thread was previously initialized to a different COM apartment state.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note that the apartment state of a thread can be set either explicitly or implicitly.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The explicit operations include the <ph id="ph1">&lt;xref:System.Threading.Thread.ApartmentState%2A?displayProperty=fullName&gt;</ph> property and the <ph id="ph2">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Thread.TrySetApartmentState%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A thread created using the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method is implicitly set to <ph id="ph2">&lt;xref:System.Threading.ApartmentState&gt;</ph> unless <ph id="ph3">&lt;xref:System.Threading.Thread.SetApartmentState%2A&gt;</ph> is called before the thread is started.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The main thread of the application is also implicitly initialized to <ph id="ph1">&lt;xref:System.Threading.ApartmentState&gt;</ph> unless the <ph id="ph2">&lt;xref:System.STAThreadAttribute&gt;</ph> attribute is specified on the main method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CoUninitialize`</ph> method (or the <ph id="ph2">`CoInitializeEx`</ph> method) with a different concurrency model is called on the thread.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Resolution</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set the apartment state of the thread before it begins executing, or apply either the <ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph> attribute or the <ph id="ph2">&lt;xref:System.MTAThreadAttribute&gt;</ph> attribute to the main method of the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For the second cause, ideally, the code that calls the <ph id="ph1">`CoUninitialize`</ph> method should be modified to delay the call until the thread is about to terminate and there are no RCWs and their underlying COM components still in use by the thread.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, if it is not possible to modify the code that calls the <ph id="ph1">`CoUninitialize`</ph> method, then no RCWs should be used from threads that are uninitialized in this way.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Effect on the Runtime</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This MDA has no effect on the CLR.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The COM apartment state of the current thread, and the state that the code was attempting to apply.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Configuration</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates a situation that can activate this MDA.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.InteropServices.MarshalAsAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id="p1">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Interop Marshaling<ept id="p1">](../../../docs/framework/interop/interop-marshaling.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>