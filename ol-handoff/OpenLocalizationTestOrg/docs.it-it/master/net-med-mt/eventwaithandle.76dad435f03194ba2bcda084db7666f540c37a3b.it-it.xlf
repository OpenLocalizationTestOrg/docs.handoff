<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="eventwaithandle.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc2fd01e1a84270425a6e3304671f4667b976087</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\eventwaithandle.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">755cfa7041cc4e5d49006f9a5f72e12902a90f12</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">168b7cf52500707a459f9005711b74f556302a03</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>EventWaitHandle | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>EventWaitHandle</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class allows threads to communicate with each other by signaling and by waiting for signals.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Event wait handles (also referred to simply as events) are wait handles that can be signaled in order to release one or more waiting threads.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>After it is signaled, an event wait handle is reset either manually or automatically.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class can represent either a local event wait handle (local event) or a named system event wait handle (named event or system event, visible to all processes).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Event wait handles are not events in the sense usually meant by that word in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There are no delegates or event handlers involved.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The word "event" is used to describe them because they have traditionally been referred to as operating-system events, and because the act of signaling the wait handle indicates to waiting threads that an event has occurred.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Both local and named event wait handles use system synchronization objects, which are protected by <ph id="ph1">&lt;xref:Microsoft.Win32.SafeHandles.SafeWaitHandle&gt;</ph> wrappers to ensure that the resources are released.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Dispose%2A&gt;</ph> method to free the resources immediately when you have finished using the object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Event Wait Handles That Reset Automatically</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You create an automatic reset event by specifying <ph id="ph1">&lt;xref:System.Threading.EventResetMode?displayProperty=fullName&gt;</ph> when you create the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As its name implies, this synchronization event resets automatically when signaled, after releasing a single waiting thread.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Signal the event by calling its <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Automatic reset events are usually used to provide exclusive access to a resource for a single thread at a time.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A thread requests the resource by calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If no other thread is holding the wait handle, the method returns <ph id="ph1">`true`</ph> and the calling thread has control of the resource.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>As with all synchronization mechanisms, you must ensure that all code paths wait on the appropriate wait handle before accessing a protected resource.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Thread synchronization is cooperative.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If an automatic reset event is signaled when no threads are waiting, it remains signaled until a thread attempts to wait on it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The event releases the thread and immediately resets, blocking subsequent threads.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Event Wait Handles That Reset Manually</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You create a manual reset event by specifying <ph id="ph1">&lt;xref:System.Threading.EventResetMode?displayProperty=fullName&gt;</ph> when you create the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As its name implies, this synchronization event must be reset manually after it has been signaled.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Until it is reset, by calling its <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method, threads that wait on the event handle proceed immediately without blocking.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A manual reset event acts like the gate of a corral.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the event is not signaled, threads that wait on it block, like horses in a corral.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the event is signaled, by calling its <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, all waiting threads are free to proceed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The event remains signaled until its <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This makes the manual reset event an ideal way to hold up threads that need to wait until one thread finishes a task.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Like horses leaving a corral, it takes time for the released threads to be scheduled by the operating system and to resume execution.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method is called before all the threads have resumed execution, the remaining threads once again block.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Which threads resume and which threads block depends on random factors like the load on the system, the number of threads waiting for the scheduler, and so on.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is not a problem if the thread that signals the event ends after signaling, which is the most common usage pattern.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you want the thread that signaled the event to begin a new task after all the waiting threads have resumed, you must block it until all the waiting threads have resumed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Otherwise, you have a race condition, and the behavior of your code is unpredictable.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Features Common to Automatic and Manual Events</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Typically, one or more threads block on an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> until an unblocked thread calls the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, which releases one of the waiting threads (in the case of automatic reset events) or all of them (in the case of manual reset events).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A thread can signal an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and then block on it, as an atomic operation, by calling the static <ph id="ph2">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A?displayProperty=fullName&gt;</ph>method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> objects can be used with the static <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Mutex&gt;</ph> classes both derive from <ph id="ph3">&lt;xref:System.Threading.WaitHandle&gt;</ph>, you can use both classes with these methods.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Named Events</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The Windows operating system allows event wait handles to have names.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A named event is system wide.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>That is, once the named event is created, it is visible to all threads in all processes.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Thus, named events can be used to synchronize the activities of processes as well as threads.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can create an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object that represents a named system event by using one of the constructors that specifies an event name.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because named events are system wide, it is possible to have multiple <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> objects that represent the same named event.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Each time you call a constructor, or the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.OpenExisting%2A&gt;</ph> method, a new <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object is created.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Specifying the same name repeatedly creates multiple objects that represent the same named event.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Caution is advised in using named events.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because they are system wide, another process that uses the same name can block your threads unexpectedly.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Malicious code executing on the same computer could use this as the basis of a denial-of-service attack.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use access control security to protect an <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object that represents a named event, preferably by using a constructor that specifies an <ph id="ph2">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can also apply access control security using the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A&gt;</ph> method, but this leaves a window of vulnerability between the time the event wait handle is created and the time it is protected.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Protecting events with access control security helps prevent malicious attacks, but it does not solve the problem of unintentional name collisions.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class, the derived classes <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> can represent only local wait handles.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>They cannot represent named system events.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent<ept id="p1">](../../../docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>