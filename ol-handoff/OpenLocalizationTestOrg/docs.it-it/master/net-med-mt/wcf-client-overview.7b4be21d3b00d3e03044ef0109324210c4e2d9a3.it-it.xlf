<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">744ddbd39d150d14adf0521a8dc8ad0ebba67599</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\wcf-client-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12e96cfeaf49c014eb3eb6ea9061643263102085</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">993459b3824a40eff7f6640dd1091004b1ae66b9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WCF Client Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WCF Client Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section describes what client applications do, how to configure, create, and use a <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> client, and how to secure client applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using WCF Client Objects</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A client application is a managed application that uses a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client to communicate with another application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To create a client application for a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service requires the following steps:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Obtain the service contract, bindings, and address information for a service endpoint.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client using that information.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Call operations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Close the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following sections discuss these steps and provide brief introductions to the following issues:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Handling errors.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Configuring and securing clients.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creating callback objects for duplex services.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Calling services asynchronously.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Calling services using client channels.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Obtain the Service Contract, Bindings, and Addresses</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph>, services and clients model contracts using managed attributes, interfaces, and methods.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To connect to a service in a client application, you need to obtain the type information for the service contract.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Typically, you do this by using the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>, which downloads metadata from the service, converts it to a managed source code file in the language of your choice, and creates a client application configuration file that you can use to configure your <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if you are going to create an <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object to invoke a <ph id="ph2">`MyCalculatorService`</ph>, and you know that the metadata for that service is published at <ph id="ph3">`http://computerName/MyCalculatorService/Service.svc?wsdl`</ph>, then the following code example shows how to use Svcutil.exe to obtain a <ph id="ph4">`ClientCode.vb`</ph> file that contains the service contract in managed code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can either compile this contract code into the client application or into another assembly that the client application can then use to create an <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use the configuration file to configure the client object to properly connect to the service .</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For an example of this process, see <bpt id="p1">[</bpt>How to: Create a Client<ept id="p1">](../../../docs/framework/wcf/how-to-create-a-wcf-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more complete information about contracts, see <bpt id="p1">[</bpt>Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create a WCF Client Object</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client is a local object that represents a <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service in a form that the client can use to communicate with the remote service.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client types implement the target service contract, so when you create one and configure it, you can then use the client object directly to invoke service operations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> run time converts the method calls into messages, sends them to the service, listens for the reply, and returns those values to the <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object as return values or <ph id="ph3">`out`</ph> or <ph id="ph4">`ref`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client channel objects to connect with and use services.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>WCF Client Architecture<ept id="p1">](../../../docs/framework/wcf/feature-details/client-architecture.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creating a New WCF Object</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To illustrate the use of a <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> class, assume the following simple service contract has been generated from a service application.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you are using <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> to create your <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client, objects are loaded automatically into the object browser when you add a service reference to your project.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#12<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#12)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you are not using <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>, examine the generated contract code to find the type that extends <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> and the service contract interface <ph id="ph3">`ISampleService`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In this case, that type looks like the following code:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#14<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#14)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This class can be created as a local object using one of the constructors, configured, and then used to connect to a service of the type <ph id="ph1">`ISampleService`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is recommended that you create your <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object first, and then use it and close it inside a single try/catch block.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You should not use the <ph id="ph1">`using`</ph> statement (<ph id="ph2">`Using`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) because it may mask exceptions in certain failure modes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph> the following sections as well as <bpt id="p1">[</bpt>Avoiding Problems with the Using Statement<ept id="p1">](../../../docs/framework/wcf/samples/avoiding-problems-with-the-using-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Contracts, Bindings, and Addresses</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Before you can create a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object, you must configure the client object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifically, it must have a service <bpt id="p1">*</bpt>endpoint<ept id="p1">*</ept> to use.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An endpoint is the combination of a service contract, a binding, and an address.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> endpoints, see <bpt id="p1">[</bpt>Endpoints: Addresses, Bindings, and Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/endpoints-addresses-bindings-and-contracts.md)</ept>.) Typically, this information is located in the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>endpoint&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/wcf/endpoint-of-client.md)</ept> element in a client application configuration file, such as the one the Svcutil.exe tool generates, and is loaded automatically when you create your client object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client types also have overloads that enable you to programmatically specify this information.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, a generated configuration file for an <ph id="ph1">`ISampleService`</ph> used in the preceding examples contains the following endpoint information.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#19<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/common/client.exe.config#19)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This configuration file specifies a target endpoint in the <ph id="ph1">`&lt;client&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> using multiple target endpoints, see the <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601.%23ctor%2A?displayProperty=fullName&gt;</ph> or the <ph id="ph3">&lt;xref:System.ServiceModel.ChannelFactory%601.%23ctor%2A?displayProperty=fullName&gt;</ph> constructors.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Calling Operations</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Once you have a client object created and configured, create a try/catch block, call operations in the same way that you would if the object were local, and close the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When the client application calls the first operation, <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> automatically opens the underlying channel, and the underlying channel is closed when the object is recycled.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(Alternatively, you can also explicitly open and close the channel prior to or subsequent to calling other operations.)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, if you have the following service contract:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You can call operations by creating a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object and calling its methods, as the following code example demonstrates.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Note that the opening, calling, and closing of the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client object occurs within a single try/catch block.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](../../../docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept> and <bpt id="p2">[</bpt>Avoiding Problems with the Using Statement<ept id="p2">](../../../docs/framework/wcf/samples/avoiding-problems-with-the-using-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_GeneratedCodeFiles#20<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/c_generatedcodefiles/cs/proxycode.cs#20)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Handling Errors</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Exceptions can occur in a client application when opening the underlying client channel (whether explicitly or automatically by calling an operation), using the client or channel object to call operations, or when closing the underlying client channel.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It is recommended at a minimum that applications expect to handle possible <ph id="ph1">&lt;xref:System.TimeoutException?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException?displayProperty=fullName&gt;</ph> exceptions in addition to any <ph id="ph3">&lt;xref:System.ServiceModel.FaultException?displayProperty=fullName&gt;</ph> objects thrown as a result of SOAP faults returned by operations.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>SOAP faults specified in the operation contract are raised to client applications as a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601?displayProperty=fullName&gt;</ph> where the type parameter is the detail type of the SOAP fault.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> handling error conditions in a client application, see <bpt id="p1">[</bpt>Sending and Receiving Faults<ept id="p1">](../../../docs/framework/wcf/sending-and-receiving-faults.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For a complete sample the shows how to handle errors in a client, see <bpt id="p1">[</bpt>Expected Exceptions<ept id="p1">](../../../docs/framework/wcf/samples/expected-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Configuring and Securing Clients</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Configuring a client starts with the required loading of target endpoint information for the client or channel object, usually from a configuration file, although you can also load this information programmatically using the client constructors and properties.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, additional configuration steps are required to enable certain client behavior and for many security scenarios.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, security requirements for service contracts are declared in the service contract interface, and if Svcutil.exe created a configuration file, that file usually contains a binding that is capable of supporting the security requirements of the service.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In some cases, however, more security configuration may be required, such as configuring client credentials.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For complete information about the configuration of security for <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> clients, see <bpt id="p1">[</bpt>Securing Clients<ept id="p1">](../../../docs/framework/wcf/securing-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In addition, some custom modifications can be enabled in client applications, such as custom run-time behaviors.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> how to configure a custom client behavior, see <bpt id="p1">[</bpt>Configuring Client Behaviors<ept id="p1">](../../../docs/framework/wcf/configuring-client-behaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Creating Callback Objects for Duplex Services</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Duplex services specify a callback contract that the client application must implement in order to provide a callback object for the service to call according to the requirements of the contract.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Although callback objects are not full services (for example, you cannot initiate a channel with a callback object), for the purposes of implementation and configuration they can be thought of as a kind of service.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Clients of duplex services must:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Implement a callback contract class.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Create an instance of the callback contract implementation class and use it to create the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;</ph> object that you pass to the <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client constructor.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Invoke operations and handle operation callbacks.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Duplex <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client objects function like their nonduplex counterparts, with the exception that they expose the functionality necessary to support callbacks, including the configuration of the callback service.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, you can control various aspects of callback object runtime behavior by using properties of the <ph id="ph1">&lt;xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=fullName&gt;</ph> attribute on the callback class.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Another example is the use of the <ph id="ph1">&lt;xref:System.ServiceModel.Description.CallbackDebugBehavior?displayProperty=fullName&gt;</ph> class to enable the return of exception information to services that call the callback object.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Duplex Services<ept id="p1">](../../../docs/framework/wcf/feature-details/duplex-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For a complete sample, see <bpt id="p1">[</bpt>Duplex<ept id="p1">](../../../docs/framework/wcf/samples/duplex.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>On Windows XP computers running Internet Information Services (IIS) 5.1, duplex clients must specify a client base address using the <ph id="ph1">&lt;xref:System.ServiceModel.WSDualHttpBinding?displayProperty=fullName&gt;</ph> class or an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following code example shows how to do this in code.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>S_DualHttp#8<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/s_dualhttp/cs/program.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>S_DualHttp#8<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CFX/s_dualhttp/vb/module1.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following code shows how to do this in a configuration file</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>S_DualHttp#134<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/s_dualhttp/cs/program.cs#134)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Calling Services Asynchronously</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>How operations are called is entirely up to the client developer.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This is because the messages that make up an operation can be mapped to either synchronous or asynchronous methods when expressed in managed code.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Therefore, if you want to build a client that calls operations asynchronously, you can use Svcutil.exe to generate asynchronous client code using the <ph id="ph1">`/async`</ph> option.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Call Service Operations Asynchronously<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Calling Services Using WCF Client Channels</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> client types extend <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph>, which itself derives from <ph id="ph3">&lt;xref:System.ServiceModel.IClientChannel?displayProperty=fullName&gt;</ph> interface to expose the underlying channel system.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can invoke services by using the target service contract with the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>WCF Client Architecture<ept id="p1">](../../../docs/framework/wcf/feature-details/client-architecture.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>