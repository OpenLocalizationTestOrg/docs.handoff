<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d2dac06a8faa7f7547b07618aa33ab0196205c7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\design-guidelines\names-of-namespaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3677815c9d0caf72dded80ff46efc8785ac7afd7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2559e66402b9bc03a10f5bd4902462e35a039859</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Names of Namespaces | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Names of Namespaces</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As with other naming guidelines, the goal when naming namespaces is creating sufficient clarity for the programmer using the framework to immediately know what the content of the namespace is likely to be.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following template specifies the general rule for naming namespaces:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following are examples:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> prefix namespace names with a company name to prevent namespaces from different companies from having the same name.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> use a stable, version-independent product name at the second level of a namespace name.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> use organizational hierarchies as the basis for names in namespace hierarchies, because group names within corporations tend to be short-lived.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Organize the hierarchy of namespaces around groups of related technologies.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> use PascalCasing, and separate namespace components with periods (e.g., <ph id="ph1">`Microsoft.Office.PowerPoint`</ph>).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If your brand employs nontraditional casing, you should follow the casing defined by your brand, even if it deviates from normal namespace casing.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ CONSIDER<ept id="p1">**</ept> using plural namespace names where appropriate.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, use <ph id="ph1">`System.Collections`</ph> instead of <ph id="ph2">`System.Collection`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Brand names and acronyms are exceptions to this rule, however.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, use <ph id="ph1">`System.IO`</ph> instead of <ph id="ph2">`System.IOs`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> use the same name for a namespace and a type in that namespace.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, do not use <ph id="ph1">`Debug`</ph> as a namespace name and then also provide a class named <ph id="ph2">`Debug`</ph> in the same namespace.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Several compilers require such types to be fully qualified.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Namespaces and Type Name Conflicts</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> introduce generic type names such as <ph id="ph1">`Element`</ph>, <ph id="ph2">`Node`</ph>, <ph id="ph3">`Log`</ph>, and <ph id="ph4">`Message`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There is a very high probability that doing so will lead to type name conflicts in common scenarios.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You should qualify the generic type names (<ph id="ph1">`FormElement`</ph>, <ph id="ph2">`XmlNode`</ph>, <ph id="ph3">`EventLog`</ph>, <ph id="ph4">`SoapMessage`</ph>).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There are specific guidelines for avoiding type name conflicts for different categories of namespaces.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Application model namespaces<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Namespaces belonging to a single application model are very often used together, but they are almost never used with namespaces of other application models.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;</ph> namespace is very rarely used together with the <ph id="ph2">&lt;xref:System.Web.UI?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following is a list of well-known application model namespace groups:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> give the same name to types in namespaces within a single application model.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, do not add a type named <ph id="ph1">`Page`</ph> to the <ph id="ph2">&lt;xref:System.Web.UI.Adapters?displayProperty=fullName&gt;</ph> namespace, because the <ph id="ph3">&lt;xref:System.Web.UI?displayProperty=fullName&gt;</ph> namespace already contains a type named <ph id="ph4">`Page`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Infrastructure namespaces<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This group contains namespaces that are rarely imported during development of common applications.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`.Design`</ph> namespaces are mainly used when developing programming tools.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Avoiding conflicts with types in these namespaces is not critical.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Core namespaces<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Core namespaces include all <ph id="ph1">`System`</ph> namespaces, excluding namespaces of the application models and the Infrastructure namespaces.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Core namespaces include, among others, <ph id="ph1">`System`</ph>, <ph id="ph2">`System.IO`</ph>, <ph id="ph3">`System.Xml`</ph>, and <ph id="ph4">`System.Net`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> give types names that would conflict with any type in the Core namespaces.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, never use <ph id="ph1">`Stream`</ph> as a type name.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It would conflict with <ph id="ph1">&lt;xref:System.IO.Stream?displayProperty=fullName&gt;</ph>, a very commonly used type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Technology namespace groups<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This category includes all namespaces with the same first two namespace nodes <ph id="ph1">`(&lt;Company&gt;.&lt;Technology&gt;*`</ph>), such as <ph id="ph2">`Microsoft.Build.Utilities`</ph> and <ph id="ph3">`Microsoft.Build.Tasks`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It is important that types belonging to a single technology do not conflict with each other.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> assign type names that would conflict with other types within a single technology.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> introduce type name conflicts between types in technology namespaces and an application model namespace (unless the technology is not intended to be used with the application model).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id="p2">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id="p2">](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Framework Design Guidelines<ept id="p1">](../../../docs/standard/design-guidelines/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Naming Guidelines<ept id="p1">](../../../docs/standard/design-guidelines/naming-guidelines.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>