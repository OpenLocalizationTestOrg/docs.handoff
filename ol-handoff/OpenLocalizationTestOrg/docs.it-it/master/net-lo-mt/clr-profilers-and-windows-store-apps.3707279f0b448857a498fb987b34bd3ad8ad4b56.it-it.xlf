<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">647fdbf864d184c990b74c207fccc5a4ce93bc3f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\profiling\clr-profilers-and-windows-store-apps.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a502c92ca4a41d763cdcb4fb549537b13ca4b52f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb5a56aa4842e09779b56af3ba7d1ecdddae12ee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CLR Profilers and Windows Store Apps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CLR Profilers and Windows Store Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic discusses what you need to think about when writing diagnostic tools that analyze managed code running inside a Windows Store app.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It also provides guidelines to modify your existing development tools so they continue to work when you run them against Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To understand this information, it’s best if you're  familiar with the Common Language Runtime Profiling API, you’ve already used this API in a diagnostic tool that runs correctly against Windows desktop applications, and you’re now interested in modifying the tool to run correctly against Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic consists of the following sections:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction<ept id="p1">](#Intro)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Architecture and terminology<ept id="p1">](#Arch)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows RT devices<ept id="p1">](#RT)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Consuming Windows Runtime APIs<ept id="p1">](#Consuming)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loading the Profiler DLL<ept id="p1">](#Loading)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Common considerations for startup and attach loads<ept id="p1">](#Common)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Startup load<ept id="p1">](#Startup)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attach load<ept id="p1">](#Attach)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Running inside the Windows Store app<ept id="p1">](#Running)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Stick to the Windows Store app APIs<ept id="p1">](#APIs)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reduced permissions<ept id="p1">](#Permissions)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inter-process communication<ept id="p1">](#Interprocess)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>No shutdown notifications<ept id="p1">](#Shutdown)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Runtime metadata files<ept id="p1">](#Metadata)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed and non-managed WinMDs<ept id="p1">](#WMDs)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WinMD files look like CLR modules<ept id="p1">](#CLRModules)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reading metadata from WinMDs<ept id="p1">](#Reading)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifying metadata from WinMDs<ept id="p1">](#Modifying)</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resolving assembly references with WinMDs<ept id="p1">](#Resolving)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Memory profilers<ept id="p1">](#Profilers)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ForceGC creates a managed thread<ept id="p1">](#ForceGC)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ConditionalWeakTableReferences<ept id="p1">](#WeakTable)</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conclusion<ept id="p1">](#Conclusion)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resources<ept id="p1">](#Resources)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Introduction</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you made it past the introductory paragraph, then you’re familiar with the CLR Profiling API.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You’ve already written a diagnostic tool that works well against managed desktop applications.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now you’re curious what to do so that your tool works with a managed Windows Store app.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Perhaps you’ve already tried to make this work, and have discovered that it’s not a straightforward task.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Indeed, there are a number of considerations that might not be obvious to all tools developers.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Windows Store apps run in a context with severely reduced permissions.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows Metadata files have unique characteristics when compared to traditional managed modules.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Windows Store apps have a habit of suspending themselves when interactivity goes down.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Your inter-process communication mechanisms may no longer work for various reasons.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This topic lists the things you need to be aware of and how to deal with them properly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you’re new to the CLR Profiling API, skip down to the Resources at the end of this topic to find better introductory information.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Providing detail about specific Windows APIs and how they should be used is also outside the scope of this topic.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Consider this topic a starting point, and refer to MSDN to learn more about any Windows APIs referenced here.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Architecture and terminology</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Typically, a diagnostic tool has an architecture like the one shown in the following illustration.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It uses the term "profiler," but many such tools go well beyond typical performance or memory profiling into areas such as code coverage, mock object frameworks, time-travel debugging, application monitoring, and so on.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For simplicity, this topic will continue to refer to all these tools as profilers.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following terminology is used throughout this topic:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Application</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is the application that the profiler is analyzing.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Typically, the developer of this application is now using the profiler to help diagnose issues with the application.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Traditionally, this application would be a Windows desktop application, but in this topic, we’re looking at Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Profiler DLL</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is the component that loads into the process space of the application being analyzed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This component, also known as the profiler "agent," implements the <bpt id="p1">[</bpt>ICorProfilerCallback<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept><bpt id="p2">[</bpt>ICorProfilerCallback Interface<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept>(2,3,etc.) interfaces and consumes the <bpt id="p3">[</bpt>ICorProfilerInfo<ept id="p3">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept>(2,3,etc.) interfaces to collect data about the analyzed application and potentially modify aspects of the application’s behavior.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Profiler UI</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is a desktop application that the profiler user interacts with.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It’s responsible for displaying application status to the user and giving the user the means to control the behavior of the analyzed application.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This component always runs in its own process space, separate from the process space of the application being profiled.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The Profiler UI can also act as the "attach trigger," which is the process that calls the <bpt id="p1">[</bpt>ICLRProfiling::AttachProfiler<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/iclrprofiling-attachprofiler-method.md)</ept> method, to cause the analyzed application to load the Profiler DLL in those cases where the profiler DLL did not load on startup.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Your Profiler UI should remain a Windows desktop application, even when it is used to control and report on a Windows Store app.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Don’t expect to be able to package and ship your diagnostics tool in the Windows Store.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Your tool needs to do things that Windows Store apps cannot do, and many of those things reside inside your Profiler UI.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Throughout this document, the sample code assumes that:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Your Profiler DLL is written in C++, because it must be a native DLL, as per the requirements of the CLR Profiling API.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Your Profiler UI is written in C#.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This isn’t necessary, but because there are no requirements on the language for your Profiler UI’s process, why not pick a language that’s concise and simple?</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Windows RT devices</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Windows RT devices are quite locked down.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Third-party profilers simply cannot be loaded on such devices.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This document focuses on Windows 8 PCs.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Consuming Windows Runtime APIs</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In a number of scenarios discussed in the following sections, your Profiler UI desktop application needs to consume some new Windows Runtime APIs.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You’ll want to consult the documentation to understand which Windows Runtime APIs can be used from desktop applications, and whether their behavior is different when called from desktop applications and Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If your Profiler UI is written in managed code, there will be a few steps you’ll need to do to make consuming those Windows Runtime APIs easy.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">[</bpt>Managed desktop apps and Windows Runtime<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=271858)</ept> article for more information.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Loading the Profiler DLL</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This section describes how your Profiler UI causes the Windows Store app to load your Profiler DLL.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The code discussed in this section belongs in your Profiler UI desktop app, and therefore involves using Windows APIs that are safe for desktop apps but not necessarily safe for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Your Profiler UI can cause your Profiler DLL to be loaded into the application’s process space in two ways:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>At application startup, as controlled by environment variables.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>By attaching to the application after startup is complete by calling the <bpt id="p1">[</bpt>ICLRProfiling::AttachProfiler<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/iclrprofiling-attachprofiler-method.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>One of your first roadblocks will be getting startup-load and attach-load of your Profiler DLL to work properly with Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Both forms of loading share some special considerations in common, so let’s start with them.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Common considerations for startup and attach loads</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Signing your Profiler DLL<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>When Windows attempts to load your Profiler DLL, it verifies that your Profiler DLL is properly signed.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If not, the load fails by default.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>There are two ways to do this:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Ensure that your Profiler DLL is signed.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Tell your user that they must install a developer license on their Windows 8 machine before using your tool.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This can be done automatically from Visual Studio or manually from a command prompt.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Get a developer license<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh974578.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>File system permissions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The Windows Store app must have permission to load and execute your Profiler DLL from the location on the file system in which it resides.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>By default, the Windows Store app doesn’t have such permission on most directories, and any failed attempt to load your Profiler DLL will produce an entry in the Windows Application event log that looks something like this:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Generally, Windows Store apps are only allowed to access a limited set of locations on the disk.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Each Windows Store app can access its own application data folders, as well as a few other areas in the file system for which all Windows Store apps are granted access.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It's best to install your Profiler DLL and its dependencies somewhere under Program Files or Program Files (x86), because all Windows Store apps have read and execute permissions there by default.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Startup load</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Typically, in a desktop app, your Profiler UI prompts a startup load of your Profiler DLL by initializing an environment block that contains the required CLR Profiling API environment variables (i.e., <ph id="ph1">`COR_PROFILER`</ph>, <ph id="ph2">`COR_ENABLE_PROFILING`</ph>, and <ph id="ph3">`COR_PROFILER_PATH`</ph>), and then creating a new process with that environment block.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The same holds true for Windows Store apps, but the mechanisms are different.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Don’t run elevated<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If Process A attempts to spawn Windows Store app Process B, Process A should be run at medium integrity level, not at high integrity level (that is, not elevated).</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This means that either your Profiler UI should be running at medium integrity level, or it must spawn another desktop process at medium integrity level to take care of launching the Windows Store app.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Choosing a Windows Store App to profile<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>First, you’ll want to ask your profiler user which Windows Store app to launch.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For desktop apps, perhaps you’d show a file Browse dialog, and the user would find and select an .exe file.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>But Windows Store apps are different, and using a Browse dialog doesn’t make sense.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Instead, it’s better to show the user a list of Windows Store apps installed for that user to select from.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>PackageManager class<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.management.deployment.packagemanager.aspx)</ept> to generate this list.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PackageManager`</ph> is a Windows Runtime class that is available to desktop apps, and in fact it is <bpt id="p1">*</bpt>only<ept id="p1">*</ept> available to desktop apps.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The following ode example from a hypothetical Profiler UI written as a desktop app in C# yses the <ph id="ph1">`PackageManager`</ph> to generate a list of Windows apps:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Specifying the custom environment block<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A new COM interface, <bpt id="p1">[</bpt>IPackageDebugSettings<ept id="p1">](https://msdn.microsoft.com/library/hh438393\(v=vs.85\).aspx)</ept>, allows you to customize the execution behavior of a Windows Store app to make some forms of diagnostics easier.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>One of its methods, <bpt id="p1">[</bpt>EnableDebugging<ept id="p1">](https://msdn.microsoft.com/library/hh438395\(v=vs.85\).aspx)</ept>, lets you pass an environment block to the Windows Store app when it’s launched, along with other useful effects like disabling automatic process suspension.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The environment block is important because that’s where you need to specify the environment variables (<ph id="ph1">`COR_PROFILER`</ph>, <ph id="ph2">`COR_ENABLE_PROFILING`</ph>, and <ph id="ph3">`COR_PROFILER_PATH)`</ph>) used by the CLR to load your Profiler DLL .</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Consider the following code snippet:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>There are a couple of items you'll need to get right:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`packageFullName`</ph> can be determined while iterating over the packages and grabbing <ph id="ph2">`package.Id.FullName`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`debuggerCommandLine`</ph> is a bit more interesting.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In order to pass the custom environment block to the Windows Store app, you need to write your own, simplistic dummy debugger.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Windows spawns the Windows Store app suspended and then attaches your debugger by launching your debugger with a command line like in this example:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`-p 1336`</ph> means the Windows Store app has Process ID 1336, and <ph id="ph2">`-tid 1424`</ph> means Thread ID 1424 is the thread that is suspended.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Your dummy debugger would parse the ThreadID from the command-line, resume that thread, and then exit.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Here’s some example C++ code to do this (be sure to add error checking!):</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You’ll need to deploy this dummy debugger as part of your diagnostics tool installation, and then specify the path to this debugger in the <ph id="ph1">`debuggerCommandLine`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Launching the Windows Store app<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The moment to launch the Windows Store app has finally arrived.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If you’ve already already tried doing this yourself, you may have noticed that <bpt id="p1">[</bpt>CreateProcess<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms682425\(v=vs.85\).aspx)</ept> is not how you create a Windows Store app process.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Instead, you’ll need to use the <bpt id="p1">[</bpt>IApplicationActivationManager::ActivateApplication<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/Hh706903\(v=vs.85\).aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To do that, you’ll need to get the App User Model ID of the Windows Store app that you’re launching.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>And that means you’ll need to do a little digging through the manifest.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>While iterating over your packages (see "Choosing a Windows Store App to Profile" in the <bpt id="p1">[</bpt>Startup load<ept id="p1">](#Startup)</ept> section earlier), you’ll want to grab the set of applications contained in the current package’s manifest:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Yes, one package can have multiple applications, and each application has its own Application User Model ID.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>So you’ll want to ask your user which application to profile, and grab the Application User Model ID from that particular application:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Finally, you now have what you need to launch the Windows Store app:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Remember to call DisableDebugging<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>When you called <bpt id="p1">[</bpt>IPackageDebugSettings::EnableDebugging<ept id="p1">](https://msdn.microsoft.com/library/hh438395\(v=VS.85\).aspx)</ept>, you made a promise that you would clean up after yourself by calling the <bpt id="p2">[</bpt>IPackageDebugSettings::DisableDebugging<ept id="p2">](https://msdn.microsoft.com/library/hh438394\(v=vs.85\).aspx)</ept> method, so be sure to do that when the profiling session is over.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Attach load</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>When your Profiler UI wants to attach its Profiler DLL to an application that has already started running, it uses <bpt id="p1">[</bpt>ICLRProfiling::AttachProfiler<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/iclrprofiling-attachprofiler-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The same holds true with Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>But in addition to the common considerations listed earlier, make sure the that the target Windows Store app is not suspended.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EnableDebugging<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>As with startup load, call the <bpt id="p1">[</bpt>IPackageDebugSettings::EnableDebugging<ept id="p1">](https://msdn.microsoft.com/library/hh438395\(v=VS.85\).aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You don’t need it for passing an environment block, but you need one of its other features: disabling automatic process suspension.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Otherwise, when your Profiler UI calls <bpt id="p1">[</bpt>AttachProfiler<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/iclrprofiling-attachprofiler-method.md)</ept>, the target Windows Store app may be suspended.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>In fact, this is likely if the user is now interacting with your Profiler UI, and the Windows Store app is not active on any of the user’s screens.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>And if the Windows Store app is suspended, it won’t be able to respond to any signal that the CLR sends to it to attach your Profiler DLL.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>So you’ll want to do something like this:</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This is the same call you’d make for the startup load case, except you don’t specify a debugger command line or an environment block.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DisableDebugging<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>As always, don’t forget to call <bpt id="p1">[</bpt>IPackageDebugSettings::DisableDebugging<ept id="p1">](https://msdn.microsoft.com/library/hh438394\(v=vs.85\).aspx)</ept> when your profiling session is completed.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Running inside the Windows Store app</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>So the Windows Store app has finally loaded your Profiler DLL.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Now your Profiler DLL must be taught how to play by the different rules required by Windows Store apps, including which APIs are allowable and how to run with reduced permissions.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Stick to the Windows Store app APIs</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>As you browse the Windows API in the MSDN library, you’ll notice that every API is documented as being applicable to desktop apps, Windows Store apps, or both.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>Requirements<ept id="p1">**</ept> section of the documentation for the <bpt id="p2">[</bpt>InitializeCriticalSectionAndSpinCount<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms683476\(v=vs.85\).aspx)</ept> function indicates that the function applies to desktop apps only.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In contrast, the <bpt id="p1">[</bpt>InitializeCriticalSectionEx<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms683477\(v=vs.85\).aspx)</ept> function is available for both desktop apps and Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>When developing your Profiler DLL, treat it as if it’s a Windows Store app and only use APIs that are documented as available to Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Analyze your dependencies (for example, you can run <ph id="ph1">`link /dump /imports`</ph> against your Profiler DLL to audit), and then search the docs to see which of your dependencies are ok and which aren’t.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>In most cases, your violations can be fixed by simply replacing them with a newer form of the API that is documented as safe (for example, replacing <bpt id="p1">[</bpt>InitializeCriticalSectionAndSpinCount<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms683476\(v=vs.85\).aspx)</ept> with <bpt id="p2">[</bpt>InitializeCriticalSectionEx<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms683477\(v=vs.85\).aspx)</ept>).</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>You might notice that your Profiler DLL calls some APIs that apply to desktop apps only, and yet they seem to work even when your Profiler DLL is loaded inside a Windows Store app.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Be aware that it’s risky to use any API not documented for use with Windows Store apps in your Profiler DLL when loaded into a Windows Store app process:</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Such APIs are not guaranteed to work when called in the unique context that Windows Store apps run in.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Such APIs might not work consistently when called from within different Windows Store app processes.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Such APIs might seem to work fine from Windows Store apps in the current version of Windows, but may break or be disabled in future releases of Windows.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The best advice is to fix all your violations and avoid the risk.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You might find that you absolutely cannot do without a particular API and cannot find a replacement suitable for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In such a case, at a minimum:</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Test, test, test the living daylights out of your usage of that API.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Understand that the API might suddenly break or disappear if called from inside Windows Store apps in future releases of Windows.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>This won’t be considered a compatibility concern by Microsoft, and supporting your usage of it will not be a priority.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Reduced permissions</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>It’s outside the scope of this topic to list all the ways that Windows Store app permissions differ from desktop apps.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>But certainly the behavior will be different every time your Profiler DLL (when loaded into a Windows Store app as compared to a desktop app) tries to access any resources.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The file system is the most common example.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>There are but a few places on disk that a given Windows Store app is allowed to access (see <bpt id="p1">[</bpt>File access and permissions (Windows Runtime apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh967755.aspx)</ept>), and your Profiler DLL will be under the same restrictions.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Test your code thoroughly.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Inter-process communication</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>As shown in the diagram at the beginning of this paper, your Profiler DLL (loaded into the Windows Store app process space) will likely need to communicate with your Profiler UI (running in a separate desktop app process space) through your own custom inter-process communication (IPC) channel.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The Profiler UI sends signals to the Profiler DLL to modify its behavior, and the Profiler DLL sends data from the analyzed Windows Store app back to the Profiler UI for post-processing and displaying to the profiler user.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Most profilers need to work this way, but your choices for IPC mechanisms are more limited when your Profiler DLL is loaded into a Windows Store app.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>For example, named pipes are not part of the Windows Store app SDK, so you cannot use them.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>But of course, files are still in, albeit in a more limited fashion.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Events are also available.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Communicating via files<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Most of your data will likely pass between the Profiler DLL and Profiler UI via files.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The key is to pick a file location that both your Profiler DLL (in the context of a Windows Store app) and Profiler UI have read and write access to.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For example, the Temporary Folder path is a location that both your Profiler DLL and Profiler UI can access, but no other Windows Store app package can access (thus shielding any information you log from other Windows Store app packages).</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Both your Profiler UI and Profiler DLL can determine this path independently.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Your Profiler UI, when it iterates through all packages installed for the current user (see the sample code earlier), gets access to the <ph id="ph1">`PackageId`</ph> class, from which the Temporary Folder path can be derived with code similar to this snippet.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>(As always, error checking is omitted for brevity.)</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Meanwhile, your Profiler DLL can do basically the same thing, though it can more easily get to the <bpt id="p1">[</bpt>ApplicationData<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/windows.storage.applicationdata.aspx)</ept> class by using the <bpt id="p2">[</bpt>ApplicationData.Current<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/windows.storage.applicationdata.current.aspx)</ept> property.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Communicating via events<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>If you want simple signaling semantics between your Profiler UI and Profiler DLL, you can use events inside Windows Store apps as well as desktop apps.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>From your Profiler DLL, you can simply call the <bpt id="p1">[</bpt>CreateEventEx<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms682400\(v=vs.85\).aspx)</ept> function to create a named event with any name you like.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Your Profiler UI then needs to find that named event under the Windows Store app’s namespace.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>For example, your Profiler UI could call <bpt id="p1">[</bpt>CreateEventEx<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms682400\(v=vs.85\).aspx)</ept>, specifying the event name as</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;acSid&gt;`</ph> is the Windows Store app’s AppContainer SID.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>An earlier section of this topic showed how to iterate over the packages installed for the current user.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>From that sample code, you can obtain the packageId.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>And from the packageId, you can obtain the <ph id="ph1">`&lt;acSid&gt;`</ph> with code similar to the following:</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>No shutdown notifications</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>When running inside a Windows Store app, your Profiler DLL should not rely on either <bpt id="p1">[</bpt>ICorProfilerCallback::Shutdown<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-shutdown-method.md)</ept> or even <bpt id="p2">[</bpt>DllMain<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms682583\(v=vs.85\).aspx)</ept> (with <ph id="ph1">`DLL_PROCESS_DETACH`</ph>) being called to notify your Profiler DLL that the Windows Store app is exiting.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>In fact, you should expect they will never be called.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Historically, many Profiler DLLs have used those notifications as convenient places to flush caches to disk, close files, send notifications back to the Profiler UI, etc.  But now your Profiler DLL needs to be organized a little differently.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Your Profiler DLL should be logging information as it goes.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>For performance reasons, you may want to batch information in memory and flush it to disk as the batch grows in size past some threshold.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>But assume that any information not yet flushed to disk can be lost.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>This means you’ll want to pick your threshold wisely, and that your Profiler UI needs to be hardened to deal with incomplete information written by the Profiler DLL.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Windows Runtime metadata files</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>It is outside the scope of this document to go into detail on what Windows Runtime metadata (WinMD) files are.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>This section is limited to how the CLR Profiling API reacts when WinMD files are loaded by the Windows Store app your Profiler DLL is analyzing.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Managed and non-managed WinMDs</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If a developer uses Visual Studio to create a new Windows Runtime Component project, a build of that project produces a WinMD file that describes the metadata (the type descriptions of classes, interfaces, etc.) authored by the developer.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If this project is a managed language project written in C# or VB, that same WinMD file also contains the implementation of those types (meaning that it contains all the IL compiled from the developer’s source code).</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Such files are known as managed WinMD files.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>They're interesting in that they contain both Windows Runtime metadata and the underlying implementation.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>In contrast, if a developer creates a Windows Runtime Component project for C++, a build of that project produces a WinMD file that contains only metadata, and the implementation is compiled into a separate native DLL.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Similarly, the WinMD files that ship in the Windows SDK contain only metadata, with the implementation compiled into separate native DLLs that ship as part of Windows.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The information below applies to both managed WinMDs, which contain metadata and implementation, and to non-managed WinMDs, which contain only metadata.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>WinMD files look like CLR modules</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>As far as the CLR is concerned, all WinMD files are modules.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The CLR Profiling API therefore tells your Profiler DLL when WinMD files load and what their ModuleIDs are, in the same way as for other managed modules.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Your Profiler DLL can distinguish WinMD files from other modules by calling the <bpt id="p1">[</bpt>ICorProfilerInfo3::GetModuleInfo2<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo3-getmoduleinfo2-method.md)</ept> method and inspecting the <ph id="ph1">`pdwModuleFlags`</ph> output parameter for the <bpt id="p2">[</bpt>COR_PRF_MODULE_WINDOWS_RUNTIME<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-module-flags-enumeration.md)</ept> flag.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>(It’s set if and only if the ModuleID represents a WinMD.)</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Reading metadata from WinMDs</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>WinMD files, like regular modules, contain metadata that can be read via the <bpt id="p1">[</bpt>Metadata APIs<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>However, the CLR maps Windows Runtime types to .NET Framework types when it reads WinMD files so that developers who program in managed code and consume the WinMD file can have a more natural programming experience.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>For some examples of these mappings, see <bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](../../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>So which view will your profiler get when it uses the metadata APIs: the raw Windows Runtime view, or the mapped .NET Framework view?</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The answer: it’s up to you.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>When you call the <bpt id="p1">[</bpt>ICorProfilerInfo::GetModuleMetaData<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getmodulemetadata-method.md)</ept> method on a WinMD to obtain a metadata interface, such as <bpt id="p2">[</bpt>IMetaDataImport<ept id="p2">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)</ept>,  you can choose to set <bpt id="p3">[</bpt>ofNoTransform<ept id="p3">](../../../../docs/framework/unmanaged-api/metadata/coropenflags-enumeration.md)</ept> in the <ph id="ph1">`dwOpenFlags`</ph> parameter to turn off this mapping.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Otherwise, by default, the mapping will be enabled.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Typically, a profiler will keep the mapping enabled, so that the strings that the Profiler DLL obtains from the WinMD metadata (for example, names of types) will look familiar and natural to the profiler user.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Modifying metadata from WinMDs</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Modifying metadata in WinMDs is not supported.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>If you call the <bpt id="p1">[</bpt>ICorProfilerInfo::GetModuleMetaData<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getmodulemetadata-method.md)</ept> method for a WinMD file and specify <bpt id="p2">[</bpt>ofWrite<ept id="p2">](../../../../docs/framework/unmanaged-api/metadata/coropenflags-enumeration.md)</ept> in the <ph id="ph1">`dwOpenFlags`</ph> parameter or ask for a writeable metadata interface such as <bpt id="p3">[</bpt>IMetaDataEmit<ept id="p3">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)</ept>, <bpt id="p4">[</bpt>GetModuleMetaData<ept id="p4">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-getmodulemetadata-method.md)</ept> will fail.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>This is of particular importance to IL-rewriting profilers, which need to modify metadata to support their instrumentation (for example, to add AssemblyRefs or new methods).</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>So you should check for <bpt id="p1">[</bpt>COR_PRF_MODULE_WINDOWS_RUNTIME<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/cor-prf-module-flags-enumeration.md)</ept> first (as discussed in the previous section) and refrain from asking for writeable metadata interfaces on such modules.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Resolving assembly references with WinMDs</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Many profilers need to resolve metadata references manually to aid with instrumentation or type inspection.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Such profilers need to be aware of how the CLR resolves assembly references that point to WinMDs, because those references are resolved in a completely different way than standard assembly references.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Memory profilers</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The garbage collector and managed heap are not fundamentally different in a Windows Store app and a desktop app.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>However, there are some subtle differences that profiler authors need to be aware of.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>ForceGC creates a managed thread</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>When doing memory profiling, your Profiler DLL typically creates a separate thread from which to call the <bpt id="p1">[</bpt>ForceGC Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-forcegc-method.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>This is nothing new.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>But what might be surprising is that the act of doing a garbage collection inside a Windows Store app may transform your thread into a managed thread (for example, a Profiling API ThreadID will be created for that thread).</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>To understand the consequences of this, it’s important to understand the differences between synchronous and asynchronous calls as defined by the CLR Profiling API.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Note that this is very different from the concept of asynchronous calls in Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>See the blog post <bpt id="p1">[</bpt>Why we have CORPROF_E_UNSUPPORTED_CALL_SEQUENCE<ept id="p1">](https://blogs.msdn.microsoft.com/davbr/2008/12/23/why-we-have-corprof_e_unsupported_call_sequence/)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The relevant point is that calls made on threads created by your profiler are always considered synchronous, even if those calls are made from outside an implementation of one of your Profiler DLL’s <bpt id="p1">[</bpt>ICorProfilerCallback<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept> methods.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>At least, that used to be the case.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Now that the CLR has turned your profiler’s thread into a managed thread because of your call to <bpt id="p1">[</bpt>ForceGC Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-forcegc-method.md)</ept>, that thread is no longer considered your profiler’s thread.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>As such, the CLR enforces a more stringent definition of what qualifies as synchronous for that thread—namely that a call must originate from inside one of your Profiler DLL’s <bpt id="p1">[</bpt>ICorProfilerCallback<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept> methods to qualify as synchronous.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>What does this mean in practice?</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Most <bpt id="p1">[</bpt>ICorProfilerInfo<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-interface.md)</ept> methods are only safe to be called synchronously, and will immediately fail otherwise.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>So if your Profiler DLL reuses your <bpt id="p1">[</bpt>ForceGC Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-forcegc-method.md)</ept> thread for other calls typically made on profiler-created threads (for example, to <bpt id="p2">[</bpt>RequestProfilerDetach<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo3-requestprofilerdetach-method.md)</ept>, <bpt id="p3">[</bpt>RequestReJIT<ept id="p3">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-requestrejit-method.md)</ept>, or <bpt id="p4">[</bpt>RequestRevert<ept id="p4">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo4-requestrevert-method.md)</ept>), you’re going to have trouble.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Even an asynchronous-safe function such as <bpt id="p1">[</bpt>DoStackSnapshot<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo2-dostacksnapshot-method.md)</ept> has special rules when called from managed threads.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>(See the blog post <bpt id="p1">[</bpt>Profiler stack walking: Basics and beyond<ept id="p1">](https://blogs.msdn.microsoft.com/davbr/2005/10/06/profiler-stack-walking-basics-and-beyond/)</ept> for more information.)</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that any thread your Profiler DLL creates to call <bpt id="p1">[</bpt>ForceGC Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilerinfo-forcegc-method.md)</ept> should be used <bpt id="p2">*</bpt>only<ept id="p2">*</ept> for the purpose of triggering GCs and then responding to the GC callbacks.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>It should not call into the Profiling API to perform other tasks like stack sampling or detaching.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>ConditionalWeakTableReferences</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 4.5, there is a new GC callback, <bpt id="p1">[</bpt>ConditionalWeakTableElementReferences<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback5-conditionalweaktableelementreferences-method.md)</ept>, which gives the profiler more complete information about <bpt id="p2">*</bpt>dependent handles<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>These handles effectively add a reference from a source object to a target object for the purpose of GC lifetime management.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Dependent handles are nothing new, and developers who program in managed code have been able to create their own dependent handles by using the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602?displayProperty=fullName&gt;</ph> class even before Windows 8 and the .NET Framework 4.5.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>However, managed XAML Windows Store apps now make heavy use of dependent handles.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>In particular, the CLR uses them to aid with managing reference cycles between managed objects and unmanaged Windows Runtime objects.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>This means that it’s more important now than ever for memory profilers to be informed of these dependent handles so that they can be visualized along with the rest of the edges in the heap graph.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Your Profiler DLL should use <bpt id="p1">[</bpt>RootReferences2<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-rootreferences2-method.md)</ept>, <bpt id="p2">[</bpt>ObjectReferences<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-objectreferences-method.md)</ept>, and <bpt id="p3">[</bpt>ConditionalWeakTableElementReferences<ept id="p3">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback5-conditionalweaktableelementreferences-method.md)</ept> together to form a complete view of the heap graph.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>It is possible to use the CLR Profiling API to analyze managed code running inside Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>In fact, you can take an existing profiler that you’re developing and make some specific changes so that it can target Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Your Profiler UI should use the new APIs for activating the Windows Store app in debugging mode.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Make sure that your Profiler DLL consumes only those APIs applicable for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>The communication mechanism between your Profiler DLL and Profiler UI should be written with the Windows Store app API restrictions in mind and with awareness of the restricted permissions in place for Windows Store apps.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Your Profiler DLL should be aware of how the CLR treats WinMDs, and how the Garbage Collector’s behavior is different with respect to managed threads.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Resources</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The Common Language Runtime<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLR Profiling API Reference<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CLR Metadata API Reference<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The CLR's interaction with the Windows Runtime<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Support for Windows Store Apps and Windows Runtime<ept id="p1">](../../../../docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)</ept></source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows Store apps<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>File access and permissions (Windows Runtime apps<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/hh967755.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get a developer license<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh974578.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IPackageDebugSettings Interface<ept id="p1">](https://msdn.microsoft.com/library/hh438393\(v=vs.85\).aspx)</ept></source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Profiling<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>