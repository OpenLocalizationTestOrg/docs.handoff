<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aab9788bdcb6befe843b058d170cd156151934fa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\mef\composition-analysis-tool-mefx.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d76e4f9b82737c141dd5016e6e471405ca3be384</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5dede3456445ac4a1387629da37cd0bb04a81464</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Composition Analysis Tool (Mefx) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Composition Analysis Tool (Mefx)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Composition Analysis Tool (Mefx) is a command-line application that analyzes library (.dll) and application (.exe) files containing Managed Extensibility Framework (MEF) parts.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The primary purpose of Mefx is to provide developers a way to diagnose composition failures in their MEF applications without the requirement to add cumbersome tracing code to the application itself.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It can also be useful to help understand parts from a library provided by a third party.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic describes how to use Mefx and provides a reference for its syntax.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Getting Mefx</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Mefx is available on Codeplex at <bpt id="p1">[</bpt>Managed Extensibility Framework<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=187078)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Simply download and unzip the tool.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Basic Syntax</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Mefx is invoked from the command line in the following format:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The first set of arguments specify the files and directories from which to load parts for analysis.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specify a file with the <ph id="ph1">`/file:`</ph> switch, and a directory with the <ph id="ph2">`/directory:`</ph> switch.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can specify multiple files or directories, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each .dll or .exe should only be loaded one time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If a file is loaded multiple times, the tool may return incorrect information.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>After the list of files and directories, you must specify a command, and any options for that command.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Listing Available Parts</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`/parts`</ph> action to list all the parts declared in the files loaded.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The result is a simple list of part names.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about the parts, use the <ph id="ph1">`/verbose`</ph> option.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This will output more information for all available parts.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To get more information about a single part, use the <ph id="ph1">`/type`</ph> action instead of <ph id="ph2">`/parts`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Listing Imports and Exports</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/imports`</ph> and <ph id="ph2">`/exports`</ph> actions will list all the imported parts and all the exported parts, respectively.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can also list the parts that import or export a particular type by using the <ph id="ph1">`/importers`</ph> or <ph id="ph2">`/exporters`</ph> actions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also apply the <ph id="ph1">`/verbose`</ph> option to these actions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Finding Rejected Parts</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once it has loaded the available parts, Mefx uses the MEF composition engine to compose them.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Parts that cannot be successfully composed are referred to as <bpt id="p1">*</bpt>rejected<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To list all the rejected parts, use the <ph id="ph1">`/rejected`</ph> action.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`/verbose`</ph> option with the <ph id="ph2">`/rejected`</ph> action to print detailed information about rejected parts.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`ClassLibrary1`</ph> DLL contains the <ph id="ph2">`AddIn`</ph> part, which imports the <ph id="ph3">`MemberPart`</ph> and <ph id="ph4">`ChainOne`</ph> parts.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ChainOne`</ph> imports <ph id="ph2">`ChainTwo`</ph>, but <ph id="ph3">`ChainTwo`</ph> does not exist.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This means that <ph id="ph1">`ChainOne`</ph> is rejected, which causes <ph id="ph2">`AddIn`</ph> to be rejected.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following shows the complete output of the previous command:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The interesting information is contained in the <ph id="ph1">`[Exception]`</ph> and <ph id="ph2">`[Unsuitable]`</ph> results.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Exception]`</ph> result provides information about why a part was rejected.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Unsuitable]`</ph> result indicates why an otherwise-matching part could not be used to fill an import; in this case, because that part was itself rejected for missing imports.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Analyzing Primary Causes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If several parts are linked in a long dependency chain, a problem involving a part near the bottom may cause the entire chain to be rejected.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Diagnosing these problems can be difficult because the root cause of the failure is not always obvious.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To help with the problem, you can use the <ph id="ph1">`/causes`</ph> action, which attempts to find the root cause of any cascading rejection.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`/causes`</ph> action on the previous example would list only information for <ph id="ph2">`ChainOne`</ph>, whose unfilled import is the root cause of the rejection of <ph id="ph3">`AddIn`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/causes`</ph> action can be used in both normal and <ph id="ph2">`/verbose`</ph> options.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In most cases, Mefx will be able to diagnose the root cause of a cascading failure.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>However, in cases where parts are added programmatically to a container, cases involving hierarchical containers, or cases involving custom <ph id="ph1">`ExportProvider`</ph> implementations, Mefx will not be able to diagnose the cause.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In general, the previously described cases should be avoided where possible, as failures are generally difficult to diagnose.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>White Lists</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/whitelist`</ph> option enables you to specify a text file that lists parts that are expected to be rejected.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Unexpected rejections will then be flagged.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This can be useful when you analyze an incomplete library, or a sub-library that is missing some dependencies.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/whitelist`</ph> option can be applied to the <ph id="ph2">`/rejected`</ph> or <ph id="ph3">`/causes`</ph> actions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Consider a file named test.txt that contains the text "ClassLibrary1.ChainOne".</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you run the <ph id="ph1">`/rejected`</ph> action with the <ph id="ph2">`/whitelist`</ph> option on the previous example, it will produce the following output:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>