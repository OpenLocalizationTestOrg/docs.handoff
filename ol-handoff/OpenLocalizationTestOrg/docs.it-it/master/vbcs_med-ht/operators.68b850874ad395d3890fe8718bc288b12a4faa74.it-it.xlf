<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45f474983747f3b14fac85b8ed00e01fb50853e4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62e76bc87092a423b81f6fd41842775e85e3cd5b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c35383fcd174f41b51cab5d8ce2f4155dc25714f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Operators (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Operators (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In C#, an <bpt id="p1">*</bpt>operator<ept id="p1">*</ept> is a program element that is applied to one or more <bpt id="p2">*</bpt>operands<ept id="p2">*</ept> in an expression or statement.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Operators that take one operand, such as the increment operator (<ph id="ph1">`++`</ph>) or <ph id="ph2">`new`</ph>, are referred to as <bpt id="p1">*</bpt>unary<ept id="p1">*</ept> operators.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Operators that take two operands, such as arithmetic operators (<ph id="ph1">`+`</ph>,<ph id="ph2">`-`</ph>,<ph id="ph3">`*`</ph>,<ph id="ph4">`/`</ph>), are referred to as <bpt id="p1">*</bpt>binary<ept id="p1">*</ept> operators.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>One operator, the conditional operator (<ph id="ph1">`?:`</ph>), takes three operands and is the sole ternary operator in C#.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following C# statement contains a single unary operator and a single operand.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The increment operator, <ph id="ph1">`++`</ph>, modifies the value of the operand <ph id="ph2">`y`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#5<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/operators_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following C# statement contains two binary operators, each with two operands.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The assignment operator, <ph id="ph1">`=`</ph>, has the integer variable <ph id="ph2">`y`</ph> and the expression <ph id="ph3">`2 + 3`</ph> as operands.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`2 + 3`</ph> itself consists of the addition operator and two operands, <ph id="ph2">`2`</ph> and <ph id="ph3">`3`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#6<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/operators_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Operators, Evaluation, and Operator Precedence</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An operand can be a valid expression that is composed of any length of code, and it can comprise any number of sub expressions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In an expression that contains multiple operators, the order in which the operators are applied is determined by <bpt id="p1">*</bpt>operator precedence<ept id="p1">*</ept>, <bpt id="p2">*</bpt>associativity<ept id="p2">*</ept>, and parentheses.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each operator has a defined precedence.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In an expression that contains multiple operators that have different precedence levels, the precedence of the operators determines the order in which the operators are evaluated.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns 3 to <ph id="ph1">`n1`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The multiplication is executed first because multiplication takes precedence over subtraction.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following table separates the operators into categories based on the type of operation they perform.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The categories are listed in order of precedence.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Primary Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>x<bpt id="p1">[</bpt>.<ept id="p1">](../../../csharp/language-reference/operators/member-access-operator.md)</ept>y</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>x?.y</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Member access</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Conditional member access</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>f<bpt id="p1">[</bpt>(x)<ept id="p1">](../../../csharp/language-reference/operators/invocation-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Method and delegate invocation</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>a<bpt id="p1">[</bpt>&amp;#91;x&amp;#93;<ept id="p1">](../../../csharp/language-reference/operators/index-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>a?[x]</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Array and indexer access</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Conditional array and indexer access</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>x<bpt id="p1">[</bpt><ph id="ph1">++</ph><ept id="p1">](../../../csharp/language-reference/operators/increment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Post-increment</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>x<bpt id="p1">[</bpt><ph id="ph1">--</ph><ept id="p1">](../../../csharp/language-reference/operators/decrement-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Post-decrement</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new-operator.md)</ept> T(...)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Object and delegate creation</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`new`</ph> T(...){...}</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Object creation with initializer.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Object and Collection Initializers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`new`</ph> {...}</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Anonymous object initializer.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Anonymous Types<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/anonymous-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`new`</ph> T[...]</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Array creation.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../csharp/programming-guide/arrays/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>typeof<ept id="p1">](../../../csharp/language-reference/keywords/typeof.md)</ept>(T)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Obtain System.Type object for T</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>checked<ept id="p1">](../../../csharp/language-reference/keywords/checked.md)</ept>(x)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Evaluate expression in checked context</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>unchecked<ept id="p1">](../../../csharp/language-reference/keywords/unchecked.md)</ept>(x)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Evaluate expression in unchecked context</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>default<ept id="p1">](../../../csharp/language-reference/keywords/default.md)</ept> (T)</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Obtain default value of type T</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>delegate<ept id="p1">](../../../csharp/language-reference/keywords/delegate.md)</ept> {}</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Anonymous function (anonymous method)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Unary Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">+</ph><ept id="p1">](../../../csharp/language-reference/operators/addition-operator.md)</ept>x</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Identity</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">-</ph><ept id="p1">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept>x</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Negation</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>!<ept id="p1">](../../../csharp/language-reference/operators/logical-negation-operator.md)</ept>x</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Logical negation</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">~</ph><ept id="p1">](../../../csharp/language-reference/operators/bitwise-complement-operator.md)</ept>x</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Bitwise negation</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">++</ph><ept id="p1">](../../../csharp/language-reference/operators/increment-operator.md)</ept>x</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Pre-increment</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">--</ph><ept id="p1">](../../../csharp/language-reference/operators/decrement-operator.md)</ept>x</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Pre-decrement</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>(T)<ept id="p1">](../../../csharp/language-reference/operators/invocation-operator.md)</ept>x</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Explicitly convert x to type T</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multiplicative Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Multiplication</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Division</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Remainder</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Additive Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">+</ph><ept id="p1">](../../../csharp/language-reference/operators/addition-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Addition, string concatenation, delegate combination</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">-</ph><ept id="p1">](../../../csharp/language-reference/operators/subtraction-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Subtraction, delegate removal</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Shift Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">&lt;</ph><ph id="ph2">\&lt;</ph><ept id="p1">](../../../csharp/language-reference/operators/left-shift-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Shift left</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">&gt;&gt;</ph><ept id="p1">](../../../csharp/language-reference/operators/right-shift-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Shift right</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relational and Type Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph><ept id="p1">](../../../csharp/language-reference/operators/less-than-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Less than</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">&gt;</ph><ept id="p1">](../../../csharp/language-reference/operators/greater-than-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Greater than</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph><ph id="ph2">=</ph><ept id="p1">](../../../csharp/language-reference/operators/less-than-equal-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Less than or equal</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">&gt;=</ph><ept id="p1">](../../../csharp/language-reference/operators/greater-than-equal-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Greater than or equal</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt>is<ept id="p1">](../../../csharp/language-reference/keywords/is.md)</ept> T</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Return true if x is a T, false otherwise</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt>as<ept id="p1">](../../../csharp/language-reference/keywords/as.md)</ept> T</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Return x typed as T, or null if x is not a T</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Equality Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">==</ph><ept id="p1">](../../../csharp/language-reference/operators/equality-comparison-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Equal</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt>!=<ept id="p1">](../../../csharp/language-reference/operators/not-equal-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Not equal</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Logical, Conditional, and Null Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Category</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Logical AND</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">&amp;</ph><ept id="p1">](../../../csharp/language-reference/operators/and-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Integer bitwise AND, Boolean logical AND</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Logical XOR</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">^</ph><ept id="p1">](../../../csharp/language-reference/operators/xor-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Integer bitwise XOR, boolean logical XOR</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Logical OR</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt>&amp;#124;<ept id="p1">](../../../csharp/language-reference/operators/or-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Integer bitwise OR, boolean logical OR</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Conditional AND</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt><ph id="ph1">&amp;&amp;</ph><ept id="p1">](../../../csharp/language-reference/operators/conditional-and-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Evaluates y only if x is true</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Conditional OR</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt>&amp;#124;&amp;#124;<ept id="p1">](../../../csharp/language-reference/operators/conditional-or-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Evaluates y only if x is false</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Null coalescing</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt>??<ept id="p1">](../../../csharp/language-reference/operators/null-conditional-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Evaluates to y if x is null, to x otherwise</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Conditional</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>x <bpt id="p1">[</bpt>?<ept id="p1">](../../../csharp/language-reference/operators/conditional-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>y : z</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Evaluates to y if x is true, z if x is false</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Assignment and Anonymous Operators<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Expression</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Assignment</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>x op= y</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Compound assignment.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Supports these operators: <bpt id="p1">[</bpt><ph id="ph1">+=</ph><ept id="p1">](../../../csharp/language-reference/operators/addition-assignment-operator.md)</ept>, <bpt id="p2">[</bpt><ph id="ph2">-=</ph><ept id="p2">](../../../csharp/language-reference/operators/subtraction-assignment-operator.md)</ept>, <bpt id="p3">[</bpt><ph id="ph3">*=</ph><ept id="p3">](../../../csharp/language-reference/operators/multiplication-assignment-operator.md)</ept>, <bpt id="p4">[</bpt><ph id="ph4">/=</ph><ept id="p4">](../../../csharp/language-reference/operators/division-assignment-operator.md)</ept>, <bpt id="p5">[</bpt><ph id="ph5">%=</ph><ept id="p5">](../../../csharp/language-reference/operators/modulus-assignment-operator.md)</ept>, <bpt id="p6">[</bpt><ph id="ph6">&amp;=</ph><ept id="p6">](../../../csharp/language-reference/operators/and-assignment-operator.md)</ept>, <bpt id="p7">[</bpt>&amp;#124;=<ept id="p7">](../../../csharp/language-reference/operators/or-assignment-operator.md)</ept>, <bpt id="p8">[</bpt>!=<ept id="p8">](../../../csharp/language-reference/operators/not-equal-operator.md)</ept>, <bpt id="p9">[</bpt><ph id="ph7">&lt;</ph><ph id="ph8">\&lt;</ph><ph id="ph9">=</ph><ept id="p9">](../../../csharp/language-reference/operators/left-shift-assignment-operator.md)</ept>, <bpt id="p10">[</bpt><ph id="ph10">&gt;&gt;=</ph><ept id="p10">](../../../csharp/language-reference/operators/right-shift-assignment-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>(T x) <bpt id="p1">[</bpt><ph id="ph1">=&gt;</ph><ept id="p1">](../../../csharp/language-reference/operators/lambda-operator.md)</ept> y</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Anonymous function (lambda expression)</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Associativity</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>When two or more operators that have the same precedence are present in an expression, they are evaluated based on associativity.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Left-associative operators are evaluated in order from left to right.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`x * y / z`</ph> is evaluated as <ph id="ph2">`(x * y) / z`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Right-associative operators are evaluated in order from right to left.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example, the assignment operator is right associative.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If it were not, the following code would result in an error.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>As another example the ternary operator (<bpt id="p1">[</bpt>?:<ept id="p1">](../../../csharp/language-reference/operators/conditional-operator.md)</ept>) is right associative.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Most binary operators are left associative.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Whether the operators in an expression are left associative or right associative, the operands of each expression are evaluated first, from left to right.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the order of evaluation of operators and operands.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Statement</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Order of evaluation</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>a, b, =</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>a, b, c, +, =</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>a, b, c, d, *, +, =</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>a, b, c, *, d, +, =</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>a, b, c, -, d, +, =</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>a, b, c, -=, +=</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Adding Parentheses</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>You can change the order imposed by operator precedence and associativity by using parentheses.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`2 + 3 * 2`</ph> ordinarily evaluates to 8, because multiplicative operators take precedence over additive operators.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>However, if you write the expression as <ph id="ph1">`(2 + 3) * 2`</ph>, the addition is evaluated before the multiplication, and the result is 10.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The following examples illustrate the order of evaluation in parenthesized expressions.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>As in previous examples, the operands are evaluated before the operator is applied.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Statement</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Order of evaluation</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>a, b, c, +, d, *, =</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>a, b, c, d, +, -, =</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>a, b, c, +, d, e, -, *, =</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Operator Overloading</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>You can change the behavior of operators for custom classes and structs.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This process is referred to as <bpt id="p1">*</bpt>operator overloading<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Overloadable Operators<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/overloadable-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Operator Keywords<ept id="p1">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept> and <bpt id="p2">[</bpt>C# Operators<ept id="p2">](../../../csharp/language-reference/operators/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Statements, Expressions, and Operators<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>