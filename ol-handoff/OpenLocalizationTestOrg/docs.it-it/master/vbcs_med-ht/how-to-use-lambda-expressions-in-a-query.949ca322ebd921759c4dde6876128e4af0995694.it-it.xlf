<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-use-lambda-expressions-in-a-query.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7bfc46015b0d4603c4d63478e804f862c0c65b68</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\how-to-use-lambda-expressions-in-a-query.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">111631d36d9ce21133e3df44b56a290ce70f7320</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99d757e1614dae4c3c1f4face84f1e19db483691</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Use Lambda Expressions in a Query (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use Lambda Expressions in a Query (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You do not use lambda expressions directly in query syntax, but you do use them in method calls, and query expressions can contain method calls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In fact, some query operations can only be expressed in method syntax.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about the difference between query syntax and method syntax, see <bpt id="p1">[</bpt>Query Syntax and Method Syntax in LINQ<ept id="p1">](../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use a lambda expression in a method-based query by using the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt;</ph> standard query operator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method in this example has an input parameter of the delegate type <ph id="ph2">&lt;xref:System.Func%601&gt;</ph> and that delegate takes an integer as input and returns a Boolean.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The lambda expression can be converted to that delegate.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If this were a <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../csharp/includes/vbtecdlinq_md.md)]</ph> query that used the <ph id="ph2">&lt;xref:System.Linq.Queryable.Where%2A?displayProperty=fullName&gt;</ph> method, the parameter type would be an <ph id="ph3">`Expression&lt;Func\&lt;int,bool&gt;&gt;`</ph> but the lambda expression would look exactly the same.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information on the Expression type, see <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use a lambda expression in a method call of a query expression.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The lambda is necessary because the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Sum%2A&gt;</ph> standard query operator cannot be invoked by using query syntax.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The query first groups the students according to their grade level, as defined in the <ph id="ph1">`GradeLevel`</ph> enum.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Then for each group it adds the total scores for each student.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This requires two <ph id="ph1">`Sum`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The inner <ph id="ph1">`Sum`</ph> calculates the total score for each student, and the outer <ph id="ph2">`Sum`</ph> keeps a running, combined total for all students in the group.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To run this code, copy and paste the method into the <ph id="ph1">`StudentClass`</ph> that is provided in <bpt id="p1">[</bpt>How to: Query a Collection of Objects<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-query-a-collection-of-objects.md)</ept> and call it from the <ph id="ph2">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression Trees<ept id="p1">](http://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>