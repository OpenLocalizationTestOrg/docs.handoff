<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2874eaadd23fdfdc1baf9337169ad5a52c05905f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\async\walkthrough-accessing-the-web-by-using-async-and-await.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3520479a81cd8eca294f2ad0dc3660650286ff7d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6540003a1f11da957014e39729a99fba9f9aa898</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Accessing the Web by Using async and await (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Accessing the Web by Using async and await (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can write asynchronous programs more easily and intuitively by using async/await features.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can write asynchronous code that looks like synchronous code and let the compiler handle the difficult callback functions and continuations that asynchronous code usually entails.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about the Async feature, see <bpt id="p1">[</bpt>Asynchronous Programming with async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This walkthrough starts with a synchronous Windows Presentation Foundation (WPF) application that sums the number of bytes in a list of websites.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The walkthrough then converts the application to an asynchronous solution by using the new features.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you don't want to build the applications yourself, you can download "Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)" from <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255191)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you complete the following tasks:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To create a WPF application<ept id="p1">](#CreateWPFApp)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To design a simple WPF MainWindow<ept id="p1">](#MainWindow)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To add a reference<ept id="p1">](#AddRef)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To add necessary using directives<ept id="p1">](#usingDir)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To create a synchronous application<ept id="p1">](#synchronous)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To test the synchronous solution<ept id="p1">](#testSynch)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To convert GetURLContents to an asynchronous method<ept id="p1">](#GetURLContents)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To convert SumPageSizes to an asynchronous method<ept id="p1">](#SumPageSizes)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To convert startButton_Click to an asynchronous method<ept id="p1">](#startButton)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To test the asynchronous solution<ept id="p1">](#testAsynch)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>To replace method GetURLContentsAsync with a .NET Framework method<ept id="p1">](#GetURLContentsAsync)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Example<ept id="p1">](#BKMK_CompleteCodeExamples)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Visual Studio 2012 or later must be installed on your computer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Microsoft website<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=235233)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="CreateWPFApp"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To create a WPF application</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed Templates<ept id="p1">**</ept> pane, choose Visual C#, and then choose <bpt id="p2">**</bpt>WPF Application<ept id="p2">**</ept> from the list of project types.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> text box, enter <ph id="ph1">`AsyncExampleWPF`</ph>, and then choose the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="MainWindow"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To design a simple WPF MainWindow</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept> window isnâ€™t visible, open the <bpt id="p2">**</bpt>View<ept id="p2">**</ept> menu, and then choose <bpt id="p3">**</bpt>Toolbox<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>Button<ept id="p1">**</ept> control and a <bpt id="p2">**</bpt>TextBox<ept id="p2">**</ept> control to the <bpt id="p3">**</bpt>MainWindow<ept id="p3">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Highlight the <bpt id="p1">**</bpt>TextBox<ept id="p1">**</ept> control and, in the <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> window, set the following values:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> property to <ph id="ph1">`resultsTextBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Height<ept id="p1">**</ept> property to 250.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Width<ept id="p1">**</ept> property to 500.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Text<ept id="p1">**</ept> tab, specify a monospaced font, such as Lucida Console or Global Monospace.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Highlight the <bpt id="p1">**</bpt>Button<ept id="p1">**</ept> control and, in the <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> window, set the following values:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> property to <ph id="ph1">`startButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Change the value of the <bpt id="p1">**</bpt>Content<ept id="p1">**</ept> property from <bpt id="p2">**</bpt>Button<ept id="p2">**</ept> to <bpt id="p3">**</bpt>Start<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Position the text box and the button so that both appear in the <bpt id="p1">**</bpt>MainWindow<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information about the WPF XAML Designer, see <bpt id="p1">[</bpt>Creating a UI by using XAML Designer<ept id="p1">](https://docs.microsoft.com/visualstudio/designers/creating-a-ui-by-using-xaml-designer-in-visual-studio)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="AddRef"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To add a reference</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, highlight your project's name.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Project<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> dialog box appears.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>At the top of the dialog box, verify that your project is targeting the .NET Framework 4.5 or higher.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Assemblies<ept id="p1">**</ept> area, choose <bpt id="p2">**</bpt>Framework<ept id="p2">**</ept> if it isnâ€™t already chosen.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the list of names, select the <bpt id="p1">**</bpt>System.Net.Http<ept id="p1">**</ept> check box.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button to close the dialog box.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="usingDir"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To add necessary using directives</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for MainWindow.xaml.cs, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`using`</ph> directives at the top of the code file if theyâ€™re not already present.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="synchronous"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To create a synchronous application</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the design window, MainWindow.xaml, double-click the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button to create the <ph id="ph1">`startButton_Click`</ph> event handler in MainWindow.xaml.cs.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In MainWindow.xaml.cs, copy the following code into the body of <ph id="ph1">`startButton_Click`</ph>:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The code calls the method that drives the application, <ph id="ph1">`SumPageSizes`</ph>, and displays a message when control returns to <ph id="ph2">`startButton_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The code for the synchronous solution contains the following four methods:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SumPageSizes`</ph>, which gets a list of webpage URLs from <ph id="ph2">`SetUpURLList`</ph> and then calls <ph id="ph3">`GetURLContents`</ph> and <ph id="ph4">`DisplayResults`</ph> to process each URL.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`SetUpURLList`</ph>, which makes and returns a list of web addresses.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetURLContents`</ph>, which downloads the contents of each website and returns the contents as a byte array.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DisplayResults`</ph>, which displays  the number of bytes in the byte array for each URL.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Copy the following four methods, and then paste them under the <ph id="ph1">`startButton_Click`</ph> event handler in MainWindow.xaml.cs:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="testSynch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To test the synchronous solution</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Output that resembles the following list should appear.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Notice that it takes a few seconds to display the counts.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>During that time, the UI thread is blocked while it waits for requested resources to download.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>As a result, you can't move, maximize, minimize, or even close the display window after you choose the  <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These efforts fail until the byte counts start to appear.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If a website isnâ€™t responding, you have no indication of which site failed.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>It is difficult even to stop waiting and close the program.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="GetURLContents"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To convert GetURLContents to an asynchronous method</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To convert the synchronous solution to an asynchronous solution, the best place to start is in <ph id="ph1">`GetURLContents`</ph> because the calls to the <ph id="ph2">&lt;xref:System.Net.HttpWebRequest&gt;</ph> method <ph id="ph3">&lt;xref:System.Net.HttpWebRequest.GetResponse%2A&gt;</ph> and to the <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph> method <ph id="ph5">&lt;xref:System.IO.Stream.CopyTo%2A&gt;</ph> are where the application accesses the web.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The .NET Framework makes the conversion easy by supplying asynchronous versions of both methods.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For more information about the methods that are used in <ph id="ph1">`GetURLContents`</ph>, see <ph id="ph2">&lt;xref:System.Net.WebRequest&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>As you follow the steps in this walkthrough, several compiler errors appear.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can ignore them and continue with the walkthrough.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Change the method that's called in the third line of <ph id="ph1">`GetURLContents`</ph> from <ph id="ph2">`GetResponse`</ph> to the asynchronous, task-based <ph id="ph3">&lt;xref:System.Net.WebRequest.GetResponseAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetResponseAsync`</ph> returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this case, the <bpt id="p1">*</bpt>task return variable<ept id="p1">*</ept>, <ph id="ph1">`TResult`</ph>, has type <ph id="ph2">&lt;xref:System.Net.WebResponse&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The task is a promise to produce an actual <ph id="ph1">`WebResponse`</ph> object after the requested data has been downloaded and the task has run to completion.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To retrieve the <ph id="ph1">`WebResponse`</ph> value from the task, apply an <bpt id="p1">[</bpt>await<ept id="p1">](../../../../csharp/language-reference/keywords/await.md)</ept> operator to the call to <ph id="ph2">`GetResponseAsync`</ph>, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> operator suspends the execution of the current method, <ph id="ph2">`GetURLContents`</ph>, until the awaited task is complete.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the meantime, control returns to the caller of the current method.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In this example, the current method is <ph id="ph1">`GetURLContents`</ph>, and the caller is <ph id="ph2">`SumPageSizes`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When the task is finished, the promised <ph id="ph1">`WebResponse`</ph> object is produced as the value of the awaited task and assigned to the variable <ph id="ph2">`response`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The previous statement can be separated into the following two statements to clarify what happens.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`webReq.GetResponseAsync`</ph> returns a <ph id="ph2">`Task(Of WebResponse)`</ph> or <ph id="ph3">`Task&lt;WebResponse&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Then an await operator is applied to the task to retrieve the <ph id="ph1">`WebResponse`</ph> value.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If your async method has work to do that doesnâ€™t depend on the completion of the task, the method can continue with that work between these two statements, after the call to the async method and before the <ph id="ph1">`await`</ph> operator is applied.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For examples, see <bpt id="p1">[</bpt>How to: Make Multiple Web Requests in Parallel by Using async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)</ept> and <bpt id="p2">[</bpt>How to: Extend the async Walkthrough by Using Task.WhenAll (C#)<ept id="p2">](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Because you added the <ph id="ph1">`await`</ph> operator in the previous step, a compiler error occurs.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The operator can be used only in methods that are marked with the <bpt id="p1">[</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Ignore the error while you repeat the conversion steps to replace the call to <ph id="ph1">`CopyTo`</ph> with a call to <ph id="ph2">`CopyToAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Change the name of the method thatâ€™s called to <ph id="ph1">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CopyTo`</ph> or <ph id="ph2">`CopyToAsync`</ph> method copies bytes to its argument, <ph id="ph3">`content`</ph>, and doesnâ€™t return a meaningful value.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the synchronous version, the call to <ph id="ph1">`CopyTo`</ph> is a simple statement that doesn't return a value.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The asynchronous version, <ph id="ph1">`CopyToAsync`</ph>, returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The task functions like "Task(void)" and enables the method to be awaited.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Apply <ph id="ph1">`Await`</ph> or <ph id="ph2">`await`</ph> to the call to <ph id="ph3">`CopyToAsync`</ph>, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The previous statement abbreviates the following two lines of code.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>All that remains to be done in <ph id="ph1">`GetURLContents`</ph> is to adjust the method signature.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`await`</ph> operator only in methods that are marked with the <bpt id="p1">[</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Add the modifier to mark the method as an <bpt id="p1">*</bpt>async method<ept id="p1">*</ept>, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The return type of an async method can only be <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, or <ph id="ph3">`void`</ph> in C#.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Typically, a return type of <ph id="ph1">`void`</ph> is used only in an async event handler, where <ph id="ph2">`void`</ph> is required.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In other cases, you use <ph id="ph1">`Task(T)`</ph> if the completed method has a <bpt id="p1">[</bpt>return<ept id="p1">](../../../../csharp/language-reference/keywords/return.md)</ept> statement that returns a value of type T, and you use <ph id="ph2">`Task`</ph> if the completed method doesnâ€™t return a meaningful value.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You can think of the <ph id="ph1">`Task`</ph> return type as meaning "Task(void)."</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Async Return Types (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Method <ph id="ph1">`GetURLContents`</ph> has a return statement, and the statement returns a byte array.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Therefore, the return type of the async version is Task(T), where T is a byte array.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Make the following changes in the method signature:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Change the return type to <ph id="ph1">`Task&lt;byte[]&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>By convention, asynchronous methods have names that end in "Async," so rename the method <ph id="ph1">`GetURLContentsAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following code shows these changes.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>With those few changes, the conversion of <ph id="ph1">`GetURLContents`</ph> to an asynchronous method is complete.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="SumPageSizes"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To convert SumPageSizes to an asynchronous method</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Repeat the steps from the previous procedure for <ph id="ph1">`SumPageSizes`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>First, change the call to <ph id="ph1">`GetURLContents`</ph> to an asynchronous call.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Change the name of the method thatâ€™s called from <ph id="ph1">`GetURLContents`</ph> to <ph id="ph2">`GetURLContentsAsync`</ph>, if you haven't already done so.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Apply <ph id="ph1">`await`</ph> to the task that <ph id="ph2">`GetURLContentsAsync`</ph> returns to obtain the byte array value.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following code shows these changes.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The previous assignment abbreviates the following two lines of code.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Make the following changes in the method's signature:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Mark the method with the <ph id="ph1">`async`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Add "Async" to the method name.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>There is no task return variable, T, this time because <ph id="ph1">`SumPageSizesAsync`</ph> doesnâ€™t return a value for T. (The method has no <ph id="ph2">`return`</ph> statement.) However, the method must return a <ph id="ph3">`Task`</ph> to be awaitable.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Therefore, change the return type of the method from <ph id="ph1">`void`</ph> to <ph id="ph2">`Task`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following code shows these changes.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The conversion of <ph id="ph1">`SumPageSizes`</ph> to <ph id="ph2">`SumPageSizesAsync`</ph> is complete.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="startButton"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To convert startButton_Click to an asynchronous method</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In the event handler, change the name of the called method from <ph id="ph1">`SumPageSizes`</ph> to <ph id="ph2">`SumPageSizesAsync`</ph>, if you havenâ€™t already done so.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`SumPageSizesAsync`</ph> is an async method, change the code in the event handler to await the result.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`SumPageSizesAsync`</ph> mirrors the call to <ph id="ph2">`CopyToAsync`</ph> in <ph id="ph3">`GetURLContentsAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The call returns a <ph id="ph1">`Task`</ph>, not a <ph id="ph2">`Task(T)`</ph>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>As in previous procedures, you can convert the call by using one statement or two statements.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The following code shows these changes.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To prevent accidentally reentering the operation, add the following statement at the top of <ph id="ph1">`startButton_Click`</ph> to disable the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>You can reenable the button at the end of the event handler.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information about reentrancy, see <bpt id="p1">[</bpt>Handling Reentrancy in Async Apps (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/handling-reentrancy-in-async-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Finally, add the <ph id="ph1">`async`</ph> modifier to the declaration so that the event handler can await <ph id="ph2">`SumPagSizesAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Typically, the names of event handlers arenâ€™t changed.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The return type isnâ€™t changed to <ph id="ph1">`Task`</ph> because event handlers must return <ph id="ph2">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The conversion of the project from synchronous to asynchronous processing is complete.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="testAsynch"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To test the asynchronous solution</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Output that resembles the output of the synchronous solution should appear.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>However, notice the following differences.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The results donâ€™t all occur at the same time, after the processing is complete.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For example, both programs contain a line in <ph id="ph1">`startButton_Click`</ph> that clears the text box.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The intent is to clear the text box between runs if you choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button for a second time, after one set of results has appeared.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>In the synchronous version, the text box is cleared just before the counts appear for the second time, when the downloads are completed and the UI thread is free to do other work.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>In the asynchronous version, the text box clears immediately after you choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Most importantly, the UI thread isnâ€™t blocked during the downloads.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>You can move or resize the window while the web resources are being downloaded, counted, and displayed.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>If one of the websites is slow or not responding, you can cancel the operation by choosing the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button (the x in the red field in the upper-right corner).</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="GetURLContentsAsync"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> To replace method GetURLContentsAsync with a .NET Framework method</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The .NET Framework 4.5 provides many async methods that you can use.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>One of them, the <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> method <ph id="ph2">&lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%28System.String%29&gt;</ph>, does just what you need for this walkthrough.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>You can use it instead of the <ph id="ph1">`GetURLContentsAsync`</ph> method that you created in an earlier procedure.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The first step is to create an <ph id="ph1">`HttpClient`</ph> object in method <ph id="ph2">`SumPageSizesAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Add the following declaration at the start of the method.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`SumPageSizesAsync,`</ph> replace the call to your <ph id="ph2">`GetURLContentsAsync`</ph> method with a call to the <ph id="ph3">`HttpClient`</ph> method.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Remove or comment out the <ph id="ph1">`GetURLContentsAsync`</ph> method that you wrote.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The behavior of this version of the project should match the behavior that the "To test the asynchronous solution" procedure describes but with even less effort from you.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_CompleteCodeExamples"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Example</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The following code contains the full example of the conversion from a synchronous to an asynchronous solution by using the asynchronous <ph id="ph1">`GetURLContentsAsync`</ph> method that you wrote.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Notice that it strongly resembles the original, synchronous solution.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The following code contains the full example of the solution that uses the <ph id="ph1">`HttpClient`</ph> method, <ph id="ph2">`GetByteArrayAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Async Sample: Accessing the Web Walkthrough (C# and Visual Basic)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=255191)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>async<ept id="p1">](../../../../csharp/language-reference/keywords/async.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>await<ept id="p1">](../../../../csharp/language-reference/keywords/await.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Asynchronous Programming with async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async Return Types (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/async-return-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Task-based Asynchronous Programming (TAP)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204847)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Extend the async Walkthrough by Using Task.WhenAll (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/how-to-extend-the-async-walkthrough-by-using-task-whenall.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Make Multiple Web Requests in Parallel by Using async and await (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>