<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3656141c32a04e3a32a2992185f4c418c6915482</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\await.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d08fae465c6145e65d5467c6096b4b196447b248</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">615b2ba70cc2656bb955c05249295dbd39d93782</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>await (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>await (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> operator is applied to a task in an asynchronous method to suspend the execution of the method until the awaited task completes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The task represents ongoing work.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The asynchronous method in which <ph id="ph1">`await`</ph> is used must be modified by the <bpt id="p1">[</bpt>async<ept id="p1">](../../../csharp/language-reference/keywords/async.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Such a method, defined by using the <ph id="ph1">`async`</ph> modifier, and usually containing one or more <ph id="ph2">`await`</ph> expressions, is referred to as an <bpt id="p1">*</bpt>async method<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords were introduced in Visual Studio 2012.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an introduction to async programming, see <bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The task to which the <ph id="ph1">`await`</ph> operator is applied typically is the return value from a call to a method that implements the <bpt id="p1">[</bpt>Task-Based Asynchronous Pattern<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=204847)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Examples include values of type <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the following code, the <ph id="ph1">&lt;xref:System.Net.Http.HttpClient&gt;</ph> method <ph id="ph2">&lt;xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A&gt;</ph> returns a <ph id="ph3">`Task\&lt;byte[]&gt;`</ph>, <ph id="ph4">`getContentsTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The task is a promise to produce the actual byte array when the task is complete.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> operator is applied to <ph id="ph2">`getContentsTask`</ph> to suspend execution in <ph id="ph3">`SumPageSizesAsync`</ph> until <ph id="ph4">`getContentsTask`</ph> is complete.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the meantime, control is returned to the caller of <ph id="ph1">`SumPageSizesAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`getContentsTask`</ph> is finished, the <ph id="ph2">`await`</ph> expression evaluates to a byte array.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For the complete example, see <bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id="p1">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can download the sample from <bpt id="p1">[</bpt>Developer Code Samples<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=255191&amp;clcid=0x409)</ept> on the Microsoft website.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The example is in the AsyncWalkthrough_HttpClient project.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>As shown in the previous example, if <ph id="ph1">`await`</ph> is applied to the result of a method call that returns a <ph id="ph2">`Task&lt;TResult&gt;`</ph>, then the type of the <ph id="ph3">`await`</ph> expression is TResult.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`await`</ph> is applied to the result of a method call that returns a <ph id="ph2">`Task`</ph>, then the type of the <ph id="ph3">`await`</ph> expression is void.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example illustrates the difference.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`await`</ph> expression does not block the thread on which it is executing.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instead, it causes the compiler to sign up the rest of the async method as a continuation on the awaited task.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Control then returns to the caller of the async method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When the task completes, it invokes its continuation, and execution of the async method resumes where it left off.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`await`</ph> expression can occur only in the body of an immediately enclosing method, lambda expression, or anonymous method that is marked by an <ph id="ph2">`async`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">*</bpt>await<ept id="p1">*</ept> serves as a keyword only in that context.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Elsewhere, it is interpreted as an identifier.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Within the method, lambda expression, or anonymous method, an <ph id="ph1">`await`</ph> expression cannot occur in the body of a synchronous function, in a query expression,, in the block of a <bpt id="p1">[</bpt>lock statement<ept id="p1">](../../../csharp/language-reference/keywords/lock-statement.md)</ept>, or in an <bpt id="p2">[</bpt>unsafe<ept id="p2">](../../../csharp/language-reference/keywords/unsafe.md)</ept> context.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Most async methods return a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The properties of the returned task carry information about its status and history, such as whether the task is complete, whether the async method caused an exception or was canceled, and what the final result is.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`await`</ph> operator accesses those properties.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you await a task-returning async method that causes an exception, the  <ph id="ph1">`await`</ph> operator rethrows the exception.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you await a task-returning async method that's canceled, the <ph id="ph1">`await`</ph> operator rethrows an <ph id="ph2">&lt;xref:System.OperationCanceledException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A single task that is in a faulted state can reflect multiple exceptions.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, the task might be the result of a call to <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.WhenAll%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you await such a task, the await operation rethrows only one of the exceptions.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, you can't predict which of the exceptions is rethrown.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For examples of error handling in async methods, see <bpt id="p1">[</bpt>try-catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following Windows Forms example illustrates the use of <ph id="ph1">`await`</ph> in an async method, <ph id="ph2">`WaitAsynchronouslyAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Contrast the behavior of that method with the behavior of <ph id="ph1">`WaitSynchronously`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Without an <ph id="ph1">`await`</ph> operator applied to a task, <ph id="ph2">`WaitSynchronously`</ph> runs synchronously despite the use of the <ph id="ph3">`async`</ph> modifier in its definition and a call to <ph id="ph4">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph> in its body.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Accessing the Web by Using Async and Await<ept id="p1">](../../../csharp/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>async<ept id="p1">](../../../csharp/language-reference/keywords/async.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>