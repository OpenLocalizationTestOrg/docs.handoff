<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="deconstruct.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c24c1ec04bdd7ce7ee2061c2551652e26a28cf9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\deconstruct.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3533649e2636cf450fb62ec1c429a478a69defe1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b89179177e99f8ed2fba1347af85c7280461ae69</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Deconstructing tuples and other types</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to deconstruct tuples and other types.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Deconstructing tuples and other types</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A tuple provides a light-weight way to retrieve multiple values from a method call.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>But once you retrieve the tuple, you have to handle its individual elements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Doing this on an element-by-element basis is cumbersome, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`QueryCityData`</ph> method returns a 3-tuple, and each of its elements is assigned to a variable in a separate operation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Retrieving multiple field and property values from an object can be equally cumbersome: you have to assign a field or property value to a variable on a member-by-member basis.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, you can retrieve multiple elements from a tuple or retrieve multiple field, property, and computed values from an object in a single <bpt id="p1">*</bpt>deconstruct<ept id="p1">*</ept> operation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When you deconstruct a tuple, you assign its elements to individual variables.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you deconstruct an object, you assign selected values to individual variables.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Deconstructing a tuple</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>C# features built-in support for deconstructing tuples, which lets you unpackage all the items in a tuple in a single operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The general syntax for deconstructing a tuple is similar to the syntax for defining one: you enclose the variables to which each element is to be assigned in parentheses in the left side of an assignment statement.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns the elements of a 4-tuple to four separate variables:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are three ways to deconstruct a tuple:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can explicitly declare the type of each field inside parentheses.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example uses this approach to deconstruct the 3-tuple returned by the <ph id="ph1">`QueryCityData`</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`var`</ph> keyword so that C# infers the type of each variable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You place the <ph id="ph1">`var`</ph> keyword outside of the parentheses.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example uses type inference when deconstructing the 3-tuple returned by the <ph id="ph1">`QueryCityData`</ph> method.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`var`</ph> keyword individually with any or all of the variable declarations inside the parentheses.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is cumbersome and is not recommended.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Lastly, you may deconstruct the tuple into variables that have already been declared.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that you cannot specify a specific type outside the parentheses even if every field in the tuple has the same type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This generates compiler error CS8136, "Deconstruction 'var (...)' form disallows a specific type for 'var'.".</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that you must also assign each element of the tuple to a variable.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you omit any elements, the compiler generates error CS8132, "Cannot deconstruct a tuple of 'x' elements into 'y' variables."</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that you cannot mix declarations and assignments to existing variables on the left-hand side of a deconstruction.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The compiler generates error CS8184, "a deconstruction cannot mix declarations and expressions on the left-hand-side."</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>when the members include newly declared and existing variables.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Deconstructing tuple elements with discards</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Often when deconstructing a tuple, you're interested in the values of only some elements.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Starting with C# 7.0, you can take advantage of C#'s support for <bpt id="p1">*</bpt>discards<ept id="p1">*</ept>, which are write-only variables whose values you've chosen to ignore.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A discard is designated by an underscore character ("<ph id="ph1">\_</ph>") in an assignment.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can discard as many values as you like; all are represented by the single discard, <ph id="ph1">`_`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of tuples with discards.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`QueryCityDataForYears`</ph> method returns a 6-tuple with the name of a city, its area, a year, the city's population for that year, a second year, and the city's population for that second year.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The example shows the change in population between those two years.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Of the data available from the tuple, we're unconcerned with the city area, and we know the city name and the two dates at design-time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As a result, we're only interested in the two population values stored in the tuple, and can handle its remaining values as discards.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Deconstructing user-defined types</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Non-tuple types do not offer built-in support for discards.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, as the author of a class, a struct, or an interface, you can allow instances of the type to be deconstructed by implementing one or more <ph id="ph1">`Deconstruct`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The method returns void, and each value to be deconstructed is indicated by an <bpt id="p1">[</bpt>out<ept id="p1">](language-reference/keywords/out-parameter-modifier.md)</ept> parameter in the method signature.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`Deconstruct`</ph> method of a <ph id="ph2">`Person`</ph> class returns the first, middle, and last name:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can then deconstruct an instance of the <ph id="ph1">`Person`</ph> class named <ph id="ph2">`p`</ph> with an assignment like the following:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example overloads the <ph id="ph1">`Deconstruct`</ph> method to return various combinations of properties of a <ph id="ph2">`Person`</ph> object.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Individual overloads return:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A first and last name.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A first, last, and middle name.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A first name, a last name, a city name, and a state name.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Because you can overload the <ph id="ph1">`Deconstruct`</ph> method to reflect groups of data that are commonly extracted from an object, you should be careful to define <ph id="ph2">`Deconstruct`</ph> methods with signatures that are distinctive and unambiguous.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`Deconstruct`</ph> methods that have the same number of <ph id="ph2">`out`</ph> parameters or the same number and type of <ph id="ph3">`out`</ph> parameters in a different order can cause confusion.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The overloaded <ph id="ph1">`Deconstruct`</ph> method in the following example illustrates one possible source of confusion.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The first overload returns the first name, middle name, last name, and age of a <ph id="ph1">`Person`</ph> object, in that order.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The second overload returns name information only along with annual income, but the first, middle, and last name are in a different order.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This makes it easy to confuse the order of arguments when deconstructing a <ph id="ph1">`Person`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Deconstructing a user-defined type with discards</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Just as you do with <bpt id="p1">[</bpt>tuples<ept id="p1">](#deconstructing-tuple-elements-with-discards)</ept>, you can use discards to ignore selected items returned by a <ph id="ph1">`Deconstruct`</ph> method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each discard is defined by a variable named "<ph id="ph1">\_</ph>", and a single deconstruction operation can include multiple discards.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example deconstructs a <ph id="ph1">`Person`</ph> object into four strings (the first and last names, the city, and the state) but discards the last name and the state.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Deconstructing a user-defined type with an extension method</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you didn't author a class, struct, or interface, you can still deconstruct objects of that type by implementing one or more <ph id="ph1">`Deconstruct`</ph> <bpt id="p1">[</bpt>extension methods<ept id="p1">](programming-guide/classes-and-structs/extension-methods.md)</ept> to return the values in which you're interested.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following example defines two <ph id="ph1">`Deconstruct`</ph> extension methods for the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo?displayProperty=nameWithType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The first returns a set of values that indicate the characteristics of the property, including its type, whether it's static or instance, whether it's read-only, and whether it's indexed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The second indicates the property's accessibility.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the accessibility of get and set accessors can differ, Boolean values indicate whether the property has separate get and set accessors and, if it does, whether they have the same accessibility.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If there is only one accessor or both the get and the set accessor have the same accessibility, the <ph id="ph1">`access`</ph> variable indicates the accessibility of the property as a whole.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Otherwise, the accessibility of the get and set accessors are indicated by the <ph id="ph1">`getAccess`</ph> and <ph id="ph2">`setAccess`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Discards<ept id="p1">](discards.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tuples<ept id="p1">](tuples.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>