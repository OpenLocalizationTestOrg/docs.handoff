<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="default-value-expressions.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e10a5de73e8d49f1a380fb8945b98ac797ef270</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\default-value-expressions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd089c630f11da6899cd37251d59f36a131e7995</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47482a4035fd5989575a7c1056b989c357edc1f4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Default value expressions - C# Programming Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Default value expressions produce the default value for any reference type or value type</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>default value expressions (C# programming guide)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A default value expression <ph id="ph1">`default(T)`</ph> produces the default value of a type <ph id="ph2">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following table shows which values are produced for various types:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Default value</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Any reference type</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Numeric value type</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Zero</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>bool<ept id="p1">](../../language-reference/keywords/bool.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>char<ept id="p1">](../../language-reference/keywords/char.md)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>enum<ept id="p1">](../../language-reference/keywords/enum.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The value produced by the expression <ph id="ph1">`(E)0`</ph>, where <ph id="ph2">`E`</ph> is the enum identifier.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>struct<ept id="p1">](../../language-reference/keywords/struct.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The value produced by setting all value type fields to their default value and all reference type fields to <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Nullable type</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An instance for which the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> property is <ph id="ph2">`false`</ph> and the <ph id="ph3">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> property is undefined.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Default value expressions are particularly useful in generic classes and methods.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One issue that arises using generics is how to assign a default value of a parameterized type <ph id="ph1">`T`</ph> when you don't know the following in advance:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Whether <ph id="ph1">`T`</ph> is a reference type or a value type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`T`</ph> is a value type, whether it's a numeric value or a struct.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Given a variable <ph id="ph1">`t`</ph> of a parameterized type <ph id="ph2">`T`</ph>, the statement <ph id="ph3">`t = null`</ph> is only valid if <ph id="ph4">`T`</ph> is a reference type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The assignment <ph id="ph1">`t = 0`</ph> only works for numeric value types but not for structs.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To solve that, use a default value expression:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default(T)`</ph> expression is not limited to generic classes and methods.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Default value expressions can be used with any managed type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any of these expressions are valid:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example from the <ph id="ph1">`GenericList&lt;T&gt;`</ph> class shows how to use the <ph id="ph2">`default(T)`</ph> operator in a generic class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to Generics<ept id="p1">](../generics/introduction-to-generics.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>default literal and type inference</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Beginning with C# 7.1, the <ph id="ph1">`default`</ph> literal can be used for default value expressions when the compiler can infer the type of the expression.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> literal produces the same value as the equivalent <ph id="ph2">`default(T)`</ph> where <ph id="ph3">`T`</ph> is the inferred type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This can make code more concise by reducing the redundancy of declaring a type more than once.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> literal can be used in any of the following locations:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>variable initializer</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>variable assignment</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>declaring the default value for an optional parameter</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>providing the value for a method call argument</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>return statement (or expression in an expression bodied member)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example shows many usages of the <ph id="ph1">`default`</ph> literal in a default value expression:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../index.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics (C# Programming Guide)<ept id="p1">](../generics/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Methods<ept id="p1">](../generics/generic-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics in .NET<ept id="p1">](~/docs/standard/generics/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Default values table<ept id="p1">](../../language-reference/keywords/default-values-table.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>