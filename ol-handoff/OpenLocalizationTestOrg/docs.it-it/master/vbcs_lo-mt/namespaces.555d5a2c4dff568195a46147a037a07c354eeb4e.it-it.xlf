<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfc9f8f71b5ce5e05b6509ad490354663f894651</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\namespaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8e39192390ecc86bf35eeaf458d3f79233623ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d26be78385076579a7668d4773e4955396c01dfa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Namespaces in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Namespaces in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Namespaces organize the objects defined in an assembly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Assemblies can contain multiple namespaces, which can in turn contain other namespaces.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Namespaces prevent ambiguity and simplify references when using large groups of objects such as class libraries.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> defines the <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> class in the <ph id="ph3">&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how to declare a variable using the fully qualified name for this class:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#6<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Avoiding Name Collisions</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> namespaces address a problem sometimes called <bpt id="p1">*</bpt>namespace pollution<ept id="p1">*</ept>, in which the developer of a class library is hampered by the use of similar names in another library.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These conflicts with existing components are sometimes called <bpt id="p1">*</bpt>name collisions<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if you create a new class named <ph id="ph1">`ListBox`</ph>, you can use it inside your project without qualification.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, if you want to use the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> class in the same project, you must use a fully qualified reference to make the reference unique.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the reference is not unique, <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> produces an error stating that the name is ambiguous.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to declare these objects:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#7<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following illustration shows two namespace hierarchies, both containing an object named <ph id="ph1">`ListBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Namespace Hierarchy<ept id="p1">]</ept><bpt id="p2">(../../../visual-basic/programming-guide/program-structure/media/vanamespacehierarchy.gif "</bpt>vaNamespaceHierarchy<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By default, every executable file you create with <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> contains a namespace with the same name as your project.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if you define an object within a project named <ph id="ph1">`ListBoxProject`</ph>, the executable file ListBoxProject.exe contains a namespace called <ph id="ph2">`ListBoxProject`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Multiple assemblies can use the same namespace.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> treats them as a single set of names.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, you can define classes for a namespace called <ph id="ph1">`SomeNameSpace`</ph> in an assembly named <ph id="ph2">`Assemb1`</ph>, and define additional classes for the same namespace from an assembly named <ph id="ph3">`Assemb2`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Fully Qualified Names</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Fully qualified names are object references that are prefixed with the name of the namespace in which the object is defined.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use objects defined in other projects if you create a reference to the class (by choosing <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu) and then use the fully qualified name for the object in your code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code fragment shows how to use the fully qualified name for an object from another project's namespace:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#8<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Fully qualified names prevent naming conflicts because they make it possible for the compiler to determine which object is being used.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, the names themselves can get long and cumbersome.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To get around this, you can use the <ph id="ph1">`Imports`</ph> statement to define an <bpt id="p1">*</bpt>alias<ept id="p1">*</ept>â€”an abbreviated name you can use in place of a fully qualified name.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, the following code example creates aliases for two fully qualified names, and uses these aliases to define two objects.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#9<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#10<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`Imports`</ph> statement without an alias, you can use all the names in that namespace without qualification, provided they are unique to the project.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If your project contains <ph id="ph1">`Imports`</ph> statements for namespaces that contain items with the same name, you must fully qualify that name when you use it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Suppose, for example, your project contained the following two <ph id="ph1">`Imports`</ph> statements:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#11<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you attempt to use <ph id="ph1">`Class1`</ph> without fully qualifying it, <ph id="ph2">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> produces an error stating that the name <ph id="ph3">`Class1`</ph> is ambiguous.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Namespace Level Statements</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Within a namespace, you can define items such as modules, interfaces, classes, delegates, enumerations, structures, and other namespaces.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You cannot define items such as properties, procedures, variables and events at the namespace level.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>These items must be declared within containers such as modules, structures, or classes.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Global Keyword in Fully Qualified Names</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you have defined a nested hierarchy of namespaces, code inside that hierarchy might be blocked from accessing the <ph id="ph1">&lt;xref:System?displayProperty=fullName&gt;</ph> namespace of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example illustrates a hierarchy in which the <ph id="ph1">`SpecialSpace.System`</ph> namespace blocks access to <ph id="ph2">&lt;xref:System?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As a result, the Visual Basic compiler cannot successfully resolve the reference to <ph id="ph1">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>, because <ph id="ph2">`SpecialSpace.System`</ph> does not define <ph id="ph3">`Int32`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Global`</ph> keyword to start the qualification chain at the outermost level of the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This allows you to specify the <ph id="ph1">&lt;xref:System?displayProperty=fullName&gt;</ph> namespace or any other namespace in the class library.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Global`</ph> to access other root-level namespaces, such as <ph id="ph2">&lt;xref:Microsoft.VisualBasic?displayProperty=fullName&gt;</ph>, and any namespace associated with your project.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Global Keyword in Namespace Statements</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`Global`</ph> keyword in a <bpt id="p1">[</bpt>Namespace Statement<ept id="p1">](../../../visual-basic/language-reference/statements/namespace-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This lets you define a namespace out of the root namespace of your project.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>All namespaces in your project are based on the root namespace for the project.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Visual Studio assigns your project name as the default root namespace for all code in your project.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, if your project is named <ph id="ph1">`ConsoleApplication1`</ph>, its programming elements belong to namespace <ph id="ph2">`ConsoleApplication1`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you declare <ph id="ph1">`Namespace Magnetosphere`</ph>, references to <ph id="ph2">`Magnetosphere`</ph> in the project will access <ph id="ph3">`ConsoleApplication1.Magnetosphere`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following examples use the <ph id="ph1">`Global`</ph> keyword to declare a namespace out of the root namespace for the project.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#22<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_7.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In a namespace declaration, <ph id="ph1">`Global`</ph> cannot be nested in another namespace.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>Application Page, Project Designer (Visual Basic)<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic)</ept> to view and modify the <bpt id="p2">**</bpt>Root Namespace<ept id="p2">**</ept> of the project.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For new projects, the <bpt id="p1">**</bpt>Root Namespace<ept id="p1">**</ept> defaults to the project name.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To cause <ph id="ph1">`Global`</ph> to be the top-level namespace, you can clear the <bpt id="p1">**</bpt>Root Namespace<ept id="p1">**</ept> entry so that the box is empty.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Clearing <bpt id="p1">**</bpt>Root Namespace<ept id="p1">**</ept> removes the need for the <ph id="ph1">`Global`</ph> keyword in namespace declarations.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Namespace`</ph> statement declares a name that is also a namespace in the .NET Framework, the .NET Framework namespace becomes unavailable if the <ph id="ph2">`Global`</ph> keyword is not used in a fully qualified name.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To enable access to that .NET Framework namespace without using the <ph id="ph1">`Global`</ph> keyword, you can include the <ph id="ph2">`Global`</ph> keyword in the <ph id="ph3">`Namespace`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following example has the <ph id="ph1">`Global`</ph> keyword in the <ph id="ph2">`System.Text`</ph> namespace declaration.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`Global`</ph> keyword was not present in the namespace declaration, <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> could not be accessed without specifying <ph id="ph3">`Global.System.Text.StringBuilder`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For a project named <ph id="ph1">`ConsoleApplication1`</ph>, references to <ph id="ph2">`System.Text`</ph> would access <ph id="ph3">`ConsoleApplication1.System.Text`</ph> if the <ph id="ph4">`Global`</ph> keyword was not used.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrApplication#21<ept id="p2">](../../../visual-basic/programming-guide/program-structure/codesnippet/VisualBasic/namespaces_8.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Assemblies and the Global Assembly Cache<ept id="p1">](../../../visual-basic/programming-guide/concepts/assemblies-gac/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create and Use Assemblies Using the Command Line<ept id="p1">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>References and the Imports Statement<ept id="p1">](../../../visual-basic/programming-guide/program-structure/references-and-the-imports-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Writing Code in Office Solutions<ept id="p1">](https://msdn.microsoft.com/library/bb608596)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>