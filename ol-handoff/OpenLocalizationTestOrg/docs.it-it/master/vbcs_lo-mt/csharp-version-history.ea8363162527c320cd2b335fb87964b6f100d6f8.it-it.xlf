<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="csharp-version-history.md" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84274f8ddfd8295d5db1e861c790c134ba30c6e2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\whats-new\csharp-version-history.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea4a805eccfb8a5657860b3386e90f81547cc6e3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0be0820c526016c5fe79d0a4f0b1009b136551e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>The history of C# - C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>What did the language look like in its earliest versions, and how has it evolved since?</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The history of C<ph id="ph1">\#</ph></source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article provides a history of each major release of the C# language.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The C# team is continuing to innovate and add new features.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Detailed language feature status, including features considered for upcoming releases can be found <bpt id="p1">[</bpt>on the dotnet/roslyn repository<ept id="p1">](https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md)</ept> on GitHub.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The C# language relies on types and methods in what the C# specification defines as a <bpt id="p1">*</bpt>standard library<ept id="p1">*</ept> for some of the features.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The .NET platform delivers those types and methods in a number of packages.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One example is exception processing.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Every <ph id="ph1">`throw`</ph> statement or expression is checked to ensure the object being thrown is derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Similarly, every <ph id="ph1">`catch`</ph> is checked to ensure that the type being caught is derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each version may add new requirements.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To use the latest language features in older environments, you may need to install specific libraries.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These dependencies are documented in the page for each specific version.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can learn more about the <bpt id="p1">[</bpt>relationships between language and library<ept id="p1">](relationships-between-language-and-library.md)</ept> for background on this dependency.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The C# build tools consider the latest major language release the default language version.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There may be point releases between major releases, detailed in other articles in this section.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To use the latest features in a point release, you need to <bpt id="p1">[</bpt>configure the compiler language version<ept id="p1">](../language-reference/configure-language-version.md)</ept> and select the version.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There have been three point releases since C# 7.0:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# 7.3<ept id="p1">](csharp-7-3.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>C# 7.3 is currently available in <bpt id="p1">[</bpt>Visual Studio 2017 version 15.7<ept id="p1">](https://visualstudio.microsoft.com/vs/whatsnew/)</ept>, and in the <bpt id="p2">[</bpt>.NET Core 2.1 SDK 2.1.300 RC1<ept id="p2">](../../core/whats-new/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# 7.2<ept id="p1">](csharp-7-2.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>C# 7.2 is currently available in <bpt id="p1">[</bpt>Visual Studio 2017 version 15.5<ept id="p1">](https://visualstudio.microsoft.com/vs/whatsnew/)</ept>, and in the <bpt id="p2">[</bpt>.NET Core 2.0 SDK<ept id="p2">](../../core/whats-new/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# 7.1<ept id="p1">](csharp-7-1.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These features were added in <bpt id="p1">[</bpt>Visual Studio 2017 version 15.3<ept id="p1">](https://visualstudio.microsoft.com/vs/whatsnew/)</ept>, and in the <bpt id="p2">[</bpt>.NET Core 2.0 SDK<ept id="p2">](../../core/whats-new/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>C# version 1.0</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you go back and look, C# version 1.0 looked a lot like Java.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As <bpt id="p1">[</bpt>part of its stated design goals for ECMA<ept id="p1">](https://feeldotneteasy.blogspot.com/2011/01/c-design-goals.html)</ept>, it sought to be a "simple, modern, general-purpose object-oriented language."</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>At the time, looking like Java meant it achieved those early design goals.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>But if you look back on C# 1.0 now, you'd find yourself a little dizzy.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It lacked the built-in async capabilities and some of the slick functionality around generics you take for granted.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>As a matter of fact, it lacked generics altogether.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>And <bpt id="p1">[</bpt>LINQ<ept id="p1">](../linq/index.md)</ept>?</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Not available yet.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Those additions would take some years to come out.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>C# version 1.0 looked stripped of features, compared to today.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You'd find yourself writing some verbose code.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>But yet, you have to start somewhere.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>C# version 1.0 was a viable alternative to Java on the Windows platform.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The major features of C# 1.0 included:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes<ept id="p1">](../programming-guide/classes-and-structs/classes.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structs<ept id="p1">](../programming-guide/classes-and-structs/structs.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](../programming-guide/interfaces/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../events-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](../properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../delegates-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expressions<ept id="p1">](../programming-guide/statements-expressions-operators/expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Statements<ept id="p1">](../programming-guide/statements-expressions-operators/statements.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](../programming-guide/concepts/attributes/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Literals<ept id="p1">](../language-reference/keywords/literal-keywords.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>C# version 1.2</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>C# version 1.2 shipped with Visual Studio 2003.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>It contained a few small enhancements to the language.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Most notable is that starting with this version, the code generated in a <ph id="ph1">`foreach`</ph> loop called <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> on an <ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph> when that <ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph> implemented <ph id="ph5">&lt;xref:System.IDisposable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>C# version 2.0</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Now things start to get interesting.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Let's take a look at some major features of C# 2.0, released in 2005, along with Visual Studio 2005:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](../programming-guide/generics/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Partial types<ept id="p1">](../programming-guide/classes-and-structs/partial-classes-and-methods.md#partial-classes)</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous methods<ept id="p1">](../programming-guide/statements-expressions-operators/anonymous-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable types<ept id="p1">](../programming-guide/nullable-types/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iterators<ept id="p1">](../programming-guide/concepts/iterators.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Covariance and contravariance<ept id="p1">](../programming-guide/concepts/covariance-contravariance/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Other C# 2.0 features added capabilities to existing features:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Getter/setter separate accessibility</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Method group conversions (delegates)</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Static classes</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Delegate inference</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>While C# may have started as a generic Object-Oriented (OO) language, C# version 2.0 changed that in a hurry.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Once they had their feet under them, they went after some serious developer pain points.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>And they went after them in a significant way.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>With generics, types and methods can operate on an arbitrary type while still retaining type safety.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For instance, having a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> lets you have <ph id="ph2">`List&lt;string&gt;`</ph> or <ph id="ph3">`List&lt;int&gt;`</ph> and perform type-safe operations on those strings or integers while you iterate through them.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Using generics is better than create <ph id="ph1">`ListInt`</ph> that derives from <ph id="ph2">`ArrayList`</ph>  or casting from <ph id="ph3">`Object`</ph> for every operation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>C# version 2.0 brought iterators.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To put it succinctly, iterators let you examine all the items in a <ph id="ph1">`List`</ph> (or other Enumerable types) with a <ph id="ph2">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Having iterators as a first-class part of the language dramatically enhanced readability of the language and people's ability to reason about the code.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>And yet, C# continued to play a bit of catch-up with Java.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Java had already released versions that included generics and iterators.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>But that would soon change as the languages continued to evolve apart.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>C# version 3.0</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>C# version 3.0 came in late 2007, along with Visual Studio 2008, though the full boat of language features would actually come with .NET Framework version 3.5.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This version marked a major change in the growth of C#.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It established C# as a truly formidable programming language.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Let's take a look at some major features in this version:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auto-implemented properties<ept id="p1">](../programming-guide/classes-and-structs/auto-implemented-properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous types<ept id="p1">](../programming-guide/classes-and-structs/anonymous-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query expressions<ept id="p1">](../linq/query-expression-basics.md)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Lambda expressions<ept id="p1">](../programming-guide/statements-expressions-operators/lambda-expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression trees<ept id="p1">](../expression-trees.md)</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extension methods<ept id="p1">](../programming-guide/classes-and-structs/extension-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicitly typed local variables<ept id="p1">](../language-reference/keywords/var.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Partial methods<ept id="p1">](../language-reference/keywords/partial-method.md)</ept></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object and collection initializers<ept id="p1">](../programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In retrospect, many of these features seem both inevitable and inseparable.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>They all fit together strategically.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It's generally thought that C# version's killer feature was the query expression, also known as Language-Integrated Query (LINQ).</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A more nuanced view examines expression trees, lambda expressions, and anonymous types as the foundation upon which LINQ is constructed.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>But, in either case, C# 3.0 presented a revolutionary concept.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>C# 3.0 had begun to lay the groundwork for turning C# into a hybrid Object-Oriented / Functional language.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Specifically, you could now write SQL-style, declarative queries to perform operations on collections, among other things.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Instead of writing a <ph id="ph1">`for`</ph> loop to compute the average of a list of integers, you could now do that as simply as <ph id="ph2">`list.Average()`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The combination of query expressions and extension methods made it look as though that list of integers had gotten a whole lot smarter.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>It took time for people to really grasp and integrate the concept, but they gradually did.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>And now, years later, code is much more concise, simple, and functional.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>C# version 4.0</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>C# version 4.0 would have had a difficult time living up to the groundbreaking status of version 3.0.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>With version 3.0, C# had moved the language firmly out from the shadow of Java and into prominence.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The language was quickly becoming elegant.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The next version did introduce some interesting new features:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dynamic binding<ept id="p1">](../language-reference/keywords/dynamic.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Named/optional arguments<ept id="p1">](../programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic covariant and contravariant<ept id="p1">](../../standard/generics/covariance-and-contravariance.md)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Embedded interop types<ept id="p1">](../../framework/interop/type-equivalence-and-embedded-interop-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Embedded interop types alleviated a deployment pain.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Generic covariance and contravariance give you more power to use generics, but they're a bit academic and probably most appreciated by framework and library authors.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Named and optional parameters let you eliminate many method overloads and provide convenience.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>But none of those features are exactly paradigm altering.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The major feature was the introduction of the <ph id="ph1">`dynamic`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dynamic`</ph> keyword introduced into C# version 4.0 the ability to override the compiler on compile-time typing.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>By using the dynamic keyword, you can create constructs similar to dynamically typed languages like JavaScript.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can create a <ph id="ph1">`dynamic x = "a string"`</ph> and then add six to it, leaving it up to the runtime to sort out what should happen next.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Dynamic binding gives you the potential for errors but also great power within the language.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>C# version 5.0</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>C# version 5.0 was a focused version of the language.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Nearly all of the effort for that version went into another groundbreaking language concept: the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> model for asynchronous programming.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Here is the major features list:</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous members<ept id="p1">](../async.md)</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Caller info attributes<ept id="p1">](../programming-guide/concepts/caller-information.md)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Code Project: Caller Info Attributes in C# 5.0<ept id="p1">](https://www.codeproject.com/Tips/606379/Caller-Info-Attributes-in-Csharp)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The caller info attribute lets you easily retrieve information about the context in which you're running without resorting to a ton of boilerplate reflection code.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>It has many uses in diagnostics and logging tasks.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>But <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> are the real stars of this release.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>When these features came out in 2012, C# changed the game again by baking asynchrony into the language as a first-class participant.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If you've ever dealt with long running operations and the implementation of webs of callbacks, you probably loved this language feature.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>C# version 6.0</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>With versions 3.0 and 5.0, C# had added major new features in an object-oriented language.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>With version 6.0, it would go away from doing a dominant killer feature and instead release many smaller features that made C# programming more productive.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Here are some of them:</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Static imports<ept id="p1">](./csharp-6.md#using-static)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception filters<ept id="p1">](./csharp-6.md#exception-filters)</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auto-property initializers<ept id="p1">](./csharp-6.md#auto-property-initializers)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expression bodied members<ept id="p1">](./csharp-6.md#expression-bodied-function-members)</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Null propagator<ept id="p1">](./csharp-6.md#null-conditional-operators)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String interpolation<ept id="p1">](./csharp-6.md#string-interpolation)</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>nameof operator<ept id="p1">](./csharp-6.md#the-nameof-expression)</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Index initializers<ept id="p1">](csharp-6.md#extension-add-methods-in-collection-initializers)</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Other new features include:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Await in catch/finally blocks</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Default values for getter-only properties</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Each of these features is interesting in its own right.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>But if you look at them altogether, you see an interesting pattern.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>In this version, C# eliminated language boilerplate to make code more terse and readable.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>So for fans of clean, simple code, this language version was a huge win.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>They did one other thing along with this version, though it's not a traditional language feature in itself.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>They released <bpt id="p1">[</bpt>Roslyn the compiler as a service<ept id="p1">](https://github.com/dotnet/roslyn)</ept>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The C# compiler is now written in C#, and you can use the compiler as part of your programming efforts.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>C# version 7.0</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The most recent major version is C# version 7.0.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This version has some evolutionary and cool stuff in the vein of C# 6.0, but without the compiler as a service.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Here are some of the new features:</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Out variables<ept id="p1">](./csharp-7.md#out-variables)</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tuples and deconstruction<ept id="p1">](./csharp-7.md#tuples)</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pattern matching<ept id="p1">](./csharp-7.md#pattern-matching)</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local functions<ept id="p1">](./csharp-7.md#local-functions)</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expanded expression bodied members<ept id="p1">](./csharp-7.md#more-expression-bodied-members)</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Ref locals and returns<ept id="p1">](./csharp-7.md#ref-locals-and-returns)</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Other features included:</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Discards<ept id="p1">](./csharp-7.md#discards)</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binary Literals and Digit Separators<ept id="p1">](./csharp-7.md#numeric-literal-syntax-improvements)</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Throw expressions<ept id="p1">](./csharp-7.md#throw-expressions)</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>All of these features offer cool new capabilities for developers and the opportunity to write even cleaner code than ever.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A highlight is condensing the declaration of variables to use with the <ph id="ph1">`out`</ph> keyword and by allowing multiple return values via tuple.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>But C# is being put to ever broader use.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>.NET Core now targets any operating system and has its eyes firmly on the cloud and on portability.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>These new capabilities certainly occupy the language designers' thoughts and time, in addition to coming up with new features.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Article<ept id="p1">_</ept> <bpt id="p2">[</bpt><bpt id="p3">_</bpt>originally published on the NDepend blog<ept id="p3">_</ept><ept id="p2">](https://blog.ndepend.com/c-versions-look-language-history/)</ept><bpt id="p4">_</bpt>, courtesy of Erik Dietrich and Patrick Smacchia.<ept id="p4">_</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>