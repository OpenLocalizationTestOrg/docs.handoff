<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="safely-cast-using-pattern-matching-is-and-as-operators.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e0eb53a44a6348d0f5154a0a08222da90985864</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\how-to\safely-cast-using-pattern-matching-is-and-as-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec5c4fd9e3d9c130216c8558ce7036eb34cef99b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb6145eb6076e48dacb97a7e617f2b36cb59a8a8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: safely cast by using pattern matching and the is and as operators</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn to use pattern matching techniques to safely cast variables to a different type.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>You can use pattern matching as well as the is and as operators to safely convert types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: safely cast by using pattern matching is and as operators</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Because objects are polymorphic, it's possible for a variable of a base class type to hold a derived <bpt id="p1">[</bpt>type<ept id="p1">](../programming-guide/types/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To access the derived type's instance members, it's necessary to <bpt id="p1">[</bpt>cast<ept id="p1">](../programming-guide/types/casting-and-type-conversions.md)</ept> the value back to the derived type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, a cast creates the risk of throwing an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C# provides <bpt id="p1">[</bpt>pattern matching<ept id="p1">](../pattern-matching.md)</ept> statements that perform a cast conditionally only when it will succeed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>C# also provides the <bpt id="p1">[</bpt>is<ept id="p1">](../language-reference/keywords/is.md)</ept> and <bpt id="p2">[</bpt>as<ept id="p2">](../language-reference/keywords/as.md)</ept> operators to test if a value is of a certain type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following code demonstrates the pattern matching <ph id="ph1">`is`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It contains methods that test a method argument to determine if it is one of a possible set of derived types:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The preceding sample demonstrates a few features of pattern matching syntax.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`if (a is Mammal m)`</ph> and <ph id="ph2">`if (o is Mammal m)`</ph> statements combine the test with an initialization assignment.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The assignment occurs only when the test succeeds.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`m`</ph> is only in scope in the embedded <ph id="ph2">`if`</ph> statement where it has been assigned.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You cannot access <ph id="ph1">`m`</ph> later in the same method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Try it in the interactive window.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also use the same syntax for testing if a <bpt id="p1">[</bpt>nullable type<ept id="p1">](../programming-guide/nullable-types/index.md)</ept> has a value, as shown in the following sample code:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The preceding sample demonstrates other features of pattern matching to use with conversions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can test a variable for the null pattern by checking specifically for the <ph id="ph1">`null`</ph> value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When the runtime value of the variable is <ph id="ph1">`null`</ph>, an <ph id="ph2">`is`</ph> statement checking for a type always returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The pattern matching <ph id="ph1">`is`</ph> statement doesn't allow a nullable value type, such as <ph id="ph2">`int?`</ph> or <ph id="ph3">`Nullable&lt;int&gt;`</ph>, but you can test for any other value type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The preceding sample also shows how you use the pattern matching <ph id="ph1">`is`</ph> expression in a <ph id="ph2">`switch`</ph> statement where the variable may be one of many different types.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you want to test if a variable is a given type, but not assign it to a new variable, you can use the <ph id="ph1">`is`</ph> and <ph id="ph2">`as`</ph> operators for reference types and nullable types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following code shows how to use the <ph id="ph1">`is`</ph> and <ph id="ph2">`as`</ph> statements that were part of the C# language before pattern matching was introduced to test if a variable is of a given type:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As you can see by comparing this code with the pattern matching code, the pattern matching syntax provides more robust features by combining the test and the assignment in a single statement.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use the pattern matching syntax whenever possible.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can try these samples by looking at the code in our <bpt id="p1">[</bpt>GitHub repository<ept id="p1">](https://github.com/dotnet/samples/tree/master/snippets/csharp/how-to/safelycast)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Or you can download the samples <bpt id="p1">[</bpt>as a zip file<ept id="p1">](https://github.com/dotnet/samples/raw/master/snippets/csharp/how-to/safelycast.zip)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>