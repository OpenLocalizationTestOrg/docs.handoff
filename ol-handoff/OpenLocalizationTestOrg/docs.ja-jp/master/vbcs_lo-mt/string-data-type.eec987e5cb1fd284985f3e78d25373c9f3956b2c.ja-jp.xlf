<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="string-data-type.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d7a4272169ae7b2749d038e1116818d2cfbad95</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\data-types\string-data-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da821dbde4f7366f21ef3690df2c1f287decdb08</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2cd9ecb2b6124ea1c326454f83671315af380e6b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>String Data Type (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String Data Type (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Holds sequences of unsigned 16-bit (2-byte) code points that range in value from 0 through 65535.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">*</bpt>code point<ept id="p1">*</ept>, or character code, represents a single Unicode character.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A string can contain from 0 to approximately two billion (2 ^ 31) Unicode characters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`String`</ph> data type to hold multiple characters without the array management overhead of <ph id="ph2">`Char()`</ph>, an array of <ph id="ph3">`Char`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The default value of <ph id="ph1">`String`</ph> is <ph id="ph2">`Nothing`</ph> (a null reference).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Note that this is not the same as the empty string (value <ph id="ph1">`""`</ph>).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Unicode Characters</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These first 128 code points are the same as those the ASCII character set defines.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Unicode uses the remaining code points (256-65535) for a wide variety of symbols.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This includes worldwide textual characters, diacritics, and mathematical and technical symbols.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use methods such as <ph id="ph1">&lt;xref:System.Char.IsDigit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Char.IsPunctuation%2A&gt;</ph> on an individual character in a <ph id="ph3">`String`</ph> variable to determine its Unicode classification.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Format Requirements</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You must enclose a <ph id="ph1">`String`</ph> literal within quotation marks (<ph id="ph2">`" "`</ph>).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you must include a quotation mark as one of the characters in the string, you use two contiguous quotation marks (<ph id="ph1">`""`</ph>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note that the contiguous quotation marks that represent a quotation mark in the string are independent of the quotation marks that begin and end the <ph id="ph1">`String`</ph> literal.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>String Manipulations</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Once you assign a string to a <ph id="ph1">`String`</ph> variable, that string is <bpt id="p1">*</bpt>immutable<ept id="p1">*</ept>, which means you cannot change its length or contents.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you alter a string in any way, Visual Basic creates a new string and abandons the previous one.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String`</ph> variable then points to the new string.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can manipulate the contents of a <ph id="ph1">`String`</ph> variable by using a variety of string functions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.Left%2A&gt;</ph> function</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A string created by another component might be padded with leading or trailing spaces.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you receive such a string, you can use the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.Trim%2A&gt;</ph>, <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Strings.LTrim%2A&gt;</ph>, and <ph id="ph3">&lt;xref:Microsoft.VisualBasic.Strings.RTrim%2A&gt;</ph> functions to remove these spaces.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about string manipulations, see <bpt id="p1">[</bpt>Strings<ept id="p1">](../../../visual-basic/programming-guide/language-features/strings/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Programming Tips</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Negative Numbers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Remember that the characters held by <ph id="ph1">`String`</ph> are unsigned and cannot represent negative values.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In any case, you should not use <ph id="ph1">`String`</ph> to hold numeric values.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Interop Considerations.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you are interfacing with components not written for the .NET Framework, for example Automation or COM objects, remember that string characters have a different data width (8 bits) in other environments.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you are passing a string argument of 8-bit characters to such a component, declare it as <ph id="ph1">`Byte()`</ph>, an array of <ph id="ph2">`Byte`</ph> elements, instead of <ph id="ph3">`String`</ph> in your new Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Type Characters.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Appending the identifier type character <ph id="ph1">`$`</ph> to any identifier forces it to the <ph id="ph2">`String`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`String`</ph> has no literal type character.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, the compiler treats literals enclosed in quotation marks (<ph id="ph1">`" "`</ph>) as <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Framework Type.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The corresponding type in the .NET Framework is the <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Types<ept id="p1">](../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Char Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/char-data-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Conversion Functions<ept id="p1">](../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conversion Summary<ept id="p1">](../../../visual-basic/language-reference/keywords/conversion-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Call a Windows Function that Takes Unsigned Types<ept id="p1">](../../../visual-basic/programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Efficient Use of Data Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/efficient-use-of-data-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>