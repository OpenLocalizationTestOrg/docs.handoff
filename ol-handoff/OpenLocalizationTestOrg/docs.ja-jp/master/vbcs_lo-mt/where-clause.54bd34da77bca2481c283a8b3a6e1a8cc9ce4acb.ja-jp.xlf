<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5544f442bbc13c7624c2260409f69491cfc44e14</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\queries\where-clause.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a42a4c00a742b809cb7fa6dea23fa2d8998f0741</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">daa4cc97d48ac34f6e29e4a83e2c8d73ea9c96cb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Where Clause (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Where Clause (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the filtering condition for a query.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An expression that determines whether the values for the current item in the collection are included in the output collection.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The expression must evaluate to a <ph id="ph1">`Boolean`</ph> value or the equivalent of a <ph id="ph2">`Boolean`</ph> value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the condition evaluates to <ph id="ph1">`True`</ph>, the element is included in the query result; otherwise, the element is excluded from the query result.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Where`</ph> clause enables you to filter query data by selecting only elements that meet certain criteria.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Elements whose values cause the <ph id="ph1">`Where`</ph> clause to evaluate to <ph id="ph2">`True`</ph> are included in the query result; other elements are excluded.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The expression that is used in a <ph id="ph1">`Where`</ph> clause must evaluate to a <ph id="ph2">`Boolean`</ph> or the equivalent of a <ph id="ph3">`Boolean`</ph>, such as an Integer that evaluates to <ph id="ph4">`False`</ph> when its value is zero.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can combine multiple expressions in a <ph id="ph1">`Where`</ph> clause by using logical operators such as <ph id="ph2">`And`</ph>, <ph id="ph3">`Or`</ph>, <ph id="ph4">`AndAlso`</ph>, <ph id="ph5">`OrElse`</ph>, <ph id="ph6">`Is`</ph>, and <ph id="ph7">`IsNot`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>By default, query expressions are not evaluated until they are accessedâ€”for example, when they are data-bound or iterated through in a <ph id="ph1">`For`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As a result, the <ph id="ph1">`Where`</ph> clause is not evaluated until the query is accessed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you have values external to the query that are used in the <ph id="ph1">`Where`</ph> clause, ensure that the appropriate value is used in the <ph id="ph2">`Where`</ph> clause at the time the query is executed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about query execution, see <bpt id="p1">[</bpt>Writing Your First LINQ Query<ept id="p1">](../../../visual-basic/programming-guide/concepts/linq/writing-your-first-linq-query.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can call functions within a <ph id="ph1">`Where`</ph> clause to perform a calculation or operation on a value from the current element in the collection.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Calling a function in a <ph id="ph1">`Where`</ph> clause can cause the query to be executed immediately when it is defined instead of when it is accessed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about query execution, see <bpt id="p1">[</bpt>Writing Your First LINQ Query<ept id="p1">](../../../visual-basic/programming-guide/concepts/linq/writing-your-first-linq-query.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following query expression uses a <ph id="ph1">`From`</ph> clause to declare a range variable <ph id="ph2">`cust`</ph> for each <ph id="ph3">`Customer`</ph> object in the <ph id="ph4">`customers`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Where`</ph> clause uses the range variable to restrict the output to customers from the specified region.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`For Each`</ph> loop displays the company name for each customer in the query result.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#23<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/where-clause_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`And`</ph> and <ph id="ph2">`Or`</ph> logical operators in the <ph id="ph3">`Where`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbSimpleQuerySamples#31<ept id="p2">](../../../visual-basic/language-reference/queries/codesnippet/VisualBasic/where-clause_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queries<ept id="p1">](../../../visual-basic/language-reference/queries/queries.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>From Clause<ept id="p1">](../../../visual-basic/language-reference/queries/from-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Select Clause<ept id="p1">](../../../visual-basic/language-reference/queries/select-clause.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>