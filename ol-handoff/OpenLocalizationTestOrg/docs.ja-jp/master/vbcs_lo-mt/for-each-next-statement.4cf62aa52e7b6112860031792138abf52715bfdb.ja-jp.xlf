<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="for-each-next-statement.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9d1c4e7304384ab155ccfb6f5ddba52d5de4a4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\for-each-next-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd905a09adc8d0d428cb6e15b4dbdbd006755b75</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b67ac47e9a4ccccc788ac2112e6c04ee1e76d172</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>For Each...Next Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For Each...Next Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Repeats a group of statements for each element in a collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required in the <ph id="ph1">`For Each`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Optional in the <ph id="ph1">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Variable.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Used to iterate through the elements of the collection.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required if <ph id="ph1">`element`</ph> isn't already declared.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Data type of <ph id="ph1">`element`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A variable with a type that's a collection type or Object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Refers to the collection over which the <ph id="ph1">`statements`</ph> are to be repeated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>One or more statements between <ph id="ph1">`For Each`</ph> and <ph id="ph2">`Next`</ph> that run on each item in <ph id="ph3">`group`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Transfers control to the start of the <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Transfers control out of the <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Terminates the definition of the <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Simple Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop when you want to repeat a set of statements for each element of a collection or array.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> works well when you can associate each iteration of a loop with a control variable and determine that variable's initial and final values.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, when you are dealing with a collection, the concept of initial and final values isn't meaningful, and you don't necessarily know how many elements the collection has.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this kind of case, a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop is often a better choice.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`For Each`</ph>…<ph id="ph2">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>statement iterates through all the elements of a List collection.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept> and <bpt id="p2">[</bpt>Arrays<ept id="p2">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Nested Loops</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can nest <ph id="ph1">`For Each`</ph> loops by putting one loop within another.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example demonstrates nested <ph id="ph1">`For Each`</ph>…<ph id="ph2">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>structures.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When you nest loops, each loop must have a unique <ph id="ph1">`element`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also nest different kinds of control structures within each other.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Exit For and Continue For</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Exit For<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement causes execution to exit the <ph id="ph1">`For`</ph>…<ph id="ph2">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>loop and transfers control to the statement that follows the <ph id="ph1">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Continue For`</ph> statement transfers control immediately to the next iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Continue Statement<ept id="p1">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">`Continue For`</ph> and <ph id="ph2">`Exit For`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can put any number of <ph id="ph1">`Exit For`</ph> statements in a <ph id="ph2">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`For Each`</ph> loops, <ph id="ph2">`Exit For`</ph> causes execution to exit the innermost loop and transfers control to the next higher level of nesting.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit For`</ph> is often used after an evaluation of some condition, for example, in an <ph id="ph2">`If`</ph>...<ph id="ph3">`Then`</ph>...<ph id="ph4">`Else`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You might want to use <ph id="ph1">`Exit For`</ph> for the following conditions:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Continuing to iterate is unnecessary or impossible.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This might be caused by an erroneous value or a termination request.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An exception is caught in a <ph id="ph1">`Try`</ph>...<ph id="ph2">`Catch`</ph>...<ph id="ph3">`Finally`</ph>. You might use <ph id="ph4">`Exit For`</ph> at the end of the <ph id="ph5">`Finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There an endless loop, which is a loop that could run a large or even infinite number of times.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you detect such a condition, you can use <ph id="ph1">`Exit For`</ph> to escape the loop.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Iterators</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You use an <bpt id="p1">*</bpt>iterator<ept id="p1">*</ept> to perform a custom iteration over a collection.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An iterator can be a function or a <ph id="ph1">`Get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>It uses a <ph id="ph1">`Yield`</ph> statement to return each element of the collection one at a time.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You call an iterator by using a <ph id="ph1">`For Each...Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each iteration of the <ph id="ph1">`For Each`</ph> loop calls the iterator.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`Yield`</ph> statement is reached in the iterator, the expression in the <ph id="ph2">`Yield`</ph> statement is returned, and the current location in code is retained.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time that the iterator is called.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example uses an iterator function.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The iterator function has a <ph id="ph1">`Yield`</ph> statement that's inside a <bpt id="p1">[</bpt>For…Next<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> loop.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ListEvenNumbers`</ph> method, each iteration of the <ph id="ph2">`For Each`</ph> statement body creates a call to the iterator function, which proceeds to the next <ph id="ph3">`Yield`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>, <bpt id="p2">[</bpt>Yield Statement<ept id="p2">](../../../visual-basic/language-reference/statements/yield-statement.md)</ept>, and <bpt id="p3">[</bpt>Iterator<ept id="p3">](../../../visual-basic/language-reference/modifiers/iterator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Technical Implementation</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`For Each`</ph>…<ph id="ph2">`Next`</ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>statement runs, Visual Basic evaluates the collection only one time, before the loop starts.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If your statement block changes <ph id="ph1">`element`</ph> or <ph id="ph2">`group`</ph>, these changes don't affect the iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When all the elements in the collection have been successively assigned to <ph id="ph1">`element`</ph>, the <ph id="ph2">`For Each`</ph> loop stops and control passes to the statement following the <ph id="ph3">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`element`</ph> hasn't been declared outside this loop, you must declare it in the <ph id="ph2">`For Each`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can declare the type of <ph id="ph1">`element`</ph> explicitly by using an <ph id="ph2">`As`</ph> statement, or you can rely on type inference to assign the type.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In either case, the scope of <ph id="ph1">`element`</ph> is the body of the loop.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>However, you cannot declare <ph id="ph1">`element`</ph> both outside and inside the loop.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can optionally specify <ph id="ph1">`element`</ph> in the <ph id="ph2">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This improves the readability of your program, especially if you have nested <ph id="ph1">`For Each`</ph> loops.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You must specify the same variable as the one that appears in the corresponding <ph id="ph1">`For Each`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You might want to avoid changing the value of <ph id="ph1">`element`</ph> inside a loop.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Doing this can make it more difficult to read and debug your code.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Changing the value of <ph id="ph1">`group`</ph> doesn't affect the collection or its elements, which were determined when the loop was first entered.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you're nesting loops, if a <ph id="ph1">`Next`</ph> statement of an outer nesting level is encountered before the <ph id="ph2">`Next`</ph> of an inner level, the compiler signals an error.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>However, the compiler can detect this overlapping error only if you specify <ph id="ph1">`element`</ph> in every <ph id="ph2">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If your code depends on traversing a collection in a particular order, a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop isn't the best choice, unless you know the characteristics of the enumerator object the collection exposes.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The order of traversal isn't determined by Visual Basic, but by the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method of the enumerator object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Therefore, you might not be able to predict which element of the collection is the first to be returned in <ph id="ph1">`element`</ph>, or which is the next to be returned after a given element.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You might achieve more reliable results using a different loop structure, such as <ph id="ph1">`For`</ph>...<ph id="ph2">`Next`</ph> or <ph id="ph3">`Do`</ph>...<ph id="ph4">`Loop`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The data type of <ph id="ph1">`element`</ph> must be such that the data type of the elements of <ph id="ph2">`group`</ph> can be converted to it.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The data type of <ph id="ph1">`group`</ph> must be a reference type that refers to a collection or an array that's enumerable.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Most commonly this means that <ph id="ph1">`group`</ph> refers to an object that implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface of the <ph id="ph3">`System.Collections`</ph> namespace or the <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface of the <ph id="ph5">`System.Collections.Generic`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`System.Collections.IEnumerable`</ph> defines the <ph id="ph2">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method, which returns an enumerator object for the collection.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The enumerator object implements the <ph id="ph1">`System.Collections.IEnumerator`</ph> interface of the <ph id="ph2">`System.Collections`</ph> namespace and exposes the <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property and the <ph id="ph4">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Visual Basic uses these to traverse the collection.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Narrowing Conversions</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Option Strict`</ph> is set to <ph id="ph2">`On`</ph>, narrowing conversions ordinarily cause compiler errors.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">`For Each`</ph> statement, however, conversions from the elements in <ph id="ph2">`group`</ph> to <ph id="ph3">`element`</ph> are evaluated and performed at run time, and compiler errors caused by narrowing conversions are suppressed.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the following example, the assignment of <ph id="ph1">`m`</ph> as the initial value for <ph id="ph2">`n`</ph> doesn't compile when <ph id="ph3">`Option Strict`</ph> is on because the conversion of a <ph id="ph4">`Long`</ph> to an <ph id="ph5">`Integer`</ph> is a narrowing conversion.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`For Each`</ph> statement, however, no compiler error is reported, even though the assignment to <ph id="ph2">`number`</ph> requires the same conversion from <ph id="ph3">`Long`</ph> to <ph id="ph4">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`For Each`</ph> statement that contains a large number, a run-time error occurs when <ph id="ph2">&lt;xref:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger%2A&gt;</ph> is applied to the large number.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>IEnumerator Calls</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When execution of a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop starts, Visual Basic verifies that <ph id="ph3">`group`</ph> refers to a valid collection object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If not, it throws an exception.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Otherwise, it calls the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property of the enumerator object to return the first element.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MoveNext`</ph> indicates that there is no next element, that is, if the collection is empty, the <ph id="ph2">`For Each`</ph> loop stops and control passes to the statement following the <ph id="ph3">`Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Otherwise, Visual Basic sets <ph id="ph1">`element`</ph> to the first element and runs the statement block.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Each time Visual Basic encounters the <ph id="ph1">`Next`</ph> statement, it returns to the <ph id="ph2">`For Each`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Again it calls <ph id="ph1">`MoveNext`</ph> and <ph id="ph2">`Current`</ph> to return the next element, and again it either runs the block or stops the loop depending on the result.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This process continues until <ph id="ph1">`MoveNext`</ph> indicates that there is no next element or an <ph id="ph2">`Exit For`</ph> statement is encountered.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Modifying the Collection.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The enumerator object returned by <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> normally doesn't let you change the collection by adding, deleting, replacing, or reordering any elements.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If you change the collection after you have initiated a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop, the enumerator object becomes invalid, and the next attempt to access an element causes an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>However, this blocking of modification isn't determined by <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, but rather by the implementation of the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It is possible to implement <ph id="ph1">`IEnumerable`</ph> in a way that allows for modification during iteration.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If you are considering doing such dynamic modification, make sure that you understand the characteristics of the <ph id="ph1">`IEnumerable`</ph> implementation on the collection you are using.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Modifying Collection Elements.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property of the enumerator object is <bpt id="p1">[</bpt>ReadOnly<ept id="p1">](../../../visual-basic/language-reference/modifiers/readonly.md)</ept>, and it returns a local copy of each collection element.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This means that you cannot modify the elements themselves in a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Any modification you make affects only the local copy from <ph id="ph1">`Current`</ph> and isn't reflected back into the underlying collection.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>However, if an element is a reference type, you can modify the members of the instance to which it points.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following example modifies the <ph id="ph1">`BackColor`</ph> member of each <ph id="ph2">`thisControl`</ph> element.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You cannot, however, modify <ph id="ph1">`thisControl`</ph> itself.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The previous example can modify the <ph id="ph1">`BackColor`</ph> member of each <ph id="ph2">`thisControl`</ph> element, although it cannot modify <ph id="ph3">`thisControl`</ph> itself.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Traversing Arrays.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Array&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface, all arrays expose the <ph id="ph3">&lt;xref:System.Array.GetEnumerator%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This means that you can iterate through an array with a <ph id="ph1">`For Each`</ph>...<ph id="ph2">`Next`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>However, you can only read the array elements.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You cannot change them.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following example lists all the folders in the C:\ directory by using the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following example illustrates a procedure for sorting a collection.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The example sorts instances of a <ph id="ph1">`Car`</ph> class that are stored in a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Car`</ph> class implements the <ph id="ph2">&lt;xref:System.IComparable%601&gt;</ph> interface, which requires that the <ph id="ph3">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method be implemented.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Each call to the <ph id="ph1">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method makes a single comparison that's used for sorting.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>User-written code in the <ph id="ph1">`CompareTo`</ph> method returns a value for each comparison of the current object with another object.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The value returned is less than zero if the current object is less than the other object, greater than zero if the current object is greater than the other object, and zero if they are equal.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This enables you to define in code the criteria for greater than, less than, and equal.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`ListCars`</ph> method, the <ph id="ph2">`cars.Sort()`</ph> statement sorts the list.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This call to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> causes the <ph id="ph3">`CompareTo`</ph> method to be called automatically for the <ph id="ph4">`Car`</ph> objects in the <ph id="ph5">`List`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loop Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>While...End While Statement<ept id="p1">](../../../visual-basic/language-reference/statements/while-end-while-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collection Initializers<ept id="p1">](../../../visual-basic/programming-guide/language-features/collection-initializers/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays<ept id="p1">](../../../visual-basic/programming-guide/language-features/arrays/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>