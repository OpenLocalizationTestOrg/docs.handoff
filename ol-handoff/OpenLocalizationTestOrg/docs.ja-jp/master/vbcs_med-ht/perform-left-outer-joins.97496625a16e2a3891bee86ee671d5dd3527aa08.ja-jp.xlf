<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0e4a5840f5a19a42aea477927afb77fee27eaea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\linq\perform-left-outer-joins.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a98fdb668239a264809c7f9c97ec1cf5d8e852a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d299a765bb24010defa98df7ab2ab483fc4a8410</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Perform left outer joins</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to perform left outer joins.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, C#</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Perform left outer joins</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A left outer join is a join in which each element of the first collection is returned, regardless of whether it has any correlated elements in the second collection.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use LINQ to perform a left outer join by calling the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%2A&gt;</ph> method on the results of a group join.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%2A&gt;</ph> method on the results of a group join to perform a left outer join.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first step in producing a left outer join of two collections is to perform an inner join by using a group join.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Perform inner joins<ept id="p1">](perform-inner-joins.md)</ept> for an explanation of this process.) In this example, the list of <ph id="ph1">`Person`</ph> objects is inner-joined to the list of <ph id="ph2">`Pet`</ph> objects based on a <ph id="ph3">`Person`</ph> object that matches <ph id="ph4">`Pet.Owner`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The second step is to include each element of the first (left) collection in the result set even if that element has no matches in the right collection.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is accomplished by calling <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%2A&gt;</ph> on each sequence of matching elements from the group join.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">&lt;xref:System.Linq.Enumerable.DefaultIfEmpty%2A&gt;</ph> is called on each sequence of matching <ph id="ph2">`Pet`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The method returns a collection that contains a single, default value if the sequence of matching <ph id="ph1">`Pet`</ph> objects is empty for any <ph id="ph2">`Person`</ph> object, thereby ensuring that each <ph id="ph3">`Person`</ph> object is represented in the result collection.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The default value for a reference type is <ph id="ph1">`null`</ph>; therefore, the example checks for a null reference before accessing each element of each <ph id="ph2">`Pet`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CsLINQProgJoining#7<ept id="p2">](../../../samples/snippets/csharp/concepts/linq/how-to-perform-left-outer-joins_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.Join%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.Enumerable.GroupJoin%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Perform inner joins<ept id="p1">](perform-inner-joins.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Perform grouped joins<ept id="p1">](perform-grouped-joins.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Anonymous types<ept id="p1">](../programming-guide/classes-and-structs/anonymous-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>