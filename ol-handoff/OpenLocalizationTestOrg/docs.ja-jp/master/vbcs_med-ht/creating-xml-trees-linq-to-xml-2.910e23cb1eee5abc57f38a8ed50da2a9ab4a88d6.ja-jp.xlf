<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe9fc7900c17f366536ee2ced6c8549001fdb1ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\creating-xml-trees-linq-to-xml-2.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56097752eca05f90458fd02cdd4609936cc106e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cbd4926b01da511a6e337a023b285063c762012</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating XML Trees in C# (LINQ to XML) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating XML Trees in C# (LINQ to XML)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section provides information about creating XML trees in C#.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For information about using the results of LINQ queries as the content for an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, see <bpt id="p1">[</bpt>Functional Construction (LINQ to XML) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Constructing Elements</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The signatures of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> constructors let you pass the contents of the element or attribute as arguments to the constructor.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because one of the constructors takes a variable number of arguments, you can pass any number of child elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Of course, each of those child elements can contain their own child elements.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For any element, you can add any number of attributes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When adding <ph id="ph1">&lt;xref:System.Xml.Linq.XNode&gt;</ph> (including <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>) or <ph id="ph3">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, if the new content has no parent, the objects are simply attached to the XML tree.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the new content already is parented, and is part of another XML tree, the new content is cloned, and the newly cloned content is attached to the XML tree.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The last example in this topic demonstrates this.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To create a <ph id="ph1">`contacts`</ph><ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, you could use the following code:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If indented properly, the code to construct <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects closely resembles the structure of the underlying XML.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>XElement Constructors</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class uses the following constructors for functional construction.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that there are some other constructors for <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, but because they are not used for functional construction they are not listed here.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Constructor</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`name`</ph> parameter specifies the name of the element; <ph id="ph2">`content`</ph> specifies the content of the element.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> with its <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> initialized to the specified name.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> with its <ph id="ph2">&lt;xref:System.Xml.Linq.XName&gt;</ph> initialized to the specified name.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The attributes and/or child elements are created from the contents of the parameter list.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`content`</ph> parameter is extremely flexible.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It supports any type of object that is a valid child of an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following rules apply to different types of objects passed in this parameter:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A string is added as text content.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> is added as a child element.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> is added as an attribute.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Xml.Linq.XProcessingInstruction&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.Linq.XComment&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.Linq.XText&gt;</ph> is added as child content.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> is enumerated, and these rules are applied recursively to the results.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For any other type, its <ph id="ph1">`ToString`</ph> method is called and the result is added as text content.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Creating an XElement with Content</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can create an <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> that contains simple content with a single method call.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To do this, specify the content as the second parameter, as follows:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can pass any type of object as the content.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the following code creates an element that contains a floating point number as content:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The floating point number is boxed and passed in to the constructor.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The boxed number is converted to a string and used as the content of the element.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Creating an XElement with a Child Element</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you pass an instance of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> class for the content argument, the constructor creates an element with a child element:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Creating an XElement with Multiple Child Elements</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can pass in a number of <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects for the content.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each of the <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> objects is included as a child element.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By extending the above example, you can create an entire XML tree, as follows:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Creating an Empty Element</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To create an empty <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph>, you do not pass any content to the constructor.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example creates an empty element:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Attaching vs. Cloning</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>As mentioned previously, when adding <ph id="ph1">&lt;xref:System.Xml.Linq.XNode&gt;</ph> (including <ph id="ph2">&lt;xref:System.Xml.Linq.XElement&gt;</ph>) or <ph id="ph3">&lt;xref:System.Xml.Linq.XAttribute&gt;</ph> objects, if the new content has no parent, the objects are simply attached to the XML tree.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the new content already is parented and is part of another XML tree, the new content is cloned, and the newly cloned content is attached to the XML tree.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating XML Trees (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/creating-xml-trees.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>