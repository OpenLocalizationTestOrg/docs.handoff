<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac7dd8a474aad6861b25c7d426c9cd05e9dddd67</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\expression-trees-interpreting.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e1a028976ddfb7825a6c32565122f03114da0f07</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad2e724d469aa0a12a9a918aa4f01a5881dc9d9f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Interpreting Expressions</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interpreting Expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Interpreting Expressions</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Previous -- Executing Expressions<ept id="p1">](expression-trees-execution.md)</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Now, let's write some code to examine the structure of an <bpt id="p1">*</bpt>expression tree<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Every node in an expression tree will be an object of a class that is derived from <ph id="ph1">`Expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>That design makes visiting all the nodes in an expression tree a relatively straight forward recursive operation.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The general strategy is to start at the root node and determine what kind of node it is.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the node type has children, recursively visit the children.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At each child node, repeat the process used at the root node: determine the type, and if the type has children, visit each of the children.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Examining an Expression with No Children</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Let's start by visiting each node in a very simple expression tree.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Here's the code that creates a constant expression and then examines its properties:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This will print the following:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Now, let's write the code that would examine this expression and write out some important properties about it.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Here's that code:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Examining a simple Addition Expression</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Let's start with the addition sample from the introduction to this section.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>I'm not using <ph id="ph1">`var`</ph> to declare this expression tree, as it is not possible because the right-hand side of the assignment is implicitly typed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To understand this more deeply, read <bpt id="p1">[</bpt>here<ept id="p1">](implicitly-typed-lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The root node is a <ph id="ph1">`LambdaExpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In order to get the interesting code on the right hand side of the <ph id="ph1">`=&gt;`</ph> operator, you need to find one of the children of the <ph id="ph2">`LambdaExpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>We'll do that with all the expressions in this section.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The parent node does help us find the return type of the <ph id="ph1">`LambdaExpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To examine each node in this expression, we'll need to recursively visit a number of nodes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Here's a simple first implementation:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This sample prints the following output:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You'll notice a lot of repetition in the code sample above.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Let's clean that up and build a more general purpose expression node visitor.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>That's going to require us to write a recursive algorithm.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any node could be of a type that might have children.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Any node that has children requires us to visit those children and determine what that node is.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Here's the cleaned up version that utilizes recursion to visit the addition operations:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This algorithm is the basis of an algorithm that can visit any arbitrary <ph id="ph1">`LambdaExpression`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>There are a lot of holes, namely that the code I created only looks for a very small sample of the possible sets of expression tree nodes that it may encounter.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, you can still learn quite a bit from what it produces.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>(The default case in the <ph id="ph1">`Visitor.CreateFromExpression`</ph> method prints a message to the error console when a new node type is encountered.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>That way, you know to add a new expression type.)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you run this visitor on the addition expression shown above, you get the following output:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now that you've built a more general visitor implementation, you can visit and process many more different types of expressions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Examining an Addition Expression with Many Levels</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Let's try a more complicated example, yet still limit the node types to addition only:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Before you run this on the visitor algorithm, try a thought exercise to work out what the output might be.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remember that the <ph id="ph1">`+`</ph> operator is a <bpt id="p1">*</bpt>binary operator<ept id="p1">*</ept>: it must have two children, representing the left and right operands.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There are several possible ways to construct a tree that could be correct:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can see the separation into two possible answers to highlight the most promising.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The first represents <bpt id="p1">*</bpt>right associative<ept id="p1">*</ept> expressions.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The second represent <bpt id="p1">*</bpt>left associative<ept id="p1">*</ept> expressions.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The advantage of both of those two formats is that the format scales to any arbitrary number of addition expressions.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you do run this expression through the visitor, you will see this this output, verifying that the simple addition expression is <bpt id="p1">*</bpt>left associative<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In order to run this sample, and see the full expression tree, I had to make one change to the source expression tree.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When the expression tree contains all constants, the resulting tree simply contains the constant value of <ph id="ph1">`10`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The compiler performs all the addition and reduces the expression to its simplest form.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Simply adding one variable in the expression is sufficient to see the original tree:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Create a visitor for this sum and run the visitor you'll see this output:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can also run any of the other samples through the visitor code and see what tree it represents.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Here's an example of the <ph id="ph1">`sum3`</ph> expression above (with an additional parameter to prevent the compiler from computing the constant):</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Here's the output from the visitor:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Notice that the parentheses are not part of the output.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>There are no nodes in the expression tree that represent the parentheses in the input expression.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The structure of the expression tree contains all the information necessary to communicate the precedence.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Extending from this sample</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The sample deals with only the most rudimentary expression trees.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The code you've seen in this section only handles constant integers and the binary <ph id="ph1">`+`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>As a final sample, let's update the visitor to handle a more complicated expression.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Let's make it work for this:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This code represents one possible implementation for the mathematical <bpt id="p1">*</bpt>factorial<ept id="p1">*</ept> function.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The way I've written this code highlights two limitiations of building expression trees by assigning lambda expressions to Expressions.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>First, statement lambdas are not allowed.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>That means I can't use loops, blocks, if / else statements, and other control structures common in C#.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>I'm limited to using expressions.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Second, I can't recursively call the same expression.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>I could if it were already a delegate, but I can't call it in its expression tree form.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the section on <bpt id="p1">[</bpt>building expression trees<ept id="p1">](expression-trees-building.md)</ept> you'll learn techniques to overcome these limitations.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In this expression, you'll encounter nodes of all these types:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Equal (binary expression)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Multiply (binary expression)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Conditional (the ?</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>: expression)</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Method Call Expression (calling <ph id="ph1">`Range()`</ph> and <ph id="ph2">`Aggregate()`</ph>)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>One way to modify the visitor algorithm is to keep executing it, and write the node type every time you reach your <ph id="ph1">`default`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After a few iterations, you'll have seen each of the potential nodes.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Then, you have all you need.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The result would be something like this:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The ConditionalVisitor and MethodCallVisitor process those two nodes:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>And the output for the expression tree would be:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Extending the Sample Library</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The samples in this section show the core techniques to visit and examine nodes in an expression tree.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>I glossed over many actions you might need in order to concentrate on the core tasks of visiting and accessing nodes in an expression tree.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>First, the visitors only handle constants that are integers.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Constant values could be any other numeric type, and the C# language supports conversions and promotions between those types.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A more robust version of this code would mirror all those capabilities.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Even the last example recognizes a subset of the possible node types.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You can still feed it many expressions that will cause it to fail.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A full implementation is included in the .NET Standard Library under the name <bpt id="p1">[</bpt>ExpressionVisitor<ept id="p1">](https://docs.microsoft.com/dotnet/core/api/System.Linq.Expressions.ExpressionVisitor)</ept> and can handle all the possible node types.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Finally, the library I used in this article was built for demonstration and learning.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It's not optimized.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>I wrote it to make the structures used very clear, and to highlight the techniques used to visit the nodes and analyze what's there.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A production implementation would pay more attention to performance than I have.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Even with those limitations, you should be well on your way to writing algorithms that read and understand expression trees.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Next -- Building Expressions<ept id="p1">](expression-trees-building.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>