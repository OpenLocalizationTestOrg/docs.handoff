<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-constructors.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47103d13a68c5250c33dbca3e89de2f1f3e13449</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\using-constructors.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87bf573fa5b82c21d85d5b741506aff99282efc9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba65b20921e28ee42b27972e8a31c39206e5f59c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Constructors (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Constructors (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">[</bpt>class<ept id="p1">](../../../csharp/language-reference/keywords/class.md)</ept> or <bpt id="p2">[</bpt>struct<ept id="p2">](../../../csharp/language-reference/keywords/struct.md)</ept> is created, its constructor is called.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Constructors have the same name as the class or struct, and they usually initialize the data members of the new object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the following example, a class named <ph id="ph1">`Taxi`</ph> is defined by using a simple constructor.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This class is then instantiated with the <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new.md)</ept> operator.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Taxi`</ph> constructor is invoked by the <ph id="ph2">`new`</ph> operator immediately after memory is allocated for the new object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A constructor that takes no parameters is called a <bpt id="p1">*</bpt>default constructor<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Default constructors are invoked whenever an object is instantiated by using the <ph id="ph1">`new`</ph> operator and no arguments are provided to <ph id="ph2">`new`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Instance Constructors<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/instance-constructors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Unless the class is <bpt id="p1">[</bpt>static<ept id="p1">](../../../csharp/language-reference/keywords/static.md)</ept>, classes without constructors are given a public default constructor by the C# compiler in order to enable class instantiation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Static Classes and Static Class Members<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can prevent a class from being instantiated by making the constructor private, as follows:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Private Constructors<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/private-constructors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructors for <bpt id="p1">[</bpt>struct<ept id="p1">](../../../csharp/language-reference/keywords/struct.md)</ept> types resemble class constructors, but <ph id="ph1">`structs`</ph> cannot contain an explicit default constructor because one is provided automatically by the compiler.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This constructor initializes each field in the <ph id="ph1">`struct`</ph> to the default values.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Default Values Table<ept id="p1">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, this default constructor is only invoked if the <ph id="ph1">`struct`</ph> is instantiated with <ph id="ph2">`new`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, this code uses the default constructor for <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, so that you are assured that the integer is initialized:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code, however, causes a compiler error because it does not use <ph id="ph1">`new`</ph>, and because it tries to use an object that has not been initialized:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Alternatively, objects based on <ph id="ph1">`structs`</ph> (including all built-in numeric types) can be initialized or assigned and then used as in the following example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>So calling the default constructor for a value type is not required.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Both classes and <ph id="ph1">`structs`</ph> can define constructors that take parameters.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Constructors that take parameters must be called through a <ph id="ph1">`new`</ph> statement or a <bpt id="p1">[</bpt>base<ept id="p1">](../../../csharp/language-reference/keywords/base.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Classes and <ph id="ph1">`structs`</ph> can also define multiple constructors, and neither is required to define a default constructor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This class can be created by using either of the following statements:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A constructor can use the <ph id="ph1">`base`</ph> keyword to call the constructor of a base class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this example, the constructor for the base class is called before the block for the constructor is executed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`base`</ph> keyword can be used with or without parameters.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any parameters to the constructor can be used as parameters to <ph id="ph1">`base`</ph>, or as part of an expression.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>base<ept id="p1">](../../../csharp/language-reference/keywords/base.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In a derived class, if a base-class constructor is not called explicitly by using the <ph id="ph1">`base`</ph> keyword, the default constructor, if there is one, is called implicitly.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This means that the following constructor declarations are effectively the same:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a base class does not offer a default constructor, the derived class must make an explicit call to a base constructor by using <ph id="ph1">`base`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A constructor can invoke another constructor in the same object by using the <bpt id="p1">[</bpt>this<ept id="p1">](../../../csharp/language-reference/keywords/this.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">`base`</ph>, <ph id="ph2">`this`</ph> can be used with or without parameters, and any parameters in the constructor are available as parameters to <ph id="ph3">`this`</ph>, or as part of an expression.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the second constructor in the previous example can be rewritten using <ph id="ph1">`this`</ph>:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The use of the <ph id="ph1">`this`</ph> keyword in the previous example causes this constructor to be called:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Constructors can be marked as <bpt id="p1">[</bpt>public<ept id="p1">](../../../csharp/language-reference/keywords/public.md)</ept>, <bpt id="p2">[</bpt>private<ept id="p2">](../../../csharp/language-reference/keywords/private.md)</ept>, <bpt id="p3">[</bpt>protected<ept id="p3">](../../../csharp/language-reference/keywords/protected.md)</ept>, <bpt id="p4">[</bpt>internal<ept id="p4">](../../../csharp/language-reference/keywords/internal.md)</ept>, or <ph id="ph1">`protected``internal`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>These access modifiers define how users of the class can construct the class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Access Modifiers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A constructor can be declared static by using the <bpt id="p1">[</bpt>static<ept id="p1">](../../../csharp/language-reference/keywords/static.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Static constructors are called automatically, immediately before any static fields are accessed, and are generally used to initialize static class members.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Static Constructors<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/constructors.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Finalizers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>