<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">687741ed357fd13424c4e2f9eeda3d2b531fd129</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\query-syntax-and-method-syntax-in-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">473576143b537a0750e9f4112ccd576de9e17bd5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05c81df48cadd3308296555993aa3bd8d00366c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Query Syntax and Method Syntax in LINQ (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Query Syntax and Method Syntax in LINQ (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Most queries in the introductory Language Integrated Query (<ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>) documentation are written by using the LINQ declarative query syntax.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, the query syntax must be translated into method calls for the .NET common language runtime (CLR) when the code is compiled.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These method calls invoke the standard query operators, which have names such as <ph id="ph1">`Where`</ph>, <ph id="ph2">`Select`</ph>, <ph id="ph3">`GroupBy`</ph>, <ph id="ph4">`Join`</ph>, <ph id="ph5">`Max`</ph>, and <ph id="ph6">`Average`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can call them directly by using method syntax instead of query syntax.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Query syntax and method syntax are semantically identical, but many people find query syntax simpler and easier to read.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Some queries must be expressed as method calls.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, you must use a method call to express a query that retrieves the number of elements that match a specified condition.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You also must use a method call for a query that retrieves the element that has the maximum value in a source sequence.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The reference documentation for the standard query operators in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace generally uses method syntax.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore, even when getting started writing <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries, it is useful to be familiar with how to use method syntax in queries and in query expressions themselves.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Standard Query Operator Extension Methods</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following example shows a simple <bpt id="p1">*</bpt>query expression<ept id="p1">*</ept> and the semantically equivalent query written as a <bpt id="p2">*</bpt>method-based query<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csLINQGettingStarted#22<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/query-syntax-and-method-syntax-in-linq_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The output from the two examples is identical.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can see that the type of the query variable is the same in both forms: <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To understand the method-based query, let's examine it more closely.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>On the right side of the expression, notice that the <ph id="ph1">`where`</ph> clause is now expressed as an instance method on the <ph id="ph2">`numbers`</ph> object, which as you will recall has a type of <ph id="ph3">`IEnumerable&lt;int&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you are familiar with the generic <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, you know that it does not have a <ph id="ph2">`Where`</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>However, if you invoke the IntelliSense completion list in the Visual Studio IDE, you will see not only a <ph id="ph1">`Where`</ph> method, but many other methods such as <ph id="ph2">`Select`</ph>, <ph id="ph3">`SelectMany`</ph>, <ph id="ph4">`Join`</ph>, and <ph id="ph5">`Orderby`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These are all the standard query operators.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Standard Query Operators in Intellisense<ept id="p1">]</ept><bpt id="p2">(../../../../csharp/programming-guide/concepts/linq/media/standardqueryops.png "</bpt>StandardQueryOps<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Although it looks as if <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> has been redefined to include these additional methods, in fact this is not the case.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The standard query operators are implemented as a new kind of method called <bpt id="p1">*</bpt>extension methods<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Extensions methods "extend" an existing type; they can be called as if they were instance methods on the type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The standard query operators extend <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> and that is why you can write <ph id="ph2">`numbers.Where(...)`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To get started using <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, all that you really have to know about extension methods is how to bring them into scope in your application by using the correct <ph id="ph2">`using`</ph> directives.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>From your application's point of view, an extension method and a regular instance method are the same.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about extension methods, see <bpt id="p1">[</bpt>Extension Methods<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/extension-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about standard query operators, see <bpt id="p1">[</bpt>Standard Query Operators Overview (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/standard-query-operators-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Some <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> providers, such as <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../csharp/includes/vbtecdlinq_md.md)]</ph> and <ph id="ph3">[!INCLUDE[sqltecxlinq](../../../../csharp/programming-guide/concepts/linq/includes/sqltecxlinq_md.md)]</ph>, implement their own standard query operators and additional extension methods for other types besides <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Lambda Expressions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the previous example, notice that the conditional expression (<ph id="ph1">`num % 2 == 0`</ph>) is passed as an in-line argument to the <ph id="ph2">`Where`</ph> method: <ph id="ph3">`Where(num =&gt; num % 2 == 0).`</ph> This inline expression is called a lambda expression.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is a convenient way to write code that would otherwise have to be written in more cumbersome form as an anonymous method or a generic delegate or an expression tree.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In C# <ph id="ph1">`=&gt;`</ph> is the lambda operator, which is read as "goes to".</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`num`</ph> on the left of the operator is the input variable which corresponds to <ph id="ph2">`num`</ph> in the query expression.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The compiler can infer the type of <ph id="ph1">`num`</ph> because it knows that <ph id="ph2">`numbers`</ph> is a generic <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The body of the lambda is just the same as the expression in query syntax or in any other C# expression or statement; it can include method calls and other complex logic.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The "return value" is just the expression result.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To get started using <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph>, you do not have to use lambdas extensively.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>However, certain queries can only be expressed in method syntax and some of those require lambda expressions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After you become more familiar with lambdas, you will find that they are a powerful and flexible tool in your <ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> toolbox.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](../../../../csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Composability of Queries</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the previous code example, note that the <ph id="ph1">`OrderBy`</ph> method is invoked by using the dot operator on the call to <ph id="ph2">`Where`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Where`</ph> produces a filtered sequence, and then <ph id="ph2">`Orderby`</ph> operates on that sequence by sorting it.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because queries return an <ph id="ph1">`IEnumerable`</ph>, you compose them in method syntax by chaining the method calls together.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This is what the compiler does behind the scenes when you write queries by using query syntax.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>And because a query variable does not store the results of the query, you can modify it or use it as the basis for a new query at any time, even after it has been executed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in C#<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>