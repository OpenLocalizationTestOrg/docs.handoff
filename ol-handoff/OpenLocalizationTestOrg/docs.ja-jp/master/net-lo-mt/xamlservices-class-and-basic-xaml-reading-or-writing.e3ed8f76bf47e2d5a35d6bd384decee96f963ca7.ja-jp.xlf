<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dc1b06823d9c8d899d4ed9016fac5f317d5b323</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\xamlservices-class-and-basic-xaml-reading-or-writing.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb8a48af024169556b309ba456160fb44e464157</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c96bda30f6078cd6bf69179fa18d88295495830</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XAMLServices Class and Basic XAML Reading or Writing | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XAMLServices Class and Basic XAML Reading or Writing</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> is a class provided by .NET Framework XAML Services that can be used to address XAML scenarios that do not require specific access to the XAML node stream, or XAML type system information obtained from those nodes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> API can be summarized as the following: <ph id="ph2">`Load`</ph> or <ph id="ph3">`Parse`</ph> to support a XAML load path, <ph id="ph4">`Save`</ph> to support a XAML save path, and <ph id="ph5">`Transform`</ph> to provide a technique that joins a load path and save path.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Transform`</ph> can be used to change from one XAML schema to another.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic summarizes each of these API classifications and describes the differences between particular method overloads.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Load</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Various overloads of <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> implement the complete logic for a load path.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The load path uses XAML in some form and outputs a XAML node stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Most of these load paths use XAML in an encoded XML text-file form.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, you can also load a general stream, or you can load a preloaded XAML source that is already contained in a different <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The simplest overload for most scenarios is <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.String%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This overload has a <ph id="ph1">`fileName`</ph> parameter that is simply the name of a text file that contains the XAML to load.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is appropriate for application scenarios such as full trust applications that have previously serialized state or data to the local computer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This is also useful for frameworks where you are defining the application model and want to load one of the standard files that defines application behavior, starting UI, or other framework-defined capabilities that use XAML.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29&gt;</ph> has similar scenarios.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This overload might be useful if you have the user choose files to load, because a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> is a frequent output of other <ph id="ph2">&lt;xref:System.IO&gt;</ph> APIs that can access a file system.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Or you could be accessing XAML sources through asynchronous downloads or other network techniques that also provide a stream.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>(Loading from a stream or user-selected source may have security implications.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Security Considerations<ept id="p1">](../../../docs/framework/xaml-services/xaml-security-considerations.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.IO.TextReader%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlServices.Load%28System.Xml.XmlReader%29&gt;</ph> are overloads that rely on readers of formats from previous versions of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To use these overloads , you should have already created a reader instance and used its <ph id="ph1">`Create`</ph> API to load the XAML in the relevant form (text or XML).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you have already moved record pointers in the other readers or performed other operations with them, this is not important.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The load path logic from <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> always processes the entire XAML input from the root down.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Scenarios for these overloads might include the following:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Design surfaces where you provide simple XAML editing capability from an existing XML-specific text editor.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Variants of the core <ph id="ph1">&lt;xref:System.IO&gt;</ph> scenarios, where you use the dedicated readers to open files or streams.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Your logic performs rudimentary checking or processing of the contents before it tries to load as XAML.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can either load a file or stream, or you can load an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.TextReader&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xaml.XamlReader&gt;</ph> that wrap your XAML input by loading with the reader's APIs.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Internally, each of the preceding overloads is ultimately <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%28System.Xml.XmlReader%29&gt;</ph>, and the passed <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> is used to create a new <ph id="ph3">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Load`</ph> signature that provides for more advanced scenarios is <ph id="ph2">&lt;xref:System.Xaml.XamlServices.Load%28System.Xaml.XamlReader%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can use this signature for one of the following cases:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You have defined your own implementation of a <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You need to specify settings for <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> that vary from the default settings.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Examples of non-default settings are setting any of the following: <ph id="ph1">&lt;xref:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot%2A&gt;</ph>; <ph id="ph2">&lt;xref:System.Xaml.XamlReaderSettings.BaseUri%2A&gt;</ph>; <ph id="ph3">&lt;xref:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements%2A&gt;</ph>; <ph id="ph4">&lt;xref:System.Xaml.XamlReaderSettings.LocalAssembly%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.XamlReaderSettings.ValuesMustBeString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The default reader for <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> is <ph id="ph2">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you provide your own <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph>, with settings, the following are properties to set non-default <ph id="ph2">&lt;xref:System.Xaml.XamlXmlReaderSettings&gt;</ph>: <ph id="ph3">&lt;xref:System.Xaml.XamlXmlReaderSettings.CloseInput%2A&gt;</ph>; <ph id="ph4">&lt;xref:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing%2A&gt;</ph>; <ph id="ph5">&lt;xref:System.Xaml.XamlXmlReaderSettings.XmlLang%2A&gt;</ph>; <ph id="ph6">&lt;xref:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Parse</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Parse%2A&gt;</ph> is like <ph id="ph2">`Load`</ph> because it is a load path API that creates a XAML node stream from XAML input.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, in this case, the XAML input is provided directly as a string that contains all the XAML to load.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Parse%2A&gt;</ph> is a lightweight approach that is more appropriate for application scenarios than framework scenarios.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Parse%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Parse%2A&gt;</ph> is really just a wrapped <ph id="ph2">&lt;xref:System.Xaml.XamlServices.Load%28System.Xml.XmlReader%29&gt;</ph> call that involves a <ph id="ph3">&lt;xref:System.IO.StringReader&gt;</ph> internally.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Save</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Various overloads  of <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Save%2A&gt;</ph> implement the save path.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All of the <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Save%2A&gt;</ph> methods all take an object graph as input and produce output as a stream, file, or <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph><ph id="ph3">/</ph><ph id="ph4">&lt;xref:System.IO.TextWriter&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The input object is expected to be the root object of some object representation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This might be the single root of a business object, the root of an object tree for a page in a UI scenario, the working editing surface from a design tool, or other root object concepts that are appropriate for scenarios.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In many scenarios the object tree that you save is related to an original operation that loaded XAML either with <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Load%2A&gt;</ph> or with other API implemented by a framework/application model.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There might be differences captured in the object tree that are due to state changes, changes where your application captured runtime settings from a user, changed XAML because your application is a XAML design surface, etc. With or without changes, the concept of first loading XAML from markup and then saving it again and comparing the two XAML markup forms is sometimes referred as a round-trip representation of the XAML.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The challenge with saving and serializing a complex object that is set in a markup form is in achieving a balance between full representation without information loss, versus verbosity that makes the XAML less human-readable.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Moreover, different customers for XAML might have different definitions or expectations for how that balance should be set.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Save%2A&gt;</ph> APIs represent one definition of that balance.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Save%2A&gt;</ph> APIs use available XAML schema context and the default CLR-based characteristics of <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph>, <ph id="ph3">&lt;xref:System.Xaml.XamlMember&gt;</ph>, and other XAML intrinsic and XAML type system concepts to determine where certain XAML node stream constructs can be optimized when they are saved back into markup.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Xaml.XamlServices&gt;</ph> save paths can use CLR-based default XAML schema context to resolve <ph id="ph2">&lt;xref:System.Xaml.XamlType&gt;</ph> for objects, can determine a <ph id="ph3">&lt;xref:System.Xaml.XamlType.ContentProperty%2A?displayProperty=fullName&gt;</ph>, and then can omit property element tags when they write the property to the XAML content of the object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Transform</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.XamlServices.Transform%2A&gt;</ph> converts or transforms XAML by linking a load path and a save path as a single operation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A different schema context or different backing type system can be used for <ph id="ph1">&lt;xref:System.Xaml.XamlReader&gt;</ph> and <ph id="ph2">&lt;xref:System.Xaml.XamlWriter&gt;</ph>, which is what influences how the resulting XAML is transformed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This works well for broad transform operations.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For operations that rely on examining each node in a XAML node stream, you typically do not use <ph id="ph1">&lt;xref:System.Xaml.XamlServices.Transform%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead you need to define your own load path-save path operation series and interject your own logic.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In one of the paths, use a XAML reader/XAML writer pair around your own node loop.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, load the initial XAML using <ph id="ph1">&lt;xref:System.Xaml.XamlXmlReader&gt;</ph> and step into the nodes with successive <ph id="ph2">&lt;xref:System.Xaml.XamlXmlReader.Read%2A&gt;</ph> calls.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Operating at the XAML node stream level you can now adjust individual nodes (types, members, other nodes) to apply a transformation, or leave the node as-is.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Then you send the node onwards to the relevant <ph id="ph1">`Write`</ph> API of a <ph id="ph2">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> and write out the object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Understanding XAML Node Stream Structures and Concepts<ept id="p1">](../../../docs/framework/xaml-services/understanding-xaml-node-stream-structures-and-concepts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XAML Services<ept id="p1">](../../../docs/framework/xaml-services/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>