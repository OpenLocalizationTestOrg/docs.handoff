<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-use-foreach-to-remove.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88d36d440b6a1d79f978e2cf39bbe2cde241af6b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\thread-safe\how-to-use-foreach-to-remove.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90e7382b8f931c116c260a2cad65b5449dcdc6d9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">655eabae80f06dee8c0d346bab8f6723891c8584</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use ForEach to Remove Items in a BlockingCollection</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In addition to taking items from a <ph id="ph1">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> by using the <ph id="ph2">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A&gt;</ph> method, you can also use a <bpt id="p1">[</bpt>foreach<ept id="p1">](~/docs/csharp/language-reference/keywords/foreach-in.md)</ept> (<bpt id="p2">[</bpt>For Each<ept id="p2">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> in Visual Basic) to remove items until adding is completed and the collection is empty.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is called a <bpt id="p1">*</bpt>mutating enumeration<ept id="p1">*</ept> or <bpt id="p2">*</bpt>consuming enumeration<ept id="p2">*</ept> because, unlike a typical <ph id="ph1">`foreach`</ph> (<ph id="ph2">`For Each`</ph>) loop, this enumerator modifies the source collection by removing items.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example shows how to remove all the items in a <ph id="ph1">&lt;xref:System.Collections.Concurrent.BlockingCollection%601&gt;</ph> by using a <ph id="ph2">`foreach`</ph> (<ph id="ph3">`For Each`</ph>) loop.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example uses a <ph id="ph1">`foreach`</ph> loop with the <ph id="ph2">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A?displayProperty=fullName&gt;</ph> method in the consuming thread, which causes each item to be removed from the collection as it is enumerated.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.BlockingCollection%601?displayProperty=fullName&gt;</ph> limits the maximum number of items that are in the collection at any time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Enumerating the collection in this way blocks the consumer thread if no items are available or if the collection is empty.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this example blocking is not a concern because the producer thread adds items faster than they can be consumed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There is no guarantee that the items are enumerated in the same order in which they are added by the producer threads.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To enumerate the collection without modifying it, just use <ph id="ph1">`foreach`</ph> (<ph id="ph2">`For Each`</ph>) without the <ph id="ph3">&lt;xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, it is important to understand that this kind of enumeration represents a snapshot of the collection at a precise point in time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If other threads are adding or removing items concurrently while you are executing the loop, then the loop might not represent the actual state of the collection.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](../../../../docs/standard/parallel-programming/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>