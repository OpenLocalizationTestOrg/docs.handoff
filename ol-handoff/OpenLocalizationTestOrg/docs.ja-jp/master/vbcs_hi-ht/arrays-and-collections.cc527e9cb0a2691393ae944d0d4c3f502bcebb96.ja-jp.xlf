<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="arrays-and-collections.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a910ccd6265011fc0e5540b461ba089dbd3e7ba</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\intro-to-csharp\arrays-and-collections.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fdb9028fc5871d45dbd363e072485357fc6af1ab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27dfab11ea60b691d8d60ed5fb631699e45db5a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Work with collections - Introduction to C# tutorial</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn C# by exploring the List collection in this tutorial.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Learn to manage data collections using the generic list type</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This introductory tutorial provides an introduction to the C# language and the basics of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This tutorial expects you to have a machine you can use for development.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The .NET topic <bpt id="p1">[</bpt>Get Started in 10 minutes<ept id="p1">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A quick overview of the commands you'll use is in <bpt id="p1">[</bpt>Become familiar with the development tools<ept id="p1">](local-environment.md)</ept>, with links to more details.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A basic list example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a directory named <bpt id="p1">**</bpt>list-tutorial<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Make that the current directory and run <ph id="ph1">`dotnet new console`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> in your favorite editor, and replace the existing code with the following:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`&lt;name&gt;`</ph> with your name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Save <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`dotnet run`</ph> in your console window to try it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You've just created a list of strings, added three names to that list, and printed out the names in all CAPS.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You're using concepts that you've learned in earlier tutorials to loop through the list.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The code to display names makes use of the <bpt id="p1">[</bpt>string interpolation<ept id="p1">](../../language-reference/tokens/interpolated.md)</ept> feature.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you precede a <ph id="ph1">`string`</ph> with the <ph id="ph2">`$`</ph> character, you can embed C# code in the string declaration.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The actual string replaces that C# code with the value it generates.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example, it replaces the <ph id="ph1">`{name.ToUpper()}`</ph> with each name, converted to capital letters, because you called the <ph id="ph2">&lt;xref:System.String.ToUpper%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Let's keep exploring.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Modify list contents</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The collection you created uses the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This type stores sequences of elements.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You specify the type of the elements between the angle brackets.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>One important aspect of this <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> type is that it can grow or shrink, enabling you to add or remove elements.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add this code before the closing <ph id="ph1">`}`</ph> in the <ph id="ph2">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You've added two more names to the end of the list.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You've also removed one as well.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Save the file, and type <ph id="ph1">`dotnet run`</ph> to try it.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> enables you to reference individual items by <bpt id="p1">**</bpt>index<ept id="p1">**</ept> as well.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You place the index between <ph id="ph1">`[`</ph> and <ph id="ph2">`]`</ph> tokens following the list name.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>C# uses 0 for the first index.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Add this code directly below the code you just added and try it:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You cannot access an index beyond the end of the list.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remember that indices start at 0, so the largest valid index is one less than the number of items in the list.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can check how long the list is using the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add the following code at the end of the Main method:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Save the file, and type <ph id="ph1">`dotnet run`</ph> again to see the results.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Search and sort lists</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To find elements in these larger collections, you need to search the list for different items.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A&gt;</ph> method searches for an item and returns the index of the item.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add this code to the bottom of your <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The items in your list can be sorted as well.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Sort%2A&gt;</ph> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add this code to the bottom of our <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Save the file and type <ph id="ph1">`dotnet run`</ph> to try this latest version.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Before you start the next section, let's move the current code into a separate method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>That makes it easier to start working with a new example.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Rename your <ph id="ph1">`Main`</ph> method to <ph id="ph2">`WorkingWithStrings`</ph> and write a new <ph id="ph3">`Main`</ph> method that calls <ph id="ph4">`WorkingWithStrings`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When you have finished, your code should look like this:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Lists of other types</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You've been using the <ph id="ph1">`string`</ph> type in lists so far.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Let's make a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> using a different type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Let's build a set of numbers.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add the following to the bottom of your new <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>That creates a list of integers, and sets the first two integers to the value 1.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These are the first two values of a <bpt id="p1">*</bpt>Fibonacci Sequence<ept id="p1">*</ept>, a sequence of numbers.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Each next Fibonacci number is found by taking the sum of the previous two numbers.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Add this code:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Save the file and type <ph id="ph1">`dotnet run`</ph> to see the results.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To concentrate on just this section, you can comment out the code that calls <ph id="ph1">`WorkingWithStrings();`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Just put two <ph id="ph1">`/`</ph> characters in front of the call like this:  <ph id="ph2">`// WorkingWithStrings();`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Challenge</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See if you can put together some of the concepts from this and earlier lessons.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Expand on what you've built so far with Fibonacci Numbers.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Try to write the code to generate the first 20 numbers in the sequence.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>(As a hint, the 20th Fibonacci number is 6765.)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Complete challenge</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can see an example solution by <bpt id="p1">[</bpt>looking at the finished sample code on GitHub<ept id="p1">](https://github.com/dotnet/samples/tree/master/csharp/list-quickstart/Program.cs#L13-L23)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The loop repeats until you've added 20 items to the list.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Congratulations, you've completed the list tutorial.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can continue with the <bpt id="p1">[</bpt>Introduction to classes<ept id="p1">](introduction-to-classes.md)</ept> tutorial in your own development environment.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can learn more about working with the <ph id="ph1">`List`</ph> type in the <bpt id="p1">[</bpt>.NET Guide<ept id="p1">](../../../standard/index.md)</ept> topic on <bpt id="p2">[</bpt>collections<ept id="p2">](../../../standard/collections/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You'll also learn about many other collection types.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>