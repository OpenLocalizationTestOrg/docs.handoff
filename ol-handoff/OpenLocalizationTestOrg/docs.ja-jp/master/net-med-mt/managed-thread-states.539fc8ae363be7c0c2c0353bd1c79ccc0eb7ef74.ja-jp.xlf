<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7ae4219ba00ec7628c4a1e119e8c0f5e76de6b1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\managed-thread-states.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d0db4be4ca1c2c715d3e62ed6d24ea36788e7c67</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9ecebd2ff71799205ea0cb9791bba39c6326a48d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managed Thread States | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Managed Thread States</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The property <ph id="ph1">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;</ph> provides a bit mask that indicates the thread's current state.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A thread is always in at least one of the possible states in the <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> enumeration, and can be in multiple states at the same time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Thread state is only of interest in a few debugging scenarios.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your code should never use thread state to synchronize the activities of threads.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you create a managed thread, it is in the <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The thread remains in the <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> state until it is moved into the started state by the operating system.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> lets the operating system know that the thread can be started; it does not change the state of the thread.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Unmanaged threads that enter the managed environment are already in the started state.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Once a thread is in the started state, a number of actions can cause it to change states.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table lists the actions that cause a change of state, along with the corresponding new state.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Resulting new state</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The constructor for the <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> class is called.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The thread responds to <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph> and starts running.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt;</ph> on another object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;</ph> on another thread.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The thread responds to a <ph id="ph1">&lt;xref:System.Threading.Thread.Suspend%2A?displayProperty=fullName&gt;</ph> request.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Resume%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Another thread calls <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The thread responds to an <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph>, then <ph id="ph2">&lt;xref:System.Threading.ThreadState&gt;</ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> state has a value of 0, it is not possible to perform a bit test to discover this state.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Instead, the following test (in pseudo-code) can be used:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Threads are often in more than one state at any given time.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, if a thread is blocked on a <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt;</ph> call and another thread calls <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> on that same thread, the thread will be in both the <ph id="ph3">&lt;xref:System.Threading.ThreadState&gt;</ph> and the <ph id="ph4">&lt;xref:System.Threading.ThreadState&gt;</ph> states at the same time.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In that case, as soon as the thread returns from the call to <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> or is interrupted, it will receive the <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once a thread leaves the <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> state as the result of a call to <ph id="ph2">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>, it can never return to the <ph id="ph3">&lt;xref:System.Threading.ThreadState&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A thread can never leave the <ph id="ph1">&lt;xref:System.Threading.ThreadState&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Threading<ept id="p1">](../../../docs/standard/threading/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>