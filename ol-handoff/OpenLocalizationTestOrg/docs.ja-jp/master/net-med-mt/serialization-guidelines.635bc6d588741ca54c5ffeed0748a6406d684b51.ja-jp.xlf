<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="serialization-guidelines.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c68e5a29d3b68fde61939f1bb7aba6b7647ac6fa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\serialization-guidelines.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cda9c84575dd1079edf61d830caaca0ec4004eda</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bfb11e167ce677968598148ee72e0d3c156d5a8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Serialization Guidelines | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Serialization Guidelines</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document lists the guidelines to consider when designing an API to be serialized.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The .NET Framework offers three main serialization technologies that are optimized for various serialization scenarios.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following table lists these technologies and the main Framework types related to these technologies.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Technology</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Relevant Classes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Data Contract Serialization</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>General persistence</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Web Services</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>JSON</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>XML Serialization</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>XML format</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>with full control</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Runtime -Serialization (Binary and SOAP)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>.NET Remoting</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you design new types, you should decide which, if any, of these technologies those types need to support.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following guidelines describe how to make that choice and how to provide such support.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These guidelines are not meant to help you choose which serialization technology you should use in the implementation of your application or library.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Such guidelines are not directly related to API design and thus are not within the scope of this topic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Guidelines</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>DO think about serialization when you design new types.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Serialization is an important design consideration for any type, because programs might need to persist or transmit instances of the type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Choosing the Right Serialization Technology to Support</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any given type can support none, one, or more of the serialization technologies.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CONSIDER supporting <bpt id="p1">*</bpt>data contract serialization<ept id="p1">*</ept> if instances of your type might need to be persisted or used in Web Services.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CONSIDER supporting the <bpt id="p1">*</bpt>XML serialization<ept id="p1">*</ept> instead of or in addition to data contract serialization if you need more control over the XML format that is produced when the type is serialized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This may be necessary in some interoperability scenarios where you need to use an XML construct that is not supported by data contract serialization, for example, to produce XML attributes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CONSIDER supporting <bpt id="p1">*</bpt>runtime serialization<ept id="p1">*</ept> if instances of your type need to travel across .NET Remoting boundaries.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>AVOID supporting runtime serialization or XML serialization just for general persistence reasons.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Prefer data contract serialization instead</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Supporting Data Contract Serialization</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Types can support data contract serialization by applying the <bpt id="p1">**</bpt>DataContractAttribute<ept id="p1">**</ept> to the type and the <bpt id="p2">**</bpt>DataMemberAttribute<ept id="p2">**</ept> to the members (fields and properties) of the type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CONSIDER marking data members of your type public if the type can be used in partial trust.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In full trust, data contract serializers can serialize and deserialize nonpublic types and members, but only public members can be serialized and deserialized in partial trust.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>DO implement a getter and setter on all properties that have Data-MemberAttribute.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Data contract serializers require both the getter and the setter for the type to be considered serializable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the type wonâ€™t be used in partial trust, one or both of the property accessors can be nonpublic.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CONSIDER using the serialization callbacks for initialization of deserialized instances.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Constructors are not called when objects are deserialized.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Therefore, any logic that executes during normal construction needs to be implemented as one of the <bpt id="p1">*</bpt>serialization callbacks<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.OnDeserializedAttribute&gt;</ph> attribute is the most commonly used callback attribute.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The other attributes in the family are <ph id="ph1">&lt;xref:System.Runtime.Serialization.OnDeserializingAttribute&gt;</ph>,</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.OnSerializingAttribute&gt;</ph>, and <ph id="ph2">&lt;xref:System.Runtime.Serialization.OnSerializedAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>They can be used to mark callbacks that get executed before deserialization, before serialization, and finally, after serialization, respectively.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CONSIDER using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> to indicate concrete types that should be used when deserializing a complex object graph.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, if a type of a deserialized data member is represented by an abstract class, the serializer will need the <bpt id="p1">*</bpt>known type<ept id="p1">*</ept> information to decide what concrete type to instantiate and assign to the member.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the known type is not specified using the attribute, it will need to be passed to the serializer explicitly (you can do it by passing known types to the serializer constructor) or it will need to be specified in the configuration file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In cases where the list of known types is not known statically (when the <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> class is compiled), the <bpt id="p2">**</bpt>KnownTypeAttribute<ept id="p2">**</ept> can also point to a method that returns a list of known types at runtime.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>DO consider backward and forward compatibility when creating or changing serializable types.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Keep in mind that serialized streams of future versions of your type can be deserialized into the current version of the type, and vice versa.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Make sure you understand that data members, even private and internal, cannot change their names, types, or even their order in future versions of the type unless special care is taken to preserve the contract using explicit parameters to the data contract attributes.Test compatibility of serialization when making changes to serializable types.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Try deserializing the new version into an old version, and vice versa.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CONSIDER implementing <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface to allow round-tripping between different versions of the type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The interface allows the serializer to ensure that no data is lost during round-tripping.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject.ExtensionData%2A&gt;</ph> property stores any data from the future version of the type that is unknown to the current version.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When the current version is subsequently serialized and deserialized into a future version, the additional data will be available in the serialized stream through the <bpt id="p1">**</bpt>ExtensionData<ept id="p1">**</ept> property value.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Supporting XML Serialization</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Data contract serialization is the main (default) serialization technology in the .NET Framework, but there are serialization scenarios that data contract serialization does not support.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, it does not give you full control over the shape of XML produced or consumed by the serializer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If such fine control is required, <bpt id="p1">*</bpt>XML serialization<ept id="p1">*</ept> has to be used, and you need to design your types to support this serialization technology.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>AVOID designing your types specifically for XML Serialization, unless you have a very strong reason to control the shape of the XML produced.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This serialization technology has been superseded by the Data Contract Serialization discussed in the previous section.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In other words, donâ€™t apply attributes from the <ph id="ph1">&lt;xref:System.Runtime.Serialization&gt;</ph> namespace to new types, unless you know that the type will be used with XML Serialization.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example shows how <bpt id="p1">**</bpt>System.Xml.Serialization<ept id="p1">**</ept> can be used to control the shape of the XML -produced.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CONSIDER implementing the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface if you want even more control over the shape of the serialized XML than whatâ€™s offered by applying the XML Serialization attributes.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Two methods of the interface, <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable.ReadXml%2A&gt;</ph>and <ph id="ph2">&lt;xref:System.Xml.Serialization.IXmlSerializable.WriteXml%2A&gt;</ph>, allow you to fully control the serialized XML stream.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can also control the XML schema that gets generated for the type by applying the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Supporting Runtime Serialization</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Runtime serialization<ept id="p1">*</ept> is a technology used by .NET Remoting.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you think your types will be transported using .NET Remoting, you need to make sure they support runtime serialization.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The basic support for <bpt id="p1">*</bpt>runtime serialization<ept id="p1">*</ept> can be provided by applying the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute, and more advanced scenarios involve implementing a simple <bpt id="p2">*</bpt>runtime serializable pattern<ept id="p2">*</ept> (implement -<ph id="ph2">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> and provide a serialization constructor).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CONSIDER supporting runtime serialization if your types will be used with .NET Remoting.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.AddIn&gt;</ph> namespace uses .NET Remoting, and so all types exchanged between <bpt id="p1">**</bpt>System.AddIn<ept id="p1">**</ept> add-ins need to support runtime serialization.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CONSIDER implementing the <bpt id="p1">*</bpt>runtime serializable pattern<ept id="p1">*</ept> if you want complete control over the serialization process.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, if you want to transform data as it gets serialized or deserialized.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The pattern is very simple.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>All you need to do is implement the <bpt id="p1">**</bpt>ISerializable<ept id="p1">**</ept> interface and provide a special constructor that is used when the object is deserialized.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>DO make the serialization constructor protected and provide two parameters typed and named exactly as shown in the sample here.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>DO implement the ISerializable members explicitly.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>DO apply a link demand to <bpt id="p1">**</bpt>ISerializable.GetObjectData<ept id="p1">**</ept> implementation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This ensures that only fully trusted core and the runtime serializer have access to the member.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/using-data-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Contract Serializer<ept id="p1">](../../../docs/framework/wcf/feature-details/data-contract-serializer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](../../../docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binary Serialization<ept id="p1">](../../../docs/framework/serialization/binary-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Remote Objects<ept id="p1">](http://msdn.microsoft.com/en-us/515686e6-0a8d-42f7-8188-73abede57c58)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security and Serialization<ept id="p1">](../../../docs/framework/misc/security-and-serialization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>