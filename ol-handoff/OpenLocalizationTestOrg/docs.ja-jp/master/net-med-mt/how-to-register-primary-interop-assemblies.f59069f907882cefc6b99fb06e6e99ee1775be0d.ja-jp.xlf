<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c16a4ef47982a3149d4cdef4efccea5c4c0a1e26</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\how-to-register-primary-interop-assemblies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f8ea8a13dbe2c7153ff1d43352eef2378100fa81</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1390de04b2d8f6b2f2c63fb656071670818ff374</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Register Primary Interop Assemblies | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Register Primary Interop Assemblies</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Classes can be marshaled only by COM interop and are always marshaled as interfaces.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In some cases the interface used to marshal the class is known as the class interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about overriding the class interface with an interface of your choice, see <bpt id="p1">[</bpt>COM Callable Wrapper<ept id="p1">](../../../docs/framework/interop/com-callable-wrapper.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Although any developer who wants to use COM types from a .NET Framework application can generate an interop assembly, doing so creates a problem.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each time a developer imports and signs a COM type library, that developer creates a set of unique types that are incompatible with those imported and signed by another developer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The solution to this type incompatibility problem is for each developer to obtain the vendor-supplied and signed primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you plan to expose third-party COM types to other applications, always use the primary interop assembly provided by the same publisher as the type library it defines.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition to providing guaranteed type compatibility, primary interop assemblies are often customized by the vendor to enhance interoperability.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Even if you do not plan to expose third-party COM types, using the primary interop assembly can ease the task of interoperating with COM components.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, this strategy provides no insulation from changes a vendor might make to types defined in a primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When your application requires such insulation, generate your own interop assembly instead of using the primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You must register all acquired primary interop assemblies on your development computer before you can reference them with <ph id="ph1">[!INCLUDE[vsprvsext](../../../includes/vsprvsext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Visual Studio looks for and uses a primary interop assembly the first time that you reference a type from a COM type library.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If Visual Studio cannot locate the primary interop assembly associated with the type library, it prompts you to acquire it or offers to create an interop assembly instead.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Likewise, the <bpt id="p1">[</bpt>Type Library Importer (Tlbimp.exe)<ept id="p1">](../../../docs/framework/tools/tlbimp-exe-type-library-importer.md)</ept> also uses the registry to locate primary interop assemblies.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Although it is not necessary to register primary interop assemblies unless you plan to use Visual Studio, registration provides two advantages:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A registered primary interop assembly is clearly marked under the registry key of the original type library.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Registration is the best way for you to locate a primary interop assembly on your computer.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can avoid accidentally generating and using a new interop assembly if, at some time in the future, you do use Visual Studio to reference a type for which you have an unregistered primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>Assembly Registration Tool (Regasm.exe)<ept id="p1">](../../../docs/framework/tools/regasm-exe-assembly-registration-tool.md)</ept> to register a primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To register a primary interop assembly</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>At the command prompt, type:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>regasm<ept id="p1">**</ept> <bpt id="p2">*</bpt>assemblyname<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this command, <bpt id="p1">*</bpt>assemblyname<ept id="p1">*</ept> is the file name of the assembly that is registered.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Regasm.exe adds an entry for the primary interop assembly under the same registry key as the original type library.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example registers the <ph id="ph1">`CompanyA.UtilLib.dll`</ph> primary interop assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming with Primary Interop Assemblies<ept id="p1">](http://msdn.microsoft.com/en-us/306fa1d6-0703-4004-9e93-d0a57f1be81e)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Locating Primary Interop Assemblies<ept id="p1">](http://msdn.microsoft.com/en-us/d6768e4b-cd80-414d-a4f8-05d979eb393b)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Redistributing Primary Interop Assemblies<ept id="p1">](http://msdn.microsoft.com/en-us/e76384f0-d631-474c-bdbd-13884cba0265)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>