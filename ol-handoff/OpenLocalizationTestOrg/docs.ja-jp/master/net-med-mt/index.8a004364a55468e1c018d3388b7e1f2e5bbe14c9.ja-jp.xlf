<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffe0b574b00e3ce420d83658f5844f26c3f8ea72</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\resources\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ac14269aca5f666de4c5f33f3c5265fe3ac0f64</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">858549b6d4c1760be3a1f509c1b8a36fd419a96f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Resources in Desktop Apps | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Resources in Desktop Apps</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Nearly every production-quality app has to use resources.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A resource is any nonexecutable data that is logically deployed with an app.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A resource might be displayed in an app as error messages or as part of the user interface.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Resources can contain data in a number of forms, including strings, images, and persisted objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>(To write persisted objects to a resource file, the objects must be serializable.) Storing your data in a resource file enables you to change the data without recompiling your entire app.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It also enables you to store data in a single location, and eliminates the need to rely on hard-coded data that is stored in multiple locations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides comprehensive support for the creation and localization of resources in desktop apps.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition, the .NET Framework supports a simple model for packaging and deploying these localized resources in desktop apps.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For information about resources in ASP.NET, see <bpt id="p1">[</bpt>ASP.NET Web Page Resources Overview<ept id="p1">](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)</ept> in the Internet Explorer Developer Center.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps use a different resource model from desktop apps and store their resources in a single package resource index (PRI) file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For information about resources in <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps, see <bpt id="p1">[</bpt>Creating and retrieving resources in Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=241674)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creating and Localizing Resources</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In a non-localized app, you can use resource files as a repository for app data, particularly for strings that might otherwise be hard-coded in multiple locations in source code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Most commonly, you create resources as either text (.txt) or XML (.resx) files, and use <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](../../../docs/framework/tools/resgen-exe-resource-file-generator.md)</ept> to compile them into binary .resources files.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These files can then be embedded in the app's executable file by a language compiler.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about creating resources, see <bpt id="p1">[</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can also localize your app's resources for specific cultures.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This enables you to build localized (translated) versions of your apps.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you develop an app that uses localized resources, you designate a culture that serves as the neutral or fallback culture whose resources are used if no suitable resources are available.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Typically, the resources of the neutral culture are stored in the app's executable.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The remaining resources for individual localized cultures are stored in standalone satellite assemblies.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Satellite Assemblies<ept id="p1">](../../../docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Packaging and Deploying Resources</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You deploy localized app resources in <bpt id="p1">[</bpt>satellite assemblies<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A satellite assembly contains the resources of a single culture; it does not contain any app code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the satellite assembly deployment model, you create an app with one default assembly (which is typically the main assembly) and one satellite assembly for each culture that the app supports.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because the satellite assemblies are not part of the main assembly, you can easily replace or update resources corresponding to a specific culture without replacing the app's main assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Carefully determine which resources will make up your app's default resource assembly.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because it is a part of the main assembly, any changes to it will require you to replace the main assembly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you do not provide a default resource, an exception will be thrown when the <bpt id="p1">[</bpt>resource fallback process<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> attempts to find it.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In a well-designed app, using resources should never throw an exception.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieving Resources</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At run time, an app loads the appropriate localized resources on a per-thread basis, based on the culture specified by the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This property value is derived as follows:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>By directly assigning a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the localized culture to the <ph id="ph2">&lt;xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If a culture is not explicitly assigned, by retrieving the default thread UI culture from the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a default thread UI culture is not explicitly assigned, by retrieving the culture for the current user on the local computer by calling the Windows <ph id="ph1">`GetUserDefaultUILanguage`</ph> function.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about how the current UI culture is set, see the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=fullName&gt;</ph> reference pages.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can then retrieve resources for the current UI culture or for a specific culture by using the <ph id="ph1">&lt;xref:System.Resources.ResourceManager?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is most commonly used for retrieving resources in desktop apps, the <ph id="ph2">&lt;xref:System.Resources?displayProperty=fullName&gt;</ph> namespace contains additional types that you can use to retrieve resources.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class, which enables you to enumerate resources embedded in an assembly or stored in a standalone binary .resources file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It is useful when you don't know the precise names of the resources that are available at run time.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceReader&gt;</ph> class, which enables you to retrieve resources from an XML (.resx) file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceSet&gt;</ph> class, which enables you to retrieve the resources of a specific culture without observing fallback rules.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The resources can be stored in an assembly or a standalone binary .resources file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can also develop an <ph id="ph1">&lt;xref:System.Resources.IResourceReader&gt;</ph> implementation that enables you to use the <ph id="ph2">&lt;xref:System.Resources.ResourceSet&gt;</ph> class to retrieve resources from some other source.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResXResourceSet&gt;</ph> class, which enables you to retrieve all the items in an XML resource file into memory.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Application Essentials<ept id="p1">](../../../docs/standard/application-essentials.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating Resource Files<ept id="p1">](../../../docs/framework/resources/creating-resource-files-for-desktop-apps.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Packaging and Deploying Resources<ept id="p1">](../../../docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating Satellite Assemblies<ept id="p1">](../../../docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Retrieving Resources<ept id="p1">](../../../docs/framework/resources/retrieving-resources-in-desktop-apps.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>