<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="messaging-activities.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-5ae97a8" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b75d88b2fcee5cbd72cd494241af4f7fd9e7c18</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\messaging-activities.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7625c0668159abd6c4896ad900fe9169a385b44e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">835c36cc99c5d1831fd7c524e11b9d18b13b3295</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Messaging Activities | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Messaging Activities</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Messaging activities allow workflows to send and receive WCF messages.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By adding messaging activities to a workflow you can model any arbitrarily complex message exchange patterns (MEP).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Message Exchange Patterns</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are three basic message exchange patterns:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Datagram<ept id="p1">**</ept> - When using the datagram MEP the client sends a message to the service, but the service does not respond.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is sometimes called "fire and forget".</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A fire and forget exchange is one that requires out-of-band confirmation of successful delivery.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The message might be lost in transit and never reach the service.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the client successfully sends a message, it does not guarantee that the service has received the message.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The datagram is a fundamental building block for messaging, as you can build your own MEPs on top of it.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Request-Response<ept id="p1">**</ept> - When using the request-response MEP the client sends a message to the service, the service does the required processing, and then sends a response back to the client.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The pattern consists of request-response pairs.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Examples of request-response calls are remote procedure calls (RPC) and browser GET requests.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This pattern is also known as half-duplex.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Duplex<ept id="p1">**</ept> - When using the duplex MEP the client and service can send messages to each other in any order.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The duplex MEP is like a phone conversation, where each word being spoken is a message.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The messaging activities allow you to implement any of these basic MEPs as well as any arbitrarily complex MEP.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Messaging Activities</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[netfx_current_long](../../../../includes/netfx-current-long-md.md)]</ph> defines the following messaging activities:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph>- Use the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity to send a message.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> - Use the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activity to send a response to a received message.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This activity is used by workflow services when implementing a request/reply MEP.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph>- Use the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity to receive a message.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> - Use the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activity to receive a reply message.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This activity is used by workflow service clients when implementing a request/reply MEP.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Messaging Activities and Message Exchange Patterns</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A datagram MEP involves a client sending a message and a service receiving the message.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the client is a workflow use a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity to send the message.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To receive that message in a workflow, use a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activities each have a property named <ph id="ph3">`Content`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This property contains the data being sent or received.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When implementing the request-response MEP both the client and the service use pairs of activities.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The client uses a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity to send the message and a <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activity to receive the response from the service.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These two activities are associated with each other by the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveReply.Request%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This property is set to the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity that sent the original message.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The service also uses a pair of associated activities: <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>These two activities are associated by the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendReply.Request%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This property is set to the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity that received the original message.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activities, like <ph id="ph3">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> allow you to send a <ph id="ph5">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> instance or a message contract type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because of the long-running nature of workflows, it is important for the duplex pattern of communication to also support long-running conversations.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To support long-running conversations, clients who initiate the conversation must provide the service with an opportunity to call it back at a later time when the data becomes available.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, a purchase order request is submitted for manager approval, but it might not be processed for a day, a week, or even a year; the workflow that manages the purchase order approval must know to resume after the approval is given.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This pattern of duplex communication is supported in workflows using correlation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To implement a duplex pattern, use <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activities.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>On the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity, initialize a correlation using the special key value of</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`System.ServiceModel.Activities.CorrelationHandle.CallbackHandleName`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>On the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity set that correlation handle as the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send.CorrelatesWith%2A&gt;</ph> property value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Durable Duplex<ept id="p1">](../../../../docs/framework/wcf/feature-details/durable-duplex-correlation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Workflow’s implementation of duplex using a callback correlation ("Durable Duplex") is intended for long-running conversations.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is not the same as WCF duplex with callback contracts where the conversation is short-running (the lifetime of the channel).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Message Formatting and Messaging Activities</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activities have a property named <ph id="ph3">`Content`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This property is of type <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveContent&gt;</ph> and represents data the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activity receives.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The .NET Framework defines two related classes called <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveMessageContent&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveParametersContent&gt;</ph> both of which are derived from <ph id="ph3">&lt;xref:System.ServiceModel.Activities.ReceiveContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activity’s <ph id="ph3">`Content`</ph> property to an instance of one of these types to receive data into a workflow service.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The type to use depends upon the type of data the activity receives.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If the activity receives a <ph id="ph1">`Message`</ph> object or a message contract type, use <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveMessageContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the activity receives a set of data contract or XML types that can be serialized, use <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveParametersContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveParametersContent&gt;</ph> allows you to send multiple parameters, whereas <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveMessageContent&gt;</ph> only allows you to send one object, the message (or message contract type).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveMessageContent&gt;</ph> can also be used with a single data contract or XML type that can be serialized.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The difference between using <ph id="ph1">&lt;xref:System.ServiceModel.Activities.ReceiveParametersContent&gt;</ph> with a single parameter and the object passed directly to <ph id="ph2">&lt;xref:System.ServiceModel.Activities.ReceiveMessageContent&gt;</ph> is the wire-format.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The parameter’s content is wrapped in an XML element that corresponds to the operation name and the serialized object is wrapped in an XML element using the parameter name (for example, <ph id="ph1">`&lt;Echo&gt;&lt;msg&gt;Hello, World&lt;/msg&gt;&lt;/Echo&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The message content is not wrapped by the operation name.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Instead, the serialized object is placed within an XML element using the XML-qualified type name (for example, <ph id="ph1">`&lt;string&gt;Hello, World&lt;/string&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activities also have a property named <ph id="ph3">`Content`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This property is of type <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendContent&gt;</ph> and represents data the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activity sends.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The .NET Framework defines two related types called <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendMessageContent&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendParametersContent&gt;</ph> both of which are derived from <ph id="ph3">&lt;xref:System.ServiceModel.Activities.SendContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activity’s <ph id="ph3">`Content`</ph> property to an instance of one of these types to send data from a workflow service.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The type to use depends upon the type of data the activity sends.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If the activity sends a <ph id="ph1">`Message`</ph> object or a message contract type, use <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendMessageContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the activity sends a data contract type use <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendParametersContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendParametersContent&gt;</ph> allows you to send multiple parameters, whereas <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendMessageContent&gt;</ph> only allows you to send one object, the message (or the message contract type).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When programming imperatively with the messaging activities, you use the generic <ph id="ph1">&lt;xref:System.Activities.InArgument%601&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.OutArgument%601&gt;</ph> to wrap the objects you assign to the message or parameters properties of the <ph id="ph3">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph>, <ph id="ph5">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph>, and <ph id="ph6">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activities.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">&lt;xref:System.Activities.InArgument%601&gt;</ph> for the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph>activities and <ph id="ph4">&lt;xref:System.Activities.OutArgument%601&gt;</ph> for <ph id="ph5">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> and <ph id="ph6">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph>activities.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`In`</ph> arguments are used with the send activities because the data is being passed into the activities.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Out`</ph> arguments are used with the receive activities because data is being passed out of the activities, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When implementing a workflow service that defines a request/response operation that returns void, you must instantiate a <ph id="ph1">&lt;xref:System.ServiceModel.Activities.SendReply&gt;</ph> activity and set the <ph id="ph2">&lt;xref:System.ServiceModel.Activities.SendReply.Content%2A&gt;</ph> property to an empty instance of one of the content types (<ph id="ph3">&lt;xref:System.ServiceModel.Activities.SendMessageContent&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.Activities.SendParametersContent&gt;</ph>) as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Add Service Reference</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When calling a workflow service from a workflow application, <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> generates custom messaging activities that encapsulate the usual <ph id="ph2">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Activities.ReceiveReply&gt;</ph> activities used in a request/reply MEP.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To use this feature right-click the client project in <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> and select <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Type the base address of the service in the address box and click Go.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The available services are displayed in the <bpt id="p1">**</bpt>Services:<ept id="p1">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Expand the service node to display the contracts supported.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Select the contract you want to call and the list of available operations is displayed in the <bpt id="p1">**</bpt>Operations<ept id="p1">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can then specify the namespace for the generated activity and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You then see a dialog that says the operation completed successfully and that the generated custom activities are in the toolbox after you have rebuilt the project.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>There is one activity for each operation defined on the service contract.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>After rebuilding the project you can drag and drop the custom activities onto your workflow and set any required properties in the properties window.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Messaging Activities and Transactions</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>When a call is made to a workflow service you may want to flow a transaction to the service operation.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To do this place the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph> activity within a <ph id="ph2">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> activity contains a <ph id="ph2">`Receive`</ph> activity and a body.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The transaction flowed to the service remains ambient throughout the execution of the body of the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The transaction is completed when the body finishes executing.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> workflows and transactions see <bpt id="p1">[</bpt>Workflow Transactions<ept id="p1">](../../../../docs/framework/windows-workflow-foundation/workflow-transactions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to Send and Receive Faults in Workflow Services<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=189151)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating a Long-running Workflow Service<ept id="p1">](../../../../docs/framework/wcf/feature-details/creating-a-long-running-workflow-service.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>