<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">318a2d3407d36b16137517a9735299027bceddea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\common-client-technologies\creating-the-gamepiece-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8900b918f8f28072f432a0401c540b2d5e44b0c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2428a831b8b028eb3fdc3b9cd09b701fe8f01fb2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating the GamePiece Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating the GamePiece Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GamePiece<ept id="p1">**</ept> class encapsulates all the functionality required to load a Microsoft XNA game piece image, track the state of the mouse in relation to the game piece, capture the mouse, provide manipulation and inertia processing, and provide bouncing capability when the game piece reaches the limits of the view port.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Private Members</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At the top of the <bpt id="p1">**</bpt>GamePiece<ept id="p1">**</ept> class, several private members are declared.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_PrivateMembers<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privatemembers)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Public Properties</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Three of these private members are exposed through public properties.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Scale<ept id="p1">**</ept> and <bpt id="p2">**</bpt>PieceColor<ept id="p2">**</ept> properties enable the application to specify the scale and the color of the piece, respectively.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Bounds<ept id="p1">**</ept> property is exposed to enable one piece to use the bounds of another to render itself, such as when one piece should overlay another.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following code shows the declaration of the public properties.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_PublicProperties<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_publicproperties)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Class Constructor</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The constructor for the <bpt id="p1">**</bpt>GamePiece<ept id="p1">**</ept> class accepts the following parameters:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>SpriteBatch<ept id="p1">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.aspx)</ept> type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The reference passed here is assigned to the private member <ph id="ph1">`spriteBatch`</ph>, and is used to access the <bpt id="p1">[</bpt>SpriteBatch.Draw<ept id="p1">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.draw.aspx)</ept> method when the game piece renders itself.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In addition, the <bpt id="p1">[</bpt>GraphicsDevice<ept id="p1">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.spritebatch.graphicsdevice.aspx)</ept> property is used to create the <bpt id="p2">[</bpt>Texture<ept id="p2">](http://msdn.microsoft.com/library/microsoft.xna.framework.graphics.texture.aspx)</ept> object associated with the game piece, and to obtain the size of the view port in order to detect when the game piece encounters a window boundary so that the piece can bounce.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A string that specifies the file name of the image to use for the game piece.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The constructor also creates a <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt;</ph> object and an <ph id="ph2">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D&gt;</ph> object, and establishes event handlers for their events.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code shows the constructor for the <bpt id="p1">**</bpt>GamePiece<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_Constructor<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_constructor)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Capturing Mouse Input</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>UpdateFromMouse<ept id="p1">**</ept> method is responsible for detecting when a mouse button is pressed while the mouse is within the boundaries of the game piece, and for detecting when the mouse button has been released.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the left mouse button is pressed (while the mouse is inside the piece boundaries), this method sets a flag to indicate that this game piece has captured the mouse, and begins manipulation processing.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Manipulation processing is started by creating an array of <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.Manipulator2D&gt;</ph> objects and passing them to the <ph id="ph2">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This causes the manipulation processor to evaluate the manipulators (in this case a single manipulator), and raise manipulation events.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In addition, the point at which the drag is occurring is saved.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is used later during the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta&gt;</ph> event to adjust the delta translation values so that the game piece swings into line behind the drag point.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Finally, this method returns the state of the mouse capture.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This enables the <bpt id="p1">[</bpt>GamePieceCollection<ept id="p1">](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md)</ept> object to manage capturing when there are multiple game pieces.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code shows the <bpt id="p1">**</bpt>UpdateFromMouse<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_UpdateFromMouse<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_updatefrommouse)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Processing Manipulations</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When manipulation begins, the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The handler for this event stops inertia processing if it is occurring, and sets the <bpt id="p1">*</bpt>processInertia<ept id="p1">*</ept> flag to <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_OnManipulationStarted<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationstarted)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As the values associated with the manipulation change, the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The handler for this event uses the delta values passed in the event arguments to make changes to the position and rotation values of the game piece.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_OnManipulationDelta<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationdelta)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When all of the manipulators (in this case, a single manipulator) that are associated with a manipulation are removed, the manipulation processor raises the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The handler for this event begins inertia processing by setting the initial velocities of the inertia processor to those reported by the event arguments, and sets the <bpt id="p1">*</bpt>processInertia<ept id="p1">*</ept> flag to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_OnManipulationCompleted<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_onmanipulationcompleted)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Processing Inertia</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As inertia processing extrapolates new values for angular and linear velocities, position (translation) coordinates, and rotation, the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The handler for this event uses the delta values passed in the event arguments to modify the position and rotation of the game piece.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the new coordinates result in the game piece moving beyond the view port boundaries, the velocity of the inertia processing is reversed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This causes the game piece to bounce off the view port boundary that it has encountered.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You cannot change the properties of an <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D&gt;</ph> object while it is running extrapolation.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Therefore, when reversing the X or Y velocity, the event handler first stops inertia by calling the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It then assigns the new initial velocity values to be the current velocity values (adjusted for sponge behavior), and sets the <bpt id="p1">*</bpt>processInertia<ept id="p1">*</ept> flag to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following code shows the event handler for the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_OnInertiaDelta<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiadelta)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When inertia processing is complete, the inertia processor raises the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The handler for this event sets the <bpt id="p1">*</bpt>processInertia<ept id="p1">*</ept> flag to <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_OnInertiaCompleted<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_oninertiacompleted)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>None of the logic presented so far actually causes inertia extrapolation to occur.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is accomplished in the <bpt id="p1">**</bpt>ProcessInertia<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This method, which is called repeatedly from the game update loop (the <bpt id="p1">[</bpt>Game.Update<ept id="p1">](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx)</ept> method) checks to see if the <bpt id="p2">*</bpt>processInertia<ept id="p2">*</ept> flag is set to <ph id="ph1">`true`</ph>, and if so, calls the <ph id="ph2">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Process%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Calling this method causes extrapolation to occur, and raises the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_ProcessInertia<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_processinertia)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The game piece is not actually rendered until one of the Draw method overloads is called.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first overload of this method is called repeatedly from the game draw loop (the <bpt id="p1">[</bpt>Game.Draw<ept id="p1">](http://msdn.microsoft.com/library/microsoft.xna.framework.game.draw.aspx)</ept> method).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This renders the game piece with the current position, rotation, and scale factors.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_Draw<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_draw)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Additional Properties</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Three private properties are used by the <bpt id="p1">**</bpt>GamePiece<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Timestamp<ept id="p1">**</ept> – Gets a timestamp value to be used by the manipulation and inertia processors.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X<ept id="p1">**</ept> – Gets or sets the X coordinate of the game piece.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When setting, adjusts the bounds used for hit testing and the pivot location of the manipulation processor.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Y<ept id="p1">**</ept> – Gets or sets the Y coordinate of the game piece.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When setting, adjusts the bounds used for hit testing and the pivot location of the manipulation processor.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ManipulationXNA#_GamePiece_PrivateProperties<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/manipulationxna/cs/gamepiece.cs#_gamepiece_privateproperties)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Manipulations and Inertia<ept id="p1">](../../../docs/framework/common-client-technologies/manipulations-and-inertia.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Manipulations and Inertia in an XNA Application<ept id="p1">](../../../docs/framework/common-client-technologies/use-manipulations-and-inertia-in-an-xna-application.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating the GamePieceCollection Class<ept id="p1">](../../../docs/framework/common-client-technologies/creating-the-gamepiececollection-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Creating the Game1 Class<ept id="p1">](../../../docs/framework/common-client-technologies/creating-the-game1-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>