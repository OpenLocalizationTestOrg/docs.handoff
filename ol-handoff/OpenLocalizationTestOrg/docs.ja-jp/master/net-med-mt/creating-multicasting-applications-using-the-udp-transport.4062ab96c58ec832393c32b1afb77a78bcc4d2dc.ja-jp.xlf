<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45c098d2749d26bc23b4b60322d7ce0d9b427b11</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\creating-multicasting-applications-using-the-udp-transport.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">284648040495af05fed47ca49adfe7656571ea1b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9c4c97810d4a743e8c14dae695507bda2e2b1865</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating Multicasting Applications using the UDP Transport | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating Multicasting Applications using the UDP Transport</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Multicasting applications send small messages to a large number of recipients at the same time without the need to establish point to point connections.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The emphasis of such applications is speed over reliability.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In other words, it is more important to send timely data than to ensure any specific message is actually received.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>WCF now supports writing multicasting applications using the <ph id="ph1">&lt;xref:System.ServiceModel.UdpBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This transport is useful in scenarios where a service needs to send out small messages to a number of clients simultaneously.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A stock ticker application is an example of such a service.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Implementing a Multicast Application</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To implement a multicast application, define a service contract and for each software component that needs to respond to the multicast messages, implement the service contract.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, a stock ticker application might define a service contract:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Each application that wants to receive multicast messages must host a service that exposes this interface.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, here is a code sample that illustrates how to receive multicast messages:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The application specifies the UDP address that all services will be listening on.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> is created and a service endpoint is exposed using the <ph id="ph2">&lt;xref:System.ServiceModel.UdpBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> is then opened and will start listening for incoming messages.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this type of a scenario it is the client that actually sends out multicast messages.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each service that is listening at the correct UDP address will receive the multicast messages.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here is an example of a client that sends out multicast messages:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This code generates stock information and then uses the service contract IStockTicker to send multicast messages to call services listening on the correct UDP address.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>UDP and Reliable Messaging</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The UDP binding does not support reliable messaging because of the lightweight nature of the UDP protocol.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you need to confirm that messages are received by a remote endpoint, use a transport that supports reliable messaging like  HTTP or TCP.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about reliable messaging see http://go.microsoft.com/fwlink/?LinkId=231830</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Two-way Multicast Messaging</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>While multicast messages are generally one-way, the UdpBinding does support request/reply message exchange.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Messages sent using the UDP transport contain both a From and To address.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Care must be taken when using the From address as it could be maliciously changed en-route.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The address can be checked using the following code:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This code checks the first byte of the From address to see if it contains 0xE0 which signifies that the address is a multi-cast address.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When listening for multicast messages an ICMP packet is sent to the router notifying it you are listening on the multicast address.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Anyone on the local subnet who has permissions could listen for these types of packets and determine which multicast address and port you are listening on.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Do not use the IP address of the sender for any security purposes.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This information can be spoofed and can cause an application to send responses to the wrong machine.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>One way to mitigate this threat is to enable message level security.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>At the network level IPSec  (Internet Protocol Security) and/or NAP (Network Access Protection) could also be used.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>