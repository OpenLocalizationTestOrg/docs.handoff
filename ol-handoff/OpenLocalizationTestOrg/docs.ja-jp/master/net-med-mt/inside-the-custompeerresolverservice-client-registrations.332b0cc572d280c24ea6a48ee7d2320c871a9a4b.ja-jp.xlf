<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2045e8ea532fdf2ddb767b1b66ca7ea7b8ecbea4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\inside-the-custompeerresolverservice-client-registrations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c493636c5f0d288b9671258724a19b90474ecda1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae691da4ec591d1233e48e37b59ff95e67dc820b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Inside the CustomPeerResolverService: Client Registrations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Inside the CustomPeerResolverService: Client Registrations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Each node in the mesh publishes its endpoint information to the resolver service through the <ph id="ph1">`Register`</ph> function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The resolver service stores this information as a registration record.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This record contains a unique identifier (RegistrationID) and endpoint information (PeerNodeAddress) for the node.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Stale Records and Expiration Time</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Ideally, when a node leaves the mesh, it will call the <ph id="ph1">`Unregister`</ph> function, which causes the resolver service to remove the registration entry.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Sometimes, nodes shut down or become inaccessible before calling <ph id="ph1">`Unregister`</ph>, leaving behind a stale registration record.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Stale records in your resolver service can cause failed connections.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If a node trying to connect to a mesh receives stale connection information from the resolver service, it can take longer to successfully join the mesh.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Stale records also take up memory.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Without an efficient clean up process, the cache used to store registrations could eventually overflow and crash the resolver service.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.PeerResolvers.CustomPeerResolverService&gt;</ph> marks each record with an expiration time (DateTime), and stores that information as part of the record.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The service uses the expiration time to identify stale records.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Custom implementations should do something similar.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>RefreshInterval and CleanupInterval</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RefreshInterval`</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.PeerResolvers.CustomPeerResolverService&gt;</ph> defines how long registration records remain valid in the service's registration lookup table.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When the amount of time supplied to this property has passed for a given record, that record becomes stale and is marked for deletion.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CleanupInterval`</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.PeerResolvers.CustomPeerResolverService&gt;</ph> tells the service how often to search for and delete stale registration records.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CleanupInterval`</ph> should be set to a time greater than or equal to the <ph id="ph2">`RefreshInterval`</ph> set on the service.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To implement your own resolver service, you need to write a maintenance function to remove stale registration records.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There are several ways to do this:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Periodic maintenance<ept id="p1">**</ept>: Set a timer to go off periodically, and go through your data store to delete old records.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.PeerResolvers.CustomPeerResolverService&gt;</ph> uses this approach.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Passive deletion<ept id="p1">**</ept>: Instead of actively searching for stale records at regular intervals, you can identify and delete stale records when your service is already performing another function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This may potentially slow down response time to requests from the resolver clients, but it eliminates the need for a timer, and may be more efficient if few nodes are expected to leave without calling <ph id="ph1">`Unregister`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>RegistrationLifetime and Refresh</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When a node registers with a resolver service, it receives a <ph id="ph1">&lt;xref:System.ServiceModel.PeerResolvers.RegisterResponseInfo&gt;</ph> object from the service.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This object has a <ph id="ph1">`RegistrationLifetime`</ph> property which indicates to the node how much time it has before the registration expires and is removed by the resolver service.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If, for example, the <ph id="ph1">`RegistrationLifetime`</ph> is 2 minutes, the node needs to call <ph id="ph2">`Refresh`</ph> in under 2 minutes to ensure the record stays fresh and is not deleted.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When the resolver service receives a <ph id="ph1">`Refresh`</ph> request, it looks up the record and resets the expiration time.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Refresh returns a <ph id="ph1">&lt;xref:System.ServiceModel.PeerResolvers.RefreshResponseInfo&gt;</ph> object with a <ph id="ph2">`RegistrationLifetime`</ph> property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Peer Resolvers<ept id="p1">](../../../../docs/framework/wcf/feature-details/peer-resolvers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>