<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="types-of-isolation.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f87285c4e073e2a8f069e26c94a145577f8eb690</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\io\types-of-isolation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab9380fa0dea15ba27b6ca45f431fd13861bef9a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8488f07c54c3735378a96155c3efcd6f48a6285b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Types of Isolation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Types of Isolation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Access to isolated storage is always restricted to the user who created it.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To implement this type of isolation, the common language runtime uses the same notion of user identity that the operating system recognizes, which is the identity associated with the process in which the code is running when the store is opened.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This identity is an authenticated user identity, but impersonation can cause the identity of the current user to change dynamically.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Access to isolated storage is also restricted according to the identity associated with the application's domain and assembly, or with the assembly alone.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The runtime obtains these identities in the following ways:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Domain identity represents the evidence of the application, which in the case of a web application might be the full URL.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For shell-hosted code, the domain identity might be based on the application directory path.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, if the executable runs from the path C:\Office\MyApp.exe, the domain identity would be C:\Office\MyApp.exe.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Assembly identity is the evidence of the assembly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This might come from a cryptographic digital signature, which can be the assembly's <bpt id="p1">[</bpt>strong name<ept id="p1">](../../../docs/framework/app-domains/strong-named-assemblies.md)</ept>, the software publisher of the assembly, or its URL identity.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If an assembly has both a strong name and a software publisher identity, then the software publisher identity is used.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the assembly comes from the Internet and is unsigned, the URL identity is used.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about assemblies and strong names, see <bpt id="p1">[</bpt>Programming with Assemblies<ept id="p1">](../../../docs/framework/app-domains/programming-with-assemblies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Roaming stores move with a user that has a roaming user profile.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Files are written to a network directory and are downloaded to any computer the user logs into.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about roaming user profiles, see <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageScope?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>By combining the concepts of user, domain, and assembly identity, isolated storage can isolate data in the following ways, each of which has its own usage scenarios:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Isolation by user and assembly<ept id="p1">](#UserAssembly)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Isolation by user, domain, and assembly<ept id="p1">](#UserDomainAssembly)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Either of these isolations can be combined with a roaming user profile.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information, see the section <bpt id="p1">[</bpt>Isolated Storage and Roaming<ept id="p1">](#Roaming)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following illustration demonstrates how stores are isolated in different scopes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Isolation by user and assembly<ept id="p1">]</ept><bpt id="p2">(../../../docs/standard/io/media/typesofisolation.gif "</bpt>typesofisolation<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Types of isolated storage</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that except for roaming stores, isolated storage is always implicitly isolated by computer because it uses the storage facilities that are local to a given computer.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Isolated storage is not available for <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Instead, use the application data classes in the <ph id="ph1">`Windows.Storage`</ph> namespaces included in the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> API to store local data and files.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Application data<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=229175)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Isolation by User and Assembly</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the assembly that uses the data store needs to be accessible from any application's domain, isolation by user and assembly is appropriate.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Typically, in this situation, isolated storage is used to store data that applies across multiple applications and is not tied to any particular application, such as the user's name or license information.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To access storage isolated by user and assembly, code must be trusted to transfer information between applications.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Typically, isolation by user and assembly is allowed on intranets but not on the Internet.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Calling the static <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore%2A?displayProperty=fullName&gt;</ph> method and passing in a user and an assembly <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageScope&gt;</ph> returns storage with this kind of isolation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code example retrieves a store that is isolated by user and assembly.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The store can be accessed through the <ph id="ph1">`isoFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For an example that uses the evidence parameters, see <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore%28System.IO.IsolatedStorage.IsolatedStorageScope%2CSystem.Security.Policy.Evidence%2CSystem.Type%2CSystem.Security.Policy.Evidence%2CSystem.Type%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly%2A&gt;</ph> method is available as a shortcut, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This shortcut cannot be used to open stores that are capable of roaming; use <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore%2A&gt;</ph> in such cases.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Isolation by User, Domain, and Assembly</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If your application uses a third-party assembly that requires a private data store, you can use isolated storage to store the private data.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Isolation by user, domain, and assembly ensures that only code in a given assembly can access the data, and only when the assembly is used by the application that was running when the assembly created the store, and only when the user for whom the store was created runs the application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Isolation by user, domain, and assembly keeps the third-party assembly from leaking data to other applications.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This isolation type should be your default choice if you know that you want to use isolated storage but are not sure which type of isolation to use.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Calling the static <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore%2A&gt;</ph> method of <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> and passing in a user, domain, and assembly <ph id="ph3">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageScope&gt;</ph> returns storage with this kind of isolation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following code example retrieves a store isolated by user, domain, and assembly.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The store can be accessed through the <ph id="ph1">`isoFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Another method is available as a shortcut, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This shortcut cannot be used to open stores that are capable of roaming; use <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.GetStore%2A&gt;</ph> in such cases.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Isolated Storage and Roaming</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Roaming user profiles are a Windows feature that enables a user to set up an identity on a network and use that identity to log into any network computer, carrying over all personalized settings.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An assembly that uses isolated storage can specify that the user's isolated storage should move with the roaming user profile.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Roaming can be used in conjunction with isolation by user and assembly or with isolation by user, domain, and assembly.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a roaming scope is not used, stores will not roam even if a roaming user profile is used.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following code example retrieves a roaming store isolated by user and assembly.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The store can be accessed through the <ph id="ph1">`isoFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A domain scope can be added to create a roaming store isolated by user, domain, and application.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates this.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Isolated Storage<ept id="p1">](../../../docs/standard/io/isolated-storage.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>