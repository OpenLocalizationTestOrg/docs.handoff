<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">640455c4c6e55628a7a19d914fbf15a89bc505d1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\flow-document-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a39debf002297e8481ef9869a8d2e15fdc4c0c78</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85db4935c84db26dcf83d358129edf8f89ffabc2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Flow Document Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Flow Document Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Flow documents are designed to optimize viewing and readability.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Rather than being set to one predefined layout, flow documents dynamically adjust and reflow their content based on run-time variables such as window size, device resolution, and optional user preferences.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition, flow documents offer advanced document features, such as pagination and columns.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of flow documents and how to create them.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>What is a Flow Document</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A flow document is designed to "reflow content" depending on window size, device resolution, and other environment variables.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In addition, flow documents have a number of built in features including search, viewing modes that optimize readability, and the ability to change the size and appearance of fonts.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Flow Documents are best utilized when ease of reading is the primary document consumption scenario.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In contrast, Fixed Documents are designed to have a static presentation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Fixed Documents are useful when fidelity of the source content is essential.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See                  <bpt id="p1">[</bpt>Documents in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/documents-in-wpf.md)</ept> for more information on different types of documents.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following illustration shows a sample flow document viewed in several windows of different sizes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As the display area changes, the content reflows to make the best use of the available space.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Flow Document Content Reflow<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/edocs-flowdocument.png "</bpt>eDocs_FlowDocument<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>As seen in the image above, flow content can include many components including paragraphs, lists, images, and more.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These components correspond to elements in markup and objects in procedural code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We will go over these classes in detail later in the                  <bpt id="p1">[</bpt>Flow Related Classes<ept id="p1">](#flow_related_classes)</ept> section of this overview.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For now, here is a simple code example that creates a flow document consisting of a paragraph with some bold text and a                  list                 .</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#SimpleFlowExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/SimpleFlowExample.xaml#simpleflowexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_procedural_snip#SimpleFlowCodeOnlyExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/CSharp/SimpleFlowExample.cs#simpleflowcodeonlyexamplewholepage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FlowOvwSnippets_procedural_snip#SimpleFlowCodeOnlyExampleWholePage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/VisualBasic/SimpleFlowExample.vb#simpleflowcodeonlyexamplewholepage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The illustration below shows what this code snippet looks like.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Rendered FlowDocument example<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-ovw-first-example.png "</bpt>Flow_Ovw_First_Example<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this example, the                  <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentReader&gt;</ph> control is used to host the flow content.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See                  <bpt id="p1">[</bpt>Flow Document Types<ept id="p1">](#flow_document_types)</ept> for more information on flow content hosting controls.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.Documents.List&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Documents.ListItem&gt;</ph>, and                  <ph id="ph4">&lt;xref:System.Windows.Documents.Bold&gt;</ph> elements are used to control content formatting, based on their order in markup.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the                  <ph id="ph1">&lt;xref:System.Windows.Documents.Bold&gt;</ph> element spans across only part of the text in the paragraph; as a result, only that part of the text is bold.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you have used HTML, this will be familiar to you.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As highlighted in the illustration above, there are several features built into Flow                  Documents                 :</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Search: Allows the user to perform a full text search of an entire document.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Viewing Mode: The user can select their preferred viewing mode including a single-page (page-at-a-time) viewing mode, a two-page-at-a-time (book reading format) viewing mode, and a continuous scrolling (bottomless) viewing mode.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about these viewing modes, see                          <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentReaderViewingMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Page Navigation Controls: If the viewing mode of the document uses pages, the page navigation controls include a button to jump to the next page (the down arrow) or previous page (the up arrow), as well as indicators for the current page number and total number of pages.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Flipping through pages can also be accomplished using the keyboard arrow keys.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Zoom: The zoom controls enable the user to increase or decrease the zoom level by clicking the plus or minus buttons, respectively.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The zoom controls also include a slider for adjusting the zoom level.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see                          <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentReader.Zoom%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>These features can be modified based upon the control used to host the flow content.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The next section describes the different controls.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Flow Document Types</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Display of flow document content and how it appears is dependent upon what object is used to host the flow content.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>There are four controls that support viewing of flow content:                  <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentReader&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.Controls.FlowDocumentPageViewer&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, and                  <ph id="ph4">&lt;xref:System.Windows.Controls.FlowDocumentScrollViewer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These controls are briefly described below.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> is required to directly host flow content, so all of these viewing controls consume a                  <ph id="ph2">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> to enable flow content                  hosting                 .</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>FlowDocumentReader</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentReader&gt;</ph> includes features that enable the user to dynamically choose between various viewing modes, including a single-page (page-at-a-time) viewing mode, a two-page-at-a-time (book reading format) viewing mode, and a continuous scrolling (bottomless) viewing mode.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about these viewing modes, see                          <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentReaderViewingMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you do not need the ability to dynamically switch between different viewing modes,                          <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentPageViewer&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Controls.FlowDocumentScrollViewer&gt;</ph> provide lighter-weight flow content viewers that are fixed in a particular viewing mode.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>FlowDocumentPageViewer and FlowDocumentScrollViewer</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentPageViewer&gt;</ph> shows content in page-at-a-time viewing mode, while                          <ph id="ph2">&lt;xref:System.Windows.Controls.FlowDocumentScrollViewer&gt;</ph> shows content in continuous scrolling mode.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Both                          <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentPageViewer&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Controls.FlowDocumentScrollViewer&gt;</ph> are fixed to a particular viewing mode.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Compare to                          <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentReader&gt;</ph>, which includes features that enable the user to dynamically choose between various viewing modes (as provided by the                          <ph id="ph2">&lt;xref:System.Windows.Controls.FlowDocumentReaderViewingMode&gt;</ph> enumeration), at the cost of being more resource intensive than                          <ph id="ph3">&lt;xref:System.Windows.Controls.FlowDocumentPageViewer&gt;</ph> or                          <ph id="ph4">&lt;xref:System.Windows.Controls.FlowDocumentScrollViewer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>By default, a vertical scrollbar is always shown, and a horizontal scrollbar becomes visible if needed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The default UI for                          <ph id="ph1">&lt;xref:System.Windows.Controls.FlowDocumentScrollViewer&gt;</ph> does not include a toolbar; however, the                          <ph id="ph2">&lt;xref:System.Windows.Controls.FlowDocumentScrollViewer.IsToolBarVisible%2A&gt;</ph> property can be used to enable a built-in toolbar.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>RichTextBox</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You use a                          <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> when you want to allow the user to edit flow content.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to create an editor that allowed a user to manipulate things like tables, italic and bold formatting, etc, you would use a                          <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See                          <bpt id="p1">[</bpt>RichTextBox Overview<ept id="p1">](../../../../docs/framework/wpf/controls/richtextbox-overview.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> Flow content inside a                          <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> does not behave exactly like flow content contained in other controls.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, there are no columns in a                          <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> and hence no automatic resizing behavior.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Also, the typically built in features of flow content like search, viewing mode, page navigation, and zoom are not available within a                          <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Creating Flow Content</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Flow content can be complex, consisting of various elements including text, images, tables, and even                  <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> derived classes like controls.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To understand how to create complex flow content, the following points are critical:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Flow-related Classes<ept id="p1">**</ept>: Each class used in flow content has a specific purpose.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In addition, the hierarchical relation between flow classes helps you understand how they are used.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, classes derived from the                          <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> class are used to contain other objects while classes derived from                          <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph> contain objects that are displayed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Content Schema<ept id="p1">**</ept>: A flow document can require a substantial number of nested elements.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The content schema specifies possible parent/child relationships between elements.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following sections will go over each of these areas in more detail.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Flow Related Classes</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The diagram below shows the objects most typically used with flow content:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: Flow content element class hierarchy<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-class-hierarchy.png "</bpt>Flow_Class_Hierarchy<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For the purposes of flow content, there are two important categories:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Block-derived classes<ept id="p1">**</ept>: Also called "Block content elements" or just "Block Elements".</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Elements that inherit from                          <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> can be used to group elements under a common parent or to apply common attributes to a group.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Inline-derived classes<ept id="p1">**</ept>: Also called "Inline content elements" or just "Inline Elements".</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Elements that inherit from                          <ph id="ph1">&lt;xref:System.Windows.Documents.Inline&gt;</ph> are either contained within a Block Element or another Inline Element.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Inline Elements are often used as the direct container of content that is rendered to the screen.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> (Block Element) can contain a                          <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> (Inline Element) but the                          <ph id="ph3">&lt;xref:System.Windows.Documents.Run&gt;</ph> actually contains the text that is rendered on the screen.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Each class in these two categories is briefly described below.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Block-derived Classes</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Paragraph<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> is typically used to group content into a paragraph.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The simplest and most common use of Paragraph is to create a paragraph of text.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#ParagraphExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/ParagraphExample.xaml#paragraphexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_procedural_snip#ParagraphCodeOnlyExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/CSharp/ParagraphExample.cs#paragraphcodeonlyexamplewholepage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FlowOvwSnippets_procedural_snip#ParagraphCodeOnlyExampleWholePage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/VisualBasic/ParagraphExample.vb#paragraphcodeonlyexamplewholepage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>However, you can also contain other inline-derived elements as you will see                          below                         .</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Section<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Section&gt;</ph> is used only to contain other                          <ph id="ph2">&lt;xref:System.Windows.Documents.Block&gt;</ph>-derived elements.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It does not apply any default formatting to the elements it contains.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>However, any property values set on a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Section&gt;</ph> applies to its child elements.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A section also enables you to programmatically iterate through its child collection.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Section&gt;</ph> is used in a similar manner to the <ph id="ph2">\&lt;</ph>DIV&gt; tag in HTML.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In the example below, three paragraphs are defined under one                          <ph id="ph1">&lt;xref:System.Windows.Documents.Section&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The section has a                          <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement.Background%2A&gt;</ph> property value of Red, therefore the background color of the paragraphs is also red.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#SectionExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/SectionExample.xaml#sectionexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_procedural_snip#SectionCodeOnlyExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/CSharp/SectionExample.cs#sectioncodeonlyexamplewholepage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FlowOvwSnippets_procedural_snip#SectionCodeOnlyExampleWholePage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/VisualBasic/SectionExample.vb#sectioncodeonlyexamplewholepage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BlockUIContainer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> enables                          <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> elements (i.e. a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>) to be embedded  in block-derived flow content.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> (see below) is used to embed                          <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> elements in inline-derived flow content.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> are important because there is no other way to use a                          <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> in flow content unless it is contained within one of these two elements.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the                          <ph id="ph1">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> element to host                          <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> objects within flow content.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>SpanSnippets#_BlockUIXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/SpanSnippets/CSharp/Window1.xaml#_blockuixaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following figure shows how this example renders.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: UIElement embedded in flow content<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/blockuicontainer.png "</bpt>BlockUIContainer<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>List<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.List&gt;</ph> is used to create a bulleted or numeric list.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Set the                          <ph id="ph1">&lt;xref:System.Windows.Documents.List.MarkerStyle%2A&gt;</ph> property to a                          <ph id="ph2">&lt;xref:System.Windows.TextMarkerStyle&gt;</ph> enumeration value to determine the style of the list.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The example below shows how to create a simple list.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#ListExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/ListExample.xaml#listexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_procedural_snip#ListCodeOnlyExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/CSharp/ListExample.cs#listcodeonlyexamplewholepage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FlowOvwSnippets_procedural_snip#ListCodeOnlyExampleWholePage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/VisualBasic/ListExample.vb#listcodeonlyexamplewholepage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Windows.Documents.List&gt;</ph> is the only flow element that uses the                          <ph id="ph2">&lt;xref:System.Windows.Documents.ListItemCollection&gt;</ph> to manage child elements.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Table<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> is used to create a table.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> is similar to the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> element but it has more capabilities and, therefore, requires greater resource overhead.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Because                          <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> is a                          <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph>, it cannot be used in flow content unless it is contained in a                          <ph id="ph3">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> or                          <ph id="ph4">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For more information on                          <ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph>, see                          <bpt id="p1">[</bpt>Table Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/table-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Inline-derived Classes</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Run<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> is used to contain unformatted text.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You might expect                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> objects to be used extensively in flow content.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>However, in markup,                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> elements are not required to be used explicitly.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> is required to be used when creating or manipulating flow documents by using code.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For example, in the markup below, the first                          <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> specifies the                          <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element explicitly while the second does not.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Both paragraphs generate identical output.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#RunExample1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/RunSnippetsExample.xaml#runexample1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  Starting in the                          <ph id="ph1">[!INCLUDE[net_v40_short](../../../../includes/net-v40-short-md.md)]</ph>, the                          <ph id="ph2">&lt;xref:System.Windows.Documents.Run.Text%2A&gt;</ph> property of the                          <ph id="ph3">&lt;xref:System.Windows.Documents.Run&gt;</ph> object is a dependency property.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can bind the                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run.Text%2A&gt;</ph> property to a data source, such as a                          <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run.Text%2A&gt;</ph> property fully supports one-way binding.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run.Text%2A&gt;</ph> property also supports two-way binding, except for                          <ph id="ph2">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For an example, see                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run.Text%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Span<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> groups other inline content elements together.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>No inherent rendering is applied to content within a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>However, elements that inherit from                          <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> including                          <ph id="ph2">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Documents.Bold&gt;</ph>,                          <ph id="ph4">&lt;xref:System.Windows.Documents.Italic&gt;</ph> and                          <ph id="ph5">&lt;xref:System.Windows.Documents.Underline&gt;</ph> do apply formatting to text.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Below is an example of a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> being used to contain inline content including text, a                          <ph id="ph2">&lt;xref:System.Windows.Documents.Bold&gt;</ph> element, and a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#SpanExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/SpanExample.xaml#spanexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The following screenshot shows how this example renders.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Rendered Span example<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-spanexample.gif "</bpt>Flow_SpanExample<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InlineUIContainer<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> enables                          <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> elements (i.e. a control like                          <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph>) to be embedded in an                          <ph id="ph4">&lt;xref:System.Windows.Documents.Inline&gt;</ph> content element.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This element is the inline equivalent to                          <ph id="ph1">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> described above.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Below is an example that uses                          <ph id="ph1">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> to insert a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> inline in a                          <ph id="ph3">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#InlineUIContainerExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/InlineUIContainerExample.xaml#inlineuicontainerexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_procedural_snip#InlineUIContainerCodeOnlyExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/CSharp/InlineUIContainerExample.cs#inlineuicontainercodeonlyexamplewholepage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FlowOvwSnippets_procedural_snip#InlineUIContainerCodeOnlyExampleWholePage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/VisualBasic/InlineUIContainerExample.vb#inlineuicontainercodeonlyexamplewholepage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> does not need to be used explicitly in markup.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If you omit it, an                          <ph id="ph1">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> will be created anyway when the code is compiled.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Figure and Floater<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Documents.Floater&gt;</ph> are used to embed content in Flow Documents with placement properties that can be customized independent of the primary content flow.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> or                          <ph id="ph2">&lt;xref:System.Windows.Documents.Floater&gt;</ph> elements are often used to highlight or accentuate portions of content, to host supporting images or other content within the main content flow, or to inject loosely related content such as advertisements.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The following example shows how to embed a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> into a paragraph of text.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#FigureExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/FigureExample.xaml#figureexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_procedural_snip#FigureCodeOnlyExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/CSharp/FigureExample.cs#figurecodeonlyexamplewholepage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FlowOvwSnippets_procedural_snip#FigureCodeOnlyExampleWholePage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FlowOvwSnippets_procedural_snip/VisualBasic/FigureExample.vb#figurecodeonlyexamplewholepage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The following illustration shows how this example renders.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Figure example<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-ovw-figure-example.png "</bpt>Flow_Ovw_Figure_Example<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Documents.Floater&gt;</ph> differ in several ways and are used for different scenarios.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Figure:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Can be positioned: You can set its horizontal and vertical anchors to dock it relative to the page, content, column or paragraph.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>You can also use its                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Figure.HorizontalOffset%2A&gt;</ph> and                                  <ph id="ph2">&lt;xref:System.Windows.Documents.Figure.VerticalOffset%2A&gt;</ph> properties to specify arbitrary offsets.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Is sizable to more than one column: You can set                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> height and width to multiples of page, content or column height or width.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Note that in the case of page and content, multiples greater than 1 are not allowed.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>For example, you can set the width of a                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> to be "0.5 page" or "0.25 content" or "2 Column".</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You can also set height and width to absolute pixel values.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Does not paginate: If the content inside a                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> does not fit inside the                                  <ph id="ph2">&lt;xref:System.Windows.Documents.Figure&gt;</ph>, it will render whatever content does fit and the remaining content is lost</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Floater:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Cannot be positioned and will render wherever space can be made available for it.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>You cannot set the offset or anchor a                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Floater&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Cannot be sized to more than one column: By default,                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Floater&gt;</ph> sizes at one column.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>It has a                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Floater.Width%2A&gt;</ph> property that can be set to an absolute pixel value, but if this value is greater than one column width it is ignored and the floater is sized at one column.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You can size it to less than one column by setting the correct pixel width, but sizing is not column-relative, so "0.5Column" is not a valid expression for                                  <ph id="ph1">&lt;xref:System.Windows.Documents.Floater&gt;</ph> width.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Floater&gt;</ph> has no height property and it's height cannot be set, it’s height depends on the content</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Floater&gt;</ph> paginates: If its content at its specified width extends to more than 1 column height, floater breaks and paginates to the next column, the next page, etc.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Figure&gt;</ph> is a good place to put standalone content where you want to control the size and positioning, and are confident that the content will fit in the specified size.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.Floater&gt;</ph> is a good place to put more free-flowing content that flows similar to the main page content, but is separated from it.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LineBreak<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Documents.LineBreak&gt;</ph> causes a line break to occur in flow content.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of                          <ph id="ph1">&lt;xref:System.Windows.Documents.LineBreak&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#LineBreakExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/LineBreakExample.xaml#linebreakexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The following screenshot shows how this example renders.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: LineBreak example<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-ovw-linebreakexample.png "</bpt>Flow_Ovw_LineBreakExample<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Flow Collection Elements</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>In many of the examples above, the                          <ph id="ph1">&lt;xref:System.Windows.Documents.BlockCollection&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph> are used to construct flow content programmatically.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>For example, to add elements to a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>, you can use the syntax:</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>This adds a                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> to the                          <ph id="ph2">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph> of the                          <ph id="ph3">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>This is the same as the implicit                          <ph id="ph1">&lt;xref:System.Windows.Documents.Run&gt;</ph> found inside a                          <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> in markup:</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>As an example of using the                          <ph id="ph1">&lt;xref:System.Windows.Documents.BlockCollection&gt;</ph>, the following example creates a new                          <ph id="ph2">&lt;xref:System.Windows.Documents.Section&gt;</ph> and then uses the                          <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> method to add a new                          <ph id="ph3">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> to the                          <ph id="ph4">&lt;xref:System.Windows.Documents.Section&gt;</ph> contents.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FlowDocumentSnippets#_SectionBlocksAdd<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowDocumentSnippets/CSharp/Window1.xaml.cs#_sectionblocksadd)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>FlowDocumentSnippets#_SectionBlocksAdd<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FlowDocumentSnippets/visualbasic/window1.xaml.vb#_sectionblocksadd)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In addition to adding items to a flow collection, you can remove items as well.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The following example deletes the last                          <ph id="ph1">&lt;xref:System.Windows.Documents.Inline&gt;</ph> element in the                          <ph id="ph2">&lt;xref:System.Windows.Documents.Span&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>SpanSnippets#_SpanInlinesRemoveLast<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/SpanSnippets/CSharp/Window1.xaml.cs#_spaninlinesremovelast)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>SpanSnippets#_SpanInlinesRemoveLast<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/SpanSnippets/visualbasic/window1.xaml.vb#_spaninlinesremovelast)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The following example clears all of the contents (                         <ph id="ph1">&lt;xref:System.Windows.Documents.Inline&gt;</ph> elements) from the                          <ph id="ph2">&lt;xref:System.Windows.Documents.Span&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>SpanSnippets#_SpanInlinesClear<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/SpanSnippets/CSharp/Window1.xaml.cs#_spaninlinesclear)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>SpanSnippets#_SpanInlinesClear<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/SpanSnippets/visualbasic/window1.xaml.vb#_spaninlinesclear)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>When working with flow content programmatically, you will likely make extensive use of these collections.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Whether a flow element uses an                          <ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph> (Inlines) or                          <ph id="ph2">&lt;xref:System.Windows.Documents.BlockCollection&gt;</ph> (Blocks) to contain its child elements depends on what type of child elements (                         <ph id="ph3">&lt;xref:System.Windows.Documents.Block&gt;</ph> or                          <ph id="ph4">&lt;xref:System.Windows.Documents.Inline&gt;</ph>) can be contained by the parent.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Containment rules for flow content elements are summarized in the content schema in the next section.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> There is a third type of collection used with flow content, the                          <ph id="ph1">&lt;xref:System.Windows.Documents.ListItemCollection&gt;</ph>, but this collection is only used with a                          <ph id="ph2">&lt;xref:System.Windows.Documents.List&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>In addition, there are several collections used with                          <ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>See                          <bpt id="p1">[</bpt>Table Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/table-overview.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Content Schema</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Given the number of different flow content elements, it can be overwhelming to keep track of what type of child elements an element can contain.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The diagram below summarizes the containment rules for flow elements.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The arrows represent the possible parent/child relationships.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: Flow content containment schema<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-content-schema.png "</bpt>Flow_Content_Schema<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>As can be seen from the diagram above, the children allowed for an element are not necessarily determined by whether it is a                  <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> element or an                  <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>For example, a                  <ph id="ph1">&lt;xref:System.Windows.Documents.Span&gt;</ph> (an                  <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph> element) can only have                  <ph id="ph3">&lt;xref:System.Windows.Documents.Inline&gt;</ph> child elements while a                  <ph id="ph4">&lt;xref:System.Windows.Documents.Figure&gt;</ph> (also an                  <ph id="ph5">&lt;xref:System.Windows.Documents.Inline&gt;</ph> element) can only have                  <ph id="ph6">&lt;xref:System.Windows.Documents.Block&gt;</ph> child elements.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Therefore, a diagram is useful for quickly determining what element can be contained in another.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>As an example, let's use the diagram to determine how to construct the flow content of a                  <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>1.<ept id="p1">**</ept> A                  <ph id="ph1">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph> must contain a                  <ph id="ph2">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> which in turn must contain a                  <ph id="ph3">&lt;xref:System.Windows.Documents.Block&gt;</ph>-derived object.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Below is the corresponding segment from the diagram above.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: RichTextBox containment rules<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-ovw-schemawalkthrough1.png "</bpt>Flow_Ovw_SchemaWalkThrough1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Thus far, this is what the markup might look like.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#SchemaWalkThrough1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/MiscSnippets.xaml#schemawalkthrough1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>2.<ept id="p1">**</ept> According to the diagram, there are several                  <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> elements to choose from including                  <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Documents.Section&gt;</ph>,                  <ph id="ph4">&lt;xref:System.Windows.Documents.Table&gt;</ph>,                  <ph id="ph5">&lt;xref:System.Windows.Documents.List&gt;</ph>, and                  <ph id="ph6">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> (see Block-derived classes above).</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Let's say we want a                  <ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>According to the diagram above, a                  <ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> contains a                  <ph id="ph2">&lt;xref:System.Windows.Documents.TableRowGroup&gt;</ph> containing                  <ph id="ph3">&lt;xref:System.Windows.Documents.TableRow&gt;</ph> elements, which contain                  <ph id="ph4">&lt;xref:System.Windows.Documents.TableCell&gt;</ph> elements which contain a                  <ph id="ph5">&lt;xref:System.Windows.Documents.Block&gt;</ph>-derived object.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Below is the corresponding segment for                  <ph id="ph1">&lt;xref:System.Windows.Documents.Table&gt;</ph> taken from the diagram above.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: Parent&amp;#47;child schema for Table<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-ovw-schemawalkthrough2.png "</bpt>Flow_Ovw_SchemaWalkThrough2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Below is the corresponding markup.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#SchemaWalkThrough2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/MiscSnippets.xaml#schemawalkthrough2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>3.<ept id="p1">**</ept> Again, one or more                  <ph id="ph1">&lt;xref:System.Windows.Documents.Block&gt;</ph> elements are required underneath a                  <ph id="ph2">&lt;xref:System.Windows.Documents.TableCell&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>To make it simple, let's place some text inside the cell.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>We can do this using a                  <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> with a                  <ph id="ph2">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Below is the corresponding segments from the diagram showing that a                  <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> can take an                  <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph> element and that a                  <ph id="ph3">&lt;xref:System.Windows.Documents.Run&gt;</ph> (an                  <ph id="ph4">&lt;xref:System.Windows.Documents.Inline&gt;</ph> element) can only take plain text.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: Parent&amp;#47;child schema for Paragraph<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-ovw-schemawalkthrough3.png "</bpt>Flow_Ovw_SchemaWalkThrough3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Diagram: Parent&amp;#47;Child schema for Run<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/flow-ovw-schemawalkthrough4.png "</bpt>Flow_Ovw_SchemaWalkThrough4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Below is the entire example in markup.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>FlowOvwSnippets_snip#SchemaExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FlowOvwSnippets_snip/CS/SchemaExample.xaml#schemaexamplewholepage)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Customizing Text</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Usually text is the most prevalent type of content in a flow document.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Although the objects introduced above can be used to control most aspects of how text is rendered, there are some other methods for customizing text that is covered in this section.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Text Decorations</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Text decorations allow you to apply the underline, overline, baseline, and strikethrough effects to text (see pictures below).</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>These decorations are added using the                          <ph id="ph1">&lt;xref:System.Windows.Documents.Inline.TextDecorations%2A&gt;</ph> property that is exposed by a number of objects including                          <ph id="ph2">&lt;xref:System.Windows.Documents.Inline&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>,                          <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, and                          <ph id="ph5">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the                          <ph id="ph1">&lt;xref:System.Windows.Documents.Paragraph.TextDecorations%2A&gt;</ph> property of a                          <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>InlineSnippets#_Paragraph_TextDecXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/InlineSnippets/CSharp/Window1.xaml#_paragraph_textdecxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>InlineSnippets#_Paragraph_TextDec<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/InlineSnippets/CSharp/Window1.xaml.cs#_paragraph_textdec)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>InlineSnippets#_Paragraph_TextDec<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/InlineSnippets/visualbasic/window1.xaml.vb#_paragraph_textdec)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>The following figure shows how this example renders.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Text with default strikethrough effect<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/inline-textdec-strike.png "</bpt>Inline_TextDec_Strike<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The following figures show how the                          <bpt id="p1">**</bpt>Overline<ept id="p1">**</ept>,                          <bpt id="p2">**</bpt>Baseline<ept id="p2">**</ept>, and                          <bpt id="p3">**</bpt>Underline<ept id="p3">**</ept> decorations render, respectively.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Overline TextDecorator<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/inline-textdec-over.png "</bpt>Inline_TextDec_Over<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Default baseline effect on text<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/inline-textdec-base.png "</bpt>Inline_TextDec_Base<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Text with default underline effect<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/inline-textdec-under.png "</bpt>Inline_TextDec_Under<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Typography</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement.Typography%2A&gt;</ph> property is exposed by most flow-related content including                          <ph id="ph2">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>,                          <ph id="ph3">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>,                          <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, and                          <ph id="ph5">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>This property is used to control typographical characteristics/variations of text (i.e. small or large caps, making superscripts and subscripts, etc).</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the                          <ph id="ph1">&lt;xref:System.Windows.Documents.TextElement.Typography%2A&gt;</ph> attribute, using                          <ph id="ph2">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> as the example element.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>TextElementSnippets#_TextElement_TypogXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TextElementSnippets/CSharp/Window1.xaml#_textelement_typogxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The following figure shows how this example renders.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Text with altered typography<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/textelement-typog.png "</bpt>TextElement_Typog<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>In contrast, the following figure shows how a similar example with default typographic properties renders.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Screenshot: Text with altered typography<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/textelement-typog-default.png "</bpt>TextElement_Typog_Default<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the                          <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox.Typography%2A&gt;</ph> property programmatically.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TextElementSnippets#_TextElement_Typog<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TextElementSnippets/CSharp/Window1.xaml.cs#_textelement_typog)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TextElementSnippets#_TextElement_Typog<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/TextElementSnippets/visualbasic/window1.xaml.vb#_textelement_typog)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>See                          <bpt id="p1">[</bpt>Typography in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/typography-in-wpf.md)</ept> for more information on typography.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Text<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-text.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Typography in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/typography-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How-to Topics<ept id="p1">](../../../../docs/framework/wpf/advanced/flow-content-elements-how-to-topics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>TextElement Content Model Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/textelement-content-model-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>RichTextBox Overview<ept id="p1">](../../../../docs/framework/wpf/controls/richtextbox-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Documents in WPF<ept id="p1">](../../../../docs/framework/wpf/advanced/documents-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Table Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/table-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Annotations Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/annotations-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>