<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dataview-performance.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eda23e6047fd0a59fd62332b063e2312affee0d2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\dataview-performance.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8cef3580fa721491cf67152d569943afe15a2c72</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8782ebc841c23559d6e32bd8c11852c0270b83f5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>DataView Performance | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>DataView Performance</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic discusses the performance benefits of using the <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph> class, and of caching a <ph id="ph4">&lt;xref:System.Data.DataView&gt;</ph> in a Web application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Find and FindRows</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> constructs an index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An index contains keys built from one or more columns in the table or view.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These keys are stored in a structure that enables the <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> to find the row or rows associated with the key values quickly and efficiently.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Operations that use the index, such as filtering and sorting, see signifcant performance increases.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The index for a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> is built both when the <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> is created and when any of the sorting or filtering information is modified.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating a <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> and then setting the sorting or filtering information later causes the index to be built at least twice: once when the <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> is created, and again when any of the sort or filter properties are modified.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about filtering and sorting with <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph>, see <bpt id="p1">[</bpt>Filtering with DataView<ept id="p1">](../../../../docs/framework/data/adonet/filtering-with-dataview-linq-to-dataset.md)</ept> and <bpt id="p2">[</bpt>Sorting with DataView<ept id="p2">](../../../../docs/framework/data/adonet/sorting-with-dataview-linq-to-dataset.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you want to return the results of a particular query on the data, as opposed to providing a dynamic view of a subset of the data, you can use the <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>, rather than setting the <ph id="ph4">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property is best used in a data-bound application where a bound control displays filtered results.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.Data.DataView.RowFilter%2A&gt;</ph> property rebuilds the index for the data, adding overhead to your application and decreasing performance.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods use the current index without requiring the index to be rebuilt.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you are going to call <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> only once, then you should use the existing <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are going to call <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> multiple times, you should create a new <ph id="ph3">&lt;xref:System.Data.DataView&gt;</ph> to rebuild the index on the column you want to search on, and then call the <ph id="ph4">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> methods, see <bpt id="p1">[</bpt>Finding Rows<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/finding-rows.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataView.Find%2A&gt;</ph> method to find a contact with the last name "Zhu".</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryOrderByFind<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvfromqueryorderbyfind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryOrderByFind<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvfromqueryorderbyfind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Data.DataView.FindRows%2A&gt;</ph> method to find all the red colored products.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryFindRows<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#ldvfromqueryfindrows)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DP DataView Samples#LDVFromQueryFindRows<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#ldvfromqueryfindrows)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>ASP.NET</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>ASP.NET has a caching mechanism that allows you to store objects that require extensive server resources to create in memory.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Caching these types of resources can significantly improve the performance of your application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Caching is implemented by the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> class, with cache instances that are private to each application.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Because creating a new <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> object can be resource intensive, you might want to use this caching functionality in Web applications so that the <ph id="ph2">&lt;xref:System.Data.DataView&gt;</ph> does not have to be rebuilt every time the Web page is refreshed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Data.DataView&gt;</ph> is cached so that the data does not have to be re-sorted when the page is refreshed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding and LINQ to DataSet<ept id="p1">](../../../../docs/framework/data/adonet/data-binding-and-linq-to-dataset.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>