<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c22b76a99c98d6515f598d8a014105537f18c27</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\how-to-migrate-managed-code-dcom-to-wcf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecc2ddcac6f5ccc60cacbb6ab431c5d935438187</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30dbda96f282bcf6809e716a86400246ebf9bc2b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Migrate Managed-Code DCOM to WCF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Migrate Managed-Code DCOM to WCF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Communication Foundation (WCF) is the recommended and secure choice over Distributed Component Object Model (DCOM) for managed code calls between servers and clients in a distributed environment.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article shows how you to migrate code from DCOM to WCF for the following scenarios.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The remote service returns an object by-value to the client</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The client sends an object by-value to the remote service</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The remote service returns an object by-reference to the client</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For security reasons, sending an object by-reference from the client to the service is not allowed in WCF.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A scenario that requires a conversation back and forth between client and server can be achieved in WCF using a duplex service.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about duplex services, see <bpt id="p1">[</bpt>Duplex Services<ept id="p1">](../../../docs/framework/wcf/feature-details/duplex-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more details about creating WCF services and clients for those services, see <bpt id="p1">[</bpt>Basic WCF Programming<ept id="p1">](../../../docs/framework/wcf/basic-wcf-programming.md)</ept>, <bpt id="p2">[</bpt>Designing and Implementing Services<ept id="p2">](../../../docs/framework/wcf/designing-and-implementing-services.md)</ept>, and <bpt id="p3">[</bpt>Building Clients<ept id="p3">](../../../docs/framework/wcf/building-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>DCOM example code</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For these scenarios, the DCOM interfaces that are illustrated using WCF have the following structure:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The service returns an object by-value</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For this scenario, you make a call to a service and it method returns an object, which is passed by-value from the server to the client.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This scenario represents the following COM call:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this scenario, the client receives a deserialized copy of an object from the remote service.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The client can interact with this local copy without calling back to the service.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In other words, the client is guaranteed the service will not be involved in any way when methods on the local copy are called.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>WCF always returns objects from the service by value, so the following steps describe creating a regular WCF service.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Step 1: Define the WCF service interface</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Define a public interface for the WCF service and mark it with the [<ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>] attribute.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Mark the methods you want to expose to clients with the [<ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>] attribute.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example shows using these attributes to identify the server-side interface and interface methods a client can call.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The method used for this scenario is shown in bold.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Step 2: Define the data contract</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Next you should create a data contract for the service, which will describe how the data will be exchanged between the service and its clients.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Classes described in the data contract should be marked with the [<ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>] attribute.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The individual properties or fields you want visible to both client and server should be marked with the [<ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph>] attribute.If you want types derived from a class in the data contract to be allowed, you must identify them with the [<ph id="ph2">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph>] attribute.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>WCF will only serialize or deserialize types in the service interface and types identified as known types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you attempt to use a type that is not a known type, an exception will occur.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about data contracts, see <bpt id="p1">[</bpt>Data Contracts<ept id="p1">](../../../docs/framework/wcf/samples/data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Step 3: Implement the WCF service</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Next, you should implement the WCF service class that implements the interface you defined in the previous step.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Step 4: Configure the service and the client</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To run a WCF service, you need to declare an endpoint that exposes that service interface at a specific URL using a specific WCF binding.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A binding specifies the transport, encoding and protocol details for the clients and server to communicate.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You typically add bindings to the service project’s configuration file (web.config).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following shows a binding entry for the example service:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Next, you need to configure the client to match the binding information specified by the service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To do so, add the following to the client’s application configuration (app.config) file.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Step 5: Run the service</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Finally, you can self-host it in a console application by adding the following lines to the service app, and starting the app.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information about other ways to host a WCF service application, <bpt id="p1">[</bpt>Hosting Services<ept id="p1">](../../../docs/framework/wcf/hosting-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Step 6: Call the service from the client</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To call the service from the client, you need to create a channel factory for the service, and request a channel, which will enable you to directly call the <ph id="ph1">`GetCustomer`</ph> method directly from the client.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The channel implements the service’s interface and handles the underlying request/reply logic for you.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The return value from that method call is the deserialized copy of the service response.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The client sends a by-value object to the server</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this scenario, the client sends an object to the server, by-value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This means that the server will receive a deserialized copy of the object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The server can call methods on that copy and be guaranteed there is no callback into client code.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As mentioned previously, normal WCF exchanges of data are by-value.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This guarantees that calling methods on one of these objects executes locally only – it will not invoke code on the client.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This scenario represents the following COM method call:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This scenario uses the same service interface and data contract as shown in the first example.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In addition, the client and service will be configured in the same way.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this example, a channel is created to send the object and run the same way.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>However, for this example, you will create a client that calls the service, passing an object by-value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The service method the client will call in the service contract is shown in bold:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Add code to the client that sends a by-value object</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following code shows how the client creates a new by-value customer object, creates a channel to communicate with the <ph id="ph1">`ICustomerManager`</ph> service, and sends the customer object to it.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The customer object will be serialized, and sent to the service, where it is deserialized by the service into a new copy of that object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Any methods the service calls on this object will execute only locally on the server.It’s important to note that this code illustrates sending a derived type (<ph id="ph1">`PremiumCustomer`</ph>).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The service contract expects a <ph id="ph1">`Customer`</ph> object, but the service data contract uses the [<ph id="ph2">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph>] attribute to indicate that <ph id="ph3">`PremiumCustomer`</ph> is also allowed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>WCF will fail attempts to serialize or deserialize any other type via this service interface.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The service returns an object by reference</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For this scenario, the client app makes a call to the remote service and the method returns an object, which is passed by reference from the service to the client.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As mentioned previously, WCF services always return object by value.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, you can achieve a similar result by using the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> is a serializable by-value object that can be used by the client to obtain a sessionful by-reference object on the server.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The behavior of the by-reference object in WCF shown in this scenario is different than DCOM.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In DCOM, the server can return a by-reference object to the client directly, and the client can call that object’s methods, which execute on the server.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In WCF, however, the object returned is always by-value.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The client must take that by-value object, represented by <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> and use it to create its own sessionful by-reference object.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The client method calls on the sessionful object execute on the server.In other words, this by-reference object in WCF is a normal WCF service that is configured to be sessionful.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In WCF, a session is a way of correlating multiple messages sent between two endpoints.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This means that once a client obtains a connection to this service, a session will be established between the client and the server.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The client will use a single unique instance of the server-side object for all its interactions within this single session.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Sessionful WCF contracts are similar to connection-oriented network request/response patterns.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This scenario is represented by the following DCOM method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Step 1: Define the Sessionful WCF service interface and implementation</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>First, define a WCF service interface that contains the sessionful object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this code, the sessionful object is marked with the <ph id="ph1">`ServiceContract`</ph> attribute, which identifies it as a regular WCF service interface.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A&gt;</ph> property is set to indicate it will be a sessionful service.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following code shows the service implementation.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The service is marked with the [ServiceBehavior] attribute, and its InstanceContextMode property set to InstanceContextMode.PerSessions to indicate that a unique instance of this type should be created for each session.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Step 2: Define the WCF factory service for the sessionful object</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The service that creates the sessionful object must be defined and implemented.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following code shows how to do this.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This code creates another WCF service that returns an <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This is a serializable form of an endpoint the can use to create the session-full object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Following is the implementation of this service.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This implementation maintains a singleton channel factory to create sessionful objects.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`GetInstanceAddress`</ph> is called, it creates a channel and creates an <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> object that points to the remote address associated with this channel.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> is a data type that can be returned to the client by-value.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Step 3: Configure and start the WCF services</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To host these services, you will need to make the following additions to the server’s configuration file (web.config).</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`&lt;client&gt;`</ph> section that describes the endpoint for the sessionful object.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In this scenario, the server also acts as a client and must be configured to enable this.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`&lt;services&gt;`</ph> section, declare service endpoints for the factory and sessionful object.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This enables the client to communicate with the service endpoints, acquire the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> and create the sessionful channel.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Following is an example configuration file with these settings:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Add the following lines to a console application, to self-host the service, and start the app.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Step 4: Configure the client and call the service</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Configure the client to communicate with the WCF services by making the following entries in the project’s application configuration file (app.config).</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To call the service, add the code to the client to do the following:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Create a channel to the <ph id="ph1">`ISessionBoundFactory`</ph> service.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Use the channel to invoke the <ph id="ph1">`ISessionBoundFactory`</ph> service an obtain an <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> bbject.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> to create a channel to obtain a sessionful object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`SetCurrentValue`</ph> and <ph id="ph2">`GetCurrentValue`</ph> methods to demonstrate it remains the same object instance is used across multiple calls.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic WCF Programming<ept id="p1">](../../../docs/framework/wcf/basic-wcf-programming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Designing and Implementing Services<ept id="p1">](../../../docs/framework/wcf/designing-and-implementing-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Building Clients<ept id="p1">](../../../docs/framework/wcf/building-clients.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Duplex Services<ept id="p1">](../../../docs/framework/wcf/feature-details/duplex-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>