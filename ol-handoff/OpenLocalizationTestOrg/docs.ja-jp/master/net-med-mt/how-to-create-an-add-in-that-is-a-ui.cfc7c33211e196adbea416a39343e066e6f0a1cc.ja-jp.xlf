<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-create-an-add-in-that-is-a-ui.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c8ae85fd222bb95e7c25fbbb7b9283d557c9936</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\how-to-create-an-add-in-that-is-a-ui.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f2ff7a58ea2a6ce38681331eb2ad3174c13e3e1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ec6f279ff185cd300eeeb44d2830081827c010d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Create an Add-In That Is a UI | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create an Add-In That Is a UI</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This example shows how to create an add-in that is a              <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph><ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> which is hosted by a              <ph id="ph3">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> standalone application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The add-in is a              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that is a              <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> user control.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The content of the user control is a single button that, when clicked, displays a message box.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> standalone application hosts the add-in              <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> as the content of the main application window.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Prerequisites<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This example highlights the              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extensions to the              <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model that enable this scenario, and assumes the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Knowledge of the                      <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model, including pipeline, add-in, and host development.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you are unfamiliar with these concepts, see                      <bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a tutorial that demonstrates the implementation of a pipeline, an add-in, and a host application, see                      <bpt id="p1">[</bpt>Walkthrough: Creating an Extensible Application<ept id="p1">](../../../../docs/framework/add-ins/walkthrough-create-extensible-app.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Knowledge of the                      <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> extensions to the                      <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model, which can be found here:                      <bpt id="p1">[</bpt>WPF Add-Ins Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-add-ins-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create an add-in that is a                      <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph><ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> requires specific code for each pipeline segment, the add-in, and the host application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Implementing the Contract Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When an add-in is a                              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, the contract for the add-in must implement                              <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the example,                              <ph id="ph1">`IWPFAddInContract`</ph> implements                              <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Implementing the Add-In View Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the add-in is implemented as a subclass of the                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> type, the add-in view must also subclass                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code shows the add-in view of the contract, implemented as the                              <ph id="ph1">`WPFAddInView`</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Here, the add-in view is derived from                              <ph id="ph1">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Consequently, the add-in                              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> should also derive from                              <ph id="ph2">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Implementing the Add-In-Side Adapter Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>While the contract is an                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, the add-in is a                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> (as specified by the add-in view pipeline segment).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Therefore, the                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> must be converted to an                              <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> before crossing the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This work is performed by the add-in-side adapter by calling                              <ph id="ph1">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the add-in model where an add-in returns a                              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> (see                              <bpt id="p1">[</bpt>Create an Add-In That Returns a UI<ept id="p1">](../../../../docs/framework/wpf/app-development/how-to-create-an-add-in-that-returns-a-ui.md)</ept>), the add-in adapter converted the                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> to an                              <ph id="ph3">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> by calling                              <ph id="ph4">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> must also be called in this model, although you need to implement a method from which to write the code to call it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You do this by overriding                              <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> and implementing the code that calls                              <ph id="ph2">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ViewToContractAdapter%2A&gt;</ph> if the code that is calling                              <ph id="ph3">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> is expecting an                              <ph id="ph4">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this case, the caller will be the host-side adapter, which is covered in a subsequent subsection.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You also need to override                                  <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> in this model to enable tabbing between host application                                  <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> and add-in                                  <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information, see "WPF Add-In Limitations" in                                  <bpt id="p1">[</bpt>WPF Add-Ins Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-add-ins-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because the add-in-side adapter implements an interface that derives from                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, you also need to implement                              <ph id="ph2">&lt;xref:System.AddIn.Contract.INativeHandleContract.GetHandle%2A&gt;</ph>, although this is ignored when                              <ph id="ph3">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> is overridden.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Implementing the Host View Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this model, the host application typically expects the host view to be a                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> subclass.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The host-side adapter must convert the                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> to a                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> after the                              <ph id="ph3">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> crosses the isolation boundary.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because a method isn't being called by the host application to get the                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, the host view must "return" the                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> by containing it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Consequently, the host view must derive from a subclass of                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> that can contain other                              <ph id="ph2">[!INCLUDE[TLA2#tla_ui#plural](../../../../includes/tla2sharptla-uisharpplural-md.md)]</ph>, such as                              <ph id="ph3">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code shows the host view of the contract, implemented as the                              <ph id="ph1">`WPFAddInHostView`</ph> class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Implementing the Host-Side Adapter Pipeline Segment</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>While the contract is an                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph>, the host application expects a                              <ph id="ph2">&lt;xref:System.Windows.Controls.UserControl&gt;</ph> (as specified by the host view).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Consequently, the                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> must be converted to a                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> after crossing the isolation boundary, before being set as content of the host view (which derives from                              <ph id="ph3">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This work is performed by the host-side adapter, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As you can see, the host-side adapter acquires the                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> by calling the add-in-side adapter's                              <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase.QueryContract%2A&gt;</ph> method (this is the point where the                              <ph id="ph3">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> crosses the isolation boundary).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The host-side adapter then converts the                              <ph id="ph1">&lt;xref:System.AddIn.Contract.INativeHandleContract&gt;</ph> to a                              <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> by calling                              <ph id="ph3">&lt;xref:System.AddIn.Pipeline.FrameworkElementAdapters.ContractToViewAdapter%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Finally, the                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is set as the content of the host view.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Implementing the Add-In</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>With the add-in-side adapter and add-in view in place, the add-in can be implemented by deriving from the add-in view, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>From this example, you can see one interesting benefit of this model: add-in developers only need to implement the add-in (since it is the                              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> as well), rather than both an add-in class and an add-in                              <ph id="ph2">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Implementing the Host Application</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>With the host-side adapter and host view created, the host application can use the                              <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model to open the pipeline and acquire a host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These steps are shown in the following code.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The host application uses typical                              <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> add-in model code to activate the add-in, which implicitly returns the host view to the host application.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The host application subsequently displays the host view (which is a                              <ph id="ph1">&lt;xref:System.Windows.Controls.UserControl&gt;</ph>) from a                              <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The code for processing interactions with the add-in                              <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> runs in the add-in's application domain.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>These interactions include the following:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Handling the                                      <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph><ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Showing the                                      <ph id="ph1">&lt;xref:System.Windows.MessageBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This activity is completely isolated from the host application.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add-ins and Extensibility<ept id="p1">](../../../../docs/framework/add-ins/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Add-Ins Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-add-ins-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>