<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="troubleshooting-queued-messaging.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a0d9582ea0291b4b43ae0a91704d5d370a19080</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\troubleshooting-queued-messaging.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a82c6f660b3e7f3cb3c1e885db0d9186ae26c0a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">915a0c4954f7e73c669312b18b1fc1412ac98d96</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Troubleshooting Queued Messaging | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Troubleshooting Queued Messaging</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This section contains common questions and troubleshooting help for using queues in <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Common Questions</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> I used <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Beta 1 and I installed the MSMQ hotfix.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Do I need to remove the hotfix?</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Yes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This hotfix is no longer supported.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> now works on MSMQ without a hotfix requirement.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> There are two bindings for MSMQ: <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>What should I use and when?</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Use the <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph> when you want to use MSMQ as a transport for queued communication between two <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding&gt;</ph> when you want to use existing MSMQ applications to communicate with new <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> Do I have to upgrade MSMQ to use the <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph> and <ph id="ph2">`MsmqIntegration`</ph> bindings?</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> No.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Both bindings work with MSMQ 3.0 on <ph id="ph1">[!INCLUDE[wxp](../../../../includes/wxp-md.md)]</ph> and <ph id="ph2">[!INCLUDE[ws2003](../../../../includes/ws2003-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Certain features of the bindings become available when you upgrade to MSMQ 4.0 in <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> What features of the <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqIntegrationBinding&gt;</ph> bindings are available in MSMQ 4.0 but not in MSMQ 3.0?</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> The following features are available in MSMQ 4.0 but not in MSMQ 3.0:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Custom dead-letter queue is supported only on MSMQ 4.0.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>MSMQ 3.0 and 4.0 handle poison messages differently.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Only MSMQ 4.0 supports remote transacted read.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Differences in Queuing Features in Windows Vista, Windows Server 2003, and Windows XP<ept id="p1">](../../../../docs/framework/wcf/feature-details/diff-in-queue-in-vista-server-2003-windows-xp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> Can I use MSMQ 3.0 on one side of a queued communication and MSMQ 4.0 on the other side?</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Yes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> I want to integrate existing MSMQ applications with new <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> clients or servers.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Do I need to upgrade both sides of my MSMQ infrastructure?</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> No.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You do not have to upgrade to MSMQ 4.0 on either side.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This section contains answers to most common troubleshooting issues.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Some issues that are known limitations are also described in the release notes.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> I am trying to use a private queue and I get the following exception: <ph id="ph1">`System.InvalidOperationException`</ph>: The URL is invalid.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The URL for the queue cannot contain the '$' character.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use the syntax in net.msmq://machine/private/queueName to address a private queue.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Please check the queue Uniform Resource Identifier (URI) in your configuration and code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Do not use the "$" character in the URI.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, to address a private queue named OrdersQueue, specify the URI as net.msmq://localhost/private/ordersQueue.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> Calling <ph id="ph1">`ServiceHost.Open()`</ph> on my queued application throws the following exception: <ph id="ph2">`System.ArgumentException`</ph>: A base address cannot contain a URI query string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Check the queue URI in your configuration file and in your code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>While MSMQ queues support the use of the '?' character, URIs interpret this character as the beginning of a string query.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To avoid this issue, use queue names that do not contain '?' characters.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> My send succeeded but no service operation is invoked on the receiver.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> To determine the answer, work through the following check list:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Check that the transactional queue requirements are compatible with the assurances specified.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note the following principles:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can send durable messages (datagrams and sessions) with "exactly once" assurances (<ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>) only to a transactional queue.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can send sessions only with "exactly once" assurances.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A transaction is required to receive messages in a session from a transactional queue.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can send or receive volatile or durable messages (datagrams only) with no assurances (<ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph>) only to a non-transactional queue.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Check the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you find the messages there, determine why they were not delivered.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Check the outgoing queues for connectivity or addressing problems.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> I have specified a custom dead-letter queue, but when I start the sender application, I get an exception that either the dead-letter queue is not found, or the sending application has no permission to the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Why is this happening?</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> The custom dead-letter queue URI must include a "localhost" or the computer name in the first segment, for example, net.msmq://localhost/private/myAppdead-letter queue.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> Is it always necessary to define a custom dead-letter queue, or is there a default dead-letter queue?</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> If assurances are "exactly once" (<ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`true`</ph>), and if you do not specify a custom dead-letter queue, the default is a system-wide transactional dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If assurances are none (<ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">`false`</ph>), then the default is no dead-letter queue functionality.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> My service throws on SvcHost.Open with a message "EndpointListener requirements cannot be met by the ListenerFactory".</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Check your service contract.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You may have forgotten to put "IsOneWay=<ph id="ph1">`true`</ph>" on all the service operations.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Queues support only one-way service operations.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> There are messages in the queue but no service operation is invoked.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>What is the problem?</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Determine if your service host is faulted.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You can check by looking at the trace or implementing <ph id="ph1">`IErrorHandler`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Service host faults, by default, if a poison message is detected.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> There are messages in the queue but my Web-hosted queued service is not getting activated.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> The most common reason is permissions.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Ensure that the <ph id="ph1">`NetMsmqActivator`</ph> process is running and the identity of the <ph id="ph2">`NetMsmqActivator`</ph> process is given read and seek permission on the queue.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`NetMsmqActivator`</ph> is monitoring queues on a remote machine, ensure that <ph id="ph2">`NetMsmqActivator`</ph> does not run under a restricted token.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To run the <ph id="ph1">`NetMsmqActivator`</ph> with an unrestricted token:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For non-security related Web host issues refer to: <bpt id="p1">[</bpt>Web Hosting a Queued Application<ept id="p1">](../../../../docs/framework/wcf/feature-details/web-hosting-a-queued-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> What is the easiest way to access sessions?</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Set AutoComplete=<ph id="ph1">`true`</ph> on the operation that corresponds to the last message in the session, and set AutoComplete=<ph id="ph2">`false`</ph> on all remaining service operations.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> Where can I find answers to common questions on MSMQ?</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> MSMQ, see <bpt id="p2">[</bpt>Microsoft Message Queuing<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=87810)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> Why does my service throw a <ph id="ph1">`ProtocolException`</ph> when reading from a queue that contains both queued session messages and queued datagram messages?</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> There is a fundamental difference in the way queued session messages and queued datagram messages are composed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Because of this, a service that is expecting to read a queued session message cannot receive a queued datagram message and a service expecting to read a queued datagram message cannot receive a session message.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Attempting to read both types of messages from the same queue throws the following exception:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The system dead-letter queue, as well as any custom dead-letter queue, is particularly susceptible to this issue if an application sends both queued session messages and queued datagram messages from the same computer.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If a message cannot be sent successfully, it is moved to the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Under these circumstances, it is possible to have both session and datagram messages in the dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>There is no way to separate both types of messages at runtime when reading from a queue, therefore, applications should not send both queued session messages and queued datagram messages from the same computer.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>MSMQ Integration: Specific Troubleshooting</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When I send a message, or when I open the service host, I get an error that indicates the scheme is wrong.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> When you use the MSMQ integration binding, you must use the msmq.formatname scheme.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For example, msmq.formatname:DIRECT=OS:.\private$\OrdersQueue.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>But when you specify the custom dead-letter queue, you must use the net.msmq scheme.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When I use a public or private format name and open the service host on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>, I get an error.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> integration channel on <ph id="ph2">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> checks to see if a sub-queue can be opened for the main application queue for handling poison messages.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The sub-queue name is derived from an msmq.formatname URI passed to the listener.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The sub-queue name in MSMQ can only be a direct format name.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>So you see the error.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Change the queue URI to a direct format name.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When receiving a message from an MSMQ application, the message sits in the queue and is not read by the receiving <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Check to see whether the message has a body.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If the message has no body, the MSMQ integration channel ignores the message.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Implement <ph id="ph1">`IErrorHandler`</ph> to be notified of exceptions and check the traces.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Security-Related Troubleshooting</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When I run the sample that uses a default binding in workgroup mode, messages seem to get sent but are never received by the receiver.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> By default, messages are signed using an MSMQ internal certificate that requires the Active Directory directory service.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In workgroup mode, because Active Directory is not available, signing the message fails.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>So the message lands in the dead-letter queue and failure cause, such as "Bad signature", is indicated.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The workaround is to turn off security.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This is done by setting <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqSecurity.Mode%2A&gt;</ph><ph id="ph2"> = </ph><ph id="ph3">&lt;xref:System.ServiceModel.NetMsmqSecurityMode&gt;</ph> to make it work in workgroup mode.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Another workaround is to get the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqTransportSecurity&gt;</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.NetMsmqSecurity.Transport%2A&gt;</ph> property and set it to <ph id="ph3">&lt;xref:System.ServiceModel.MsmqAuthenticationMode&gt;</ph>, and set the client certificate.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Yet another workaround is to install MSMQ with Active Directory integration.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When I send a message with default binding (transport security turned on) in Active Directory to a queue, I get an "internal certificate not found" message.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>How do I fix this?</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> This means that the certificate in Active Directory for the sender must be renewed.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To do so, open <bpt id="p1">**</bpt>Control Panel<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Administrative Tools<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Computer Management<ept id="p3">**</ept>, right-click <bpt id="p4">**</bpt>MSMQ<ept id="p4">**</ept>, and select <bpt id="p5">**</bpt>Properties<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>User Certificate<ept id="p1">**</ept> tab and click the <bpt id="p2">**</bpt>Renew<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When I send a message using <ph id="ph1">&lt;xref:System.ServiceModel.MsmqAuthenticationMode&gt;</ph> and specify the certificate to use, I get an "Invalid certificate" message.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>How do I fix this?</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> You cannot use a local machine certificate store with certificate mode.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>You have to copy the certificate from the machine certificate store to the current user store using the Certificate snap-in.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To get the Certificate snap-in:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Start<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Run<ept id="p2">**</ept>, type <ph id="ph1">`mmc`</ph>, and click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Microsoft Management Console<ept id="p1">**</ept>, open the <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu and select <bpt id="p3">**</bpt>Add/Remove Snap-in<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add/Remove Snap-in<ept id="p1">**</ept> dialog box, click the <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Standalone Snap-in<ept id="p1">**</ept> dialog box, select Certificates and click <bpt id="p2">**</bpt>Add<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Certificates<ept id="p1">**</ept> snap-in dialog box, select <bpt id="p2">**</bpt>My user account,<ept id="p2">**</ept> and click <bpt id="p3">**</bpt>Finish<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Next, add a second Certificates snap-in using the previous steps, but this time select <bpt id="p1">**</bpt>Computer account<ept id="p1">**</ept> and click <bpt id="p2">**</bpt>Next<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Local Computer<ept id="p1">**</ept> and click <bpt id="p2">**</bpt>Finish<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You can now drag and drop certificates from the machine certificate store to the current user store.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When my service reads from a queue on another computer in workgroup mode, I get an "access denied" exception.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> In workgroup mode, for a remote application to gain access to the queue, the application must have permission to access the queue.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Add "Anonymous login" to the queue's access control list (ACL) and give it read permission.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When a network service client (or any client that does not have a domain account) sends a queued message, the send fails with an invalid certificate.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>How do I fix this?</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Check the binding configuration.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The default binding has MSMQ transport security turned on to sign the message.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Turn it off.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Remote Transacted Receives</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When I have a queue on machine A, and a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service that reads messages from a queue on machine B (the remote transacted receive scenario), messages are not read from the queue.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Tracing information indicates the receive failed with the message "Transaction cannot be imported."</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>What can I do to fix this?</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> There are three possible reasons for this:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If you are in domain mode, remote transacted receive requires Microsoft Distributed Transaction Coordinator (MSDTC) network access.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can enable this using <bpt id="p1">**</bpt>Add/Remove Components<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Enabling network DTC access<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wcf/feature-details/media/applicationserveraddcomps.jpg "</bpt>ApplicationServerAddComps<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Check the authentication mode for communicating with the transaction manager.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If you are in workgroup mode, "No Authentication Required" must be selected.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If you are in domain mode, then "Mutual Authentication Required" must be selected.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Enabling XA transactions<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wcf/feature-details/media/4f3695e0-fb0b-4c5b-afac-75f8860d2bb0.jpg "</bpt>4f3695e0-fb0b-4c5b-afac-75f8860d2bb0<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Make sure that MSDTC is in the list of exceptions in the <bpt id="p1">**</bpt>Internet Connection Firewall<ept id="p1">**</ept> settings.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Ensure that you are using <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>MSMQ on <ph id="ph1">[!INCLUDE[wv](../../../../includes/wv-md.md)]</ph> supports remote transacted read.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>MSMQ on earlier Windows releases does not support remote transacted read.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> When the service reading from the queue is a network service, for example, in a Web host, why do I get an access-denied exception is raised when reading from the queue?</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Network service read access must be added to the queue ACL to ensure that a network service can read from the queue.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Q:<ept id="p1">**</ept> Can I use the MSMQ activation service to activate applications based on messages in a queue on a remote machine?</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A:<ept id="p1">**</ept> Yes.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>To do this, you must configure the MSMQ activation service to run as a network service, and add network service access to the queue on the remote machine.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Using Custom MSMQ Bindings with ReceiveContext Enabled</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>When using a custom MSMQ binding with <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ReceiveContext&gt;</ph> enabled processing an incoming message will use a thread pool thread because native MSMQ does not support I/O completion for asynchronous <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ReceiveContext&gt;</ph> receives.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>This is because processing such a message uses internal transactions for <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ReceiveContext&gt;</ph> and MSMQ does not support asynchronous processing.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>To work around this issue you can add a <ph id="ph1">&lt;xref:System.ServiceModel.Description.SynchronousReceiveBehavior&gt;</ph> to the endpoint to force synchronous processing or set <ph id="ph2">&lt;xref:System.ServiceModel.Description.DispatcherSynchronizationBehavior.MaxPendingReceives%2A&gt;</ph> to 1.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>