<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7a0a97f86608d35e437a9e925847ce587949988</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\transactions\writing-a-transactional-application.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a575d9cd01bc8dbf36707e6de8412241117f7354</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53d9cf2f59b4be038a0ba39d4ec3a5d26581e230</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Writing a Transactional Application | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing a Transactional Application</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As a transactional application programmer, you can take advantage of the two programming models provided by the <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> namespace to create a transaction.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can utilize the explicit programming model by using the <ph id="ph1">&lt;xref:System.Transactions.Transaction&gt;</ph> class, or the implicit programming model in which transactions are automatically managed by the infrastructure, by using the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class..</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It is recommended that you use the implicit transaction model for development.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can find more information on how to use a transaction scope in the <bpt id="p1">[</bpt>Implementing an Implicit Transaction using Transaction Scope<ept id="p1">](../../../../docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Both models support committing a transaction when the program reaches a consistent state.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the commit succeeds, the transaction is durably committed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the commit fails, the transaction aborts.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the application program cannot successfully complete the transaction, it attempts to abort and undo the transaction's effects.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creating a Transaction</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> namespace provides two models for creating a transaction.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These models are covered in the following topics.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing an Implicit Transaction using Transaction Scope<ept id="p1">](../../../../docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Describes how the <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> namespace supports creating implicit transactions using the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing an Explicit Transaction using CommittableTransaction<ept id="p1">](../../../../docs/framework/data/transactions/implementing-an-explicit-transaction-using-committabletransaction.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Describes how the <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> namespace supports creating explicit transactions using the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Escalating Transaction Management</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When a transaction needs to access a resource in another application domain, or if you want to enlist in another durable resource manager, the transaction is automatically escalated to be managed by the MSDTC.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Transaction escalation is covered in the <bpt id="p1">[</bpt>Transaction Management Escalation<ept id="p1">](../../../../docs/framework/data/transactions/transaction-management-escalation.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Concurrency</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The topic <bpt id="p1">[</bpt>Managing Concurrency with DependentTransaction<ept id="p1">](../../../../docs/framework/data/transactions/managing-concurrency-with-dependenttransaction.md)</ept> demonstrates how concurrency can be achieved between asynchronous tasks by using the <ph id="ph1">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>COM+ Interop</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The topic <bpt id="p1">[</bpt>Interoperability with Enterprise Services and COM+ Transactions<ept id="p1">](../../../../docs/framework/data/transactions/interoperability-with-enterprise-services-and-com-transactions.md)</ept> illustrates how you can make your distributed transactions interact with COM+ transactions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Diagnostics</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Diagnostic Traces<ept id="p1">](../../../../docs/framework/data/transactions/diagnostic-traces.md)</ept> describes how you can use the trace codes that are generated by the <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> infrastructure to troubleshoot errors in your applications.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Working within ASP.NET</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Using System.Transactions in ASP.NET<ept id="p1">](../../../../docs/framework/data/transactions/using-system-transactions-in-aspnet.md)</ept> topic describes how you can successfully use <ph id="ph1">&lt;xref:System.Transactions&gt;</ph> inside an ASP.NET application.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>