<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cdefeffd2dcf0b01752cf6412682a307afa0dd0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\token-authenticator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0050c2e1dedf8cf5e3637766e59781d61140906c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71d3cd98fab3593f913b1b6f46cd57e0142fe0f3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Token Authenticator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Token Authenticator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to implement a custom token authenticator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A token authenticator in <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> is used for validating the token used with the message, verifying that it is self-consistent, and authenticating the identity associated with the token.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Custom token authenticators are useful in a variety of cases, such as:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you want to override the default authentication mechanism associated with a token.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you are building a custom token.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This sample demonstrates the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>How a client can authenticate using a username/password pair.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>How the server can validate the client credentials using a custom token authenticator.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>How the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service code ties in with the custom token authenticator.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>How the server can be authenticated using the server's X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This sample also shows how the caller's identity is accessible from <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> after the custom token authentication process.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The service exposes a single endpoint for communicating with the service, defined using the App.config configuration file.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The endpoint consists of an address, a binding, and a contract.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The binding is configured with a standard <ph id="ph1">`wsHttpBinding`</ph>, with the security mode set to message - the default mode of the <ph id="ph2">`wsHttpBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This sample sets the standard <ph id="ph1">`wsHttpBinding`</ph> to use client username authentication.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The service also configures the service certificate using <ph id="ph1">`serviceCredentials`</ph> behavior.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`securityCredentials`</ph> behavior allows you to specify a service certificate.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A service certificate is used by a client to authenticate the service and provide message protection.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following configuration references the localhost certificate installed during the sample setup as described in the following setup instructions.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The client endpoint configuration consists of a configuration name, an absolute address for the service endpoint, the binding, and the contract.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The client binding is configured with the appropriate <ph id="ph1">`Mode`</ph> and <ph id="ph2">`clientCredentialType`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The client implementation sets the user name and password to use.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Custom Token Authenticator</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use the following steps to create a custom token authenticator:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Write a custom token authenticator.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The sample implements a custom token authenticator that validates that the username has a valid email format.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It derives the <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The most important method in this class is <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore%28System.String%2CSystem.String%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this method, the authenticator validates the format of the username and also that the host name is not from a rogue domain.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If both conditions are met, then it returns a read-only collection of <ph id="ph1">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> instances that is then used to provide claims that represent the information stored inside the username token.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Provide an authorization policy that is returned by custom token authenticator.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This sample provides its own implementation of <ph id="ph1">&lt;xref:System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ph> called <ph id="ph2">`UnconditionalPolicy`</ph> that returns set of claims and identities that were passed to it in its constructor.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Write a custom security token manager.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.SecurityTokenManager&gt;</ph> is used to create a <ph id="ph2">&lt;xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator&gt;</ph> for specific <ph id="ph3">&lt;xref:System.IdentityModel.Selectors.SecurityTokenRequirement&gt;</ph> objects that are passed to it in the <ph id="ph4">`CreateSecurityTokenAuthenticator`</ph> method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The security token manager is also used to create token providers and token serializers, but those are not covered by this sample.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In this sample, the custom security token manager inherits from <ph id="ph1">&lt;xref:System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager&gt;</ph> class and overrides the <ph id="ph2">`CreateSecurityTokenAuthenticator`</ph> method to return custom username token authenticator when the passed token requirements indicate that username authenticator is requested.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Write a custom service credential.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The service credentials class is used to represent the credentials that are configured for the service and creates a security token manager that is used to obtain token authenticators, token providers and token serializers.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Configure the service to use the custom service credential.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In order for the service to use the custom service credential, we delete the default service credential class after capturing the service certificate that is already preconfigured in the default service credential, and configure the new service credential instance to use the preconfigured service certificates and add this new service credential instance to service behaviors.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To display the caller's information, you can use the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceSecurityContext.PrimaryIdentity%2A&gt;</ph> as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ServiceSecurityContext.Current%2A&gt;</ph> contains claims information about the current caller.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When you run the sample, the operation requests and responses are displayed in the client console window.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Press ENTER in the client window to shut down the client.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Setup Batch File</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The Setup.bat batch file included with this sample allows you to configure the server with relevant certificates to run a self-hosted application that requires server certificate based security.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This batch file must be modified to work across computers or to work in a non-hosted case.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following provides a brief overview of the different sections of the batch files so that they can be modified to run in appropriate configuration.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Creating the server certificate.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following lines from the Setup.bat batch file create the server certificate to be used.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`%SERVER_NAME%`</ph> variable specifies the server name.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Change this variable to specify your own server name.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The default in this batch file is localhost.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Installing the server certificate into client's trusted certificate store.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following lines in the Setup.bat batch file copy the server certificate into the client trusted people store.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This step is required because certificates generated by Makecert.exe are not implicitly trusted by the client system.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you already have a certificate that is rooted in a client trusted root certificate—for example, a Microsoft issued certificate—this step of populating the client certificate store with the server certificate is not required.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The setup batch file is designed to be run from a Windows SDK Command Prompt.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It requires that the MSSDK environment variable point to the directory where the SDK is installed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This environment variable is automatically set within a Windows SDK Command Prompt.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To set up and build the sample</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To build the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To run the sample on the same computer</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Run Setup.bat from the sample installation folder inside a <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> command prompt opened with administrator privileges.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This installs all the certificates required for running the sample.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The Setup.bat batch file is designed to be run from a <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> Command Prompt.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The PATH environment variable set within the <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> Command Prompt points to the directory that contains executables required by the Setup.bat script.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Launch service.exe from service\bin.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Launch client.exe from \client\bin.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Client activity is displayed on the client console application.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the client and service are not able to communicate, see <bpt id="p1">[</bpt>Troubleshooting Tips<ept id="p1">](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To run the sample across computers</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Create a directory on the service computer for the service binaries.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Copy the service program files to the service directory on the service computer.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Also copy the Setup.bat and Cleanup.bat files to the service computer.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You must have a server certificate with the subject name that contains the fully-qualified domain name of the computer.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The service App.config file must be updated to reflect this new certificate name.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can create one by using the Setup.bat if you set the <ph id="ph1">`%SERVER_NAME%`</ph> variable to fully-qualified host name of the computer on which the service will run.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Note that the setup.bat file must be run from a Visual Studio command prompt opened with administrator privileges.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Copy the server certificate into the CurrentUser-TrustedPeople store of the client.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You do not need to do this except when the server certificate is issued by a client trusted issuer.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the App.config file on the service computer, change the value of the base address to specify a fully-qualified computer name instead of localhost.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>On the service computer, run service.exe from a command prompt.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Copy the client program files from the \client\bin\ folder, under the language-specific folder, to the client computer.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the Client.exe.config file on the client computer, change the address value of the endpoint to match the new address of your service.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>On the client computer, launch Client.exe from a command prompt.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If the client and service are not able to communicate, see <bpt id="p1">[</bpt>Troubleshooting Tips<ept id="p1">](http://msdn.microsoft.com/en-us/8787c877-5e96-42da-8214-fa737a38f10b)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>To clean up after the sample</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Run Cleanup.bat in the samples folder once you have finished running the sample.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>