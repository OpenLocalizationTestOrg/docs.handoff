<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="wpf-application-resource-content-and-data-files.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ed6f64dd36efd4d608fa4e83ea3b2fdf15ceb40</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\wpf-application-resource-content-and-data-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef0ae9509a09593ab47af398817ed9d4c09deb71</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3de976809767ad75f101b6be65cba600a64343a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>WPF Application Resource, Content, and Data Files | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WPF Application Resource, Content, and Data Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)]</ph> applications              often depend on files that contain non-executable data, such as              <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>, images, video, and audio.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> offers special support for configuring, identifying, and using these types of data files, which are called application data files.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This support revolves around a specific set of application data file types, including:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resource Files<ept id="p1">**</ept>: Data files that are compiled into either an executable or library                      <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Content Files<ept id="p1">**</ept>: Standalone data files that have an explicit association with an executable                      <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Site of Origin Files<ept id="p1">**</ept>: Standalone data files that have no association with an executable                      <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> assembly.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One important distinction to make between these three types of files is that resource files and content files are known at build time; an assembly has explicit knowledge of them.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For site of origin files, however, an assembly may have no knowledge of them at all, or implicit knowledge through a pack              <ph id="ph1">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> reference; the case of the latter, there is no guarantee that the referenced site of origin file actually exists.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To reference application data files,              <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> uses the Pack              <ph id="ph2">[!INCLUDE[TLA#tla_uri](../../../../includes/tlasharptla-uri-md.md)]</ph> Scheme, which is described in detail in              <bpt id="p1">[</bpt>Pack URIs in WPF<ept id="p1">](../../../../docs/framework/wpf/app-development/pack-uris-in-wpf.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This topic describes how to configure and use application data files.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Resource Files</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If an application data file must always be available to an application, the only way to guarantee availability is to compile it into an application's main executable assembly or one of its referenced assemblies.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This type of application data file is known as a                  <bpt id="p1">*</bpt>resource file<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You should use resource files when:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You don't need to update the resource file's content after it is compiled into an assembly.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You want to simplify application distribution complexity by reducing the number of file dependencies.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Your application data file needs to be localizable (see                          <bpt id="p1">[</bpt>WPF Globalization and Localization Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The                      resource files described in this section are different than the resource files described in                      <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept> and different than the embedded or linked resources described in                      <bpt id="p2">[</bpt>Managing Application Resources (.NET)<ept id="p2">](http://msdn.microsoft.com/library/f2582734-8ada-4baa-8a7c-e2ef943ddf7e)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Configuring Resource Files</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, a resource file is a file that is included in an                          <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> project as a                          <ph id="ph3">`Resource`</ph> item.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In                              <ph id="ph1">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>, you create a resource file by adding a file to a project and setting its                              <ph id="ph2">`Build Action`</ph> to                              <ph id="ph3">`Resource`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When the project is built,                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> compiles the resource into the assembly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using Resource Files</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To load a resource file, you can call the                          <ph id="ph1">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> method of the                          <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class, passing a pack                          <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies the desired resource file.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> returns a                          <ph id="ph2">&lt;xref:System.Windows.Resources.StreamResourceInfo&gt;</ph> object, which exposes the resource file as a                          <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> and describes its content type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As an example, the following code shows how to use                          <ph id="ph1">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> to load a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> resource file and set it as the content of a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (                         <ph id="ph4">`pageFrame`</ph>):</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>While calling                          <ph id="ph1">&lt;xref:System.Windows.Application.GetResourceStream%2A&gt;</ph> gives you access to the                          <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Instead, you can let                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> take care of opening and converting the                          <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> by loading a resource file directly into the property of a type using code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example shows how to load a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> directly into a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (                         <ph id="ph3">`pageFrame`</ph>) using code.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example is the markup equivalent of the preceding example.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Application Code Files as Resource Files</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A special set of                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application code files can be referenced using pack                          <ph id="ph2">[!INCLUDE[TLA2#tla_uri#plural](../../../../includes/tla2sharptla-urisharpplural-md.md)]</ph>, including windows, pages, flow documents, and resource dictionaries.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, you can set the                          <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A?displayProperty=fullName&gt;</ph> property with a pack                          <ph id="ph2">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that references the window or page that you would like to load when an application starts.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can do this when a                          <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file is included in an                          <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> project as a                          <ph id="ph3">`Page`</ph> item.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In                              <ph id="ph1">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, you add a new                              <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>,                              <ph id="ph3">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>,                              <ph id="ph4">&lt;xref:System.Windows.Controls.Page&gt;</ph>,                              <ph id="ph5">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>, or                              <ph id="ph6">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> to a project, the                              <ph id="ph7">`Build Action`</ph> for the markup file will default to                              <ph id="ph8">`Page`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When a project with                          <ph id="ph1">`Page`</ph> items is compiled, the                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> items are converted to binary format and compiled into the associated assembly.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Consequently, these files can be used in the same way as typical resource files.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a                              <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file is configured as a                              <ph id="ph2">`Resource`</ph> item, and does not have a code-behind file, the raw                              <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> is compiled into an assembly rather than a binary version of the raw                              <ph id="ph4">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Content Files</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A                  <bpt id="p1">*</bpt>content file<ept id="p1">*</ept> is distributed as a loose file alongside an executable assembly.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Although they are not compiled into an assembly, assemblies are compiled with metadata that establishes an association with each content file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You should use content files when your application requires a specific set of application data files that you want to be able to update without recompiling the assembly that consumes them.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Configuring Content Files</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To add a content file to a project, an application data file must be included as a                          <ph id="ph1">`Content`</ph> item.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Furthermore, because a content file is not compiled directly into the assembly, you need to set the                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph2">`CopyToOutputDirectory`</ph> metadata element to specify that the content file is copied to a location that is relative to the built assembly.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you want the resource to be copied to the build output folder every time a project is built, you set the                          <ph id="ph1">`CopyToOutputDirectory`</ph> metadata element with the                          <ph id="ph2">`Always`</ph> value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Otherwise, you can ensure that only the newest version of the resource is copied to the build output folder by using the                          <ph id="ph1">`PreserveNewest`</ph> value.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following shows a file that is configured as a content file which is copied to the build output folder only when a new version of the resource is added to the project.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In                              <ph id="ph1">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, you create a content file by adding a file to a project and setting its                              <ph id="ph2">`Build Action`</ph> to                              <ph id="ph3">`Content`</ph>, and set its                              <ph id="ph4">`Copy to Output Directory`</ph> to                              <ph id="ph5">`Copy always`</ph> (same as                              <ph id="ph6">`Always`</ph>) and                              <ph id="ph7">`Copy if newer`</ph> (same as                              <ph id="ph8">`PreserveNewest`</ph>).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When the project is built, an                          <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> attribute is compiled into the metadata of the assembly for each content file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The value of the                          <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> implies the path to the content file relative to its position in the project.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, if a content file was located in a project subfolder, the additional path information would be incorporated into the                          <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph> value is also the value of the path to the content file in the build output folder.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using Content Files</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To load a content file, you can call the                          <ph id="ph1">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> method of the                          <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class, passing a pack                          <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies the desired content file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> returns a                          <ph id="ph2">&lt;xref:System.Windows.Resources.StreamResourceInfo&gt;</ph> object, which exposes the content file as a                          <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> and describes its content type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>As an example, the following code shows how to use                          <ph id="ph1">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> to load a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> content file and set it as the content of a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (                         <ph id="ph4">`pageFrame`</ph>).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>While calling                          <ph id="ph1">&lt;xref:System.Windows.Application.GetContentStream%2A&gt;</ph> gives you access to the                          <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Instead, you can let                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> take care of opening and converting the                          <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> by loading a resource file directly into the property of a type using code.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example shows how to load a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> directly into a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (                         <ph id="ph3">`pageFrame`</ph>) using code.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following example is the markup equivalent of the preceding example.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Site of Origin Files</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Resource files have an explicit relationship with the assemblies that they are distributed alongside, as defined by the                  <ph id="ph1">&lt;xref:System.Windows.Resources.AssemblyAssociatedContentFileAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>But, there are times when you may want to establish either an implicit or non-existent relationship between an assembly and an application data file, including when:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A file doesn't exist when at compile time.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You don't know what files your assembly will require until run time.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You want to be able to update files without recompiling the assembly that they are associated with.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Your application uses large data files, such as audio and video, and you only want users to download them if they choose to.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It is possible to load these types of files by using traditional                  <ph id="ph1">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> schemes, such as the file:/// and http:// schemes.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>However, the file:/// and http:// schemes require your application to have full trust.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If your application is a                  <ph id="ph1">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph> that was launched from the Internet or intranet, and it requests only the set of permissions that are allowed for applications launched from those locations, loose files can only be loaded from the application's site of origin (launch location).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Such files are known as                  <bpt id="p1">*</bpt>site of origin<ept id="p1">*</ept> files.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Site of origin files are the only option for partial trust applications, although are not limited to partial trust applications.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Full trust applications may still need to load application data files that they do not know about at build time; while full trust applications could use file:///, it is likely that the application data files will be installed in the same folder as, or a subfolder of, the application assembly.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In this case, using site of origin referencing is easier than using file:///, because using file:/// requires you to work out the full path the file.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Site of origin files are not cached with an                      <ph id="ph1">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph> on a client machine, while content files are.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Consequently, they are only downloaded when specifically requested.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If an                      <ph id="ph1">[!INCLUDE[TLA#tla_xbap](../../../../includes/tlasharptla-xbap-md.md)]</ph> application has large media files, configuring them as site of origin files means the initial application launch is much faster, and the files are only downloaded on demand.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Configuring Site of Origin Files</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If your site of origin files are non-existent or unknown at compile time, you need to use traditional deployment mechanisms for ensuring the required files are available at run time, including using either the                          <ph id="ph1">`XCopy`</ph> command-line program or the                          <ph id="ph2">[!INCLUDE[TLA#tla_wininstall](../../../../includes/tlasharptla-wininstall-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>If you do know at compile time the files that you would like to be located at the site of origin, but still want to avoid an explicit dependency, you can add those files to an                          <ph id="ph1">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> project as                          <ph id="ph2">`None`</ph> item.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>As with content files, you need to set the                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph2">`CopyToOutputDirectory`</ph> attribute to specify that the site of origin file is copied to a location that is relative to the built assembly, by specifying either the                          <ph id="ph3">`Always`</ph> value or the                          <ph id="ph4">`PreserveNewest`</ph> value.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In                              <ph id="ph1">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, you create a site of origin file by adding a file to a project and setting its                              <ph id="ph2">`Build Action`</ph> to                              <ph id="ph3">`None`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When the project is built,                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> copies the specified files to the build output folder.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Using Site of Origin Files</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To load a site of origin file, you can call the                          <ph id="ph1">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> method of the                          <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class, passing a pack                          <ph id="ph3">[!INCLUDE[TLA2#tla_uri](../../../../includes/tla2sharptla-uri-md.md)]</ph> that identifies the desired site of origin file.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> returns a                          <ph id="ph2">&lt;xref:System.Windows.Resources.StreamResourceInfo&gt;</ph> object, which exposes the site of origin file as a                          <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> and describes its content type.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As an example, the following code shows how to use                          <ph id="ph1">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> to load a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph> site of origin file and set it as the content of a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (                         <ph id="ph4">`pageFrame`</ph>).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>While calling                          <ph id="ph1">&lt;xref:System.Windows.Application.GetRemoteStream%2A&gt;</ph> gives you access to the                          <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>, you need to perform the additional work of converting it to the type of the property that you'll be setting it with.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Instead, you can let                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> take care of opening and converting the                          <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> by loading a resource file directly into the property of a type using code.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following example shows how to load a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Page&gt;</ph> directly into a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Frame&gt;</ph> (                         <ph id="ph3">`pageFrame`</ph>) using code.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following example is the markup equivalent of the preceding example.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Rebuilding After Changing Build Type</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>After you change the build type of an application data file, you need to rebuild the entire application to ensure those changes are applied.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If you only build the application, the changes are not applied.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pack URIs in WPF<ept id="p1">](../../../../docs/framework/wpf/app-development/pack-uris-in-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>