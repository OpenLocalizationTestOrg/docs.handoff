<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="defining-and-specifying-faults.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29cd22dba1a75ccc599ddba917d9719c81dbd6af</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\defining-and-specifying-faults.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17ea7d6b99293194adcd4be4a312fe6d77a67905</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bdedf062ccb69d96125c4e9e1abd382effa73121</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Defining and Specifying Faults | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Defining and Specifying Faults</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>SOAP faults convey error condition information from a service to a client and, in the duplex case, from a client to a service in an interoperable way.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic discusses when and how to define custom fault content and specify which operations can return them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> how a service, or duplex client, can send those faults and how a client or service application handles these faults, see <bpt id="p1">[</bpt>Sending and Receiving Faults<ept id="p1">](../../../docs/framework/wcf/sending-and-receiving-faults.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an overview of error handling in <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> applications, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](../../../docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Declared SOAP faults are those in which an operation has a <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName&gt;</ph> that specifies a custom SOAP fault type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Undeclared SOAP faults are those that are not specified in the contract for an operation.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic helps you identify those error conditions and create a fault contract for your service that clients can use to properly handle those error conditions when notified by custom SOAP faults.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The basic tasks are, in order:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Define the error conditions that a client of your service should know about.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Define the custom content of the SOAP faults for those error conditions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Mark your operations so that the specific SOAP faults that they throw are exposed to clients in WSDL.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Defining Error Conditions That Clients Should Know About</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>SOAP faults are publicly described messages that carry fault information for a particular operation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because they are described along with other operation messages in WSDL, clients know and, therefore, expect to handle such faults when invoking an operation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>But because <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> services are written in managed code, deciding which error conditions in managed code are to be converted into faults and returned to the client provides you the opportunity to separate error conditions and bugs in your service from the formal error conversation you have with a client.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, the following code example shows an operation that takes two integers and returns another integer.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Several exceptions can be thrown here, so when designing the fault contract, you must determine which error conditions are important for your client.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this case, the service should detect the <ph id="ph1">&lt;xref:System.DivideByZeroException?displayProperty=fullName&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the preceding example the operation can either return a custom SOAP fault that is specific to dividing by zero, a custom fault that is specific to math operations but that contains information specific to dividing by zero, multiple faults for several different error situations, or no SOAP fault at all.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Define the Content of Error Conditions</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once an error condition has been identified as one that can usefully return a custom SOAP fault, the next step is to define the contents of that fault and ensure that the content structure can be serialized.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The code example in the preceding section shows an error specific to a <ph id="ph1">`Divide`</ph> operation, but if there are other operations on the <ph id="ph2">`Calculator`</ph> service, then a single custom SOAP fault can inform the client of all calculator error conditions, <ph id="ph3">`Divide`</ph> included.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code example shows the creation of a custom SOAP fault, <ph id="ph1">`MathFault`</ph>, which can report errors made using all math operations, including <ph id="ph2">`Divide`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>While the class can specify an operation (the <ph id="ph1">`Operation`</ph> property) and a value that describes the problem (the <ph id="ph2">`ProblemType`</ph> property), the class and these properties must be serializable to be transferred to the client in a custom SOAP fault.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute?displayProperty=fullName&gt;</ph> attributes are used to make the type and its properties serializable and as interoperable as possible.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> how to ensure your data is serializable, see <bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For a list of the serialization support that <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName&gt;</ph> provides, see <bpt id="p1">[</bpt>Types Supported by the Data Contract Serializer<ept id="p1">](../../../docs/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Mark Operations to Establish the Fault Contract</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once a serializable data structure that is returned as part of a custom SOAP fault is defined, the last step is to mark your operation contract as throwing a SOAP fault of that type.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To do this, use the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName&gt;</ph> attribute and pass the type of the custom data type that you have constructed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> attribute to specify that the <ph id="ph2">`Divide`</ph> operation can return a SOAP fault of type <ph id="ph3">`MathFault`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Other math-based operations can now also specify that they can return a <ph id="ph1">`MathFault`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>An operation can specify that it returns more than one custom fault by marking that operation with more than one <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The next step, to implement the fault contract in your operation implementation, is described in the topic <bpt id="p1">[</bpt>Sending and Receiving Faults<ept id="p1">](../../../docs/framework/wcf/sending-and-receiving-faults.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>SOAP, WSDL, and Interoperability Considerations</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In some circumstances, especially when interoperating with other platforms, it may be important to control the way a fault appears in a SOAP message or the way it is described in the WSDL metadata.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> attribute has a <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Name%2A&gt;</ph> property that allows control of the WSDL fault element name that is generated in the metadata for that fault.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>According to the SOAP standard, a fault can have an <ph id="ph1">`Action`</ph>, a <ph id="ph2">`Code`</ph>, and a <ph id="ph3">`Reason`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Action`</ph> is controlled by the <ph id="ph2">&lt;xref:System.ServiceModel.FaultContractAttribute.Action%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.FaultException.Code%2A&gt;</ph> property and <ph id="ph2">&lt;xref:System.ServiceModel.FaultException.Reason%2A&gt;</ph> property are both properties of the <ph id="ph3">&lt;xref:System.ServiceModel.FaultException?displayProperty=fullName&gt;</ph> class, which is the parent class of the generic <ph id="ph4">&lt;xref:System.ServiceModel.FaultException%601?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Code`</ph> property includes a <ph id="ph2">&lt;xref:System.ServiceModel.FaultCode.SubCode%2A&gt;</ph> member.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When accessing non-services that generate faults, certain limitations exist.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> supports only faults with detail types that the schema describes and that are compatible with data contracts.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, as mentioned above, <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> does not support faults that use XML attributes in their detail types, or faults with more than one top-level element in the detail section.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](../../../docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sending and Receiving Faults<ept id="p1">](../../../docs/framework/wcf/sending-and-receiving-faults.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare Faults in Service Contracts<ept id="p1">](../../../docs/framework/wcf/how-to-declare-faults-in-service-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](../../../docs/framework/wcf/understanding-protection-level.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Set the ProtectionLevel Property<ept id="p1">](../../../docs/framework/wcf/how-to-set-the-protectionlevel-property.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>