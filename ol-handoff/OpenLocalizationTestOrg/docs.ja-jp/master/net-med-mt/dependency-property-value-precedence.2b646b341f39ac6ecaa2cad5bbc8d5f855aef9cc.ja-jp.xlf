<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dependency-property-value-precedence.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fd48fae2a865861310faf3252b3b7925f67d5d9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\dependency-property-value-precedence.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a403af9aea56639279d624f9250e89c24a8d16b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f09793bb9f0f5c408bf163e13d0906ee4eec6149</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Dependency Property Value Precedence | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dependency Property Value Precedence</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="introduction"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> This topic explains how the workings of the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> property system can affect the value of a dependency property, and describes the precedence by which aspects of the property system apply to the effective value of a property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic assumes that you understand dependency properties from the perspective of a consumer of existing dependency properties on <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> classes, and have read <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To follow the examples in this topic, you should also understand <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> and know how to write <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The WPF Property System</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> property system offers a powerful way to have the value of dependency properties be determined by a variety of factors, enabling features such as real-time property validation, late binding, and notifying related properties of changes to values for other properties.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The exact order and logic that is used to determine dependency property values is reasonably complex.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Knowing this order will help you avoid unnecessary property setting, and might also clear up confusion over exactly why some attempt to influence or anticipate a dependency property value did not end up resulting in the value you expected.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Dependency Properties Might Be "Set" in Multiple Places</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following is example <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> where the same property (<ph id="ph2">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph>) has three different "set" operations that might influence the value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Here, which color do you expect will applyâ€”red, green, or blue?</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>With the exception of animated values and coercion, local property sets are set at the highest precedence.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you set a value locally you can expect that the value will be honored, even above any styles or control templates.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Here in the example, <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> is set to Red locally.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Therefore, the style defined in this scope, even though it is an implicit style that would otherwise apply to all elements of that type in that scope, is not the highest precedence for giving the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property its value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you removed the local value of Red from that Button instance, then the style would have precedence and the button would obtain the Background value from the style.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Within the style, triggers take precedence, so the button will be blue if the mouse is over it, and green otherwise.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Dependency Property Setting Precedence List</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following is the definitive order that the property system uses when assigning the run-time values of dependency properties.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Highest precedence is listed first.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This list expands on some of the generalizations made in the <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Property system coercion.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For details on coercion, see <bpt id="p1">[</bpt>Coercion, Animation, and Base Value<ept id="p1">](#animations)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Active animations, or animations with a Hold behavior.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In order to have any practical effect, an animation of a property must be able to have precedence over the base (unanimated) value, even if that value was set locally.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Coercion, Animation, and Base Value<ept id="p1">](#animations)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Local value.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A local value might be set through the convenience of the "wrapper" property, which also equates to setting as an attribute or property element in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, or by a call to the <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> <ph id="ph3">[!INCLUDE[TLA#tla_api](../../../../includes/tlasharptla-api-md.md)]</ph> using a property of a specific instance.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you set a local value by using a binding or a resource, these each act in the precedence as if a direct value was set.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TemplatedParent template properties.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An element has a <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> if it was created as part of a template (a <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For details on when this applies, see <bpt id="p1">[</bpt>TemplatedParent<ept id="p1">](#templatedparent)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Within the template, the following precedence applies:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Triggers from the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> template.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Property sets (typically through <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> attributes) in the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> template.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implicit style.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Applies only to the <ph id="ph1">`Style`</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Style`</ph> property is filled by any style resource with a key that matches the type of that element.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>That style resource must exist either in the page or the application; lookup for an implicit style resource does not proceed into the themes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Style triggers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The triggers within styles from page or application (these styles might be either explicit or implicit styles, but not from the default styles, which have lower precedence).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Template triggers.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Any trigger from a template within a style, or a directly applied template.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Style setters.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Values from a <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> within styles from page or application.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default (theme) style.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For details on when this applies, and how theme styles relate to the templates within theme styles, see <bpt id="p1">[</bpt>Default (Theme) Styles<ept id="p1">](#themestyles)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Within a default style, the following order of precedence applies:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Active triggers in the theme style.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Setters in the theme style.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Inheritance.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A few dependency properties inherit their values from parent element to child elements, such that they need not be set specifically on each element throughout an application.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For details see <bpt id="p1">[</bpt>Property Value Inheritance<ept id="p1">](../../../../docs/framework/wpf/advanced/property-value-inheritance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default value from dependency property metadata.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Any given dependency property may have a default value as established by the property system registration of that particular property.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Also, derived classes that inherit a dependency property have the option to override that metadata (including the default value) on a per-type basis.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Dependency Property Metadata<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-metadata.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Because inheritance is checked before default value, for an inherited property, a parent element default value takes precedence over a child element.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Consequently, if an inheritable property is not set anywhere, the default value as specified on the root or parent is used instead of the child element default value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>TemplatedParent</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>TemplatedParent as a precedence item does not apply to any property of an element that you declare directly in standard application markup.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The TemplatedParent concept exists only for child items within a visual tree that come into existence through the application of the template.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the property system searches the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> template for a value, it is searching the template that created that element.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The property values from the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph> template generally act as if they were set as a local value on the child element, but this lesser precedence versus the local value exists because the templates are potentially shared.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For details, see <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.TemplatedParent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The Style Property</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The order of lookup described earlier applies to all possible dependency properties except one: the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property is unique in that it cannot itself be styled, so the precedence items 5 through 8 do not apply.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also, either animating or coercing <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> is not recommended (and animating <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> would require a custom animation class).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This leaves three ways that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property might be set:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Explicit style.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property is set directly.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In most scenarios, the style is not defined inline, but instead is referenced as a resource, by explicit key.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In this case the Style property itself acts as if it were a local value, precedence item 3.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implicit style.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property is not set directly.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> exists at some level in the resource lookup sequence (page, application) and is keyed using a resource key that matches the type the style is to be applied to.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property itself acts by a precedence identified in the sequence as item 5.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This condition can be detected by using <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyHelper&gt;</ph> against the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property and looking for <ph id="ph3">&lt;xref:System.Windows.BaseValueSource&gt;</ph> in the results.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Default style<ept id="p1">**</ept>, also known as <bpt id="p2">**</bpt>theme style.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property is not set directly, and in fact will read as <ph id="ph2">`null`</ph> up until run time.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this case, the style comes from the run-time theme evaluation that is part of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> presentation engine.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For implicit styles not in themes, the type must match exactlyâ€”a <ph id="ph1">`MyButton``Button`</ph>-derived class will not implicitly use a style for <ph id="ph2">`Button`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Default (Theme) Styles</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Every control that ships with <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> has a default style.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>That default style potentially varies by theme, which is why this default style is sometimes referred to as a theme style.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The most important information that is found within a default style for a control is its control template, which exists in the theme style as a setter for its <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Template%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If there were no template from default styles, a control without a custom template as part of a custom style would have no visual appearance at all.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The template from the default style gives the visual appearance of each control a basic structure, and also defines the connections between properties defined in the visual tree of the template and the corresponding control class.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Each control exposes a set of properties that can influence the visual appearance of the control without completely replacing the template.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For example, consider the default visual appearance of a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Thumb&gt;</ph> control, which is a component of a <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Thumb&gt;</ph> has certain customizable properties.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The default template of a <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Thumb&gt;</ph> creates a basic stucture / visual tree with several nested <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph> components to create a bevel look.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If a property that is part of the template is intended to be exposed for customization by the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Thumb&gt;</ph> class, then that property must be exposed by a <bpt id="p1">[</bpt>TemplateBinding<ept id="p1">](../../../../docs/framework/wpf/advanced/templatebinding-markup-extension.md)</ept>, within the template.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In the case of <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Thumb&gt;</ph>, various properties of these borders share a template binding to properties such as <ph id="ph2">&lt;xref:System.Windows.Controls.Border.Background%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Controls.Border.BorderThickness%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>But certain other properties or visual arrangements are hard-coded into the control template or are bound to values that come directly from the theme, and cannot be changed short of replacing the entire template.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Generally, if a property comes from a templated parent and is not exposed by a template binding, it cannot be adjusted by styles because there is no easy way to target it.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>But that property could still be influenced by property value inheritance in the applied template, or by default value.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The theme styles use a type as the key in their definitions.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>However, when themes are applied to a given element instance, themes lookup for this type is performed by checking the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> property on a control.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This is in contrast to using the literal Type, as implicit styles do.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The value of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> would inherit to derived classes even if the implementer did not change it (the intended way of changing the property is not to override it at the property level, but to instead change its default value in property metadata).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This indirection enables base classes to define the theme styles for derived elements that do not otherwise have a style (or more importantly, do not have a template within that style and would thus have no default visual appearance at all).</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Thus, you can derive <ph id="ph1">`MyButton`</ph> from <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> and will still get the <ph id="ph3">&lt;xref:System.Windows.Controls.Button&gt;</ph> default template.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you were the control author of <ph id="ph1">`MyButton`</ph> and you wanted a different behavior, you could override the dependency property metadata for <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DefaultStyleKey%2A&gt;</ph> on <ph id="ph3">`MyButton`</ph> to return a different key, and then define the relevant theme styles including template for <ph id="ph4">`MyButton`</ph> that you must package with your <ph id="ph5">`MyButton`</ph> control.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For more details on themes, styles, and control authoring, see <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Dynamic Resource References and Binding</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Dynamic resource references and binding operations respect the precedence of the location at which they are set.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, a dynamic resource applied to a local value acts per precedence item 3, a binding for a property setter within a theme style applies at precedence item 9, and so on.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Because dynamic resource references and binding must both be able to obtain values from the run time state of the application, this entails that the actual process of determining the property value precedence for any given property extends into the run time as well.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Dynamic resource references are not strictly speaking part of the property system, but they do have a lookup order of their own which interacts with the sequence listed above.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>That precedence is documented more thoroughly in the <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The basic summation of that precedence is: element to page root, application, theme, system.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Dynamic resources and bindings have the precedence of where they were set, but the value is deferred.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>One consequence of this is that if you set a dynamic resource or binding to a local value, any change to the local value replaces the dynamic resource or binding entirely.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Even if you call the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> method to clear the locally set value, the dynamic resource or binding will not be restored.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In fact, if you call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> on a property that has a dynamic resource or binding in place (with no literal local value), they are cleared by the <ph id="ph2">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> call too.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>SetCurrentValue</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> method is another way to set a property, but it is not in the order of precedence.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Instead, <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> enables you to change the value of a property without overwriting the source of a previous value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> any time that you want to set a value without giving that value the precedence of a local value.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>For example, if a property is set by a trigger and then assigned another value via <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph>, the property system still respects the trigger and the property will change if the triggerâ€™s action occurs.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> enables you to change the propertyâ€™s value without giving it a source with a higher precedence.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Likewise, you can use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> to change the value of a property without overwriting a binding.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Coercion, Animations, and Base Value</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Coercion and animation both act on a value that is termed as the "base value" throughout this <ph id="ph1">[!INCLUDE[TLA2#tla_sdk](../../../../includes/tla2sharptla-sdk-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The base value is thus whatever value is determined through evaluating upwards in the items until item 2 is reached.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For an animation, the base value can have an effect on the animated value, if that animation does not specify both "From" and "To" for certain behaviors, or if the animation deliberately reverts to the base value when completed.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To see this in practice, run the <bpt id="p1">[</bpt>From, To, and By Animation Target Values Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159988)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Try setting the local values of the rectangle height in the example, such that the initial local value differs from any "From" in the animation.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You will note that the animations start right away using the "From" values and replace the base value once started.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The animation might specify to return to the value found before animation once it is completed by specifying the Stop <ph id="ph1">&lt;xref:System.Windows.Media.Animation.FillBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Afterwards, normal precedence is used for the base value determination.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Multiple animations might be applied to a single property, with each of these animations possibly having been defined from different points in the value precedence.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>However, these animations will potentially composite their values, rather than just applying the animation from the higher precedence.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This depends on exactly how the animations are defined, and the type of the value that is being animated.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>For more information about animating properties, see <bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Coercion applies at the highest level of all.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Even an already running animation is subject to value coercion.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Certain existing dependency properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> have built-in coercion.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For a custom dependency property, you define the coercion behavior for a custom dependency property by writing a <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> and passing the callback as part of metadata when you create the property.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>You can also override coercion behavior of existing properties by overriding the metadata on that property in a derived class.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Coercion interacts with the base value in such a way that the constraints on coercion are applied as those constraints exist at the time, but the base value is still retained.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Therefore, if constraints in coercion are later lifted, the coercion will return the closest value possible to that base value, and potentially the coercion influence on a property will cease as soon as all constraints are lifted.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For more information about coercion behavior, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Trigger Behaviors</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Controls often define trigger behaviors as part of their default style in themes.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Setting local properties on controls might prevent the triggers from being able to respond to user-driven events either visually or behaviorally.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The most common use of a property trigger is for control or state properties such as <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.Selector.IsSelected%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>For example, by default when a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> is disabled (trigger for <ph id="ph2">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id="ph3">`false`</ph>) then the <ph id="ph4">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> value in the theme style is what causes the control to appear "grayed out".</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>But if you have set a local <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Foreground%2A&gt;</ph> value, that normal gray-out color will be overruled in precedence by your local property set, even in this property-triggered scenario.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Be cautious of setting values for properties that have theme-level trigger behaviors and make sure you are not unduly interfering with the intended user experience for that control.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>ClearValue and Value Precedence</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> method provides an expedient means to clear any locally applied value from a dependency property that is set on an element.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>However, calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> is not a guarantee that the default as established in metadata during property registration is the new effective value.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>All of the other participants in value precedence are still active.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Only the locally set value has been removed from the precedence sequence.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For example, if you call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> on a property where that property is also set by a theme style, then the theme value is applied as the new value rather than the metadata-based default.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>If you want to take all property value participants out of the process and set the value to the registered metadata default, you can obtain that default value definitively by querying the dependency property metadata, and then you can use the default value to locally set the property with a call to <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Dependency Properties<ept id="p1">](../../../../docs/framework/wpf/advanced/custom-dependency-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>