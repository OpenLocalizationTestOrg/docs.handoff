<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0c612fd573b9396483b4a6717e68f47aaf57fdb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\cryptography-model.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9d5dd0926722c81232c2e8d5b91bf9e4472ea50</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b456967df026aaea85bac07e6d551b44ffaf7fac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Framework Cryptography Model | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Framework Cryptography Model</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides implementations of many standard cryptographic algorithms.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These algorithms are easy to use and have the safest possible default properties.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In addition, the .NET Framework cryptography model of object inheritance, stream design, and configuration is extremely extensible.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Object Inheritance</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The .NET Framework security system implements an extensible pattern of derived class inheritance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The hierarchy is as follows:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Algorithm type class, such as <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph>,  <ph id="ph2">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> or <ph id="ph3">&lt;xref:System.Security.Cryptography.HashAlgorithm&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This level is abstract.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Algorithm class that inherits from an algorithm type class; for example, <ph id="ph1">&lt;xref:System.Security.Cryptography.Aes&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Cryptography.RC2&gt;</ph>, or <ph id="ph3">&lt;xref:System.Security.Cryptography.ECDiffieHellman&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This level is abstract.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Implementation of an algorithm class that inherits from an algorithm class; for example, <ph id="ph1">&lt;xref:System.Security.Cryptography.AesManaged&gt;</ph>, <ph id="ph2">&lt;xref:System.Security.Cryptography.RC2CryptoServiceProvider&gt;</ph>, or <ph id="ph3">&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This level is fully implemented.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Using this pattern of derived classes, it is easy to add a new algorithm or a new implementation of an existing algorithm.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, to create a new public-key algorithm, you would inherit from the <ph id="ph1">&lt;xref:System.Security.Cryptography.AsymmetricAlgorithm&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To create a new implementation of a specific algorithm, you would create a non-abstract derived class of that algorithm.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>How Algorithms Are Implemented in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>As an example of the different implementations available for an algorithm, consider symmetric algorithms.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The base for all symmetric algorithms is <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph>, which is inherited by the following algorithms:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.Aes&gt;</ph> is inherited by two classes: <ph id="ph2">&lt;xref:System.Security.Cryptography.AesCryptoServiceProvider&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.Cryptography.AesManaged&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.AesCryptoServiceProvider&gt;</ph> class is a wrapper around the Windows Cryptography API (CAPI) implementation of Aes, whereas the <ph id="ph2">&lt;xref:System.Security.Cryptography.AesManaged&gt;</ph> class is written entirely in managed code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There is also a third type of implementation, Cryptography Next Generation (CNG), in addition to the managed and CAPI implementations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An example of a CNG algorithm is <ph id="ph1">&lt;xref:System.Security.Cryptography.ECDiffieHellmanCng&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CNG algorithms are available on Windows Vista and later.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can choose which implementation is best for you.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The managed implementations are available on all platforms that support the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The CAPI implementations are available on older operating systems, and are no longer being developed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>CNG is the very latest implementation where new development will take place.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>However, the managed implementations are not certified by the Federal Information Processing Standards (FIPS), and may be slower than the wrapper classes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Stream Design</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The common language runtime uses a stream-oriented design for implementing symmetric algorithms and hash algorithms.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The core of this design is the <ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> class, which derives from the <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Stream-based cryptographic objects support a single standard interface (<ph id="ph1">`CryptoStream`</ph>) for handling the data transfer portion of the object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because all the objects are built on a standard interface, you can chain together multiple objects (such as a hash object followed by an encryption object), and you can perform multiple operations on the data without needing any intermediate storage for it.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The streaming model also enables you to build objects from smaller objects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, a combined encryption and hash algorithm can be viewed as a single stream object, although this object might be built from a set of stream objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Cryptographic Configuration</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Cryptographic configuration lets you resolve a specific implementation of an algorithm to an algorithm name, allowing extensibility of the .NET Framework cryptography classes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can add your own hardware or software implementation of an algorithm and map the implementation to the algorithm name of your choice.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If an algorithm is not specified in the configuration file, the default settings are used.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about cryptographic configuration, see <bpt id="p1">[</bpt>Configuring Cryptography Classes<ept id="p1">](../../../docs/framework/configure-apps/configure-cryptography-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Choosing an Algorithm</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can select an algorithm for different reasons: for example, for data integrity, for data privacy, or to generate a key.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Symmetric and hash algorithms are intended for protecting data for either integrity reasons (protect from change) or privacy reasons (protect from viewing).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Hash algorithms are used primarily for data integrity.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Here is a list of recommended algorithms by application:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Data privacy:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Data integrity:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Digital signature:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Key exchange:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Random number generation:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Generating a key from a password:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>