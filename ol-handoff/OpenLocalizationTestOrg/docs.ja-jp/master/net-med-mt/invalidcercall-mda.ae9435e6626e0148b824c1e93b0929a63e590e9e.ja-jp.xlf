<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a25a0582c7055a62c229e122c442d9de72a78ff8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\invalidcercall-mda.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e3d6e0c8a4a63ba13bc44b8fcb04bf3b8d4e50d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a05a6341ad9e3b8c5e7295cd9fdc168ae305525</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>invalidCERCall MDA | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>invalidCERCall MDA</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`invalidCERCall`</ph> managed debugging assistant (MDA) is activated when there is a call within the constrained execution region (CER) graph to a method that has no reliability contract or an excessively weak contract.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A weak contract is a contract that declares that the worst case state corruption is of greater scope than the instance passed to the call, that is, the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or process state may become corrupted or that its result is not always deterministically computable when called within a CER.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Symptoms</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Unexpected results when executing code in a CER.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The symptoms are not specific.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>They could be an unexpected <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph>, a <ph id="ph2">&lt;xref:System.Threading.ThreadAbortException&gt;</ph>, or other exceptions at the call into the unreliable method because the runtime did not prepare it ahead of time or protect it from <ph id="ph3">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> exceptions at run time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A greater threat is that any exception resulting from the method at run time could leave the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or process in an unstable state, which is contrary to the objective of a CER.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The reason a CER is created is to avoid state corruptions such as this.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The symptoms of corrupt state are application specific because the definition of consistent state is different between applications.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Cause</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Code within a CER is calling a function with no <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> or with a weak <ph id="ph2">&lt;xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute&gt;</ph> that is not compatible with running in a CER.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In terms of reliability contract syntax, a weak contract is a contract that does not specify a <ph id="ph1">&lt;xref:System.Runtime.ConstrainedExecution.Consistency&gt;</ph> enumeration value or specifies a <ph id="ph2">&lt;xref:System.Runtime.ConstrainedExecution.Consistency&gt;</ph> value of <ph id="ph3">&lt;xref:System.Runtime.ConstrainedExecution.Consistency&gt;</ph>, <ph id="ph4">&lt;xref:System.Runtime.ConstrainedExecution.Consistency&gt;</ph>, or <ph id="ph5">&lt;xref:System.Runtime.ConstrainedExecution.Cer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any of these conditions indicates that the code called may impede the efforts of the other code in the CER to maintain consistent state.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CERs allow code to treat errors in a very deterministic manner, maintaining internal invariants that are important to the application and allowing it to continue running in the face of transient errors such as out-of-memory exceptions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The activation of this MDA indicates a possibility the method being called in the CER can fail in a way that the caller did not expect or that leaves the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> or process state corrupted or unrecoverable.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Of course, the called code might execute correctly and the problem is simply a missing contract.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, the issues involved in writing reliable code are subtle and the absence of a contract is a good indicator the code might not execute correctly.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The contracts are indicators that the programmer has coded reliably and also promises that these guarantees will not change in future revisions of the code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>That is, the contracts are declarations of intent and not just implementation details.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Because any method with a weak or nonexistent contract can potentially fail in many unpredictable ways, the runtime does not attempt to remove any of its own unpredictable failures from the method  that are introduced by lazy JIT-compiling, generics dictionary population, or thread aborts, for example.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>That is, when this MDA is activated, it indicates that the runtime did not include the called method in the CER being defined; the call graph was terminated at this node because continuing to prepare this subtree would help mask the potential error.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Resolution</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add a valid reliability contract to the function or avoid using that function call.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Effect on the Runtime</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The effect of calling a weak contract from a CER could be the CER failure to complete its operations.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This could lead to corruption of the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> process state.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following is sample output from this MDA.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Configuration</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Diagnosing Errors with Managed Debugging Assistants<ept id="p1">](../../../docs/framework/debug-trace-profile/diagnosing-errors-with-managed-debugging-assistants.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>