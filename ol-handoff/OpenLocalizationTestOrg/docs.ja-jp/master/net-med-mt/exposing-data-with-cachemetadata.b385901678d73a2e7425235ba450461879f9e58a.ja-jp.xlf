<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fee3e9cf334383709e713b66e33a5d3ca90f17d3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\exposing-data-with-cachemetadata.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc1dc79d3bb8819c27e2758d6dbffb3eca97ba70</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d89ba5b5a8ecc66db0a71547c2d1ef9d29d9561</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exposing data with CacheMetadata | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exposing data with CacheMetadata</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Before executing an activity, the workflow runtime obtains all of the information about the activity that it needs in order to maintain its execution.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The workflow runtime gets this information during the execution of the <ph id="ph1">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The default implementation of this method provides the runtime with all of the public arguments, variables, and child activities exposed by the activity at the time it is executed; if the activity needs to give more information to the runtime than this (such as private members, or activities to be scheduled by the activity), this method can be overridden to provide it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Default CacheMetadata behavior</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The default implementation of <ph id="ph1">&lt;xref:System.Activities.NativeActivity.CacheMetadata%2A&gt;</ph> for activities that derive from <ph id="ph2">&lt;xref:System.Activities.NativeActivity&gt;</ph> processes the following method types in the following ways:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.InArgument%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.OutArgument%601&gt;</ph>, or <ph id="ph3">&lt;xref:System.Activities.InOutArgument%601&gt;</ph> (generic arguments): These arguments are exposed to the runtime as arguments with a name and type equal to the exposed property name and type, the appropriate argument direction, and some validation data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Variable&gt;</ph> or any subclass thereof: These members are exposed to the runtime as public variables.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Activity&gt;</ph> or any subclass thereof: These members are exposed to the runtime as public child activities.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default behavior can be implemented explicity by calling <ph id="ph1">&lt;xref:System.Activities.ActivityMetadata.AddImportedChild%2A&gt;</ph>, passing in the child activity.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.ActivityDelegate&gt;</ph> or any subclass thereof: These members are exposed to the runtime as public delegates.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> of type <ph id="ph2">&lt;xref:System.Activities.Variable&gt;</ph>: All elements in the collection are exposed to the runtime as public variables.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> of type <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>: All elements in the collection are exposed to the runtime as public children.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> of type <ph id="ph2">&lt;xref:System.Activities.ActivityDelegate&gt;</ph>: All elements in the collection are exposed to the runtime as public delegates.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> for activities that derive from <ph id="ph2">&lt;xref:System.Activities.Activity&gt;</ph>, <ph id="ph3">&lt;xref:System.Workflow.Activities.CodeActivity&gt;</ph>, and <ph id="ph4">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> also function as above, except for the following differences:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Classes that derive from <ph id="ph1">&lt;xref:System.Activities.Activity&gt;</ph> cannot schedule child activities or delegates, so such members are exposed as imported children and delegates; the</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Classes that derive from <ph id="ph1">&lt;xref:System.Activities.CodeActivity&gt;</ph> and <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph> do not support variables, children, or delegates, so only arguments will be exposed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Overriding CacheMetadata to provide information to the runtime</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code snippet demonstrates how to add information about members to an activityâ€™s metadata during the execution of the <ph id="ph1">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note that the base of the method is called to cache all public data about the activity.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using CacheMetadata to expose implementation children</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In order to pass data to child activities that are to be scheduled by an activity using variables, it is necessary to add the variables as implementation variables; public variables cannot have their values set this way.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The reason for this is that activities are intended to be executed more as implementations of functions (which have parameters), rather than encapsulated classes (which have properties).</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, there are situations in which the arguments must be explicitly set, such as when using <ph id="ph1">&lt;xref:System.Activities.NativeActivityContext.ScheduleActivity%2A&gt;</ph>, since the scheduled activity doesn't have access to the parent activity's arguments in the way a child activity would.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code snippet demonstrates how to pass an argument form a native activity into a scheduled activity using <ph id="ph1">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>