<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac0f3a4d2e69fb1412b937b2fd1c0fb6542b05b0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\cryptographic-signatures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6e41c804b4902df5025bba1718acb7d7de299e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f7a2feed4414f998bb75bbade2e2cbff9a6746e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cryptographic Signatures | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Cryptographic Signatures</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="top"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Cryptographic digital signatures use public key algorithms to provide data integrity.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you sign data with a digital signature, someone else can verify the signature, and can prove that the data originated from you and was not altered after you signed it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about digital signatures, see <bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains how to generate and verify digital signatures using classes in the <ph id="ph1">&lt;xref:System.Security.Cryptography?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating Signatures<ept id="p1">](#generate)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Verifying Signatures<ept id="p1">](#verify)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Generating Signatures</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Digital signatures are usually applied to hash values that represent larger data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example applies a digital signature to a hash value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>First, a new instance of the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class is created to generate a public/private key pair.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Next, the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> is passed to a new instance of the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This transfers the private key to the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter&gt;</ph>, which actually performs the digital signing.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Before you can sign the hash code, you must specify a hash algorithm to use.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example uses the SHA1 algorithm.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature%2A&gt;</ph> method is called to perform the signing.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Signing XML Files</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides the <ph id="ph1">&lt;xref:System.Security.Cryptography.Xml&gt;</ph> namespace, which enables you sign XML.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Signing XML is important when you want to verify that the XML originates from a certain source.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if you are using a stock quote service that uses XML, you can verify the source of the XML if it is signed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The classes in this namespace follow the <bpt id="p1">[</bpt>XML-Signature Syntax and Processing recommendation<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=136777)</ept> from the World Wide Web Consortium.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Verifying Signatures</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To verify that data was signed by a particular party, you must have the following information:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The public key of the party that signed the data.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The digital signature.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The data that was signed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The hash algorithm used by the signer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To verify a signature signed by the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureFormatter&gt;</ph> class, use the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter&gt;</ph> class must be supplied the public key of the signer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You will need the values of the modulus and the exponent to specify the public key.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(The party that generated the public/private key pair should provide these values.) First create an <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> object to hold the public key that will verify the signature, and then initialize an <ph id="ph2">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> structure to the modulus and exponent values that specify the public key.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code shows the creation of an <ph id="ph1">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Modulus`</ph> property is set to the value of a byte array called <ph id="ph2">`ModulusData`</ph> and the <ph id="ph3">`Exponent`</ph> property is set to the value of a byte array called <ph id="ph4">`ExponentData`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>After you have created the <ph id="ph1">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph> object, you can initialize a new instance of the <ph id="ph2">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> class to the values specified in <ph id="ph3">&lt;xref:System.Security.Cryptography.RSAParameters&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.RSACryptoServiceProvider&gt;</ph> is, in turn, passed to the constructor of an <ph id="ph2">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter&gt;</ph> to transfer the key.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example illustrates this process.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`HashValue`</ph> and <ph id="ph2">`SignedHashValue`</ph> are arrays of bytes provided by a remote party.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The remote party has signed the <ph id="ph1">`HashValue`</ph> using the SHA1 algorithm, producing the digital signature <ph id="ph2">`SignedHashValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature%2A?displayProperty=fullName&gt;</ph> method verifies that the digital signature is valid and was used to sign the <ph id="ph2">`HashValue`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This code fragment will display "<ph id="ph1">`The signature is valid`</ph>" if the signature is valid and "<ph id="ph2">`The signature is not valid`</ph>" if it is not.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](../../../docs/standard/security/cryptographic-services.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>