<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb204adc1fdf1ddb0f466bbe8d72d57789d80077</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\rules-for-inferring-simple-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26760a9f8bf5a23a23b8d32702d07c2cb40c6d2d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4efde124d110a8893f58bfdb3f743cc526f229a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Rules for Inferring Simple Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Rules for Inferring Simple Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes how the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class infers the data type for attributes and elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class infers the data type for attributes and elements as simple types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This section describes the potential inferred types, how multiple differing values are reconciled to a single type, and how schema-defining <ph id="ph1">`xsi`</ph> attributes are handled.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Inferred Types</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class infers element and attribute values as simple types and includes a type attribute in the resulting schema.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All inferred types are simple types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>No base types or facets are included as part of the resulting schema.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Values are examined individually as they are encountered in the XML document.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The type is inferred for a value at the time it is examined.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If a type has been inferred for an attribute or element, and a value for the attribute or element is encountered that does not match the currently inferred type, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class promotes the type for each of a set of rules.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These rules are discussed in the Type Promotion section, later in this topic.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following table lists the possible inferred types for the resulting schema.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Simple Type</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>boolean</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>True, false, 0, 1.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>byte</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Integers in the range of –128 to 127.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>unsignedByte</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Integers in the range of 0 to 255.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>short</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Integers in the range of –32768 to 32767.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>unsignedShort</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Integers in the range of 0 to 65535.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>int</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Integers in the range of –2147483648 to 2147483647.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>unsignedInt</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Integers in the range of 0 to 4294967295.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>long</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Integers in the range of –9223372036854775808 to 9223372036854775807.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>unsignedLong</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Integers in the range of 0 to 18446744073709551615.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>integer</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A finite number of digits possibly prefixed with "-".</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>decimal</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Numerical values that contain from 0 to 28 digits of precision.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Decimals optionally followed by "E" or "e" followed by an integer value representing the exponent.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Decimal values can be in the range of -16777216 to 16777216.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Exponent values can be in the range of –149 to 104.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Float allows for special values to represent infinity and non-numeric values.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Special values for float are: 0, -0, INF, -INF, NaN.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The same as float except decimal values can be in the range of -9007199254740992 to 9007199254740992, and exponent values can be in the range of –1075 to 970.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Double allows for special values to represent infinity and non-numeric values.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Special values for float are: 0, -0, INF, -INF, NaN.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>duration</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The W3C duration format.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>dateTime</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The W3C dateTime format.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>time</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The W3C time format.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>date</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Year values are restricted from 0001 to 9999.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>gYearMonth</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The W3C Gregorian month and year format.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>string</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>One or more Unicode characters.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Type Promotion</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class examines attribute and element values one at a time.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>As values are encountered, the most restrictive, unsigned type is inferred.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If a type has been inferred for an attribute or element, and a new value is encountered that does not match the currently inferred type, the inferred type is promoted to a new type that applies to both the currently inferred type and the new value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class does consider previous values when promoting the inferred type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, consider the following XML fragments from two XML documents:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When the first <ph id="ph1">`attr1`</ph> value is encountered, the type of <ph id="ph2">`attr1`</ph> is inferred as <ph id="ph3">`unsignedByte`</ph> based on the value <ph id="ph4">`12`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When the second <ph id="ph1">`attr1`</ph> is encountered, the type is promoted to <ph id="ph2">`unsignedShort`</ph> based on the currently inferred type of <ph id="ph3">`unsignedByte`</ph> and the current value <ph id="ph4">`52344`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Now, consider the following XML from two XML documents:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When the first <ph id="ph1">`attr2`</ph> value is encountered, the type of <ph id="ph2">`attr2`</ph> is inferred as <ph id="ph3">`unsignedByte`</ph> based on the value <ph id="ph4">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When the second <ph id="ph1">`attr2`</ph> is encountered, the type is promoted to <ph id="ph2">`string`</ph> based on the currently inferred type of <ph id="ph3">`unsignedByte`</ph> and the current value <ph id="ph4">`true`</ph> because the <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaInference&gt;</ph> class does consider previous values when promoting the inferred type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>However, if both instances of <ph id="ph1">`attr2`</ph> were encountered in the same XML document and not in two different XML documents as illustrated above, <ph id="ph2">`attr2`</ph> would have been inferred as <ph id="ph3">`boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Ignored Attributes from the http://www.w3.org/2001/XMLSchema-instance Namespace</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following are schema-defining attributes that are ignored during schema inference.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If an element is encountered with <ph id="ph1">`xsi:type`</ph> specified, the <ph id="ph2">`xsi:type`</ph> is ignored.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If an element with an <ph id="ph1">`xsi:nil`</ph> attribute is encountered, its element declaration in the inferred schema has the value of <ph id="ph2">`nillable="true"`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>An element with an <ph id="ph1">`xsi:nil`</ph> attribute set to <ph id="ph2">`true`</ph> cannot have child elements.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`xsi:schemaLocation`</ph> is encountered, it is ignored.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`xsi:noNamespaceSchemaLocation`</ph> is encountered, it is ignored.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Schema Object Model (SOM)<ept id="p1">](../../../../docs/standard/data/xml/xml-schema-object-model-som.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inferring Schemas from XML Documents<ept id="p1">](../../../../docs/standard/data/xml/inferring-schemas-from-xml-documents.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Rules for Inferring Schema Node Types and Structure<ept id="p1">](../../../../docs/standard/data/xml/rules-for-inferring-schema-node-types-and-structure.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>