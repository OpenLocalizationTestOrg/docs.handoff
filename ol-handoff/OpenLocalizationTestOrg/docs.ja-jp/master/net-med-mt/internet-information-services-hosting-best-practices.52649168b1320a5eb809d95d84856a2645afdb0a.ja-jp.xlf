<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de61c20fa6e98f242e6091ac0af8389e346d2020</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\internet-information-services-hosting-best-practices.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8ec88aa32cdeb6fc23fc0ef0c8ddc6fd83e6adc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">69d45a1cca58267f6cb5225fe841b4ec5e882d55</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Internet Information Services Hosting Best Practices | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Internet Information Services Hosting Best Practices</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic outlines some best practices for hosting <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Implementing WCF Services as DLLs</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Implementing a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service as a DLL that is deployed to the \bin directory of a Web application allows you reuse the service outside of the Web application model, for example, in a test environment that may not have Internet Information Services (IIS) deployed.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Service Hosts in IIS-Hosted Applications</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Do not use the imperative self-host APIs to create new service hosts that listen on network transports not natively supported by the IIS hosting environment (For example, <ph id="ph1">[!INCLUDE[iis601](../../../../includes/iis601-md.md)]</ph> to host TCP services, because TCP communication is not natively supported on <ph id="ph2">[!INCLUDE[iis601](../../../../includes/iis601-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This approach is not recommended.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Service hosts created imperatively are not known within the IIS hosting environment.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The critical point is that processing done by imperatively created services is not accounted for by IIS when it determines whether the hosting application pool is idle.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The result is that applications that have such imperatively created service hosts have an IIS hosting environment that aggressively disposes of IIS host processes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>URIs and IIS-Hosted Endpoints</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Endpoints for an IIS-hosted service should be configured using relative Uniform Resource Identifiers (URIs), not absolute addresses.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This guarantees that the endpoint address falls within the set of URI addresses that belong to the hosting application and ensures that message-based activation happens as expected.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>State Management and Process Recycling</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The IIS hosting environment is optimized for services that do not maintain local state in memory.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>IIS recycles the host process in response to a variety of external and internal events, causing any volatile state stored exclusively in memory to be lost.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Services hosted in IIS should store their state external to the process (for example, in a database) or in an in-memory cache that can easily be re-created if an application recycle event occurs.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The protocols <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses for message-layer reliability and security make use of the volatile in-memory state.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> reliable sessions and security sessions may terminate unexpectedly due to application recycles.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>IIS-hosted applications that make use of these protocols should either depend on something other than the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>-provided session key for correlating application-layer state (for example, an application-layer construct or custom correlation header) or disable IIS process recycling for the hosted application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Optimizing Performance in Middle-Tier Scenarios</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For optimal performance in a <bpt id="p1">*</bpt>middle-tier scenario<ept id="p1">*</ept>—a service that calls out to other services in response to incoming messages—instantiate the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service client to the remote service once and reuse it across multiple incoming requests.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Instantiating <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service clients is an expensive operation relative to making a service call on a pre-existing client instance, and middle-tier scenarios produce distinct performance gains by caching remote clients across requests.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service clients are thread-safe, so it is not necessary to synchronize access to a client across multiple threads.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Middle-tier scenarios also produce performance gains by using the asynchronous APIs generated by the <ph id="ph1">`svcutil /a`</ph> option.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`/a`</ph> option causes the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> to generate <ph id="ph2">`BeginXXX/EndXXX`</ph> methods for each service operation, which allows potentially long-running calls to remote services to be made on background threads.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>WCF in Multi-Homed or Multi-named scenarios</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can deploy <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services inside of an IIS Web farm, where a set of computers share a common external name (such as http://www.contoso.com) but are individually addressed by different hostnames (for example, http://www.contoso.com might direct traffic to two different machines named http://machine1.internal.contoso.com and http://machine2.internal.contoso.com).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This deployment scenario is fully supported by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, but requires special configuration of the IIS Web site hosting <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services to display the correct (external) hostname in the service's metadata (Web Services Description Language).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To ensure that the correct hostname appears in the service metadata <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> generates, configure the default identity for the IIS Web site that hosts <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services to use an explicit hostname.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, computers that reside inside of the www.contoso.com farm should use an IIS site binding of *:80:www.contoso.com for HTTP and <ph id="ph1">\*</ph>:443:www.contoso.com for HTTPS.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can configure IIS Web site bindings by using the IIS Microsoft Management Console (MMC) snap-in.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Application Pools Running in Different User Contexts Overwrite Assemblies from Other Accounts in the Temporary Folder</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To ensure that application pools running in different user contexts cannot overwrite assemblies from other accounts in the temporary <ph id="ph1">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> files folder, use different identities and temporary folders for different applications.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, if you have two virtual applications /Application1 and / Application2, you can create two Application pools, A and B, with two different identities.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Application pool A can run under one user identity (user1) while application pool B can run under another user identity (user2), and configure /Application1 to use A and /Application2 to use B.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In Web.config, you can configure the temporary folder using <ph id="ph1">\&lt;</ph><ph id="ph2">system.web/compilation/@tempFolder</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For /Application1, it can be "c:\tempForUser1" and for application2 it can be "c:\tempForUser2".</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Grant corresponding write permission to these folders for the two identities.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Then user2 cannot change the code-generation folder for /application2 (under c:\tempForUser1).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Enabling asynchronous processing</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>By default messages sent to a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service hosted under IIS 6.0 and earlier are processed in a synchronous manner.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ASP.NET calls into <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> on its own thread (the ASP.NET worker thread) and <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses another thread to process the request.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> holds onto the ASP.NET worker thread until it completes its processing.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This leads to synchronous processing of requests.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Processing requests asynchronously enables greater scalability because it reduces the number of threads required to process a request –<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does not hold on to the ASP.NET thread while processing the request.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use of asynchronous behavior is not recommended for machines running IIS 6.0 because there is no way to throttle incoming requests that open up the server to <bpt id="p1">*</bpt>Denial Of Service<ept id="p1">*</ept> (DOS) attacks.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Starting with IIS 7.0, a concurrent request throttle has been introduced: <ph id="ph1">`[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ASP.NET\2.0.50727.0]"MaxConcurrentRequestsPerCpu`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>With this new throttle it is safe to use the asynchronous processing.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>By default in IIS 7.0, the asynchronous handler and module are registered.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If this has been turned off, you can manually enable asynchronous processing of requests in your application's Web.config file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The settings you use depend on your <ph id="ph1">`aspNetCompatibilityEnabled`</ph> setting.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you have <ph id="ph1">`aspNetCompatibilityEnabled`</ph> set to <ph id="ph2">`false`</ph>, configure the <ph id="ph3">`System.ServiceModel.Activation.ServiceHttpModule`</ph> as shown in the following configuration snippet.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you have <ph id="ph1">`aspNetCompatibilityEnabled`</ph> set to <ph id="ph2">`true`</ph>, configure the <ph id="ph3">`System.ServiceModel.Activation.ServiceHttpHandlerFactory`</ph> as shown in the following config snippet.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service Hosting Samples<ept id="p1">](http://msdn.microsoft.com/en-us/f703a3f6-0fba-418a-a92f-7ce75ccfa47e)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Windows Server App Fabric Hosting Features<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=201276)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>