<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="vulnerabilities-cbc-mode.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d8c2593cdbc4bbff2b1507196989282b16aa9a8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\security\vulnerabilities-cbc-mode.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64845be34d01b0f2cee235b997f5869dcfb4533e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e611d9550a9384e3256dd440ab82ab26eb70c4b2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Timing vulnerabilities with CBC-mode symmetric decryption using padding</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Learn how to detect and mitigate timing vulnerabilities with Cipher-Block-Chaining (CBC) mode symmetric decryption using padding.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Timing vulnerabilities with CBC-mode symmetric decryption using padding</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Microsoft believes that it's no longer safe to decrypt data encrypted with the Cipher-Block-Chaining (CBC) mode of symmetric encryption when verifiable padding has been applied without first ensuring the integrity of the ciphertext, except for very specific circumstances.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This judgement is based on currently known cryptographic research.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Introduction</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A padding oracle attack is a type of attack against encrypted data that allows the attacker to decrypt the contents of the data, without knowing the key.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An oracle refers to a "tell" which gives an attacker information about whether the action they're executing is correct or not.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Imagine playing a board or card game with a child.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When her face lights up with a big smile because she thinks she's about to make a good move, that's an oracle.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You, as the opponent, can use this oracle to plan your next move appropriately.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Padding is a specific cryptographic term.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Some ciphers, which are the algorithms used to encrypt your data, work on blocks of data where each block is a fixed size.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the data you want to encrypt isn't the right size to fill the blocks, your data is padded until it does.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Many forms of padding require that padding to always be present, even if the original input was of the right size.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This allows the padding to always be safely removed upon decryption.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Putting the two things together, a software implementation with a padding oracle reveals whether decrypted data has valid padding.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The oracle could be something as simple as returning a value that says "Invalid padding" or something more complicated like taking a measurably different time to process a valid block as opposed to an invalid block.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Block-based ciphers have another property, called the mode, which determines the relationship of data in the first block to the data in the second block, and so on.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>One of the most commonly used modes is CBC.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CBC introduces an initial random block, known as the Initialization Vector (IV), and combines the previous block with the result of static encryption to make it such that encrypting the same message with the same key doesn't always produce the same encrypted output.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An attacker can use a padding oracle, in combination with how CBC data is structured, to send slightly changed messages to the code that exposes the oracle, and keep sending data until the oracle tells them the data is correct.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>From this response, the attacker can decrypt the message byte by byte.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Modern computer networks are of such high quality that an attacker can detect very small (less than 0.1 ms) differences in execution time on remote systems.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Â Applications that are assuming that a successful decryption can only happen when the data wasn't tampered with may be vulnerable to attack from tools that are designed to observe differences in successful and unsuccessful decryption.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>While this timing difference may be more significant in some languages or libraries than others, it's now believed that this is a practical threat for all languages and libraries when the application's response to failure is taken into account.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This attack relies on the ability to change the encrypted data and test the result with the oracle.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The only way to fully mitigate the attack is to detect changes to the encrypted data and refuse to perform any actions on it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The standard way to do this is to create a signature for the data and validate that signature before any operations are performed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The signature must be verifiable, it cannot be created by the attacker, otherwise they'd change the encrypted data, then compute a new signature based on the changed data.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>One common type of appropriate signature is known as a keyed-hash message authentication code (HMAC).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>An HMAC differs from a checksum in that it takes a secret key, known only to the person producing the HMAC and to the person validating it.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Without possession of the key, you can't produce a correct HMAC.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you receive your data, you'd take the encrypted data, independently compute the HMAC using the secret key you and the sender share, then compare the HMAC they sent against the one you computed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This comparison must be constant time, otherwise you've added another detectable oracle, allowing a different type of attack.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In summary, to use padded CBC block ciphers safely, you must combine them with an HMAC (or another data integrity check) that you validate using a constant time comparison before trying to decrypt the data.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Since all altered messages take the same amount time to produce a response, the attack is prevented.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Who is vulnerable</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This vulnerability applies to both managed and native applications that are performing their own encryption and decryption.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This includes, for example:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An application that encrypts a cookie for later decryption on the server.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A database application that provides the ability for users to insert data into a table whose columns are later decrypted.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A data transfer application that relies on encryption using a shared key to protect the data in transit.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An application that encrypts and decrypts messages "inside" the TLS tunnel.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that using TLS alone may not protect you in these scenarios.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A vulnerable application:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Decrypts data using the CBC cipher mode with a verifiable padding mode, such as PKCS#7 or ANSI X.923.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Performs the decryption without having performed a data integrity check (via a MAC or an asymmetric digital signature).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This also applies to applications built on top of abstractions over top of these primitives, such as the Cryptographic Message Syntax (PKCS#7/CMS) EnvelopedData structure.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Related areas of concern</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Research has led Microsoft to be further concerned about CBC messages that are padded with ISO 10126-equivalent padding when the message has a well-known or predictable footer structure.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, content prepared under the rules of the W3C XML Encryption Syntax and Processing Recommendation (xmlenc, EncryptedXml).</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>While the W3C guidance to sign the message then encrypt was considered appropriate at the time, Microsoft now recommends always doing encrypt-then-sign.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Application developers should always be mindful of verifying the applicability of an asymmetric signature key, as there's no inherent trust relationship between an asymmetric key and an arbitrary message.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Details</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Historically, there has been consensus that it's important to both encrypt and authenticate important data, using means such as HMAC or RSA signatures.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>However, there has been less clear guidance as to how to sequence the encryption and authentication operations.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Due to the vulnerability detailed in this article, Microsoft's guidance is now to always use the "encrypt-then-sign" paradigm.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>That is, first encrypt data using a symmetric key, then compute a MAC or asymmetric signature over the ciphertext (encrypted data).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When decrypting data, perform the reverse.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>First, confirm the MAC or signature of the ciphertext, then decrypt it.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A class of vulnerabilities known as "padding oracle attacks" have been known to exist for over 10 years.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>These vulnerabilities allow an attacker to decrypt data encrypted by symmetric block algorithms, such as AES and 3DES, using no more than 4096 attempts per block of data.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These vulnerabilities make use of the fact that block ciphers are most frequently used with verifiable padding data at the end.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It was found that if an attacker can tamper with ciphertext and find out whether the tampering caused an error in the format of the padding at the end, the attacker can decrypt the data.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Initially, practical attacks were based on services that would return different error codes based on whether padding was valid, such as the ASP.NET vulnerability <bpt id="p1">[</bpt>MS10-070<ept id="p1">](/security-updates/SecurityBulletins/2010/ms10-070)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, Microsoft now believes that it's practical to conduct similar attacks using only the differences in timing between processing valid and invalid padding.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Provided that the encryption scheme employs a signature and that the signature verification is performed with a fixed runtime for a given length of data (irrespective of the contents), the data integrity can be verified without emitting any information to an attacker via a <bpt id="p1">[</bpt>side channel<ept id="p1">](https://en.wikipedia.org/wiki/Side-channel_attack)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Since the integrity check rejects any tampered messages, the padding oracle threat is mitigated.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Guidance</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>First and foremost, Microsoft recommends that any data that has confidentiality needs be transmitted over Transport Layer Security (TLS), the successor to Secure Sockets Layer (SSL).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next, analyze your application to:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Understand precisely what encryption you're performing and what encryption is being provided by the platforms and APIs you're using.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Be certain that each usage at each layer of a symmetric <bpt id="p1">[</bpt>block cipher algorithm<ept id="p1">](https://en.wikipedia.org/wiki/Block_cipher#Notable_block_ciphers)</ept>, such as AES and 3DES, in CBC mode incorporate the use of a secret-keyed data integrity check (an asymmetric signature, an HMAC, or to change the cipher mode to an <bpt id="p2">[</bpt>authenticated encryption<ept id="p2">](https://en.wikipedia.org/wiki/Authenticated_encryption)</ept> (AE) mode such as GCM or CCM).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Based on the current research, it's generally believed that when the authentication and encryption steps are performed independently for non-AE modes of encryption, authenticating the ciphertext (encrypt-then-sign) is the best general option.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>However, there's no one-size-fits-all correct answer to cryptography and this generalization isn't as good as directed advice from a professional cryptographer.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Applications that are unable to change their messaging format but perform unauthenticated CBC decryption are encouraged to try to incorporate mitigations such as:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Decrypt without allowing the decryptor to verify or remove padding:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Any padding that was applied still needs to be removed or ignored, you're moving the burden into your application.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The benefit is that the padding verification and removal can be incorporated into other application data verification logic.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the padding verification and data verification can be done in constant time, the threat is reduced.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Since the interpretation of the padding changes the perceived message length, there may still be timing information emitted from this approach.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Change the decryption padding mode to ISO10126:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>ISO10126 decryption padding is compatible with both PKCS7 encryption padding and ANSIX923 encryption padding.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Changing the mode reduces the padding oracle knowledge to 1 byte instead of the entire block.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, if the content has a well-known footer, such as a closing XML element, related attacks can continue to attack the rest of the message.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This also doesn't prevent plaintext recovery in situations where the attacker can coerce the same plaintext to be encrypted multiple times with a different message offset.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Gate the evaluation of a decryption call to dampen the timing signal:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The computation of hold time must have a minimum in excess of the maximum amount of time the decryption operation would take for any data segment that contains padding.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Time computations should be done according to the guidance in <bpt id="p1">[</bpt>Acquiring high-resolution time stamps<ept id="p1">](/windows/desktop/sysinfo/acquiring-high-resolution-time-stamps)</ept>, not by using <ph id="ph1">&lt;xref:System.Environment.TickCount?displayProperty=nameWithType&gt;</ph> (subject to roll-over/overflow) or subtracting two system timestamps (subject to NTP adjustment errors).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Time computations must be inclusive of the decryption operation including all potential exceptions in managed or C++ applications, not just padded onto the end.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If success or failure has been determined yet, the timing gate needs to return failure when it expires.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Services that are performing unauthenticated decryption should have monitoring in place to detect that a flood of "invalid" messages has come through.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Bear in mind that this signal carries both false positives (legitimately corrupted data) and false negatives (spreading out the attack over a sufficiently long time to evade detection).</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Finding vulnerable code - native applications</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For programs built against the Windows Cryptography: Next Generation (CNG) library:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The decryption call is to <bpt id="p1">[</bpt>BCryptDecrypt<ept id="p1">](/windows/desktop/api/bcrypt/nf-bcrypt-bcryptdecrypt)</ept>, specifying the <ph id="ph1">`BCRYPT_BLOCK_PADDING`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The key handle has been initialized by calling <bpt id="p1">[</bpt>BCryptSetProperty<ept id="p1">](/windows/desktop/api/bcrypt/nf-bcrypt-bcryptsetproperty)</ept> with <bpt id="p2">[</bpt>BCRYPT_CHAINING_MODE<ept id="p2">](/windows/desktop/SecCNG/cng-property-identifiers#BCRYPT_CHAINING_MODE)</ept> set to <ph id="ph1">`BCRYPT_CHAIN_MODE_CBC`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">`BCRYPT_CHAIN_MODE_CBC`</ph> is the default, affected code may not have assigned any value for <ph id="ph2">`BCRYPT_CHAINING_MODE`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For programs built against the older Windows Cryptographic API:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The decryption call is to <bpt id="p1">[</bpt>CryptDecrypt<ept id="p1">](/windows/desktop/api/wincrypt/nf-wincrypt-cryptdecrypt)</ept> with <ph id="ph1">`Final=TRUE`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The key handle has been initialized by calling <bpt id="p1">[</bpt>CryptSetKeyParam<ept id="p1">](/windows/desktop/api/wincrypt/nf-wincrypt-cryptsetkeyparam)</ept> with <bpt id="p2">[</bpt>KP_MODE<ept id="p2">](/windows/desktop/api/wincrypt/nf-wincrypt-cryptgetkeyparam)</ept> set to <ph id="ph1">`CRYPT_MODE_CBC`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">`CRYPT_MODE_CBC`</ph> is the default, affected code may not have assigned any value for <ph id="ph2">`KP_MODE`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Finding vulnerable code - managed applications</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The decryption call is to the <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])&gt;</ph> methods on <ph id="ph3">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This includes the following derived types within the .NET, but may also include third-party types:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Padding?displayProperty=nameWithType&gt;</ph> property was set to <ph id="ph2">&lt;xref:System.Security.Cryptography.PaddingMode.PKCS7?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.Cryptography.PaddingMode.ANSIX923?displayProperty=nameWithType&gt;</ph>, or <ph id="ph4">&lt;xref:System.Security.Cryptography.PaddingMode.ISO10126?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">&lt;xref:System.Security.Cryptography.PaddingMode.PKCS7?displayProperty=nameWithType&gt;</ph> is the default, affected code may never have assigned the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Padding?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Mode?displayProperty=nameWithType&gt;</ph> property was set to <ph id="ph2">&lt;xref:System.Security.Cryptography.CipherMode.CBC?displayProperty=nameWithType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">&lt;xref:System.Security.Cryptography.CipherMode.CBC?displayProperty=nameWithType&gt;</ph> is the default, affected code may never have assigned the <ph id="ph2">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm.Mode?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Finding vulnerable code - cryptographic message syntax</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An unauthenticated CMS EnvelopedData message whose encrypted content uses the CBC mode of AES (2.16.840.1.101.3.4.1.2, 2.16.840.1.101.3.4.1.22, 2.16.840.1.101.3.4.1.42), DES (1.3.14.3.2.7), 3DES (1.2.840.113549.3.7) or RC2 (1.2.840.113549.3.2) is vulnerable, as well as messages using any other block cipher algorithms in CBC mode.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>While stream ciphers aren't susceptible to this particular vulnerability, Microsoft recommends always authenticating the data over inspecting the ContentEncryptionAlgorithm value.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For managed applications, a CMS EnvelopedData blob can be detected as any value that is passed to <ph id="ph1">&lt;xref:System.Security.Cryptography.Pkcs.EnvelopedCms.Decode(System.Byte[])?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For native applications, a CMS EnvelopedData blob can be detected as any value provided to a CMS handle via <bpt id="p1">[</bpt>CryptMsgUpdate<ept id="p1">](/windows/desktop/api/wincrypt/nf-wincrypt-cryptmsgupdate)</ept> whose resulting <bpt id="p2">[</bpt>CMSG_TYPE_PARAM<ept id="p2">](/windows/desktop/api/wincrypt/nf-wincrypt-cryptmsggetparam)</ept> is <ph id="ph1">`CMSG_ENVELOPED`</ph> and/or the CMS handle is later sent a <ph id="ph2">`CMSG_CTRL_DECRYPT`</ph> instruction via <bpt id="p3">[</bpt>CryptMsgControl<ept id="p3">](/windows/desktop/api/wincrypt/nf-wincrypt-cryptmsgcontrol)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Vulnerable code example - managed</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This method reads a cookie and decrypts it and no data integrity check is visible.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Therefore, the contents of a cookie that is read by this method can be attacked by the user who received it, or by any attacker who has obtained the encrypted cookie value.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Example code following recommended practices - managed</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following sample code uses a non-standard message format of</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>where the <ph id="ph1">`cipher_algorithm_id`</ph> and <ph id="ph2">`hmac_algorithm_id`</ph> algorithm identifiers are application-local (non-standard) representations of those algorithms.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>These identifiers may make sense in other parts of your existing messaging protocol instead of as a bare concatenated bytestream.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This example also uses a single master key to derive both an encryption key and an HMAC key.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This is provided both as a convenience for turning a singly-keyed application into a dual-keyed application, and to encourage keeping the two keys as different values.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It further guarantees that the HMAC key and encryption key can't get out of synchronization.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>This sample doesn't accept a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> for either encryption or decryption.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The current data format makes one-pass encrypt difficult because the <ph id="ph1">`hmac_tag`</ph> value precedes the ciphertext.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, this format was chosen because it keeps all of the fixed-size elements at the beginning to keep the parser simpler.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>With this data format, one-pass decrypt is possible, though an implementer is cautioned to call GetHashAndReset and verify the result before calling TransformFinalBlock.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If streaming encryption is important, then a different AE mode may be required.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>