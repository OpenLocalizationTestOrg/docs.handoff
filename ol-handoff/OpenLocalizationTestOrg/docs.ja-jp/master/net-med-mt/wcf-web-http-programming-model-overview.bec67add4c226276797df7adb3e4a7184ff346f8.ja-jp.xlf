<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8a899805de31bcf27a32d9ba1d5ad871a77c386</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\wcf-web-http-programming-model-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06a8809d6513c0f214fe69bc306f41ccd4d86628</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1791ad5eb753e7e2e1d7dea55b6c77a5b8b10c78</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WCF Web HTTP Programming Model Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WCF Web HTTP Programming Model Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> WEB HTTP programming model provides the basic elements required to build WEB HTTP services with <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP services are designed to be accessed by the widest range of possible clients, including Web browsers and have the following unique requirements:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>URIs and URI Processing<ept id="p1">**</ept> URIs play a central role in the design of WEB HTTP services.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model uses the <ph id="ph2">&lt;xref:System.UriTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.UriTemplateTable&gt;</ph> classes to provide URI processing capabilities.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Support for GET and POST operations<ept id="p1">**</ept> WEB HTTP services make use of the GET verb for data retrieval, in addition to various invoke verbs for data modification and remote invocation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model uses the <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> to associate service operations with both GET and other HTTP verbs like PUT, POST, and DELETE.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multiple data formats<ept id="p1">**</ept> Web-style services process many kinds of data in addition to SOAP messages.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model uses the <ph id="ph2">&lt;xref:System.ServiceModel.WebHttpBinding&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph> to support many different data formats including XML documents, JSON data object, and streams of binary content such as images, video files, or plain text.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model extends the reach of <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> to cover Web-style scenarios that include WEB HTTP services, AJAX and JSON services, and Syndication (ATOM/RSS) feeds.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> AJAX and JSON services, see <bpt id="p1">[</bpt>AJAX Integration and JSON Support<ept id="p1">](../../../../docs/framework/wcf/feature-details/ajax-integration-and-json-support.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> Syndication, see <bpt id="p1">[</bpt>WCF Syndication Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-syndication-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are no extra restrictions on the types of data that can be returned from a WEB HTTP service.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Any serializable type can be returned from an WEB HTTP service operation.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Because WEB HTTP service operations can be invoke by a web browser there is a limitation on what data types can be specified in a URL.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information on what types are supported by default see the <bpt id="p1">**</bpt>UriTemplate Query String Parameters and URLs<ept id="p1">**</ept> section below.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default behavior can be changed by providing your own T:System.ServiceModel.Dispatcher.QueryStringConverter implementation which specifies how to convert the parameters specified in a URL to the actual parameter type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Services written with the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model do not use SOAP messages.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because SOAP is not used, the security features provided by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> cannot be used.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can, however use transport-based security by hosting your service with HTTPS.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph><ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> security, see <bpt id="p1">[</bpt>Security Overview<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-overview.md)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Installing the WebDAV extension for IIS can cause Web HTTP services to return an HTTP 405 error as the WebDAV extension attempts to handle all PUT requests.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To work around this issue you can uninstall the WebDAV extension or disable the WebDAV extension for your web site.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>IIS and WebDav<ept id="p1">](http://learn.iis.net/page.aspx/357/webdav-for-iis-70/)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>URI Processing with UriTemplate and UriTemplateTable</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>URI templates provide an efficient syntax for expressing large sets of structurally similar URIs.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the following template expresses the set of all three-segment URIs that begin with "a" and end with "c" without regard to the value of the intermediate segment: a/{segment}/c</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This template describes URIs like the following:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>a/x/c</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>a/y/c</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>a/z/c</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>and so on.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this template, the curly brace notation ("{segment}") indicates a variable segment instead of a literal value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>.NET Framework provides an API for working with URI templates called <ph id="ph1">&lt;xref:System.UriTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UriTemplates`</ph> allow you to do the following:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can call one of the <ph id="ph1">`Bind`</ph> methods with a set of parameters to produce a <bpt id="p1">*</bpt>fully-closed URI<ept id="p1">*</ept> that matches the template.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This means all variables within the URI template are replaced with actual values.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`Match`</ph>() with a candidate URI, which uses a template to break up a candidate URI into its constituent parts and returns a dictionary that contains the different parts of the URI labeled according to the variables in the template.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Bind`</ph>() and <ph id="ph2">`Match`</ph>() are inverses so that you can call <ph id="ph3">`Match`</ph>( <ph id="ph4">`Bind`</ph>( x ) ) and come back with the same environment you started with.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There are many times (especially on the server, where dispatching a request to a service operation based on the URI is necessary) that you want to keep track of a set of <ph id="ph1">&lt;xref:System.UriTemplate&gt;</ph> objects in a data structure that can independently address each of the contained templates.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UriTemplateTable&gt;</ph> represents a set of URI templates and selects the best match given a set of templates and a candidate URI.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This is not affiliated with any particular networking stack (<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> included) so you can use it wherever necessary.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Service Model makes use of <ph id="ph2">&lt;xref:System.UriTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.UriTemplateTable&gt;</ph> to associate service operations with a set of URIs described by a <ph id="ph4">&lt;xref:System.UriTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A service operation is associated with a <ph id="ph1">&lt;xref:System.UriTemplate&gt;</ph>, using either the <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> or the <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph><ph id="ph2">&lt;xref:System.UriTemplate&gt;</ph> and <ph id="ph3">&lt;xref:System.UriTemplateTable&gt;</ph>, see <bpt id="p1">[</bpt>UriTemplate and UriTemplateTable<ept id="p1">](../../../../docs/framework/wcf/feature-details/uritemplate-and-uritemplatetable.md)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>WebGet and WebInvoke Attributes</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP services make use of retrieval verbs (for example HTTP GET) in addition to various invoke verbs (for example HTTP POST, PUT, and DELETE).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model allows service developers to control the both the URI template and verb associated with their service operations with the <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> and the <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> allow you to control how individual operations get bound to URIs and the HTTP methods associated with those URIs.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, adding <ph id="ph1">&lt;xref:System.ServiceModel.Web.WebGetAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> in the following code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The preceding code allows you to make the following HTTP requests.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Web.WebInvokeAttribute&gt;</ph> defaults to POST but you can use it for other verbs too.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To see a complete sample of a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service that uses the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model, see <bpt id="p1">[</bpt>How to: Create a Basic WCF Web HTTP Service<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-basic-wcf-web-http-service.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>UriTemplate Query String Parameters and URLs</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Web-style services can be called from a Web browser by typing a URL that is associated with a service operation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These service operations may take query string parameters that must be specified in a string form within the URL.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following table shows the types that can be passed within a URL and the format used.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Format</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>0 - 255</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>-128 - 127</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>-32768 - 32767</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>-2,147,483,648 - 2,147,483,647</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>-9,223,372,036,854,775,808 - 9,223,372,036,854,775,807</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>0 - 65535</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>0 - 4,294,967,295</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>0 - 18,446,744,073,709,551,615</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>-3.402823e38 - 3.402823e38 (exponent notation is not required)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>-1.79769313486232e308 - 1.79769313486232e308 (exponent notation is not required)</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Any single character</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Any decimal in standard notation (no exponent)</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>True or False (case insensitive)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Any string (null string is not supported and no escaping is done)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>MM/DD/YYYY</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>MM/DD/YYYY HH:MM:SS [AM&amp;#124;PM]</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Month Day Year</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Month Day Year HH:MM:SS [AM&amp;#124;PM]</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>DD.HH:MM:SS</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Where DD = Days, HH = Hours, MM = minutes, SS = Seconds</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A GUID, for example:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>936DA01F-9ABD-4d9d-80C7-02AF85C822A8</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>MM/DD/YYYY HH:MM:SS MM:SS</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Where DD = Days, HH = Hours, MM = minutes, SS = Seconds</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The enumeration value for example, which defines the enumeration as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Any of the individual enumeration values (or their corresponding integer values) may be specified in the query string.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Types that have a <ph id="ph1">`TypeConverterAttribute`</ph> that can convert the type to and from a string representation.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Depends on the Type Converter.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Formats and the WCF WEB HTTP Programming Model</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model has new features to work with many different data formats.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>At the binding layer, the <ph id="ph1">&lt;xref:System.ServiceModel.WebHttpBinding&gt;</ph> can read and write the following different kinds of data:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>XML</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>JSON</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Opaque binary streams</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This means the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model can handle any type of data but, you may be programming against <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[netfx35_short](../../../../includes/netfx35-short-md.md)]</ph> provides support for JSON data (AJAX) as well as Syndication feeds (including ATOM and RSS).</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> these features, see <bpt id="p1">[</bpt>WCF Web HTTP Formatting<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-formatting.md)</ept><bpt id="p2">[</bpt>WCF Syndication Overview<ept id="p2">](../../../../docs/framework/wcf/feature-details/wcf-syndication-overview.md)</ept> and <bpt id="p3">[</bpt>AJAX Integration and JSON Support<ept id="p3">](../../../../docs/framework/wcf/feature-details/ajax-integration-and-json-support.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>WCF WEB HTTP Programming Model and Security</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP programming model does not support the WS-* protocols, the only way to secure a <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> WEB HTTP service is to expose the service over HTTPS using SSL.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> setting up SSL with <ph id="ph2">[!INCLUDE[iisver](../../../../includes/iisver-md.md)]</ph>, see <bpt id="p1">[</bpt>How to implement SSL in IIS<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=131613)</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Troubleshooting the WCF WEB HTTP Programming Model</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When calling WCF WEB HTTP services using a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase%601&gt;</ph> to create a channel, the <ph id="ph2">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph> uses the <ph id="ph3">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> set in the configuration file even if a different <ph id="ph4">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> is passed to the <ph id="ph5">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Syndication<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-syndication.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WCF Web HTTP Programming Object Model<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-object-model.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WCF Web HTTP Programming Model<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>