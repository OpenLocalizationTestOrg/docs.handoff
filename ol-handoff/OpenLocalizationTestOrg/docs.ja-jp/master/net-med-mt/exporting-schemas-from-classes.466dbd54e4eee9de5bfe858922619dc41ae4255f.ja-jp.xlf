<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="exporting-schemas-from-classes.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9523fb2c321c7abcbfc1f789b9684a84f4ca9cd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\exporting-schemas-from-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a037bef8ac4076dcb6a271a8727cafeeae43e7b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">867d3218cf629459208a712824f18150883fed5b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Exporting Schemas from Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exporting Schemas from Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To generate XML Schema definition language (XSD) schemas from classes that are used in the data contract model, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic describes the process for creating schemas.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Export Process</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The schema export process starts with one or more types and produces an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> that describes the XML projection of these types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`XmlSchemaSet`</ph> is part of the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph>â€™s Schema Object Model (SOM) that represents a set of XSD Schema documents.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To create XSD documents from an <ph id="ph1">`XmlSchemaSet`</ph>, use the collection of schemas from the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A&gt;</ph> property of the <ph id="ph3">`XmlSchemaSet`</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Then serialize each <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> object using the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To export schemas</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create an instance of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Pass an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> in the constructor.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this case, the schema generated during the schema export is added to this <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> instance instead of starting with a blank <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Call one of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter.CanExport%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The method determines whether the specified type can be exported.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The method has the same overloads as the <ph id="ph1">`Export`</ph> method in the next step.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Call one of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter.Export%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There are three overloads taking a <ph id="ph1">&lt;xref:System.Type&gt;</ph>, a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id="ph3">`Type`</ph> objects, or a <ph id="ph4">&lt;xref:System.Collections.Generic.List%601&gt;</ph> of <ph id="ph5">&lt;xref:System.Reflection.Assembly&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the last case, all types in all the given assemblies are exported.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Multiple calls to the <ph id="ph1">`Export`</ph> method results in multiple items being added to the same <ph id="ph2">`XmlSchemaSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A type is not generated into the <ph id="ph1">`XmlSchemaSet`</ph> if it already exists there.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, calling <ph id="ph1">`Export`</ph> multiple times on the same <ph id="ph2">`XsdDataContractExporter`</ph> is preferable to creating multiple instances of the <ph id="ph3">`XsdDataContractExporter`</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This avoids duplicate schema types from being generated.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If there is a failure during export, the <ph id="ph1">`XmlSchemaSet`</ph> will be in an unpredictable state.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Access the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> through the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter.Schemas%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Export Options</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can set the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter.Options%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter&gt;</ph> to an instance of the <ph id="ph3">&lt;xref:System.Runtime.Serialization.ExportOptions&gt;</ph> class to control various aspects of the export process.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specifically, you can set the following options:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.ExportOptions.KnownTypes%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This collection of <ph id="ph1">`Type`</ph> represents the known types for the types being exported.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.) These known types are exported on every <ph id="ph2">`Export`</ph> call in addition to the types passed to the <ph id="ph3">`Export`</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Runtime.Serialization.IDataContractSurrogate&gt;</ph> can be supplied through this property that will customize the export process.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Data Contract Surrogates<ept id="p1">](../../../../docs/framework/wcf/extending/data-contract-surrogates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>By default, no surrogate is used.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Helper Methods</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In addition to its primary role of exporting schema, the <ph id="ph1">`XsdDataContractExporter`</ph> provides several useful helper methods that provide information about types.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter.GetRootElementName%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This method takes a <ph id="ph1">`Type`</ph> and returns an <ph id="ph2">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph> that represents the root element name and namespace that would be used if this type were serialized as the root object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaTypeName%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This method takes a <ph id="ph1">`Type`</ph> and returns an <ph id="ph2">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph> that represents the name of the XSD schema type that would be used if this type were exported to the schema.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> types represented as anonymous types in the schema, this method returns <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.XsdDataContractExporter.GetSchemaType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This method works only with <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> types that are represented as anonymous types in the schema, and returns <ph id="ph2">`null`</ph> for all other types.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For anonymous types, this method returns an <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType&gt;</ph> that represents a given <ph id="ph2">`Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Export options affect all of these methods.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Schema Import and Export<ept id="p1">](../../../../docs/framework/wcf/feature-details/schema-import-and-export.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Importing Schema to Generate Classes<ept id="p1">](../../../../docs/framework/wcf/feature-details/importing-schema-to-generate-classes.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>