<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">324694d05017200a1d43b24e92e199d1035e2cd0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\com-wrappers.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9da44525d785b9b0c0f91784d112a6e5986a744</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">657398458fea5fe10ea8bfc26050fae7484377f8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>COM Wrappers | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>COM Wrappers</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>COM differs from the .NET Framework object model in several important ways:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Clients of COM objects must manage the lifetime of those objects; the common language runtime manages the lifetime of objects in its environment.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Clients of COM objects discover whether a service is available by requesting an interface that provides that service and getting back an interface pointer, or not.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Clients of .NET objects can obtain a description of an object's functionality using reflection.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>NET objects reside in memory managed by the .NET Framework execution environment.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The execution environment can move objects around in memory for performance reasons and update all references to the objects it moves.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Unmanaged clients, having obtained a pointer to an object, rely on the object to remain at the same location.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These clients have no mechanism for dealing with an object whose location is not fixed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To overcome these differences, the runtime provides wrapper classes to make both managed and unmanaged clients think they are calling objects within their respective environment.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Whenever your managed client calls a method on a COM object, the runtime creates a <bpt id="p1">[</bpt>runtime callable wrapper<ept id="p1">](../../../docs/framework/interop/runtime-callable-wrapper.md)</ept> (RCW).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>RCWs abstract the differences between managed and unmanaged reference mechanisms, among other things.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The runtime also creates a <bpt id="p1">[</bpt>COM callable wrapper<ept id="p1">](../../../docs/framework/interop/com-callable-wrapper.md)</ept> (CCW) to reverse the process, enabling a COM client to seamlessly call a method on a .NET object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As the following illustration shows, the perspective of the calling code determines which wrapper class the runtime creates.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>COM wrapper overview<ept id="p1">](../../../docs/framework/interop/media/bidirectional.gif "bidirectional")</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>COM wrapper overview</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In most cases, the standard RCW or CCW generated by the runtime provides adequate marshaling for calls that cross the boundary between COM and the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using custom attributes, you can optionally adjust the way the runtime represents managed and unmanaged code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Advanced COM Interoperability<ept id="p1">](http://msdn.microsoft.com/en-us/3ada36e5-2390-4d70-b490-6ad8de92f2fb)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Callable Wrapper<ept id="p1">](../../../docs/framework/interop/runtime-callable-wrapper.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>COM Callable Wrapper<ept id="p1">](../../../docs/framework/interop/com-callable-wrapper.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Customizing Standard Wrappers<ept id="p1">](http://msdn.microsoft.com/en-us/c40d089b-6a3c-41b5-a20d-d760c215e49d)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Customize Runtime Callable Wrappers<ept id="p1">](http://msdn.microsoft.com/en-us/4a4bb3da-4d60-4517-99f2-78d46a681732)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>