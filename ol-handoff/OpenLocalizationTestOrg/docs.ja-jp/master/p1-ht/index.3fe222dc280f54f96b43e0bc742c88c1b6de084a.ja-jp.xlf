<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40848d7b958c643b0ef6f0d807436cd6b8755724</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\collections\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a0ae381178c1330968d257312bc5778fbf6fd82</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d13a1a6591ba4dae9367bd2200d340d3c9cf1352</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Collections and Data Structures | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Collections and Data Structures</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Similar data can often be handled more efficiently when stored and manipulated as a collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Array?displayProperty=fullName&gt;</ph> class or the classes in the <ph id="ph2">&lt;xref:System.Collections&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Concurrent&gt;</ph>, System.Collections.Immutable namespaces to add, remove, and modify either individual elements or a range of elements in a collection.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are two main types of collections; generic collections and non-generic collections.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Generic collections were added in the .NET Framework 2.0 and provide collections that are type-safe at compile time.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because of this, generic collections typically offer better performance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Generic collections accept a type parameter when they are constructed and do not require that you cast to and from the <ph id="ph1">&lt;xref:System.Object&gt;</ph> type when you add or remove items from the collection.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In addition, most generic collections are supported in <ph id="ph1">[!INCLUDE[win8_appstore_long](../../../includes/win8-appstore-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Non-generic collections store items as <ph id="ph1">&lt;xref:System.Object&gt;</ph>, require casting, and most are not supported for <ph id="ph2">[!INCLUDE[win8_appstore_long](../../../includes/win8-appstore-long-md.md)]</ph> app development.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, you may see non-generic collections in older code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, the collections in the <ph id="ph2">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace provide efficient thread-safe operations for accessing collection items from multiple threads.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The immutable collection classes in the System.Collections.Immutable namespace (<bpt id="p1">[</bpt>NuGet package<ept id="p1">](https://www.nuget.org/packages/System.Collections.Immutable)</ept>) are inherently thread-safe because operations are performed on a copy of the original collection and the original collection cannot be modified.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Common collection features</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All collections provide methods for adding, removing or finding items in the collection.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In addition, all collections that directly or indirectly implement the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface or the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface share these features:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The ability to enumerate the collection<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>.NET Framework collections either implement <ph id="ph1">&lt;xref:System.Collections.IEnumerable?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName&gt;</ph> to enable the collection to be iterated through.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An enumerator can be thought of as a movable pointer to any element in the collection.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>foreach, in<ept id="p1">](~/docs/csharp/language-reference/keywords/foreach-in.md)</ept> statement  and the <bpt id="p2">[</bpt>For Each...Next Statement<ept id="p2">](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md)</ept> use the enumerator exposed by the <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph> method and hide the complexity of manipulating the enumerator.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In addition, any collection that implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName&gt;</ph> is considered a <bpt id="p1">*</bpt>queryable type<ept id="p1">*</ept> and can be queried with LINQ.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>LINQ queries provide a common pattern for accessing data.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>They are typically more concise and readable than standard <ph id="ph1">`foreach`</ph> loops, and provide filtering, ordering and grouping capabilities.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>LINQ queries can also improve performance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ to Objects<ept id="p1">](http://msdn.microsoft.com/library/73cafe73-37cf-46e7-bfa7-97c7eea7ced9)</ept>, <bpt id="p2">[</bpt>Parallel LINQ (PLINQ)<ept id="p2">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept> and <bpt id="p3">[</bpt>Introduction to LINQ Queries (C#)<ept id="p3">](~/docs/csharp/programming-guide/concepts/linq/introduction-to-linq-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The ability to copy the collection contents to an array<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>All collections can be copied to an array using the <bpt id="p1">**</bpt>CopyTo<ept id="p1">**</ept> method; however, the order of the elements in the new array is based on the sequence in which the enumerator returns them.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The resulting array is always one-dimensional with a lower bound of zero.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In addition, many collection classes contain the following features:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Capacity and Count properties<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The capacity of a collection is the number of elements it can contain.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The count of a collection is the number of elements it actually contains.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Some collections hide the capacity or the count or both.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Most collections automatically expand in capacity when the current capacity is reached.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The memory is reallocated, and the elements are copied from the old collection to the new one.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This reduces the code required to use the collection; however, the performance of the collection might be negatively affected.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, for <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, If <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph> is less than <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.Capacity%2A&gt;</ph>, adding an item is an O(1) operation.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the capacity needs to be increased to accommodate the new element, adding an item becomes an O(n) operation, where n is <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Count%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The best way to avoid poor performance caused by multiple reallocations is to set the initial capacity to be the estimated size of the collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Collections.BitArray&gt;</ph> is a special case; its capacity is the same as its length, which is the same as its count.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>A consistent lower bound<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The lower bound of a collection is the index of its first element.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>All indexed collections in the <ph id="ph1">&lt;xref:System.Collections&gt;</ph> namespaces have a lower bound of zero, meaning they are 0-indexed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Array&gt;</ph> has a lower bound of zero by default, but a different lower bound can be defined when creating an instance of the <bpt id="p1">**</bpt>Array<ept id="p1">**</ept> class using <ph id="ph2">&lt;xref:System.Array.CreateInstance%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Synchronization for access from multiple threads<ept id="p1">**</ept> (<ph id="ph1">&lt;xref:System.Collections&gt;</ph> classes only).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Non-generic collection types in the <ph id="ph1">&lt;xref:System.Collections&gt;</ph> namespace provide some thread safety with synchronization; typically exposed through the <ph id="ph2">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> and  <ph id="ph3">&lt;xref:System.Collections.ICollection.IsSynchronized%2A&gt;</ph> members.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These collections are not thread-safe by default.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you require scalable and efficient multi-threaded access to a collection, use one of the classes in the <ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace or consider using an immutable collection.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread-Safe Collections<ept id="p1">](../../../docs/standard/collections/thread-safe/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Choosing a collection</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In general, you should use generic collections.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following table describes some common collection scenarios and the collection classes you can use for those scenarios.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you are new to generic collections, this table will help you choose the generic collection that works the best for your task.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>I want to…</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Generic collection option(s)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Non-generic collection option(s)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Thread-safe or immutable collection option(s)</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Store items as key/value pairs for quick look-up by key</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(A collection of key/value pairs that are organize based on the hash code of the key.)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.ObjectModel.ReadOnlyDictionary%602?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Access items by index</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use items first-in-first-out (FIFO)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use data Last-In-First-Out (LIFO)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Access items sequentially</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>No recommendation</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>No recommendation</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Receive notifications when items are removed or added to the collection.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>(implements <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Specialized.INotifyCollectionChanged?displayProperty=fullName&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>No recommendation</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>No recommendation</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A sorted collection</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A set for mathematical functions</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>No recommendation</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Selecting a Collection Class<ept id="p1">](../../../docs/standard/collections/selecting-a-collection-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Describes the different collections and helps you select one for your scenario.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commonly Used Collection Types<ept id="p1">](../../../docs/standard/collections/commonly-used-collection-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Describes commonly used generic and nongeneric collection types such as <ph id="ph1">&lt;xref:System.Array?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>When to Use Generic Collections<ept id="p1">](../../../docs/standard/collections/when-to-use-generic-collections.md)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Discusses the use of generic collection types.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparisons and Sorts Within Collections<ept id="p1">](../../../docs/standard/collections/comparisons-and-sorts-within-collections.md)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Discusses the use of equality comparisons and sorting comparisons in collections.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sorted Collection Types<ept id="p1">](../../../docs/standard/collections/sorted-collection-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Describes sorted collections performance and characteristics</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hashtable and Dictionary Collection Types<ept id="p1">](../../../docs/standard/collections/hashtable-and-dictionary-collection-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Describes the features of generic and non-generic hash-based dictionary types.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread-Safe Collections<ept id="p1">](../../../docs/standard/collections/thread-safe/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Describes collection types such as <ph id="ph1">&lt;xref:System.Collections.Concurrent.BlockingCollection%601?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601?displayProperty=fullName&gt;</ph> that support safe and efficient concurrent access from multiple threads.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>System.Collections.Immutable</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Introduces the immutable collections and provides links to the collection types.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>System.Collections.Immutable</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>