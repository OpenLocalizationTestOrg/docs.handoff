<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa431c1f1f54e7c2c0d39765a8291be68388b6e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\interfaces\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3156875ac834f0e64db4663570fa16ac436fdbc5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7eaf1425c4cf6fcc0fce6330c597a2eea065b1ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Interfaces (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interfaces (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Interfaces<ept id="p1">*</ept> define the properties, methods, and events that classes can implement.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Interfaces allow you to define features as small groups of closely related properties, methods, and events; this reduces compatibility problems because you can develop enhanced implementations for your interfaces without jeopardizing existing code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can add new features at any time by developing additional interfaces and implementations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>There are several other reasons why you might want to use interfaces instead of class inheritance:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Interfaces are better suited to situations in which your applications require many possibly unrelated object types to provide certain functionality.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Interfaces are more flexible than base classes because you can define a single implementation that can implement multiple interfaces.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Interfaces are better in situations in which you do not have to inherit implementation from a base class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Interfaces are useful when you cannot use class inheritance.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, structures cannot inherit from classes, but they can implement interfaces.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Declaring Interfaces</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Interface definitions are enclosed within the <ph id="ph1">`Interface`</ph> and <ph id="ph2">`End Interface`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Following the <ph id="ph1">`Interface`</ph> statement, you can add an optional <ph id="ph2">`Inherits`</ph> statement that lists one or more inherited interfaces.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Inherits`</ph> statements must precede all other statements in the declaration except comments.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The remaining statements in the interface definition should be <ph id="ph1">`Event`</ph>, <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, <ph id="ph4">`Property`</ph>, <ph id="ph5">`Interface`</ph>, <ph id="ph6">`Class`</ph>, <ph id="ph7">`Structure`</ph>, and <ph id="ph8">`Enum`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Interfaces cannot contain any implementation code or statements associated with implementation code, such as <ph id="ph1">`End Sub`</ph> or <ph id="ph2">`End Property`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a namespace, interface statements are <ph id="ph1">`Friend`</ph> by default, but they can also be explicitly declared as <ph id="ph2">`Public`</ph> or <ph id="ph3">`Friend`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Interfaces defined within classes, modules, interfaces, and structures are <ph id="ph1">`Public`</ph> by default, but they can also be explicitly declared as <ph id="ph2">`Public`</ph>, <ph id="ph3">`Friend`</ph>, <ph id="ph4">`Protected`</ph>, or <ph id="ph5">`Private`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Shadows`</ph> keyword can be applied to all interface members.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Overloads`</ph> keyword can be applied to <ph id="ph2">`Sub`</ph>, <ph id="ph3">`Function`</ph>, and <ph id="ph4">`Property`</ph> statements declared in an interface definition.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In addition, <ph id="ph1">`Property`</ph> statements can have the <ph id="ph2">`Default`</ph>, <ph id="ph3">`ReadOnly`</ph>, or <ph id="ph4">`WriteOnly`</ph> modifiers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>None of the other modifiers—<ph id="ph1">`Public`</ph>, <ph id="ph2">`Private`</ph>, <ph id="ph3">`Friend`</ph>, <ph id="ph4">`Protected`</ph>, <ph id="ph5">`Shared`</ph>, <ph id="ph6">`Overrides`</ph>, <ph id="ph7">`MustOverride`</ph>, or <ph id="ph8">`Overridable`</ph>—are allowed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Declaration Contexts and Default Access Levels<ept id="p1">](../../../../visual-basic/language-reference/statements/declaration-contexts-and-default-access-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, the following code defines an interface with one function, one property, and one event.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Implementing Interfaces</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> reserved word <ph id="ph2">`Implements`</ph> is used in two ways.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implements`</ph> statement signifies that a class or structure implements an interface.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implements`</ph> keyword signifies that a class member or structure member implements a specific interface member.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Implements Statement</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If a class or structure implements one or more interfaces, it must include the <ph id="ph1">`Implements`</ph> statement immediately after the <ph id="ph2">`Class`</ph> or <ph id="ph3">`Structure`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implements`</ph> statement requires a comma-separated list of interfaces to be implemented by a class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The class or structure must implement all interface members using the <ph id="ph1">`Implements`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Implements Keyword</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implements`</ph> keyword requires a comma-separated list of interface members to be implemented.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Generally, only a single interface member is specified, but you can specify multiple members.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The specification of an interface member consists of the interface name, which must be specified in an implements statement within the class; a period; and the name of the member function, property, or event to be implemented.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The name of a member that implements an interface member can use any legal identifier, and it is not limited to the <ph id="ph1">`InterfaceName_MethodName`</ph> convention used in earlier versions of <ph id="ph2">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, the following code shows how to declare a subroutine named <ph id="ph1">`Sub1`</ph> that implements a method of an interface:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The parameter types and return types of the implementing member must match the interface property or member declaration in the interface.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The most common way to implement an element of an interface is with a member that has the same name as the interface, as shown in the previous example.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To declare the implementation of an interface method, you can use any attributes that are legal on instance method declarations, including <ph id="ph1">`Overloads`</ph>, <ph id="ph2">`Overrides`</ph>, <ph id="ph3">`Overridable`</ph>, <ph id="ph4">`Public`</ph>, <ph id="ph5">`Private`</ph>, <ph id="ph6">`Protected`</ph>, <ph id="ph7">`Friend`</ph>, <ph id="ph8">`Protected Friend`</ph>, <ph id="ph9">`MustOverride`</ph>, <ph id="ph10">`Default`</ph>, and <ph id="ph11">`Static`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Shared`</ph> attribute is not legal since it defines a class rather than an instance method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Implements`</ph>, you can also write a single method that implements multiple methods defined in an interface, as in the following example:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can use a private member to implement an interface member.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When a private member implements a member of an interface, that member becomes available by way of the interface even though it is not available directly on object variables for the class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Interface Implementation Examples</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Classes that implement an interface must implement all its properties, methods, and events.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example defines two interfaces.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The second interface, <ph id="ph1">`Interface2`</ph>, inherits <ph id="ph2">`Interface1`</ph> and defines an additional property and method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The next example implements <ph id="ph1">`Interface1`</ph>, the interface defined in the previous example:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The final example implements <ph id="ph1">`Interface2`</ph>, including a method inherited from <ph id="ph2">`Interface1`</ph>:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can implement a readonly property with a readwrite property (that is, you do not have to declare it readonly in the implementing class).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Implementing an interface promises to implement at least the members that the interface declares, but you can offer more functionality, such as allowing your property to be writable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Creating and Implementing Interfaces<ept id="p1">](../../../../visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Provides a detailed procedure that takes you through the process of defining and implementing your own interface.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Generic Interfaces<ept id="p1">](http://msdn.microsoft.com/library/e14322da-1db3-42f2-9a67-397daddd6b6a)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Discusses covariance and contravariance in generic interfaces and provides a list of variant generic interfaces in the .NET Framework.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>