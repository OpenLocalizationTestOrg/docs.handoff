<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ec9d6aebcb38e89aa21b86cbd005c594bf756e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\strings\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ecf37f882223c364670094cdaf72c30053bae511</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f699f5e56bb5909e267d497d22a38e8f29d27d7f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Strings (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Strings (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A string is an object of type <ph id="ph1">&lt;xref:System.String&gt;</ph> whose value is text.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Internally, the text is stored as a sequential read-only collection of <ph id="ph1">&lt;xref:System.Char&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There is no null-terminating character at the end of a C# string; therefore a C# string can contain any number of embedded null characters ('\0').</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String.Length%2A&gt;</ph> property of a string represents the number of <ph id="ph2">`Char`</ph> objects it contains, not the number of Unicode characters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To access the individual Unicode code points in a string, use the <ph id="ph1">&lt;xref:System.Globalization.StringInfo&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>string vs. System.String</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In C#, the <ph id="ph1">`string`</ph> keyword is an alias for <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`String`</ph> and <ph id="ph2">`string`</ph> are equivalent, and you can use whichever naming convention you prefer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`String`</ph> class provides many methods for safely creating, manipulating, and comparing strings.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In addition, the C# language overloads some operators to simplify common string operations.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about the keyword, see <bpt id="p1">[</bpt>string<ept id="p1">](../../../csharp/language-reference/keywords/string.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information about the type and its methods, see <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Declaring and Initializing Strings</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can declare and initialize strings in various ways, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that you do not use the <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new-operator.md)</ept> operator to create a string object except when initializing the string with an array of chars.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Initialize a string with the <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> constant value to create a new <ph id="ph2">&lt;xref:System.String&gt;</ph> object whose string is of zero length.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The string literal representation of a zero-length string is "".</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By initializing strings with the <ph id="ph1">&lt;xref:System.String.Empty&gt;</ph> value instead of <bpt id="p1">[</bpt>null<ept id="p1">](../../../csharp/language-reference/keywords/null.md)</ept>, you can reduce the chances of a <ph id="ph2">&lt;xref:System.NullReferenceException&gt;</ph> occurring.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use the static <ph id="ph1">&lt;xref:System.String.IsNullOrEmpty%28System.String%29&gt;</ph> method to verify the value of a string before you try to access it.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Immutability of String Objects</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>String objects are <bpt id="p1">*</bpt>immutable<ept id="p1">*</ept>: they cannot be changed after they have been created.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>All of the <ph id="ph1">&lt;xref:System.String&gt;</ph> methods and C# operators that appear to modify a string actually return the results in a new string object.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the following example, when the contents of <ph id="ph1">`s1`</ph> and <ph id="ph2">`s2`</ph> are concatenated to form a single string, the two original strings are unmodified.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`+=`</ph> operator creates a new string that contains the combined contents.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>That new object is assigned to the variable <ph id="ph1">`s1`</ph>, and the original object that was assigned to <ph id="ph2">`s1`</ph> is released for garbage collection because no other variable holds a reference to it.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because a string "modification" is actually a new string creation, you must use caution when you create references to strings.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you create a reference to a string, and then "modify" the original string, the reference will continue to point to the original object instead of the new object that was created when the string was modified.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code illustrates this behavior:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information about how to create new strings that are based on modifications such as search and replace operations on the original string, see <bpt id="p1">[</bpt>How to: Modify String Contents<ept id="p1">](../../../csharp/programming-guide/strings/how-to-modify-string-contents.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Regular and Verbatim String Literals</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use regular string literals when you must embed escape characters provided by C#, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use verbatim strings for convenience and better readability when the string text contains backslash characters, for example in file paths.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because verbatim strings preserve new line characters as part of the string text, they can be used to initialize multiline strings.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use double quotation marks to embed a quotation mark inside a verbatim string.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following example shows some common uses for verbatim strings:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>String Escape Sequences</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Escape sequence</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Character name</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Unicode encoding</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\\</ph>'</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Single quote</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>0x0027</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\\</ph>"</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Double quote</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>0x0022</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Backslash</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>0x005C</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>\0</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Null</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>0x0000</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>\a</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Alert</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>0x0007</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>\b</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Backspace</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>0x0008</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>\f</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Form feed</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>0x000C</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>New line</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>0x000A</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>\r</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Carriage return</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>0x000D</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>\t</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Horizontal tab</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>0x0009</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>\U</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Unicode escape sequence for surrogate pairs.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>\Unnnnnnnn</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>\u</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Unicode escape sequence</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>\u0041 = "A"</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>\v</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Vertical tab</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>0x000B</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>\x</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Unicode escape sequence similar to "\u" except with variable length.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>\x0041 = "A"</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>At compile time, verbatim strings are converted to ordinary strings with all the same escape sequences.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Therefore, if you view a verbatim string in the debugger watch window, you will see the escape characters that were added by the compiler, not the verbatim version from your source code.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For example, the verbatim string @"C:\files.txt" will appear in the watch window as "C:<ph id="ph1">\\</ph>\files.txt".</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Format Strings</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>A format string is a string whose contents can be determined dynamically at runtime.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You create a format string by using the static <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> method and embedding placeholders in braces that will be replaced by other values at runtime.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example uses a format string to output the result of each iteration of a loop:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>One overload of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method takes a format string as a parameter.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Therefore, you can just embed a format string literal without an explicit call to the method.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>However, if you use the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.WriteLine%2A&gt;</ph> method to display debug output in the Visual Studio <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window, you have to explicitly call the <ph id="ph2">&lt;xref:System.String.Format%2A&gt;</ph> method because <ph id="ph3">&lt;xref:System.Diagnostics.Trace.WriteLine%2A&gt;</ph> only accepts a string, not a format string.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For more information about format strings, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](../../../standard/base-types/formatting-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Substrings</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A substring is any sequence of characters that is contained in a string.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method to create a new string from a part of the original string.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can search for one or more occurrences of a substring by using the <ph id="ph1">&lt;xref:System.String.IndexOf%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.String.Replace%2A&gt;</ph> method to replace all occurrences of a specified substring with a new string.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">&lt;xref:System.String.Substring%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.String.Replace%2A&gt;</ph> actually returns a new string and does not modify the original string.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Search Strings Using String Methods<ept id="p1">](../../../csharp/programming-guide/strings/how-to-search-strings-using-string-methods.md)</ept> and <bpt id="p2">[</bpt>How to: Modify String Contents<ept id="p2">](../../../csharp/programming-guide/strings/how-to-modify-string-contents.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Accessing Individual Characters</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can use array notation with an index value to acquire read-only access to individual characters, as in the following example:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.String&gt;</ph> methods do not provide the functionality that you must have to modify individual characters in a string, you can use a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object to modify the individual chars "in-place", and then create a new string to store the results by using the <ph id="ph3">&lt;xref:System.Text.StringBuilder&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In the following example, assume that you must modify the original string in a particular way and then store the results for future use:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Null Strings and Empty Strings</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An empty string is an instance of a <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> object that contains zero characters.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Empty strings are used often in various programming scenarios to represent a blank text field.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can call methods on empty strings because they are valid <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Empty strings are initialized as follows:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>By contrast, a null string does not refer to an instance of a <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> object and any attempt to call a method on a null string causes a <ph id="ph2">&lt;xref:System.NullReferenceException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, you can use null strings in concatenation and comparison operations with other strings.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following examples illustrate some cases in which a reference to a null string does and does not cause an exception to be thrown:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Using StringBuilder for Fast String Creation</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>String operations in .NET are highly optimized and in most cases do not significantly impact performance.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>However, in some scenarios such as tight loops that are executing many hundreds or thousands of times, string operations can affect performance.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class creates a string buffer that offers better performance if your program performs many string manipulations.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> string also enables you to reassign individual characters, something the built-in string data type does not support.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>This code, for example, changes the content of a string without creating a new string:</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In this example, a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object is used to create a string from a set of numeric types:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Strings, Extension Methods and LINQ</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.String&gt;</ph> type implements <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you can use the extension methods defined in the <ph id="ph3">&lt;xref:System.Linq.Enumerable&gt;</ph> class on strings.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>To avoid visual clutter, these methods are excluded from IntelliSense for the <ph id="ph1">&lt;xref:System.String&gt;</ph> type, but they are available nevertheless.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">[!INCLUDE[vbteclinq](../../../csharp/includes/vbteclinq_md.md)]</ph> query expressions on strings.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ and Strings<ept id="p1">](../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Topic</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Modify String Contents<ept id="p1">](../../../csharp/programming-guide/strings/how-to-modify-string-contents.md)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Provides a code example that illustrates how to modify the contents of strings.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Concatenate Multiple Strings<ept id="p1">](../../../csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Illustrates how to use the <ph id="ph1">`+`</ph> operator and the <ph id="ph2">`Stringbuilder`</ph> class to join strings together at compile time and run time.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Compare Strings<ept id="p1">](../../../csharp/programming-guide/strings/how-to-compare-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Shows how to perform ordinal comparisons of strings.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Parse Strings Using String.Split <ept id="p1">](../../../csharp/programming-guide/strings/how-to-parse-strings-using-string-split.md)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Contains a code example that illustrates how to use the <ph id="ph1">`String.Split`</ph> method to parse strings.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Search Strings Using String Methods<ept id="p1">](../../../csharp/programming-guide/strings/how-to-search-strings-using-string-methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Explains how to use specific methods to search strings.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Search Strings Using Regular Expressions<ept id="p1">](../../../csharp/programming-guide/strings/how-to-search-strings-using-regular-expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Explains how to use regular expressions to search strings.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Determine Whether a String Represents a Numeric Value<ept id="p1">](../../../csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md)</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Shows how to safely parse a string to see whether it has a valid numeric value.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Convert a String to a DateTime<ept id="p1">](../../../csharp/programming-guide/strings/how-to-convert-a-string-to-a-datetime.md)</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Shows how to convert a string such as "01/24/2008" to a <ph id="ph1">&lt;xref:System.DateTime?displayProperty=fullName&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic String Operations<ept id="p1">](https://msdn.microsoft.com/library/a292he7t)</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Provides links to topics that use <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Text.StringBuilder?displayProperty=fullName&gt;</ph> methods to perform basic string operations.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parsing Strings<ept id="p1">](https://msdn.microsoft.com/library/b4w53z0y)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Describes how to insert characters or empty spaces into a string.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparing Strings<ept id="p1">](https://msdn.microsoft.com/library/fbh501kz)</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Includes information about how to compare strings and provides examples in C# and Visual Basic.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using the StringBuilder Class<ept id="p1">](../../../standard/base-types/stringbuilder.md)</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Describes how to create and modify dynamic string objects by using the <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ and Strings<ept id="p1">](../../../csharp/programming-guide/concepts/linq/linq-and-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Provides information about how to perform various string operations by using LINQ queries.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Provides links to topics that explain programming constructs in C#.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>