<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a580d0426038036f2e64167de8c540041c0a6b4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\interfaces\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af6e76d4f81c213fb63e37c679dc473713623491</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9e3a032d868821700afd774012b0abed5099263</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Interfaces (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interfaces (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An interface contains definitions for a group of related functionalities that a <bpt id="p1">[</bpt>class<ept id="p1">](../../../csharp/language-reference/keywords/class.md)</ept> or a <bpt id="p2">[</bpt>struct<ept id="p2">](../../../csharp/language-reference/keywords/struct.md)</ept> can implement.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By using interfaces, you can, for example, include behavior from multiple sources in a class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>That capability is important in C# because the language doesn't support multiple inheritance of classes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition, you must use an interface if you want to simulate inheritance for structs, because they can't actually inherit from another struct or class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You define an interface by using the <bpt id="p1">[</bpt>interface<ept id="p1">](../../../csharp/language-reference/keywords/interface.md)</ept> keyword, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideInheritance#47<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/interfaces_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any class or struct that implements the <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface must contain a definition for an <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method that matches the signature that the interface specifies.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>As a result, you can count on a class that implements <ph id="ph1">`IEquatable&lt;T&gt;`</ph> to contain an <ph id="ph2">`Equals`</ph> method with which an instance of the class can determine whether it's equal to another instance of the same class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The definition of <ph id="ph1">`IEquatable&lt;T&gt;`</ph> doesnâ€™t provide an implementation for <ph id="ph2">`Equals`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The interface defines only the signature.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In that way, an interface in C# is similar to an abstract class in which all the methods are abstract.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, a class or struct can implement multiple interfaces, but a class can inherit only a single class, abstract or not.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Therefore, by using interfaces, you can include behavior from multiple sources in a class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information about abstract classes, see <bpt id="p1">[</bpt>Abstract and Sealed Classes and Class Members<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Interfaces can contain methods, properties, events, indexers, or any combination of those four member types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For links to examples, see <bpt id="p1">[</bpt>Related Sections<ept id="p1">](../../../csharp/programming-guide/interfaces/index.md#BKMK_RelatedSections)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An interface can't contain constants, fields, operators, instance constructors, finalizers, or types.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Interface members are automatically public, and they can't include any access modifiers.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Members also can't be <bpt id="p1">[</bpt>static<ept id="p1">](../../../csharp/language-reference/keywords/static.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To implement an interface member, the corresponding member of the implementing class must be public, non-static, and have the same name and signature as the interface member.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When a class or struct implements an interface, the class or struct must provide an implementation for all of the members that the interface defines.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The interface itself provides no functionality that a class or struct can inherit in the way that it can inherit base class functionality.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, if a base class implements an interface, any class that's derived from the base class inherits that implementation.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows an implementation of the IEquatable&lt;T<ph id="ph1">\&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The implementing class, <ph id="ph1">`Car`</ph>, must provide an implementation of the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideInheritance#48<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/interfaces_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Properties and indexers of a class can define extra accessors for a property or indexer that's defined in an interface.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, an interface might declare a property that has a <bpt id="p1">[</bpt>get<ept id="p1">](../../../csharp/language-reference/keywords/get.md)</ept> accessor.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The class that implements the interface can declare the same property with both a <ph id="ph1">`get`</ph> and <bpt id="p1">[</bpt>set<ept id="p1">](../../../csharp/language-reference/keywords/set.md)</ept> accessor.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, if the property or indexer uses explicit implementation, the accessors must match.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about explicit implementation, see <bpt id="p1">[</bpt>Explicit Interface Implementation<ept id="p1">](../../../csharp/programming-guide/interfaces/explicit-interface-implementation.md)</ept> and <bpt id="p2">[</bpt>Interface Properties<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/interface-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Interfaces can implement other interfaces.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A class might include an interface multiple times through base classes that it inherits or through interfaces that other interfaces implement.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, the class can provide an implementation of an interface only one time and only if the class declares the interface as part of the definition of the class (<ph id="ph1">`class ClassName : InterfaceName`</ph>).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the interface is inherited because you inherited a base class that implements the interface, the base class provides the implementation of the members of the interface.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, the derived class can reimplement the interface members instead of using the inherited implementation.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A base class can also implement interface members by using virtual members.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In that case, a derived class can change the interface behavior by overriding the virtual members.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information about virtual members, see <bpt id="p1">[</bpt>Polymorphism<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Interfaces Summary</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An interface has the following properties:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An interface is like an abstract base class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Any class or struct that implements the interface must implement all its members.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An interface can't be instantiated directly.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Its members are implemented by any class or struct that implements the interface.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Interfaces can contain events, indexers, methods, and properties.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Interfaces contain no implementation of methods.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A class or struct can implement multiple interfaces.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A class can inherit a base class and also implement one or more interfaces.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicit Interface Implementation<ept id="p1">](../../../csharp/programming-guide/interfaces/explicit-interface-implementation.md)</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Explains how to create a class member thatâ€™s specific to an interface.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Explicitly Implement Interface Members<ept id="p1">](../../../csharp/programming-guide/interfaces/how-to-explicitly-implement-interface-members.md)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Provides an example of how to explicitly implement members of interfaces.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Explicitly Implement Members of Two Interfaces<ept id="p1">](../../../csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Provides an example of how to explicitly implement members of interfaces with inheritance.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_RelatedSections"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Related Sections</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interface Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/interface-properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Indexers in Interfaces<ept id="p1">](../../../csharp/programming-guide/indexers/indexers-in-interfaces.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to:  Implement Interface Events<ept id="p1">](../../../csharp/programming-guide/events/how-to-implement-interface-events.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Inheritance<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/inheritance.md)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Methods<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Polymorphism<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Abstract and Sealed Classes and Class Members<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../../../csharp/programming-guide/events/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Indexers<ept id="p1">](../../../csharp/programming-guide/indexers/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Featured Book Chapter</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interfaces<ept id="p1">](http://msdn.microsoft.com/library/orm-9780596521066-01-13.aspx)</ept> in <bpt id="p2">[</bpt>Learning C# 3.0: Master the Fundamentals of C# 3.0<ept id="p2">](http://msdn.microsoft.com/library/orm-9780596521066-01.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Inheritance<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/inheritance.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>