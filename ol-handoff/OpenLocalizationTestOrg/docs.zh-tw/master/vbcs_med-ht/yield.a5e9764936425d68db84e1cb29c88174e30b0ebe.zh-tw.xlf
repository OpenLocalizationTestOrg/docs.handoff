<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="yield.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22ef950c85b5d19141ea346a9e02d58003f45232</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\yield.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fef2b120ae5f36bcfa62fb0294db394b35932c43</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">628e048ed6baa727b8fbbc1043331196ede760af</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>yield (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>yield (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you use the <ph id="ph1">`yield`</ph> keyword in a statement, you indicate that the method, operator, or <ph id="ph2">`get`</ph> accessor in which it appears is an iterator.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`yield`</ph> to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> for an example) when you implement the <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.IEnumerator&gt;</ph> pattern for a custom collection type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example shows the two forms of the <ph id="ph1">`yield`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You use a <ph id="ph1">`yield return`</ph> statement to return each element one at a time.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You consume an iterator method by using a <bpt id="p1">[</bpt>foreach<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement or LINQ query.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each iteration of the <ph id="ph1">`foreach`</ph> loop calls the iterator method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`yield return`</ph> statement is reached in the iterator method, <ph id="ph2">`expression`</ph> is returned, and the current location in code is retained.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location the next time that the iterator function is called.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`yield break`</ph> statement to end the iteration.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about iterators, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Iterator Methods and get Accessors</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The declaration of an iterator must meet the following requirements:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The return type must be <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph>, or <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The declaration can't have any <bpt id="p1">[</bpt>ref<ept id="p1">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id="p2">[</bpt>out<ept id="p2">](../../../csharp/language-reference/keywords/out.md)</ept> parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`yield`</ph> type of an iterator that returns <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator&gt;</ph> is <ph id="ph4">`object`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the iterator returns <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>, there must be an implicit conversion from the type of the expression in the <ph id="ph3">`yield return`</ph> statement to the generic type parameter .</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can't include a <ph id="ph1">`yield return`</ph> or <ph id="ph2">`yield break`</ph> statement in methods that have the following characteristics:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Anonymous methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Methods that contain unsafe blocks.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>unsafe<ept id="p1">](../../../csharp/language-reference/keywords/unsafe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`yield return`</ph> statement can't be located in a try-catch block.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`yield return`</ph> statement can be located in the try block of a try-finally statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`yield break`</ph> statement can be located in a try block or a catch block but not a finally block.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`foreach`</ph> body (outside of the iterator method) throws an exception, a <ph id="ph2">`finally`</ph> block in the iterator method is executed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Technical Implementation</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code returns an <ph id="ph1">`IEnumerable&lt;string&gt;`</ph> from an iterator method and then iterates through its elements.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`MyIteratorMethod`</ph> doesn't execute the body of the method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Instead the call returns an <ph id="ph1">`IEnumerable&lt;string&gt;`</ph> into the <ph id="ph2">`elements`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>On an iteration of the <ph id="ph1">`foreach`</ph> loop, the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method is called for <ph id="ph3">`elements`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This call executes the body of <ph id="ph1">`MyIteratorMethod`</ph> until the next <ph id="ph2">`yield return`</ph> statement is reached.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The expression returned by the <ph id="ph1">`yield return`</ph> statement determines not only the value of the <ph id="ph2">`element`</ph> variable for consumption by the loop body but also the <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property of elements, which is an <ph id="ph4">`IEnumerable&lt;string&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>On each subsequent iteration of the <ph id="ph1">`foreach`</ph> loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a <ph id="ph2">`yield return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`foreach`</ph> loop completes when the end of the iterator method or a <ph id="ph2">`yield break`</ph> statement is reached.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example has a <ph id="ph1">`yield return`</ph> statement that's inside a <ph id="ph2">`for`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each iteration of the <ph id="ph1">`foreach`</ph> statement body in <ph id="ph2">`Process`</ph> creates a call to the <ph id="ph3">`Power`</ph> iterator function.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each call to the iterator function proceeds to the next execution of the <ph id="ph1">`yield return`</ph> statement, which occurs during the next iteration of the <ph id="ph2">`for`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The return type of the iterator method is <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph>, which is an iterator interface type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When the iterator method is called, it returns an enumerable object that contains the powers of a number.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a <ph id="ph1">`get`</ph> accessor that is an iterator.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the example, each <ph id="ph1">`yield return`</ph> statement returns an instance of a user-defined class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>foreach, in<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>