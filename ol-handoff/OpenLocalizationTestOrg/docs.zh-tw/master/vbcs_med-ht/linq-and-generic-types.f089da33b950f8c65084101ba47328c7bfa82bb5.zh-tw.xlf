<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="linq-and-generic-types.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1951d53b069104f3439aa2fe3ee3975bae0e1659</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\linq-and-generic-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b80e40c8c99f5d42fc9d7ed9c0405bda94dc454</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16c4f911f1a8d992472def0098223f8c0c31779a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>LINQ and Generic Types (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ and Generic Types (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> queries are based on generic types, which were introduced in version 2.0 of the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You do not need an in-depth knowledge of generics before you can start writing queries.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, you may want to understand two basic concepts:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you create an instance of a generic collection class such as <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, you replace the "T" with the type of objects that the list will hold.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, a list of strings is expressed as <ph id="ph1">`List&lt;string&gt;`</ph>, and a list of <ph id="ph2">`Customer`</ph> objects is expressed as <ph id="ph3">`List&lt;Customer&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A generic list is strongly typed and provides many benefits over collections that store their elements as <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you try to add a <ph id="ph1">`Customer`</ph> to a <ph id="ph2">`List&lt;string&gt;`</ph>, you will get an error at compile time.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is easy to use generic collections because you do not have to perform run-time type-casting.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is the interface that enables generic collection classes to be enumerated by using the <ph id="ph2">`foreach`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Generic collection classes support <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> just as non-generic collection classes such as <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph> support <ph id="ph3">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about generics, see <bpt id="p1">[</bpt>Generics<ept id="p1">](../../../../csharp/programming-guide/generics/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;T<ph id="ph1">\&gt;</ph> variables in LINQ Queries</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbteclinq](../../../../csharp/includes/vbteclinq_md.md)]</ph> query variables are typed as <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or a derived type such as <ph id="ph3">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you see a query variable that is typed as <ph id="ph1">`IEnumerable&lt;Customer&gt;`</ph>, it just means that the query, when it is executed, will produce a sequence of zero or more <ph id="ph2">`Customer`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Type Relationships in LINQ Query Operations<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Letting the Compiler Handle Generic Type Declarations</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you prefer, you can avoid generic syntax by using the <bpt id="p1">[</bpt>var<ept id="p1">](../../../../csharp/language-reference/keywords/var.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`var`</ph> keyword instructs the compiler to infer the type of a query variable by looking at the data source specified in the <ph id="ph2">`from`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example produces the same compiled code as the previous example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`var`</ph> keyword is useful when the type of the variable is obvious or when it is not that important to explicitly specify nested generic types such as those that are produced by group queries.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In general, we recommend that if you use <ph id="ph1">`var`</ph>, realize that it can make your code more difficult for others to read.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicitly Typed Local Variables<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Getting Started with LINQ in C#<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](../../../../csharp/programming-guide/generics/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>