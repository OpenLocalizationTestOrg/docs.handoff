<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6d073fdbb331e8620f04c343ec9f233bb6b6d45</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\covariance-contravariance\creating-variant-generic-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36fe676f2a4b2a0b6633cce4657b744a8bb7e7f0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d1cccbf99b6628c4887f0e90c306ee4ec6afd50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating Variant Generic Interfaces (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating Variant Generic Interfaces (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can declare generic type parameters in interfaces as covariant or contravariant.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Covariance<ept id="p1">*</ept> allows interface methods to have more derived return types than that defined by the generic type parameters.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Contravariance<ept id="p1">*</ept> allows interface methods to have argument types that are less derived than that specified by the generic parameters.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A generic interface that has covariant or contravariant generic type parameters is called <bpt id="p1">*</bpt>variant<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>.NET Framework 4 introduced variance support for several existing generic interfaces.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For the list of the variant interfaces in the .NET Framework, see <bpt id="p1">[</bpt>Variance in Generic Interfaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declaring Variant Generic Interfaces</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can declare variant generic interfaces by using the <ph id="ph1">`in`</ph> and <ph id="ph2">`out`</ph> keywords for generic type parameters.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> `ref`</ph> and <ph id="ph2">`out`</ph> parameters in C# cannot be variant.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Value types also do not support variance.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter covariant by using the <ph id="ph1">`out`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The covariant type must satisfy the following conditions:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type is used only as a return type of interface methods and not used as a type of method arguments.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following example, in which the type <ph id="ph1">`R`</ph> is declared covariant.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is one exception to this rule.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you have a contravariant generic delegate as a method parameter, you can use the type as a generic type parameter for the delegate.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This is illustrated by the type <ph id="ph1">`R`</ph> in the following example.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept> and <bpt id="p2">[</bpt>Using Variance for Func and Action Generic Delegates (C#)<ept id="p2">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The type is not used as a generic constraint for the interface methods.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can declare a generic type parameter contravariant by using the <ph id="ph1">`in`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The contravariant type can be used only as a type of method arguments and not as a return type of interface methods.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The contravariant type can also be used for generic constraints.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code shows how to declare a contravariant interface and use a generic constraint for one of its methods.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is also possible to support both covariance and contravariance in the same interface, but for different type parameters, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Implementing Variant Generic Interfaces</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You implement variant generic interfaces in classes by using the same syntax that is used for invariant interfaces.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code example shows how to implement a covariant interface in a generic class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Classes that implement variant interfaces are invariant.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, consider the following code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Extending Variant Generic Interfaces</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you extend a variant generic interface, you have to use the <ph id="ph1">`in`</ph> and <ph id="ph2">`out`</ph> keywords to explicitly specify whether the derived interface supports variance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The compiler does not infer the variance from the interface that is being extended.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, consider the following interfaces.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`IInvariant&lt;T&gt;`</ph> interface, the generic type parameter <ph id="ph2">`T`</ph> is invariant, whereas in <ph id="ph3">`IExtCovariant&lt;out T&gt;`</ph> the type parameter is covariant, although both interfaces extend the same interface.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The same rule is applied to contravariant generic type parameters.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can create an interface that extends both the interface where the generic type parameter <ph id="ph1">`T`</ph> is covariant and the interface where it is contravariant if in the extending interface the generic type parameter <ph id="ph2">`T`</ph> is invariant.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, if a generic type parameter <ph id="ph1">`T`</ph> is declared covariant in one interface, you cannot declare it contravariant in the extending interface, or vice versa.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Avoiding Ambiguity</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When you implement variant generic interfaces, variance can sometimes lead to ambiguity.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This should be avoided.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, if you explicitly implement the same variant generic interface with different generic type parameters in one class, it can create ambiguity.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The compiler does not produce an error in this case, but it is not specified which interface implementation will be chosen at runtime.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This could lead to subtle bugs in your code.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Consider the following code example.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this example, it is unspecified how the <ph id="ph1">`pets.GetEnumerator`</ph> method chooses between <ph id="ph2">`Cat`</ph> and <ph id="ph3">`Dog`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This could cause problems in your code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Generic Interfaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Variance for Func and Action Generic Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-for-func-and-action-generic-delegates.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>