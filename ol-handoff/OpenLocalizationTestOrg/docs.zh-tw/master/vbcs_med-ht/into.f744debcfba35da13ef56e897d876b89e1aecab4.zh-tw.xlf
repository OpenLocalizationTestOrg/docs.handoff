<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc66b297a709eea1682bc307d0cdc249bc661604</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\into.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88550d071ac75c0d11f74665cc4c44e2b54efa72</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1620337c370d318aaba93d81f9e451bcd38bf552</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>into (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>into (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`into`</ph> contextual keyword can be used to create a temporary identifier to store the results of a <bpt id="p1">[</bpt>group<ept id="p1">](../../../csharp/language-reference/keywords/group-clause.md)</ept>, <bpt id="p2">[</bpt>join<ept id="p2">](../../../csharp/language-reference/keywords/join-clause.md)</ept> or <bpt id="p3">[</bpt>select<ept id="p3">](../../../csharp/language-reference/keywords/select-clause.md)</ept> clause into a new identifier.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This identifier can itself be a generator for additional query commands.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When used in a <ph id="ph1">`group`</ph> or <ph id="ph2">`select`</ph> clause, the use of the new identifier is sometimes referred to as a <bpt id="p1">*</bpt>continuation<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example shows the use of the <ph id="ph1">`into`</ph> keyword to enable a temporary identifier <ph id="ph2">`fruitGroup`</ph> which has an inferred type of <ph id="ph3">`IGrouping`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By using the identifier, you can invoke the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> method on each group and select only those groups that contain two or more words.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#18<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/into_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The use of <ph id="ph1">`into`</ph> in a <ph id="ph2">`group`</ph> clause is only necessary when you want to perform additional query operations on each group.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>group clause<ept id="p1">](../../../csharp/language-reference/keywords/group-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For an example of the use of <ph id="ph1">`into`</ph> in a <ph id="ph2">`join`</ph> clause, see <bpt id="p1">[</bpt>join clause<ept id="p1">](../../../csharp/language-reference/keywords/join-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Keywords (LINQ)<ept id="p1">](../../../csharp/language-reference/keywords/query-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ Query Expressions<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>group clause<ept id="p1">](../../../csharp/language-reference/keywords/group-clause.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>