<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-safely-cast-by-using-as-and-is-operators.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6382859968cbf72005de0cfa6b9b0fa0d9ce1032</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\types\how-to-safely-cast-by-using-as-and-is-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ff52e1107187886dc19af2e766dbe234150fdae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">989d785dfbcf0717c2b3280f340e590c4b098b45</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Safely Cast by Using as and is Operators (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Safely Cast by Using as and is Operators (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Because objects are polymorphic, it is possible for a variable of a base class type to hold a derived type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To access the derived type's method, it is necessary to cast the value back to the derived type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, to attempt a simple cast in these cases creates the risk of throwing an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>That is why C# provides the <bpt id="p1">[</bpt>is<ept id="p1">](../../../csharp/language-reference/keywords/is.md)</ept> and <bpt id="p2">[</bpt>as<ept id="p2">](../../../csharp/language-reference/keywords/as.md)</ept> operators.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use these operators to test whether a cast will succeed without causing an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In general, the <ph id="ph1">`as`</ph> operator is more efficient because it actually returns the cast value if the cast can be made successfully.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> operator returns only a Boolean value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It can therefore be used when you just want to determine an object's type but do not have to actually cast it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following examples show how to use the <ph id="ph1">`is`</ph> and <ph id="ph2">`as`</ph> operators to cast from one reference type to another without the risk of throwing an exception.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The example also shows how to use the <ph id="ph1">`as`</ph> operator with nullable value types.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types<ept id="p1">](../../../csharp/programming-guide/types/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Casting and Type Conversions<ept id="p1">](../../../csharp/programming-guide/types/casting-and-type-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>