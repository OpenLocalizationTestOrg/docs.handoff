<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d421f0115642efa73dbeb893dba912b96d5f4dc6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\types\casting-and-type-conversions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f22d8424f751459164c88ca33dd0ddf64ad3a12a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6cef615336d85890217cc066ea106ddca7bbcbfd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Casting and Type Conversions (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Casting and Type Conversions (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Because C# is statically-typed at compile time, after a variable is declared, it cannot be declared again or used to store values of another type unless that type is convertible to the variable's type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, there is no conversion from an integer to any arbitrary string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Therefore, after you declare <ph id="ph1">`i`</ph> as an integer, you cannot assign the string "Hello" to it, as is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, you might sometimes need to copy a value into a variable or method parameter of another type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, you might have an integer variable that you need to pass to a method whose parameter is typed as <ph id="ph1">`double`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Or you might need to assign a class variable to a variable of an interface type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These kinds of operations are called <bpt id="p1">*</bpt>type conversions<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In C#, you can perform the following kinds of conversions:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implicit conversions<ept id="p1">**</ept>: No special syntax is required because the conversion is type safe and no data will be lost.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Examples include conversions from smaller to larger integral types, and conversions from derived classes to base classes.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Explicit conversions (casts)<ept id="p1">**</ept>: Explicit conversions require a cast operator.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Casting is required when information might be lost in the conversion, or when the conversion might not succeed for other reasons.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Typical examples include numeric conversion to a type that has less precision or a smaller range, and conversion of a base-class instance to a derived class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>User-defined conversions<ept id="p1">**</ept>: User-defined conversions are performed by special methods that you can define to enable explicit and implicit conversions between custom types that do not have a base classâ€“derived class relationship.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Conversion Operators<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Conversions with helper classes<ept id="p1">**</ept>: To convert between non-compatible types, such as integers and <ph id="ph1">&lt;xref:System.DateTime?displayProperty=fullName&gt;</ph> objects, or hexadecimal strings and byte arrays, you can use the <ph id="ph2">&lt;xref:System.BitConverter?displayProperty=fullName&gt;</ph> class, the <ph id="ph3">&lt;xref:System.Convert?displayProperty=fullName&gt;</ph> class, and the <ph id="ph4">`Parse`</ph> methods of the built-in numeric types, such as <ph id="ph5">&lt;xref:System.Int32.Parse%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Convert a byte Array to an int<ept id="p1">](../../../csharp/programming-guide/types/how-to-convert-a-byte-array-to-an-int.md)</ept>, <bpt id="p2">[</bpt>How to: Convert a String to a Number<ept id="p2">](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept>, and <bpt id="p3">[</bpt>How to: Convert Between Hexadecimal Strings and Numeric Types<ept id="p3">](../../../csharp/programming-guide/types/how-to-convert-between-hexadecimal-strings-and-numeric-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Implicit Conversions</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For built-in numeric types, an implicit conversion can be made when the value to be stored can fit into the variable without being truncated or rounded off.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, a variable of type <bpt id="p1">[</bpt>long<ept id="p1">](../../../csharp/language-reference/keywords/long.md)</ept> (8 byte integer) can store any value that an <bpt id="p2">[</bpt>int<ept id="p2">](../../../csharp/language-reference/keywords/int.md)</ept> (4 bytes on a 32-bit computer) can store.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the following example, the compiler implicitly converts the value on the right to a type <ph id="ph1">`long`</ph> before assigning it to <ph id="ph2">`bigNum`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#34<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/casting-and-type-conversions_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For a complete list of all implicit numeric conversions, see <bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For reference types, an implicit conversion always exists from a class to any one of its direct or indirect base classes or interfaces.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>No special syntax is necessary because a derived class always contains all the members of a base class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Explicit Conversions</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, if a conversion cannot be made without a risk of losing information, the compiler requires that you perform an explicit conversion, which is called a <bpt id="p1">*</bpt>cast<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A cast is a way of explicitly informing the compiler that you intend to make the conversion and that you are aware that data loss might occur.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To perform a cast, specify the type that you are casting to in parentheses in front of the value or variable to be converted.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following program casts a <bpt id="p1">[</bpt>double<ept id="p1">](../../../csharp/language-reference/keywords/double.md)</ept> to an <bpt id="p2">[</bpt>int<ept id="p2">](../../../csharp/language-reference/keywords/int.md)</ept>. The program will not compile without the cast.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#2<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/casting-and-type-conversions_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For a list of the explicit numeric conversions that are allowed, see <bpt id="p1">[</bpt>Explicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For reference types, an explicit cast is required if you need to convert from a base type to a derived type:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A cast operation between reference types does not change the run-time type of the underlying object; it only changes the type of the value that is being used as a reference to that object.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Polymorphism<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Type Conversion Exceptions at Run Time</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In some reference type conversions, the compiler cannot determine whether a cast will be valid.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It is possible for a cast operation that compiles correctly to fail at run time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As shown in the following example, a type cast that fails at run time will cause an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> to be thrown.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideTypes#41<ept id="p2">](../../../csharp/programming-guide/nullable-types/codesnippet/CSharp/casting-and-type-conversions_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>C# provides the <bpt id="p1">[</bpt>is<ept id="p1">](../../../csharp/language-reference/keywords/is.md)</ept> and <bpt id="p2">[</bpt>as<ept id="p2">](../../../csharp/language-reference/keywords/as.md)</ept> operators to enable you to test for compatibility before actually performing a cast.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Safely Cast by Using as and is Operators<ept id="p1">](../../../csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Types<ept id="p1">](../../../csharp/programming-guide/types/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>() Operator<ept id="p1">](../../../csharp/language-reference/operators/invocation-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>explicit<ept id="p1">](../../../csharp/language-reference/keywords/explicit.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>implicit<ept id="p1">](../../../csharp/language-reference/keywords/implicit.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conversion Operators<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/conversion-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generalized Type Conversion<ept id="p1">](http://msdn.microsoft.com/library/49253ae6-7657-4810-82ab-1176a6feeada)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exported Type Conversion<ept id="p1">](http://msdn.microsoft.com/en-us/1dfe55f4-07a2-4b61-aabf-a8cf65783a6b)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Convert a String to a Number<ept id="p1">](../../../csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>