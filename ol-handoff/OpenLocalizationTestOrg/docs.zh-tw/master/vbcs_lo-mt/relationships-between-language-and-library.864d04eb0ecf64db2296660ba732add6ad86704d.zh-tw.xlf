<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="relationships-between-language-and-library.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfae7972af0a251a92700d7d33bd6f971eb1870e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\whats-new\relationships-between-language-and-library.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11e0848ebeb89387b54a0fc6f710da38c5f98751</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76e77138e5da09385180b12013867508fc8b57e8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>The relationship between language features and library types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Language features often rely on library types for implementation.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Understand that relationship.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Relationships between language features and library types</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The C# language definition requires a standard library to have certain types and certain accessible members on those types.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The compiler generates code that uses these required types and members for many different language features.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When necessary, there are NuGet packages that contain types needed for newer versions of the language when writing code for environments where those types or members have not been deployed yet.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This dependency on standard library functionality has been part of the C# language since its first version.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In that version, examples included:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Exception&gt;</ph> - used for all compiler generated exceptions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String&gt;</ph> - the C# <ph id="ph2">`string`</ph> type is a synonym for <ph id="ph3">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int32&gt;</ph> - synonym of <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>That first version was simple: the compiler and the standard library shipped together, and there was only one version of each.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Subsequent versions of C# have occasionally added new types or members to the dependencies.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Examples include: <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.INotifyCompletion&gt;</ph>, <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.CallerFilePathAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.CompilerServices.CallerMemberNameAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>C# 7.0 continues this by adding a dependency on <ph id="ph1">&lt;xref:System.ValueTuple&gt;</ph> to implement the <bpt id="p1">[</bpt>tuples<ept id="p1">](../tuples.md)</ept> language feature.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The language design team works to minimize the surface area of the types and members required in a compliant standard library.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>That goal is balanced against a clean design where new library features are incorporated seamlessly into the language.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>There will be new features in future versions of C# that require new types and members in a standard library.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It's important to understand how to manage those dependencies in your work.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Managing your dependencies</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>C# compiler tools are now decoupled from the release cycle of the .NET libraries on supported platforms.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In fact, different .NET libraries have different release cycles: the .NET Framework on Windows is released as a Windows Update, .NET Core ships on a separate schedule, and the Xamarin versions of library updates ship with the Xamarin tools for each target platform.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The majority of time, you won't notice these changes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, when you are working with a newer version of the language that requires features not yet in the .NET libraries on that platform, you'll reference the NuGet packages to provide those new types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As the platforms your app supports are updated with new framework installations, you can remove the extra reference.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This separation means you can use new language features even when you are targeting machines that may not have the corresponding framework.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>