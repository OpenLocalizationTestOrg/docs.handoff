<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e51c0bbbd64e6be64e2389d5efe90792e9106c7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\linq\linq-to-xml-security.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b945c7f52ed5fb4d20bbff8418d20e999f056852</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">69b11564e33037fecb602325ee5331c54238dde3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes security issues associated with LINQ to XML.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In addition, it provides some guidance for mitigating security exposure.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security Overview</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>LINQ to XML is designed more for programming convenience than for server-side applications with stringent security requirements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Most XML scenarios consist of processing trusted XML documents, rather than processing untrusted XML documents that are uploaded to a server.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LINQ to XML is optimized for these scenarios.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you must process untrusted data from unknown sources, Microsoft recommends that you use an instance of the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> class that has been configured to filter out known XML denial of service (DoS) attacks.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you have configured an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> to mitigate denial of service attacks, you can use that reader to populate a LINQ to XML tree and still benefit from the programmer productivity enhancements of LINQ to XML.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Many mitigation techniques involve creating readers that are configured to mitigate the security issue, and then instantiating an XML tree through the configured reader.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>XML is intrinsically vulnerable to denial of service attacks because documents are unbounded in size, depth, element name size, and more.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Regardless of the component that you use to process XML, you should always be prepared to recycle the application domain if it uses excessive resources.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Mitigation of XML, XSD, XPath, and XSLT Attacks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>LINQ to XML is built upon <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>LINQ to XML supports XSD and XPath through extension methods in the <ph id="ph1">&lt;xref:System.Xml.Schema?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XPath?displayProperty=fullName&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xml.XmlWriter&gt;</ph> classes in conjunction with LINQ to XML, you can invoke XSLT to transform XML trees.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you are operating in a less secure environment, there are a number of security issues that are associated with XML and the use of the classes in <ph id="ph1">&lt;xref:System.Xml?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.Schema?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XPath?displayProperty=fullName&gt;</ph>, and <ph id="ph4">&lt;xref:System.Xml.Xsl?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These issues include, but are not limited to, the following:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>XSD, XPath, and XSLT are string-based languages in which you can specify operations that consume a lot of time or memory.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is the responsibility of application programmers who take XSD, XPath, or XSLT strings from untrusted sources to validate that the strings are not malicious, or to monitor and mitigate the possibility that evaluating these strings will lead to excessive system resource consumption.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>XSD schemas (including inline schemas) are inherently vulnerable to denial of service attacks; you should not accept schemas from untrusted sources.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>XSD and XSLT can include references to other files, and such references can result in cross-zone and cross-domain attacks.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>External entities in DTDs can result in cross-zone and cross-domain attacks.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>DTDs are vulnerable to denial of service attacks.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Exceptionally deep XML documents can pose denial of service issues; you might want to limit the depth of XML documents.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Do not accept supporting components, such as <ph id="ph1">&lt;xref:System.Xml.NameTable&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlNamespaceManager&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xml.XmlResolver&gt;</ph> objects, from untrusted assemblies.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Read data in chunks to mitigate large document attacks.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Script blocks in XSLT style sheets can expose a number of attacks.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Validate carefully before constructing dynamic XPath expressions.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>LINQ to XML Security Issues</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The security issues in this topic are not presented in any particular order.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>All issues are important and should be addressed as appropriate.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A successful elevation of privilege attack gives a malicious assembly more control over its environment.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A successful elevation of privilege attack can result in disclosure of data, denial of service, and more.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Applications should not disclose data to users who are not authorized to see that data.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Denial of service attacks cause the XML parser or LINQ to XML to consume excessive amounts of memory or CPU time.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Denial of service attacks are considered to be less severe than elevation of privilege attacks or disclosure of data attacks.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, they are important in a scenario where a server needs to process XML documents from untrusted sources.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Exceptions and Error Messages Might Reveal Data</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The description of an error might reveal data, such as the data being transformed, file names, or implementation details.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Error messages should not be exposed to callers that are not trusted.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You should catch all errors and report errors with your own custom error messages.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Do Not Call CodeAccessPermissions.Assert in an Event Handler</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An assembly can have lesser or greater permissions.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An assembly that has greater permissions has greater control over the computer and its environments.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If code in an assembly with greater permissions calls <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt;</ph> in an event handler, and then the XML tree is passed to a malicious assembly that has restricted permissions, the malicious assembly can cause an event to be raised.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Because the event runs code that is in the assembly with greater permissions, the malicious assembly would then be operating with elevated privileges.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Microsoft recommends that you never call <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.Assert%2A?displayProperty=fullName&gt;</ph> in an event handler.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DTDs are Not Secure</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Entities in DTDs are inherently not secure.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It is possible for a malicious XML document that contains a DTD to cause the parser to use all memory and CPU time, causing a denial of service attack.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Therefore, in LINQ to XML, DTD processing is turned off by default.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You should not accept DTDs from untrusted sources.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>One example of accepting DTDs from untrusted sources is a Web application that allows Web users to upload an XML file that references a DTD and a DTD file.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Upon validation of the file, a malicious DTD could execute a denial of service attack on your server.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Another example of accepting DTDs from untrusted sources is to reference a DTD on a network share that also allows anonymous FTP access.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Avoid Excessive Buffer Allocation</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Application developers should be aware that extremely large data sources can lead to resource exhaustion and denial of service attacks.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If a malicious user submits or uploads a very large XML document, it could cause LINQ to XML to consume excessive system resources.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This can constitute a denial of service attack.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To prevent this, you can set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt;</ph> property, and create a reader that is then limited in the size of document that it can load.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You then use the reader to create the XML tree.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, if you know that the maximum expected size of your XML documents coming from an untrusted source will be less than 50K bytes, set <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=fullName&gt;</ph> to 100,000.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This will not encumber your processing of XML documents, and at the same time it will mitigate denial of service threats where documents might be uploaded that would consume large amounts of memory.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Avoid Excess Entity Expansion</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>One of the known denial of service attacks when using a DTD is a document that causes excessive entity expansion.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To prevent this, you can set the <ph id="ph1">&lt;xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=fullName&gt;</ph> property, and create a reader that is then limited in the number of characters that result from entity expansion.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You then use the reader to create the XML tree.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Limit the Depth of the XML Hierarchy</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>One possible denial of service attack is when a document is submitted that has excessive depth of hierarchy.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To prevent this, you can wrap a <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> in your own class that counts the depth of elements.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If the depth exceeds a predetermined reasonable level, you can terminate the processing of the malicious document.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Protect Against Untrusted XmlReader or XmlWriter Implementations</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Administrators should verify that any externally supplied <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> implementations have strong names and have been registered in the machine configuration.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This prevents malicious code masquerading as a reader or writer from being loaded.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Periodically Free Objects that Reference XName</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To protect against certain kinds of attacks, application programmers should free all objects that reference an <ph id="ph1">&lt;xref:System.Xml.Linq.XName&gt;</ph> object in the application domain on a regular basis.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Protect Against Random XML Names</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Applications that take data from untrusted sources should consider using an <ph id="ph1">&lt;xref:System.Xml.XmlReader&gt;</ph> that is wrapped in custom code to inspect for the possibility of random XML names and namespaces.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If such random XML names and namespaces are detected, the application can then terminate the processing of the malicious document.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You might want to limit the number of names in any given namespace (including names in no namespace) to a reasonable limit.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Annotations Are Accessible by Software Components that Share a LINQ to XML Tree</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>LINQ to XML could be used to build processing pipelines in which different application components load, validate, query, transform, update, and save XML data that is passed between components as XML trees.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This can help optimize performance, because the overhead of loading and serializing objects to XML text is done only at the ends of the pipeline.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Developers must be aware, however, that all annotations and event handlers created by one component are accessible to other components.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This can create a number of vulnerabilities if the components have different levels of trust.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To build secure pipelines across less trusted components, you must serialize LINQ to XML objects to XML text before passing the data to an untrusted component.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Some security is provided by the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example, a component that does not include a private class cannot access annotations keyed by that class.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>However, annotations can be deleted by components that cannot read them.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This could be used as a tampering attack.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming Guide (LINQ to XML) (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/linq/programming-guide-linq-to-xml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>