<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7013f49d5ede3d5c2f9c281b2374f38389ecf5ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\auto-implemented-properties.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b581ef489aba6987236a801414aeed8f24e5d9ee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f157ef2386beed78adcd441647f84ccacc8d7f6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Auto-Implemented Properties (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Auto-Implemented Properties (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Auto-implemented properties<ept id="p1">*</ept> enable you to quickly specify a property of a class without having to write code to <ph id="ph1">`Get`</ph> and <ph id="ph2">`Set`</ph> the property.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you write code for an auto-implemented property, the Visual Basic compiler automatically creates a private field to store the property variable in addition to creating the associated <ph id="ph1">`Get`</ph> and <ph id="ph2">`Set`</ph> procedures.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>With auto-implemented properties, a property, including a default value, can be declared in a single line.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example shows three property declarations.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAutoImplementedProperties#1<ept id="p2">](./codesnippet/VisualBasic/auto-implemented-properties_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An auto-implemented property is equivalent to a property for which the property value is stored in a private field.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following code example shows an auto-implemented property.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAutoImplementedProperties#5<ept id="p2">](./codesnippet/VisualBasic/auto-implemented-properties_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following code example shows the equivalent code for the previous auto-implemented property example.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAutoImplementedProperties#2<ept id="p2">](./codesnippet/VisualBasic/auto-implemented-properties_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code show implementing readonly properties:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can assign to the property with initialization expressions as shown in the example, or you can assign to the properties in the containing typeâ€™s constructor.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can assign to the backing fields of readonly properties at any time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Backing Field</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you declare an auto-implemented property, Visual Basic automatically creates a hidden private field called the <bpt id="p1">*</bpt>backing field<ept id="p1">*</ept> to contain the property value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The backing field name is the auto-implemented property name preceded by an underscore (_).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, if you declare an auto-implemented property named <ph id="ph1">`ID`</ph>, the backing field is named <ph id="ph2">`_ID`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you include a member of your class that is also named <ph id="ph1">`_ID`</ph>, you produce a naming conflict and Visual Basic reports a compiler error.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The backing field also has the following characteristics:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The access modifier for the backing field is always <ph id="ph1">`Private`</ph>, even when the property itself has a different access level, such as <ph id="ph2">`Public`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the property is marked as <ph id="ph1">`Shared`</ph>, the backing field also is shared.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Attributes specified for the property do not apply to the backing field.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The backing field can be accessed from code within the class and from debugging tools such as the Watch window.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, the backing field does not show in an IntelliSense word completion list.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Initializing an Auto-Implemented Property</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Any expression that can be used to initialize a field is valid for initializing an auto-implemented property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you initialize an auto-implemented property, the expression is evaluated and passed to the <ph id="ph1">`Set`</ph> procedure for the property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code examples show some auto-implemented properties that include initial values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAutoImplementedProperties#3<ept id="p2">](./codesnippet/VisualBasic/auto-implemented-properties_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You cannot initialize an auto-implemented property that is a member of an <ph id="ph1">`Interface`</ph>, or one that is marked <ph id="ph2">`MustOverride`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you declare an auto-implemented property as a member of a <ph id="ph1">`Structure`</ph>, you can only initialize the auto-implemented property if it is marked as <ph id="ph2">`Shared`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you declare an auto-implemented property as an array, you cannot specify explicit array bounds.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, you can supply a value by using an array initializer, as shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrAutoImplementedProperties#4<ept id="p2">](./codesnippet/VisualBasic/auto-implemented-properties_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Property Definitions That Require Standard Syntax</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Auto-implemented properties are convenient and support many programming scenarios.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, there are situations in which you cannot use an auto-implemented property and must instead use standard, or <bpt id="p1">*</bpt>expanded<ept id="p1">*</ept>, property syntax.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You have to use expanded property-definition syntax if you want to do any one of the following:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Add code to the <ph id="ph1">`Get`</ph> or <ph id="ph2">`Set`</ph> procedure of a property, such as code to validate incoming values in the <ph id="ph3">`Set`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, you might want to verify that a string that represents a telephone number contains the required number of numerals before setting the property value.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Specify different accessibility for the <ph id="ph1">`Get`</ph> and <ph id="ph2">`Set`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, you might want to make the <ph id="ph1">`Set`</ph> procedure <ph id="ph2">`Private`</ph> and the <ph id="ph3">`Get`</ph> procedure <ph id="ph4">`Public`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Create properties that are <ph id="ph1">`WriteOnly`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Use parameterized properties (including <ph id="ph1">`Default`</ph> properties).</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You must declare an expanded property in order to specify a parameter for the property, or to specify additional parameters for the <ph id="ph1">`Set`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Place an attribute on the backing field, or change the access level of the backing field.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Provide XML comments for the backing field.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Expanding an Auto-Implemented Property</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you have to convert an auto-implemented property to an expanded property that contains a <ph id="ph1">`Get`</ph> or <ph id="ph2">`Set`</ph> procedure, the Visual Basic Code Editor can automatically generate the <ph id="ph3">`Get`</ph> and <ph id="ph4">`Set`</ph> procedures and <ph id="ph5">`End Property`</ph> statement for the property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The code is generated if you put the cursor on a blank line following the <ph id="ph1">`Property`</ph> statement, type a <ph id="ph2">`G`</ph> (for <ph id="ph3">`Get`</ph>) or an <ph id="ph4">`S`</ph> (for <ph id="ph5">`Set`</ph>) and press ENTER.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The Visual Basic Code Editor automatically generates the <ph id="ph1">`Get`</ph> or <ph id="ph2">`Set`</ph> procedure for read-only and write-only properties when you press ENTER at the end of a <ph id="ph3">`Property`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare and Call a Default Property in Visual Basic<ept id="p1">](./how-to-declare-and-call-a-default-property.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Declare a Property with Mixed Access Levels<ept id="p1">](./how-to-declare-a-property-with-mixed-access-levels.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/property-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ReadOnly<ept id="p1">](../../../../visual-basic/language-reference/modifiers/readonly.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WriteOnly<ept id="p1">](../../../../visual-basic/language-reference/modifiers/writeonly.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Objects and Classes<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>