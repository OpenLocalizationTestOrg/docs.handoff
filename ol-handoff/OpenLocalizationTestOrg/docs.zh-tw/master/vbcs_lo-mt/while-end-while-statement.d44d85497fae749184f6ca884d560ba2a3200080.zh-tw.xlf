<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cec1165abfeb756d8e20df7ca5c6d6e4a577dc6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\while-end-while-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51df4c896d30f6f704f55974c258b98fb763f6cb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb9f32a4e5033770646ca77af01cde23e7b44be7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>While...End While Statement (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>While...End While Statement (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Runs a series of statements as long as a given condition is <ph id="ph1">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parts</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Boolean`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> is <ph id="ph2">`Nothing`</ph>, Visual Basic treats it as <ph id="ph3">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>One or more statements following <ph id="ph1">`While`</ph>, which run every time <ph id="ph2">`condition`</ph> is <ph id="ph3">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Transfers control to the next iteration of the <ph id="ph1">`While`</ph> block.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Transfers control out of the <ph id="ph1">`While`</ph> block.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Terminates the definition of the <ph id="ph1">`While`</ph> block.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`While...End While`</ph> structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you want more flexibility with where you test the condition or what result you test it for, you might prefer the <bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you want to repeat the statements a set number of times, the <bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept> is usually a better choice.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`While`</ph> keyword is also used in the <bpt id="p1">[</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept>, the <bpt id="p2">[</bpt>Skip While Clause<ept id="p2">](../../../visual-basic/language-reference/queries/skip-while-clause.md)</ept> and the <bpt id="p3">[</bpt>Take While Clause<ept id="p3">](../../../visual-basic/language-reference/queries/take-while-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> is <ph id="ph2">`True`</ph>, all of the <ph id="ph3">`statements`</ph> run until the <ph id="ph4">`End While`</ph> statement is encountered.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Control then returns to the <ph id="ph1">`While`</ph> statement, and <ph id="ph2">`condition`</ph> is again checked.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> is still <ph id="ph2">`True`</ph>, the process is repeated.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If it’s <ph id="ph1">`False`</ph>, control passes to the statement that follows the <ph id="ph2">`End While`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`While`</ph> statement always checks the condition before it starts the loop.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Looping continues while the condition remains <ph id="ph1">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`condition`</ph> is <ph id="ph2">`False`</ph> when you first enter the loop, it doesn’t run even once.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`condition`</ph> usually results from a comparison of two values, but it can be any expression that evaluates to a <bpt id="p1">[</bpt>Boolean Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept> value (<ph id="ph2">`True`</ph> or <ph id="ph3">`False`</ph>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This expression can include a value of another data type, such as a numeric type, that has been converted to <ph id="ph1">`Boolean`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can nest <ph id="ph1">`While`</ph> loops by placing one loop within another.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can also nest different kinds of control structures within one another.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Exit While</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Exit While<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept> statement can provide another way to exit a <ph id="ph1">`While`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Exit While`</ph> immediately transfers control to the statement that follows the <ph id="ph2">`End While`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You typically use <ph id="ph1">`Exit While`</ph> after some condition is evaluated (for example, in an <ph id="ph2">`If...Then...Else`</ph> structure).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Exit While`</ph> when you test for a condition that could cause an <bpt id="p1">*</bpt>endless loop<ept id="p1">*</ept>, which is a loop that could run an extremely large or even infinite number of times.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can then use <ph id="ph1">`Exit While`</ph> to escape the loop.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can place any number of <ph id="ph1">`Exit While`</ph> statements anywhere in the <ph id="ph2">`While`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When used within nested <ph id="ph1">`While`</ph> loops, <ph id="ph2">`Exit While`</ph> transfers control out of the innermost loop and into the next higher level of nesting.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Continue While`</ph> statement immediately transfers control to the next iteration of the loop.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Continue Statement<ept id="p1">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the following example, the statements in the loop continue to run until the <ph id="ph1">`index`</ph> variable is greater than 10.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#171<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the <ph id="ph1">`Continue While`</ph> and <ph id="ph2">`Exit While`</ph> statements.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#172<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example reads all lines in a text file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.File.OpenText%2A&gt;</ph> method opens the file and returns a <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> that reads the characters.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`While`</ph> condition, the <ph id="ph2">&lt;xref:System.IO.StreamReader.Peek%2A&gt;</ph> method of the <ph id="ph3">`StreamReader`</ph> determines whether the file contains additional characters.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrStatements#173<ept id="p2">](../../../visual-basic/language-reference/error-messages/codesnippet/VisualBasic/while-end-while-statement_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loop Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Do...Loop Statement<ept id="p1">](../../../visual-basic/language-reference/statements/do-loop-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>For...Next Statement<ept id="p1">](../../../visual-basic/language-reference/statements/for-next-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Boolean Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/boolean-data-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Nested Control Structures<ept id="p1">](../../../visual-basic/programming-guide/language-features/control-flow/nested-control-structures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exit Statement<ept id="p1">](../../../visual-basic/language-reference/statements/exit-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Continue Statement<ept id="p1">](../../../visual-basic/language-reference/statements/continue-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>