<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="support-for-windows-store-apps-and-windows-runtime.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0727071ba8b1edb8d27b7b0e8eeb625015aab7d8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\cross-platform\support-for-windows-store-apps-and-windows-runtime.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3470eb554f3b9c8f7ebbc384b687299dfe0d820a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bab9c1884b3edd3891f9aa3a9af3ec25831274c7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>.NET Framework Support for Windows Store Apps and Windows Runtime | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>.NET Framework Support for Windows Store Apps and Windows Runtime</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph> supports a number of software development scenarios with the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These scenarios fall into three categories:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Developing <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps with XAML controls, as described in <bpt id="p1">[</bpt>Roadmap for Windows Store apps using C# or Visual Basic<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkID=242212)</ept>, <bpt id="p2">[</bpt>Developing Windows Store apps (VB/C#/C++ and XAML)<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=238311)</ept>, and <bpt id="p3">[</bpt>.NET for Windows Store apps overview<ept id="p3">](http://go.microsoft.com/fwlink/p/?LinkId=238312)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Developing class libraries to use in the <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps that you create with the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Developing <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> Components, packaged in .WinMD files, which can be used by any programming language that supports the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, see <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238313)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This topic outlines the support that the .NET Framework provides for all three categories, and describes the scenarios for <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> Components.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first section includes basic information about the relationship between the .NET Framework and the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>, and explains some oddities you might encounter in the Help system and the IDE.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>second section<ept id="p1">](#WindowsRuntimeComponents)</ept> discusses scenarios for developing <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> Components.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Basics</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The .NET Framework supports the three development scenarios listed earlier by providing <ph id="ph1">[!INCLUDE[net_win8_profile](../../../includes/net-win8-profile-md.md)]</ph>, and by supporting the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> itself.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET for Windows Store apps<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=247912)</ept> provides a streamlined view of the .NET Framework class libraries and include only the types and members you can use to create <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps and <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> Components.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When you use Visual Studio (<ph id="ph1">[!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)]</ph> or later) to develop a <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app or a <ph id="ph3">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component, a set of reference assemblies ensures that you see only the relevant types and members.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This streamlined API set is simplified further by the removal of features that are duplicated within the .NET Framework or that duplicate <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> features.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, it contains only the generic versions of collection types, and the XML document object model is eliminated in favor of the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> XML API set.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Features that simply wrap the operating system API are also removed, because the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> is easy to call from managed code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To read more about the <ph id="ph1">[!INCLUDE[net_win8_profile](../../../includes/net-win8-profile-md.md)]</ph>, see the <bpt id="p1">[</bpt>.NET for Windows Store apps overview<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238312)</ept> in the Windows Dev Center.To read about the API selection process, see the <bpt id="p2">[</bpt>.NET for Windows Store apps<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=251061)</ept> entry in the .NET blog.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Windows Runtime<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238319)</ept> provides the user interface elements for building <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps, and provides access to operating system features.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Like the .NET Framework, the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> has metadata that enables the C# and Visual Basic compilers to use the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> the way they use the .NET Framework class libraries.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The .NET Framework makes it easier to use the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> by hiding some differences:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Some differences in programming patterns between the .NET Framework and the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>, such as the pattern for adding and removing event handlers, are hidden.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You simply use the .NET Framework pattern.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Some differences in commonly used types (for example, primitive types and collections) are hidden.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You simply use the .NET Framework type, as discussed in <bpt id="p1">[</bpt>Differences That Are Visible in the IDE<ept id="p1">](#DifferencesVisibleInIDE)</ept>, later in this article.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Most of the time, .NET Framework support for the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> is transparent.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The next section discusses some of the apparent differences between managed code and the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The .NET Framework and the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> Reference Documentation</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The Windows and the .NET Framework documentation sets are separate.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you press F1 to display Help on a type or member, reference documentation from the appropriate set is displayed.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, if you browse through the <bpt id="p1">[</bpt>Windows Runtime reference<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238319)</ept> you might encounter examples that seem puzzling:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Topics such as the <bpt id="p1">[</bpt>IIterable interface<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238321)</ept> don't have declaration syntax for Visual Basic or C#.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Instead, a note appears above the syntax section (in this case, ".NET: This interface appears as System.Collections.Generic.IEnumerable<ph id="ph1">\&lt;</ph>T&gt;").</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is because the .NET Framework and the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> provide similar functionality with different interfaces.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition, there are behavioral differences: <ph id="ph1">`IIterable`</ph> has a <ph id="ph2">`First`</ph> method instead of a <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method to return the enumerator.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Instead of forcing you to learn a different way of performing a common task, the .NET Framework supports the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> by making your managed code appear to use the type you're familiar with.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You won't see the <ph id="ph1">`IIterable`</ph> interface in the IDE, and therefore the only way you'll encounter it in the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> reference documentation is by browsing through that documentation directly.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>SyndicationFeed constructor<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238322)</ept> documentation illustrates a closely related issue: Its parameter types appear to be different for different languages.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For C# and Visual Basic, the parameter types are <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Again, this is because the .NET Framework has its own <ph id="ph1">`String`</ph> and <ph id="ph2">`Uri`</ph> types, and for such commonly used types it doesn't make sense to force .NET Framework users to learn a different way of doing things.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the IDE, the .NET Framework hides the corresponding <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In a few cases, such as the <bpt id="p1">[</bpt>Windows.UI.Xaml.GridLength<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=251059)</ept> structure, the .NET Framework provides a type with the same name but more functionality.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, a set of constructor and property topics are associated with <ph id="ph1">`GridLength`</ph>, but they have syntax blocks only for Visual Basic and C# because the members are available only in managed code.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>, structures have only fields.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> structure requires a helper class, <bpt id="p1">[</bpt>Windows.UI.Xaml.GridLengthHelper<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=251060)</ept>, to provide equivalent functionality.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You won't see that helper class in the IDE when you're writing managed code.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the IDE, <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types appear to derive from <ph id="ph2">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>They appear to have members inherited from <ph id="ph1">&lt;xref:System.Object&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>These members operate as they would if the types actually inherited from <ph id="ph1">&lt;xref:System.Object&gt;</ph>, and <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types can be cast to <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This functionality is part of the support that the .NET Framework provides for the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, if you view the types in the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> reference documentation, no such members appear.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The documentation for these apparent inherited members is provided by the <ph id="ph1">&lt;xref:System.Object?displayProperty=fullName&gt;</ph> reference documentation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Differences That Are Visible in the IDE</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In more advanced programming scenarios, such as using a <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component written in C# to provide the application logic for a <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app built for Windows using JavaScript, such differences are apparent in the IDE as well as in the documentation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When your component returns an <ph id="ph1">`IDictionary&lt;int, string&gt;`</ph> to JavaScript, and you look at it in the JavaScript debugger, you'll see the methods of <ph id="ph2">`IMap&lt;int, string&gt;`</ph> because JavaScript uses the <ph id="ph3">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Some commonly used collection types that appear differently in the two languages are shown in the following table:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>type</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Corresponding .NET Framework type</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>, <ph id="ph2">`IMap&lt;K, V&gt;`</ph> and <ph id="ph3">`IMapView&lt;K, V&gt;`</ph> are iterated using <ph id="ph4">`IKeyValuePair`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When you pass them to managed code, they appear as <ph id="ph1">`IDictionary&lt;TKey, TValue&gt;`</ph> and <ph id="ph2">`IReadOnlyDictionary&lt;TKey, TValue&gt;`</ph>, so naturally you use <ph id="ph3">`System.Collections.Generic.KeyValuePair&lt;TKey, TValue&gt;`</ph> to enumerate them.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The way interfaces appear in managed code affects the way types that implement these interfaces appear.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`PropertySet`</ph> class implements <ph id="ph2">`IMap&lt;K, V&gt;`</ph>, which appears in managed code as <ph id="ph3">`IDictionary&lt;TKey, TValue&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PropertySet`</ph> appears as if it implemented <ph id="ph2">`IDictionary&lt;TKey, TValue&gt;`</ph> instead of <ph id="ph3">`IMap&lt;K, V&gt;`</ph>, so in managed code it appears to have an <ph id="ph4">`Add`</ph> method, which behaves like the <ph id="ph5">`Add`</ph> method on .NET Framework dictionaries.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It doesn't appear to have an <ph id="ph1">`Insert`</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information about using the .NET Framework to create a <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component, and a walkthrough that shows how to use such a component with JavaScript, see <bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238313)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Primitive Types</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To enable the natural use of the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> in managed code, .NET Framework primitive types appear instead of <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> primitive types in your code.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, primitive types like the <ph id="ph1">`Int32`</ph> structure have many useful properties and methods, such as the <ph id="ph2">`Int32.TryParse`</ph> method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>By contrast, primitive types and structures in the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> have only fields.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When you use primitives in managed code, they appear to be .NET Framework types, and you can use the properties and methods of the .NET Framework types as you normally would.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following list provides a summary:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> primitives <ph id="ph2">`Int32`</ph>, <ph id="ph3">`Int64`</ph>, <ph id="ph4">`Single`</ph>, <ph id="ph5">`Double`</ph>, <ph id="ph6">`Boolean`</ph>, <ph id="ph7">`String`</ph> (an immutable collection of Unicode characters), <ph id="ph8">`Enum`</ph>, <ph id="ph9">`UInt32`</ph>, <ph id="ph10">`UInt64`</ph>, and <ph id="ph11">`Guid`</ph>, use the type of the same name in the <ph id="ph12">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`UInt8`</ph>, use <ph id="ph2">`System.Byte`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`Char16`</ph>, use <ph id="ph2">`System.Char`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`IInspectable`</ph> interface, use <ph id="ph2">`System.Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`HRESULT`</ph>, use a structure with one <ph id="ph2">`System.Int32`</ph> member.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>As with interface types, the only time you might see evidence of this representation is when your .NET Framework project is a <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component that is used by a <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app built using JavaScript.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Other basic, commonly used <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types that appear in managed code as their .NET Framework equivalents include the <ph id="ph2">`Windows.Foundation.DateTime`</ph> structure, which appears in managed code as the <ph id="ph3">&lt;xref:System.DateTimeOffset?displayProperty=fullName&gt;</ph> structure, and the <ph id="ph4">`Windows.Foundation.TimeSpan`</ph> structure, which appears as the <ph id="ph5">&lt;xref:System.TimeSpan?displayProperty=fullName&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Other Differences</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In a few cases, the fact that .NET Framework types appear in your code instead of <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types requires action on your part.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Windows.Foundation.Uri<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238376)</ept> class appears as <ph id="ph1">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> in .NET Framework code.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> allows a relative URI, but <bpt id="p1">[</bpt>Windows.Foundation.Uri<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238376)</ept> requires an absolute URI.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Therefore, when you pass a URI to a <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> method, you must ensure that it's absolute.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Passing a URI to the Windows Runtime<ept id="p1">](../../../docs/standard/cross-platform/passing-a-uri-to-the-windows-runtime.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Scenarios for Developing Windows Runtime Components</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The scenarios that are supported for managed <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> Components depend on the following general principles:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Components that are built using the .NET Framework have no apparent differences from other <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>libraries.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>For example, if you re-implement a native <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component by using managed code, the two components are outwardly indistinguishable.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The fact that your component is written in managed code is invisible to the code that uses it, even if that code is itself managed code.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>However, internally, your component is true managed code and runs on the common language runtime (CLR).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Components can contain types that implement application logic, <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> UI controls, or both.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It's good practice to separate UI elements from application logic.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Also, you can't use <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> UI controls in a <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app built for Windows using JavaScript and HTML.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A component can be a project within a Visual Studio solution for a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app, or a reusable component that you can add to multiple solutions.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If your component will be used only with C# or Visual Basic, there's no reason to make it a <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If you make it an ordinary .NET Framework class library instead, you don't have to restrict its public API surface to <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can release versions of reusable components by using the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph><bpt id="p1">[</bpt>VersionAttribute<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238563)</ept> attribute to identify which types (and which members within a type) were added in different versions.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The types in your component can derive from <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Controls can derive from the primitive control types in the <bpt id="p1">[</bpt>Windows.UI.Xaml.Controls.Primitives<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238564)</ept> namespace or from more finished controls such as <bpt id="p2">[</bpt>Button<ept id="p2">](http://go.microsoft.com/fwlink/p/?LinkId=238565)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Starting with <ph id="ph1">[!INCLUDE[win8](../../../includes/win8-md.md)]</ph> and the <ph id="ph2">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, all public types in a managed <ph id="ph3">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component must be sealed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A type in another <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component can't derive from them.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If you want to provide polymorphic behavior in your component, you can create an interface and implement it in the polymorphic types.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>All parameter and return types on the public types in your component must be <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types (including the <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> types that your component defines).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The following sections provide examples of common scenarios.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Application Logic for a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> App with JavaScript</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>When you develop a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app for Windows using JavaScript, you might find that some parts of the application logic perform better in managed code, or are easier to develop.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>JavaScript can't use .NET Framework class libraries directly, but you can make the class library a .WinMD file.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In this scenario, the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component is an integral part of the app, so it doesn't make sense to provide version attributes.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Reusable <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> UI Controls</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can package a set of related UI controls in a reusable <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The component can be marketed on its own or used as an element in the apps you create.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In this scenario, it makes sense to use the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph><bpt id="p1">[</bpt>VersionAttribute<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238563)</ept> attribute to improve compatibility.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Reusable Application Logic from Existing .NET Framework Apps</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can package managed code from your existing desktop apps as a standalone <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This enables you to use the component in <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps built using C++ or JavaScript, as well as in <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps built using C# or Visual Basic.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Versioning is an option if there are multiple reuse scenarios for the code.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET for Windows Store apps overview<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238312)</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Describes the .NET Framework types and members that you can use to create <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps and <ph id="ph2">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>Components.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>(In the Windows Dev Center.)</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Roadmap for Windows Store apps using C# or Visual Basic<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=242212)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Provides key resources to help you get started developing <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps by using C# or Visual Basic, including many Quickstart topics, guidelines, and best practices.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>(In the Windows Dev Center.)</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Developing Windows Store apps (VB/C#/C++ and XAML)<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238311)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Provides key resources to help you get started developing <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps by using C# or Visual Basic, including many Quickstart topics, guidelines, and best practices.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>(In the Windows Dev Center.)</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Windows Runtime Components in C# and Visual Basic<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=238313)</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Describes how to create a <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph> component using the .NET Framework, explains how to use it as part of a <ph id="ph2">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app built for Windows using JavaScript, and describes how to debug the combination with Visual Studio.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>(In the Windows Dev Center.)</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows Runtime reference<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=238319)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The reference documentation for the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>(In the Windows Dev Center.)</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing a URI to the Windows Runtime<ept id="p1">](../../../docs/standard/cross-platform/passing-a-uri-to-the-windows-runtime.md)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Describes an issue that can arise when you pass a URI from managed code to the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>, and how to avoid it.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>