<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-build-a-multifile-assembly.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">daca0f9acb9dab393d1b2142f37e288f7f1329f9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\app-domains\how-to-build-a-multifile-assembly.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9379ec27fae791d47afa94f0635d175f1991b75a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e9a9fe7e25995da7771e0f42471137fd4e5956d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Build a Multifile Assembly | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Build a Multifile Assembly</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains how to create a multifile assembly and provides code that illustrates each step in the procedure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Visual Studio IDE for C# and Visual Basic can only be used to create single-file assemblies.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you want to create multifile assemblies, you must use the command-line compilers or Visual Studio with Visual C++.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To create a multifile assembly</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Compile all files that contain namespaces referenced by other modules in the assembly into code modules.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The default extension for code modules is .netmodule.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, let's say the <ph id="ph1">`Stringer`</ph> file has a namespace called <ph id="ph2">`myStringer`</ph>, which includes a class called <ph id="ph3">`Stringer`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Stringer`</ph> class contains a method called <ph id="ph2">`StringerMethod`</ph> that writes a single line to the console.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use the following command to compile this code:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifying the <bpt id="p1">*</bpt>module<ept id="p1">*</ept> parameter with the <bpt id="p2">**</bpt>/t:<ept id="p2">**</ept> compiler option indicates that the file should be compiled as a module rather than as an assembly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The compiler produces a module called <ph id="ph1">`Stringer.netmodule`</ph>, which can be added to an assembly.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Compile all other modules, using the necessary compiler options to indicate the other modules that are referenced in the code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This step uses the <bpt id="p1">**</bpt>/addmodule<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the following example, a code module called <ph id="ph1">`Client`</ph> has an entry point <ph id="ph2">`Main`</ph> method that references a method in the <ph id="ph3">`Stringer.dll`</ph> module created in step 1.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use the following command to compile this code:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Specify the <bpt id="p1">**</bpt>/t:module<ept id="p1">**</ept> option because this module will be added to an assembly in a future step.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specify the <bpt id="p1">**</bpt>/addmodule<ept id="p1">**</ept> option because the code in <ph id="ph1">`Client`</ph> references a namespace created by the code in <ph id="ph2">`Stringer.netmodule`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The compiler produces a module called <ph id="ph1">`Client.netmodule`</ph> that contains a reference to another module, <ph id="ph2">`Stringer.netmodule`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The C# and Visual Basic compilers support directly creating multifile assemblies using the following two different syntaxes.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Two compilations create a two-file assembly:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>One compilation creates a two-file assembly:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>Assembly Linker (Al.exe)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> to create the output file that contains the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This file contains reference information for all modules or resources that are part of the assembly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following command:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>al<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>module name<ept id="p2">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>module name<ept id="p3">*</ept>&gt; â€¦</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/main:<ept id="p1">**</ept><ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>method name<ept id="p2">*</ept><ph id="ph2">&gt; </ph><bpt id="p3">**</bpt>/out:<ept id="p3">**</ept><ph id="ph3">\&lt;</ph><bpt id="p4">*</bpt>file name<ept id="p4">*</ept><ph id="ph4">&gt; </ph><bpt id="p5">**</bpt>/target:<ept id="p5">**</ept><ph id="ph5">\&lt;</ph><bpt id="p6">*</bpt>assembly file type<ept id="p6">*</ept><ph id="ph6">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this command, the <bpt id="p1">*</bpt>module name<ept id="p1">*</ept> arguments specify the name of each module to include in the assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/main:<ept id="p1">**</ept> option specifies the method name that is the assembly's entry point.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/out:<ept id="p1">**</ept> option specifies the name of the output file, which contains assembly metadata.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>/target:<ept id="p1">**</ept> option specifies that the assembly is a console application executable (.exe) file, a Windows executable (.win) file, or a library (.lib) file.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following example, Al.exe creates an assembly that is a console application executable called <ph id="ph1">`myAssembly.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The application consists of two modules called <ph id="ph1">`Client.netmodule`</ph> and <ph id="ph2">`Stringer.netmodule`</ph>, and the executable file called <ph id="ph3">`myAssembly.exe,`</ph> which contains only assembly metadata .</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The entry point of the assembly is the <ph id="ph1">`Main`</ph> method in the class <ph id="ph2">`MainClientApp`</ph>, which is located in <ph id="ph3">`Client.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>MSIL Disassembler (Ildasm.exe)<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> to examine the contents of an assembly, or determine whether a file is an assembly or a module.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Assemblies<ept id="p1">](../../../docs/framework/app-domains/create-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: View Assembly Contents<ept id="p1">](../../../docs/framework/app-domains/how-to-view-assembly-contents.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](../../../docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multifile Assemblies<ept id="p1">](../../../docs/framework/app-domains/multifile-assemblies.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>