<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-verify-that-strings-are-in-valid-email-format.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-8cf0045" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfc6e0002a886ea83e365422ce731966a8ac953b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\how-to-verify-that-strings-are-in-valid-email-format.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3946152b1854b05102da53b696d901a4d4e04eea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35899fd356213e88ca028d72c61782eb87dec9fa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Verify that Strings Are in Valid Email Format | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Verify that Strings Are in Valid Email Format</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example uses a regular expression to verify that a string is in valid email format.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The example defines an <ph id="ph1">`IsValidEmail`</ph> method, which returns <ph id="ph2">`true`</ph> if the string contains a valid email address and <ph id="ph3">`false`</ph> if it does not, but takes no other action.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To verify that the email address is valid, the <ph id="ph1">`IsValidEmail`</ph> method calls the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName&gt;</ph> method with the <ph id="ph3">`(@)(.+)$`</ph> regular expression pattern to separate the domain name from the email address.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The third parameter is a <ph id="ph1">&lt;xref:System.Text.RegularExpressions.MatchEvaluator&gt;</ph> delegate that represents the method that processes and replaces the matched text.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The regular expression pattern is interpreted as follows.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is the first capturing group.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Match one or more occurrences of any character.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This is the second capturing group.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The domain name along with the @ character is passed to the <ph id="ph1">`DomainMapper`</ph> method, which uses the <ph id="ph2">&lt;xref:System.Globalization.IdnMapping&gt;</ph> class to translate Unicode characters that are outside the US-ASCII character range to Punycode.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The method also sets the <ph id="ph1">`invalid`</ph> flag to <ph id="ph2">`True`</ph> if the <ph id="ph3">&lt;xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName&gt;</ph> method detects any invalid characters in the domain name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The method returns the Punycode domain name preceded by the @ symbol to the <ph id="ph1">`IsValidEmail`</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsValidEmail`</ph> method then calls the <ph id="ph2">&lt;xref:System.Text.RegularExpressions.Regex.IsMatch%28System.String%2CSystem.String%29?displayProperty=fullName&gt;</ph> method to verify that the address conforms to a regular expression pattern.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`IsValidEmail`</ph> method does not perform authentication to validate the email address.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It merely determines whether its format is valid for an email address.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`IsValidEmail`</ph> method does not verify that the top-level domain name is a valid domain name listed at the <bpt id="p1">[</bpt>IANA Root Zone Database<ept id="p1">](https://www.iana.org/domains/root/db)</ept>, which would require a look-up operation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Instead, the regular expression merely verifies that the top-level domain name consists of between two and twenty-four ASCII characters, with alphanumeric first and last characters and the remaining characters being either alphanumeric or a hyphen (-).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this example, the regular expression pattern <ph id="ph1">`^(?(")(".+?(?&lt;!\\)"@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">{}</ph>|~\w])<bpt id="p1">*</bpt>)(?&lt;=[0-9a-z])@))(?([)([(\d<ph id="ph3">{1,3}</ph>.)<ph id="ph4">{3}</ph>\d<ph id="ph5">{1,3}</ph>])|(([0-9a-z][-\w]<ept id="p1">*</ept>[0-9a-z]*.)+[a-z0-9][-a-z0-9]<ph id="ph6">{0,22}</ph>[a-z0-9]))$` is interpreted as shown in the following table.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that the regular expression is compiled using the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph> flag.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Pattern</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Begin the match at the start of the string.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Determine whether the first character is a quotation mark.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?(")`</ph> is the beginning of an alternation construct.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the first character is a quotation mark, match a beginning quotation mark followed by at least one occurrence of any character, followed by an ending quotation mark.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The ending quotation mark must not be preceded by a backslash character (<ph id="ph1">\\</ph>).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?&lt;!`</ph> is the beginning of a zero-width negative lookbehind assertion.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The string should conclude with an at sign (@).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the first character is not a quotation mark, match any alphabetic character from a to z or A to Z (the comparison is case insensitive), or any numeric character from 0 to 9.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If the next character is a period, match it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If it is not a period, look ahead to the next character and continue the match.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`(?!\.)`</ph> is a zero-width negative lookahead assertion that prevents two consecutive periods from appearing in the local part of an email address.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&amp;#124;[-!#\$%&amp;'\*\+/=\?\^`</ph><ph id="ph2">{}</ph><ph id="ph3">\&amp;</ph>#124;~\w]<ph id="ph4">`|If the next character is not a period, match any word character or one of the following characters: -!#$%'*+=?^`</ph><ph id="ph5">{}</ph>&amp;#124;~.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`((\.(?!\.))&amp;#124;[-!#\$%'\*\+/=\?\^`</ph><ph id="ph2">{}</ph><ph id="ph3">\&amp;</ph>#124;~\w])*`|Match the alternation pattern (a period followed by a non-period, or one of a number of characters) zero or more times.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Match the @ character.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Continue the match if the character that precedes the @ character is A through Z, a through z, or 0 through 9.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`(?&lt;=[0-9a-z])`</ph> construct defines a zero-width positive lookbehind assertion.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Check whether the character that follows @ is an opening bracket.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If it is an opening bracket, match the opening bracket followed by an IP address (four sets of one to three digits, with each set separated by a period) and a closing bracket.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the character that follows @ is not an opening bracket, match one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by zero or more occurrences of a word character or a hyphen, followed by zero or one alphanumeric character with a value of A-Z, a-z, or 0-9, followed by a period.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This pattern can be repeated one or more times, and must be followed by the top-level domain name.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The top-level domain name must begin and end with an alphanumeric character (a-z, A-Z, and 0-9).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It can also include from zero to 22 ASCII characters that are either alphanumeric or hyphens.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>End the match at the end of the string.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Instead of using a regular expression to validate an email address, you can use the <ph id="ph1">&lt;xref:System.Net.Mail.MailAddress?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To determine whether an email address is valid, pass the email address to the <ph id="ph1">&lt;xref:System.Net.Mail.MailAddress.%23ctor%28System.String%29?displayProperty=fullName&gt;</ph> class constructor.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IsValidEmail`</ph> and <ph id="ph2">`DomainMapper`</ph> methods can be included in a library of regular expression utility methods, or they can be included as private static or instance methods in the application class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To include them in a regular expression library, either copy and paste the code into a Visual Studio Class Library project, or copy and paste it into a text file and compile it from the command line with a command like the following (assuming that the name of the source code file is RegexUtilities.cs or RegexUtilities.vb:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=fullName&gt;</ph> method to include this regular expression in a regular expression library.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If they are used in a regular expression library, you can call them by using code such as the following:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Assuming you've created a class library named RegexUtilities.dll that includes your email validation regular expression, you can compile this example in either of the following ways:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In Visual Studio, by creating a Console Application and adding a reference to RegexUtilities.dll to your project.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>From the command line, by copying and pasting the source code into a text file and compiling it with a command like the following (assuming that the name of the source code file is Example.cs or Example.vb:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Regular Expressions<ept id="p1">](../../../docs/standard/base-types/regular-expressions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>