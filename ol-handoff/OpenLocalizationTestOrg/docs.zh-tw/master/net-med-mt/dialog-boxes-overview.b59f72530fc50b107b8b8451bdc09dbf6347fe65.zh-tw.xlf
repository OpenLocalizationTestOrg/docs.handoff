<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="dialog-boxes-overview.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15b71b6aa5d2af71f500260919ad5141f1642078</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\dialog-boxes-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f164e452c6bf60e6f20ea19a5158c30c5a62f0c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">74f1c9724be545fde10e9f832e6f43c56db876f7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Dialog Boxes Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Dialog Boxes Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Standalone applications typically have a main window that both displays the main data over which the application operates and exposes the functionality to process that data through              <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> mechanisms like menu bars, tool bars, and status bars.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A non-trivial application may also display additional windows to do the following:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Display specific information to users.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Gather information from users.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Both display and gather information.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These types of windows are known as              <bpt id="p1">*</bpt>dialog boxes<ept id="p1">*</ept>, and there are two types: modal and modeless.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A              <bpt id="p1">*</bpt>modal<ept id="p1">*</ept> dialog box is displayed by a function when the function needs additional data from a user to continue.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because the function depends on the modal dialog box to gather data, the modal dialog box also prevents a user from activating other windows in the application while it remains open.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In most cases, a modal dialog box allows a user to signal when they have finished with the modal dialog box by pressing either an              <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> or              <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pressing the              <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button indicates that a user has entered data and wants the function to continue processing with that data.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Pressing the              <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button indicates that a user wants to stop the function from executing altogether.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The most common examples of modal dialog boxes are shown to open, save, and print data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A              <bpt id="p1">*</bpt>modeless<ept id="p1">*</ept> dialog box, on the other hand, does not prevent a user from activating other windows while it is open.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, if a user wants to find occurrences of a particular word in a document, a main window will often open a dialog box to ask a user what word they are looking for.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Since finding a word doesn't prevent a user from editing the document, however, the dialog box doesn't need to be modal.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A modeless dialog box at least provides a              <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button to close the dialog box, and may provide additional buttons to execute specific functions, such as a              <bpt id="p2">**</bpt>Find Next<ept id="p2">**</ept> button to find the next word that matches the find criteria of a word search.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> allows you to create several types of dialog boxes, including message boxes, common dialog boxes, and custom dialog boxes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This topic discusses each, and the              <bpt id="p1">[</bpt>Dialog Box Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159984)</ept> provides matching examples.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Message Boxes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A                  <bpt id="p1">*</bpt>message box<ept id="p1">*</ept> is a dialog box that can be used to display textual information and to allow users to make decisions with buttons.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following figure shows a message box that displays textual information, asks a question, and provides the user with three buttons to answer the question.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Word Processor dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/dialogboxesoverviewfigure1.png "</bpt>DialogBoxesOverviewFigure1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To create a message box, you use the                  <ph id="ph1">&lt;xref:System.Windows.MessageBox&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.MessageBox&gt;</ph> lets you configure the message box text, title, icon, and buttons, using code like the following.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#MsgBoxConfigureCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/CSharp/Window1.xaml.cs#msgboxconfigurecodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#MsgBoxConfigureCODEBEHIND<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/VisualBasic/window1.xaml.vb#msgboxconfigurecodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To show a message box, you call the                  <ph id="ph1">`static`</ph><ph id="ph2">&lt;xref:System.Windows.MessageBox.Show%2A&gt;</ph> method, as demonstrated in the following code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#MsgBoxShowCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/CSharp/Window1.xaml.cs#msgboxshowcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#MsgBoxShowCODEBEHIND<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/VisualBasic/window1.xaml.vb#msgboxshowcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When code that shows a message box needs to detect and process the user's decision (which button was pressed), the code can inspect the message box result, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#MsgBoxShowAndResultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/CSharp/Window1.xaml.cs#msgboxshowandresultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#MsgBoxShowAndResultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/VisualBasic/window1.xaml.vb#msgboxshowandresultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information on using message boxes, see                  <ph id="ph1">&lt;xref:System.Windows.MessageBox&gt;</ph>,                  <bpt id="p1">[</bpt>MessageBox Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160023)</ept>, and                  <bpt id="p2">[</bpt>Dialog Box Sample<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=159984)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although                  <ph id="ph1">&lt;xref:System.Windows.MessageBox&gt;</ph> may offer a simple dialog box user experience, the advantage of using                  <ph id="ph2">&lt;xref:System.Windows.MessageBox&gt;</ph> is that is the only type of window that can be shown by applications that run within a partial trust security sandbox (see                  <bpt id="p1">[</bpt>Security<ept id="p1">](../../../../docs/framework/wpf/security-wpf.md)</ept>), such as                  <ph id="ph3">[!INCLUDE[TLA#tla_xbap#plural](../../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Most dialog boxes display and gather more complex data than the result of a message box, including text, selection (check boxes), mutually exclusive selection (radio buttons), and list selection (list boxes, combo boxes, drop-down list boxes).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For these,                  <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> provides several common dialog boxes and allows you to create your own dialog boxes, although the use of either is limited to applications running with full trust.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Common Dialog Boxes</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph> implements a variety of reusable dialog boxes that are common to all applications, including dialog boxes for opening files, saving files, and printing.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Since these dialog boxes are implemented by the operating system, they can be shared among all the applications that run on the operating system, which helps user experience consistency; when users are familiar with the use of an operating system-provided dialog box in one application, they don't need to learn how to use that dialog box in other applications.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Because these dialog boxes are available to all applications and because they help provide a consistent user experience, they are known as                  <bpt id="p1">*</bpt>common dialog boxes<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> encapsulates the open file, save file, and print common dialog boxes and exposes them as managed classes for you to use in standalone applications.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This topic provides a brief overview of each.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Open File Dialog</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The open file dialog box, shown in the following figure, is used by file opening functionality to retrieve the name of a file to open.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Open dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/dialogboxesoverviewfigure2.png "</bpt>DialogBoxesOverviewFigure2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The common open file dialog box is implemented as the                          <ph id="ph1">&lt;xref:Microsoft.Win32.OpenFileDialog&gt;</ph> class and is located in the                          <ph id="ph2">&lt;xref:Microsoft.Win32&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following code shows how to create, configure, and show one, and how to process the result.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#OpenFileDialogBoxCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/CSharp/Window1.xaml.cs#openfiledialogboxcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#OpenFileDialogBoxCODEBEHIND<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/VisualBasic/window1.xaml.vb#openfiledialogboxcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information on the open file dialog box, see                          <ph id="ph1">&lt;xref:Microsoft.Win32.OpenFileDialog?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.Win32.OpenFileDialog&gt;</ph> can be used to safely retrieve file names by applications running with partial trust (see                              <bpt id="p1">[</bpt>Security<ept id="p1">](../../../../docs/framework/wpf/security-wpf.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Save File Dialog Box</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The save file dialog box, shown in the following figure, is used by file saving functionality to retrieve the name of a file to save.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Save As dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/dialogboxesoverviewfigure3.png "</bpt>DialogBoxesOverviewFigure3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The common save file dialog box is implemented as the                          <ph id="ph1">&lt;xref:Microsoft.Win32.SaveFileDialog&gt;</ph> class, and is located in the                          <ph id="ph2">&lt;xref:Microsoft.Win32&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code shows how to create, configure, and show one, and how to process the result.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#SaveFileDialogBoxCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/CSharp/Window1.xaml.cs#savefiledialogboxcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#SaveFileDialogBoxCODEBEHIND<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/VisualBasic/window1.xaml.vb#savefiledialogboxcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information on the save file dialog box, see                          <ph id="ph1">&lt;xref:Microsoft.Win32.SaveFileDialog?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Print Dialog Box</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The print dialog box, shown in the following figure, is used by printing functionality to choose and configure the printer that a user would like to print data to.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Print dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/dialogboxesoverviewfigure4.png "</bpt>DialogBoxesOverviewFigure4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The common print dialog box is implemented as the                          <ph id="ph1">&lt;xref:System.Windows.Controls.PrintDialog&gt;</ph> class, and is located in the                          <ph id="ph2">&lt;xref:System.Windows.Controls&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following code shows how to create, configure, and show one.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#PrintDialogBoxCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/CSharp/Window1.xaml.cs#printdialogboxcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxesOverviewSnippets#PrintDialogBoxCODEBEHIND<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxesOverviewSnippets/VisualBasic/window1.xaml.vb#printdialogboxcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For more information on the print dialog box, see                          <ph id="ph1">&lt;xref:System.Windows.Controls.PrintDialog?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For detailed discussion of printing in                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, see                          <bpt id="p1">[</bpt>Printing Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/printing-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Custom Dialog Boxes</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>While common dialog boxes are useful, and should be used when possible, they do not support the requirements of domain-specific dialog boxes.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In these cases, you need to create your own dialog boxes.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>As we'll see, a dialog box is a window with special behaviors.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> implements those behaviors and, consequently, you use                  <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> to create custom modal and modeless dialog boxes.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Creating a Modal Custom Dialog Box</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This topic shows how to use                          <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> to create a typical modal dialog box implementation, using the                          <ph id="ph2">`Margins`</ph> dialog box as an example (see                          <bpt id="p1">[</bpt>Dialog Box Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159984)</ept>).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">`Margins`</ph> dialog box is shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Margins dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/dialogboxesoverviewfigure5.png "</bpt>DialogBoxesOverviewFigure5<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Configuring a Modal Dialog Box</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The user interface for a typical dialog box includes the following:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The various controls that are required to gather the desired data.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Showing an                                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button that users click to close the dialog box, return to the function, and continue processing.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Showing a                                          <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button that users click to close the dialog box and stop the function from further processing.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Showing a                                          <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button in the title bar.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Showing an icon.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Showing                                          <bpt id="p1">**</bpt>Minimize<ept id="p1">**</ept>,                                          <bpt id="p2">**</bpt>Maximize<ept id="p2">**</ept>, and                                          <bpt id="p3">**</bpt>Restore<ept id="p3">**</ept> buttons.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Showing a                                          <bpt id="p1">**</bpt>System<ept id="p1">**</ept> menu to minimize, maximize, restore, and close the dialog box.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Opening above and in the center of the window that opened the dialog box.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Dialog boxes should be resizable where possible so, to prevent the dialog box from being too small, and to provide the user with a useful default size, you need to set both default and a minimum dimensions respectively.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Pressing the ESC key should be configured as a keyboard shortcut that causes the                                          <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button to be pressed.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This is achieved by setting the                                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property of the                                          <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button to                                          <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Pressing the ENTER (or RETURN) key should be configured as a keyboard shortcut that causes the                                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button to be pressed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This is achieved by setting the                                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> property of the                                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button                                          <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The following code demonstrates this configuration.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxMainBitsMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml#marginsdialogboxmainbitsmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxMainBitsMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml#marginsdialogboxmainbitsmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxMainBitsCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxmainbitscodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxMainBitsCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxmainbitscodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxMainBitsCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxmainbitscodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxMainBitsCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxmainbitscodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The user experience for a dialog box also extends into the menu bar of the window that opens the dialog box.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When a menu item runs a function that requires user interaction through a dialog box before the function can continue, the menu item for the function will have an ellipsis in its header, as shown here.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MainWindowMarginsDialogBoxMenuItemMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml#mainwindowmarginsdialogboxmenuitemmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MainWindowMarginsDialogBoxMenuItemMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml#mainwindowmarginsdialogboxmenuitemmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When a menu item runs a function that displays a dialog box which does not require user interaction, such as an About dialog box, an ellipsis is not required.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Opening a Modal Dialog Box</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A dialog box is typically shown as a result of a user selecting a menu item to perform a domain-specific function, such as setting the margins of a document in a word processor.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Showing a window as a dialog box is similar to showing a normal window, although it requires additional dialog box-specific configuration.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The entire process of instantiating, configuring, and opening a dialog box is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogcodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogCODEBEHIND4<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogcodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Here, the code is passing default information (the current margins) to the dialog box.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>It is also setting the                                  <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A?displayProperty=fullName&gt;</ph> property with a reference to the window that is showing the dialog box.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In general, you should always set the owner for a dialog box to provide window state-related behaviors that are common to all dialog boxes (see                                  <bpt id="p1">[</bpt>WPF Windows Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-windows-overview.md)</ept> for more information).</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You must provide an owner to support                                      <ph id="ph1">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> automation for dialog boxes (see                                      <bpt id="p1">[</bpt>UI Automation Overview<ept id="p1">](../../../../docs/framework/ui-automation/ui-automation-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>After the dialog box is configured, it is shown modally by calling the                                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Validating User-Provided Data</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When a dialog box is opened and the user provides the required data, a dialog box is responsible for ensuring that the provided data is valid for the following reasons:</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>From a security perspective, all input should be validated.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>From a domain-specific perspective, data validation prevents erroneous data from being processed by the code, which could potentially throw exceptions.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>From a user-experience perspective, a dialog box can help users by showing them which data they have entered is invalid.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>From a performance perspective, data validation in a multi-tier application can reduce the number of round trips between the client and the application tiers, particularly when the application is composed of Web services or server-based databases.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To validate a bound control in                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, you need to define a validation rule and associate it with the binding.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A validation rule is a custom class that derives from                                  <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The following example shows a validation rule,                                  <ph id="ph1">`MarginValidationRule`</ph>, which checks that a bound value is a                                  <ph id="ph2">&lt;xref:System.Double&gt;</ph> and is within a specified range.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginValidationRuleCODE<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginValidationRule.cs#marginvalidationrulecode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginValidationRuleCODE<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginValidationRule.vb#marginvalidationrulecode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In this code, the validation logic of a validation rule is implemented by overriding the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.ValidationRule.Validate%2A&gt;</ph> method, which validates the data and returns an appropriate                                  <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationResult&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>To associate the validation rule with the bound control, you use the following markup.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsValidationMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml#marginsvalidationmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsValidationMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml#marginsvalidationmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsValidationMARKUP3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml#marginsvalidationmarkup3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Once the validation rule is associated,                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> will automatically apply it when data is entered into the bound control.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>When a control contains invalid data,                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> will display a red border around the invalid control, as shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Invalid left margin<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/dialogboxesoverviewfigure7.png "</bpt>DialogBoxesOverviewFigure7<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> does not restrict a user to the invalid control until they have entered valid data.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This is good behavior for a dialog box; a user should be able to freely navigate the controls in a dialog box whether or not data is valid.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>However, this means a user can enter invalid data and press the                                  <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For this reason, your code also needs to validate all controls in a dialog box when the                                  <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button is pressed by handling the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxValidationCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxvalidationcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxValidationCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxvalidationcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxValidationCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxvalidationcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxValidationCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxvalidationcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxValidationCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxvalidationcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxValidationCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxvalidationcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>This code enumerates all dependency objects on a window and, if any are invalid (as returned by                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Validation.GetHasError%2A&gt;</ph>, the invalid control gets the focus, the                                  <ph id="ph2">`IsValid`</ph> method returns                                  <ph id="ph3">`false`</ph>, and the window is considered invalid.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Once a dialog box is valid, it can safely close and return.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>As part of the return process, it needs to return a result to the calling function.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Setting the Modal Dialog Result</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Opening a dialog box using                                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> is fundamentally like calling a method: the code that opened the dialog box using                                  <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> waits until                                  <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>When                                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns, the code that called it needs to decide whether to continue processing or stop processing, based on whether the user pressed the                                  <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button or the                                  <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>To facilitate this decision, the dialog box needs to return the user's choice as a                                  <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value that is returned from the                                  <ph id="ph2">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>When the                                  <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button is clicked,                                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> should return                                  <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This is achieved by setting the                                  <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property of the dialog box when the                                  <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button is clicked.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxokresultsetcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxokresultsetcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxokresultsetcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxokresultsetcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxokresultsetcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxokresultsetcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxokresultsetcodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxOKResultSetCODEBEHIND4<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxokresultsetcodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Note that setting the                                  <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property also causes the window to close automatically, which alleviates the need to explicitly call                                  <ph id="ph2">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>When the                                  <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button is clicked,                                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> should return                                  <ph id="ph2">`false`</ph>, which also requires setting the                                  <ph id="ph3">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxCancelResultSetCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxcancelresultsetcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxCancelResultSetCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxcancelresultsetcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxCancelResultSetCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxcancelresultsetcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxCancelResultSetCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxcancelresultsetcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxCancelResultSetCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml.cs#marginsdialogboxcancelresultsetcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogBoxCancelResultSetCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MarginsDialogBox.xaml.vb#marginsdialogboxcancelresultsetcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>When a button's                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property is set to                                  <ph id="ph2">`true`</ph> and the user presses either the                                  <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button or the ESC key,                                  <ph id="ph3">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is automatically set to                                  <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The following markup has the same effect as the preceding code, without the need to handle the                                  <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#MarginsDialogDefaultCancelMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MarginsDialogBox.xaml#marginsdialogdefaultcancelmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A dialog box automatically returns                                  <ph id="ph1">`false`</ph> when a user presses the                                  <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button in the title bar or chooses the                                  <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> menu item from the                                  <bpt id="p3">**</bpt>System<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Processing Data Returned from a Modal Dialog Box</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>When                                  <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is set by a dialog box, the function that opened it can get the dialog box result by inspecting the                                  <ph id="ph2">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property when                                  <ph id="ph3">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogprocessreturncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogprocessreturncodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogprocessreturncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogprocessreturncodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogprocessreturncodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogprocessreturncodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openmarginsdialogprocessreturncodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenMarginsDialogProcessReturnCODEBEHIND4<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openmarginsdialogprocessreturncodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If the dialog result is                                  <ph id="ph1">`true`</ph>, the function uses that as a cue to retrieve and process the data provided by the user.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>After                                      <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> has returned, a dialog box cannot be reopened.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Instead, you need to create a new instance.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If the dialog result is                                  <ph id="ph1">`false`</ph>, the function should end processing appropriately.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Creating a Modeless Custom Dialog Box</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A modeless dialog box, such as the Find Dialog Box shown in the following figure, has the same fundamental appearance as the modal dialog box.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Find dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/dialogboxesoverviewfigure6.PNG "</bpt>DialogBoxesOverviewFigure6<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>However, the behavior is slightly different, as described in the following sections.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Opening a Modeless Dialog Box</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A modeless dialog box is opened by calling the                                  <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml#openfinddialogmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openfinddialogcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openfinddialogcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openfinddialogcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openfinddialogcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openfinddialogcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openfinddialogcodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Unlike                                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>,                                  <ph id="ph2">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> returns immediately.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Consequently, the calling window cannot tell when the modeless dialog box is closed and, therefore, does not know when to check for a dialog box result or get data from the dialog box for further processing.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Instead, the dialog box needs to create an alternative way to return data to the calling window for processing.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Processing Data Returned from a Modeless Dialog Box</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>In this example, the                                  <ph id="ph1">`FindDialogBox`</ph> may return one or more find results to the main window, depending on the text being searched for without any specific frequency.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>As with a modal dialog box, a modeless dialog box can return results using properties.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>However, the window that owns the dialog box needs to know when to check those properties.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>One way to enable this is for the dialog box to implement an event that is raised whenever text is found.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FindDialogBox`</ph> implements the                                  <ph id="ph2">`TextFoundEvent`</ph> for this purpose, which first requires a delegate.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventHandlerCODE<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/TextFoundEventHandler.cs#textfoundeventhandlercode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventHandlerCODE<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/TextFoundEventHandler.vb#textfoundeventhandlercode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Using the                                  <ph id="ph1">`TextFoundEventHandler`</ph> delegate,                                  <ph id="ph2">`FindDialogBox`</ph> implements the                                  <ph id="ph3">`TextFoundEvent`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#textfoundeventcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#textfoundeventcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#textfoundeventcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#textfoundeventcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Consequently,                                  <ph id="ph1">`Find`</ph> can raise the event when a search result is found.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#textfoundeventraisecodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#textfoundeventraisecodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#textfoundeventraisecodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#textfoundeventraisecodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#textfoundeventraisecodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#textfoundeventraisecodebehind3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#textfoundeventraisecodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND4<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#textfoundeventraisecodebehind4)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND5<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#textfoundeventraisecodebehind5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#TextFoundEventRaiseCODEBEHIND5<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#textfoundeventraisecodebehind5)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The owner window then needs to register with and handle this event.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogResultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openfinddialogresultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogResultCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openfinddialogresultcodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogResultCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/MainWindow.xaml.cs#openfinddialogresultcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#OpenFindDialogResultCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/MainWindow.xaml.vb#openfinddialogresultcodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Closing a Modeless Dialog Box</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Because                                  <ph id="ph1">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> does not need to be set, a modeless dialog can be closed using system provide mechanisms, including the following:</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Clicking the                                          <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button in the title bar.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Pressing ALT+F4.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Choosing                                          <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> from the                                          <bpt id="p2">**</bpt>System<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Alternatively, your code can call                                  <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> when the                                  <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button is clicked.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#FindDialogCloseCODEBEHIND1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#finddialogclosecodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#FindDialogCloseCODEBEHIND1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#finddialogclosecodebehind1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DialogBoxSample#FindDialogCloseCODEBEHIND2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DialogBoxSample/CSharp/FindDialogBox.xaml.cs#finddialogclosecodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DialogBoxSample#FindDialogCloseCODEBEHIND2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DialogBoxSample/VisualBasic/FindDialogBox.xaml.vb#finddialogclosecodebehind2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Popup Overview<ept id="p1">](../../../../docs/framework/wpf/controls/popup-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dialog Box Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159984)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ColorPicker Custom Control Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159977)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>