<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="painting-with-solid-colors-and-gradients-overview.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c934b97c7189bdda882619030d2391391daa050c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\painting-with-solid-colors-and-gradients-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08a64dfc99b85d1779ebcd03b0cb96797d2d11e7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f7828c8a1630ada2927c98e1bff0ddca2a6456a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Painting with Solid Colors and Gradients Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Painting with Solid Colors and Gradients Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to use <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.RadialGradientBrush&gt;</ph> objects to paint with solid colors, linear gradients, and radial gradients.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Painting an Area with a Solid Color</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One of the most common operations in any platform is to paint an area with a solid <ph id="ph1">&lt;xref:System.Windows.Media.Color&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To accomplish this task, <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides the <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following sections describe the different ways to paint with a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using a SolidColorBrush in "XAML"</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To paint an area with a solid color in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, use one of the following options.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Select a predefined solid color brush by name.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, you can set a button's <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> to "Red" or "MediumBlue".</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For a list of other predefined solid color brushes, see the static properties of the <ph id="ph1">&lt;xref:System.Windows.Media.Brushes&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following is an example.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Choose a color from the 32-bit color palette by specifying the amounts of red, green, and blue to combine into a single solid color.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The format for specifying a color from the 32-bit palette is "<bpt id="p1">*</bpt>#rrggbb<ept id="p1">*</ept>", where <bpt id="p2">*</bpt>rr<ept id="p2">*</ept> is a two digit hexadecimal number specifying the relative amount of red, <bpt id="p3">*</bpt>gg<ept id="p3">*</ept> specifies the amount of green, and <bpt id="p4">*</bpt>bb<ept id="p4">*</ept> specifies the amount of blue.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Additionally, the color can be specified as "#<bpt id="p1">*</bpt>aarrggbb<ept id="p1">*</ept>" where <bpt id="p2">*</bpt>aa<ept id="p2">*</ept> specifies the <bpt id="p3">*</bpt>alpha<ept id="p3">*</ept> value, or transparency, of the color.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This approach enables you to create colors that are partially transparent.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is set to fully-opaque red using hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use property tag syntax to describe a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This syntax is more verbose but enables you to specify additional settings, such as the brush's opacity.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> properties of two <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> elements are set to fully-opaque red.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The first brush's color is described using a predefined color name.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The second brush's color is described using hexadecimal notation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Painting with a SolidColorBrush in Code</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To paint an area with a solid color in code, use one of the following options.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use one of the predefined brushes provided by the <ph id="ph1">&lt;xref:System.Windows.Media.Brushes&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is set to <ph id="ph3">&lt;xref:System.Windows.Media.Brushes.Red%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> and set its <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> property using a <ph id="ph3">&lt;xref:System.Windows.Media.Color&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use a predefined color from the <ph id="ph1">&lt;xref:System.Windows.Media.Colors&gt;</ph> class or you can create a <ph id="ph2">&lt;xref:System.Windows.Media.Color&gt;</ph> using the static <ph id="ph3">&lt;xref:System.Windows.Media.Color.FromArgb%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> using a predefined color.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The static <ph id="ph1">&lt;xref:System.Windows.Media.Color.FromArgb%2A&gt;</ph> enables you to specify the color's alpha, red, green, and blue values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The typical range for each of these values is 0-255.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example, an alpha value of 0 indicates that a color is completely transparent, while a value of 255 indicates the color is completely opaque.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Likewise, a red value of 0 indicates that a color has no red in it, while a value of 255 indicates a color has the maximum amount of red possible.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following example, a brush's color is described by specifying alpha, red, green, and blue values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For additional ways to specify color, see the <ph id="ph1">&lt;xref:System.Windows.Media.Color&gt;</ph> reference topic.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Painting an Area with a Gradient</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A gradient brush paints an area with multiple colors that blend into each other along an axis.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can use them to create impressions of light and shadow, giving your controls a three-dimensional feel.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can also use them to simulate glass, chrome, water, and other smooth surfaces.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides two types of gradient brushes: <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Media.RadialGradientBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Linear Gradients</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> paints an area with a gradient defined along a line, the <bpt id="p1">*</bpt>gradient axis<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You specify the gradient's colors and their location along the gradient axis using <ph id="ph1">&lt;xref:System.Windows.Media.GradientStop&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You may also modify the gradient axis, which enables you to create horizontal and vertical gradients and to reverse the gradient direction.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The gradient axis is described in the next section.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By default, a diagonal gradient is created.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example shows the code that creates a linear gradient with four colors.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This code produces the following gradient:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A diagonal linear gradient<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-diaglgradient-nolabel.jpg "</bpt>wcpsdk_graphicsmm_diaglgradient_nolabel<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> The gradient examples in this topic use the default coordinate system for setting start points and end points.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The default coordinate system is relative to a bounding box: 0 indicates 0 percent of the bounding box and 1 indicates 100 percent of the bounding box.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can change this coordinate system by setting the <ph id="ph1">&lt;xref:System.Windows.Media.GradientBrush.MappingMode%2A&gt;</ph> property to the value <ph id="ph2">&lt;xref:System.Windows.Media.BrushMappingMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An absolute coordinate system is not relative to a bounding box.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Values are interpreted directly in local space.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.GradientStop&gt;</ph> is the basic building block of a gradient brush.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A gradient stop specifies a <ph id="ph1">&lt;xref:System.Windows.Media.GradientStop.Color%2A&gt;</ph> at an <ph id="ph2">&lt;xref:System.Windows.Media.GradientStop.Offset%2A&gt;</ph> along the gradient axis.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The gradient stop's <ph id="ph1">&lt;xref:System.Windows.Media.GradientStop.Color%2A&gt;</ph> property specifies the color of the gradient stop.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You may set the color by using a predefined color (provided by the <ph id="ph1">&lt;xref:System.Windows.Media.Colors&gt;</ph> class) or by specifying ScRGB or ARGB values.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you may also use hexadecimal notation to describe a color.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Media.Color&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The gradient stop's <ph id="ph1">&lt;xref:System.Windows.Media.GradientStop.Offset%2A&gt;</ph> property specifies the position of the gradient stop's color on the gradient axis.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The offset is a <ph id="ph1">&lt;xref:System.Double&gt;</ph> that ranges from 0 to 1.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The closer a gradient stop's offset value is to 0, the closer the color is to the start of the gradient.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The closer the gradient's offset value is to 1, the closer the color is to the end of the gradient.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The color of each point between gradient stops is linearly interpolated as a combination of the color specified by the two bounding gradient stops.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following illustration highlights the gradient stops in the previous example.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The circles mark the position of gradient stops and a dashed line shows the gradient axis.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Gradient stops in a linear gradient<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-4gradientstops.png "</bpt>wcpsdk_graphicsmm_4gradientstops<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The first gradient stop specifies the color yellow at an offset of <ph id="ph1">`0.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The second gradient stop specifies the color red at an offset of <ph id="ph1">`0.25`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The points between these two stops gradually change from yellow to red as you move from left to right along the gradient axis.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The third gradient stop specifies the color blue at an offset of <ph id="ph1">`0.75`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The points between the second and third gradient stops gradually change from red to blue.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The fourth gradient stop specifies the color lime green at an offset of <ph id="ph1">`1.0`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The points between the third and fourth gradient stops gradually change from blue to lime green.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The Gradient Axis</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>As previously mentioned, a linear gradient brush's gradient stops are positioned along a line, the gradient axis.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You may change the orientation and size of the line using the brush's <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush.StartPoint%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush.EndPoint%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>By manipulating the brush's <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush.StartPoint%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush.EndPoint%2A&gt;</ph>, you can create horizontal and vertical gradients, reverse the gradient direction, condense the gradient spread, and more.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>By default, the linear gradient brush's <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush.StartPoint%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush.EndPoint%2A&gt;</ph> are relative to the area being painted.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The point (0,0) represents the upper-left corner of the area being painted, and (1,1) represents the lower-right corner of the area being painted.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The default <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush.StartPoint%2A&gt;</ph> of a <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> is (0,0), and its default <ph id="ph3">&lt;xref:System.Windows.Media.LinearGradientBrush.EndPoint%2A&gt;</ph> is (1,1), which creates a diagonal gradient starting at the upper-left corner and extending to the lower-right corner of the area being painted.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following illustration shows the gradient axis of a linear gradient brush with default <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush.StartPoint%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush.EndPoint%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Gradient axis for a diagonal linear gradient<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-diagonalgradientaxis.png "</bpt>wcpsdk_graphicsmm_diagonalgradientaxis<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a horizontal gradient by specifying the brush's <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush.StartPoint%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush.EndPoint%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Notice that the gradient stops are the same as in the previous examples; by simply changing the <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush.StartPoint%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.LinearGradientBrush.EndPoint%2A&gt;</ph>, the gradient has been changed from diagonal to horizontal.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following illustration shows the gradient that is created.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The gradient axis is marked with a dashed line, and the gradient stops are marked with circles.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Gradient axis for a horizontal linear gradient<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-horizontalgradient.jpg "</bpt>wcpsdk_graphicsmm_horizontalgradient<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The next example shows how to create a vertical gradient.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The following illustration shows the gradient that is created.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The gradient axis is marked with a dashed line, and the gradient stops are marked with circles.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Gradient axis for a vertical gradient<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-verticalgradient.jpg "</bpt>wcpsdk_graphicsmm_verticalgradient<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Radial Gradients</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Like a <ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>, a <ph id="ph2">&lt;xref:System.Windows.Media.RadialGradientBrush&gt;</ph> paints an area with colors that blend together along an axis.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The previous examples showed how a linear gradient brush's axis is a straight line.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A radial gradient brush's axis is defined by a circle; its colors "radiate" outward from its origin.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In the following example, a radial gradient brush is used to paint the interior of a rectangle.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following illustration shows the gradient created in the previous example.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The brush's gradient stops have been highlighted.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Notice that, even though the results are different, the gradient stops in this example are identical to the gradient stops in the previous linear gradient brush examples.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Gradient stops in a radial gradient<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-4gradientstops-rg.png "</bpt>wcpsdk_graphicsmm_4gradientstops_rg<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.RadialGradientBrush.GradientOrigin%2A&gt;</ph> specifies the start point of a radial gradient brush's gradient axis.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The gradient axis radiates from the gradient origin to the gradient circle.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A brush's gradient circle is defined by its <ph id="ph1">&lt;xref:System.Windows.Media.RadialGradientBrush.Center%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.RadialGradientBrush.RadiusX%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.RadialGradientBrush.RadiusY%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The following illustration shows several radial gradients with different <ph id="ph1">&lt;xref:System.Windows.Media.RadialGradientBrush.GradientOrigin%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.RadialGradientBrush.Center%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.RadialGradientBrush.RadiusX%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.RadialGradientBrush.RadiusY%2A&gt;</ph> settings.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>RadialGradientBrush settings<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-originscirclesandradii.gif "</bpt>wcpsdk_graphicsmm_originscirclesandradii<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>RadialGradientBrushes with different GradientOrigin, Center, RadiusX, and RadiusY settings.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Specifying Transparent or Partially-Transparent Gradient Stops</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Because gradient stops do not provide an opacity property, you must specify the alpha channel of colors using  <ph id="ph1">[!INCLUDE[TLA#tla_argb](../../../../includes/tlasharptla-argb-md.md)]</ph> hexadecimal notation in markup or use the <ph id="ph2">&lt;xref:System.Windows.Media.Color.FromScRgb%2A?displayProperty=fullName&gt;</ph> method to create gradient stops that are transparent or partially transparent.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following sections explain how to create partially transparent gradient stops in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> and code.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Specifying Color Opacity in "XAML"</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, you use  <ph id="ph2">[!INCLUDE[TLA2#tla_argb](../../../../includes/tla2sharptla-argb-md.md)]</ph> hexadecimal notation to specify the opacity of individual colors.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_argb](../../../../includes/tla2sharptla-argb-md.md)]</ph> hexadecimal notation uses the following syntax:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`#`</ph> <bpt id="p1">**</bpt>aa<ept id="p1">**</ept> <bpt id="p2">*</bpt>rrggbb<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>aa<ept id="p1">*</ept> in the previous line represents a two-digit hexadecimal value used to specify the opacity of the color.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>rr<ept id="p1">*</ept>, <bpt id="p2">*</bpt>gg<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>bb<ept id="p3">*</ept> each represent a two digit hexadecimal value used to specify the amount of red, green, and blue in the color.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Each hexadecimal digit may have a value from 0-9 or A-F.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>0 is the smallest value, and F is the greatest.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>An alpha value of 00 specifies a color that is completely transparent, while an alpha value of FF creates a color that is fully opaque.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In the following example, hexadecimal <ph id="ph1">[!INCLUDE[TLA2#tla_argb](../../../../includes/tla2sharptla-argb-md.md)]</ph> notation is used to specify two colors.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The first is partially transparent (it has an alpha value of x20), while the second is completely opaque.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Specifying Color Opacity in Code</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When using code, the static <ph id="ph1">&lt;xref:System.Windows.Media.Color.FromArgb%2A&gt;</ph> method enables you to specify an alpha value when you create a color.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The method takes four parameters of type <ph id="ph1">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The first parameter specifies the alpha channel of the color; the other three parameters specify the red, green, and blue values of the color.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Each value should be between 0 to 255, inclusive.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>An alpha value of 0 specifies that the color is completely transparent, while an alpha value of 255 specifies that the color is completely opaque.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Windows.Media.Color.FromArgb%2A&gt;</ph> method is used to produce two colors.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The first color is partially transparent (it has an alpha value of 32), while the second is fully opaque.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Alternatively, you may use the <ph id="ph1">&lt;xref:System.Windows.Media.Color.FromScRgb%2A&gt;</ph> method, which enables you to use ScRGB values to create a color.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Painting with Images, Drawings, Visuals, and Patterns</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Media.DrawingBrush&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Media.VisualBrush&gt;</ph> classes enable you to paint an area with images, drawings, or visuals.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>For information about painting with images, drawings, and patterns, see <bpt id="p1">[</bpt>Painting with Images, Drawings, and Visuals<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/painting-with-images-drawings-and-visuals.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.RadialGradientBrush&gt;</ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Painting with Images, Drawings, and Visuals<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/painting-with-images-drawings-and-visuals.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Brush Transformation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/brush-transformation-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Graphics Rendering Tiers<ept id="p1">](../../../../docs/framework/wpf/advanced/graphics-rendering-tiers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>