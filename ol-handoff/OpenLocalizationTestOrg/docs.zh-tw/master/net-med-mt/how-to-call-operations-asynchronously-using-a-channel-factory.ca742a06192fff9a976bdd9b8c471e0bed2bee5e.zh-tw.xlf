<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c930cb270c392fe294e7421b3e3f2247b57070ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\how-to-call-operations-asynchronously-using-a-channel-factory.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e08e53910c86c4d275070da8ffc8fbacb9666ca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a25770c1a8d7a932ec2d1e579204735f986df39</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Call Operations Asynchronously Using a Channel Factory | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Call Operations Asynchronously Using a Channel Factory</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic covers how a client can access a service operation asynchronously when using a <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>-based client application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(When using a <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601?displayProperty=fullName&gt;</ph> object to invoke a service you can use the event-driven asynchronous calling model.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Call Service Operations Asynchronously<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-call-wcf-service-operations-asynchronously.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about the event-based asynchronous calling model, see <bpt id="p1">[</bpt>Multithreaded Programming with the Event-based Asynchronous Pattern<ept id="p1">](../../../../docs/standard/asynchronous-programming-patterns/multithreaded-programming-with-the-event-based-asynchronous-pattern.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The service in this topic implements the <ph id="ph1">`ICalculator`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The client can call the operations on this interface asynchronously, which means that operations like <ph id="ph1">`Add`</ph> are split into two methods, <ph id="ph2">`BeginAdd`</ph> and <ph id="ph3">`EndAdd`</ph>, the former of which initiates the call and the latter of which retrieves the result when the operation completes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For an example showing how to implement an operation asynchronously in a service, see <bpt id="p1">[</bpt>How to: Implement an Asynchronous Service Operation<ept id="p1">](../../../../docs/framework/wcf/how-to-implement-an-asynchronous-service-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For details about synchronous and asynchronous operations, see <bpt id="p1">[</bpt>Synchronous and Asynchronous Operations<ept id="p1">](../../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Procedure</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To call WCF service operations asynchronously</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> tool with the <ph id="ph1">`/async`</ph> option as shown in the following command.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This generates an asynchronous client version of the service contract for the operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create a callback function to be called when the asynchronous operation is complete, as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_How_To_CF_Async#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#2)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>C_How_To_CF_Async#2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To access a service operation asynchronously, create the client and call the <ph id="ph1">`Begin[Operation]`</ph> (for example, <ph id="ph2">`BeginAdd`</ph>) and specify a callback function, as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_How_To_CF_Async#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/client.cs#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>C_How_To_CF_Async#3<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/client.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When the callback function executes, the client calls <ph id="ph1">`End&lt;operation&gt;`</ph> (for example, <ph id="ph2">`EndAdd`</ph>) to retrieve the result.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The service that is used with the client code that is used in the preceding procedure implements the <ph id="ph1">`ICalculator`</ph> interface as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>On the service side, the <ph id="ph1">`Add`</ph> and <ph id="ph2">`Subtract`</ph> operations of the contract are invoked synchronously by the <ph id="ph3">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> run time, even though the preceding client steps are invoked asynchronously on the client.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Multiply`</ph> and <ph id="ph2">`Divide`</ph> operations are used to invoke the service asynchronously on the service side, even if the client invokes them synchronously.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example sets the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This property setting, in combination with the implementation of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> asynchronous pattern, tells the run time to invoke the operation asynchronously.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_How_To_CF_Async#4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_how_to_cf_async/cs/service.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>C_How_To_CF_Async#4<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_how_to_cf_async/vb/service.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Service Contract: Asynchronous Sample<ept id="p1">](http://msdn.microsoft.com/en-us/833db946-f511-4f64-a26f-2759a11217c7)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>