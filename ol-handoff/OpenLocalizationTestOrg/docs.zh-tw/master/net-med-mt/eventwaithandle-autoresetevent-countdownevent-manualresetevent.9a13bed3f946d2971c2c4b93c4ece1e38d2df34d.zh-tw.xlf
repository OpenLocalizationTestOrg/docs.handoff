<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="eventwaithandle-autoresetevent-countdownevent-manualresetevent.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f3415d0d2da4bfec543b4b86573d6e0b2a5233ff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\eventwaithandle-autoresetevent-countdownevent-manualresetevent.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b901c403c84858fb5a02b65d6d03ae69efa577f6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fc4703bc34a8e960e7cf2681dccbd41d1094c8f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Event wait handles allow threads to synchronize activities by signaling each other and by waiting on each other's signals.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These synchronization events are based on Win32 wait handles and can be divided into two types: those that reset automatically when signaled and those that are reset manually.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Event wait handles are useful in many of the same synchronization scenarios as the <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Event wait handles are often easier to use than the <ph id="ph1">&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Monitor.Pulse%2A?displayProperty=fullName&gt;</ph> methods, and they offer more control over signaling.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Named event wait handles can also be used to synchronize activities across application domains and processes, whereas monitors are local to an application domain.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EventWaitHandle<ept id="p1">](../../../docs/standard/threading/eventwaithandle.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class can represent either automatic or manual reset events and either local events or named system events.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AutoResetEvent<ept id="p1">](../../../docs/standard/threading/autoresetevent.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and represents a local event that resets automatically.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id="p1">](../../../docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class derives from <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> and represents a local event that must be reset manually.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> class is a lightweight, faster version that can be used for events within the same process.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CountdownEvent<ept id="p1">](../../../docs/standard/threading/countdownevent.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> class provides a simplified way to implement fork/join parallelism patterns in code that uses wait handles.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Wait Handles<ept id="p1">](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class is the base class for the <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Semaphore&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Mutex&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It contains static methods such as <ph id="ph1">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> that are useful when working with all types of wait handles.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed Threading Basics<ept id="p1">](../../../docs/standard/threading/managed-threading-basics.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>