<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17cc10065b8881c779c248ca033def47a0421285</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\introducing-xml-serialization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e105b0711af801de52861139044632781224d3b6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">375aca6acb3efb2b0e6a5b7dc8c98dbb990cbb90</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Introducing XML Serialization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introducing XML Serialization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Serialization is the process of converting an object into a form that can be readily transported.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you can serialize an object and transport it over the Internet using HTTP between a client and a server.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>On the other end, deserialization reconstructs the object from the stream.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XML serialization serializes only the public fields and property values of an object into an XML stream.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>XML serialization does not include type information.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, if you have a <bpt id="p1">**</bpt>Book<ept id="p1">**</ept> object that exists in the <bpt id="p2">**</bpt>Library<ept id="p2">**</ept> namespace, there is no guarantee that it is deserialized into an object of the same type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>XML serialization does not convert methods, indexers, private fields, or read-only properties (except read-only collections).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To serialize all an object's fields and properties, both public and private, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> instead of XML serialization.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The central class in XML serialization is the <bpt id="p1">[</bpt>XmlSerializer<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept> class, and the most important methods in this class are the <bpt id="p2">**</bpt>Serialize<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Deserialize<ept id="p3">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> creates C# files and compiles them into .dll files to perform this serialization.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In .NET Framework 2.0, the <bpt id="p1">[</bpt>XML Serializer Generator Tool (Sgen.exe)<ept id="p1">](../../../docs/framework/serialization/xml-serializer-generator-tool-sgen-exe.md)</ept> is designed to generate these serialization assemblies in advance to be deployed with your application and improve startup performance.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The XML stream generated by the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> is compliant with the World Wide Web Consortium (www.w3.org) XML Schema definition language (XSD) 1.0 recommendation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Furthermore, the data types generated are compliant with the document titled "XML Schema Part 2: Datatypes."</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data in your objects is described using programming language constructs like classes, fields, properties, primitive types, arrays, and even embedded XML in the form of <bpt id="p1">**</bpt>XmlElement<ept id="p1">**</ept> or <bpt id="p2">**</bpt>XmlAttribute<ept id="p2">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You have the option of creating your own classes, annotated with attributes, or using the XML Schema Definition tool to generate the classes based on an existing XML Schema.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you have an XML Schema, you can run the XML Schema Definition tool to produce a set of classes that are strongly typed to the schema and annotated with attributes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When an instance of such a class is serialized, the generated XML adheres to the XML Schema.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Provided with such a class, you can program against an easily manipulated object model while being assured that the generated XML conforms to the XML schema.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This is an alternative to using other classes in the .NET Framework, such as the <bpt id="p1">**</bpt>XmlReader<ept id="p1">**</ept> and <bpt id="p2">**</bpt>XmlWriter<ept id="p2">**</ept> classes, to parse and write an XML stream.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XML Documents and Data<ept id="p1">](../../../docs/standard/data/xml/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These classes allow you to parse any XML stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In contrast, use the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> when the XML stream is expected to conform to a known XML Schema.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Attributes control the XML stream generated by the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> class, allowing you to set the XML namespace, element name, attribute name, and so on, of the XML stream.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about these attributes and how they control XML serialization, see <bpt id="p1">[</bpt>Controlling XML Serialization Using Attributes<ept id="p1">](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For a table of those attributes that are used to control the generated XML, see <bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> class can further serialize an object and generate an encoded SOAP XML stream.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The generated XML adheres to section 5 of the World Wide Web Consortium document titled "Simple Object Access Protocol (SOAP) 1.1."</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information about this process, see <bpt id="p1">[</bpt>How to: Serialize an Object as a SOAP-Encoded XML Stream<ept id="p1">](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For a table of the attributes that control the generated XML, see <bpt id="p1">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> class generates the SOAP messages created by, and passed to, XML Web services.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To control the SOAP messages, you can apply attributes to the classes, return values, parameters, and fields found in an XML Web service file (.asmx).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can use both the attributes listed in "Attributes That Control XML Serialization" and "Attributes That Control Encoded SOAP Serialization" because an XML Web service can use either the literal or encoded SOAP style.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about using attributes to control the XML generated by an XML Web service, see <bpt id="p1">[</bpt>XML Serialization with XML Web Services<ept id="p1">](../../../docs/framework/serialization/xml-serialization-with-xml-web-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information about SOAP and XML Web services, see <bpt id="p1">[</bpt>Customizing SOAP Messages<ept id="p1">](https://msdn.microsoft.com/en-us/subscriptions/index/dkwy2d72\(v=vs.71\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Security Considerations for XmlSerializer Applications</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When creating an application that uses the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>, you should be aware of the following items and their implications:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> creates C# (.cs) files and compiles them into .dll files in the directory named by the TEMP environment variable; serialization occurs with those DLLs.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These serialization assemblies can be generated in advance and signed by using the SGen.exe tool.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This does not work a server of Web services.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In other words, it is only for client use and for manual serialization.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The code and the DLLs are vulnerable to a malicious process at the time of creation and compilation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When using a computer running Microsoft Windows NT 4.0 or later, it might be possible for two or more users to share the TEMP directory.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Sharing a TEMP directory is dangerous if the two accounts have different security privileges and the higher-privilege account runs an application using the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this case, one user can breach the computer's security by replacing either the .cs or .dll file that is compiled.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To eliminate this concern, always be sure that each account on the computer has its own profile.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>By default, the TEMP environment variable points to a different directory for each account.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If a malicious user sends a continuous stream of XML data to a Web server (a denial of service attack), then the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> continues to process the data until the computer runs low on resources.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This kind of attack is eliminated if you are using a computer running Internet Information Services (IIS), and your application is running within IIS.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>IIS features a gate that does not process streams longer than a set amount (the default is 4 KB).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you create an application that does not use IIS and deserializes with the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>, you should implement a similar gate that prevents a denial of service attack.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> serializes data and runs any code using any type given to it.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>There are two ways in which a malicious object presents a threat.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It could run malicious code or it could inject malicious code into the C# file created by the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the first case, if a malicious object tries to run a destructive procedure, code access security helps prevent any damage from being done.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the second case, there is a theoretical possibility that a malicious object may somehow inject code into the C# file created by the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Although this issue has been examined thoroughly, and such an attack is considered unlikely, you should take the precaution of never serializing data with an unknown and untrusted type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Serialized sensitive data might be vulnerable.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>After the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>has serialized data, it can be stored as an XML file or other data store.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If your data store is available to other processes, or is visible on an intranet or the Internet, the data can be stolen and used maliciously.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, if you create an application that serializes orders that include credit card numbers, the data is highly sensitive.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To help prevent this, always protect the store for your data and take steps to keep it private.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Serialization of a Simple Class</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following code example shows a basic class with a public field.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>When an instance of this class is serialized, it might resemble the following.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more examples of serialization, see <bpt id="p1">[</bpt>Examples of XML Serialization<ept id="p1">](../../../docs/framework/serialization/examples-of-xml-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Items That Can Be Serialized</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following items can be serialized using the <bpt id="p1">**</bpt>XmLSerializer<ept id="p1">**</ept> class:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Public read/write properties and fields of public classes.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Classes that implement <bpt id="p1">**</bpt>ICollection<ept id="p1">**</ept> or <bpt id="p2">**</bpt>IEnumerable<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Only collections are serialized, not public properties.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XmlElement<ept id="p1">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XmlNode<ept id="p1">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> objects.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information about serializing or deserializing objects, see <bpt id="p1">[</bpt>How to: Serialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept> and <bpt id="p2">[</bpt>How to: Deserialize an Object<ept id="p2">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Advantages of Using XML Serialization</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>class gives you complete and flexible control when you serialize an object as XML.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you are creating an XML Web service, you can apply attributes that control serialization to classes and members to ensure that the XML output conforms to a specific schema.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> enables you to:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Specify whether a field or property should be encoded as an attribute or an element.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Specify an XML namespace to use.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Specify the name of an element or attribute if a field or property name is inappropriate.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Another advantage of XML serialization is that you have no constraints on the applications you develop, as long as the XML stream that is generated conforms to a given schema.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Imagine a schema that is used to describe books.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It features a title, author, publisher, and ISBN number element.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can develop an application that processes the XML data in any way you want, for example, as a book order, or as an inventory of books.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In either case, the only requirement is that the XML stream conforms to the specified XML Schema definition language (XSD) schema.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>XML Serialization Considerations</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following should be considered when using the <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> class:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The Sgen.exe tool is expressly designed to generate serialization assemblies for optimum performance.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The serialized data contains only the data itself and the structure of your classes.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Type identity and assembly information are not included.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Only public properties and fields can be serialized.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Properties must have public accessors (get and set methods).</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you must serialize non-public data, use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> class rather than XML serialization.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A class must have a default constructor to be serialized by <bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Methods cannot be serialized.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>XmlSerializer<ept id="p1">**</ept> can process classes that implement <bpt id="p2">**</bpt>IEnumerable<ept id="p2">**</ept> or <bpt id="p3">**</bpt>ICollection<ept id="p3">**</ept> differently if they meet certain requirements, as follows.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A class that implements <bpt id="p1">**</bpt>IEnumerable<ept id="p1">**</ept> must implement a public <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> method that takes a single parameter.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> method's parameter must be consistent (polymorphic) with the type returned from the <bpt id="p2">**</bpt>IEnumerator.Current<ept id="p2">**</ept> property returned from the <bpt id="p3">**</bpt>GetEnumerator<ept id="p3">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A class that implements <bpt id="p1">**</bpt>ICollection<ept id="p1">**</ept> in addition to <bpt id="p2">**</bpt>IEnumerable<ept id="p2">**</ept> (such as <bpt id="p3">**</bpt>CollectionBase<ept id="p3">**</ept>) must have a public <bpt id="p4">**</bpt>Item<ept id="p4">**</ept> indexed property (an indexer in C#) that takes an integer and it must have a public <bpt id="p5">**</bpt>Count<ept id="p5">**</ept> property of type <bpt id="p6">**</bpt>integer<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The parameter passed to the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> method must be the same type as that returned from the <bpt id="p2">**</bpt>Item<ept id="p2">**</ept> property, or one of that type's bases.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For classes that implement <bpt id="p1">**</bpt>ICollection<ept id="p1">**</ept>, values to be serialized are retrieved from the indexed <bpt id="p2">**</bpt>Item<ept id="p2">**</ept> property rather than by calling <bpt id="p3">**</bpt>GetEnumerator<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Also, public fields and properties are not serialized, with the exception of public fields that return another collection class (one that implements <bpt id="p1">**</bpt>ICollection<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Examples of XML Serialization<ept id="p1">](../../../docs/framework/serialization/examples-of-xml-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>XSD Data Type Mapping</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The World Wide Web Consortium (www.w3.org) document titled "XML Schema Part 2: Datatypes" specifies the simple data types that are allowed in an XML Schema definition language (XSD) schema.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For many of these (for example, <bpt id="p1">**</bpt>int<ept id="p1">**</ept> and <bpt id="p2">**</bpt>decimal<ept id="p2">**</ept>), there is a corresponding data type in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>However, some XML data types do not have a corresponding data type in the .NET Framework (for example, the <bpt id="p1">**</bpt>NMTOKEN<ept id="p1">**</ept> data type).</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In such cases, if you use the XML Schema Definition tool (<bpt id="p1">[</bpt>XML Schema Definition Tool (Xsd.exe)<ept id="p1">](../../../docs/framework/serialization/xml-schema-definition-tool-xsd-exe.md)</ept>) to generate classes from a schema, an appropriate attribute is applied to a member of type string, and its <bpt id="p2">**</bpt>DataType<ept id="p2">**</ept> property is set to the XML data type name.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For example, if a schema contains an element named "MyToken" with the XML data type <bpt id="p1">**</bpt>NMTOKEN<ept id="p1">**</ept>, the generated class might contain a member as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Similarly, if you are creating a class that must conform to a specific XML Schema (XSD), you should apply the appropriate attribute and set its <bpt id="p1">**</bpt>DataType<ept id="p1">**</ept> property to the desired XML data type name.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For a complete list of type mappings, see the <bpt id="p1">**</bpt>DataType<ept id="p1">**</ept>property for any of the following attribute classes:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Binary Serialization<ept id="p1">](../../../docs/framework/serialization/binary-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Serialization<ept id="p1">](../../../docs/framework/serialization/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XmlSerializer<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Examples of XML Serialization<ept id="p1">](../../../docs/framework/serialization/examples-of-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Serialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Deserialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>