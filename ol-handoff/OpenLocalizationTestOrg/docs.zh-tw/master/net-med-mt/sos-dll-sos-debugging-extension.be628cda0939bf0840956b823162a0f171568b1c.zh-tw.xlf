<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98109bdd2261fce22bdb00679d0822223363c2be</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\tools\sos-dll-sos-debugging-extension.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1688b3bf926ca996f2d60a250fc32c58cc5de15e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee0c0c076f7b738f1afd234aaa95bf7c3e435ab1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>SOS.dll (SOS Debugging Extension) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SOS.dll (SOS Debugging Extension)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The SOS Debugging Extension (SOS.dll) helps you debug managed programs in Visual Studio and in the Windows debugger (WinDbg.exe) by providing information about the internal common language runtime (CLR) environment.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tool requires your project to have unmanaged debugging enabled.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>SOS.dll is automatically installed with the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To use SOS.dll in Visual Studio, install the <bpt id="p1">[</bpt>Windows Driver Kit (WDK)<ept id="p1">](http://msdn.microsoft.com/windows/hardware/hh852362)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you are using <ph id="ph1">[!INCLUDE[vs_dev12](../../../includes/vs-dev12-md.md)]</ph>, SOS.dll is supported in the Windows Debugger within Visual Studio, but not in the Immediate window of the Visual Studio debugger.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Commands</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Command</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AnalyzeOOM<ept id="p1">**</ept> (<bpt id="p2">**</bpt>ao<ept id="p2">**</ept>)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Displays the information for the last OOM that occurred on an allocation request to the garbage collection heap.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>(In server garbage collection, it displays OOM, if any, on each garbage collection heap.)</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BPMD<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-nofuturemodule<ept id="p2">**</ept>] [<ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>module name<ept id="p3">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p4">*</bpt>method name<ept id="p4">*</ept>&gt;] [<bpt id="p5">**</bpt>-md<ept id="p5">**</ept><ph id="ph4"> &lt;</ph><ph id="ph5">`MethodDesc`</ph>&gt;] <bpt id="p6">**</bpt>-list<ept id="p6">**</ept> <bpt id="p7">**</bpt>-clear<ept id="p7">**</ept> <ph id="ph6">\&lt;</ph><bpt id="p8">*</bpt>pending breakpoint number<ept id="p8">*</ept><ph id="ph7">&gt; </ph><bpt id="p9">**</bpt>-clearall<ept id="p9">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creates a breakpoint at the specified method in the specified module.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the specified module and method have not been loaded, this command waits for a notification that the module was loaded and just-in-time (JIT) compiled before creating a breakpoint.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can manage the list of pending breakpoints by using the <bpt id="p1">**</bpt>-list<ept id="p1">**</ept>, <bpt id="p2">**</bpt>-clear<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>-clearall<ept id="p3">**</ept> options:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-list<ept id="p1">**</ept> option generates a list of all the pending breakpoints.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a pending breakpoint has a non-zero module ID, that breakpoint is specific to a function in that particular loaded module.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the pending breakpoint has a zero module ID, that breakpoint applies to modules that have not yet been loaded.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>-clear<ept id="p1">**</ept> or <bpt id="p2">**</bpt>-clearall<ept id="p2">**</ept> option to remove pending breakpoints from the list.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CLRStack<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-a<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-l<ept id="p3">**</ept>] [<bpt id="p4">**</bpt>-p<ept id="p4">**</ept>] [<bpt id="p5">**</bpt><ph id="ph1">-n</ph><ept id="p5">**</ept>]</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Provides a stack trace of managed code only.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-p<ept id="p1">**</ept> option shows arguments to the managed function.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-l<ept id="p1">**</ept> option shows information on local variables in a frame.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The SOS Debugging Extension cannot retrieve local names, so the output for local names is in the format <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>local address<ept id="p1">*</ept><ph id="ph2">&gt; </ph><bpt id="p2">**</bpt><ph id="ph3">=</ph><ept id="p2">**</ept> <ph id="ph4">\&lt;</ph><bpt id="p3">*</bpt>value<ept id="p3">*</ept>&gt;.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-a<ept id="p1">**</ept>(all) option is a shortcut for <bpt id="p2">**</bpt>-l<ept id="p2">**</ept> and <bpt id="p3">**</bpt>-p<ept id="p3">**</ept>combined.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">-n</ph><ept id="p1">**</ept> option disables the display of source file names and line numbers.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the debugger has the option SYMOPT_LOAD_LINES specified, SOS will look up the symbols for every managed frame and if successful will display the corresponding source file name and line number.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">-n</ph><ept id="p1">**</ept> (No line numbers) parameter can be specified to disable this behavior.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The SOS Debugging Extension does not display transition frames on x64 and IA-64-based platforms.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>COMState<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Lists the COM apartment model for each thread and a <ph id="ph1">`Context`</ph> pointer, if available.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpArray<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-start<ept id="p2">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>startIndex<ept id="p3">*</ept>&gt;] [<bpt id="p4">**</bpt>-length<ept id="p4">**</ept> <ph id="ph2">\&lt;</ph><bpt id="p5">*</bpt>length<ept id="p5">*</ept>&gt;] [<bpt id="p6">**</bpt>-details<ept id="p6">**</ept>] [<bpt id="p7">**</bpt>-nofields<ept id="p7">**</ept>] <ph id="ph3">\&lt;</ph><bpt id="p8">*</bpt>array object address<ept id="p8">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DA<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-start<ept id="p2">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>startIndex<ept id="p3">*</ept>&gt;] [<bpt id="p4">**</bpt>-length<ept id="p4">**</ept> <ph id="ph2">\&lt;</ph><bpt id="p5">*</bpt>length<ept id="p5">*</ept>&gt;] [<bpt id="p6">**</bpt>-detail<ept id="p6">**</ept>] [<bpt id="p7">**</bpt>-nofields<ept id="p7">**</ept>] <bpt id="p8">*</bpt>array object address<ept id="p8">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Examines elements of an array object.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-start<ept id="p1">**</ept> option specifies the starting index at which to display elements.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-length<ept id="p1">**</ept> option specifies how many elements to show.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-details<ept id="p1">**</ept> option displays details of the element using the <bpt id="p2">**</bpt>DumpObj<ept id="p2">**</ept> and <bpt id="p3">**</bpt>DumpVC<ept id="p3">**</ept> formats.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-nofields<ept id="p1">**</ept> option prevents arrays from displaying.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This option is available only when the <bpt id="p1">**</bpt>-detail<ept id="p1">**</ept> option is specified.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpAssembly<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>assembly address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Displays information about an assembly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DumpAssembly<ept id="p1">**</ept> command lists multiple modules, if they exist.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can get an assembly address by using the <bpt id="p1">**</bpt>DumpDomain<ept id="p1">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpClass<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>EEClass address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Displays information about the <ph id="ph1">`EEClass`</ph> structure associated with a type.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DumpClass<ept id="p1">**</ept> command displays static field values but does not display nonstatic field values.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>DumpMT<ept id="p1">**</ept>, <bpt id="p2">**</bpt>DumpObj<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Name2EE<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>Token2EE<ept id="p4">**</ept> command to get an <ph id="ph1">`EEClass`</ph> structure address.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpDomain<ept id="p1">**</ept> [<ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>domain address<ept id="p2">*</ept>&gt;]</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Enumerates each <ph id="ph1">&lt;xref:System.Reflection.Assembly&gt;</ph> object that is loaded within the specified <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> object address.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When called with no parameters, the <bpt id="p1">**</bpt>DumpDomain<ept id="p1">**</ept> command lists all <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> objects in a process.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpHeap<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-stat<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-strings<ept id="p3">**</ept>] [<bpt id="p4">**</bpt>-short<ept id="p4">**</ept>] [<bpt id="p5">**</bpt>-min<ept id="p5">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p6">*</bpt>size<ept id="p6">*</ept>&gt;] [<bpt id="p7">**</bpt>-max<ept id="p7">**</ept> <ph id="ph2">\&lt;</ph><bpt id="p8">*</bpt>size<ept id="p8">*</ept>&gt;] [<bpt id="p9">**</bpt>-thinlock<ept id="p9">**</ept>] [<bpt id="p10">**</bpt>-startAtLowerBound<ept id="p10">**</ept>] [<bpt id="p11">**</bpt>-mt<ept id="p11">**</ept> <ph id="ph3">\&lt;</ph><bpt id="p12">*</bpt>MethodTable address<ept id="p12">*</ept>&gt;] [<bpt id="p13">**</bpt>-type<ept id="p13">**</ept> <ph id="ph4">\&lt;</ph><bpt id="p14">*</bpt>partial type name<ept id="p14">*</ept>&gt;][<bpt id="p15">*</bpt>start<ept id="p15">*</ept> [<bpt id="p16">*</bpt>end<ept id="p16">*</ept>]]</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Displays information about the garbage-collected heap and collection statistics about objects.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DumpHeap<ept id="p1">**</ept> command displays a warning if it detects excessive fragmentation in the garbage collector heap.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-stat<ept id="p1">**</ept> option restricts the output to the statistical type summary.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-strings<ept id="p1">**</ept> option restricts the output to a statistical string value summary.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-short<ept id="p1">**</ept> option limits output to just the address of each object.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This lets you easily pipe output from the command to another debugger command for automation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-min<ept id="p1">**</ept> option ignores objects that are less than the <ph id="ph1">`size`</ph> parameter, specified in bytes.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-max<ept id="p1">**</ept> option ignores objects that are larger than the <ph id="ph1">`size`</ph> parameter, specified in bytes.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-thinlock<ept id="p1">**</ept> option reports ThinLocks.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>SyncBlk<ept id="p1">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-startAtLowerBound`</ph> option forces the heap walk to begin at the lower bound of a supplied address range.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>During the planning phase, the heap is often not walkable because objects are being moved.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This option forces <bpt id="p1">**</bpt>DumpHeap<ept id="p1">**</ept> to begin its walk at the specified lower bound.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You must supply the address of a valid object as the lower bound for this option to work.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can display memory at the address of a bad object to manually find the next method table.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the garbage collection is currently in a call to <ph id="ph1">`memcopy`</ph>, you may also be able to find the address of the next object by adding the size to the start address, which is supplied as a parameter.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-mt<ept id="p1">**</ept> option lists only those objects that correspond to the specified <ph id="ph1">`MethodTable`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-type<ept id="p1">**</ept> option lists only those objects whose type name is a substring match of the specified string.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`start`</ph> parameter begins listing from the specified address.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`end`</ph> parameter stops listing at the specified address.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpIL<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>Managed DynamicMethod object<ept id="p2">*</ept>&gt; &amp;#124;       <ph id="ph2">\&lt;</ph><bpt id="p3">*</bpt>DynamicMethodDesc pointer<ept id="p3">*</ept>&gt; &amp;#124;        <ph id="ph3">\&lt;</ph><bpt id="p4">*</bpt>MethodDesc pointer<ept id="p4">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Displays the Microsoft intermediate language (MSIL) that is associated with a managed method.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that dynamic MSIL is emitted differently than MSIL that is loaded from an assembly.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Dynamic MSIL refers to objects in a managed object array rather than to metadata tokens.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpLog<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-addr<ept id="p2">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>addressOfStressLog<ept id="p3">*</ept>&gt;] [&lt;<bpt id="p4">*</bpt>Filenam<ept id="p4">*</ept><ph id="ph2">`e`</ph>&gt;]</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Writes the contents of an in-memory stress log to the specified file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you do not specify a name, this command creates a file called StressLog.txt in the current directory.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The in-memory stress log helps you diagnose stress failures without using locks or I/O.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To enable the stress log, set the following registry keys under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft<ph id="ph1">\\</ph>.NETFramework:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>(DWORD) StressLog = 1</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(DWORD) LogFacility = 0xffffffff</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>(DWORD) StressLogSize = 65536</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The optional <ph id="ph1">`-addr`</ph> option lets you specify a stress log other than the default log.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpMD<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>MethodDesc address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Displays information about a <ph id="ph1">`MethodDesc`</ph> structure at the specified address.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>IP2MD<ept id="p1">**</ept> command to get the <ph id="ph1">`MethodDesc`</ph> structure address from a managed function.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpMT<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-MD<ept id="p2">**</ept>] <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>MethodTable address<ept id="p3">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Displays information about a method table at the specified address.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Specifying the <bpt id="p1">**</bpt>-MD<ept id="p1">**</ept> option displays a list of all methods defined with the object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Each managed object contains a method table pointer.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpMethodSig<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>sigaddr<ept id="p2">*</ept>&gt; &lt;<bpt id="p3">*</bpt>moduleadd<ept id="p3">*</ept><ph id="ph2">`r`</ph><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Displays information about a <ph id="ph1">`MethodSig`</ph> structure at the specified address.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpModule<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-mt<ept id="p2">**</ept>] <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>Module address<ept id="p3">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Displays information about a module at the specified address.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-mt<ept id="p1">**</ept> option displays the types defined in a module and the types referenced by the module</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>DumpDomain<ept id="p1">**</ept> or <bpt id="p2">**</bpt>DumpAssembly<ept id="p2">**</ept> command to retrieve a module's address.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpObj<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-nofields<ept id="p2">**</ept>] <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>object address<ept id="p3">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DO<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>object address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Displays information about an object at the specified address.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DumpObj<ept id="p1">**</ept> command displays the fields, the <ph id="ph1">`EEClass`</ph> structure information, the method table, and the size of the object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>DumpStackObjects<ept id="p1">**</ept> command to retrieve an object's address.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Note that you can run the <bpt id="p1">**</bpt>DumpObj<ept id="p1">**</ept> command on fields of type <ph id="ph1">`CLASS`</ph> because they are also objects.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-`</ph><bpt id="p1">**</bpt>nofields<ept id="p1">**</ept> option prevents fields of the object being displayed, it is useful for objects like String.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpRuntimeTypes<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Displays the runtime type objects in the garbage collector heap and lists their associated type names and method tables.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpStack<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-EE<ept id="p2">**</ept>] [<bpt id="p3">**</bpt><ph id="ph1">-n</ph><ept id="p3">**</ept>] [<ph id="ph2">`top`</ph> <bpt id="p4">*</bpt>stack<ept id="p4">*</ept> [<ph id="ph3">`bottom`</ph> <bpt id="p5">*</bpt>stac<ept id="p5">*</ept><ph id="ph4">`k`</ph>]]</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Displays a stack trace.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-EE<ept id="p1">**</ept> option causes the <bpt id="p2">**</bpt>DumpStack<ept id="p2">**</ept> command to display only managed functions.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`top`</ph> and <ph id="ph2">`bottom`</ph> parameters to limit the stack frames displayed on x86 platforms.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">-n</ph><ept id="p1">**</ept> option disables the display of source file names and line numbers.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If the debugger has the option SYMOPT_LOAD_LINES specified, SOS will look up the symbols for every managed frame and if successful will display the corresponding source file name and line number.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">-n</ph><ept id="p1">**</ept> (No line numbers) parameter can be specified to disable this behavior.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>On x86 and x64 platforms, the <bpt id="p1">**</bpt>DumpStack<ept id="p1">**</ept> command creates a verbose stack trace.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>On IA-64-based platforms, the <bpt id="p1">**</bpt>DumpStack<ept id="p1">**</ept> command mimics the debugger's <bpt id="p2">**</bpt>K<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`top`</ph> and <ph id="ph2">`bottom`</ph> parameters are ignored on IA-64-based platforms.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpSig<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>sigaddr<ept id="p2">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>moduleaddr<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Displays information about a <ph id="ph1">`Sig`</ph> structure at the specified address.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpSigElem<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>sigaddr<ept id="p2">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>moduleaddr<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Displays a single element of a signature object.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>In most cases, you should use <bpt id="p1">**</bpt>DumpSig<ept id="p1">**</ept> to look at individual signature objects.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>However, if a signature has been corrupted in some way, you can use <bpt id="p1">**</bpt>DumpSigElem<ept id="p1">**</ept> to read the valid portions of it.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpStackObjects<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-verify<ept id="p2">**</ept>] [<ph id="ph1">`top`</ph> <bpt id="p3">*</bpt>stack<ept id="p3">*</ept> [<ph id="ph2">`bottom`</ph> <bpt id="p4">*</bpt>stack<ept id="p4">*</ept>]]</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DSO<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-verify<ept id="p2">**</ept>] [<ph id="ph1">`top`</ph> <bpt id="p3">*</bpt>stack<ept id="p3">*</ept> [<ph id="ph2">`bottom`</ph> <bpt id="p4">*</bpt>stack<ept id="p4">*</ept>]]</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Displays all managed objects found within the bounds of the current stack.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-verify<ept id="p1">**</ept> option validates each non-static <ph id="ph1">`CLASS`</ph> field of an object field.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>DumpStackObject<ept id="p1">**</ept> command with stack tracing commands such as the <bpt id="p2">**</bpt>K<ept id="p2">**</ept> command and the <bpt id="p3">**</bpt>CLRStack<ept id="p3">**</ept> command to determine the values of local variables and parameters.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DumpVC<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>MethodTable address<ept id="p2">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>Address<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Displays information about the fields of a value class at the specified address.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>MethodTable<ept id="p1">**</ept> parameter allows the <bpt id="p2">**</bpt>DumpVC<ept id="p2">**</ept> command to correctly interpret fields.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Value classes do not have a method table as their first field.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EEHeap<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-gc<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-loader<ept id="p3">**</ept>]</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Displays information about process memory consumed by internal common language runtime data structures.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-gc<ept id="p1">**</ept> and <bpt id="p2">**</bpt>-loader<ept id="p2">**</ept> options limit the output of this command to garbage collector or loader data structures.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The information for the garbage collector lists the ranges of each segment in the managed heap.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the pointer falls within a segment range given by <bpt id="p1">**</bpt>-gc<ept id="p1">**</ept>, the pointer is an object pointer.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EEStack<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-short<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-EE<ept id="p3">**</ept>]</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Runs the <bpt id="p1">**</bpt>DumpStack<ept id="p1">**</ept> command on all threads in the process.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-EE<ept id="p1">**</ept> option is passed directly to the <bpt id="p2">**</bpt>DumpStack<ept id="p2">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-short<ept id="p1">**</ept> parameter limits the output to the following kinds of threads:</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Threads that have taken a lock.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Threads that have been stalled in order to allow a garbage collection.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Threads that are currently in managed code.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EEVersion<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Displays the common language runtime version.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EHInfo<ept id="p1">**</ept> [<ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>MethodDesc address<ept id="p2">*</ept>&gt;] [<ph id="ph2">\&lt;</ph><bpt id="p3">*</bpt>Code address<ept id="p3">*</ept>&gt;]</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Displays the exception handling blocks in a specified method.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>This command displays the code addresses and offsets for the clause block (the <ph id="ph1">`try`</ph> block) and the handler block (the <ph id="ph2">`catch`</ph> block).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FAQ<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Displays frequently asked questions.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FinalizeQueue<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-detail<ept id="p2">**</ept>] &amp;#124; [<bpt id="p3">**</bpt>-allReady<ept id="p3">**</ept>] [<bpt id="p4">**</bpt>-short<ept id="p4">**</ept>]</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Displays all objects registered for finalization.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-detail<ept id="p1">**</ept> option displays extra information about any <ph id="ph1">`SyncBlocks`</ph> that need to be cleaned up, and any <ph id="ph2">`RuntimeCallableWrappers`</ph> (RCWs) that await cleanup.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Both of these data structures are cached and cleaned up by the finalizer thread when it runs.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-allReady`</ph> option displays all objects that are ready for finalization, regardless of whether they are already marked by the garbage collection as such, or will be marked by the next garbage collection.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The objects that are in the "ready for finalization" list are finalizable objects that are no longer rooted.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This option can be very expensive, because it verifies whether all the objects in the finalizable queues are still rooted.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-short`</ph> option limits the output to the address of each object.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>If it is used in conjunction with <bpt id="p1">**</bpt>-allReady<ept id="p1">**</ept>, it enumerates all objects that have a finalizer that are no longer rooted.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If it is used independently, it lists all objects in the finalizable and "ready for finalization" queues.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FindAppDomain<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>Object address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Determines the application domain of an object at the specified address.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FindRoots<ept id="p1">**</ept> <bpt id="p2">**</bpt>-gen<ept id="p2">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>N<ept id="p3">*</ept>&gt; &amp;#124; <bpt id="p4">**</bpt>-gen any<ept id="p4">**</ept> &amp;#124;<ph id="ph2">\&lt;</ph><bpt id="p5">*</bpt>object address<ept id="p5">*</ept><ph id="ph3">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Causes the debugger to break in the debuggee on the next collection of the specified generation.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The effect is reset as soon as the break occurs.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To break on the next collection, you have to reissue the command.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>object address&gt;<ept id="p1">*</ept> form of this command is used after the break caused by the <bpt id="p2">**</bpt>-gen<ept id="p2">**</ept> or <bpt id="p3">**</bpt>-gen any<ept id="p3">**</ept> has occurred.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>At that time, the debuggee is in the right state for <bpt id="p1">**</bpt>FindRoots<ept id="p1">**</ept> to identify roots for objects from the current condemned generations.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GCHandles<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-perdomain<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Displays statistics about garbage collector handles in the process.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-perdomain<ept id="p1">**</ept> option arranges the statistics by application domain.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>GCHandles<ept id="p1">**</ept> command to find memory leaks caused by garbage collector handle leaks.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For example, a memory leak occurs when code retains a large array because a strong garbage collector handle still points to it, and the handle is discarded without freeing it.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GCHandleLeaks<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Searches memory for any references to strong and pinned garbage collector handles in the process and displays the results.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>If a handle is found, the <bpt id="p1">**</bpt>GCHandleLeaks<ept id="p1">**</ept> command displays the address of the reference.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If a handle is not found in memory, this command displays a notification.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GCInfo<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>MethodDesc address<ept id="p2">*</ept><ph id="ph2">&gt;</ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>Code address<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Displays data that indicates when registers or stack locations contain managed objects.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>If a garbage collection occurs, the collector must know the locations of references to objects so it can update them with new object pointer values.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GCRoot<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-nostacks<ept id="p2">**</ept>] <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>Object address<ept id="p3">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Displays information about references (or roots) to an object at the specified address.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>GCRoot<ept id="p1">**</ept> command examines the entire managed heap and the handle table for handles within other objects and handles on the stack.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Each stack is then searched for pointers to objects, and the finalizer queue is also searched.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>This command does not determine whether a stack root is valid or is discarded.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>CLRStack<ept id="p1">**</ept> and <bpt id="p2">**</bpt>U<ept id="p2">**</ept> commands to disassemble the frame that the local or argument value belongs to in order to determine if the stack root is still in use.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-nostacks<ept id="p1">**</ept> option restricts the search to garbage collector handles and freachable objects.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GCWhere<ept id="p1">**</ept>  <bpt id="p2">*</bpt><ph id="ph1">\&lt;</ph>object address&gt;<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Displays the location and size in the garbage collection heap of the argument passed in.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>When the argument lies in the managed heap but is not a valid object address, the size is displayed as 0 (zero).</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>help<ept id="p1">**</ept> [<ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>command<ept id="p2">*</ept>&gt;] [<ph id="ph2">`faq`</ph>]</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Displays all available commands when no parameter is specified, or displays detailed help information about the specified command.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`faq`</ph> parameter displays answers to frequently asked questions.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HeapStat<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-inclUnrooted<ept id="p2">**</ept> &amp;#124; <bpt id="p3">**</bpt>-iu<ept id="p3">**</ept>]</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Displays the generation sizes for each heap and the total free space in each generation on each heap.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If the -<bpt id="p1">**</bpt>inclUnrooted<ept id="p1">**</ept> option is specified, the report includes information about the managed objects from the garbage collection heap that is no longer rooted.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HistClear<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Releases any resources used by the family of <ph id="ph1">`Hist`</ph> commands.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Generally, you do not have to explicitly call <ph id="ph1">`HistClear`</ph>, because each <ph id="ph2">`HistInit`</ph> cleans up the previous resources.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HistInit<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Initializes the SOS structures from the stress log saved in the debuggee.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HistObj<ept id="p1">**</ept> <bpt id="p2">*</bpt>&lt;obj_address&gt;<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Examines all stress log relocation records and displays the chain of garbage collection relocations that may have led to the address passed in as an argument.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HistObjFind<ept id="p1">**</ept>  <bpt id="p2">*</bpt>&lt;obj_address&gt;<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Displays all the log entries that reference an object at the specified address.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>HistRoot<ept id="p1">**</ept> <bpt id="p2">*</bpt><ph id="ph1">\&lt;</ph>root&gt;<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Displays information related to both promotions and relocations of the specified root.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The root value can be used to track the movement of an object through the garbage collections.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IP2MD<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>Code address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Displays the <ph id="ph1">`MethodDesc`</ph> structure at the specified address in code that has been JIT-compiled.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ListNearObj`</ph> (<ph id="ph2">`lno`</ph>) <bpt id="p1">*</bpt>&lt;obj_address&gt;<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Displays the objects preceding and following the specified address.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The command looks for the address in the garbage collection heap that looks like a valid beginning of a managed object (based on a valid method table) and the object following the argument address.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MinidumpMode<ept id="p1">**</ept> [<bpt id="p2">**</bpt>0<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>1<ept id="p3">**</ept>]</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Prevents running unsafe commands when using a minidump.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Pass <bpt id="p1">**</bpt>0<ept id="p1">**</ept> to disable this feature or <bpt id="p2">**</bpt>1<ept id="p2">**</ept> to enable this feature.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>By default, the <bpt id="p1">**</bpt>MinidumpMode<ept id="p1">**</ept> value is set to <bpt id="p2">**</bpt>0<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Minidumps created with the <bpt id="p1">**</bpt>.dump /m<ept id="p1">**</ept> command or <bpt id="p2">**</bpt>.dump<ept id="p2">**</ept> command have limited CLR-specific data and allow you to run only a subset of SOS commands correctly.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Some commands may fail with unexpected errors because required areas of memory are not mapped or are only partially mapped.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>This option protects you from running unsafe commands against minidumps.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name2EE<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>module name<ept id="p2">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>type or method name<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name2EE<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>module name<ept id="p2">*</ept><ph id="ph2">&gt;</ph><bpt id="p3">**</bpt>!<ept id="p3">**</ept><ph id="ph3">\&lt;</ph><bpt id="p4">*</bpt>type or method name<ept id="p4">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Displays the <ph id="ph1">`MethodTable`</ph> structure and <ph id="ph2">`EEClass`</ph> structure for the specified type or method in the specified module.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The specified module must be loaded in the process.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>To get the proper type name, browse the module by using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>You can also pass <ph id="ph1">`*`</ph> as the module name parameter to search all loaded managed modules.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>module name<ept id="p1">*</ept> parameter can also be the debugger's name for a module, such as <ph id="ph1">`mscorlib`</ph> or <ph id="ph2">`image00400000`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>This command supports the Windows debugger syntax of &lt;<ph id="ph1">`module`</ph><ph id="ph2">&gt;</ph><ph id="ph3">`!`</ph><ph id="ph4">&lt;</ph><ph id="ph5">`type`</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The type must be fully qualified.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ObjSize<ept id="p1">**</ept> [<ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>Object address<ept id="p2">*</ept>&gt;] &amp;#124; [<bpt id="p3">**</bpt>-aggregate<ept id="p3">**</ept>] [<bpt id="p4">**</bpt>-stat<ept id="p4">**</ept>]</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Displays the size of the specified object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>If you do not specify any parameters, the <bpt id="p1">**</bpt>ObjSize<ept id="p1">**</ept> command displays the size of all objects found on managed threads, displays all garbage collector handles in the process, and totals the size of any objects pointed to by those handles.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ObjSize<ept id="p1">**</ept> command includes the size of all child objects in addition to the parent.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-aggregate<ept id="p1">**</ept> option can be used in conjunction with the <bpt id="p2">**</bpt>-stat<ept id="p2">**</ept> argument to get a detailed view of the types that are still rooted.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>By using <bpt id="p1">**</bpt>!dumpheap -stat<ept id="p1">**</ept> and <bpt id="p2">**</bpt>!objsize -aggregate -stat<ept id="p2">**</ept>, you can determine which objects are no longer rooted and diagnose various memory issues.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PrintException<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-nested<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-lines<ept id="p3">**</ept>] [<ph id="ph1">\&lt;</ph><bpt id="p4">*</bpt>Exception object address<ept id="p4">*</ept>&gt;]</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PE<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-nested<ept id="p2">**</ept>] [<ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>Exception object address<ept id="p3">*</ept>&gt;]</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Displays and formats fields of any object derived from the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class at the specified address.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>If you do not specify an address, the <bpt id="p1">**</bpt>PrintException<ept id="p1">**</ept> command displays the last exception thrown on the current thread.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-nested<ept id="p1">**</ept> option displays details about nested exception objects.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-lines<ept id="p1">**</ept> option displays source information, if available.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>You can use this command to format and view the <ph id="ph1">`_stackTrace`</ph> field, which is a binary array.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ProcInfo<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-env<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-time<ept id="p3">**</ept>] [<bpt id="p4">**</bpt>-mem<ept id="p4">**</ept>]</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Displays environment variables for the process, kernel CPU time, and memory usage statistics.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RCWCleanupList<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>RCWCleanupList address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Displays the list of runtime callable wrappers at the specified address that are awaiting cleanup.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SaveModule<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>Base address<ept id="p2">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>Filename<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Writes an image, which is loaded in memory at the specified address, to the specified file.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SOSFlush<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Flushes an internal SOS cache.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StopOnException<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-derived<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-create<ept id="p3">**</ept> &amp;#124; <bpt id="p4">**</bpt>-create2<ept id="p4">**</ept>] <ph id="ph1">\&lt;</ph><bpt id="p5">*</bpt>Exception<ept id="p5">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p6">*</bpt>Pseudo-register number<ept id="p6">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Causes the debugger to stop when the specified exception is thrown, but to continue running when other exceptions are thrown.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-derived<ept id="p1">**</ept> option catches the specified exception and every exception that derives from the specified exception.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SyncBlk<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-all<ept id="p2">**</ept> &amp;#124; <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>syncblk number<ept id="p3">*</ept>&gt;]</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Displays the specified <ph id="ph1">`SyncBlock`</ph> structure or all <ph id="ph2">`SyncBlock`</ph> structures.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If you do not pass any arguments, the <bpt id="p1">**</bpt>SyncBlk<ept id="p1">**</ept> command displays the <ph id="ph1">`SyncBlock`</ph> structure corresponding to objects that are owned by a thread.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SyncBlock`</ph> structure is a container for extra information that does not need to be created for every object.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>It can hold COM interop data, hash codes, and locking information for thread-safe operations.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ThreadPool<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Displays information about the managed thread pool, including the number of work requests in the queue, the number of completion port threads, and the number of timers.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Token2EE<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>module name<ept id="p2">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>token<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Turns the specified metadata token in the specified module into a <ph id="ph1">`MethodTable`</ph> structure or <ph id="ph2">`MethodDesc`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>You can pass <ph id="ph1">`*`</ph> for the module name parameter to find what that token maps to in every loaded managed module.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>You can also pass the debugger's name for a module, such as <ph id="ph1">`mscorlib`</ph> or <ph id="ph2">`image00400000`</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Threads<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-live<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-special<ept id="p3">**</ept>]</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Displays all managed threads in the process.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Threads<ept id="p1">**</ept> command displays the debugger shorthand ID, the common language runtime thread ID, and the operating system thread ID.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Additionally, the <bpt id="p1">**</bpt>Threads<ept id="p1">**</ept> command displays a Domain column that indicates the application domain in which a thread is executing, an APT column that displays the COM apartment mode, and an Exception column that displays the last exception thrown in the thread.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-live<ept id="p1">**</ept> option displays threads associated with a live thread.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-special<ept id="p1">**</ept> option displays all special threads created by the CLR.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Special threads include garbage collection threads (in concurrent and server garbage collection), debugger helper threads, finalizer threads, <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> unload threads, and thread pool timer threads.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ThreadState <ph id="ph1">\&lt;</ph><ept id="p1">**</ept> <bpt id="p2">*</bpt>State value field<ept id="p2">*</ept> <bpt id="p3">**</bpt><ph id="ph2">&gt;</ph><ept id="p3">**</ept></source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Displays the state of the thread.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`value`</ph> parameter is the value of the <ph id="ph2">`State`</ph> field in the <bpt id="p1">**</bpt>Threads<ept id="p1">**</ept> report output.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Example:</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TraverseHeap<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-xml<ept id="p2">**</ept>] <ph id="ph1">\&lt;</ph><bpt id="p3">*</bpt>filename<ept id="p3">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Writes heap information to the specified file in a format understood by the CLR profiler.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-xml<ept id="p1">**</ept> option causes the <bpt id="p2">**</bpt>TraverseHeap<ept id="p2">**</ept> command to format the file as XML.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>You can download the CLR Profiler from the <bpt id="p1">[</bpt>Microsoft Download Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=67325)</ept>.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>U<ept id="p1">**</ept> [<bpt id="p2">**</bpt>-gcinfo<ept id="p2">**</ept>] [<bpt id="p3">**</bpt>-ehinfo<ept id="p3">**</ept>] [<bpt id="p4">**</bpt><ph id="ph1">-n</ph><ept id="p4">**</ept>] <ph id="ph2">\&lt;</ph><bpt id="p5">*</bpt>MethodDesc address<ept id="p5">*</ept>&gt; &amp;#124; <ph id="ph3">\&lt;</ph><bpt id="p6">*</bpt>Code address<ept id="p6">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Displays an annotated disassembly of a managed method specified either by a <ph id="ph1">`MethodDesc`</ph> structure pointer for the method or by a code address within the method body.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>U<ept id="p1">**</ept> command displays the entire method from start to finish, with annotations that convert metadata tokens to names.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-gcinfo<ept id="p1">**</ept> option causes the <bpt id="p2">**</bpt>U<ept id="p2">**</ept> command to display the <ph id="ph1">`GCInfo`</ph> structure for the method.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>-ehinfo<ept id="p1">**</ept> option displays exception information for the method.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>You can also obtain this information with the <bpt id="p1">**</bpt>EHInfo<ept id="p1">**</ept> command.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">-n</ph><ept id="p1">**</ept> option disables the display of source file names and line numbers.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If the debugger has the option SYMOPT_LOAD_LINES specified, SOS looks up the symbols for every managed frame and, if successful, displays the corresponding source file name and line number.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>You can specify the <bpt id="p1">**</bpt><ph id="ph1">-n</ph><ept id="p1">**</ept> option to disable this behavior.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VerifyHeap<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Checks the garbage collector heap for signs of corruption and displays any errors found.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Heap corruptions can be caused by platform invoke calls that are constructed incorrectly.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VerifyObj<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph><bpt id="p2">*</bpt>object address<ept id="p2">*</ept><ph id="ph2">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Checks the object that is passed as an argument for signs of corruption.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VMMap<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Traverses the virtual address space and displays the type of protection applied to each region.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>VMStat<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Provides a summary view of the virtual address space, ordered by each type of protection applied to that memory (free, reserved, committed, private, mapped, image).</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The TOTAL column displays the result of the AVERAGE column multiplied by the BLK COUNT column.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>The SOS Debugging Extension lets you view information about code that is running inside the common language runtime.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>For example, you can use the SOS Debugging Extension to display information about the managed heap, look for heap corruptions, display internal data types used by the runtime, and view information about all managed code running inside the runtime.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>To use the SOS Debugging Extension in Visual Studio, install the <bpt id="p1">[</bpt>Windows Driver Kit (WDK)<ept id="p1">](http://msdn.microsoft.com/windows/hardware/hh852362)</ept>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>For information about the integrated debugging environment in Visual Studio, see <bpt id="p1">[</bpt>Debugging Environments<ept id="p1">](http://msdn.microsoft.com/library/windows/hardware/hh406268.aspx)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>You can also use the SOS Debugging Extension by loading it into the WinDbg.exe debugger, which is available from the <bpt id="p1">[</bpt>WDK and Developer Tools Web site<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=103787)</ept>, and executing commands within WinDbg.exe.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>To load the SOS Debugging Extension into the WinDbg.exe debugger, run the following command in the tool:</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>WinDbg.exe and Visual Studio use a version of SOS.dll that corresponds to the version of Mscorwks.dll currently in use.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>In versions 1.1 and 2.0 of the .NET Framework, SOS.dll is installed in the same directory as Mscorwks.dll.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>By default, you should use the version of SOS.dll that matches the current version of Mscorwks.dll.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>To use a dump file created on another computer, make sure that the Mscorwks.dll file that came with that installation is in your symbol path, and load the corresponding version of SOS.dll.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>To load a specific version of SOS.dll, type the following command into the Windows Debugger:</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The following command displays the contents of an array at the address <ph id="ph1">`00ad28d0`</ph>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The display starts from the second element and continues for five elements.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>The following command displays the contents of an assembly at the address <ph id="ph1">`1ca248`</ph>.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>The following command displays information about the garbage collector heap.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The following command writes the contents of the in-memory stress log to a (default) file called StressLog.txt in the current directory.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>The following command displays the <ph id="ph1">`MethodDesc`</ph> structure at the address <ph id="ph2">`902f40`</ph>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The following command displays information about a module at the address <ph id="ph1">`1caa50`</ph>.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The following command displays information about an object at the address <ph id="ph1">`a79d40`</ph>.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>The following command displays the fields of a value class at the address <ph id="ph1">`00a79d9c`</ph> using the method table at the address <ph id="ph2">`0090320c`</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>The following command displays the process memory used by the garbage collector.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The following command displays all objects scheduled for finalization.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>The following command determines the application domain of an object at the address <ph id="ph1">`00a79d98`</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The following command displays all garbage collector handles in the current process.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>The following command displays the <ph id="ph1">`MethodTable`</ph> and <ph id="ph2">`EEClass`</ph> structures for the <ph id="ph3">`Main`</ph> method in the class <ph id="ph4">`MainClass`</ph> in the module <ph id="ph5">`unittest.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The following command displays information about the metadata token at the address <ph id="ph1">`02000003`</ph> in the module <ph id="ph2">`unittest.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>