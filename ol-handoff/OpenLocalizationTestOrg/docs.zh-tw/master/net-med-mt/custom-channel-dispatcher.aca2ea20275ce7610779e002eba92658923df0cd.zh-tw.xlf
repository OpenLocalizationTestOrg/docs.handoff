<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b73ec77d6db0ff59e3a033c22f45f3db11763e45</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\custom-channel-dispatcher.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a85a58bdf7d551e929edba6d55fba936abcdafad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec2c68e1bbc21a9442ca183313a26c69e3c7748b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Custom Channel Dispatcher | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom Channel Dispatcher</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to build the channel stack in a custom way by implementing <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> directly and how to create a custom channel dispatcher in Web host environment.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The channel dispatcher interacts with <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph> to accept channels and retrieves messages from the channel stack.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This sample also provides a basic sample to show how to build a channel stack in a Web host environment by using <ph id="ph1">&lt;xref:System.ServiceModel.Activation.VirtualPathExtension&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Custom ServiceHostBase</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This sample implements the base type <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> instead of <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> to demonstrate how to replace the <ph id="ph3">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> stack implementation with a custom message handling layer on top of the channel stack.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You override the virtual method <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase.InitializeRuntime%2A&gt;</ph> to build channel listeners and the channel dispatcher.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To implement a Web-hosted service, get the service extension <ph id="ph1">&lt;xref:System.ServiceModel.Activation.VirtualPathExtension&gt;</ph> from the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHostBase.Extensions%2A&gt;</ph> collection and add it to the <ph id="ph3">&lt;xref:System.ServiceModel.Channels.BindingParameterCollection&gt;</ph> so that the transport layer knows how to configure the channel listener based on the hosting environment settings, that is, the Internet Information Services (IIS)/Windows Process Activation Service (WAS) settings.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Custom Channel Dispatcher</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The custom channel dispatcher extends the type <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This type implements the channel-layer programming logic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In this sample, only <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IReplyChannel&gt;</ph> is supported for request-reply message exchange pattern, but the custom channel dispatcher can be easily extended to other channel types.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The dispatcher first opens the channel listener and then accepts the singleton reply channel.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>With the channel, it starts to send messages (requests) in an infinite loop.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For each request, it creates a reply message and sends it back to the client.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating a Response Message</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The message processing is implemented in the type <ph id="ph1">`MyServiceManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`HandleRequest`</ph> method, the <ph id="ph2">`Action`</ph> header of the message is first checked to see whether the request is supported.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A predefined SOAP action "http://tempuri.org/HelloWorld/Hello" is defined to provide message filtering.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This is similar to the service contract concept in the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implementation of <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For the correct SOAP action case, the sample retrieves the requested message data and generates a corresponding response to the request similar to what is seen in the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> case.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You specially handled the HTTP-GET verb by returning a custom HTML message, in this, case so that you can browse the service from a browser to see that it is compiled correctly.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the SOAP action does not match, send a fault message back to indicate that the request is not supported.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The client of this sample is a normal <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client that does not assume anything from the service.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>So, the service is specially designed to match what you get from a normal <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph><ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As a result, only a service contract is required on the client.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using the sample</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Running the client application directly produces the following output.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can also browse the service from a browser so that an HTTP-GET message gets processed on the server.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This gets you well-formatted HTML text back.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>