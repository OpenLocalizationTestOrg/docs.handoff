<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0fe2602e4822d7ceb84e21aada8748bf02310ea</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\traversing-xml-schemas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d889628059a7f668451f67f2ef4d99d1d714832a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16434e2919ebd96feb9a9fa4039afca0ab75fd21</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Traversing XML Schemas | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Traversing XML Schemas</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Traversing an XML schema using the Schema Object Model (SOM) API provides access to the elements, attributes, and types stored in the SOM.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Traversing an XML schema loaded into the SOM is also the first step in editing an XML schema using the SOM API.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Traversing an XML Schema</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following properties of the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> class provide access to the collection of all global items added to the XML schema.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Object type stored in the collection or array</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaExternal&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaInclude&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaImport&gt;</ph>, or <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaRedefine&gt;</ph></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> (provides access to all global level elements, attributes, and types).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaType&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlAttribute&gt;</ph> (provides access to attributes that do not belong to the schema namespace)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All of the properties listed in the table above, except for the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A&gt;</ph> property, are Post-Schema-Compilation-Infoset (PSCI) properties that are not available until the schema has been compiled.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A&gt;</ph> property is a pre-schema-compilation property that can be used before the schema has been compiled to access and edit all global level elements, attributes, and types.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.UnhandledAttributes%2A&gt;</ph> property provides access to all the attributes that do not belong to the schema namespace.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These attributes are not processed by the schema processor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The code example that follows demonstrates traversing the customer schema created in the <bpt id="p1">[</bpt>Building XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/building-xml-schemas.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The code example demonstrates traversing the schema using the collections described above and writes all the elements and attributes in the schema to the console.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The sample traverses the customer schema in the following steps.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Adds the customer schema to a new <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object and then compiles it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any schema validation warnings and errors encountered reading or compiling the schema are handled by the <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Retrieves the compiled <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> by iterating over the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because the schema is compiled, Post-Schema-Compilation-Infoset (PSCI) properties are accessible.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Iterates over each <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> in the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaObjectTable.Values%2A&gt;</ph> collection of the post-schema-compilation <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchema.Elements%2A?displayProperty=fullName&gt;</ph> collection writing the name of each element to the console.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets the complex type of the <ph id="ph1">`Customer`</ph> element using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the complex type has any attributes, gets an <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> to enumerate over each <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> and writes its name to the console.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the sequence particle of the complex type using the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSequence&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Iterates over each <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> in the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSequence.Items%2A?displayProperty=fullName&gt;</ph> collection writing the name of each child element to the console.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following is the complete code example.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>XmlSchemaTraverseExample#1<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Data/XmlSchemaTraverseExample/CPP/XmlSchemaTraverseExample.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>XmlSchemaTraverseExample#1<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Data/XmlSchemaTraverseExample/CS/XmlSchemaTraverseExample.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>XmlSchemaTraverseExample#1<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaTraverseExample/VB/XmlSchemaTraverseExample.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement.ElementSchemaType%2A?displayProperty=fullName&gt;</ph> property can be <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> if it is a user-defined simple type or a complex type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>It can also be <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaDatatype&gt;</ph> if it is one of the built-in datatypes defined in the W3C XML Schema Recommendation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the customer schema, the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement.ElementSchemaType%2A&gt;</ph> of the <ph id="ph2">`Customer`</ph> element is <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph>, and the <ph id="ph4">`FirstName`</ph> and <ph id="ph5">`LastName`</ph> elements are <ph id="ph6">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The code example in the <bpt id="p1">[</bpt>Building XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/building-xml-schemas.md)</ept> topic used the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaComplexType.Attributes%2A?displayProperty=fullName&gt;</ph> collection to add the attribute <ph id="ph2">`CustomerId`</ph> to the <ph id="ph3">`Customer`</ph> element.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is a pre-schema-compilation property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The corresponding Post-Schema-Compilation-Infoset property is the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaComplexType.AttributeUses%2A?displayProperty=fullName&gt;</ph> collection, which holds all the attributes of the complex type, including the ones that are inherited through type derivation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Schema Object Model Overview<ept id="p1">](../../../../docs/standard/data/xml/xml-schema-object-model-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Reading and Writing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/reading-and-writing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Building XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/building-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Editing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/editing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Including or Importing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/including-or-importing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XmlSchemaSet for Schema Compilation<ept id="p1">](../../../../docs/standard/data/xml/xmlschemaset-for-schema-compilation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Post-Schema Compilation Infoset<ept id="p1">](../../../../docs/standard/data/xml/post-schema-compilation-infoset.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>