<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="focus-overview.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cbd772a71e5639386f711d871f92b80d859d54e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\focus-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a9e5287689a0c6f087df88c8c7858da17af5ed9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c64fbcb5ce6406048983cb09292e45e8186380a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Focus Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Focus Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> there are two main concepts that pertain to focus: keyboard focus and logical focus.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Keyboard focus refers to the element that receives keyboard input and logical focus refers to the element in a focus scope that has focus.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These concepts are discussed in detail in this overview.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Understanding the difference in these concepts is important for creating complex applications that have multiple regions where focus can be obtained.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The major classes that participate in focus management are the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Windows.Input.FocusManager&gt;</ph> class, and the base element classes, such as <ph id="ph3">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.ContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about the base elements, see the <bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/base-elements-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class is concerned primarily with keyboard focus and the <ph id="ph2">&lt;xref:System.Windows.Input.FocusManager&gt;</ph> is concerned primarily with logical focus, but this is not an absolute distinction.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An element that has keyboard focus will also have logical focus, but an element that has logical focus does not necessarily have keyboard focus.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is apparent when you use the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class to set the element that has keyboard focus, for it also sets logical focus on the element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Keyboard Focus</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Keyboard focus refers to the element that is currently receiving keyboard input.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There can be only one element on the whole desktop that has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, the element that has keyboard focus will have <ph id="ph2">&lt;xref:System.Windows.IInputElement.IsKeyboardFocused%2A&gt;</ph> set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The static property <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.FocusedElement%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class gets the element that currently has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In order for an element to obtain keyboard focus, the <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> properties on the base elements must be set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Some classes, such as the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> base class, have <ph id="ph2">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> set to <ph id="ph3">`false`</ph> by default; therefore, you must set <ph id="ph4">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> to <ph id="ph5">`true`</ph> if you want such an element to be able to obtain keyboard focus.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Keyboard focus can be obtained through user interaction with the <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>, such as tabbing to an element or clicking the mouse on certain elements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Keyboard focus can also be obtained programmatically by using the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.Focus%2A&gt;</ph> method on the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.Focus%2A&gt;</ph> method attempts to give the specified element keyboard focus.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The returned element is the element that has keyboard focus, which might be a different element than requested if either the old or new focus object block the request.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.Focus%2A&gt;</ph> method to set keyboard focus on a <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>focussample#FocusSampleSetFocus<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplesetfocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>focussample#FocusSampleSetFocus<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplesetfocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> property on the base element classes gets a value indicating whether the element has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> property on the base element classes gets a value indicating whether the element or any one of its visual child elements has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When setting initial focus at application startup, the element to receive focus must be in the visual tree of the initial window loaded by the application, and the element must have <ph id="ph1">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The recommended place to set initial focus is in the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> callback can also be used by calling <ph id="ph2">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Logical Focus</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Logical focus refers to the <ph id="ph1">&lt;xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName&gt;</ph> in a focus scope.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A focus scope is an element that keeps track of the <ph id="ph1">&lt;xref:System.Windows.Input.FocusManager.FocusedElement%2A&gt;</ph> within its scope.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When keyboard focus leaves a focus scope, the focused element will lose keyboard focus but will retain logical focus.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When keyboard focus returns to the focus scope, the focused element will obtain keyboard focus.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This allows for keyboard focus to be changed between multiple focus scopes but ensures that the focused element in the focus scope regains keyboard focus when focus returns to the focus scope.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There can be multiple elements that have logical focus in an application, but there may only be one element that has logical focus in a particular focus scope.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An element that has keyboard focus has logical focus for the focus scope it belongs to.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An element can be turned into a focus scope in <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> by setting the <ph id="ph2">&lt;xref:System.Windows.Input.FocusManager&gt;</ph> attached property <ph id="ph3">&lt;xref:System.Windows.Input.FocusManager.IsFocusScope%2A&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In code, an element can be turned into a focus scope by calling <ph id="ph1">&lt;xref:System.Windows.Input.FocusManager.SetIsFocusScope%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example makes a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> into a focus scope by setting the <ph id="ph2">&lt;xref:System.Windows.Input.FocusManager.IsFocusScope%2A&gt;</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>MarkupSnippets#MarkupIsFocusScopeXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MarkupSnippets/CSharp/Window1.xaml#markupisfocusscopexaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FocusSnippets#FocusSetIsFocusScope<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FocusSnippets/CSharp/Window1.xaml.cs#focussetisfocusscope)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>FocusSnippets#FocusSetIsFocusScope<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSnippets/visualbasic/window1.xaml.vb#focussetisfocusscope)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.FocusManager.GetFocusScope%2A&gt;</ph> returns the focus scope for the specified element.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Classes in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> which are focus scopes by default are <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Controls.ToolBar&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Controls.ContextMenu&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.FocusManager.GetFocusedElement%2A&gt;</ph> gets the focused element for the specified focus scope.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.FocusManager.SetFocusedElement%2A&gt;</ph> sets the focused element in the specified focus scope.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.FocusManager.SetFocusedElement%2A&gt;</ph> is typically used to set the initial focused element.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example sets the focused element on a focus scope and gets the focused element of a focus scope.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>FocusSnippets#FocusGetSetFocusedElement<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FocusSnippets/CSharp/Window1.xaml.cs#focusgetsetfocusedelement)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>FocusSnippets#FocusGetSetFocusedElement<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSnippets/visualbasic/window1.xaml.vb#focusgetsetfocusedelement)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Keyboard Navigation</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.KeyboardNavigation&gt;</ph> class is responsible for implementing default keyboard focus navigation when one of the navigation keys is pressed.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The navigation keys are: TAB, SHIFT+TAB, CTRL+TAB, CTRL+SHIFT+TAB, UPARROW, DOWNARROW, LEFTARROW, and RIGHTARROW keys.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The navigation behavior of a navigation container can be changed by setting the attached <ph id="ph1">&lt;xref:System.Windows.Input.KeyboardNavigation&gt;</ph> properties <ph id="ph2">&lt;xref:System.Windows.Input.KeyboardNavigation.TabNavigation%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.KeyboardNavigation.ControlTabNavigation%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.KeyboardNavigation.DirectionalNavigation%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These properties are of type <ph id="ph1">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph> and the possible values are <ph id="ph2">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph>, <ph id="ph6">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph>, and <ph id="ph7">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The default value is <ph id="ph1">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph>, which means the element is not a navigation container.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Controls.Menu&gt;</ph> with a number of <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.KeyboardNavigation.TabNavigation%2A&gt;</ph> attached property is set to <ph id="ph2">&lt;xref:System.Windows.Input.KeyboardNavigationMode&gt;</ph> on the <ph id="ph3">&lt;xref:System.Windows.Controls.Menu&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When focus is changed using the tab key within the <ph id="ph1">&lt;xref:System.Windows.Controls.Menu&gt;</ph>, focus will move from each element and when the last element is reached focus will return to the first element.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>MarkupSnippets#MarkupKeyboardNavigationTabNavigationXAML<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MarkupSnippets/CSharp/Window1.xaml#markupkeyboardnavigationtabnavigationxaml)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>MarkupSnippets#MarkupKeyboardNavigationTabNavigationCODE<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/MarkupSnippets/CSharp/Window1.xaml.cs#markupkeyboardnavigationtabnavigationcode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>MarkupSnippets#MarkupKeyboardNavigationTabNavigationCODE<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/MarkupSnippets/visualbasic/window1.xaml.vb#markupkeyboardnavigationtabnavigationcode)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Navigating Focus Programmatically</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Additional <ph id="ph1">[!INCLUDE[TLA#tla_api](../../../../includes/tlasharptla-api-md.md)]</ph> to work with focus are <ph id="ph2">&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.UIElement.PredictFocus%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> changes focus to the next element in the application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.TraversalRequest&gt;</ph> is used to specify the direction.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> passed to <ph id="ph2">&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;</ph> specifies the different directions focus can be moved, such as <ph id="ph3">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> and <ph id="ph6">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MoveFocus%2A&gt;</ph> to change the focused element.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>focussample#FocusSampleMoveFocus<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>focussample#FocusSampleMoveFocus<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.PredictFocus%2A&gt;</ph> returns the object which would receive focus if focus were to be changed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Currently, only <ph id="ph1">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.FocusNavigationDirection&gt;</ph> are supported by <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.PredictFocus%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Focus Events</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The events related to keyboard focus are <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The events are defined as attached events on the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class, but are more readily accessible as equivalent routed events on the base element classes.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information about events, see the <bpt id="p1">[</bpt>Routed Events Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/routed-events-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus&gt;</ph> is raised when the element obtains keyboard focus.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus&gt;</ph> is raised when the element loses keyboard focus.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus&gt;</ph> event or the <ph id="ph2">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocusEvent&gt;</ph> event is handled and <ph id="ph3">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>, then focus will not change.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following example attaches <ph id="ph1">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> event handlers to a <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>keyboardsample#KeyboardSampleXAMLHandlerHookup<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml#keyboardsamplexamlhandlerhookup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> obtains keyboard focus, the <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is changed to <ph id="ph4">&lt;xref:System.Windows.Media.Brushes.LightBlue%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>keyboardsample#KeyboardSampleGotFocus<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplegotfocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>keyboardsample#KeyboardSampleGotFocus<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplegotfocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> loses keyboard focus, the <ph id="ph2">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is changed back to white.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>keyboardsample#KeyboardSampleLostFocus<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/KeyboardSample/CSharp/Window1.xaml.cs#keyboardsamplelostfocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>keyboardsample#KeyboardSampleLostFocus<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/KeyboardSample/visualbasic/window1.xaml.vb#keyboardsamplelostfocus)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The events related to logical focus are <ph id="ph1">&lt;xref:System.Windows.UIElement.GotFocus&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.UIElement.LostFocus&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>These events are defined on the <ph id="ph1">&lt;xref:System.Windows.Input.FocusManager&gt;</ph> as attached events, but the <ph id="ph2">&lt;xref:System.Windows.Input.FocusManager&gt;</ph> does not expose CLR event wrappers.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.ContentElement&gt;</ph> expose these events more conveniently.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.FocusManager&gt;</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Input Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/input-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Base Elements Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/base-elements-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>