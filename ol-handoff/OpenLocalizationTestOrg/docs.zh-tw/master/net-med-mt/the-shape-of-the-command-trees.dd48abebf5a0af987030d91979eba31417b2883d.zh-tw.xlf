<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">998315dfd1b217cf94b6af8078e2f11fc097c8f5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\the-shape-of-the-command-trees.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">412516e5c870b37d268b908d270d007f8f1e4a16</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">928ba0991ed826d98f2091073b3435c4623203c3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The Shape of the Command Trees | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Shape of the Command Trees</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The SQL generation module is responsible for generating a backend specific SQL query based on a given input query command tree expression.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This section discusses the characteristics, properties, and structure of the query command trees.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Query Command Trees Overview</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A query command tree is an object model representation of a query.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Query command trees serve two purposes:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To express an input query that is specified against the <ph id="ph1">[!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To express an output query that is given to a provider and describes a query against the backend.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Query command trees support richer semantics than SQL:1999 compliant queries, including support for working with nested collections and type operations, like checking whether an entity is of a particular type, or filtering sets based on a type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The DBQueryCommandTree.Query property is the root of the expression tree that describes the query logic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The DBQueryCommandTree.Parameters property contains a list of parameters that are used in the query.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The expression tree is composed of DbExpression objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A DbExpression object represents some computation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Several kinds of expressions are provided by the <ph id="ph1">[!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]</ph> for composing query expressions, including constants, variables, functions, constructors, and standard relational operators like filter and join.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Every DbExpression object has a ResultType property that represents the type of the result produced by that expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This type is expressed as a TypeUsage.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Shapes of the Output Query Command Tree</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Output query command trees closely represent relational (SQL) queries and adhere to much stricter rules than those that apply to query command trees.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>They typically contain constructs that are easily translated to SQL.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Input command trees are expressed against the conceptual model, which supports navigation properties, associations among entities, and inheritance.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Output command trees are expressed against the storage model.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Input command trees allow you to project nested collections, but output command trees do not.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Output query command trees are built using a subset of the available DbExpression objects and even some expressions in that subset have restricted usage.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Type operations, like checking whether a given expression is of a particular type or filtering sets based on a type, are not present in output command trees.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In output command trees, only expressions that return Boolean values are used for projections and only for predicates in expressions requiring a predicate, like a filter or a case statement.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The root of an output query command trees is a DbProjectExpression object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Expression Types Not Present in Output Query Command Trees</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following expression types are not valid in an output query command tree and do not need to be handled by providers:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>DbDerefExpression</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>DbEntityRefExpression</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>DbRefKeyExpression</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>DbIsOfExpression</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>DbOfTypeExpression</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>DbRefExpression</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DbRelationshipNavigationExpression</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>DbTreatExpression</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Expression Restrictions and Notes</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Many expressions can only be used in a restricted manner in output query command trees:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>DbFunctionExpression</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following function types can be passed:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Canonical functions that are recognized by the Edm namespace.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Built-in (store) functions that are recognized by the BuiltInAttribute.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>User-defined functions.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Canonical functions (see <bpt id="p1">[</bpt>Canonical Functions<ept id="p1">](../../../../../docs/framework/data/adonet/ef/language-reference/canonical-functions.md)</ept> for more information) are specified as part of the <ph id="ph1">[!INCLUDE[adonet_ef](../../../../../includes/adonet-ef-md.md)]</ph>, and providers should supply implementations for canonical functions based on those specifications.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Store functions are based on the specifications in the corresponding provider manifest.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>User defined functions are based on specifications in the SSDL.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Also, functions having the NiladicFunction attribute have no arguments and should be translated without the parenthesis at the end.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>That is, to <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>functionName&gt;<ept id="p1">*</ept> instead of <bpt id="p2">*</bpt><ph id="ph2">\&lt;</ph>functionName&gt;()<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>DbNewInstanceExpression</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>DbNewInstanceExpression can only occur in the following two cases:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As the Projection property of DbProjectExpression.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When used as such the following restrictions apply:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The result type must be a row type.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Each of its arguments is an expression that produces a result with a primitive type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Typically, each argument is a scalar expression, like a PropertyExpression over a DbVariableReferenceExpression, a function invocation, or an arithmetic computation of the DbPropertyExpression over a DbVariableReferenceExpression or a function invocation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>However, an expression representing a scalar subquery can also occur in the list of arguments for a DbNewInstanceExpression.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An expression that represents a scalar subquery is an expression tree that represents a subquery that returns exactly one row and one column of a primitive type with a DbElementExperession object root</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>With a collection return type, in which case it defines a new collection of the expressions provided as arguments.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>DbVariableReferenceExpression</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A DbVariableReferenceExpression has to be a child of DbPropertyExpression node.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>DbGroupByExpression</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The Aggregates property of a DbGroupByExpression can only have elements of type DbFunctionAggregate.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>There are no other aggregate types.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>DbLimitExpression</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The property Limit can only be a DbConstantExpression or a DbParameterReferenceExpression.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Also property WithTies is always false as of version 3.5 of the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>DbScanExpression</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When used in output command trees, the DbScanExpression effectively represents a scan over a table, a view, or a store query, represented by EnitySetBase::Target.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the metadata property "Defining Query" of the target is non-null, then it represents a query, the query text for which is provided in that metadata property in the provider’s specific language (or dialect) as specified in the store schema definition.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Otherwise, the target represents a table or a view.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Its schema prefix is either in the "Schema" metadata property, if not null, otherwise is the entity container name.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The table or view name is either the "Table" metadata property, if not null, otherwise the Name property of the entity set base.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>All these properties originate from the definition of the corresponding EntitySet in the store schema definition file (the SSDL).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Using Primitive Types</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When primitive types are referenced in output command trees, they are typically referenced in the conceptual model's primitive types.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, for certain expressions, providers need the corresponding store primitive type.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Examples of such expressions include DbCastExpression and possibly DbNullExpression, if the provider needs to cast the null to the corresponding type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In these cases, providers should do the mapping to the provider type based on the primitive type kind and its facets.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Generation<ept id="p1">](../../../../../docs/framework/data/adonet/ef/sql-generation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>