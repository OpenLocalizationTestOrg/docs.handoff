<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db50294c25c04d250a945806b88c5a4307582f61</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\serializing-workflows-and-activities-to-and-from-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c08d86d6ad50d2cee66933e072a54895f13c6eeb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4130b4a4349cc44a15c91299970415680a87a999</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serializing Workflows and Activities to and from XAML | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Serializing Workflows and Activities to and from XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In addition to being compiled into types that are contained in assemblies, workflow definitions can also be serialized to XAML.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These serialized definitions can be reloaded for editing or inspection, passed to a build system for compilation, or loaded and invoked.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of serializing workflow definitions and working with XAML workflow definitions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Working with XAML Workflow Definitions</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To create a workflow definition for serialization, the <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> class is used.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating an <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> is very similar to creating a <ph id="ph2">&lt;xref:System.Activities.DynamicActivity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any desired arguments are specified, and the activities that constitute the behavior are configured.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, an <ph id="ph1">`Add`</ph> activity is created that takes two input arguments, adds them together, and returns the result.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because this activity returns a result, the generic <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder%601&gt;</ph> class is used.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CFX_WorkflowApplicationExample#41<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#41)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each of the <ph id="ph1">&lt;xref:System.Activities.DynamicActivityProperty&gt;</ph> instances represents one of the input arguments to the workflow, and the <ph id="ph2">&lt;xref:System.Activities.ActivityBuilder.Implementation%2A&gt;</ph> contains the activities that make up the logic of the workflow.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note that the r-value expressions in this example are Visual Basic expressions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Lambda expressions are not serializable to XAML unless <ph id="ph1">&lt;xref:System.Activities.Expressions.ExpressionServices.Convert%2A&gt;</ph> is used.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the serialized workflows are intended to be opened or edited in the workflow designer then Visual Basic expressions should be used.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id="p1">](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To serialize the workflow definition represented by the <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> instance to XAML, use <ph id="ph2">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices&gt;</ph> to create a <ph id="ph3">&lt;xref:System.Xaml.XamlWriter&gt;</ph>, and then use <ph id="ph4">&lt;xref:System.Xaml.XamlServices&gt;</ph> to serialize the workflow definition by using the <ph id="ph5">&lt;xref:System.Xaml.XamlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices&gt;</ph> has methods to map <ph id="ph2">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> instances to and from XAML, and to load XAML workflows and return a <ph id="ph3">&lt;xref:System.Activities.DynamicActivity&gt;</ph> that can be invoked.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> instance from the previous example is serialized to a string, and also saved to a file.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example represents the serialized workflow.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To load a serialized workflow, the <ph id="ph1">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices&gt;</ph> <ph id="ph2">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A&gt;</ph> method is used.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This takes the serialized workflow definition and returns a <ph id="ph1">&lt;xref:System.Activities.DynamicActivity&gt;</ph> that represents the workflow definition.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that the XAML is not deserialized until <ph id="ph1">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> is called on the body of the <ph id="ph2">&lt;xref:System.Activities.DynamicActivity&gt;</ph> during the validation process.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If validation is not explicitly called then it is performed when the workflow is invoked.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the XAML workflow definition is invalid, then an <ph id="ph1">&lt;xref:System.Argument&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Any exceptions thrown from <ph id="ph1">&lt;xref:System.Activities.Activity.CacheMetadata%2A&gt;</ph> escape from the call to <ph id="ph2">&lt;xref:System.Activities.Validation.ActivityValidationServices.Validate%2A&gt;</ph> and must be handled by the caller.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the following example, the serialized workflow from the previous example is loaded and invoked by using <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CFX_WorkflowApplicationExample#43<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#43)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When this workflow is invoked, the following output is displayed to the console.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>25 + 15<ept id="p1">**</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>40<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> [!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> invoking workflows with input and output arguments, see <bpt id="p1">[</bpt>Using WorkflowInvoker and WorkflowApplication<ept id="p1">](../../../docs/framework/windows-workflow-foundation/using-workflowinvoker-and-workflowapplication.md)</ept> and <ph id="ph2">&lt;xref:System.Activities.WorkflowInvoker.Invoke%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If the serialized workflow contains C# expressions, then an <ph id="ph1">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings&gt;</ph> instance with its <ph id="ph2">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServicesSettings.CompileExpressions%2A&gt;</ph> property set to <ph id="ph3">`true`</ph> must be passed as a parameter to <ph id="ph4">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices.Load%2A?displayProperty=fullName&gt;</ph>, otherwise a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph> will be thrown with a message similar to the following: <ph id="ph6">`Expression Activity type 'CSharpValue`</ph>1' requires compilation in order to run.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Please ensure that the workflow has been compiled.`</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>C# Expressions<ept id="p1">](../../../docs/framework/windows-workflow-foundation/csharp-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A serialized workflow definition can also be loaded into an <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> instance by using the <ph id="ph2">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices&gt;</ph> <ph id="ph3">&lt;xref:System.Activities.XamlIntegration.ActivityXamlServices.CreateBuilderReader%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After a serialized workflow is loaded into an <ph id="ph1">&lt;xref:System.Activities.ActivityBuilder&gt;</ph> instance it can be inspected and modified.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This is useful for custom workflow designer authors and provides a mechanism for saving and reloading workflow definitions during the design process.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the following example, the serialized workflow definition from the previous example is loaded and its properties are inspected.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CFX_WorkflowApplicationExample#44<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#44)</ept><ept id="p1">]</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>