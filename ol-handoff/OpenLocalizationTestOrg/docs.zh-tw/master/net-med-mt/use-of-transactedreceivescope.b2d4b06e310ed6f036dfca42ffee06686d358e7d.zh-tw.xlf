<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4a14b5276542dd610b8878cfcccee3669a1923d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\use-of-transactedreceivescope.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c6d2ecf9250749edad0d040fa81708485ff3800</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19e158ce8d439efbbb8178f786aa70def0f3600b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Use of TransactedReceiveScope | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Use of TransactedReceiveScope</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample shows how to flow a transaction from a client to a server using <ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> to create a new transaction on the client and a <ph id="ph2">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> to receive a message with a flowed transaction and scope the lifetime of the transaction on the server.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The sample consists of two projects that fill the roles of client and server.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Client Application</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The client application runs a workflow that prints the distributed transaction ID, sends a message to the server, flows the transaction, receives the reply, prints the distributed transaction ID again and completes.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When the distributed transaction ID is initially prints, it is an empty GUID as the transaction is still only local.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Server Application</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The server project is similar, however, the workflow is hosted in <ph id="ph1">&lt;xref:System.ServiceModel.Activities.WorkflowServiceHost&gt;</ph> because it must listen on an endpoint for the message from the client.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The workflow is centered on the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph>, which receives the flowed transaction from the client, prints the message that was sent, prints the distributed transaction ID and sends the reply to the client.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The distributed transaction ID is now a non-empty GUID and if a transaction-aware activity was added to the body of the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph>, it would execute under the flowed transaction.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To run the sample</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Open the TransactedReceiveScope.sln solution in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To build the solution, press CTRL+SHIFT+B or select <bpt id="p1">**</bpt>Build Solution<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Build<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Once the build has succeeded, right-click the solution and select <bpt id="p1">**</bpt>Set Startup Projects<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>From the dialog, select <bpt id="p1">**</bpt>Multiple Startup Projects<ept id="p1">**</ept> and ensure the action for both projects is <bpt id="p2">**</bpt>Start<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Press F5 or select <bpt id="p1">**</bpt>Start Debugging<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Alternatively, you can press CTRL+F5 or select <bpt id="p1">**</bpt>Start Without Debugging<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept> menu to run without debugging.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The server must be running prior to starting the client.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The output from the console window hosting the service indicates when it has started.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>