<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a6d595d4ee999f10221ac6ceac899f246fa8946</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\populating-a-dataset-from-a-dataadapter.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f7cc95a12ee3de607b1a941e699880d4f0fda68</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ca22bda42e84f2816e98ed9e1da640aee35586b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Populating a DataSet from a DataAdapter | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Populating a DataSet from a DataAdapter</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph><ph id="ph2">&lt;xref:System.Data.DataSet&gt;</ph> is a memory-resident representation of data that provides a consistent relational programming model independent of the data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DataSet`</ph> represents a complete set of data that includes tables, constraints, and relationships among the tables.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`DataSet`</ph> is independent of the data source, a <ph id="ph2">`DataSet`</ph> can include data local to the application, and data from multiple data sources.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Interaction with existing data sources is controlled through the <ph id="ph1">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SelectCommand`</ph> property of the <ph id="ph2">`DataAdapter`</ph> is a <ph id="ph3">`Command`</ph> object that retrieves data from the data source.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`InsertCommand`</ph>, <ph id="ph2">`UpdateCommand`</ph>, and <ph id="ph3">`DeleteCommand`</ph> properties of the <ph id="ph4">`DataAdapter`</ph> are <ph id="ph5">`Command`</ph> objects that manage updates to the data in the data source according to modifications made to the data in the <ph id="ph6">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These properties are covered in more detail in <bpt id="p1">[</bpt>Updating Data Sources with DataAdapters<ept id="p1">](../../../../docs/framework/data/adonet/updating-data-sources-with-dataadapters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Fill`</ph> method of the <ph id="ph2">`DataAdapter`</ph> is used to populate a <ph id="ph3">`DataSet`</ph> with the results of the <ph id="ph4">`SelectCommand`</ph> of the <ph id="ph5">`DataAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Fill`</ph> takes as its arguments a <ph id="ph2">`DataSet`</ph> to be populated, and a <ph id="ph3">`DataTable`</ph> object, or the name of the <ph id="ph4">`DataTable`</ph> to be filled with the rows returned from the <ph id="ph5">`SelectCommand`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`DataAdapter`</ph> to retrieve all of a table takes time, especially if there are many rows in the table.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is because accessing the database, locating and processing the data, and then transferring the data to the client is time-consuming.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Pulling all of the table to the client also locks all of the rows on the server.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To improve performance, you can use the <ph id="ph1">`WHERE`</ph> clause to greatly reduce the number of rows returned to the client.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can also reduce the amount of data returned to the client by only explicitly listing required columns in the <ph id="ph1">`SELECT`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Another good workaround is to retrieve the rows in batches (such as several hundred rows at a time) and only retrieve the next batch when the client is finished with the current batch.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Fill`</ph> method uses the <ph id="ph2">`DataReader`</ph> object implicitly to return the column names and types that are used to create the tables in the <ph id="ph3">`DataSet`</ph>, and the data to populate the rows of the tables in the <ph id="ph4">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Tables and columns are only created if they do not already exist; otherwise <ph id="ph1">`Fill`</ph> uses the existing <ph id="ph2">`DataSet`</ph> schema.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Column types are created as <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> types according to the tables in <bpt id="p1">[</bpt>Data Type Mappings in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Primary keys are not created unless they exist in the data source and <ph id="ph1">`DataAdapter`</ph><bpt id="p1">**</bpt>.<ept id="p1">**</ept><ph id="ph2">`MissingSchemaAction`</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>is set to <ph id="ph1">`MissingSchemaAction`</ph><bpt id="p1">**</bpt>.<ept id="p1">**</ept><ph id="ph2">`AddWithKey`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Fill`</ph> finds that a primary key exists for a table, it will overwrite data in the <ph id="ph2">`DataSet`</ph> with data from the data source for rows where the primary key column values match those of the row returned from the data source.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If no primary key is found, the data is appended to the tables in the <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Fill`</ph> uses any mappings that may exist when you populate the <ph id="ph2">`DataSet`</ph> (see <bpt id="p1">[</bpt>DataAdapter DataTable and DataColumn Mappings<ept id="p1">](../../../../docs/framework/data/adonet/dataadapter-datatable-and-datacolumn-mappings.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`SelectCommand`</ph> returns the results of an OUTER JOIN, the <ph id="ph2">`DataAdapter`</ph> does not set a <ph id="ph3">`PrimaryKey`</ph> value for the resulting <ph id="ph4">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You must define the <ph id="ph1">`PrimaryKey`</ph> yourself to make sure that duplicate rows are resolved correctly.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Defining Primary Keys<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code example creates an instance of a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> that uses a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> to the Microsoft SQL Server <ph id="ph3">`Northwind`</ph> database and populates a <ph id="ph4">&lt;xref:System.Data.DataTable&gt;</ph> in a <ph id="ph5">`DataSet`</ph> with the list of customers.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The SQL statement and <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> arguments passed to the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph> constructor are used to create the <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The code shown in this example does not explicitly open and close the <ph id="ph1">`Connection`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Fill`</ph> method implicitly opens the <ph id="ph2">`Connection`</ph> that the <ph id="ph3">`DataAdapter`</ph> is using if it finds that the connection is not already open.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Fill`</ph> opened the connection, it also closes the connection when <ph id="ph2">`Fill`</ph> is finished.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This can simplify your code when you deal with a single operation such as a <ph id="ph1">`Fill`</ph> or an <ph id="ph2">`Update`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, if you are performing multiple operations that require an open connection, you can improve the performance of your application by explicitly calling the <ph id="ph1">`Open`</ph> method of the <ph id="ph2">`Connection`</ph>, performing the operations against the data source, and then calling the <ph id="ph3">`Close`</ph> method of the <ph id="ph4">`Connection`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You should try to keep connections to the data source open as briefly as possible to free resources for use by other client applications.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Multiple Result Sets</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`DataAdapter`</ph> encounters multiple result sets, it creates multiple tables in the <ph id="ph2">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The tables are given an incremental default name of Table<bpt id="p1">*</bpt>N<ept id="p1">*</ept>, starting with "Table" for Table0.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If a table name is passed as an argument to the <ph id="ph1">`Fill`</ph> method, the tables are given an incremental default name of TableName<bpt id="p1">*</bpt>N<ept id="p1">*</ept>, starting with "TableName" for TableName0.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Populating a DataSet from Multiple DataAdapters</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Any number of <ph id="ph1">`DataAdapter`</ph>objects can be used with a <ph id="ph2">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`DataAdapter`</ph> can be used to fill one or more <ph id="ph2">`DataTable`</ph> objects and resolve updates back to the relevant data source.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DataRelation`</ph> and <ph id="ph2">`Constraint`</ph> objects can be added to the <ph id="ph3">`DataSet`</ph> locally, which enables you to relate data from dissimilar data sources.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`DataSet`</ph> can contain data from a Microsoft SQL Server database, an IBM DB2 database exposed through OLE DB, and a data source that streams XML.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>One or more <ph id="ph1">`DataAdapter`</ph> objects can handle communication to each data source.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following code example populates a list of customers from the <ph id="ph1">`Northwind`</ph> database on Microsoft SQL Server, and a list of orders from the <ph id="ph2">`Northwind`</ph> database stored in Microsoft Access 2000.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The filled tables are related with a <ph id="ph1">`DataRelation`</ph>, and the list of customers is then displayed with the orders for that customer.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">`DataRelation`</ph> objects, see <bpt id="p1">[</bpt>Adding DataRelations<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/adding-datarelations.md)</ept> and <bpt id="p2">[</bpt>Navigating DataRelations<ept id="p2">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/navigating-datarelations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>SQL Server Decimal Type</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">`DataSet`</ph> stores data by using <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> data types.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For most applications, these provide a convenient representation of data source information.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, this representation may cause a problem when the data type in the data source is a SQL Server decimal or numeric data type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> <ph id="ph2">`decimal`</ph> data type allows a maximum of 28 significant digits, whereas the SQL Server <ph id="ph3">`decimal`</ph> data type allows 38 significant digits.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`SqlDataAdapter`</ph> determines during a <ph id="ph2">`Fill`</ph> operation that the precision of a SQL Server <ph id="ph3">`decimal`</ph> field is larger than 28 characters, the current row is not added to the <ph id="ph4">`DataTable`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Instead the <ph id="ph1">`FillError`</ph> event occurs, which enables you to determine whether a loss of precision will occur, and respond appropriately.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">`FillError`</ph> event, see <bpt id="p1">[</bpt>Handling DataAdapter Events<ept id="p1">](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To get the SQL Server <ph id="ph1">`decimal`</ph> value, you can also use a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> object and call the <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlDataReader.GetSqlDecimal%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph> 2.0 introduced enhanced support for <ph id="ph2">&lt;xref:System.Data.SqlTypes&gt;</ph> in the <ph id="ph3">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>SqlTypes and the DataSet<ept id="p1">](../../../../docs/framework/data/adonet/sql/sqltypes-and-the-dataset.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>OLE DB Chapters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Hierarchical rowsets, or chapters (OLE DB type <ph id="ph1">`DBTYPE_HCHAPTER`</ph>, ADO type <ph id="ph2">`adChapter`</ph>) can be used to fill the contents of a <ph id="ph3">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbDataAdapter&gt;</ph> encounters a chaptered column during a <ph id="ph2">`Fill`</ph> operation, a <ph id="ph3">`DataTable`</ph> is created for the chaptered column, and that table is filled with the columns and rows from the chapter.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The table created for the chaptered column is named by using both the parent table name and the chaptered column name in the form "<bpt id="p1">*</bpt>ParentTableNameChapteredColumnName<ept id="p1">*</ept>".</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If a table already exists in the <ph id="ph1">`DataSet`</ph> that matches the name of the chaptered column, the current table is filled with the chapter data.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If there is no column in an existing table that matches a column found in the chapter, a new column is added.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Before the tables in the <ph id="ph1">`DataSet`</ph> are filled with the data in the chaptered columns, a relation is created between the parent and child tables of the hierarchical rowset by adding an integer column to both the parent and child table, setting the parent column to auto-increment, and creating a <ph id="ph2">`DataRelation`</ph> using the added columns from both tables.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The added relation is named by using the parent table and chapter column names in the form "<bpt id="p1">*</bpt>ParentTableNameChapterColumnName<ept id="p1">*</ept>".</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Note that the related column only exists in the <ph id="ph1">`DataSet`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Subsequent fills from the data source can cause new rows to be added to the tables instead of changes being merged into existing rows.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Note also that, if you use the <ph id="ph1">`DataAdapter.Fill`</ph> overload that takes a <ph id="ph2">`DataTable`</ph>, only that table will be filled.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>An auto-incrementing integer column will still be added to the table, but no child table will be created or filled, and no relation will be created.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following example uses the MSDataShape Provider to generate a chapter column of orders for each customer in a list of customers.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DataSet`</ph> is then filled with the data.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">`Fill`</ph> operation is complete, the <ph id="ph2">`DataSet`</ph> contains two tables: <ph id="ph3">`Customers`</ph> and <ph id="ph4">`CustomersOrders`</ph>, where <ph id="ph5">`CustomersOrders`</ph> represents the chaptered column.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An additional column named <ph id="ph1">`Orders`</ph> is added to the <ph id="ph2">`Customers`</ph> table, and an additional column named <ph id="ph3">`CustomersOrders`</ph> is added to the <ph id="ph4">`CustomersOrders`</ph> table.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Orders`</ph> column in the <ph id="ph2">`Customers`</ph> table is set to auto-increment.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`DataRelation`</ph>, <ph id="ph2">`CustomersOrders`</ph>, is created by using the columns that were added to the tables with <ph id="ph3">`Customers`</ph> as the parent table.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following tables show some sample results.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>TableName: Customers</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CustomerID</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>CompanyName</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Orders</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ALFKI</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Alfreds Futterkiste</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>ANATR</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Ana Trujillo Emparedados y helados</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>TableName: CustomersOrders</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CustomerID</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>OrderID</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CustomersOrders</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>ALFKI</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>10643</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>ALFKI</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>10692</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>ANATR</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>10308</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>ANATR</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>10625</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataAdapters and DataReaders<ept id="p1">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Type Mappings in ADO.NET<ept id="p1">](../../../../docs/framework/data/adonet/data-type-mappings-in-ado-net.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Modifying Data with a DbDataAdapter<ept id="p1">](../../../../docs/framework/data/adonet/modifying-data-with-a-dbdataadapter.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multiple Active Result Sets (MARS)<ept id="p1">](../../../../docs/framework/data/adonet/sql/multiple-active-result-sets-mars.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>