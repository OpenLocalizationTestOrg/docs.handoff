<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35c1b53e354c629381448aa95187dfa5812eed4b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\composite-formatting.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d46e1c2de85ac8d82df2670b3223e3da38aadf2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0922903e7bd5c232fb316e395aabc44f4f9fec63</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Composite Formatting | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Composite Formatting</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework composite formatting feature takes a list of objects and a composite format string as input.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A composite format string consists of fixed text intermixed with indexed placeholders, called format items, that correspond to the objects in the list.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The formatting operation yields a result string that consists of the original fixed text intermixed with the string representation of the objects in the list.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The composite formatting feature is supported by methods such as the following:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=fullName&gt;</ph>, which returns a formatted result string.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=fullName&gt;</ph>, which appends a formatted result string to a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Some overloads of the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method, which display a formatted result string to the console.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Some overloads of the <ph id="ph1">&lt;xref:System.IO.TextWriter.WriteLine%2A?displayProperty=fullName&gt;</ph> method, which write the formatted result string to a stream or file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The classes derived from <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>, such as <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.UI.HtmlTextWriter&gt;</ph>, also share this functionality.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>, which outputs a formatted message to trace listeners.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.Trace.TraceError%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Trace.TraceInformation%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.Trace.TraceWarning%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> methods, which output formatted messages to trace listeners.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.TraceSource.TraceInformation%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method, which writes an informational method to trace listeners.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Composite Format String</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A composite format string and object list are used as arguments of methods that support the composite formatting feature.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A composite format string consists of zero or more runs of fixed text intermixed with one or more format items.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The fixed text is any string that you choose, and each format item corresponds to an object or boxed structure in the list.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The composite formatting feature returns a new result string where each format item is replaced by the string representation of the corresponding object in the list.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Consider the following <ph id="ph1">&lt;xref:System.String.Format%2A&gt;</ph> code fragment.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/Composite1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/Composite1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The fixed text is "<ph id="ph1">`Name =`</ph> " and "<ph id="ph2">`, hours =`</ph> ".</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The format items are "<ph id="ph1">`{0}`</ph>", whose index is 0, which corresponds to the object <ph id="ph2">`name`</ph>, and "<ph id="ph3">`{1:hh}`</ph>", whose index is 1, which corresponds to the object <ph id="ph4">`DateTime.Now`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Format Item Syntax</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Each format item takes the following form and consists of the following components:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`{`</ph> <bpt id="p1">*</bpt>index<ept id="p1">*</ept>[<ph id="ph2">`,`</ph><bpt id="p2">*</bpt>alignment<ept id="p2">*</ept>][<ph id="ph3">`:`</ph><bpt id="p3">*</bpt>formatString<ept id="p3">*</ept>]<ph id="ph4">`}`</ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The matching braces ("{" and "}") are required.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Index Component</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The mandatory <bpt id="p1">*</bpt>index<ept id="p1">*</ept> component, also called a parameter specifier, is a number starting from 0 that identifies a corresponding item in the list of objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>That is, the format item whose parameter specifier is 0 formats the first object in the list, the format item whose parameter specifier is 1 formats the second object in the list, and so on.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example includes four parameter specifiers, numbered zero through three,  to represent prime numbers less than ten:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/index1.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#7<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/index1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Multiple format items can refer to the same element in the list of objects by specifying the same parameter specifier.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, you can format the same numeric value in hexadecimal, scientific, and number format by specifying a composite format string such as : "0x{0:X} {0:E} {0:N}", as the following example shows.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#10<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/index1.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#10<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/index1.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each format item can refer to any object in the list.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, if there are three objects, you can format the second, first, and third object by specifying a composite format string like this: "{1} {0} {2}".</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An object that is not referenced by a format item is ignored.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> is thrown at runtime if a parameter specifier designates an item outside the bounds of the list of objects.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Alignment Component</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The optional <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept> component is a signed integer indicating the preferred formatted field width.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the value of <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept> is less than the length of the formatted string, <bpt id="p2">*</bpt>alignment<ept id="p2">*</ept> is ignored and the length of the formatted string is used as the field width.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The formatted data in the field is right-aligned if <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept> is positive and left-aligned if <bpt id="p2">*</bpt>alignment<ept id="p2">*</ept> is negative.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If padding is necessary, white space is used.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The comma is required if <bpt id="p1">*</bpt>alignment<ept id="p1">*</ept>  is specified.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following example defines two arrays, one containing the names of employees and the other containing the hours they worked over a two-week period.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The composite format string left-aligns the names in a 20-character field, and right-aligns their hours in a 5-character field.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Note that the "N1" standard format string is also used to format the hours with one fractional digit.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#8<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/alignment1.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#8<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/alignment1.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Format String Component</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The optional <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> component is a format string that is appropriate for the type of object being formatted.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Specify a standard or custom numeric format string if the corresponding object is a numeric value, a standard or custom date and time format string if the corresponding object is a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> object, or an <bpt id="p1">[</bpt>enumeration format string<ept id="p1">](../../../docs/standard/base-types/enumeration-format-strings.md)</ept> if the corresponding object is an enumeration value.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is not specified, the general ("G") format specifier for a numeric, date and time, or enumeration type is used.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The colon is required if <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> is specified.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following table lists types or categories of types in the .NET Framework class library that support a predefined set of format strings, and provides links to the topics that list the supported format strings.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Note that string formatting is an extensible mechanism that makes it possible to define new format strings for all existing types as well as to define a set of format strings supported by an application-defined type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> and <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> interface topics.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Type or type category</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Date and time types (<ph id="ph1">&lt;xref:System.DateTime&gt;</ph>, <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-date-and-time-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Enumeration types (all types derived from <ph id="ph1">&lt;xref:System.Enum?displayProperty=fullName&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](../../../docs/standard/base-types/enumeration-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Numeric types (<ph id="ph1">&lt;xref:System.Numerics.BigInteger&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph4">&lt;xref:System.Double&gt;</ph>, <ph id="ph5">&lt;xref:System.Int16&gt;</ph>, <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, <ph id="ph7">&lt;xref:System.Int64&gt;</ph>, <ph id="ph8">&lt;xref:System.SByte&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt64&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-numeric-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-numeric-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-timespan-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Custom TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-timespan-format-strings.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Escaping Braces</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Opening and closing braces are interpreted as starting and ending a format item.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Consequently, you must use an escape sequence to display a literal opening brace or closing brace.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Specify two opening braces ("{{") in the fixed text to display one opening brace ("{"), or two closing braces ("}}") to display one closing brace ("}").</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Braces in a format item are interpreted sequentially in the order they are encountered.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Interpreting nested braces is not supported.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The way escaped braces are interpreted can lead to unexpected results.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For example, consider the format item "{{{0:D}}}", which is intended to display an opening brace, a numeric value formatted as a decimal number, and a closing brace.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>However, the format item is actually interpreted in the following manner:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The first two opening braces ("{{") are escaped and yield one opening brace.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The next three characters ("{0:") are interpreted as the start of a format item.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The next character ("D") would be interpreted as the Decimal standard numeric format specifier, but the next two escaped braces ("}}") yield a single brace.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Because the resulting string ("D}") is not a standard numeric format specifier, the resulting string is interpreted as a custom format string that means display the literal string "D}".</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The last brace ("}") is interpreted as the end of the format item.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The final result that is displayed is the literal string, "{D}".</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The numeric value that was to be formatted is not displayed.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>One way to write your code to avoid misinterpreting escaped braces and format items is to format the braces and format item separately.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>That is, in the first format operation display a literal opening brace, in the next operation display the result of the format item, then in the final operation display a literal closing brace.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following example illustrates this approach.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/Escaping1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/Escaping1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Processing Order</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the call to the composite formatting method includes an <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> argument whose value is not <ph id="ph2">`null`</ph>, the runtime calls its <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName&gt;</ph> method to request an <ph id="ph4">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If the method is able to return an <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation, it is cached for later use.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Each value in the parameter list that corresponds to a format item is converted to a string by performing the following steps.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If any condition in the first three steps is true, the string representation of the value is returned in that step, and subsequent steps are not executed.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If the value to be formatted is <ph id="ph1">`null`</ph>, an empty string ("") is returned.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation is available, the runtime calls its <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It passes the method the format item's <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> value, if one is present, or <ph id="ph1">`null`</ph> if it is not, along with the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If the value implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface, the interface's <ph id="ph2">&lt;xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The method is passed the <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> value, if one is present in the format item, or <ph id="ph1">`null`</ph> if it is not.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> argument is determined as follows:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For a numeric value, if a composite formatting method with a non-null <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> argument is called, the runtime requests a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object from its <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If it is unable to supply one, if the value of the argument is <ph id="ph1">`null`</ph>, or if the composite formatting method does not have an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter, the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current thread culture is used.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For a date and time value, if a composite formatting method with a non-null <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> argument is called, the runtime requests a <ph id="ph2">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object from its <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If it is unable to supply one, if the value of the argument is <ph id="ph1">`null`</ph>, or if the composite formatting method does not have an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> parameter, the <ph id="ph3">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object for the current thread culture is used.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For objects of other types, if a composite formatting is called with an <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> argument, its value (including a <ph id="ph2">`null`</ph>, if no <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> object is supplied) is passed directly to the <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the current thread culture is passed to the <ph id="ph2">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The type's parameterless <ph id="ph1">`ToString`</ph> method, which either overrides <ph id="ph2">&lt;xref:System.Object.ToString?displayProperty=fullName&gt;</ph> or inherits the behavior of its base class, is called.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In this case, the format string specified by the <bpt id="p1">*</bpt>formatString<ept id="p1">*</ept> component in the format item, if it is present, is ignored.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Alignment is applied after the preceding steps have been performed.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Code Examples</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The following example shows one string created using composite formatting and another created using an object's <ph id="ph1">`ToString`</ph> method.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Both types of formatting produce equivalent results.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/Composite1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/Composite1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Assuming that the current day is a Thursday in May, the value of both strings in the preceding example is <ph id="ph1">`Thursday May`</ph> in the U.S. English culture.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> exposes the same functionality as <ph id="ph2">&lt;xref:System.String.Format%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The only difference between the two methods is that <ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=fullName&gt;</ph> returns its result as a string, while <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> writes the result to the output stream associated with the <ph id="ph3">&lt;xref:System.Console&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> method to format the value of <ph id="ph2">`MyInt`</ph> to a currency value.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/Composite1.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/Composite1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example demonstrates formatting multiple objects, including formatting one object two different ways.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/Composite1.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/Composite1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of alignment in formatting.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The arguments that are formatted are placed between vertical bar characters (&amp;#124;) to highlight the resulting alignment.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Formatting.Composite#6<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/Formatting.Composite/cs/Composite1.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Formatting.Composite#6<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/Formatting.Composite/vb/Composite1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.String.Format%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Formatting Types<ept id="p1">](../../../docs/standard/base-types/formatting-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-numeric-format-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Custom Numeric Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-numeric-format-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-date-and-time-format-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Custom Date and Time Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-date-and-time-format-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Standard TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/standard-timespan-format-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Custom TimeSpan Format Strings<ept id="p1">](../../../docs/standard/base-types/custom-timespan-format-strings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Enumeration Format Strings<ept id="p1">](../../../docs/standard/base-types/enumeration-format-strings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>