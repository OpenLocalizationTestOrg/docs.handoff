<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a471949dbe533e6ddcf8c7cefb7a65e88782355b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\user-input-validation-in-windows-forms.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da19881309a62a80b071fb80c42e1fa888bccd67</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f75fa393288e45b2ae37c97c3ed54283ba23b27</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>User Input Validation in Windows Forms | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>User Input Validation in Windows Forms</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When users enter data into your application, you may want to verify that the data is valid before your application uses it.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You may require that certain text fields not be zero-length, that a field be formatted as a telephone number or other type of well-formed data, or that a string not contain any unsafe characters that could be used to compromise the security of a database.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Windows Forms provides several ways for you to validate input in your application.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Validation with the MaskedTextBox Control</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you need to require users to enter data in a well-defined format, such as a telephone number or a part number, you can accomplish this quickly and with minimal code by using the <ph id="ph1">&lt;xref:System.Windows.Forms.MaskedTextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>mask<ept id="p1">*</ept> is a string made up of characters from a masking language that specifies which characters can be entered at any given position in the text box.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The control displays a set of prompts to the user.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the user types an incorrect entry, for example, the user types a letter when a digit is required, the control will automatically reject the input.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The masking language that is used by <ph id="ph1">&lt;xref:System.Windows.Forms.MaskedTextBox&gt;</ph> is very flexible.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It allows you to specify required characters, optional characters, literal characters, such as hyphens and parentheses, currency characters, and date separators.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The control also works well when bound to a data source.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Binding.Format&gt;</ph> event on a data binding can be used to reformat incoming data to comply with the mask, and the <ph id="ph2">&lt;xref:System.Windows.Forms.Binding.Parse&gt;</ph> event can be used to reformat outgoing data to comply with the specifications of the data field.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>MaskedTextBox Control<ept id="p1">](../../../docs/framework/winforms/controls/maskedtextbox-control-windows-forms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Event-Driven Validation</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you want full programmatic control over validation, or need to perform complex validation checks, you should use the validation events built into most Windows Forms controls.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each control that accepts free-form user input has a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event that will occur whenever the control requires data validation.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event-handling method, you can validate user input in several ways.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if you have a text box that must contain a postal code, you can perform the validation in the following ways:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the postal code must belong to a specific group of zip codes, you can perform a string comparison on the input to validate the data entered by the user.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, if the postal code must be in the set {10001, 10002, 10003}, then you can use a string comparison to validate the data.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the postal code must be in a specific form you can use regular expressions to validate the data entered by the user.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, to validate the form <ph id="ph1">`#####`</ph> or <ph id="ph2">`#####-####`</ph>, you can use the regular expression <ph id="ph3">`^(\d{5})(-\d{4})?$`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To validate the form <ph id="ph1">`A#A #A#`</ph>, you can use the regular expression <ph id="ph2">`[A-Z]\d[A-Z] \d[A-Z]\d`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about regular expressions, see <bpt id="p1">[</bpt>.NET Framework Regular Expressions<ept id="p1">](../../../docs/standard/base-types/regular-expressions.md)</ept> and <bpt id="p2">[</bpt>Regular Expression Examples<ept id="p2">](../../../docs/standard/base-types/regular-expression-examples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the postal code must be a valid United States Zip code, you could call a Zip code Web service to validate the data entered by the user.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event is supplied an object of type <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you determine that the control's data is not valid, you can cancel the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event by setting this object's <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you do not set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property, Windows Forms will assume that validation succeeded for that control, and raise the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For a code example that validates an e-mail address in a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, see <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Data Binding and Event-Driven Validation</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Validation is very useful when you have bound your controls to a data source, such as a database table.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>By using validation, you can make sure that your control's data satisfies the format required by the data source, and that it does not contain any special characters such as quotation marks and back slashes that might be unsafe.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you use data binding, the data in your control is synchronized with the data source during execution of the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you cancel the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event, the data will not be synchronized with the data source.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you have custom validation that takes place after the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event, it will not affect the data binding.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, if you have code in a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event that attempts to cancel the data binding, the data binding will still occur.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In this case, to perform validation in the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event, change the control's <bpt id="p1">**</bpt>Data Source Update Mode<ept id="p1">**</ept> property (<bpt id="p2">**</bpt>under (Databindings)<ept id="p2">**</ept><ph id="ph2">\\</ph><bpt id="p3">**</bpt>(Advanced)<ept id="p3">**</ept>) from <bpt id="p4">**</bpt>OnValidation<ept id="p4">**</ept> to <bpt id="p5">**</bpt>Never<ept id="p5">**</ept>, and add <bpt id="p6">*</bpt>Control<ept id="p6">*</ept><ph id="ph3">`.DataBindings["`</ph><bpt id="p7">*</bpt><ph id="ph4">\&lt;</ph>YOURFIELD&gt;<ept id="p7">*</ept><ph id="ph5">`"].WriteValue()`</ph> to your validation code.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Implicit and Explicit Validation</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>So when does a control's data get validated?</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is up to you, the developer.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can use either implicit or explicit validation, depending on the needs of your application.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Implicit Validation</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The implicit validation approach validates data as the user enters it.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can validate the data as the data is entered in a control by reading the keys as they are pressed, or more commonly whenever the user takes the input focus away from one control and moves to the next.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This approach is useful when you want to give the user immediate feedback about the data as they are working.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you want to use implicit validation for a control, you must set that control's <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.AutoValidate%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you cancel the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Validating&gt;</ph> event, the behavior of the control will be determined by what value that you assigned to <ph id="ph2">&lt;xref:System.Windows.Forms.ContainerControl.AutoValidate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you assigned <ph id="ph1">&lt;xref:System.Windows.Forms.AutoValidate&gt;</ph>, canceling the event will cause the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event not to occur.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Input focus will remain on the current control until the user changes the data to a valid input.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you assigned <ph id="ph1">&lt;xref:System.Windows.Forms.AutoValidate&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Validated&gt;</ph> event will not occur when you cancel the event, but focus will still change to the next control.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Assigning <ph id="ph1">&lt;xref:System.Windows.Forms.AutoValidate&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Forms.ContainerControl.AutoValidate%2A&gt;</ph> property prevents implicit validation altogether.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To validate your controls, you will have to use explicit validation.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Explicit Validation</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The explicit validation approach validates data at one time.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can validate the data in response to a user action, such as clicking a Save button or a Next link.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When the user action occurs, you can trigger explicit validation in one of the following ways:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.Validate%2A&gt;</ph> to validate the last control to have lost focus.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.ValidateChildren%2A&gt;</ph> to validate all child controls in a form or container control.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Call a custom method to validate the data in the controls manually.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Default Implicit Validation Behavior for Windows Forms Controls</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Different Windows Forms controls have different defaults for their <ph id="ph1">&lt;xref:System.Windows.Forms.ContainerControl.AutoValidate%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following table shows the most common controls and their defaults.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Control</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Default Validation Behavior</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Property not exposed in Visual Studio</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Property not exposed in Visual Studio</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Closing the Form and Overriding Validation</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When a control maintains focus because the data it contains is invalid, it is impossible to close the parent form in one of the usual ways:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>By clicking the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>By selecting <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>System<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>By calling the <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Close%2A&gt;</ph> method programmatically.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>However, in some cases, you might want to let the user close the form regardless of whether the values in the controls are valid.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can override validation and close a form that still contains invalid data by creating a handler for the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In the event, set the <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This forces the form to close.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information and an example, see <ph id="ph1">&lt;xref:System.Windows.Forms.Form.Closing?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you force the form to close in this manner, any data in the form's controls that has not already been saved is lost.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>In addition, modal forms do not validate the contents of controls when they are closed.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can still use control validation to lock focus to a control, but you do not have to be concerned about the behavior associated with closing the form.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>MaskedTextBox Control<ept id="p1">](../../../docs/framework/winforms/controls/maskedtextbox-control-windows-forms.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Regular Expression Examples<ept id="p1">](../../../docs/standard/base-types/regular-expression-examples.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>