<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="barrier.md" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8db4d64ddb739b9670655c7b09570127f54066c5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\barrier.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d422ca4fcccbf2c1e263c49d707a2aecda8d413b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a43db7562627c8da293267b840b86b39e2efd123</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Barrier (.NET Framework) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Barrier (.NET Framework)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>barrier<ept id="p1">*</ept> is a user-defined synchronization primitive that enables multiple threads (known as <bpt id="p2">*</bpt>participants<ept id="p2">*</ept>) to work concurrently on an algorithm in phases.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each participant executes until it reaches the barrier point in the code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The barrier represents the end of one phase of work.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When a participant reaches the barrier, it blocks until all participants have reached the same barrier.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>After all participants have reached the barrier, you can optionally invoke a post-phase action.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This post-phase action can be used to perform actions by a single thread while all other threads are still blocked.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>After the action has been executed, the participants are all unblocked.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following code snippet shows a basic barrier pattern.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a complete example, see <bpt id="p1">[</bpt>How to: Synchronize Concurrent Operations with a Barrier<ept id="p1">](../../../docs/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Adding and Removing Participants</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph>, specify the number of participants.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also add or remove participants dynamically at any time.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if one participant solves its part of the problem, you can store the result, stop execution on that thread, and call <ph id="ph1">&lt;xref:System.Threading.Barrier.RemoveParticipant%2A&gt;</ph> to decrement the number of participants in the barrier.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you add a participant by calling <ph id="ph1">&lt;xref:System.Threading.Barrier.AddParticipant%2A&gt;</ph>, the return value specifies the current phase number, which may be useful in order to initialize the work of the new participant.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Broken Barriers</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Deadlocks can occur if one participant fails to reach the barrier.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To avoid these deadlocks, use the overloads of the <ph id="ph1">&lt;xref:System.Threading.Barrier.SignalAndWait%2A&gt;</ph> method to specify a time-out period and a cancellation token.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These overloads return a Boolean value that every participant can check before it continues to the next phase.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Post-Phase Exceptions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the post-phase delegate throws an exception, it is wrapped in a <ph id="ph1">&lt;xref:System.Threading.BarrierPostPhaseException&gt;</ph> object which is then propagated to all participants.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Barrier Versus ContinueWhenAll</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Barriers are especially useful when the threads are performing multiple phases in loops.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If your code requires only one or two phases of work, consider whether to use <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> objects with any kind of implicit join, including:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id="p1">](../../../docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Synchronize Concurrent Operations with a Barrier<ept id="p1">](../../../docs/standard/threading/how-to-synchronize-concurrent-operations-with-a-barrier.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>