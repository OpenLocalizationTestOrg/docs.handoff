<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df832dd383f2ac1a5ff20c3fa53f3f0cf2e0f896</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\how-to-create-a-workflow-service-that-calls-another-workflow-service.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">42a42820ab24056ae5c285ddfda6ac6b8da929bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a40cbd02cbeda77d26490b69654191ef8fe715f7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create a Workflow Service That Calls Another Workflow Service | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Workflow Service That Calls Another Workflow Service</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It is sometimes necessary for a workflow service to obtain information from another workflow service.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic demonstrates how to call one workflow service from another.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this topic, weâ€™ll create two workflow services; one that has a method that reverses the input string, and another that converts the input string to uppercase after reversing the string that uses the first service.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To create the Reverser workflow service</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">[!INCLUDE[vs_current_long](../../../../includes/vs-current-long-md.md)]</ph> as an administrator.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Under the <bpt id="p1">**</bpt>Workflow<ept id="p1">**</ept> node in the <bpt id="p2">**</bpt>Installed Templates<ept id="p2">**</ept> pane, select <bpt id="p3">**</bpt>WCF Workflow Service Application<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name the solution <ph id="ph1">`NestedServices`</ph> and then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Servers<ept id="p1">**</ept>, make sure that <bpt id="p2">**</bpt>Use Local IIS Web Server<ept id="p2">**</ept> is selected.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Create Virtual Directory<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> in the dialog box stating that the virtual directory was successfully created.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In Solution Explorer, rename Service1.xamlx to <ph id="ph1">`StringReverserService.xamlx`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Project Properties<ept id="p1">**</ept> page for the new project, click the <bpt id="p2">**</bpt>Web<ept id="p2">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>Start Action<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Specific Page<ept id="p2">**</ept>, and select StringReverserService.xamlx as the page to start.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Open StringReverserService.xamlx in the designer and delete the existing <ph id="ph1">`ReceiveRequest`</ph> and <ph id="ph2">`SendReply`</ph> activities, and then drag a <ph id="ph3">`ReceiveAndSendReply`</ph> activity into the existing sequence activity.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>OperationName<ept id="p1">**</ept> to ReverseString.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>ServiceContractName<ept id="p1">**</ept> to IReverseString.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>CanCreateInstance<ept id="p1">**</ept> check box.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>SequentialService<ept id="p1">**</ept> activity, and then click the <bpt id="p2">**</bpt>Variables<ept id="p2">**</ept> tab at the bottom of the designer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Create two new variables named StringToReverse and ReversedStringToReturn of type String.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Define<ept id="p1">**</ept> link in the <bpt id="p2">**</bpt>Receive<ept id="p2">**</ept> activity.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Click the  <bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept>, and create a parameter named InputString of type String that assigns to StringToReverse.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Define<ept id="p1">**</ept> link in the <bpt id="p2">**</bpt>SendReplyToReceive<ept id="p2">**</ept> activity.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept>, and create a parameter named ReversedString of type String, assigned to ReversedStringToReturn.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To implement the logic for the service, create a new class in the project called StringLibrary.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Replace the class definition with the following code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To call the ReverseString method on the input, drag an <bpt id="p1">**</bpt>InvokeMethod<ept id="p1">**</ept> activity from the toolbox to the space between the <bpt id="p2">**</bpt>Receive<ept id="p2">**</ept> and <bpt id="p3">**</bpt>SendReply<ept id="p3">**</ept> activities.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Set the properties of the activity as follows:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MethodName<ept id="p1">**</ept>: ReverseString</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Result<ept id="p1">**</ept>: ReversedStringToReturn</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept>: Create a new parameter with a <bpt id="p2">**</bpt>Direction<ept id="p2">**</ept> of In, a <bpt id="p3">**</bpt>Type<ept id="p3">**</ept> of String, and a <bpt id="p4">**</bpt>Value<ept id="p4">**</ept> of StringToReverse.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TargetType<ept id="p1">**</ept>: NestedServices.StringLibrary</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Test the service by pressing F5.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the WCF Test Client that appears, double-click the ReverseString() method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the Request pane, enter <ph id="ph1">`Sample`</ph> for the Value of the InputString parameter.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The service should return "elpmaS".</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To create the UpperCaser workflow service</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Right-click the NestedServices project and select <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New Item<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Workflow<ept id="p1">**</ept> node, select <bpt id="p2">**</bpt>WCF Workflow Service<ept id="p2">**</ept>, and name the new service <ph id="ph1">`UpperCaserService`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This should add a new workflow service called UpperCaserService.xamlx to the project.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Open UpperCaserService.xamlx in the designer and delete the existing <bpt id="p1">**</bpt>ReceiveRequest<ept id="p1">**</ept> and <ph id="ph1">`SendReply`</ph> activities, and drag a <ph id="ph2">`ReceiveAndSendReply`</ph> activity into the existing sequence activity.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>OperationName<ept id="p1">**</ept> to UpperCaseString.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Set the <bpt id="p1">**</bpt>ServiceContractName<ept id="p1">**</ept> to IUpperCaseString.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>CanCreateInstance<ept id="p1">**</ept> check box.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Select the SequentialService activity, and then click the <bpt id="p1">**</bpt>Variables<ept id="p1">**</ept> tab at the bottom of the designer.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Create three new variables named StringToUpper, StringToReverse, and StringToReturn of type String.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Define<ept id="p1">**</ept> link in the <bpt id="p2">**</bpt>Receive<ept id="p2">**</ept> activity.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept>, and create a parameter named InputString of type String that assigns to StringToUpper.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Define<ept id="p1">**</ept> link in the <bpt id="p2">**</bpt>SendReplyToReceive<ept id="p2">**</ept> activity.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept>, and create a parameter named ModifiedString of type String, assigned to StringToReturn.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To implement the logic for the service, create a new method in the StringLibrary class using the following code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To call the UpperCaseString method on the input, drag an <bpt id="p1">**</bpt>InvokeMethod<ept id="p1">**</ept> activity from the toolbox to the space between the <bpt id="p2">**</bpt>Receive<ept id="p2">**</ept> and <bpt id="p3">**</bpt>SendReply<ept id="p3">**</ept> activities.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Set the properties of the activity as follows:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MethodName<ept id="p1">**</ept>: UpperCaseString</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Result<ept id="p1">**</ept>: StringToReverse</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Parameters<ept id="p1">**</ept>: Create a new parameter with a <bpt id="p2">**</bpt>Direction<ept id="p2">**</ept> of In, a <bpt id="p3">**</bpt>Type<ept id="p3">**</ept> of String, and a <bpt id="p4">**</bpt>Value<ept id="p4">**</ept> of StringToUpper.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TargetType<ept id="p1">**</ept>: NestedServices.StringLibrary</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Weâ€™ll now call the first service on the modified string.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Right-click the project and select <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Add a service reference to the service at http://localhost/NestedServices/StringReverserService.xamlx and build the project to create a custom activity to access the first Web service.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Drag an instance of the new activity onto the workflow, between the <bpt id="p1">**</bpt>InvokeMethod<ept id="p1">**</ept> activity and the <bpt id="p2">**</bpt>SendReplyToReceive<ept id="p2">**</ept> activities.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Assign the variable StringToReverse to the InputString property of the new activity, and the variable StringToReturn to the StringToReturn property.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Open the Properties page for the NestedServices project, and change the <bpt id="p1">**</bpt>Specific Page<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Web<ept id="p2">**</ept> tab to UpperCaserService.xamlx.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Test the service by pressing F5.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the WCF Test Client that appears, double-click the ReverseString() method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the Request pane, enter <ph id="ph1">`Sample`</ph> for the Value of the InputString parameter.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Invoke<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The service should return "ELPMAS".</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To create a client to call the services</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Add a new Console application project called Client to the solution.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Right-click the Client project and select <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In the window that appears, click <bpt id="p1">**</bpt>Discover<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Select StringReverserService.xamlx, and enter ReverseService as the namespace.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Replace the Main method in Program.cs with the following code.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>