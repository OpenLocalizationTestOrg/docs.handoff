<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d49a6752f7d855ffa53e41be001e8fcfc381099f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\custom-animations-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6459c5d82edf77427afc39dcc0b825120750acb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc5f4e8852c938e070ea674dcbd7b73f08926c26</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Custom Animations Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom Animations Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how and when to extend the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation system by creating custom key frames, animation classes, or by using per-frame callback to bypass it.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To understand this topic, you should be familiar with the different types of animations provided by the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information, see the From/To/By Animations Overview, the <bpt id="p1">[</bpt>Key-Frame Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/key-frame-animations-overview.md)</ept>, and the <bpt id="p2">[</bpt>Path Animations Overview<ept id="p2">](../../../../docs/framework/wpf/graphics-multimedia/path-animations-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because the animation classes inherit from the <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> class, you should be familiar with <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> objects and how to inherit from <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Extending the Animation System</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are a number of ways to extend the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation system, depending on the level of built-in functionality you want to use.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are three primary extensibility points in the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation engine:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create a custom key frame object by inheriting from one of the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>KeyFrame classes, such as <ph id="ph2">&lt;xref:System.Windows.Media.Animation.DoubleKeyFrame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This approach uses most of the built-in functionality of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation engine.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Create your own animation class by inheriting from <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph> or one of the <bpt id="p1">*</bpt><ph id="ph2">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase classes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use per-frame callback to generate animations on a per-frame basis.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This approach completely bypasses the animation and timing system.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following table describes some the scenarios for extending the animation system.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When you want to...</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use this approach</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Customize the interpolation between values of a type that has a corresponding <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationUsingKeyFrames</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Create a custom key frame.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Create a Custom Key Frame<ept id="p1">](#createacustomkeyframe)</ept> section.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Customize more than just the interpolation between values of a type that has a corresponding <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>Animation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create a custom animation class that inherits from the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase class that corresponds to the type you want to animate.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Create a Custom Animation Class<ept id="p1">](#createacustomanimationtype)</ept> section.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Animate a type that has no corresponding <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use an <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames&gt;</ph> or create a class that inherits from <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Create a Custom Animation Class<ept id="p1">](#createacustomanimationtype)</ept> section.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Animate multiple objects with values that are computed each frame and are based on the last set of object interactions</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Use per-frame callback.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Create a Use Per-Frame Callback<ept id="p1">](#useperframecallback)</ept> section.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create a Custom Key Frame</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creating a custom key frame class is the simplest way to extend the animation system.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use this approach when you want to a different interpolation method for a key-frame animation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>As described in the <bpt id="p1">[</bpt>Key-Frame Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/key-frame-animations-overview.md)</ept>, a key-frame animation uses key frame objects to generate its output values.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each key frame object performs three functions:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Specifies a target value using its <ph id="ph1">&lt;xref:System.Windows.Media.Animation.IKeyFrame.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Specifies the time at which that value should be reached using its <ph id="ph1">&lt;xref:System.Windows.Media.Animation.IKeyFrame.KeyTime%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Interpolates between the value of the previous key frame and its own value by implementing the InterpolateValueCore method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implementation Instructions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Derive from the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>KeyFrame abstract class and implement the InterpolateValueCore method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The InterpolateValueCore method returns the current value of the key frame.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It takes two parameters: the value of the previous key frame and a progress value that ranges from 0 to 1.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A progress of 0 indicates the key frame has just started, and a value of 1 indicates that the key frame has just completed and should return the value specified by its <ph id="ph1">&lt;xref:System.Windows.Media.Animation.IKeyFrame.Value%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>KeyFrame classes inherit from the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> class, you must also override <ph id="ph3">&lt;xref:System.Windows.Freezable.CreateInstanceCore%2A&gt;</ph> core to return a new instance of your class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If the class does not use dependency properties to store its data or it requires extra initialization after creation, you might need to override additional methods; see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After you've created your custom <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>KeyFrame animation, you can use it with the <bpt id="p2">*</bpt><ph id="ph2">\&lt;</ph>Type&gt;<ept id="p2">*</ept>AnimationUsingKeyFrames for that type.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Create a Custom Animation Class</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Creating your own animation type gives you more control over how an object in animated.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There are two recommended ways to create your own animation type: you can derive from the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph> class or the <bpt id="p1">*</bpt><ph id="ph2">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Deriving from the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>Animation or <bpt id="p2">*</bpt><ph id="ph2">\&lt;</ph>Type&gt;<ept id="p2">*</ept>AnimationUsingKeyFrames classes is not recommended.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Derive from <ph id="ph1">\&lt;</ph>Type&gt;AnimationBase</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Deriving from a <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase class is the simplest way to create a new animation type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Use this approach when you want to create a new animation for type that already has a corresponding <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implementation Instructions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Derive from a <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>Animation class and implement the GetCurrentValueCore method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The GetCurrentValueCore method returns the current value of the animation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It takes three parameters: a suggested starting value, a suggested ending value, and an <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>, which you use to determine the progress of the animation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase classes inherit from the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> class, you must also override <ph id="ph3">&lt;xref:System.Windows.Freezable.CreateInstanceCore%2A&gt;</ph> core to return a new instance of your class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If the class does not use dependency properties to store its data or it requires extra initialization after creation, you might need to override additional methods; see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see the GetCurrentValueCore method documentation for the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase class for the type that you want to animate.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>Custom Animation Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159981)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Alternative Approaches<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If you simply want to change how animation values are interpolated, considering deriving from one of the <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>KeyFrame classes.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The key frame you create can be used with the corresponding <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationUsingKeyFrames provided by <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Derive from AnimationTimeline</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Derive from the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph> class when you want to create an animation for a type that doesn't already have a matching <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation, or you want to create an animation that is not strongly typed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implementation Instructions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Derive from the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph> class and override the following members:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Freezable.CreateInstanceCore%2A&gt;</ph> – If your new class is concrete, you must override <ph id="ph2">&lt;xref:System.Windows.Freezable.CreateInstanceCore%2A&gt;</ph> to return a new instance of your class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline.GetCurrentValue%2A&gt;</ph> – Override this method to return the current value of your animation.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It takes three parameters: a default origin value, a default destination value, and an <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationClock&gt;</ph> to obtain the current time or progress for the animation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can choose whether to use the default origin and destination values.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline.IsDestinationDefault%2A&gt;</ph> – Override this property to indicate whether your animation uses the default destination value specified by the <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline.GetCurrentValue%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline.TargetPropertyType%2A&gt;</ph> – Override this property to indicate the <ph id="ph2">&lt;xref:System.Type&gt;</ph> of output your animation produces.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the class does not use dependency properties to store its data or it requires extra initialization after creation, you might need to override additional methods; see the <bpt id="p1">[</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The recommended paradigm (used by <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animations) is to use two inheritance levels:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Create an abstract <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase class that derives from <ph id="ph2">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This class should override the <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline.TargetPropertyType%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It should also introduce a new abstract method, GetCurrentValueCore, and override <ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline.GetCurrentValue%2A&gt;</ph> so that it validates the types of the default origin value and default destination value parameters, then calls GetCurrentValueCore.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Create another class that inherits from your new <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">*</ept>AnimationBase class and overrides the <ph id="ph2">&lt;xref:System.Windows.Freezable.CreateInstanceCore%2A&gt;</ph> method, the GetCurrentValueCore method that you introduced, and the <ph id="ph3">&lt;xref:System.Windows.Media.Animation.AnimationTimeline.IsDestinationDefault%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Alternative Approaches<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you want to animate a type that has no corresponding From/To/By animation or key-frame animation, consider using an <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Because it is weakly typed, an <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames&gt;</ph> can animate any type of value.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The drawback to this approach is that <ph id="ph1">&lt;xref:System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames&gt;</ph> only supports discrete interpolation.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Use Per-Frame Callback</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use this approach when you need to completely bypass the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> animation system.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>One scenario for this approach is physics animations, where at each animation step a new direction or position of animated objects needs to be recomputed based on the  last set of object interactions.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Implementation Instructions<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Unlike the other approaches described in this overview, to use per-frame callback you don't need to create a custom animation or key frame class.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Instead, you register for the <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget.Rendering&gt;</ph> event of the object that contains the objects you want to animate.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This event handler method gets called once per frame.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Each time that <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> marshals the persisted rendering data in the visual tree across to the composition tree, your event handler method is called.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In your event handler, perform your whatever calculations necessary for your animation effect and set the properties of the objects you want to animate with these values.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To obtain the presentation time of the current frame, the <ph id="ph1">&lt;xref:System.EventArgs&gt;</ph> associated with this event can be cast as <ph id="ph2">&lt;xref:System.Windows.Media.RenderingEventArgs&gt;</ph>, which provide a <ph id="ph3">&lt;xref:System.Windows.Media.RenderingEventArgs.RenderingTime%2A&gt;</ph> property that you can use to obtain the current frame's rendering time.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Media.CompositionTarget.Rendering&gt;</ph> page.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.AnimationTimeline&gt;</ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.IKeyFrame&gt;</ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Animation Techniques Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/property-animation-techniques-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Freezable Objects Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/freezable-objects-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Key-Frame Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/key-frame-animations-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Path Animations Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/path-animations-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Animation and Timing System Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Custom Animation Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159981)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>