<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef4fcd81f4757aa4d6ad96e5d123b410904caf11</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\debug-trace-profile\how-to-add-trace-statements-to-application-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">458e955a35a0db9bace1101c400800ce4bdbaafb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f15a1b4598c4131c6e05df69600955248b8c7f3a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Add Trace Statements to Application Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Add Trace Statements to Application Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The methods used most often for tracing are the methods for writing output to listeners: <bpt id="p1">**</bpt>Write<ept id="p1">**</ept>, <bpt id="p2">**</bpt>WriteIf<ept id="p2">**</ept>, <bpt id="p3">**</bpt>WriteLine<ept id="p3">**</ept>, <bpt id="p4">**</bpt>WriteLineIf<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Assert<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>Fail<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These methods can be divided into two categories: <bpt id="p1">**</bpt>Write<ept id="p1">**</ept>, <bpt id="p2">**</bpt>WriteLine<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Fail<ept id="p3">**</ept> all emit output unconditionally, whereas <bpt id="p4">**</bpt>WriteIf<ept id="p4">**</ept>, <bpt id="p5">**</bpt>WriteLineIf<ept id="p5">**</ept>, and <bpt id="p6">**</bpt>Assert<ept id="p6">**</ept> test a Boolean condition, and write or do not write based on the value of the condition.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WriteIf<ept id="p1">**</ept> and <bpt id="p2">**</bpt>WriteLineIf<ept id="p2">**</ept> emit output if the condition is <ph id="ph1">`true`</ph>, and <bpt id="p3">**</bpt>Assert<ept id="p3">**</ept> emits output if the condition is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When designing your tracing and debugging strategy, you should think about how you want the output to look.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Multiple <bpt id="p1">**</bpt>Write<ept id="p1">**</ept> statements filled with unrelated information will create a log that is difficult to read.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>On the other hand, using <bpt id="p1">**</bpt>WriteLine<ept id="p1">**</ept> to put related statements on separate lines may make it difficult to distinguish what information belongs together.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In general, use multiple <bpt id="p1">**</bpt>Write<ept id="p1">**</ept> statements when you want to combine information from multiple sources to create a single informative message, and use the <bpt id="p2">**</bpt>WriteLine<ept id="p2">**</ept> statement when you want to create a single, complete message.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To write a complete line</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.WriteLine%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Trace.WriteLineIf%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A carriage return is appended to the end of the message this method returns, so that the next message returned by <bpt id="p1">**</bpt>Write<ept id="p1">**</ept>, <bpt id="p2">**</bpt>WriteIf<ept id="p2">**</ept>, <bpt id="p3">**</bpt>WriteLine<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>WriteLineIf<ept id="p4">**</ept> will begin on the following line:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To write a partial line</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Write%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.Trace.WriteIf%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The next message put out by a <bpt id="p1">**</bpt>Write<ept id="p1">**</ept>, <bpt id="p2">**</bpt>WriteIf<ept id="p2">**</ept>, <bpt id="p3">**</bpt>WriteLine<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>WriteLineIf<ept id="p4">**</ept> will begin on the same line as the message put out by the <bpt id="p5">**</bpt>Write<ept id="p5">**</ept> or <bpt id="p6">**</bpt>WriteIf<ept id="p6">**</ept> statement:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To verify that certain conditions exist either before or after you execute a method</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.Diagnostics.Trace.Assert%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">**</bpt>Assert<ept id="p1">**</ept> with both tracing and debugging.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This example outputs the call stack to any listener in the <bpt id="p1">**</bpt>Listeners<ept id="p1">**</ept> collection.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Assertions in Managed Code<ept id="p1">](/visualstudio/debugger/assertions-in-managed-code)</ept> and <ph id="ph1">&lt;xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Debug.WriteIf%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Debug.WriteLineIf%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Trace.WriteIf%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.Trace.WriteLineIf%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tracing and Instrumenting Applications<ept id="p1">](../../../docs/framework/debug-trace-profile/tracing-and-instrumenting-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create, Initialize and Configure Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Trace Switches<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-switches.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Trace Listeners<ept id="p1">](../../../docs/framework/debug-trace-profile/trace-listeners.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>