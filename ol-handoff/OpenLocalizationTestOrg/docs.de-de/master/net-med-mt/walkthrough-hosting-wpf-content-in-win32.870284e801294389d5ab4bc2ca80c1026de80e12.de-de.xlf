<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eac72eebe16ae9be06c6986ebd3bb4c9034be698</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\walkthrough-hosting-wpf-content-in-win32.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6de972636b735546a6d0a04378e08406c84c8ce6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e0b1d6d77a52ce8f7b0802ac1edfd192770ea79</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Hosting WPF Content in Win32 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Hosting WPF Content in Win32</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a rich environment for creating applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>However, when you have a substantial investment in              <ph id="ph1">[!INCLUDE[TLA#tla_win32](../../../../includes/tlasharptla-win32-md.md)]</ph> code, it might be more effective to add              <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> functionality to your application rather than rewriting your original code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a straightforward mechanism for hosting              <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in a              <ph id="ph3">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This tutorial describes how to write a sample application,              <bpt id="p1">[</bpt>Hosting WPF Content in a Win32 Window Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160004)</ept>, that hosts              <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in a              <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can extend this sample to host any              <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Because it involves mixing managed and unmanaged code, the application is written in              <ph id="ph1">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic familiarity with both                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> and                  <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> programming.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a basic introduction to                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> programming, see                  <bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../../docs/framework/wpf/getting-started/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For an introduction to                  <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> programming, you should reference any of the numerous books on the subject, in particular                  <bpt id="p1">*</bpt>Programming Windows<ept id="p1">*</ept> by Charles Petzold.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because the sample that accompanies this tutorial is implemented in                  <ph id="ph1">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph>, this tutorial assumes familiarity with the use of                  <ph id="ph2">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph> to program the                  <ph id="ph3">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph><ph id="ph4">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph> plus an understanding of managed code programming.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Familiarity with                  <ph id="ph1">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph> is helpful but not essential.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This tutorial includes a number of code examples from the associated sample.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, for readability, it does not include the complete sample code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For the complete sample code, see                      <bpt id="p1">[</bpt>Hosting WPF Content in a Win32 Window Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160004)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Basic Procedure</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This section outlines the basic procedure you use to host                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in a                  <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The remaining sections explain the details of each step.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The key to hosting                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content on a                  <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window is the                  <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This class wraps the                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in a                  <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window, allowing it to be incorporated into your                  <ph id="ph3">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph> as a child window.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following approach combines the                  <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> and                  <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> in a single application.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Implement your                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content as a managed class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Implement a                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> application with                          <ph id="ph2">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you are starting with an existing application and unmanaged                          <ph id="ph1">[!INCLUDE[TLA#tla_cpp](../../../../includes/tlasharptla-cpp-md.md)]</ph> code, you can usually enable it to call managed code by changing your project settings to include the                          <ph id="ph2">`/clr`</ph> compiler flag.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Set the threading model to single-threaded apartment (STA).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Handle the                          <bpt id="p1">[</bpt>WM_CREATE<ept id="p1">](http://msdn.microsoft.com/library/ms632619.aspx)</ept>notification in your window procedure and do the following:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create a new                                  <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object with the parent window as its                                  <ph id="ph2">`parent`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Create an instance of your                                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Assign a reference to the                                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object to the                                  <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> property of the                                  <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Get the HWND for the content.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.Handle%2A&gt;</ph> property of the                                  <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object contains the window handle (HWND).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To get an HWND that you can use in the unmanaged part of your application, cast                                  <ph id="ph1">`Handle.ToPointer()`</ph> to an HWND.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Implement a managed class that contains a static field to hold a reference to your                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This class allows you to get a reference to the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content from your                          <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Assign the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content to the static field.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Receive notifications from the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content by attaching a handler to one or more of the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> events.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Communicate with the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content by using the reference that you stored in the static field to set properties, and so on.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can also use                      <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> to implement your                      <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, you will have to compile it separately as a                      <ph id="ph1">[!INCLUDE[TLA#tla_dll](../../../../includes/tlasharptla-dll-md.md)]</ph> and reference that                      <ph id="ph2">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph> from your                      <ph id="ph3">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The remainder of the procedure is similar to that outlined above.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Implementing the Host Application</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This section describes how to host                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in a basic                  <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The content itself is implemented in                  <ph id="ph1">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph> as a managed class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For the most part, it is straightforward                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> programming.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The key aspects of the content implementation are discussed in                  <bpt id="p1">[</bpt>Implementing the WPF Content<ept id="p1">](#implementing_the_wpf_page)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The Basic Application<ept id="p1">](#the_basic_application)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hosting the WPF Content<ept id="p1">](#hosting_the_wpf_page)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Holding a Reference to the WPF Content<ept id="p1">](#holding_a_reference)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Communicating with the WPF Content<ept id="p1">](#communicating_with_the_page)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The Basic Application</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The starting point for the host application was to create a                          <ph id="ph1">[!INCLUDE[TLA#tla_visualstu2005](../../../../includes/tlasharptla-visualstu2005-md.md)]</ph> template.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Open                                  <ph id="ph1">[!INCLUDE[TLA2#tla_visualstu2005](../../../../includes/tla2sharptla-visualstu2005-md.md)]</ph>, and select                                  <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> from the                                  <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Select                                  <bpt id="p1">**</bpt>Win32<ept id="p1">**</ept> from the list of                                  <ph id="ph1">[!INCLUDE[TLA2#tla_visualcpp](../../../../includes/tla2sharptla-visualcpp-md.md)]</ph> project types.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If your default language is not                                  <ph id="ph1">[!INCLUDE[TLA2#tla_cpp](../../../../includes/tla2sharptla-cpp-md.md)]</ph>, you will find these project types under                                  <bpt id="p1">**</bpt>Other Languages<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Select a                                  <bpt id="p1">**</bpt>Win32 Project<ept id="p1">**</ept> template, assign a name to the project and click                                  <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> to launch the                                  <bpt id="p3">**</bpt>Win32 Application Wizard<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Accept the wizard's default settings and click                                  <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept> to start the project.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The template creates a basic                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> application, including:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An entry point for the application.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A window, with an associated window procedure (WndProc).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A menu with                                  <bpt id="p1">**</bpt>File<ept id="p1">**</ept> and                                  <bpt id="p2">**</bpt>Help<ept id="p2">**</ept> headings.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The                                  <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu has an                                  <bpt id="p2">**</bpt>Exit<ept id="p2">**</ept> item that closes the application.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The                                  <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> menu has an                                  <bpt id="p2">**</bpt>About<ept id="p2">**</ept> item that launches a simple dialog box.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Before you start writing code to host the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content, you need to make two modifications to the basic template.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The first is to compile the project as managed code.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>By default, the project compiles as unmanaged code.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, because                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> is implemented in managed code, the project must be compiled accordingly.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Right-click the project name in                                  <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> and select                                  <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> from the context menu to launch the                                  <bpt id="p3">**</bpt>Property Pages<ept id="p3">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Select                                  <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept> from the tree view in the left pane.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Select                                  <bpt id="p1">**</bpt>Common Language Runtime<ept id="p1">**</ept> support from the                                  <bpt id="p2">**</bpt>Project Defaults<ept id="p2">**</ept> list in the right pane.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Select                                  <bpt id="p1">**</bpt>Common Language Runtime Support (/clr)<ept id="p1">**</ept> from the drop-down list box.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This compiler flag allows you to use managed code in your application, but your unmanaged code will still compile as before.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses the single-threaded apartment (STA) threading model.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In order to work properly with the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content code, you must set the application's threading model to STA by applying an attribute to the entry point.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WinMain<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/Win32HostingWPFPage.cpp#winmain)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Hosting the WPF Content</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content is a simple address entry application.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>It consists of several                          <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls to take user name, address, and so on.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There are also two                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> controls,                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and                          <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When the user clicks                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>, the button's                          <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler collects the data from the                          <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls, assigns it to corresponding properties, and raises a custom event,                          <ph id="ph3">`OnButtonClicked`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When the user clicks                          <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept>, the handler simply raises                          <ph id="ph1">`OnButtonClicked`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The event argument object for                          <ph id="ph1">`OnButtonClicked`</ph> contains a Boolean field that indicates which button was clicked.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The code to host the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content is implemented in a handler for the                          <bpt id="p1">[</bpt>WM_CREATE<ept id="p1">](http://msdn.microsoft.com/library/ms632619.aspx)</ept> notification on the host window.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WMCreate<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/Win32HostingWPFPage.cpp#wmcreate)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">`GetHwnd`</ph> method takes size and position information plus the parent window handle and returns the window handle of the hosted                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You cannot use a                              <ph id="ph1">`#using`</ph> directive for the                              <ph id="ph2">`System::Windows::Interop`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Doing so creates a name collision between the                              <ph id="ph1">&lt;xref:System.Windows.Interop.MSG&gt;</ph> structure in that namespace and the MSG structure declared in winuser.h.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You must instead use fully-qualified names to access the contents of that namespace.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#GetHwnd<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/Win32HostingWPFPage.cpp#gethwnd)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You cannot host the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content directly in your application window.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Instead, you first create an                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object to wrap the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This object is basically a window that is designed to host a                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You host the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object in the parent window by creating it as a child of a                          <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> window that is part of your application.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> constructor parameters contain much the same information that you would pass to CreateWindow when you create a                          <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> child window.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You next create an instance of the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content object.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In this case, the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content is implemented as a separate class,                          <ph id="ph2">`WPFPage`</ph>, using                          <ph id="ph3">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You could also implement the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content with                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>However, to do so you need to set up a separate project and build the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content as a                          <ph id="ph2">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You can add a reference to that                          <ph id="ph1">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph> to your project, and use that reference to create an instance of the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You display the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content in your child window by assigning a reference to the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content to the                          <ph id="ph3">&lt;xref:System.Windows.Interop.HwndSource.RootVisual%2A&gt;</ph> property of the                            <ph id="ph4">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The next line of code attaches an event handler,                          <ph id="ph1">`WPFButtonClicked`</ph>, to the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content                          <ph id="ph3">`OnButtonClicked`</ph> event.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This handler is called when the user clicks the                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> or                          <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>See                          <bpt id="p1">[</bpt>communicating_with_the_WPF content<ept id="p1">](#communicating_with_the_page)</ept> for further discussion of this event handler.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The final line of code shown returns the window handle (HWND) that is associated with the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can use this handle from your                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> code to send messages to the hosted window, although the sample does not do so.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object raises an event every time it receives a message.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To process the messages, call the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource.AddHook%2A&gt;</ph> method to attach a message handler and then process the messages in that handler.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Holding a Reference to the WPF Content</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For many applications, you will want to communicate with the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content later.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For example, you might want to modify the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content properties, or perhaps have the                          <ph id="ph2">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object host different                          <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To do this, you need a reference to the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object or the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object and its associated                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content remain in memory until you destroy the window handle.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>However, the variable you assign to the                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object will go out of scope as soon as you return from the window procedure.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The customary way to handle this issue with                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> applications is to use a static or global variable.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Unfortunately, you cannot assign a managed object to those types of variables.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can assign the window handle associated with                          <ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph> object to a global or static variable, but that doe not provide access to the object itself.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The simplest solution to this issue is to implement a managed class that contains a set of static fields to hold references to any managed objects that you need access to.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The sample uses the                          <ph id="ph1">`WPFPageHost`</ph> class to hold a reference to the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content, plus the initial values of a number of its properties that might be changed later by the user.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This is defined in the header.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageHost<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/Win32HostingWPFPage.h#wpfpagehost)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The latter part of the                          <ph id="ph1">`GetHwnd`</ph> function assigns values to those fields for later use while                          <ph id="ph2">`myPage`</ph> is still in scope.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Communicating with the WPF Content</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>There are two types of communication with the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The application receives information from the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content when the user clicks the                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> or                          <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The application also has a                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> that allows the user to change various                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content properties, such as the background color or default font size.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>As mentioned above, when the user clicks either button the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content raises an                          <ph id="ph2">`OnButtonClicked`</ph> event.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The application attaches a handler to this event to receive these notifications.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If the                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button was clicked, the handler gets the user information from the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content and displays it in a set of static controls.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFButtonClicked<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/Win32HostingWPFPage.cpp#wpfbuttonclicked)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The handler receives a custom event argument object from the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content,                          <ph id="ph2">`MyPageEventArgs`</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The object's                          <ph id="ph1">`IsOK`</ph> property is set to                          <ph id="ph2">`true`</ph> if the                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button was clicked, and                          <ph id="ph3">`false`</ph> if the                          <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> button was clicked.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If the                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button was clicked, the handler gets a reference to the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content from the container class.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>It then collects the user information that is held by the associated                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content properties and uses the static controls to display the information on the parent window.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Because the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content data is in the form of a managed string, it has to be marshaled for use by a                          <ph id="ph2">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> control.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If the                          <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button was clicked, the handler clears the data from the static controls.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The application                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> provides a set of radio buttons that allow the user to modify the background color of the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content, and several font-related properties.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following example is an excerpt from the application's window procedure (WndProc) and its message handling that sets various properties on different messages, including the background color.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The others are similar, and are not shown.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See the complete sample for details and context.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WMCommandToBG<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/Win32HostingWPFPage.cpp#wmcommandtobg)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To set the background color, get a reference to the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content (                         <ph id="ph2">`hostedPage`</ph>) from                          <ph id="ph3">`WPFPageHost`</ph> and set the background color property to the appropriate color.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The sample uses three color options: the original color, light green, or light salmon.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The original background color is stored as a static field in the                          <ph id="ph1">`WPFPageHost`</ph> class.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>To set the other two, you create a new                          <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> object and pass the constructor a static colors value from the                          <ph id="ph2">&lt;xref:System.Windows.Media.Colors&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Implementing the WPF Page</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>You can host and use the                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content without any knowledge of the actual implementation.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If the                  <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content had been packaged in a separate                  <ph id="ph2">[!INCLUDE[TLA2#tla_dll](../../../../includes/tla2sharptla-dll-md.md)]</ph>, it could have been built in any                  <ph id="ph3">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> language.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Following is a brief walkthrough of the                  <ph id="ph1">[!INCLUDE[TLA#tla_cppcli](../../../../includes/tlasharptla-cppcli-md.md)]</ph> implementation that is used in the sample.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This section contains the following subsections.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout<ept id="p1">](#page_layout)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Returning the Data to the Host Window<ept id="p1">](#returning_data_to_window)</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Setting the WPF Properties<ept id="p1">](#set_page_properties)</ept></source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Layout</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> elements in the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content consist of five                          <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls, with associated                          <ph id="ph4">&lt;xref:System.Windows.Controls.Label&gt;</ph> controls: Name, Address, City, State, and Zip.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>There are also two                          <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> controls,                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and                          <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content is implemented in the                          <ph id="ph2">`WPFPage`</ph> class.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Layout is handled with a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> layout element.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The class inherits from                          <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, which effectively makes it the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content root element.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content constructor takes the required width and height, and sizes the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph> accordingly.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>It then defines the basic layout by creating a set of                          <ph id="ph1">&lt;xref:System.Windows.Controls.ColumnDefinition&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Controls.RowDefinition&gt;</ph> objects and adding them to the                          <ph id="ph3">&lt;xref:System.Windows.Controls.Grid&gt;</ph> object base                          <ph id="ph4">&lt;xref:System.Windows.Controls.Grid.ColumnDefinitions%2A&gt;</ph> and                          <ph id="ph5">&lt;xref:System.Windows.Controls.Grid.RowDefinitions%2A&gt;</ph> collections, respectively.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This defines a grid of five rows and seven columns, with the dimensions determined by the contents of the cells.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageCtorToGridDef<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.cpp#wpfpagectortogriddef)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Next, the constructor adds the                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> elements to the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The first element is the title text, which is a                          <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> control that is centered in the first row of the grid.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageCtorTitle<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.cpp#wpfpagectortitle)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The next row contains the Name                          <ph id="ph1">&lt;xref:System.Windows.Controls.Label&gt;</ph> control and its associated                          <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Because the same code is used for each label/textbox pair, it is placed in a pair of private methods and used for all five label/textbox pairs.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The methods create the appropriate control, and call the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph> class static                          <ph id="ph2">&lt;xref:System.Windows.Controls.Grid.SetColumn%2A&gt;</ph> and                          <ph id="ph3">&lt;xref:System.Windows.Controls.Grid.SetRow%2A&gt;</ph> methods to place the controls in the appropriate cell.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>After the control is created, the sample calls the                          <ph id="ph1">&lt;xref:System.Windows.Controls.UIElementCollection.Add%2A&gt;</ph> method on the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> property of the                          <ph id="ph3">&lt;xref:System.Windows.Controls.Grid&gt;</ph> to add the control to the grid.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The code to add the remaining label/textbox pairs is similar.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>See the sample code for details.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageCtorName<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.cpp#wpfpagectorname)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The implementation of the two methods is as follows:</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageCreateHelpers<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.cpp#wpfpagecreatehelpers)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Finally, the sample adds the                          <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> and                          <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> buttons and attaches an event handler to their                          <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageCtorButtonsEvents<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.cpp#wpfpagectorbuttonsevents)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Returning the Data to the Host Window</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>When either button is clicked, its                          <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The host window could simply attach handlers to these events and get the data directly from the                          <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The sample uses a somewhat less direct approach.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>It handles the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> within the                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content, and then raises a custom event                          <ph id="ph3">`OnButtonClicked`</ph>, to notify the                          <ph id="ph4">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This allows the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content to do some parameter validation before notifying the host.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The handler gets the text from the                          <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> controls and assigns it to public properties, from which the host can retrieve the information.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The event declaration, in WPFPage.h:</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageEventDecl<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.h#wpfpageeventdecl)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler, in WPFPage.cpp:</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageButtonClicked<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.cpp#wpfpagebuttonclicked)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Setting the WPF Properties</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> host allows the user to change several                          <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content properties.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>From the                          <ph id="ph1">[!INCLUDE[TLA2#tla_win32](../../../../includes/tla2sharptla-win32-md.md)]</ph> side, it is simply a matter of changing the properties.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The implementation in the                          <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> content class is somewhat more complicated, because there is no single global property that controls the fonts for all controls.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Instead, the appropriate property for each control is changed in the properties' set accessors.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The following example shows the code for the                          <ph id="ph1">`DefaultFontFamily`</ph> property.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Setting the property calls a private method that in turn sets the                          <ph id="ph1">&lt;xref:System.Windows.Controls.Control.FontFamily%2A&gt;</ph> properties for the various controls.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>From WPFPage.h:</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageFontFamilyProperty<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.h#wpfpagefontfamilyproperty)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>From WPFPage.cpp:</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Win32HostingWPFPage#WPFPageSetFontFamily<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/Win32HostingWPFPage/CPP/WPFPage.cpp#wpfpagesetfontfamily)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Interop.HwndSource&gt;</ph></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WPF and Win32 Interoperation<ept id="p1">](../../../../docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>