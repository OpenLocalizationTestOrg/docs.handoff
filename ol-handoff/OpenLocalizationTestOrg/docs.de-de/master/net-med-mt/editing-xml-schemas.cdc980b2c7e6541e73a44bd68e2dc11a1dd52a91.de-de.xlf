<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fd1e4dbbfe180a39d81a8d0c63442a847aa6850</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\editing-xml-schemas.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d0ec7c72f23126a8e729bdf277679bb6ea0ad12</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">335f41237cf654aca1e717c0397bd5e9c4829b1c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Editing XML Schemas | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Editing XML Schemas</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Editing an XML schema is one of the most important features of the Schema Object Model (SOM).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All of the pre-schema-compilation properties of the SOM can be used to change the existing values in an XML schema.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The XML schema can then be recompiled to reflect the changes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The first step in editing a schema loaded into the SOM is to traverse the schema.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You should be familiar with traversing a schema using the SOM API before you attempt to edit a schema.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You should also be familiar with the pre- and post-schema-compilation properties of the Post-Schema-Compilation-Infoset (PSCI).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Editing an XML Schema</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this section, two code examples are provided, both of which edit the customer schema created in the <bpt id="p1">[</bpt>Building XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/building-xml-schemas.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first code example adds a new <ph id="ph1">`PhoneNumber`</ph> element to the <ph id="ph2">`Customer`</ph> element and the second code example adds a new <ph id="ph3">`Title`</ph> attribute to the <ph id="ph4">`FirstName`</ph> element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The first sample also uses the post-schema-compilation <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Elements%2A?displayProperty=fullName&gt;</ph> collection as the means of traversing the customer schema while the second code example uses the pre-schema-compilation <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A?displayProperty=fullName&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>PhoneNumber Element Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This first code example adds a new <ph id="ph1">`PhoneNumber`</ph> element to the <ph id="ph2">`Customer`</ph> element of the customer schema.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The code example edits the customer schema in the following steps.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Adds the customer schema to a new <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object and then compiles it.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Any schema validation warnings and errors encountered reading or compiling the schema are handled by the <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieves the compiled <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> by iterating over the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the schema is compiled, Post-Schema-Compilation-Infoset (PSCI) properties are accessible.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creates the <ph id="ph1">`PhoneNumber`</ph> element using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> class, the <ph id="ph3">`xs:string`</ph> simple type restriction using the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType&gt;</ph> and <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaSimpleTypeRestriction&gt;</ph> classes, adds a pattern facet to the <ph id="ph6">&lt;xref:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets%2A&gt;</ph> property of the restriction, and adds the restriction to the <ph id="ph7">&lt;xref:System.Xml.Schema.XmlSchemaSimpleType.Content%2A&gt;</ph> property of the simple type and the simple type to the <ph id="ph8">&lt;xref:System.Xml.Schema.XmlSchemaElement.SchemaType%2A&gt;</ph> of the <ph id="ph9">`PhoneNumber`</ph> element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Iterates over each <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement&gt;</ph> in the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaObjectTable.Values%2A&gt;</ph> collection of the post-schema-compilation <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchema.Elements%2A?displayProperty=fullName&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaElement.QualifiedName%2A&gt;</ph> of the element is <ph id="ph2">`"Customer"`</ph>, gets the complex type of the <ph id="ph3">`Customer`</ph> element using the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> class and the sequence particle of the complex type using the <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaSequence&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Adds the new <ph id="ph1">`PhoneNumber`</ph> element to the sequence containing the existing <ph id="ph2">`FirstName`</ph> and <ph id="ph3">`LastName`</ph> elements using the pre-schema-compilation <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaSequence.Items%2A&gt;</ph> collection of the sequence.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Finally, reprocesses and compiles the modified <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> object using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSet.Compile%2A&gt;</ph> methods of the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> class and writes it to the console.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following is the complete code example.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>XmlSchemaEditExample1#1<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Data/XmlSchemaEditExample1/CPP/XmlSchemaEditExample1.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>XmlSchemaEditExample1#1<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Data/XmlSchemaEditExample1/CS/XmlSchemaEditExample1.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>XmlSchemaEditExample1#1<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaEditExample1/VB/XmlSchemaEditExample1.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following is the modified customer schema created in the <bpt id="p1">[</bpt>Building XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/building-xml-schemas.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Title Attribute Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This second code example, adds a new <ph id="ph1">`Title`</ph> attribute to the <ph id="ph2">`FirstName`</ph> element of the customer schema.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the first code example, the type of the <ph id="ph1">`FirstName`</ph> element is <ph id="ph2">`xs:string`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`FirstName`</ph> element to have an attribute along with string content, its type must be changed to a complex type with a simple content extension content model.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The code example edits the customer schema in the following steps.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Adds the customer schema to a new <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> object and then compiles it.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Any schema validation warnings and errors encountered reading or compiling the schema are handled by the <ph id="ph1">&lt;xref:System.Xml.Schema.ValidationEventHandler&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Retrieves the compiled <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> object from the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> by iterating over the <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Because the schema is compiled, Post-Schema-Compilation-Infoset (PSCI) properties are accessible.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Creates a new complex type for the <ph id="ph1">`FirstName`</ph> element using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creates a new simple content extension, with a base type of <ph id="ph1">`xs:string`</ph>, using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSimpleContent&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSimpleContentExtension&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creates the new <ph id="ph1">`Title`</ph> attribute using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaAttribute&gt;</ph> class, with a <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName%2A&gt;</ph> of <ph id="ph4">`xs:string`</ph> and adds the attribute to the simple content extension.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Sets the content model of the simple content to the simple content extension and the content model of the complex type to the simple content.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Adds the new complex type to the pre-schema-compilation <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A?displayProperty=fullName&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Iterates over each <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> in the pre-schema-compilation <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A?displayProperty=fullName&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">`FirstName`</ph> element is not a global element in the schema, it is not available in the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchema.Elements%2A?displayProperty=fullName&gt;</ph> collections.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The code example locates the <ph id="ph1">`FirstName`</ph> element by first locating the <ph id="ph2">`Customer`</ph> element.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The first code example traversed the schema using the post-schema-compilation <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Elements%2A?displayProperty=fullName&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this sample, the pre-schema-compilation <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A?displayProperty=fullName&gt;</ph> collection is used to traverse the schema.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>While both collections provide access to the global elements in the schema, iterating through the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Items%2A&gt;</ph> collection is more time consuming because you must iterate over all global elements in the schema and it does not have any PSCI properties.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The PSCI collections (<ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema.Elements%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchema.Attributes%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchema.SchemaTypes%2A?displayProperty=fullName&gt;</ph>, and so on) provide direct access to their global elements, attributes, and types and their PSCI properties.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaObject&gt;</ph> is an element, whose <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement.QualifiedName%2A&gt;</ph> is <ph id="ph3">`"Customer"`</ph>, gets the complex type of the <ph id="ph4">`Customer`</ph> element using the <ph id="ph5">&lt;xref:System.Xml.Schema.XmlSchemaComplexType&gt;</ph> class and the sequence particle of the complex type using the <ph id="ph6">&lt;xref:System.Xml.Schema.XmlSchemaSequence&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Iterates over each <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaParticle&gt;</ph> in the pre-schema-compilation <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSequence.Items%2A?displayProperty=fullName&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchemaParticle&gt;</ph> is an element, who's <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaElement.QualifiedName%2A&gt;</ph> is <ph id="ph3">`"FirstName"`</ph>, sets the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaElement.SchemaTypeName%2A&gt;</ph> of the <ph id="ph5">`FirstName`</ph> element to the new <ph id="ph6">`FirstName`</ph> complex type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Finally, reprocesses and compiles the modified <ph id="ph1">&lt;xref:System.Xml.Schema.XmlSchema&gt;</ph> object using the <ph id="ph2">&lt;xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaSet.Compile%2A&gt;</ph> methods of the <ph id="ph4">&lt;xref:System.Xml.Schema.XmlSchemaSet&gt;</ph> class and writes it to the console.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following is the complete code example.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>XmlSchemaEditExample2#1<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Data/XmlSchemaEditExample2/CPP/XmlSchemaEditExample2.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>XmlSchemaEditExample2#1<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Data/XmlSchemaEditExample2/CS/XmlSchemaEditExample2.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>XmlSchemaEditExample2#1<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaEditExample2/VB/XmlSchemaEditExample2.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following is the modified customer schema created in the <bpt id="p1">[</bpt>Building XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/building-xml-schemas.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Schema Object Model Overview<ept id="p1">](../../../../docs/standard/data/xml/xml-schema-object-model-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reading and Writing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/reading-and-writing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Building XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/building-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Traversing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/traversing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Including or Importing XML Schemas<ept id="p1">](../../../../docs/standard/data/xml/including-or-importing-xml-schemas.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XmlSchemaSet for Schema Compilation<ept id="p1">](../../../../docs/standard/data/xml/xmlschemaset-for-schema-compilation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Post-Schema Compilation Infoset<ept id="p1">](../../../../docs/standard/data/xml/post-schema-compilation-infoset.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>