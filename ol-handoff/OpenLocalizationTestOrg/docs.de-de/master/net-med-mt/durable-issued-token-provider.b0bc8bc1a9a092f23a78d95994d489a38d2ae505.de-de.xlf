<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cda50b86283707636f9ee6ea8323931d25d37d34</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\durable-issued-token-provider.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7bb567ec05f28e1a5c7ae40fb62f126dda6cec3f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b9054ea0696a33bbeac2dcc01e7b9464425b65c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Durable Issued Token Provider | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Durable Issued Token Provider</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to implement a custom client issued token provider.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Discussion</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A token provider in <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> is used to supply credentials to the security infrastructure.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The token provider in general examines the target and issues appropriate credentials so that the security infrastructure can secure the message.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> ships with a <ph id="ph2">[!INCLUDE[infocard](../../../../includes/infocard-md.md)]</ph> token provider.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Custom token providers are useful in the following cases:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you have a credential store that the built-in token provider cannot operate with.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you want to provide your own custom mechanism for transforming the credentials from the point when the user provides the details to when the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client uses the credentials.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you are building a custom token.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This sample shows how to build a custom token provider that caches tokens issued by a Security Token Service (STS).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To summarize, this sample demonstrates the following:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How a client can be configured with a custom token provider.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>How issued tokens can be cached and provided to the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>How the server is authenticated by the client using the server's X.509 certificate.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This sample consists of a client console program (Client.exe), a security token service console program (Securitytokenservice.exe) and a service console program (Service.exe).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The service implements a contract that defines a request-reply communication pattern.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The contract is defined by the <ph id="ph1">`ICalculator`</ph> interface, which exposes math operations (add, subtract, multiply, and divide).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The client gets a security token from the Security Token Service (STS) and makes synchronous requests to the service for a given math operation and the service replies with the result.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Client activity is visible in the console window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The set-up procedure and build instructions for this sample are located at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This sample exposes the ICalculator contract using the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>wsHttpBinding&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/wshttpbinding.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The configuration of this binding on the client is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>On the <ph id="ph1">`security`</ph> element of <ph id="ph2">`wsFederationHttpBinding`</ph>, the <ph id="ph3">`mode`</ph> value configures which security mode should be used.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this sample, messages security is being used, which is why the <ph id="ph1">`message`</ph> element of <ph id="ph2">`wsFederationHttpBinding`</ph> is specified inside the <ph id="ph3">`security`</ph> element of <ph id="ph4">`wsFederationHttpBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`issuer`</ph> element of <ph id="ph2">`wsFederationHttpBinding`</ph> inside the <ph id="ph3">`message`</ph> element of <ph id="ph4">`wsFederationHttpBinding`</ph> specifies the address and binding for the Security Token Service that issues a security token to the client so that the client can authenticate to the Calculator service.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The configuration of this binding on the service is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>On the <ph id="ph1">`security`</ph> element of <ph id="ph2">`wsFederationHttpBinding`</ph>, the <ph id="ph3">`mode`</ph> value configures which security mode should be used.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this sample, messages security is being used, which is why the <ph id="ph1">`message`</ph> element of <ph id="ph2">`wsFederationHttpBinding`</ph> is specified inside the <ph id="ph3">`security`</ph> element of <ph id="ph4">`wsFederationHttpBinding`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`issuerMetadata`</ph> element of <ph id="ph2">`wsFederationHttpBinding`</ph> inside the <ph id="ph3">`message`</ph> element of <ph id="ph4">`wsFederationHttpBinding`</ph> specifies the address and identity for an endpoint that can be used to retrieve metadata for the Security Token Service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The behavior for the service is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`issuedTokenAuthentication`</ph> element inside the <ph id="ph2">`serviceCredentials`</ph> element allows the service to specify constraints on the tokens it allows clients to present during authentication.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This configuration specifies that tokens signed by a certificate whose Subject Name is CN=STS are accepted by the service.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Security Token Service exposes a single endpoint using the standard wsHttpBinding.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Security Token Service responds to request from clients for tokens and, provided the client authenticates using a Windows account, issues a token that contains the client's user name as a claim in the issued token.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>As part of creating the token, the Security Token Service signs the token using the private key associated with the CN=STS certificate.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In addition, it creates a symmetric key and encrypts it using the public key associated with the CN=localhost certificate.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In returning the token to the client, the Security Token Service also returns the symmetric key.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The client presents the issued token to the Calculator service, and proves that it knows the symmetric key by signing the message with that key.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Custom Client Credentials and Token Provider</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following steps show how to develop a custom token provider that caches issued tokens and integrate it with <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>: security.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To develop a custom token provider</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Write a custom token provider.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The sample implements a custom token provider that returns a security token retrieved from a cache.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>To perform this task, the custom token provider derives the <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.SecurityTokenProvider&gt;</ph> class and overrides the <ph id="ph2">&lt;xref:System.IdentityModel.Selectors.SecurityTokenProvider.GetTokenCore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This method tries to get a token from the cache, or if a token cannot be found in the cache, retrieves a token from the underlying provider and then caches that token.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In both cases the method returns a <ph id="ph1">`SecurityToken`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Write custom security token manager.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.SecurityTokenManager&gt;</ph> is used to create a <ph id="ph2">&lt;xref:System.IdentityModel.Selectors.SecurityTokenProvider&gt;</ph> for a specific <ph id="ph3">&lt;xref:System.IdentityModel.Selectors.SecurityTokenRequirement&gt;</ph> that is passed to it in the <ph id="ph4">`CreateSecurityTokenProvider`</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Security token manager is also used to create token authenticators and token serializers, but those are not covered by this sample.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this sample, the custom security token manager inherits from the <ph id="ph1">&lt;xref:System.ServiceModel.ClientCredentialsSecurityTokenManager&gt;</ph> class and overrides the <ph id="ph2">`CreateSecurityTokenProvider`</ph> method to return the custom token provider when the passed token requirements indicate that an issued token is requested.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Write a custom client credential.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A client credentials class is used to represent the credentials that are configured for the client proxy and creates the security token manager that is used to obtain token authenticators, token providers and token serializers.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Implement the token cache.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The sample implementation uses an abstract base class through which consumers of a given token cache interact with the cache.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For the client to use the custom client credential, the sample deletes the default client credential class and supplies the new client credential class.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Running the sample</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See the following instructions to run the sample.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When you run the sample, the request for the security token is shown in the Security Token Service console window.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The operation requests and responses are displayed in the client and service console windows.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Press ENTER in any of the console windows to shut down the application.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The Setup.cmd Batch File</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The Setup.cmd batch file included with this sample allows you to configure the server and security token service with relevant certificates to run a self-hosted application.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The batch file creates two certificates both in the CurrentUser/TrustedPeople certificate store.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The first certificate has a subject name of CN=STS and is used by the Security Token Service to sign the security tokens that it issues to the client.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The second certificate has a subject name of CN=localhost and is used by the Security Token Service to encrypt a secret so that the service can decrypt it.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Run the Setup.cmd file to create the required certificates.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To build the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Ensure that all the projects in the solution are built (Shared, RSTRSTR, Service, SecurityTokenService, and Client).</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Ensure that Service.exe and SecurityTokenService.exe are both running with administrator privileges.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Run Client.exe.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>To clean up after the sample</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Run Cleanup.cmd in the samples folder once you have finished running the sample.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>