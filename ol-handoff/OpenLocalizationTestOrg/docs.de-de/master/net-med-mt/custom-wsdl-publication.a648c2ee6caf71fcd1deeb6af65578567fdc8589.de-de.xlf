<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">526b1bb36f3a143535e6029eb1fd6eb9f0215859</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\custom-wsdl-publication.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1421c88bfc74955fe15bcf1f2e8b0d35a5ba9fd0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea4517c85f080707d4e533da76829b18d147cf16</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Custom WSDL Publication | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom WSDL Publication</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Implement a <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=fullName&gt;</ph> on a custom <ph id="ph2">&lt;xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName&gt;</ph> attribute to export attribute properties as WSDL annotations.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName&gt;</ph> to import the custom WSDL annotations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Implement <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceContractGenerationExtension?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Description.IOperationContractGenerationExtension?displayProperty=fullName&gt;</ph> on a custom contract behavior and a custom operation behavior, respectively, to write imported annotations as comments in the CodeDom for the imported contract and operation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> to download the WSDL, a <ph id="ph2">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName&gt;</ph> to import the WSDL using the custom WSDL importer, and the <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceContractGenerator?displayProperty=fullName&gt;</ph> to generate <ph id="ph4">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> client code with the WSDL annotations as /// and ''' comments in C# and Visual Basic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The setup procedure and build instructions for this sample are located at the end of this topic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Service</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The service in this sample is marked with two custom attributes.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first, the <ph id="ph1">`WsdlDocumentationAttribute`</ph>, accepts a string in the constructor and can be applied to provide a contract interface or operation with a string that describes its usage.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The second, <ph id="ph1">`WsdlParamOrReturnDocumentationAttribute`</ph>, can be applied to return values or parameters to describe those values in the operation.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example shows a service contract, <ph id="ph1">`ICalculator`</ph>, described using these attributes.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WsdlDocumentationAttribute`</ph> implements <ph id="ph2">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph>, so the attribute instances are added to the corresponding <ph id="ph4">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph> or <ph id="ph5">&lt;xref:System.ServiceModel.Description.OperationDescription&gt;</ph> when the service is opened.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The attribute also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension.ExportContract%28System.ServiceModel.Description.WsdlExporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29&gt;</ph> is called, the <ph id="ph2">&lt;xref:System.ServiceModel.Description.WsdlExporter&gt;</ph> that is used to export the metadata and the <ph id="ph3">&lt;xref:System.ServiceModel.Description.WsdlContractConversionContext&gt;</ph> that contains the service description objects are passed in as parameters enabling the modification of the exported metadata.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this sample, depending upon whether the export context object has a <ph id="ph1">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph> or an <ph id="ph2">&lt;xref:System.ServiceModel.Description.OperationDescription&gt;</ph>, a comment is extracted from the attribute using the text property and is added to the WSDL annotation element as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If an operation is being exported, the sample uses reflection to obtain any <ph id="ph1">`WsdlParamOrReturnDocumentationAttribute`</ph> values for parameters and return values and adds them to the WSDL annotation elements for that operation as follows.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The sample then publishes metadata in the standard way, using the following configuration file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Svcutil client</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This sample does not use Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The contract is provided in the generatedClient.cs file so that after the sample demonstrates custom WSDL import and code generation, the service can be invoked.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To use the following custom WSDL importer for this example, you can run Svcutil.exe and specify the <ph id="ph1">`/svcutilConfig`</ph> option, giving the path to the client configuration file used in this sample, which references the <ph id="ph2">`WsdlDocumentation.dll`</ph> library.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To load the <ph id="ph1">`WsdlDocumentationImporter`</ph>, however, Svuctil.exe must be able to locate and load the <ph id="ph2">`WsdlDocumentation.dll`</ph> library, which means either that it is registered in the global assembly cache, in the path, or is in the same directory as Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For a basic sample such as this, the easiest thing to do is to copy Svcutil.exe and the client configuration file into the same directory as <ph id="ph1">`WsdlDocumentation.dll`</ph> and run it from there.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Custom WSDL Importer</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The custom <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension&gt;</ph> object <ph id="ph2">`WsdlDocumentationImporter`</ph> also implements <ph id="ph3">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph> to be added to the imported ServiceEndpoints and <ph id="ph5">&lt;xref:System.ServiceModel.Description.IServiceContractGenerationExtension&gt;</ph> and <ph id="ph6">&lt;xref:System.ServiceModel.Description.IOperationContractGenerationExtension&gt;</ph> to be invoked to modify the code generation when the contract or operation code is being created.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>First, in the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension.ImportContract%28System.ServiceModel.Description.WsdlImporter%2CSystem.ServiceModel.Description.WsdlContractConversionContext%29&gt;</ph> method, the sample determines whether the WSDL annotation is at the contract or operation level, and adds itself as a behavior at the appropriate scope, passing the imported annotation text to its constructor.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Then, when the code is generated, the system invokes the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IServiceContractGenerationExtension.GenerateContract%28System.ServiceModel.Description.ServiceContractGenerationContext%29&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Description.IOperationContractGenerationExtension.GenerateOperation%28System.ServiceModel.Description.OperationContractGenerationContext%29&gt;</ph> methods, passing the appropriate context information.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The sample formats the custom WSDL annotations and inserts them as comments into the CodeDom.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The Client Application</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The client application loads the custom WSDL importer by specifying it in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Once the custom importer has been specified, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> metadata system loads the custom importer into any <ph id="ph2">&lt;xref:System.ServiceModel.Description.WsdlImporter&gt;</ph> created for that purpose.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This sample uses the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient&gt;</ph> to download the metadata, the <ph id="ph2">&lt;xref:System.ServiceModel.Description.WsdlImporter&gt;</ph> properly configured to import the metadata using the custom importer the sample creates, and the <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceContractGenerator&gt;</ph> to compile the modified contract information into both Visual Basic and C# client code that can be used in Visual Studio to support Intellisense or compiled into XML documentation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>