<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6ff9021ac39241f5da3579571317fcdb6aa52fb7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\best-practices-for-queued-communication.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e3864a42310895be4a6ced85b395ac2c8365484</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5e7f2c583b7b290c39b713e7335f1acc4c73e65</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Best Practices for Queued Communication | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Best Practices for Queued Communication</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides recommended practices for queued communication in <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following sections discuss recommended practices from a scenario perspective.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Fast, Best-Effort Queued Messaging</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For scenarios that require separation that queued messaging provides and fast, high-performance messaging with best-effort assurances, use a non-transactional queue and set the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In addition, you can choose not to incur the cost of disk writes by setting the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.Durable%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Security has implications on performance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Performance Considerations<ept id="p1">](../../../../docs/framework/wcf/feature-details/performance-considerations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Reliable End-to-End Queued Messaging</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following sections describe recommended practices for scenarios that require end-to-end reliable messaging.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Basic Reliable Transfer</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For end-to-end reliability, set the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.ExactlyOnce%2A&gt;</ph> property to <ph id="ph2">`true`</ph> to ensure transfer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.Durable%2A&gt;</ph> property can be set to <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph> depending on your requirements (the default is <ph id="ph4">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Generally, the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.Durable%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph> as part of end-to-end reliability.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compromise is a performance cost, but makes the message durable so that the message is not lost if a queue manager crashes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use of Transactions</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You must use transactions to ensure end-to-end reliability.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ExactlyOnce`</ph> assurances only ensure that messages are delivered to the target queue.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To ensure that the message is received, use transactions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Without transactions, if the service crashes, you lose the message that is being delivered but is actually delivered to the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use of Dead-letter Queues</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Dead-letter queues ensure that you are notified if a message fails to be delivered to the target queue.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use the system-provided dead-letter queue or a custom dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In general, using a custom dead-letter queue is best because it enables you to send dead-letter messages from one application into a single dead-letter queue.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Otherwise, all dead-letter messages that occur for all applications running on the system are delivered to a single queue.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each application must then search though the dead-letter queue to find the dead-letter messages that are relevant to that application.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Sometimes, using a custom dead-letter queue is not feasible, such as when using MSMQ 3.0.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Turning off dead-letter queues for end-to-end reliable communication is not recommended.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Using Dead-Letter Queues to Handle Message Transfer Failures<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-dead-letter-queues-to-handle-message-transfer-failures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use of Poison-Message Handling</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Poison-message handling provides the ability to recover from the failure to process messages.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When using the poison-message handling feature, ensure that the <ph id="ph1">&lt;xref:System.ServiceModel.MsmqBindingBase.ReceiveErrorHandling%2A&gt;</ph> property is set to the appropriate value.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Setting it to <ph id="ph1">&lt;xref:System.ServiceModel.ReceiveErrorHandling&gt;</ph> means the data is lost.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>On the other hand, setting it to <ph id="ph1">&lt;xref:System.ServiceModel.ReceiveErrorHandling&gt;</ph> faults the service host when it detects a poison message.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Using MSMQ 3.0, <ph id="ph1">&lt;xref:System.ServiceModel.ReceiveErrorHandling&gt;</ph> is the best option to avoid data loss and move the poison message out of the way.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Using MSMQ 4.0, <ph id="ph1">&lt;xref:System.ServiceModel.ReceiveErrorHandling&gt;</ph> is the recommended approach.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.ReceiveErrorHandling&gt;</ph> moves a poisoned message out of the queue so the service can continue to process new messages.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The poison-message service can then process the poison message separately.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Poison Message Handling<ept id="p1">](../../../../docs/framework/wcf/feature-details/poison-message-handling.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Achieving High Throughput</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To achieve high throughput on a single endpoint, use the following:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Transacted batching.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Transacted batching ensures that many messages can be read in a single transaction.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This optimizes transaction commits, increasing overall performance.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The cost of batching is that if a failure occurs in a single message within a batch, then the entire batch is rolled back and the messages must be processed one at a time until it is safe to batch again.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In most cases, poison messages are rare, so batching is the preferred way to increase system performance, particularly when you have other resource managers that participate in the transaction.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Batching Messages in a Transaction<ept id="p1">](../../../../docs/framework/wcf/feature-details/batching-messages-in-a-transaction.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Concurrency.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Concurrency increases throughput, but concurrency also affects contention to shared resources.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Concurrency<ept id="p1">](../../../../docs/framework/wcf/samples/concurrency.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Throttling.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For optimal performance, throttle the number of messages in the dispatcher pipeline.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For an example of how to do this, see <bpt id="p1">[</bpt>Throttling<ept id="p1">](../../../../docs/framework/wcf/samples/throttling.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When using batching, be aware that concurrency and throttling translate to concurrent batches.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To achieve higher throughput and availability, use a farm of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services that read from the queue.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This requires that all of these services expose the same contract on the same endpoint.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The farm approach works best for applications that have high production rates of messages because it enables a number of services to all read from the same queue.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When using farms, be aware that MSMQ 3.0 does not support remote transacted reads.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>MSMQ 4.0 does support remote transacted reads.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Batching Messages in a Transaction<ept id="p1">](../../../../docs/framework/wcf/feature-details/batching-messages-in-a-transaction.md)</ept> and <bpt id="p2">[</bpt>Differences in Queuing Features in Windows Vista, Windows Server 2003, and Windows XP<ept id="p2">](../../../../docs/framework/wcf/feature-details/diff-in-queue-in-vista-server-2003-windows-xp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Queuing with Unit of Work Semantics</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In some scenarios a group of messages in a queue may be related and, therefore, the ordering of these messages is significant.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In such scenarios, process a group of related messages together as a single unit: either all of the messages are processed successfully or none are.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To implement such behavior, use sessions with queues.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Grouping Queued Messages in a Session<ept id="p1">](../../../../docs/framework/wcf/feature-details/grouping-queued-messages-in-a-session.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Correlating Request-Reply Messages</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Though queues are typically one-way, in some scenarios you may want to correlate a reply received to a request sent earlier.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you require such correlation, it is recommended that you apply your own SOAP message header that contains correlation information with the message.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Typically, the sender attaches this header with the message, and the receiver, upon processing the message and replying back with a new message on a reply queue, attaches the sender's message header that contains the correlation information so that the sender can identify the reply message with the request message.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Integrating with Non-WCF Applications</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`MsmqIntegrationBinding`</ph> when integrating <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services or clients with non-<ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services or clients.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The non-<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> application can be an MSMQ application written using System.Messaging, COM+, <ph id="ph2">[!INCLUDE[vbprvb](../../../../includes/vbprvb-md.md)]</ph>, or C++.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`MsmqIntegrationBinding`</ph>, be aware of the following:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> message body is not the same as a MSMQ message body.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When sending a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> message using a queued binding, the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> message body is placed inside of a MSMQ message.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The MSMQ infrastructure is oblivious to this extra information; it sees only the MSMQ message.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MsmqIntegrationBinding`</ph> supports popular serialization types.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Based on the serialization type, the body type of the generic message, <ph id="ph1">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqMessage%601&gt;</ph>, takes different type parameters.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat&gt;</ph> requires <ph id="ph2">`MsmqMessage\&lt;byte[]&gt;`</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.MsmqIntegration.MsmqMessageSerializationFormat&gt;</ph> requires <ph id="ph4">`MsmqMessage&lt;Stream&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>With XML serialization, you can specify the known type using the <ph id="ph1">`KnownTypes`</ph> attribute on the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>behavior&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/behavior-of-servicebehaviors.md)</ept> element that is then used to determine how to deserialize the XML message.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Queuing in WCF<ept id="p1">](../../../../docs/framework/wcf/feature-details/queuing-in-wcf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Exchange Queued Messages with WCF Endpoints<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-exchange-queued-messages-with-wcf-endpoints.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Exchange Messages with WCF Endpoints and Message Queuing Applications<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-exchange-messages-with-wcf-endpoints-and-message-queuing-applications.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Grouping Queued Messages in a Session<ept id="p1">](../../../../docs/framework/wcf/feature-details/grouping-queued-messages-in-a-session.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Batching Messages in a Transaction<ept id="p1">](../../../../docs/framework/wcf/feature-details/batching-messages-in-a-transaction.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Dead-Letter Queues to Handle Message Transfer Failures<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-dead-letter-queues-to-handle-message-transfer-failures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Poison Message Handling<ept id="p1">](../../../../docs/framework/wcf/feature-details/poison-message-handling.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Differences in Queuing Features in Windows Vista, Windows Server 2003, and Windows XP<ept id="p1">](../../../../docs/framework/wcf/feature-details/diff-in-queue-in-vista-server-2003-windows-xp.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing Messages Using Transport Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/securing-messages-using-transport-security.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Securing Messages Using Message Security<ept id="p1">](../../../../docs/framework/wcf/feature-details/securing-messages-using-message-security.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Queued Messaging<ept id="p1">](../../../../docs/framework/wcf/feature-details/troubleshooting-queued-messaging.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>