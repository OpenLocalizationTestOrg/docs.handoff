<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">323c6584574b59f810f30bfc2863445a32145421</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\deployment\how-the-runtime-locates-assemblies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0139cef59e305a4cda61bdc3b474b001bf5a6a32</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca908f3143790aff192f19f83b3427e77b36f39c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How the Runtime Locates Assemblies | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How the Runtime Locates Assemblies</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To successfully deploy your .NET Framework application, you must understand how the common language runtime locates and binds to the assemblies that make up your application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By default, the runtime attempts to bind with the exact version of an assembly that the application was built with.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This default behavior can be overridden by configuration file settings.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The common language runtime performs a number of steps when attempting to locate an assembly and resolve an assembly reference.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each step is explained in the following sections.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The term probing is often used when describing how the runtime locates assemblies; it refers to the set of heuristics used to locate the assembly based on its name and culture.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can view binding information in the log file using the <bpt id="p1">[</bpt>Assembly Binding Log Viewer (Fuslogvw.exe)<ept id="p1">](../../../docs/framework/tools/fuslogvw-exe-assembly-binding-log-viewer.md)</ept>, which is included in the <ph id="ph1">[!INCLUDE[winsdklong](../../../includes/winsdklong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Initiating the Bind</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The process of locating and binding to an assembly begins when the runtime attempts to resolve a reference to another assembly.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This reference can be either static or dynamic.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The compiler records static references in the assembly manifest's metadata at build time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Dynamic references are constructed on the fly as a result of calling various methods, such as <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The preferred way to reference an assembly is to use a full reference, including the assembly name, version, culture, and public key token (if one exists).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The runtime uses this information to locate the assembly, following the steps described later in this section.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The runtime uses the same resolution process regardless of whether the reference is for a static or dynamic assembly.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also make a dynamic reference to an assembly by providing the calling method with only partial information about the assembly, such as specifying only the assembly name.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this case, only the application directory is searched for the assembly, and no other checking occurs.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You make a partial reference using any of the various methods for loading assemblies such as <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.AppDomain.Load%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Finally, you can make a dynamic reference using a method such as <bpt id="p1">[</bpt>System.Reflection.Assembly.Load<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.reflection.assembly.load.aspx)</ept> and provide only partial information; you then qualify the reference using the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>qualifyAssembly&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/runtime/qualifyassembly-element.md)</ept> element in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This element allows you to provide the full reference information (name, version, culture and, if applicable, the public key token) in your application configuration file instead of in your code.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You would use this technique if you wanted to fully qualify a reference to an assembly outside the application directory, or if you wanted to reference an assembly in the global assembly cache but you wanted the convenience of specifying the full reference in the configuration file instead of in your code.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This type of partial reference should not be used with assemblies that are shared among several applications.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because configuration settings are applied per application and not per assembly, a shared assembly using this type of partial reference would require each application using the shared assembly to have the qualifying information in its configuration file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The runtime uses the following steps to resolve an assembly reference:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determines the correct assembly version<ept id="p1">](#step1)</ept> by examining applicable configuration files, including the application configuration file, publisher policy file, and machine configuration file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the configuration file is located on a remote machine, the runtime must locate and download the application configuration file first.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Checks whether the assembly name has been bound to before<ept id="p1">](#step2)</ept> and, if so, uses the previously loaded assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If a previous request to load the assembly failed, the request is failed immediately without attempting to load the assembly.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The caching of assembly binding failures is new in the .NET Framework version 2.0.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Checks the global assembly cache<ept id="p1">](#step3)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the assembly is found there, the runtime uses this assembly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Probes for the assembly<ept id="p1">](#step4)</ept> using the following steps:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If configuration and publisher policy do not affect the original reference and if the bind request was created using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName&gt;</ph> method, the runtime checks for location hints.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If a codebase is found in the configuration files, the runtime checks only this location.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If this probe fails, the runtime determines that the binding request failed and no other probing occurs.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Probes for the assembly using the heuristics described in the <bpt id="p1">[</bpt>probing section<ept id="p1">](#step4)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the assembly is not found after probing, the runtime requests the Windows Installer to provide the assembly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This acts as an install-on-demand feature.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There is no version checking for assemblies without strong names, nor does the runtime check in the global assembly cache for assemblies without strong names.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Step 1: Examining the Configuration Files</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Assembly binding behavior can be configured at different levels based on three XML files:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Application configuration file.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Publisher policy file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Machine configuration file.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These files follow the same syntax and provide information such as binding redirects, the location of code, and binding modes for particular assemblies.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Each configuration file can contain an <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>assemblyBinding&gt; element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/assemblybinding-element-for-runtime.md)</ept> that redirects the binding process.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The child elements of the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>assemblyBinding&gt; element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/assemblybinding-element-for-runtime.md)</ept> include the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>dependentAssembly&gt; element<ept id="p2">](../../../docs/framework/configure-apps/file-schema/runtime/dependentassembly-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The children of <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>dependentAssembly&gt; element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/dependentassembly-element.md)</ept> include the <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>assemblyIdentity&gt; element<ept id="p2">](/visualstudio/deployment/assemblyidentity-element-clickonce-deployment)</ept>, the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>bindingRedirect&gt; element<ept id="p3">](../../../docs/framework/configure-apps/file-schema/runtime/bindingredirect-element.md)</ept>, and the <bpt id="p4">[</bpt><ph id="ph4">\&lt;</ph>codeBase&gt; element<ept id="p4">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Configuration information can be found in the three configuration files; not all elements are valid in all configuration files.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, binding mode and private path information can only be in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For a complete list of the information that is contained in each file, see <bpt id="p1">[</bpt>Configuring Apps by Using Configuration Files<ept id="p1">](../../../docs/framework/configure-apps/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Application Configuration File</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>First, the common language runtime checks the application configuration file for information that overrides the version information stored in the calling assembly's manifest.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The application configuration file can be deployed with an application, but is not required for application execution.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Usually the retrieval of this file is almost instantaneous, but in situations where the application base is on a remote computer, such as in an Internet Explorer Web-based scenario, the configuration file must be downloaded.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For client executables, the application configuration file resides in the same directory as the application's executable and has the same base name as the executable with a .config extension.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the configuration file for C:\Program Files\Myapp\Myapp.exe is C:\Program Files\Myapp\Myapp.exe.config.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In a browser-based scenario, the HTML file must use the <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>link&gt;<ept id="p1">**</ept> element to explicitly point to the configuration file.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following code provides a simple example of an application configuration file.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This example adds a <ph id="ph1">&lt;xref:System.Diagnostics.TextWriterTraceListener&gt;</ph> to the <ph id="ph2">&lt;xref:System.Diagnostics.Debug.Listeners%2A&gt;</ph> collection to enable recording debug information to a file.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Publisher Policy File</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Second, the runtime examines the publisher policy file, if one exists.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Publisher policy files are distributed by a component publisher as a fix or update to a shared component.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These files contain compatibility information issued by the publisher of the shared component that directs an assembly reference to a new version.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Unlike application and machine configuration files, publisher policy files are contained in their own assembly that must be installed in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following is an example of a Publisher Policy configuration file:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To create an assembly, you can use the <bpt id="p1">[</bpt>Al.exe (Assembly Linker)<ept id="p1">](../../../docs/framework/tools/al-exe-assembly-linker.md)</ept> tool with a command such as the following:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`compatkey.dat`</ph> is a strong-name key file.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This command creates a strong-named assembly you can place in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Publisher policy affects all applications that use a shared component.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The publisher policy configuration file overrides version information that comes from the application (that is, from the assembly manifest or from the application configuration file).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If there is no statement in the application configuration file to redirect the version specified in the assembly manifest, the publisher policy file overrides the version specified in the assembly manifest.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>However, if there is a redirecting statement in the application configuration file, publisher policy overrides that version rather than the one specified in the manifest.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A publisher policy file is used when a shared component is updated and the new version of the shared component should be picked up by all applications using that component.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The settings in the publisher policy file override settings in the application configuration file, unless the application configuration file enforces safe mode.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Safe Mode</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Publisher policy files are usually explicitly installed as part of a service pack or program update.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If there is any problem with the upgraded shared component, you can ignore the overrides in the publisher policy file using safe mode.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Safe mode is determined by the <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>publisherPolicy apply="yes<ept id="p1">**</ept>&amp;#124;<bpt id="p2">**</bpt>no"/&gt;<ept id="p2">**</ept> element, located only in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It specifies whether the publisher policy configuration information should be removed from the binding process.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Safe mode can be set for the entire application or for selected assemblies.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>That is, you can turn off the policy for all assemblies that make up the application, or turn it on for some assemblies but not others.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To selectively apply publisher policy to assemblies that make up an application, set <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>publisherPolicy apply<ph id="ph2">\=</ph>no/&gt;<ept id="p1">**</ept> and specify which assemblies you want to be affected using the <ph id="ph3">\&lt;</ph><bpt id="p2">**</bpt>dependentAssembly<ept id="p2">**</ept>&gt; element.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To apply publisher policy to all assemblies that make up the application, set <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>publisherPolicy apply<ph id="ph2">\=</ph>no/&gt;<ept id="p1">**</ept> with no dependent assembly elements.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more about configuration, see <bpt id="p1">[</bpt>Configuring Apps by using Configuration Files<ept id="p1">](../../../docs/framework/configure-apps/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Machine Configuration File</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Third, the runtime examines the machine configuration file.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This file, called Machine.config, resides on the local computer in the Config subdirectory of the root directory where the runtime is installed.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This file can be used by administrators to specify assembly binding restrictions that are local to that computer.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The settings in the machine configuration file take precedence over all other configuration settings; however, this does not mean that all configuration settings should be put in this file.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The version determined by the administrator policy file is final, and cannot be overridden.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Overrides specified in the Machine.config file affect all applications.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information about configuration files, see <bpt id="p1">[</bpt>Configuring Apps by using Configuration Files<ept id="p1">](../../../docs/framework/configure-apps/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Step 2: Checking for Previously Referenced Assemblies</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If the requested assembly has also been requested in previous calls, the common language runtime uses the assembly that is already loaded.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This can have ramifications when naming assemblies that make up an application.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For more information about naming assemblies, see <bpt id="p1">[</bpt>Assembly Names<ept id="p1">](../../../docs/framework/app-domains/assembly-names.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If a previous request for the assembly failed, subsequent requests for the assembly are failed immediately without attempting to load the assembly.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework version 2.0, assembly binding failures are cached, and the cached information is used to determine whether to attempt to load the assembly.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To revert to the behavior of the .NET Framework versions 1.0 and 1.1, which did not cache binding failures, include the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>disableCachingBindingFailures&gt; Element<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/disablecachingbindingfailures-element.md)</ept> in your configuration file.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Step 3: Checking the Global Assembly Cache</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For strong-named assemblies, the binding process continues by looking in the global assembly cache.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The global assembly cache stores assemblies that can be used by several applications on a computer.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>All assemblies in the global assembly cache must have strong names.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Step 4: Locating the Assembly through Codebases or Probing</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>After the correct assembly version has been determined by using the information in the calling assembly's reference and in the configuration files, and after it has checked in the global assembly cache (only for strong-named assemblies), the common language runtime attempts to find the assembly.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The process of locating an assembly involves the following steps:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element is found in the application configuration file, the runtime checks the specified location.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>If a match is found, that assembly is used and no probing occurs.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If the assembly is not found there, the binding request fails.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The runtime then probes for the referenced assembly using the rules specified later in this section.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If you have multiple versions of an assembly in a directory and you want to reference a particular version of that assembly, you must use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element instead of the <ph id="ph2">`privatePath`</ph> attribute of the <bpt id="p2">[</bpt><ph id="ph3">\&lt;</ph>probing&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/runtime/probing-element.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If you use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>probing&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/probing-element.md)</ept> element, the runtime stops probing the first time it finds an assembly that matches the simple assembly name referenced, whether it is a correct match or not.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If it is a correct match, that assembly is used.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If it is not a correct match, probing stops and binding fails.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Locating the Assembly through Codebases</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Codebase information can be provided by using a <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element in a configuration file.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This codebase is always checked before the runtime attempts to probe for the referenced assembly.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>If a publisher policy file containing the final version redirect also contains a <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element, that <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>codeBase&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element is the one that is used.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For example, if your application configuration file specifies a <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element, and a publisher policy file that is overriding the application information also specifies a <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>codeBase&gt;<ept id="p2">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element, the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>codeBase&gt;<ept id="p3">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element in the publisher policy file is used.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If no match is found at the location specified by the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element, the bind request fails and no further steps are taken.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>If the runtime determines that an assembly matches the calling assembly's criteria, it uses that assembly.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>When the file specified by the given <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element is loaded, the runtime checks to make sure that the name, version, culture, and public key match the calling assembly's reference.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Referenced assemblies outside the application's root directory must have strong names and must either be installed in the global assembly cache or specified using the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Locating the Assembly through Probing</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If there is no <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>codeBase&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/codebase-element.md)</ept> element in the application configuration file, the runtime probes for the assembly using four criteria:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Application base, which is the root location where the application is being executed.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Culture, which is the culture attribute of the assembly being referenced.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Name, which is the name of the referenced assembly.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`privatePath`</ph> attribute of the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>probing&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/probing-element.md)</ept> element, which is the user-defined list of subdirectories under the root location.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This location can be specified in the application configuration file and in managed code using the <ph id="ph1">&lt;xref:System.AppDomain.AppendPrivatePath%2A&gt;</ph> property for an application domain.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>When specified in managed code, the managed code <ph id="ph1">`privatePath`</ph> is probed first, followed by the path specified in the application configuration file.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Probing the Application Base and Culture Directories</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The runtime always begins probing in the application's base, which can be either a URL or the application's root directory on a computer.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the referenced assembly is not found in the application base and no culture information is provided, the runtime searches any subdirectories with the assembly name.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The directories probed include:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>[application base] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>[application base] / [assembly name] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If culture information is specified for the referenced assembly, only the following directories are probed:</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>[application base] / [culture] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>[application base] / [culture] / [assembly name] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Probing with the privatePath Attribute</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>In addition to the culture subdirectories and the subdirectories named for the referenced assembly, the runtime also probes directories specified using the <ph id="ph1">`privatePath`</ph> attribute of the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>probing&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/probing-element.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The directories specified using the <ph id="ph1">`privatePath`</ph> attribute must be subdirectories of the application's root directory.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The directories probed vary depending on whether culture information is included in the referenced assembly request.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The runtime stops probing the first time it finds an assembly that matches the simple assembly name referenced, whether it is a correct match or not.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>If it is a correct match, that assembly is used.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If it is not a correct match, probing stops and binding fails.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>If culture is included, the following directories are probed:</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>[application base] / [binpath] / [culture] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>[application base] / [binpath] / [culture] / [assembly name] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If culture information is not included, the following directories are probed:</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>[application base] / [binpath] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>[application base] / [binpath] / [assembly name] / [assembly name].dll</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Probing Examples</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Given the following information:</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Referenced assembly name: myAssembly</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Application root directory: http://www.code.microsoft.com</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>probing&gt;<ept id="p1">](../../../docs/framework/configure-apps/file-schema/runtime/probing-element.md)</ept> element in configuration file specifies: bin</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Culture: de</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The runtime probes the following URLs:</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>http://www.code.microsoft.com/de/myAssembly.dll</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>http://www.code.microsoft.com/de/myAssembly/myAssembly.dll</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>http://www.code.microsoft.com/bin/de/myAssembly.dll</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>http://www.code.microsoft.com/bin/de/myAssembly/myAssembly.dll</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Multiple Assemblies with the Same Name</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The following example shows how to configure multiple assemblies with the same name.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Other Locations Probed</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Assembly location can also be determined using the current binding context.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This most often occurs when the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName&gt;</ph> method is used and in COM interop scenarios.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If an assembly uses the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method to reference another assembly, the calling assembly's location is considered to be a hint about where to find the referenced assembly.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>If a match is found, that assembly is loaded.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If no match is found, the runtime continues with its search semantics and then queries the Windows Installer to provide the assembly.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If no assembly is provided that matches the binding request, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>This exception is a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> in managed code if a type was referenced, or a <ph id="ph2">&lt;xref:System.IO.FileNotFoundException&gt;</ph> if an assembly being loaded was not found.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>For example, if Assembly1 references Assembly2 and Assembly1 was downloaded from http://www.code.microsoft.com/utils, that location is considered to be a hint about where to find Assembly2.dll.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The runtime then probes for the assembly in http://www.code.microsoft.com/utils/Assembly2.dll and http://www.code.microsoft.com/utils/Assembly2/Assembly2.dll.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>If Assembly2 is not found at either of those locations, the runtime queries the Windows Installer.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Best Practices for Assembly Loading<ept id="p1">](../../../docs/framework/deployment/best-practices-for-assembly-loading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deployment<ept id="p1">](../../../docs/framework/deployment/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>