<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6f52676ecfc97708bb56e9c9f3532bb70100f8f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\connection-strings-and-configuration-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bd3c7cb479543c56b769d683f916e108562a86d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a413a1e2b9381faf4d5601580d16bb40f868b7c6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Connection Strings and Configuration Files | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Connection Strings and Configuration Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Embedding connection strings in your application's code can lead to security vulnerabilities and maintenance problems.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Unencrypted connection strings compiled into an application's source code can be viewed using the <bpt id="p1">[</bpt>Ildasm.exe (IL Disassembler)<ept id="p1">](../../../../docs/framework/tools/ildasm-exe-il-disassembler.md)</ept> tool.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Moreover, if the connection string ever changes, your application must be recompiled.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For these reasons, we recommend storing connection strings in an application configuration file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Working with Application Configuration Files</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Application configuration files contain settings that are specific to a particular application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, an ASP.NET application can have one or more <bpt id="p1">**</bpt>web.config<ept id="p1">**</ept> files, and a Windows application can have an optional <bpt id="p2">**</bpt>app.config<ept id="p2">**</ept> file.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Configuration files share common elements, although the name and location of a configuration file vary depending on the application's host.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The connectionStrings Section</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Connection strings can be stored as key/value pairs in the <bpt id="p1">**</bpt>connectionStrings<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>configuration<ept id="p2">**</ept> element of an application configuration file.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Child elements include <bpt id="p1">**</bpt>add<ept id="p1">**</ept>, <bpt id="p2">**</bpt>clear<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>remove<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following configuration file fragment demonstrates the schema and syntax for storing a connection string.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>name<ept id="p1">**</ept> attribute is a name that you provide to uniquely identify a connection string so that it can be retrieved at run time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>providerName<ept id="p1">**</ept> is the invariant name of the .NET Framework data provider, which is registered in the machine.config file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can save part of a connection string in a configuration file and use the <ph id="ph1">&lt;xref:System.Data.Common.DbConnectionStringBuilder&gt;</ph> class to complete it at run time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is useful in scenarios where you do not know elements of the connection string ahead of time, or when you do not want to save sensitive information in a configuration file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Connection String Builders<ept id="p1">](../../../../docs/framework/data/adonet/connection-string-builders.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using External Configuration Files</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>External configuration files are separate files that contain a fragment of a configuration file consisting of a single section.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The external configuration file is then referenced by the main configuration file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Storing the <bpt id="p1">**</bpt>connectionStrings<ept id="p1">**</ept> section in a physically separate file is useful in situations where connection strings may be edited after the application is deployed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the standard ASP.NET behavior is to restart an application domain when configuration files are modified, which results in state information being lost.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, modifying an external configuration file does not cause an application restart.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>External configuration files are not limited to ASP.NET; they can also be used by Windows applications.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In addition, file access security and permissions can be used to restrict access to external configuration files.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Working with external configuration files at run time is transparent, and requires no special coding.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To store connection strings in an external configuration file, create a separate file that contains only the <bpt id="p1">**</bpt>connectionStrings<ept id="p1">**</ept> section.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Do not include any additional elements, sections, or attributes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This example shows the syntax for an external configuration file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the main application configuration file, you use the <bpt id="p1">**</bpt>configSource<ept id="p1">**</ept> attribute to specify the fully qualified name and location of the external file.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This example refers to an external configuration file named <ph id="ph1">`connections.config`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Retrieving Connection Strings at Run Time</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The .NET Framework 2.0 introduced new classes in the <ph id="ph1">&lt;xref:System.Configuration&gt;</ph> namespace to simplify retrieving connection strings from configuration files at run time.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can programmatically retrieve a connection string by name or by provider name.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>machine.config<ept id="p1">**</ept> file also contains a <bpt id="p2">**</bpt>connectionStrings<ept id="p2">**</ept> section, which contains connection strings used by Visual Studio.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When retrieving connection strings by provider name from the <bpt id="p1">**</bpt>app.config<ept id="p1">**</ept> file in a Windows application, the connection strings in <bpt id="p2">**</bpt>machine.config<ept id="p2">**</ept> get loaded first, and then the entries from <bpt id="p3">**</bpt>app.config<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Adding <bpt id="p1">**</bpt>clear<ept id="p1">**</ept> immediately after the <bpt id="p2">**</bpt>connectionStrings<ept id="p2">**</ept> element removes all inherited references from the data structure in memory, so that only the connection strings defined in the local <bpt id="p3">**</bpt>app.config<ept id="p3">**</ept> file are considered.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Working with the Configuration Classes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Starting with the .NET Framework 2.0, <ph id="ph1">&lt;xref:System.Configuration.ConfigurationManager&gt;</ph> is used when working with configuration files on the local computer, replacing the deprecated <ph id="ph2">&lt;xref:System.Configuration.ConfigurationSettings&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Web.Configuration.WebConfigurationManager&gt;</ph> is used to work with ASP.NET configuration files.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It is designed to work with configuration files on a Web server, and allows programmatic access to configuration file sections such as <bpt id="p1">**</bpt>system.web<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Accessing configuration files at run time requires granting permissions to the caller; the required permissions depend on the type of application, configuration file, and location.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using the Configuration Classes<ept id="p1">](http://msdn.microsoft.com/library/98d2b386-baf6-4a17-974b-76e3b4c87acc)</ept> and <ph id="ph1">&lt;xref:System.Web.Configuration.WebConfigurationManager&gt;</ph> for ASP.NET applications, and <ph id="ph2">&lt;xref:System.Configuration.ConfigurationManager&gt;</ph> for Windows applications.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Configuration.ConnectionStringSettingsCollection&gt;</ph> to retrieve connection strings from application configuration files.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>It contains a collection of <ph id="ph1">&lt;xref:System.Configuration.ConnectionStringSettings&gt;</ph> objects, each of which represents a single entry in the <bpt id="p1">**</bpt>connectionStrings<ept id="p1">**</ept> section.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Its properties map to connection string attributes, allowing you to retrieve a connection string by specifying the name or the provider name.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The name of the connection string.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Maps to the <bpt id="p1">**</bpt>name<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The fully qualified provider name.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Maps to the <bpt id="p1">**</bpt>providerName<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The connection string.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Maps to the <bpt id="p1">**</bpt>connectionString<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example: Listing All Connection Strings</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This example iterates through the <ph id="ph1">`ConnectionStringSettings`</ph> collection and displays the <ph id="ph2">&lt;xref:System.Configuration.ConnectionStringSettings.Name%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Configuration.ConnectionStringSettings.ProviderName%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Configuration.ConnectionStringSettings.ConnectionString%2A&gt;</ph> properties in the console window.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>System.Configuration.dll is not included in all project types, and you may need to set a reference to it in order to use the configuration classes.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The name and location of a particular application configuration file varies by the type of application and the hosting process.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks ConnectionStringSettings.RetrieveFromConfig#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfig/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks ConnectionStringSettings.RetrieveFromConfig#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfig/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Example: Retrieving a Connection String by Name</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to retrieve a connection string from a configuration file by specifying its name.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The code creates a <ph id="ph1">&lt;xref:System.Configuration.ConnectionStringSettings&gt;</ph> object, matching the supplied input parameter to the <ph id="ph2">&lt;xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A&gt;</ph> name.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If no matching name is found, the function returns <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks ConnectionStringSettings.RetrieveFromConfigByName#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfigByName/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks ConnectionStringSettings.RetrieveFromConfigByName#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfigByName/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Example: Retrieving a Connection String by Provider Name</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to retrieve a connection string by specifying the provider-invariant name in the format <bpt id="p1">*</bpt>System.Data.ProviderName<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The code iterates through the <ph id="ph1">&lt;xref:System.Configuration.ConnectionStringSettingsCollection&gt;</ph> and returns the connection string for the first <ph id="ph2">&lt;xref:System.Configuration.ConnectionStringSettings.ProviderName%2A&gt;</ph> found.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If the provider name is not found, the function returns <ph id="ph1">`null`</ph> (<ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks ConnectionStringSettings.RetrieveFromConfigByProvider/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Encrypting Configuration File Sections Using Protected Configuration</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>ASP.NET 2.0 introduced a new feature, called <bpt id="p1">*</bpt>protected configuration<ept id="p1">*</ept>, that enables you to encrypt sensitive information in a configuration file.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Although primarily designed for ASP.NET, protected configuration can also be used to encrypt configuration file sections in Windows applications.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For a detailed description of the protected configuration capabilities, see <bpt id="p1">[</bpt>Encrypting Configuration Information Using Protected Configuration<ept id="p1">](http://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following configuration file fragment shows the <bpt id="p1">**</bpt>connectionStrings<ept id="p1">**</ept> section after it has been encrypted.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>configProtectionProvider<ept id="p1">**</ept> specifies the protected configuration provider used to encrypt and decrypt the connection strings.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>EncryptedData<ept id="p1">**</ept> section contains the cipher text.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When the encrypted connection string is retrieved at run time, the .NET Framework uses the specified provider to decrypt the <bpt id="p1">**</bpt>CipherValue<ept id="p1">**</ept> and make it available to your application.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You do not need to write any additional code to manage the decryption process.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Protected Configuration Providers</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Protected configuration providers are registered in the <bpt id="p1">**</bpt>configProtectedData<ept id="p1">**</ept> section of the <bpt id="p2">**</bpt>machine.config<ept id="p2">**</ept> file on the local computer, as shown in the following fragment, which shows the two protected configuration providers supplied with the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The values shown here have been truncated for readability.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can configure additional protected configuration providers by adding them to the <bpt id="p1">**</bpt>machine.config<ept id="p1">**</ept> file.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can also create your own protected configuration provider by inheriting from the <ph id="ph1">&lt;xref:System.Configuration.ProtectedConfigurationProvider&gt;</ph> abstract base class.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following table describes the two configuration files included with the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Provider</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Uses the RSA encryption algorithm to encrypt and decrypt data.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The RSA algorithm can be used for both public key encryption and digital signatures.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It is also known as "public key" or asymmetrical encryption because it employs two different keys.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>ASP.NET IIS Registration Tool (Aspnet_regiis.exe)<ept id="p1">](http://msdn.microsoft.com/library/6491c41e-e2b0-481f-9863-db3614d5f96b)</ept> to encrypt sections in a Web.config file and manage the encryption keys.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>ASP.NET decrypts the configuration file when it processes the file.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The identity of the ASP.NET application must have read access to the encryption key that is used to encrypt and decrypt the encrypted sections.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Uses the Windows Data Protection API (DPAPI) to encrypt configuration sections.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>It uses the Windows built-in cryptographic services and can be configured for either machine-specific or user-account-specific protection.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Machine-specific protection is useful for multiple applications on the same server that need to share information.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>User-account-specific protection can be used with services that run with a specific user identity, such as a shared hosting environment.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Each application runs under a separate identity which restricts access to resources such as files and databases.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Both providers offer strong encryption of data.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>However, if you are planning to use the same encrypted configuration file on multiple servers, such as a Web farm, only the <ph id="ph1">`RsaProtectedConfigurationProvider`</ph> enables you to export the encryption keys used to encrypt the data and import them on another server.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Importing and Exporting Protected Configuration RSA Key Containers<ept id="p1">](http://msdn.microsoft.com/library/f3022b39-f17f-48c1-b067-025eab0ce8bc)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Using the Configuration Classes</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration&gt;</ph> namespace provides classes to work with configuration settings programmatically.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.ConfigurationManager&gt;</ph> class provides access to machine, application, and user configuration files.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you are creating an ASP.NET application, you can use the <ph id="ph1">&lt;xref:System.Web.Configuration.WebConfigurationManager&gt;</ph> class, which provides the same functionality while also allowing you to access settings that are unique to ASP.NET applications, such as those found in <bpt id="p1">**</bpt><ph id="ph2">\&lt;</ph>system.web&gt;<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Cryptography&gt;</ph> namespace contains classes that provide additional options for encrypting and decrypting data.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Use these classes if you require cryptographic services that are not available using protected configuration.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Some of these classes are wrappers for the unmanaged Microsoft CryptoAPI, while others are purely managed implementations.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Cryptographic Services<ept id="p1">](http://msdn.microsoft.com/en-us/68a1e844-c63c-44af-9247-f6716eb23781)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>App.config Example</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to toggle encrypting the <bpt id="p1">**</bpt>connectionStrings<ept id="p1">**</ept> section in an <bpt id="p2">**</bpt>app.config<ept id="p2">**</ept> file for a Windows application.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In this example, the procedure takes the name of the application as an argument, for example, "MyApplication.exe".</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>app.config<ept id="p1">**</ept> file will then be encrypted and copied to the folder that contains the executable under the name of "MyApplication.exe.config".</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The connection string can only be decrypted on the computer on which it was encrypted.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The code uses the <ph id="ph1">&lt;xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A&gt;</ph> method to open the <bpt id="p1">**</bpt>app.config<ept id="p1">**</ept> file for editing, and the <ph id="ph2">&lt;xref:System.Configuration.ConfigurationManager.GetSection%2A&gt;</ph> method returns the <bpt id="p2">**</bpt>connectionStrings<ept id="p2">**</ept> section.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The code then checks the <ph id="ph1">&lt;xref:System.Configuration.SectionInformation.IsProtected%2A&gt;</ph> property, calling the <ph id="ph2">&lt;xref:System.Configuration.SectionInformation.ProtectSection%2A&gt;</ph> to encrypt the section if it is not encrypted.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.SectionInformation.UnprotectSection%2A&gt;</ph> method is invoked to decrypt the section.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Configuration.Configuration.Save%2A&gt;</ph> method completes the operation and saves the changes.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You must set a reference to <ph id="ph1">`System.Configuration.dll`</ph> in your project for the code to run.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks ConnectionStrings.Encrypt#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks ConnectionStrings.Encrypt/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks ConnectionStrings.Encrypt#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks ConnectionStrings.Encrypt/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Web.config Example</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">&lt;xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A&gt;</ph> method of the <ph id="ph2">`WebConfigurationManager`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Note that in this case you can supply the relative path to the <bpt id="p1">**</bpt>Web.config<ept id="p1">**</ept> file by using a tilde.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The code requires a reference to the <ph id="ph1">`System.Web.Configuration`</ph> class.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataWorks ConnectionStringsWeb.Encrypt#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks ConnectionStringsWeb.Encrypt/CS/source.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DataWorks ConnectionStringsWeb.Encrypt#1<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks ConnectionStringsWeb.Encrypt/VB/source.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>For more information securing ASP.NET applications, see <bpt id="p1">[</bpt>NIB: ASP.NET Security<ept id="p1">](http://msdn.microsoft.com/en-us/04b37532-18d9-40b4-8e5f-ee09a70b311d)</ept> and <bpt id="p2">[</bpt>ASP.NET 2.0 Security Practices at a Glance<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=59997)</ept> on the ASP.NET Developer Center.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Connection String Builders<ept id="p1">](../../../../docs/framework/data/adonet/connection-string-builders.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Protecting Connection Information<ept id="p1">](../../../../docs/framework/data/adonet/protecting-connection-information.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using the Configuration Classes<ept id="p1">](http://msdn.microsoft.com/library/98d2b386-baf6-4a17-974b-76e3b4c87acc)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Configuring Apps<ept id="p1">](../../../../docs/framework/configure-apps/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ASP.NET Web Site Administration<ept id="p1">](http://msdn.microsoft.com/library/1298034b-5f7d-464d-abd1-ad9e6b3eeb7e)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>