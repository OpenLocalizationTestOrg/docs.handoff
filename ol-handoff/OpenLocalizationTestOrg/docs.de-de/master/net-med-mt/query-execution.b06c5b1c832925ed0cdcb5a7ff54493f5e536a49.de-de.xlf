<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="query-execution.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6794837a0c0a0a67bc6b0275c6e2fc2d0817da0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\query-execution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">273dfd1c0fd6c302ef7aafd02d263a5c14c8f15c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c1c5365432becc52c76fb5b55e98211204ea489</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Query Execution | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Query Execution</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>After a LINQ query is created by a user, it is converted to a command tree.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A command tree is a representation of a query that is compatible with the Entity Framework.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The command tree is then executed against the data source.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>At query execution time, all query expressions (that is, all components of the query) are evaluated, including those expressions that are used in result materialization.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>At what point query expressions are executed can vary.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>LINQ queries are always executed when the query variable is iterated over, not when the query variable is created.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>deferred execution<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also force a query to execute immediately, which is useful for caching query results.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is described later in this topic.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When a LINQ to Entities query is executed, some expressions in the query might be executed on the server and some parts might be executed locally on the client.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Client-side evaluation of an expression takes place before the query is executed on the server.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If an expression is evaluated on the client, the result of that evaluation is substituted for the expression in the query, and the query is then executed on the server.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because queries are executed on the data source, the data source configuration overrides the behavior specified in the client.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, null value handling and numerical precision depend on the server settings.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Any exceptions thrown during query execution on the server are passed directly up to the client.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Deferred query execution</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In a query that returns a sequence of values, the query variable itself never holds the query results and only stores the query commands.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Execution of the query is deferred until the query variable is iterated over in a <ph id="ph1">`foreach`</ph> or <ph id="ph2">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This is known as <bpt id="p1">*</bpt>deferred execution<ept id="p1">*</ept>; that is, query execution occurs some time after the query is constructed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This means that you can execute a query as frequently as you want to.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is useful when, for example, you have a database that is being updated by other applications.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In your application, you can create a query to retrieve the latest information and repeatedly execute the query, returning the updated information every time.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Deferred execution enables multiple queries to be combined or a query to be extended.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When a query is extended, it is modified to include the new operations, and the eventual execution will reflect the changes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the following example, the first query returns all the products.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The second query extends the first by using <ph id="ph1">`Where`</ph> to return all the products of size "L":</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>After a query has been executed all successive queries will use the in-memory LINQ operators.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Iterating over the query variable by using a <ph id="ph1">`foreach`</ph> or <ph id="ph2">`For Each`</ph> statement or by calling one of the LINQ conversion operators will cause immediate execution.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These conversion operators include the following: <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.ToLookup%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Linq.Enumerable.ToDictionary%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Immediate Query Execution</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In contrast to the deferred execution of queries that produce a sequence of values, queries that return a singleton value are executed immediately.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Some examples of singleton queries are <ph id="ph1">&lt;xref:System.Linq.Enumerable.Average%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Linq.Enumerable.First%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These execute immediately because the query must produce a sequence to calculate the singleton result.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can also force immediate execution.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is useful when you want to cache the results of a query.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To force immediate execution of a query that does not produce a singleton value, you can call the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Linq.Enumerable.ToDictionary%2A&gt;</ph> method, or the <ph id="ph3">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> method on a query or query variable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> method to immediately evaluate a sequence into an array.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You could also force execution by putting the <ph id="ph1">`foreach`</ph> or <ph id="ph2">`For Each`</ph> loop immediately after the query expression, but by calling <ph id="ph3">&lt;xref:System.Linq.Enumerable.ToList%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Linq.Enumerable.ToArray%2A&gt;</ph> you cache all the data in a single collection object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Store Execution</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In general, expressions in LINQ to Entities are evaluated on the server, and the behavior of the expression should not be expected to follow common language runtime (CLR) semantics, but those of the data source.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>There are exceptions to this, however, such as when the expression is executed on the client.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This could cause unexpected results, for example when the server and client are in different time zones.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Some expressions in the query might be executed on the client.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In general, most query execution is expected to occur on the server.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Aside from methods executed against query elements mapped to the data source, there are often expressions in the query that can be executed locally.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Local execution of a query expression yields a value that can be used in the query execution or result construction.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Certain operations are always executed on the client, such as binding of values, sub expressions, sub queries from closures, and materialization of objects into query results.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The net effect of this is that these elements (for example, parameter values) cannot be updated during the execution.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Anonymous types can be constructed inline on the data source, but should not be assumed to do so.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Inline groupings can be constructed in the data source, as well, but this should not be assumed in every instance.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In general, it is best not to make any assumptions about what is constructed on the server.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This section describes the scenarios in which code is executed locally on the client.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For more information about which types of expressions are executed locally, see <bpt id="p1">[</bpt>Expressions in LINQ to Entities Queries<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/expressions-in-linq-to-entities-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Literals and Parameters</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Local variables, such as the <ph id="ph1">`orderID`</ph> variable in the following example, are evaluated on the client.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Method parameters are also evaluated on the client.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`orderID`</ph> parameter passed into the <ph id="ph2">`MethodParameterExample`</ph> method, below, is an example.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Casting Literals on the Client</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Casting from <ph id="ph1">`null`</ph> to a CLR type is executed on the client:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Casting to a type, such as a nullable <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>, is executed on the client:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Constructors for Literals</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>New CLR types that can be mapped to conceptual model types are executed on the client:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>New arrays are also executed on the client.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Store Exceptions</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Any store errors that are encountered during query execution are passed up to the client, and are not mapped or handled.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Store Configuration</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When the query executes on the store, the store configuration overrides all client behaviors, and store semantics are expressed for all operations and expressions.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This can result in a difference in behavior between CLR and store execution in areas such as null comparisons, GUID ordering, precision and accuracy of operations involving non-precise data types (such as floating point types or <ph id="ph1">&lt;xref:System.DateTime&gt;</ph>), and string operations.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It is important to keep this in mind when examining query results.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, the following are some differences in behavior between the CLR and SQL Server:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>SQL Server orders GUIDs differently than the CLR.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>There can also be differences in result precision when dealing with the Decimal type on SQL Server.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This is due to the fixed precision requirements of the SQL Server decimal type.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, the average of <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> values 0.0, 0.0, and 1.0 is 0.3333333333333333333333333333 in memory on the client, but 0.333333 in the store (based on the default precision for SQL Server’s decimal type).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Some string comparison operations are also handled differently in SQL Server than in the CLR.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>String comparison behavior depends on the collation settings on the server.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Function or method calls, when included in a LINQ to Entities query, are mapped to canonical functions in the Entity Framework, which are then translated to Transact-SQL and executed on the SQL Server database.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>There are cases when the behavior these mapped functions exhibit might differ from the implementation in the base class libraries.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, calling the <ph id="ph1">&lt;xref:System.String.Contains%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.String.StartsWith%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.String.EndsWith%2A&gt;</ph> methods with an empty string as a parameter will return <ph id="ph4">`true`</ph> when executed in the CLR, but will return <ph id="ph5">`false`</ph> when executed in SQL Server.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.String.EndsWith%2A&gt;</ph> method can also return different results because SQL Server considers two strings to be equal if they only differ in trailing white space, whereas the CLR considers them to be not equal.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This is illustrated by the following example:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>