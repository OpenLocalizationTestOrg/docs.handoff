<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aff5f9a73b6d3203ca81de82b8fae6b16a3783ff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\network-programming\making-asynchronous-requests.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b1e098de698e32c4b2a744555bd3f9bf33bc2cf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aff18034f98daefd73f113dc7a3b5ca922fb7b9e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Making Asynchronous Requests | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Making Asynchronous Requests</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net&gt;</ph> classes use the .NET Framework's standard asynchronous programming model for asynchronous access to Internet resources.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Net.WebRequest.BeginGetResponse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.WebRequest.EndGetResponse%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Net.WebRequest&gt;</ph> class start and complete asynchronous requests for an Internet resource.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using synchronous calls in asynchronous callback methods can result in severe performance penalties.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Internet requests made with <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> and its descendants must use <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A?displayProperty=fullName&gt;</ph> to read the stream returned by the <ph id="ph2">&lt;xref:System.Net.WebResponse.GetResponseStream%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following sample code demonstrates how to use asynchronous calls with the <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The sample is a console program that takes a URI from the command line, requests the resource at the URI, and then prints data to the console as it is received from the Internet.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The program defines two classes for its own use, the <bpt id="p1">**</bpt>RequestState<ept id="p1">**</ept> class, which passes data across asynchronous calls, and the <bpt id="p2">**</bpt>ClientGetAsync<ept id="p2">**</ept> class, which implements the asynchronous request to an Internet resource.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RequestState<ept id="p1">**</ept> class preserves the state of the request across calls to the asynchronous methods that service the request.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It contains <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> and <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> instances that contain the current request to the resource and the stream received in response, a buffer that contains the data currently received from the Internet resource, and a <ph id="ph2">&lt;xref:System.Text.StringBuilder&gt;</ph> that contains the complete response.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>RequestState<ept id="p1">**</ept>is passed as the <bpt id="p2">*</bpt>state<ept id="p2">*</ept> parameter when the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> method is registered with <bpt id="p3">**</bpt>WebRequest.BeginGetResponse<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ClientGetAsync<ept id="p1">**</ept> class implements an asynchronous request to an Internet resource and writes the resulting response to the console.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It contains the methods and properties described in the following list.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`allDone`</ph> property contains an instance of the <ph id="ph2">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class that signals the completion of the request.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Main()`</ph> method reads the command line and begins the request for the specified Internet resource.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It creates the <bpt id="p1">**</bpt>WebRequest<ept id="p1">**</ept> <ph id="ph1">`wreq`</ph> and the <bpt id="p2">**</bpt>RequestState<ept id="p2">**</ept> <ph id="ph2">`rs`</ph>, calls <bpt id="p3">**</bpt>BeginGetResponse<ept id="p3">**</ept> to begin processing the request, and then calls the <ph id="ph3">`allDone.WaitOne()`</ph>method so that the application will not exit until the callback is complete.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After the response is read from the Internet resource, <ph id="ph1">`Main()`</ph> writes it to the console and the application ends.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`showusage()`</ph> method writes an example command line on the console.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is called by <ph id="ph1">`Main()`</ph> when no URI is provided on the command line.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RespCallBack()`</ph> method implements the asynchronous callback method for the Internet request.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It creates the <bpt id="p1">**</bpt>WebResponse<ept id="p1">**</ept> instance containing the response from the Internet resource, gets the response stream, and then starts reading the data from the stream asynchronously.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReadCallBack()`</ph> method implements the asynchronous callback method for reading the response stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It transfers data received from the Internet resource into the <bpt id="p1">**</bpt>ResponseData<ept id="p1">**</ept> property of the <bpt id="p2">**</bpt>RequestState<ept id="p2">**</ept> instance, then starts another asynchronous read of the response stream until no more data is returned.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Once all the data has been read, <ph id="ph1">`ReadCallBack()`</ph> closes the response stream and calls the <ph id="ph2">`allDone.Set()`</ph> method to indicate that the entire response is present in <bpt id="p1">**</bpt>ResponseData<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It is critical that all network streams are closed.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you do not close each request and response stream, your application will run out of connections to the server and be unable to process additional requests.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Requesting Data<ept id="p1">](../../../docs/framework/network-programming/requesting-data.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>