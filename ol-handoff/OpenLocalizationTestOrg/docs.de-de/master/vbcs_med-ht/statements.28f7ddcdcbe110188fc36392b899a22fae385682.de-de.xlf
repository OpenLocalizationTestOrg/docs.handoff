<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cfbd607f614bd8d287dd33f08dd47b12fa651ced</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\statements-expressions-operators\statements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ebf85ae5c3540f06d6790160195933e3784bad87</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8eeda24d14ba236af453f0913b223fab13026afc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Statements (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Statements (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The actions that a program takes are expressed in statements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Common actions include declaring variables, assigning values, calling methods, looping through collections, and branching to one or another block of code, depending on a given condition.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The order in which statements are executed in a program is called the flow of control or flow of execution.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The flow of control may vary every time that a program is run, depending on how the program reacts to input that it receives at run time.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A statement can consist of a single line of code that ends in a semicolon, or a series of single-line statements in a block.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A statement block is enclosed in {} brackets and can contain nested blocks.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following code shows two examples of single-line statements, and a multi-line statement block:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#1<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Types of Statements</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following table lists the various types of statements in C# and their associated keywords, with links to topics that include more information:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Category</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>C# keywords / notes</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Declaration statements</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A declaration statement introduces a new variable or constant.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A variable declaration can optionally assign a value to the variable.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a constant declaration, the assignment is required.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#23<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Expression statements</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Expression statements that calculate a value must store the value in a variable.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#24<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Selection statements<ept id="p1">](../../../csharp/language-reference/keywords/selection-statements.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Selection statements enable you to branch to different sections of code, depending on one or more specified conditions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>if<ept id="p1">](../../../csharp/language-reference/keywords/if-else.md)</ept>, <bpt id="p2">[</bpt>else<ept id="p2">](../../../csharp/language-reference/keywords/if-else.md)</ept>, <bpt id="p3">[</bpt>switch<ept id="p3">](../../../csharp/language-reference/keywords/switch.md)</ept>, <bpt id="p4">[</bpt>case<ept id="p4">](../../../csharp/language-reference/keywords/switch.md)</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iteration statements<ept id="p1">](../../../csharp/language-reference/keywords/iteration-statements.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Iteration statements enable you to loop through collections like arrays, or perform the same set of statements repeatedly until a specified condition is met.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>do<ept id="p1">](../../../csharp/language-reference/keywords/do.md)</ept>, <bpt id="p2">[</bpt>for<ept id="p2">](../../../csharp/language-reference/keywords/for.md)</ept>, <bpt id="p3">[</bpt>foreach<ept id="p3">](../../../csharp/language-reference/keywords/foreach-in.md)</ept>, <bpt id="p4">[</bpt>in<ept id="p4">](../../../csharp/language-reference/keywords/foreach-in.md)</ept>, <bpt id="p5">[</bpt>while<ept id="p5">](../../../csharp/language-reference/keywords/while.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Jump statements<ept id="p1">](../../../csharp/language-reference/keywords/jump-statements.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Jump statements transfer control to another section of code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>break<ept id="p1">](../../../csharp/language-reference/keywords/break.md)</ept>, <bpt id="p2">[</bpt>continue<ept id="p2">](../../../csharp/language-reference/keywords/continue.md)</ept>, <bpt id="p3">[</bpt>default<ept id="p3">](../../../csharp/language-reference/keywords/switch.md)</ept>, <bpt id="p4">[</bpt>goto<ept id="p4">](../../../csharp/language-reference/keywords/goto.md)</ept>, <bpt id="p5">[</bpt>return<ept id="p5">](../../../csharp/language-reference/keywords/return.md)</ept>, <bpt id="p6">[</bpt>yield<ept id="p6">](../../../csharp/language-reference/keywords/yield.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception handling statements<ept id="p1">](../../../csharp/language-reference/keywords/exception-handling-statements.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Exception handling statements enable you to gracefully recover from exceptional conditions that occur at run time.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>throw<ept id="p1">](../../../csharp/language-reference/keywords/throw.md)</ept>, <bpt id="p2">[</bpt>try-catch<ept id="p2">](../../../csharp/language-reference/keywords/try-catch.md)</ept>, <bpt id="p3">[</bpt>try-finally<ept id="p3">](../../../csharp/language-reference/keywords/try-finally.md)</ept>, <bpt id="p4">[</bpt>try-catch-finally<ept id="p4">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Checked and unchecked<ept id="p1">](../../../csharp/language-reference/keywords/checked-and-unchecked.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Checked and unchecked statements enable you to specify whether numerical operations are allowed to cause an overflow when the result is stored in a variable that is too small to hold the resulting value.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>checked<ept id="p1">](../../../csharp/language-reference/keywords/checked.md)</ept> and <bpt id="p2">[</bpt>unchecked<ept id="p2">](../../../csharp/language-reference/keywords/unchecked.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>he <ph id="ph1">`await`</ph> statement</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you mark a method with the <bpt id="p1">[</bpt>async<ept id="p1">](../../../csharp/language-reference/keywords/async.md)</ept> modifier, you can use the <bpt id="p2">[</bpt>await<ept id="p2">](../../../csharp/language-reference/keywords/await.md)</ept> operator in the method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When control reaches an <ph id="ph1">`await`</ph> expression in the async method, control returns to the caller, and progress in the method is suspended until the awaited task completes.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When the task is complete, execution can resume in the method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For a simple example, see the "Async Methods" section of <bpt id="p1">[</bpt>Methods<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/methods.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous Programming with async and await<ept id="p1">](../../../csharp/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`yield return`</ph> statement</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An iterator performs a custom iteration over a collection, such as a list or an array.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An iterator uses the <bpt id="p1">[</bpt>yield return<ept id="p1">](../../../csharp/language-reference/keywords/yield.md)</ept> statement to return each element one at a time.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`yield return`</ph> statement is reached, the current location in code is remembered.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Execution is restarted from that location when the iterator is called the next time.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`fixed`</ph> statement</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The fixed statement prevents the garbage collector from relocating a movable variable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>fixed<ept id="p1">](../../../csharp/language-reference/keywords/fixed-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> statement</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The lock statement enables you to limit access to blocks of code to only one thread at a time.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>lock<ept id="p1">](../../../csharp/language-reference/keywords/lock-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Labeled statements</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can give a statement a label and then use the <bpt id="p1">[</bpt>goto<ept id="p1">](../../../csharp/language-reference/keywords/goto.md)</ept> keyword to jump to the labeled statement.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(See the example in the following row.)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The empty statement</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The empty statement consists of a single semicolon.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>It does nothing and can be used in places where a statement is required but no action needs to be performed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following examples show two uses for an empty statement:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#25<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Embedded Statements</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Some statements, including <bpt id="p1">[</bpt>do<ept id="p1">](../../../csharp/language-reference/keywords/do.md)</ept>, <bpt id="p2">[</bpt>while<ept id="p2">](../../../csharp/language-reference/keywords/while.md)</ept>, <bpt id="p3">[</bpt>for<ept id="p3">](../../../csharp/language-reference/keywords/for.md)</ept>, and <bpt id="p4">[</bpt>foreach<ept id="p4">](../../../csharp/language-reference/keywords/foreach-in.md)</ept>, always have an embedded statement that follows them.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This embedded statement may be either a single statement or multiple statements enclosed by {} brackets in a statement block.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Even single-line embedded statements can be enclosed in {} brackets, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#26<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An embedded statement that is not enclosed in {} brackets cannot be a declaration statement or a labeled statement.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This is shown in the following example:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#27<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Put the embedded statement in a block to fix the error:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#28<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_7.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Nested Statement Blocks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Statement blocks can be nested, as shown in the following code:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#29<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_8.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Unreachable Statements</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the compiler determines that the flow of control can never reach a particular statement under any circumstances, it will produce warning CS0162, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideStatements#22<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/statements_9.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Statement Keywords<ept id="p1">](../../../csharp/language-reference/keywords/statement-keywords.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Expressions<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/expressions.md)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators<ept id="p1">](../../../csharp/programming-guide/statements-expressions-operators/operators.md)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>