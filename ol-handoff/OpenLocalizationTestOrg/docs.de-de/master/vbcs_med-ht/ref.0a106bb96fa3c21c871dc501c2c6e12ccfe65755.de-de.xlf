<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">353abf8a0c852acbbb2949f9640c1465dec8593b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\ref.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73b0c5aa387b4f1133738239d765d65a2a391105</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">300db80909f4493bb63a4c16f2d63d24d53225fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ref (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ref (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ref`</ph> keyword causes an argument to be passed by reference, not by value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The effect of passing by reference is that any change to the parameter in the called method is reflected in the calling method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, if the caller passes a local variable expression or an array element access expression, and the called method replaces the object to which the ref parameter refers, then the callerâ€™s local variable or the array element now refer to the new object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Do not confuse the concept of passing by reference with the concept of reference types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The two concepts are not the same.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A method parameter can be modified by <ph id="ph1">`ref`</ph> regardless of whether it is a value type or a reference type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There is no boxing of a value type when it is passed by reference.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`ref`</ph> parameter, both the method definition and the calling method must explicitly use the <ph id="ph2">`ref`</ph> keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#6<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/ref_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An argument that is passed to a <ph id="ph1">`ref`</ph> parameter must be initialized before it is passed.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This differs from <ph id="ph1">`out`</ph> parameters, whose arguments do not have to be explicitly initialized before they are passed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>out<ept id="p1">](../../../csharp/language-reference/keywords/out.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Members of a class can't have signatures that differ only by <ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A compiler error occurs if the only difference between two members of a type is that one of them has a <ph id="ph1">`ref`</ph> parameter and the other has an <ph id="ph2">`out`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code, for example, doesn't compile.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#2<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/ref_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, overloading can be done when one method has a <ph id="ph1">`ref`</ph> or <ph id="ph2">`out`</ph> parameter and the other has a value parameter, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#7<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/ref_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In other situations that require signature matching, such as hiding or overriding, <ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph> are part of the signature and don't match each other.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Properties are not variables.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>They are methods, and cannot be passed to <ph id="ph1">`ref`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For information about how to pass arrays, see <bpt id="p1">[</bpt>Passing Arrays Using ref and out<ept id="p1">](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can't use the <ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph> keywords for the following kinds of methods:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Async methods, which you define by using the <bpt id="p1">[</bpt>async<ept id="p1">](../../../csharp/language-reference/keywords/async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Iterator methods, which include a <bpt id="p1">[</bpt>yield return<ept id="p1">](../../../csharp/language-reference/keywords/yield.md)</ept> or <ph id="ph1">`yield break`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The previous examples demonstrate what happens when you pass value types by reference.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`ref`</ph> keyword to pass reference types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Passing a reference type by reference enables the called method to replace the object in the calling method to which the reference parameter refers.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The storage location of the object is passed to the method as the value of the reference parameter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you change the value in the storage location of the parameter (to point to a new object), you also change the storage location to which the caller refers.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example passes an instance of a reference type as a <ph id="ph1">`ref`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information about how to pass reference types by value and by reference, see <bpt id="p1">[</bpt>Passing Reference-Type Parameters<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#8<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/ref_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing Parameters<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Method Parameters<ept id="p1">](../../../csharp/language-reference/keywords/method-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>