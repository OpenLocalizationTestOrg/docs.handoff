<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67377ed27b7a04859e3ed0fc328025d4644783f9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\passing-reference-type-parameters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">908a03153e00d7d32008f206b9e28f886ed28252</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b19298890b6adaf3d3101ef124f82e0400d9d1a9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Passing Reference-Type Parameters (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Passing Reference-Type Parameters (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A variable of a <bpt id="p1">[</bpt>reference type<ept id="p1">](../../../csharp/language-reference/keywords/reference-types.md)</ept> does not contain its data directly; it contains a reference to its data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you pass a reference-type parameter by value, it is possible to change the data pointed to by the reference, such as the value of a class member.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, you cannot change the value of the reference itself; that is, you cannot use the same reference to allocate memory for a new class and have it persist outside the block.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To do that, pass the parameter using the <bpt id="p1">[</bpt>ref<ept id="p1">](../../../csharp/language-reference/keywords/ref.md)</ept> or <bpt id="p2">[</bpt>out<ept id="p2">](../../../csharp/language-reference/keywords/out.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For simplicity, the following examples use <ph id="ph1">`ref`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Passing Reference Types by Value</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example demonstrates passing a reference-type parameter, <ph id="ph1">`arr`</ph>, by value, to a method, <ph id="ph2">`Change`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because the parameter is a reference to <ph id="ph1">`arr`</ph>, it is possible to change the values of the array elements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, the attempt to reassign the parameter to a different memory location only works inside the method and does not affect the original variable, <ph id="ph1">`arr`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideParameters#7<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-reference-type-parameters_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In the preceding example, the array, <ph id="ph1">`arr`</ph>, which is a reference type, is passed to the method without the <ph id="ph2">`ref`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In such a case, a copy of the reference, which points to <ph id="ph1">`arr`</ph>, is passed to the method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The output shows that it is possible for the method to change the contents of an array element, in this case from <ph id="ph1">`1`</ph> to <ph id="ph2">`888`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, allocating a new portion of memory by using the <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new.md)</ept> operator inside the <ph id="ph1">`Change`</ph> method makes the variable <ph id="ph2">`pArray`</ph> reference a new array.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Thus, any changes after that will not affect the original array, <ph id="ph1">`arr`</ph>, which is created inside <ph id="ph2">`Main`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In fact, two arrays are created in this example, one inside <ph id="ph1">`Main`</ph> and one inside the <ph id="ph2">`Change`</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Passing Reference Types by Reference</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example is the same as the previous example, except that the <ph id="ph1">`ref`</ph> keyword is added to the method header and call.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any changes that take place in the method affect the original variable in the calling program.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideParameters#8<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-reference-type-parameters_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All of the changes that take place inside the method affect the original array in <ph id="ph1">`Main`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In fact, the original array is reallocated using the <ph id="ph1">`new`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Thus, after calling the <ph id="ph1">`Change`</ph> method, any reference to <ph id="ph2">`arr`</ph> points to the five-element array, which is created in the <ph id="ph3">`Change`</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Swapping Two Strings</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Swapping strings is a good example of passing reference-type parameters by reference.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the example, two strings, <ph id="ph1">`str1`</ph> and <ph id="ph2">`str2`</ph>, are initialized in <ph id="ph3">`Main`</ph> and passed to the <ph id="ph4">`SwapStrings`</ph> method as parameters modified by the <ph id="ph5">`ref`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The two strings are swapped inside the method and inside <ph id="ph1">`Main`</ph> as well.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideParameters#9<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/passing-reference-type-parameters_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this example, the parameters need to be passed by reference to affect the variables in the calling program.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If you remove the <ph id="ph1">`ref`</ph> keyword from both the method header and the method call, no changes will take place in the calling program.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about strings, see <bpt id="p1">[</bpt>string<ept id="p1">](../../../csharp/language-reference/keywords/string.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing Parameters<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/passing-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing Arrays Using ref and out<ept id="p1">](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ref<ept id="p1">](../../../csharp/language-reference/keywords/ref.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reference Types<ept id="p1">](../../../csharp/language-reference/keywords/reference-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>