<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="enum.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f064ed0710a83e4bf0eaf5c35b962c29443f9d23</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\enum.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abd73cdff9142b85188de7888841e4ac924d0000</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea70bcec94f66bc28003afd65d5a129342b99171</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>enum (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>enum (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`enum`</ph> keyword is used to declare an enumeration, a distinct type that consists of a set of named constants called the enumerator list.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Usually it is best to define an enum directly within a namespace so that all classes in the namespace can access it with equal convenience.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, an enum can also be nested within a class or struct.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By default, the first enumerator has the value 0, and the value of each successive enumerator is increased by 1.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, in the following enumeration, <ph id="ph1">`Sat`</ph> is <ph id="ph2">`0`</ph>, <ph id="ph3">`Sun`</ph> is <ph id="ph4">`1`</ph>, <ph id="ph5">`Mon`</ph> is <ph id="ph6">`2`</ph>, and so forth.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Enumerators can use initializers to override the default values, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this enumeration, the sequence of elements is forced to start from <ph id="ph1">`1`</ph> instead of <ph id="ph2">`0`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, including a constant that has the value of 0 is recommended.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Enumeration Types<ept id="p1">](../../../csharp/programming-guide/enumeration-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Every enumeration type has an underlying type, which can be any integral type except <bpt id="p1">[</bpt>char<ept id="p1">](../../../csharp/language-reference/keywords/char.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The default underlying type of enumeration elements is <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept>. To declare an enum of another integral type, such as <bpt id="p2">[</bpt>byte<ept id="p2">](../../../csharp/language-reference/keywords/byte.md)</ept>, use a colon after the identifier followed by the type, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The approved types for an enum are <ph id="ph1">`byte`</ph>, <bpt id="p1">[</bpt>sbyte<ept id="p1">](../../../csharp/language-reference/keywords/sbyte.md)</ept>, <bpt id="p2">[</bpt>short<ept id="p2">](../../../csharp/language-reference/keywords/short.md)</ept>, <bpt id="p3">[</bpt>ushort<ept id="p3">](../../../csharp/language-reference/keywords/ushort.md)</ept>, <bpt id="p4">[</bpt>int<ept id="p4">](../../../csharp/language-reference/keywords/int.md)</ept>, <bpt id="p5">[</bpt>uint<ept id="p5">](../../../csharp/language-reference/keywords/uint.md)</ept>, <bpt id="p6">[</bpt>long<ept id="p6">](../../../csharp/language-reference/keywords/long.md)</ept>, or <bpt id="p7">[</bpt>ulong<ept id="p7">](../../../csharp/language-reference/keywords/ulong.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A variable of type <ph id="ph1">`Days`</ph> can be assigned any value in the range of the underlying type; the values are not limited to the named constants.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The default value of an <ph id="ph1">`enum E`</ph> is the value produced by the expression <ph id="ph2">`(E)0`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An enumerator cannot contain white space in its name.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The underlying type specifies how much storage is allocated for each enumerator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, an explicit cast is necessary to convert from <ph id="ph1">`enum`</ph> type to an integral type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the following statement assigns the enumerator <ph id="ph1">`Sun`</ph> to a variable of the type <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept> by using a cast to convert from <ph id="ph2">`enum`</ph> to <ph id="ph3">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you apply <ph id="ph1">&lt;xref:System.FlagsAttribute?displayProperty=fullName&gt;</ph> to an enumeration that contains elements that can be combined with a bitwise <ph id="ph2">`OR`</ph> operation, the attribute affects the behavior of the <ph id="ph3">`enum`</ph> when it is used with some tools.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can notice these changes when you use tools such as the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class methods and the Expression Evaluator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(See the third example.)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Just as with any constant, all references to the individual values of an enum are converted to numeric literals at compile time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This can create potential versioning issues as described in <bpt id="p1">[</bpt>Constants<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/constants.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Assigning additional values to new versions of enums, or changing the values of the enum members in a new version, can cause problems for dependent source code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Enum values often are used in <bpt id="p1">[</bpt>switch<ept id="p1">](../../../csharp/language-reference/keywords/switch.md)</ept> statements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If additional elements have been added to the <ph id="ph1">`enum`</ph> type, the default section of the switch statement can be selected unexpectedly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If other developers use your code, you should provide guidelines about how their code should react if new elements are added to any <ph id="ph1">`enum`</ph> types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the following example, an enumeration, <ph id="ph1">`Days`</ph>, is declared.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Two enumerators are explicitly converted to integer and assigned to integer variables.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following example, the base-type option is used to declare an <ph id="ph1">`enum`</ph> whose members are of type <ph id="ph2">`long`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Notice that even though the underlying type of the enumeration is <ph id="ph1">`long`</ph>, the enumeration members still must be explicitly converted to type <ph id="ph2">`long`</ph> by using a cast.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code example illustrates the use and effect of the <ph id="ph1">&lt;xref:System.FlagsAttribute?displayProperty=fullName&gt;</ph> attribute on an <ph id="ph2">`enum`</ph> declaration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you remove <ph id="ph1">`Flags`</ph>, the example displays the following values:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Enumeration Types<ept id="p1">](../../../csharp/programming-guide/enumeration-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integral Types Table<ept id="p1">](../../../csharp/language-reference/keywords/integral-types-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Built-In Types Table<ept id="p1">](../../../csharp/language-reference/keywords/built-in-types-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/implicit-numeric-conversions-table.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Explicit Numeric Conversions Table<ept id="p1">](../../../csharp/language-reference/keywords/explicit-numeric-conversions-table.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>