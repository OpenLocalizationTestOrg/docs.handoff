<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">481621ab8c3d6e1c98c9ad38590ac030827c26c5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\exceptions\exception-handling.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f2defe1a6b02b1b0aa198b0082be8435a31f760</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c1066e6d4d3f4136025df159533c6ce367c61a7f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exception Handling (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exception Handling (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>try<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept> block is used by C# programmers to partition code that might be affected by an exception.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Associated <bpt id="p1">[</bpt>catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept> blocks are used to handle any resulting exceptions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>finally<ept id="p1">](../../../csharp/language-reference/keywords/try-finally.md)</ept> block contains code that is run regardless of whether or not an exception is thrown in the <ph id="ph1">`try`</ph> block, such as releasing resources that are allocated in the <ph id="ph2">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`try`</ph> block requires one or more associated <ph id="ph2">`catch`</ph> blocks, or a <ph id="ph3">`finally`</ph> block, or both.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following examples show a <ph id="ph1">`try-catch`</ph> statement, a <ph id="ph2">`try-finally`</ph> statement, and a <ph id="ph3">`try-catch-finally`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#6<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#7<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#8<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`try`</ph> block without a <ph id="ph2">`catch`</ph> or <ph id="ph3">`finally`</ph> block causes a compiler error.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Catch Blocks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`catch`</ph> block can specify the type of exception to catch.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The type specification is called an <bpt id="p1">*</bpt>exception filter<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The exception type should be derived from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In general, do not specify <ph id="ph1">&lt;xref:System.Exception&gt;</ph> as the exception filter unless either you know how to handle all exceptions that might be thrown in the <ph id="ph2">`try`</ph> block, or you have included a <bpt id="p1">[</bpt>throw<ept id="p1">](../../../csharp/language-reference/keywords/throw.md)</ept> statement at the end of your <ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`catch`</ph> blocks with different exception filters can be chained together.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`catch`</ph> blocks are evaluated from top to bottom in your code, but only one <ph id="ph2">`catch`</ph> block is executed for each exception that is thrown.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`catch`</ph> block that specifies the exact type or a base class of the thrown exception is executed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`catch`</ph> block specifies a matching exception filter, a <ph id="ph2">`catch`</ph> block that does not have a filter is selected, if one is present in the statement.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is important to position <ph id="ph1">`catch`</ph> blocks with the most specific (that is, the most derived) exception types first.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You should catch exceptions when the following conditions are true:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can create and throw a new, more specific exception.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#9<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You want to partially handle an exception before passing it on for additional handling.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the following example, a <ph id="ph1">`catch`</ph> block is used to add an entry to an error log before re-throwing the exception.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#10<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Finally Blocks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`finally`</ph> block enables you to clean up actions that are performed in a <ph id="ph2">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If present, the <ph id="ph1">`finally`</ph> block executes last, after the <ph id="ph2">`try`</ph> block and any matched <ph id="ph3">`catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`finally`</ph> block always runs, regardless of whether an exception is thrown or a <ph id="ph2">`catch`</ph> block matching the exception type is found.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`finally`</ph> block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>using Statement<ept id="p1">](../../../csharp/language-reference/keywords/using-statement.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`finally`</ph> block is used to close a file that is opened in the <ph id="ph2">`try`</ph> block.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Notice that the state of the file handle is checked before the file is closed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`try`</ph> block cannot open the file, the file handle still has the value <ph id="ph2">`null`</ph> and the <ph id="ph3">`finally`</ph> block does not try to close it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Alternatively, if the file is opened successfully in the <ph id="ph1">`try`</ph> block, the <ph id="ph2">`finally`</ph> block closes the open file.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#11<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/exception-handling_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exceptions and Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>try-catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>try-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-finally.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>try-catch-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>using Statement<ept id="p1">](../../../csharp/language-reference/keywords/using-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>