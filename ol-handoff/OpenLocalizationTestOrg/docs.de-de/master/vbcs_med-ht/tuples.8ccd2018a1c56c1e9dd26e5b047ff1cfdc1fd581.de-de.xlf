<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ea7299d87dc69784e3bed93e48d83e4a0076a20</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tuples.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17e6a1aee1d92e9fa1f3af4eeacd0e2adccd9c5c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">20b4dd65ec6198228490b72d8244624aa043e149</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Tuples | C# Guide</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn about unnamed and named tuple types in C#</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, C#</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>C# Tuple types</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>C# Tuples are types that you define using a lightweight syntax.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The advantages include a simpler syntax, rules for conversions based on number (referred to as "arity") and types of fields, and consistent rules for copies and assignments.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As a tradeoff, Tuples do not support some of the object oriented idioms associated with inheritance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can get an overview in the section on <bpt id="p1">[</bpt>Tuples in the What's new in C# 7<ept id="p1">](whats-new/csharp-7.md#tuples)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this topic, you'll learn the language rules governing Tuples in C# 7, different ways to use them, and initial guidance on working with Tuples.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The new tuples features require the <ph id="ph1">`System.ValueTuple`</ph> type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For Visual Studio 2017, you must add the NuGet package <bpt id="p1">[</bpt>System.ValueTuple<ept id="p1">](https://www.nuget.org/packages/System.ValueTuple/)</ept>, available on the NuGet Gallery.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Without this package you may get a compilation error similar to <ph id="ph1">`error CS8179: Predefined type 'System.ValueTuple``2' is not defined or imported`</ph> or <ph id="ph2">`error CS8137: Cannot define a class or member that utilizes tuples because the compiler required type 'System.Runtime.CompilerServices.TupleElementNamesAttribute' cannot be found.`</ph></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Let's start with the reasons for adding new Tuple support.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Methods return a single object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Tuples enable you to package multiple values in that single object more easily.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The .NET Framework already has generic <ph id="ph1">`Tuple`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These classes, however, had two major limitations.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For one, the <ph id="ph1">`Tuple`</ph> classes named their fields <ph id="ph2">`Item1`</ph>, <ph id="ph3">`Item2`</ph>, and so on.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Those names carry no semantic information.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using these <ph id="ph1">`Tuple`</ph> types does not enable communicating the meaning of each of the fields.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Another concern is that the <ph id="ph1">`Tuple`</ph> classes are reference types.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Using one of the <ph id="ph1">`Tuple`</ph> types means allocating objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>On hot paths, this can have a measurable impact on your application's performance.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To avoid those deficiencies, you could create a <ph id="ph1">`class`</ph> or a <ph id="ph2">`struct`</ph> to carry multiple fields.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Unfortunately, that's more work for you, and it obscures your design intent.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Making a <ph id="ph1">`struct`</ph> or <ph id="ph2">`class`</ph> implies that you are defining a type with both data and behavior.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Many times, you simply want to store multiple values in a single object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The new language features for tuples, combined with a new set of classes in the framework, address these deficiencies.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These new tuples use the new <ph id="ph1">`ValueTuple`</ph> generic structs.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As the name implies, this type is a <ph id="ph1">`struct`</ph> instead of a <ph id="ph2">`class`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>There are different versions of this struct to support tuples with different numbers of fields.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>New language support provides semantic names for the fields of the tuple type, along with features to make constructing or accessing tuple fields easy.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The language features and the <ph id="ph1">`ValueTuple`</ph> generic structs enforce the rule that you cannot add any behavior (methods) to these tuple types.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>All the <ph id="ph1">`ValueTuple`</ph> types are <bpt id="p1">*</bpt>mutable structs<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Each member field is a public field.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>That makes them very lightweight.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>However, that means tuples should not be used where immutability is important.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Tuples are both simpler and more flexible data containers than <ph id="ph1">`class`</ph> and <ph id="ph2">`struct`</ph> types.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Let's explore those differences.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Named and unnamed tuples</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ValueTuple`</ph> struct has fields named <ph id="ph2">`Item1`</ph>, <ph id="ph3">`Item2`</ph>, <ph id="ph4">`Item3`</ph> and so on, similer to the properties defined in the existing <ph id="ph5">`Tuple`</ph> types.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>These names are the only names you can use for <bpt id="p1">*</bpt>unnamed tuples<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When you do not provide any alternative field names to a tuple, you've created an unnamed tuple:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>UnnamedTuple<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/program.cs#01_UnNamedTuple "</bpt>Unnamed tuple<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, when you initialize a tuple, you can use new language features that give better names to each field.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Doing so creates a <bpt id="p1">*</bpt>named tuple<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Named tuples still have fields named <ph id="ph1">`Item1`</ph>, <ph id="ph2">`Item2`</ph>, <ph id="ph3">`Item3`</ph> and so on.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>But they also have synonyms for any of those fields that you have named.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You create a named tuple by specifying the names for each field.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>One way is to specify the names as part of the tuple initialization:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>NamedTuple<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/program.cs#02_NamedTuple "</bpt>Named tuple<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These synonyms are handled by the compiler and the language so that you can use named tuples effectively.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>IDEs and editors can read these semantic names using the Roslyn APIs.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This enables you to reference the fields of a named tuple by those semantic names anywhere in the same assembly.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The compiler replaces the names you've defined with <ph id="ph1">`Item*`</ph> equivalents when generating the compiled output.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The compiled Microsoft Intermediate Language (MSIL) does not include the names you've given these fields.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The compiler must communicate those names you created for tuples that are returned from public methods or properties.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In those cases, the compiler adds a <ph id="ph1">`TupleElementNames`</ph> attribute on the method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This attribute contains a <ph id="ph1">`TransformNames`</ph> list property that contains the names given to each of the fields in the Tuple.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Development Tools, such as Visual Studio, also read that metadata, and provide IntelliSense and other features using the metadata field names.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It is important to understand these underlying fundamentals of the new tuples and the <ph id="ph1">`ValueTuple`</ph> type in order to understand the rules for assigning named tuples to each other.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Assignment and tuples</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The language supports assignment between tuple types that have the same number of fields and implicit conversions for the types for each of those fields.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Other conversions are not considered for assignments.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Let's look at the kinds of assignments that are allowed between tuple types.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Consider these variables used in the following examples:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VariableCreation<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/program.cs#03_VariableCreation "</bpt>Variable creation<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The first two variables, <ph id="ph1">`unnamed`</ph> and <ph id="ph2">`anonymous`</ph> do not have semantic names provided for the fields.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The field names are <ph id="ph1">`Item1`</ph> and <ph id="ph2">`Item2`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The last two variables, <ph id="ph1">`named`</ph> and <ph id="ph2">`differentName`</ph> have semantic names given for the fields.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Note that these two tuples have different names for the fields.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>All four of these tuples have the same number of fields (referred to as 'arity') and the types of those fields are identical.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Therefore, all of these assignments work:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VariableAssignment<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/program.cs#04_VariableAssignment "</bpt>Variable assignment<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Notice that the names of the tuples are not assigned.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The values of the fields are assigned following the order of the fields in the tuple.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Tuples of different types or numbers of fields are not assignable:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Tuples as method return values</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>One of the most common uses for Tuples is as a method return value.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Let's walk through one example.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Consider this method that computes the standard deviation for a sequence of numbers:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>StandardDeviation<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/statistics.cs#05_StandardDeviation "</bpt>Compute Standard Deviation<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>These examples compute the uncorrected sample standard deviation.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The corrected sample standard deviation formula would divide the sum of the squared differences from the mean by (N-1) instead of N, as the <ph id="ph1">`Average`</ph> extension method does.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Consult a statistics text for more details on the differences between these formulas for standard deviation.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This follows the textbook formula for the standard deviation.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>It produces the correct answer, but it's a very inefficient implementation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This method enumerates the sequence twice: Once to produce the average, and once to produce the average of the square of the difference of the average.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>(Remember that LINQ queries are evaluated lazily, so the computation of the differences from the mean and the average of those differences makes only one enumeration.)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>There is an alternative formula that computes standard deviation using only one enumeration of the sequence.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This computation produces two values as it enumerates the sequence: the sum of all items in the sequence, and the sum of the each value squared:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>SumOfSquaresFormula<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/statistics.cs#06_SumOfSquaresFormula "</bpt>Compute Standard Deviation using the sum of squares<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Ths version enumerates the sequence exactly once.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>But, it's not very reusable code.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>As you keep working, you'll find that many different statistical computations use the number of items in the sequence, the sum of the sequence, and the sum of the squares of the sequence.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Let's refactor this method and write a utility method that produces all three of those values.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This is where tuples come in very useful.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Let's update this method so the three values computed during the enumeration are stored in a tuple.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>That creates this version:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TupleVersion<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/statistics.cs#07_TupleVersion "</bpt>Refactor to use tuples<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Visual Studio's Refactoring suport makes it easy to extract the functionality for the core statistics into a private method.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>That gives you a <ph id="ph1">`private static`</ph> method that returns the tuple type with the three values of <ph id="ph2">`Sum`</ph>, <ph id="ph3">`SumOfSquares`</ph>, and <ph id="ph4">`Count`</ph>:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TupleMethodVersion<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/statistics.cs#08_TupleMethodVersion "</bpt>After extracting utility method<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The language enables a couple more options that you can use, if you want to make a few quick edits by hand.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>First, you can use the <ph id="ph1">`var`</ph> declaration to initialize the tuple result from the <ph id="ph2">`ComputeSumAndSumOfSquares`</ph> method call.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You can also create three discrete variables inside the <ph id="ph1">`ComputeSumAndSumOfSquares`</ph> method.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The final version is below:</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CleanedTupleVersion<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/statistics.cs#09_CleanedTupleVersion "</bpt>After final cleanup<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This final version can be used for any method that needs those three values, or any subset of them.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The language supports other options in managing the names of the fields in these tuple-returning methods.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can remove the field names from the return value declaration and return an unnamed tuple:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>You must address the fields of this tuple as <ph id="ph1">`Item1`</ph>, <ph id="ph2">`Item2`</ph>, and <ph id="ph3">`Item3`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It's recommended that you provide semantic names to the fields of tuples returned from methods.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Another idiom where tuples can be very useful is when you are authoring LINQ queries where the final result is a projection that contains some, but not all, of the properties of the objects being selected.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You would traditionally project the results of the query into a sequence of objects that were an anonymous type.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>That presented many limitations, primarily because anonymous types could not conveniently be named in the return type for a method.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Alternatives using <ph id="ph1">`object`</ph> or <ph id="ph2">`dynamic`</ph> as the type of the result came with significant performance costs.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returning a sequence of a tuple type is easy, and the names and types of the fields are available at compile time and through IDE tools.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For example, consider a ToDo application.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You might define a class similar to the following to represent a single entry in the ToDo list:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ToDoItem<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/projectionsample.cs#14_ToDoItem "</bpt>To Do Item<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Your mobile applications may support a compact form of the current ToDo items that only displays the title.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>That LINQ query would make a projection that includes only the ID and the title.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A method that returns a sequence of tuples expresses that design very well:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>QueryReturningTuple<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/projectionsample.cs#15_QueryReturningTuple "</bpt>Query returning a tuple<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The named tuple can be part of the signature.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>It lets the compiler and IDE tools provide static checking that you are using the result correctly.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The named tuple also carries the static type information so there is no need to use expensive run time features like reflection or dynamic binding to work with the results.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Deconstruction</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can unpackage all the items in a tuple by <bpt id="p1">*</bpt>deconstructng<ept id="p1">*</ept> the tuple returned by a method.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>There are two different approaches to deconstructing tuples.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>First, you can explicitly declare the type of each field inside parentheses to create discrete variables for each of the fields in the tuple:</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Deconstruct<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/statistics.cs#10_Deconstruct "</bpt>Deconstruct<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>You can also declare implicitly typed variables for each field in a tuple by using the <ph id="ph1">`var`</ph> keyword outside the parentheses:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DeconstructToVar<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/statistics.cs#11_DeconstructToVar "</bpt>Deconstruct to Var<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>It is also legal to use the <ph id="ph1">`var`</ph> keyword with any, or all of the variable declarations inside the parentheses.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Note that you cannot use a specific type outside the parentheses, even if every field in the tuple has the same type.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Deconstructing user defined types</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Any tuple type can be deconstructed as shown above.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>It's also easy to enable deconstruction on any user defined type (classes, structs, or even interfaces).</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The type author can define one or more <ph id="ph1">`Deconstruct`</ph> methods that assign values to any number of <ph id="ph2">`out`</ph> variables representing the data elements that make up the type.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`Person`</ph> type defines a <ph id="ph2">`Deconstruct`</ph> method that deconstructs a person object into the fields representing the first name and last name:</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TypeWithDeconstructMethod<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/person.cs#12_TypeWithDeconstructMethod "</bpt>Type with a deconstruct method<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The deconstruct method enables assignment from a <ph id="ph1">`Person`</ph> to two strings, representing the <ph id="ph2">`FirstName`</ph> and <ph id="ph3">`LastName`</ph> properties:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Deconstruct Type<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/program.cs#12A_DeconstructType "</bpt>Deconstruct a class type<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>You can enable deconstruction even for types you did not author.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Deconstruct`</ph> method can be an extension method that unpackages the accessible data members of an object.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The example below shows a <ph id="ph1">`Student`</ph> type, derived from the <ph id="ph2">`Person`</ph> type, and an extension method that deconstructs a <ph id="ph3">`Student`</ph> into three variables, representing the <ph id="ph4">`FirstName`</ph>, the <ph id="ph5">`LastName`</ph> and the <ph id="ph6">`GPA`</ph>:</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ExtensionDeconstructMethod<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/person.cs#13_ExtensionDeconstructMethod "</bpt>Type with a deconstruct extension method<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Student`</ph> object now has two accessible <ph id="ph2">`Deconstruct`</ph> methods: the extension method declared for <ph id="ph3">`Student`</ph> types, and the member of the <ph id="ph4">`Person`</ph> type.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Both are in scope, and that enables a <ph id="ph1">`Student`</ph> to be deconstructed into either two variables or three.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If you assign a student to three variabless, the first name, last name, and GPA are all returned.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>If you assign a student to two variables, only the first name and the last name are returned.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Deconstruct extension method<ept id="p2">]</ept><bpt id="p3">(../../samples/snippets/csharp/tuples/tuples/program.cs#13A_DeconstructExtension "</bpt>Deconstruct a class type using an extension method<ept id="p3">")</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You should be very careful defining multiple <ph id="ph1">`Deconstruct`</ph> methods in a class or a class hierarchy.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Multiple <ph id="ph1">`Deconstruct`</ph> methods that have the same number of <ph id="ph2">`out`</ph> parameters can quickly cause ambiguities.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Callers may not be able to easily call the desired <ph id="ph1">`Deconstruct`</ph> method.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>In this example, there is minimal chance for an ambiguious call because the <ph id="ph1">`Deconstruct`</ph> method for <ph id="ph2">`Person`</ph> has two output parameters, and the <ph id="ph3">`Deconstruct`</ph> method for <ph id="ph4">`Student`</ph> has three.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The new language and library support for named tuples makes it much easier to work with designs that use data structures that store multiple fields but do not define behavior, as classes and structs do.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>It's easy and concise to use tuples for those types.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>You get all the benefits of static type checking, without needing to author types using the more verbose <ph id="ph1">`class`</ph> or <ph id="ph2">`struct`</ph> syntax.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Even so, they are most useful for utility methods that are <ph id="ph1">`private`</ph>, or <ph id="ph2">`internal`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Create user defined types, either <ph id="ph1">`class`</ph> or <ph id="ph2">`struct`</ph> types when your public methods return a value that has multiple fields.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>