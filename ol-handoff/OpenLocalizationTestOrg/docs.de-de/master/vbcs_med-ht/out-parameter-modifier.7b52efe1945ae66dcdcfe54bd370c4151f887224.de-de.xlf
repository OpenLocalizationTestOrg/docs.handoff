<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2f2e9b9239836b051820bda66523822e95cdf52</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\out-parameter-modifier.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d8d9bedce8b9dd88274b62abfaefb1609f32397</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22809641f7f376382613ea72ae00704bc692256c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>out parameter modifier (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>out parameter modifier (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`out`</ph> keyword causes arguments to be passed by reference.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It is like the <bpt id="p1">[</bpt>ref<ept id="p1">](../../../csharp/language-reference/keywords/ref.md)</ept> keyword, except that <ph id="ph1">`ref`</ph> requires that the variable be initialized before it is passed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To use an <ph id="ph1">`out`</ph> parameter, both the method definition and the calling method must explicitly use the <ph id="ph2">`out`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cs-out-keyword<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/out/out-1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`out`</ph> keyword can also be used with a generic type parameter to specify that the type parameter is covariant.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information on the use of the <ph id="ph1">`out`</ph> keyword in this context, see <bpt id="p1">[</bpt>out (Generic Modifier)<ept id="p1">](../../../csharp/language-reference/keywords/out-generic-modifier.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Variables passed as <ph id="ph1">`out`</ph> arguments do not have to be initialized before being passed in a method call.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, the called method is required to assign a value before the method returns.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph> keywords cause different run-time behavior, they are not considered part of the method signature at compile time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Therefore, methods cannot be overloaded if the only difference is that one method takes a <ph id="ph1">`ref`</ph> argument and the other takes an <ph id="ph2">`out`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code, for example, will not compile:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Overloading is legal, however, if one method takes a <ph id="ph1">`ref`</ph> or <ph id="ph2">`out`</ph> argument and the other uses neither, like this:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#3<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/out/out-3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Properties are not variables and therefore cannot be passed as <ph id="ph1">`out`</ph> parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For information about passing arrays, see <bpt id="p1">[</bpt>Passing Arrays Using ref and out<ept id="p1">](../../../csharp/programming-guide/arrays/passing-arrays-using-ref-and-out.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can't use the <ph id="ph1">`ref`</ph> and <ph id="ph2">`out`</ph> keywords for the following kinds of methods:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Async methods, which you define by using the <bpt id="p1">[</bpt>async<ept id="p1">](../../../csharp/language-reference/keywords/async.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Iterator methods, which include a <bpt id="p1">[</bpt>yield return<ept id="p1">](../../../csharp/language-reference/keywords/yield.md)</ept> or <ph id="ph1">`yield break`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Declaring <ph id="ph1">`out`</ph> arguments</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declaring a method with <ph id="ph1">`out`</ph> arguments is useful when you want a method to return multiple values.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`out`</ph> to return three variables with a single method call.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that the third argument is assigned to null.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This enables methods to return values optionally.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#4<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/out/out-4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Try pattern<ept id="p1">](https://docs.microsoft.com/visualstudio/code-quality/ca1021-avoid-out-parameters#try-pattern-methods.md)</ept> involves returning a <ph id="ph1">`bool`</ph> to indicate whether an operation succeeded and failed, and returning the value produced by the operation in an <ph id="ph2">`out`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A number of parsing methods, such as the <ph id="ph1">@System.DateTime.TryParse</ph>(System.String,<ph id="ph2">@System.DateTime</ph>) method, use this pattern.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Calling a method with an <ph id="ph1">`out`</ph> argument</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In C# 6 and earlier, you must declare a variable in a separate statement before you pass it as an <ph id="ph1">`out`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example declares a variable named <ph id="ph1">`number`</ph> before it is passed to the [Int32.TryParse](xref:System.Int32.TryParse(System.String,<ph id="ph2">@System.Int32</ph>) method, which attempts to convert a string to a number.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#5<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/out/out-5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, you can declare the <ph id="ph1">`out`</ph> variable in the argument list of the method call, rather than in a separate variable declaration.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This produces more compact, readable code, and also prevents you from inadvertently assigning a value to the variable before the method call.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example is like the previous example, except that it defines the <ph id="ph1">`number`</ph> variable in the call to the [Int32.TryParse](xref:System.Int32.TryParse(System.String,<ph id="ph2">@System.Int32</ph>) method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#6<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/out/out-6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the previous example, the <ph id="ph1">`number`</ph> variable is strongly typed as an <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can also declare an implicitly typed local variable, as the following example does.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsMethodParams#7<ept id="p2">](../../../../samples/snippets/csharp/language-reference/keywords/out/out-7.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Method Parameters<ept id="p1">](../../../csharp/language-reference/keywords/method-parameters.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>