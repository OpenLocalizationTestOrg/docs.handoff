<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="right-shift-operator.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b1f2e0a1c724199bcf82a8b363fe81f187d6870</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\operators\right-shift-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6e3756d7e1726b52e595c2fcff64766e6b099df</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2f51d0e177e424b3eeda2b34b1f50b5fcb6e8f5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source><ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph> Operator (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;gt;</ph><ph id="ph2">&amp;gt;</ph> Operator (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The right-shift operator (<ph id="ph1">`&gt;&gt;`</ph>) shifts its first operand right by the number of bits specified by its second operand.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the first operand is an <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept> or <bpt id="p2">[</bpt>uint<ept id="p2">](../../../csharp/language-reference/keywords/uint.md)</ept> (32-bit quantity), the shift count is given by the low-order five bits of the second operand (second operand &amp; 0x1f).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If the first operand is a <bpt id="p1">[</bpt>long<ept id="p1">](../../../csharp/language-reference/keywords/long.md)</ept> or <bpt id="p2">[</bpt>ulong<ept id="p2">](../../../csharp/language-reference/keywords/ulong.md)</ept> (64-bit quantity), the shift count is given by the low-order six bits of the second operand (second operand &amp; 0x3f).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the first operand is an <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept> or <bpt id="p2">[</bpt>long<ept id="p2">](../../../csharp/language-reference/keywords/long.md)</ept>, the right-shift is an arithmetic shift (high-order empty bits are set to the sign bit).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the first operand is of type <bpt id="p1">[</bpt>uint<ept id="p1">](../../../csharp/language-reference/keywords/uint.md)</ept> or <bpt id="p2">[</bpt>ulong<ept id="p2">](../../../csharp/language-reference/keywords/ulong.md)</ept>, the right-shift is a logical shift (high-order bits are zero-filled).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>User-defined types can overload the <ph id="ph1">`&gt;&gt;`</ph> operator; the type of the first operand must be the user-defined type, and the type of the second operand must be <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept>. For more information, see <bpt id="p2">[</bpt>operator<ept id="p2">](../../../csharp/language-reference/keywords/operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Operators<ept id="p1">](../../../csharp/language-reference/operators/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>