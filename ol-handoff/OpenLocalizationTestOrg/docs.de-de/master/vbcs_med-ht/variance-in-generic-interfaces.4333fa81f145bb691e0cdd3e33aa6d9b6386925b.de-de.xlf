<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7acde09659624fd097471824e6407dc181d88893</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\covariance-contravariance\variance-in-generic-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fab66b25eb51b1ae4e2d46ddfed2a376c0bf5776</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e453bbe2261ef3deedc1a5b85e6b89e43ceb7f38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Variance in Generic Interfaces (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Variance in Generic Interfaces (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET Framework 4 introduced variance support for several existing generic interfaces.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Variance support enables implicit conversion of classes that implement these interfaces.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following interfaces are now variant:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> (T is covariant)</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> (T is covariant)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.IQueryable%601&gt;</ph> (T is covariant)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.IGrouping%602&gt;</ph> (<ph id="ph2">`TKey`</ph> and <ph id="ph3">`TElement`</ph> are covariant)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> (T is contravariant)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> (T is contravariant)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> (T is contravariant)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Covariance permits a method to have a more derived return type than that defined by the generic type parameter of the interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To illustrate the covariance feature, consider these generic interfaces: <ph id="ph1">`IEnumerable&lt;Object&gt;`</ph> and <ph id="ph2">`IEnumerable&lt;String&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IEnumerable&lt;String&gt;`</ph> interface does not inherit the <ph id="ph2">`IEnumerable&lt;Object&gt;`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`String`</ph> type does inherit the <ph id="ph2">`Object`</ph> type, and in some cases you may want to assign objects of these interfaces to each other.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This is shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In earlier versions of the .NET Framework, this code causes a compilation error in C# with <ph id="ph1">`Option Strict On`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>But now you can use <ph id="ph1">`strings`</ph> instead of <ph id="ph2">`objects`</ph>, as shown in the previous example, because the <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface is covariant.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Contravariance permits a method to have argument types that are less derived than that specified by the generic parameter of the interface.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To illustrate contravariance, assume that you have created a <ph id="ph1">`BaseComparer`</ph> class to compare instances of the <ph id="ph2">`BaseClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BaseComparer`</ph> class implements the <ph id="ph2">`IEqualityComparer&lt;BaseClass&gt;`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.Generic.IEqualityComparer%601&gt;</ph> interface is now contravariant, you can use <ph id="ph2">`BaseComparer`</ph> to compare instances of classes that inherit the <ph id="ph3">`BaseClass`</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This is shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Using Variance in Interfaces for Generic Collections (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Variance in generic interfaces is supported for reference types only.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Value types do not support variance.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`IEnumerable&lt;int&gt;`</ph> cannot be implicitly converted to <ph id="ph2">`IEnumerable&lt;object&gt;`</ph>, because integers are represented by a value type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It is also important to remember that classes that implement variant interfaces are still invariant.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, although <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> implements the covariant interface <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you cannot implicitly convert <ph id="ph3">`List&lt;Object&gt;`</ph> to <ph id="ph4">`List&lt;String&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following code example.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Variance in Interfaces for Generic Collections (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Variant Generic Interfaces (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/creating-variant-generic-interfaces.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generic Interfaces<ept id="p1">](../../../../standard/generics/interfaces.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Variance in Delegates (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>