<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="instance-constructors.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c579c28c6b298cc0aefe0cb9eb41993b84a23d8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\instance-constructors.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">022085bee7c8c6836f90a67a1589020f782f8434</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ea5adf2c56730218198b673a6e3b429aba9f5fc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Instance Constructors (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Instance Constructors (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Instance constructors are used to create and initialize any instance member variables when you use the <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new.md)</ept> expression to create an object of a <bpt id="p2">[</bpt>class<ept id="p2">](../../../csharp/language-reference/keywords/class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To initialize a <bpt id="p1">[</bpt>static<ept id="p1">](../../../csharp/language-reference/keywords/static.md)</ept> class, or static variables in a non-static class, you must define a static constructor.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Static Constructors<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following example shows an instance constructor:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For clarity, this class contains public fields.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The use of public fields is not a recommended programming practice because it allows any method anywhere in a program unrestricted and unverified access to an object's inner workings.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Data members should generally be private, and should be accessed only through class methods and properties.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This instance constructor is called whenever an object based on the <ph id="ph1">`CoOrds`</ph> class is created.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A constructor like this one, which takes no arguments, is called a <bpt id="p1">*</bpt>default constructor<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, it is often useful to provide additional constructors.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, we can add a constructor to the <ph id="ph1">`CoOrds`</ph> class that allows us to specify the initial values for the data members:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This allows <ph id="ph1">`CoOrd`</ph> objects to be created with default or specific initial values, like this:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If a class does not have a constructor, a default constructor is automatically generated and default values are used to initialize the object fields.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, an <bpt id="p1">[</bpt>int<ept id="p1">](../../../csharp/language-reference/keywords/int.md)</ept> is initialized to 0.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information on default values, see <bpt id="p1">[</bpt>Default Values Table<ept id="p1">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, because the <ph id="ph1">`CoOrds`</ph> class default constructor initializes all data members to zero, it can be removed altogether without changing how the class works.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A complete example using multiple constructors is provided in Example 1 later in this topic, and an example of an automatically generated constructor is provided in Example 2.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Instance constructors can also be used to call the instance constructors of base classes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The class constructor can invoke the constructor of the base class through the initializer, as follows:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`Circle`</ph> class passes values representing radius and height to the constructor provided by <ph id="ph2">`Shape`</ph> from which <ph id="ph3">`Circle`</ph> is derived.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A complete example using <ph id="ph1">`Shape`</ph> and <ph id="ph2">`Circle`</ph> appears in this topic as Example 3.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example 1</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example demonstrates a class with two class constructors, one without arguments and one with two arguments.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example 2</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this example, the class <ph id="ph1">`Person`</ph> does not have any constructors, in which case, a default constructor is automatically provided and the fields are initialized to their default values.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Notice that the default value of <ph id="ph1">`age`</ph> is <ph id="ph2">`0`</ph> and the default value of <ph id="ph3">`name`</ph> is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information on default values, see <bpt id="p1">[</bpt>Default Values Table<ept id="p1">](../../../csharp/language-reference/keywords/default-values-table.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Example 3</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example demonstrates using the base class initializer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Circle`</ph> class is derived from the general class <ph id="ph2">`Shape`</ph>, and the <ph id="ph3">`Cylinder`</ph> class is derived from the <ph id="ph4">`Circle`</ph> class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The constructor on each derived class is using its base class initializer.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more examples on invoking the base class constructors, see <bpt id="p1">[</bpt>virtual<ept id="p1">](../../../csharp/language-reference/keywords/virtual.md)</ept>, <bpt id="p2">[</bpt>override<ept id="p2">](../../../csharp/language-reference/keywords/override.md)</ept>, and <bpt id="p3">[</bpt>base<ept id="p3">](../../../csharp/language-reference/keywords/base.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructors<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/constructors.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Finalizers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/destructors.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>static<ept id="p1">](../../../csharp/language-reference/keywords/static.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>