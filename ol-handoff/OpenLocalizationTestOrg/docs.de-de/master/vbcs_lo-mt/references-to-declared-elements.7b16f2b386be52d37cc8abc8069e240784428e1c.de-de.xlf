<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5de39ac5c30b1cff2a8bfd0cd606dee33c078514</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\declared-elements\references-to-declared-elements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae4bab33d18c5eb21fd1edef3841d71b47353ab5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d46b404eb20ed5b925a224bf6078ab20df1f4a4a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>References to Declared Elements (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>References to Declared Elements (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When your code refers to a declared element, the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler matches the name in your reference to the appropriate declaration of that name.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If more than one element is declared with the same name, you can control which of those elements is to be referenced by <bpt id="p1">*</bpt>qualifying<ept id="p1">*</ept> its name.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The compiler attempts to match a name reference to a name declaration with the <bpt id="p1">*</bpt>narrowest scope<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This means it starts with the code making the reference and works outward through successive levels of containing elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example shows references to two variables with the same name.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The example declares two variables, each named <ph id="ph1">`totalCount`</ph>, at different levels of scope in module <ph id="ph2">`container`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When the procedure <ph id="ph1">`showCount`</ph> displays <ph id="ph2">`totalCount`</ph> without qualification, the <ph id="ph3">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler resolves the reference to the declaration with the narrowest scope, namely the local declaration inside <ph id="ph4">`showCount`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When it qualifies <ph id="ph1">`totalCount`</ph> with the containing module <ph id="ph2">`container`</ph>, the compiler resolves the reference to the declaration with the broader scope.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Qualifying an Element Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you want to override this search process and specify a name declared in a broader scope, you must <bpt id="p1">*</bpt>qualify<ept id="p1">*</ept> the name with the containing element of the broader scope.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In some cases, you might also have to qualify the containing element.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Qualifying a name means preceding it in your source statement with information that identifies where the target element is defined.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This information is called a <bpt id="p1">*</bpt>qualification string<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It can include one or more namespaces and a module, class, or structure.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The qualification string should unambiguously specify the module, class, or structure containing the target element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The container might in turn be located in another containing element, usually a namespace.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You might need to include several containing elements in the qualification string.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To access a declared element by qualifying its name</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Determine the location in which the element has been defined.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This might include a namespace, or even a hierarchy of namespaces.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Within the lowest-level namespace, the element must be contained in a module, class, or structure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Determine a qualification path based on the target element's location.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Start with the highest-level namespace, proceed to the lowest-level namespace, and end with the module, class, or structure containing the target element.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Each element in the path must contain the element that follows it.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`outerSpace`</ph> → <ph id="ph2">`innerSpace`</ph> → <ph id="ph3">`holdsTotals`</ph> → <ph id="ph4">`totals`</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Prepare the qualification string for the target element.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Place a period (<ph id="ph1">`.`</ph>) after every element in the path.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Your application must have access to every element in your qualification string.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Write the expression or assignment statement referring to the target element in the normal way.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Precede the target element name with the qualification string.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The name should immediately follow the period (<ph id="ph1">`.`</ph>) that follows the module, class, or structure that contains the element.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The compiler uses the qualification string to find a clear, unambiguous declaration to which it can match the target element reference.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You might also have to qualify a name reference if your application has access to more than one programming element that has the same name.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Forms&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.UI.WebControls&gt;</ph> namespaces both contain a <ph id="ph3">`Label`</ph> class (<ph id="ph4">&lt;xref:System.Windows.Forms.Label?displayProperty=fullName&gt;</ph> and <ph id="ph5">&lt;xref:System.Web.UI.WebControls.Label?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If your application uses both, or if it defines its own <ph id="ph1">`Label`</ph> class, you must distinguish the different <ph id="ph2">`Label`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Include the namespace or import alias in the variable declaration.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example uses the import alias.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Members of Other Containing Elements</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When you use a nonshared member of another class or structure, you must first qualify the member name with a variable or expression that points to an instance of the class or structure.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`demoClass`</ph> is an instance of a class named <ph id="ph2">`class1`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You cannot use the class name itself to qualify a member that is not <bpt id="p1">[</bpt>Shared<ept id="p1">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You must first create an instance in an object variable (in this case <ph id="ph1">`demoClass`</ph>) and then reference it by the variable name.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If a class or structure has a <ph id="ph1">`Shared`</ph> member, you can qualify that member either with the class or structure name or with a variable or expression that points to an instance.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A module does not have any separate instances, and all its members are <ph id="ph1">`Shared`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Therefore, you qualify a module member with the module name.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example shows qualified references to module member procedures.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The example declares two <ph id="ph1">`Sub`</ph> procedures, both named <ph id="ph2">`perform`</ph>, in different modules in a project.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Each one can be specified without qualification within its own module but must be qualified if referenced from anywhere else.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Because the final reference in <ph id="ph1">`module3`</ph> does not qualify <ph id="ph2">`perform`</ph>, the compiler cannot resolve that reference.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>References to Projects</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To use <bpt id="p1">[</bpt>Public<ept id="p1">](../../../../visual-basic/language-reference/modifiers/public.md)</ept> elements defined in another project, you must first set a <bpt id="p2">*</bpt>reference<ept id="p2">*</ept> to that project's assembly or type library.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To set a reference, click <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu, or use the <bpt id="p3">[</bpt>/reference (Visual Basic)<ept id="p3">](../../../../visual-basic/reference/command-line-compiler/reference.md)</ept> command-line compiler option.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, you can use the XML object model of the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you set a reference to the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> namespace, you can declare and use any of its classes, such as <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Importing Containing Elements</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">[</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept> to <bpt id="p2">*</bpt>import<ept id="p2">*</ept> the namespaces that contain the modules or classes that you want to use.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This enables you to refer to the elements defined in an imported namespace without fully qualifying their names.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following example rewrites the previous example to import the <ph id="ph1">&lt;xref:System.Xml&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`Imports`</ph> statement can define an <bpt id="p1">*</bpt>import alias<ept id="p1">*</ept> for each imported namespace.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This can make the source code shorter and easier to read.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following example rewrites the previous example to use <ph id="ph1">`xD`</ph> as an alias for the <ph id="ph2">&lt;xref:System.Xml&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Imports`</ph> statement does not make elements from other projects available to your application.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>That is, it does not take the place of setting a reference.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Importing a namespace just removes the requirement to qualify the names defined in that namespace.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`Imports`</ph> statement to import modules, classes, structures, and enumerations.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can then use the members of such imported elements without qualification.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, you must always qualify nonshared members of classes and structures with a variable or expression that evaluates to an instance of the class or structure.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Naming Guidelines</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When you define two or more programming elements that have the same name, a <bpt id="p1">*</bpt>name ambiguity<ept id="p1">*</ept> can result when the compiler attempts to resolve a reference to that name.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If more than one definition is in scope, or if no definition is in scope, the reference is irresolvable.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For an example, see "Qualified Reference Example" on this Help page.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can avoid name ambiguity by giving all your elements unique names.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Then you can make reference to any element without having to qualify its name with a namespace, module, or class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You also reduce the chances of accidentally referring to the wrong element.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Shadowing</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When two programming elements share the same name, one of them can hide, or <bpt id="p1">*</bpt>shadow<ept id="p1">*</ept>, the other one.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A shadowed element is not available for reference; instead, when your code uses the shadowed element name, the <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> compiler resolves it to the shadowing element.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For a more detailed explanation with examples, see <bpt id="p1">[</bpt>Shadowing in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/shadowing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Declared Element Characteristics<ept id="p1">](../../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-characteristics.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>NIB How to: Modify Project Properties and Configuration Settings<ept id="p1">](http://msdn.microsoft.com/en-us/e7184bc5-2f2b-4b4f-aa9a-3ecfcbc48b67)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Variables<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Imports Statement (.NET Namespace and Type)<ept id="p1">](../../../../visual-basic/language-reference/statements/imports-statement-net-namespace-and-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Public<ept id="p1">](../../../../visual-basic/language-reference/modifiers/public.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>