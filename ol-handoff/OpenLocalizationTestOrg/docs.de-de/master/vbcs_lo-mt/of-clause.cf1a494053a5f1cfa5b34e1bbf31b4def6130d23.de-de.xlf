<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c750b057449bb112bb6b33de061bd5ad61c6566</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\statements\of-clause.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6f011521cf5cbf64fbf553744fc050ec96bb2f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a932769725dd012cb45d7d6e93fd3e5bcc1dcfc5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Of Clause (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Of Clause (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Introduces an <ph id="ph1">`Of`</ph> clause, which identifies a <bpt id="p1">*</bpt>type parameter<ept id="p1">*</ept> on a <bpt id="p2">*</bpt>generic<ept id="p2">*</ept> class, structure, interface, delegate, or procedure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For information on generic types, see <bpt id="p1">[</bpt>Generic Types in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using the Of Keyword</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">`Of`</ph> keyword to define the outline of a class that takes two type parameters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It <bpt id="p1">*</bpt>constrains<ept id="p1">*</ept> the <ph id="ph1">`keyType`</ph> parameter by the <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface, which means the consuming code must supply a type argument that implements <ph id="ph3">&lt;xref:System.IComparable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This is necessary so that the <ph id="ph1">`add`</ph> procedure can call the <ph id="ph2">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information on constraints, see <bpt id="p1">[</bpt>Type List<ept id="p1">](../../../visual-basic/language-reference/statements/type-list.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you complete the preceding class definition, you can construct a variety of <ph id="ph1">`dictionary`</ph> classes from it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The types you supply to <ph id="ph1">`entryType`</ph> and <ph id="ph2">`keyType`</ph> determine what type of entry the class holds and what type of key it associates with each entry.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Because of the constraint, you must supply to <ph id="ph1">`keyType`</ph> a type that implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following code example creates an object that holds <ph id="ph1">`String`</ph> entries and associates an <ph id="ph2">`Integer`</ph> key with each one.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Integer`</ph> implements <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> and therefore satisfies the constraint on <ph id="ph3">`keyType`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Of`</ph> keyword can be used in these contexts:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Class Statement<ept id="p1">](../../../visual-basic/language-reference/statements/class-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegate Statement<ept id="p1">](../../../visual-basic/language-reference/statements/delegate-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interface Statement<ept id="p1">](../../../visual-basic/language-reference/statements/interface-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structure Statement<ept id="p1">](../../../visual-basic/language-reference/statements/structure-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IComparable&gt;</ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type List<ept id="p1">](../../../visual-basic/language-reference/statements/type-list.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Generic Types in Visual Basic<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/generic-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>In<ept id="p1">](../../../visual-basic/language-reference/modifiers/in-generic-modifier.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Out<ept id="p1">](../../../visual-basic/language-reference/modifiers/out-generic-modifier.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>