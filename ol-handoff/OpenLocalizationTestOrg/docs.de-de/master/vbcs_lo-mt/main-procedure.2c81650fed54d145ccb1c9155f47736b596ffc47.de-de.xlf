<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38b566597227110cf613092fbc90f300f21f14fb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\main-procedure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10ece7fcd32cfadb352c848fc58f112d911068d8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5a91a79879382c58d68d8f88a2b8100e34389e6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Main Procedure in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Main Procedure in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Every Visual Basic application must contain a procedure called <ph id="ph1">`Main`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This procedure serves as the starting point and overall control for your application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The .NET Framework calls your <ph id="ph1">`Main`</ph> procedure when it has loaded your application and is ready to pass control to it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Unless you are creating a Windows Forms application, you must write the <ph id="ph1">`Main`</ph> procedure for applications that run on their own.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Main`</ph> contains the code that runs first.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`Main`</ph>, you can determine which form is to be loaded first when the program starts, find out if a copy of your application is already running on the system, establish a set of variables for your application, or open a database that the application requires.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Requirements for the Main Procedure</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A file that runs on its own (usually with extension .exe) must contain a <ph id="ph1">`Main`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A library (for example with extension .dll) does not run on its own and does not require a <ph id="ph1">`Main`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The requirements for the different types of projects you can create are as follows:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Console applications run on their own, and you must supply at least one <ph id="ph1">`Main`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Windows Forms applications run on their own.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, the Visual Basic compiler automatically generates a <ph id="ph1">`Main`</ph> procedure in such an application, and you do not need to write one.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Class libraries do not require a <ph id="ph1">`Main`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These include Windows Control Libraries and Web Control Libraries.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Web applications are deployed as class libraries.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Declaring the Main Procedure</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There are four ways to declare the <ph id="ph1">`Main`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It can take arguments or not, and it can return a value or not.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you declare <ph id="ph1">`Main`</ph> in a class, you must use the <ph id="ph2">`Shared`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In a module, <ph id="ph1">`Main`</ph> does not need to be <ph id="ph2">`Shared`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The simplest way is to declare a <ph id="ph1">`Sub`</ph> procedure that does not take arguments or return a value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Main`</ph> can also return an <ph id="ph2">`Integer`</ph> value, which the operating system uses as the exit code for your program.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Other programs can test this code by examining the Windows ERRORLEVEL value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To return an exit code, you must declare <ph id="ph1">`Main`</ph> as a <ph id="ph2">`Function`</ph> procedure instead of a <ph id="ph3">`Sub`</ph> procedure.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Main`</ph> can also take a <ph id="ph2">`String`</ph> array as an argument.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each string in the array contains one of the command-line arguments used to invoke your program.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can take different actions depending on their values.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can declare <ph id="ph1">`Main`</ph> to examine the command-line arguments but not return an exit code, as follows.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Interaction.MsgBox%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Array.Length%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:Microsoft.VisualBasic.Information.UBound%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Structure of a Visual Basic Program<ept id="p1">](../../../visual-basic/programming-guide/program-structure/structure-of-a-visual-basic-program.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NIB: Visual Basic Version of Hello, World<ept id="p1">](http://msdn.microsoft.com/en-us/9d030b60-e148-4366-a462-69532f02294c)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>/main<ept id="p1">](../../../visual-basic/reference/command-line-compiler/main.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Shared<ept id="p1">](../../../visual-basic/language-reference/modifiers/shared.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub Statement<ept id="p1">](../../../visual-basic/language-reference/statements/sub-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../visual-basic/language-reference/statements/function-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Integer Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/integer-data-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>String Data Type<ept id="p1">](../../../visual-basic/language-reference/data-types/string-data-type.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>