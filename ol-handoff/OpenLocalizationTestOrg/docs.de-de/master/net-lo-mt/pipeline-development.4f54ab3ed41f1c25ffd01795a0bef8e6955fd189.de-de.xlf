<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b82b9a05f0b67a1caf8c533dd4d40c13030318c4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\add-ins\pipeline-development.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22b519d5439522c25daf2b868042ed19073aa57e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5b0c25cac9ddbc56de5374b856c35e0686a447f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pipeline Development | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pipeline Development</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The add-in pipeline is the path of pipeline segments that the host application and its add-in must use to communicate with each other.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following illustration shows the communication pipeline and its segments.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add&amp;#45;in pipeline model.<ept id="p1">](../../../docs/framework/add-ins/media/addin1.png "AddIn1")</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Add-in pipeline</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The host application is at one end of the pipeline and the add-in is at the other end.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Starting from each end and moving toward the middle, both the host application and the add-in have an abstract base class that defines a view of the object model that they both share.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These types (classes) make up the add-in view pipeline segment and the host view of the add-in pipeline segment.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The add-in view pipeline segment often contains more than one abstract class but the class that the add-in inherits from is known as the add-in base.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The add-in-side adapter pipeline segment and the host-side adapter pipeline segment convert the flow of types between their view pipeline segments and the contract pipeline segment.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The central segment of the pipeline is a contract that is derived from the <ph id="ph1">&lt;xref:System.AddIn.Contract.IContract&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This contract defines the methods that the host application and its add-in will both use.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you load the host and the add-in into separate application domains, you have an isolation boundary that separates the scope of the host application from the scope of the add-in.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The contract is the only assembly that is loaded in both the host and add-in application domains.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The host and the add-in each refer only to their view of the contract methods.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Therefore, they are separated by a layer of abstraction from the contract.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To develop pipeline segments, you must create a directory structure that will contain them.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about development requirements and scope guidelines, see <bpt id="p1">[</bpt>Pipeline Development Requirements<ept id="p1">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following illustration shows the types that make up the pipeline segments.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The names of the types shown in the illustration are arbitrary, but all types except for the host and the host view of the add-in require attributes so they can be discovered by methods that construct an information store.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add&amp;#45;in model with required attributes on types.<ept id="p1">](../../../docs/framework/add-ins/media/addin-model.png "AddIn_Model")</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add-in pipeline with types</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following table describes the pipeline segments for activating an add-in.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about these segments, see <bpt id="p1">[</bpt>Contracts, Views, and Adapters<ept id="p1">](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Pipeline segment</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Host</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The application assembly that creates an instance of an add-in.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Host view of the add-in</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Represents the host application's view of the object types and methods used to communicate with the add-in.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The host view is an abstract base class or interface.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Host-side adapter</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An assembly with one or more classes that adapts methods to and from the contract.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This pipeline segment is identified by using the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.HostAdapterAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Multi-module assemblies are not supported.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Contract</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An interface that is derived from the <ph id="ph1">&lt;xref:System.AddIn.Contract.IContract&gt;</ph> interface and that defines the protocol for communicating types between the host and its add-in.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This pipeline segment is identified by setting the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInContractAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add-in-side adapter</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An assembly with one or more classes that adapts methods to and from the contract.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This pipeline segment is identified by using the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInAdapterAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Each assembly in the add-in-side adapter directory that contains a type that has an <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInAdapterAttribute&gt;</ph> attribute is loaded into the add-in's application domain.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each assembly in the add-in-side directory is loaded in its own application domain.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Multi-module assemblies are not supported</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add-in view</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An assembly that represents the add-in's view of the object types and methods that are used to communicate with the host.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The add-in view is an abstract base class or interface.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This pipeline segment is identified by using the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInBaseAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Each assembly in the AddInViews directory that contains a type that has an <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInBaseAttribute&gt;</ph> attribute is loaded into the add-in's application domain.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Add-in</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An instantiated type that performs a service for the host.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Pipeline Activation Path</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following illustration shows the activation of types when an add-in is activated.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It also shows the passing of objects to the host, such as the results of a calculation or a collection of objects.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is the most typical scenario.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Add&amp;#45;in model with activation path.<ept id="p1">](../../../docs/framework/add-ins/media/addin6.png "AddIn6")</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Activation path from the add-in to the host</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The activation path of the pipeline occurs as follows:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The host application activates the add-in with the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The add-in, add-in view, add-in-side adapter, and the contract assemblies are loaded into the add-in's application domain.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>An instance of the add-in-side adapter is created using the add-in view (with the class identified by the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInBaseAttribute&gt;</ph> attribute) as its constructor.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The add-in-side adapter inherits from the contract.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The add-in-side adapter, which is typed as the contract, is passed across the (optional) isolation boundary to the host-side adapter's constructor.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The host view of the add-in, host-side adapter, and the contract assemblies are loaded into the host's application domain.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>An instance of the host-side adapter is created using the contract as its constructor.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The host-side adapter inherits from the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The host has the add-in, which is typed as the host view of the add-in, and can continue calling its methods.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Walkthroughs</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There are three walkthrough topics that describe how to create pipelines using Visual Studio:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Creating an Extensible Application<ept id="p1">](../../../docs/framework/add-ins/walkthrough-create-extensible-app.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Describes a calculator add-in that performs addition, subtraction, multiplication, and divsion calculations for the host.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Enabling Backward Compatibility as Your Host Changes<ept id="p1">](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Describes a calculator add-in with enhanced calculation capabilities, and how to maintain compatibility with the first calculator add-in.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Passing Collections Between Hosts and Add-Ins<ept id="p1">](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Describes how to pass data collections over the pipeline using a book store scenario.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Add-in Pipeline Scenarios<ept id="p1">](http://msdn.microsoft.com/en-us/feb70e0b-8734-494c-aeaf-b567f014043e)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Add-ins and Extensibility<ept id="p1">](../../../docs/framework/add-ins/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>