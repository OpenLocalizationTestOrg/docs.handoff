<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61081f769daee49ef76a5484a560c38d22eee957</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\debugging\icordebugprocess6-enablevirtualmodulesplitting-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0f958bb8f091283953f7365501e34f9ade5568f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dba6b261e40e906f2fa998968cf0c895071ae3a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ICorDebugProcess6::EnableVirtualModuleSplitting Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ICorDebugProcess6::EnableVirtualModuleSplitting Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Enables or disables virtual module splitting.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to enable virtual module splitting; <ph id="ph2">`false`</ph> to disable it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Virtual module splitting causes <bpt id="p1">[</bpt>ICorDebug<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebug-interface.md)</ept> to recognize modules that were merged together during the build process and present them as a group of separate modules rather than a single large module.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Doing this changes the behavior of various <bpt id="p1">[</bpt>ICorDebug<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebug-interface.md)</ept> methods described below.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This method is available with .NET Native only.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This method can be called and the value of <ph id="ph1">`enableSplitting`</ph> can be changed at any time.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It does not cause any stateful functional changes in an <bpt id="p1">[</bpt>ICorDebug<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebug-interface.md)</ept> object, other than altering the behavior of the methods listed in the <bpt id="p2">[</bpt>Virtual module splitting and the unmanaged debugging APIs<ept id="p2">](#APIs)</ept> section at the time they are called.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using virtual modules does incur a performance penalty when calling those methods.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In addition, significant in-memory caching of the virtualized metadata may be required to correctly implement the <bpt id="p1">[</bpt>IMetaDataImport<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)</ept> APIs, and these caches may be retained even after virtual module splitting has been turned off.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Terminology</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following terms are used when describing virtual module splitting:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>container modules, or containers</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The aggregate modules.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>sub-modules, or virtual modules</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The modules found in a container.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>regular modules</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Modules that were not merged at build time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>They are neither container modules nor sub-modules.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Both container modules and sub-modules are represented by ICorDebugModule interface objects.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, the behavior of the interface is slightly different in each case, as the <ph id="ph1">\&lt;</ph>x-ref to section&gt; section describes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Modules and assemblies</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Multi-module assemblies are not supported for assembly merging scenarios, so there is a one-to-one relationship between a module and an assembly.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each ICorDebugModule object, regardless of whether it represents a container module or a sub-module, has a corresponding ICorDebugAssembly object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorDebugModule::GetAssembly<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugmodule-getassembly-method.md)</ept> method converts from the module to the assembly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To map in the other direction, the <bpt id="p1">[</bpt>ICorDebugAssembly::EnumerateModules<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugassembly-enumeratemodules-method.md)</ept> method enumerates only 1 module.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because assembly and module form a tightly coupled pair in this case, the terms assembly and module become largely interchangeable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Behavioral differences</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Container modules have the following behaviors and characteristics:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Their metadata for all of the constituent sub-modules is merged together.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Their type names may be mangled.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorDebugModule::GetName<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugmodule-getname-method.md)</ept> method returns the path to an on-disk module.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorDebugModule::GetSize<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugmodule-getsize-method.md)</ept> method returns the size of that image.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The ICorDebugAssembly3.EnumerateContainedAssemblies method lists the sub-modules.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The ICorDebugAssembly3.GetContainerAssembly method returns <ph id="ph1">`S_FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Sub-modules have the following behaviors and characteristics:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>They have a reduced set of metadata that corresponds only to the original assembly that was merged.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The metadata names are not mangled.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Metadata tokens are unlikely to match the tokens in the original assembly before it was merged in the build process.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorDebugModule::GetName<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugmodule-getname-method.md)</ept> method returns the assembly name, not a file path.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>ICorDebugModule::GetSize<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugmodule-getsize-method.md)</ept> method returns the original unmerged image size.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The ICorDebugModule3.EnumerateContainedAssemblies method returns <ph id="ph1">`S_FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The ICorDebugAssembly3.GetContainerAssembly method returns the containing module.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Interfaces retrieved from modules</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A variety of interfaces can be created or retrieved from modules.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Some of these include:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An ICorDebugClass object, which is returned by the <bpt id="p1">[</bpt>ICorDebugModule::GetClassFromToken<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugmodule-getclassfromtoken-method.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>An ICorDebugAssembly object, which is returned by the <bpt id="p1">[</bpt>ICorDebugModule::GetAssembly<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugmodule-getassembly-method.md)</ept> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>These objects are always cached by <bpt id="p1">[</bpt>ICorDebug<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebug-interface.md)</ept>, and they will have the same pointer identity regardless of whether they were created or queried from the container module or a sub-module.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The sub-module provides a filtered view of these cached objects, not a separate cache with its own copies.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Virtual module splitting and the unmanaged debugging APIs</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following table shows how virtual module splitting affects the behavior of other methods in the unmanaged debugging API.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugFunction::GetModule<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugfunction-getmodule-method.md)</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns the sub-module this function was originally defined in</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns the container module this function was merged into</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugClass::GetModule<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugclass-getmodule-method.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns the sub-module this class was originally defined in.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns the container module this class was merged into.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>ICorDebugModuleDebugEvent::GetModule</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns the container module that was loaded.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Sub-modules are not given load events regardless of this setting.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Returns the container module that was loaded.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugAppDomain::EnumerateAssemblies<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugappdomain-enumerateassemblies-method.md)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Returns a list of sub-assemblies and regular assemblies; no container assemblies are included.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  If any container assembly is missing symbols, none of its sub-assemblies will be enumerated.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If any regular assembly is missing symbols, it may or may not be enumerated.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns a list of container assemblies and regular assemblies; no sub-assemblies are included.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept>  If any regular assembly is missing symbols, it may or may not be enumerated.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugCode::GetCode<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugcode-getcode-method.md)</ept> (when referring to IL code only)</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns IL that would be valid in a pre-merge assembly image.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Specifically, any inline metadata tokens will correctly be TypeRef or MemberRef tokens when the types being referred to are not defined in the virtual module containing the IL.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>These TypeRef or MemberRef tokens can be looked up in the <bpt id="p1">[</bpt>IMetaDataImport<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataimport-interface.md)</ept> object for the corresponding virtual ICorDebugModule object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns the IL in the post-merge assembly image.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorDebug.idl, CorDebug.h</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[net_46_native](../../../../includes/net-46-native-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugProcess6 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess6-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debugging Interfaces<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/debugging-interfaces.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>