<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88f77498f7eb4e0c9959de60e2019501de2057f5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-class-directive.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17468dd047680f73650bd65f156185b5fae502ad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b9a97906a042f249c6256a5565812a8213d287a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>x:Class Directive | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Class Directive</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Configures XAML markup compilation to join partial classes between markup and code-behind.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The code partial class is defined in a separate code file in a <ph id="ph1">[!INCLUDE[TLA#tla_cls](../../../includes/tlasharptla-cls-md.md)]</ph> language, whereas the markup partial class is typically created by code generation during XAML compilation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Optional.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Specifies a <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)]</ph> namespace that contains the partial class identified by <ph id="ph2">`classname`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`namespace`</ph> is specified, a dot (.) separates <ph id="ph2">`namespace`</ph> and <ph id="ph3">`classname`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifies the <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../includes/tla2sharptla-clr-md.md)]</ph> name of the partial class that connects the loaded XAML and your code-behind for that XAML.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Class`</ph> can only be specified on the root element of a XAML production.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Class`</ph> is invalid on any object that has a parent in the XAML production.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Section 4.3.1.6<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`namespace`</ph> value may contain additional dots to organize related namespaces into name hierarchies, which is a common technique in .NET Framework programming.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Only the last dot in a string of <ph id="ph1">`x:Class`</ph> values is interpreted to separate <ph id="ph2">`namespace`</ph> and <ph id="ph3">`classname.`</ph> The class that is used as <ph id="ph4">`x:Class`</ph> cannot be a nested class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Nested classes are not allowed because determining the meaning of dots for <ph id="ph1">`x:Class`</ph> strings is ambiguous if nested classes are permitted.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In existing programming models that use <ph id="ph1">`x:Class`</ph>, <ph id="ph2">`x:Class`</ph> is optional in the sense that it is entirely valid to have a XAML page that has no code-behind.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>However, that capability interacts with the build actions as implemented by frameworks that use XAML.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Class`</ph> capability is also influenced by the roles that various classifications of XAML-specified content have in an application model and in the corresponding build actions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If your XAML declares event-handling attribute values or instantiates custom elements where the defining classes are in the code-behind class, you have to provide the <ph id="ph1">`x:Class`</ph> directive reference (or <bpt id="p1">[</bpt>x:Subclass<ept id="p1">](../../../docs/framework/xaml-services/x-subclass-directive.md)</ept>) to the appropriate class for code-behind.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`x:Class`</ph> directive must be a string that specifies the fully qualified name of a class but without any assembly information (equivalent to the <ph id="ph2">&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For simple applications, you can omit CLR namespace information if the code-behind is also structured in that manner (code definition starts at the class level).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The code-behind file for a page or application definition must be within a code file that is included as part of the project that produces a compiled application and involves markup compilation.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You must follow name rules for CLR classes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Framework Design Guidelines<ept id="p1">](../../../docs/standard/design-guidelines/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By default, the code-behind class must be <ph id="ph1">`public`</ph>; however, you can define it at a different access level by using the <bpt id="p1">[</bpt>x:ClassModifier Directive<ept id="p1">](../../../docs/framework/xaml-services/x-classmodifier-directive.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This interpretation of the <ph id="ph1">`x:Class`</ph> attribute applies only to a CLR-based XAML implementation, in particular to .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Other XAML implementations that are not based on CLR and that do not use .NET Framework XAML Services might use a different resolution formula for connecting XAML markup and backing run-time code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about more general interpretations of <ph id="ph1">`x:Class`</ph>, see <bpt id="p1">[</bpt><ph id="ph2">\[</ph>MS-XAML<ph id="ph3">\]</ph><ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>At a certain level of architecture, the meaning of <ph id="ph1">`x:Class`</ph> is undefined in .NET Framework XAML Services.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is because .NET Framework XAML Services does not specify the programming model by which XAML markup and backing code are connected.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Additional uses of the <ph id="ph1">`x:Class`</ph> directive might be implemented by specific frameworks that use programming models or application models to define how to connect XAML markup and CLR-based code-behind.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each framework can have its own build actions that enable some of the behavior or specific components that must be included in the build environment.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Within a framework, build actions can also vary depending on the specific CLR language that is used for the code-behind.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>x:Class in the WPF Programming Model</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In WPF applications and the WPF application model, <ph id="ph1">`x:Class`</ph> can be declared as an attribute for any element that is the root of a XAML file and is being compiled (where the XAML is included in a WPF application project with <ph id="ph2">`Page`</ph> build action), or for the <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph> root in the application definition of a compiled WPF application.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Declaring <ph id="ph1">`x:Class`</ph> on an element other than a page root or application root, or on a WPF XAML file that is not compiled, causes a compile-time error under the <ph id="ph2">[!INCLUDE[net_v30_short](../../../includes/net-v30-short-md.md)]</ph> and <ph id="ph3">[!INCLUDE[net_v35_short](../../../includes/net-v35-short-md.md)]</ph> WPF XAML compiler.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For information about other aspects of <ph id="ph1">`x:Class`</ph> handling in WPF, see <bpt id="p1">[</bpt>Code-Behind and XAML in WPF<ept id="p1">](../../../docs/framework/wpf/advanced/code-behind-and-xaml-in-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>x:Class for Windows Workflow Foundation</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For Windows Workflow Foundation, <ph id="ph1">`x:Class`</ph> names the class of a custom activity composed entirely in XAML, or names the partial class of the XAML page for  an activity designer with code-behind.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Silverlight Usage Notes</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Class`</ph> for Silverlight is documented separately.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XAML Namespace (x:) Language Features (Silverlight)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=199081)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Subclass Directive<ept id="p1">](../../../docs/framework/xaml-services/x-subclass-directive.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>XAML and Custom Classes for WPF<ept id="p1">](../../../docs/framework/wpf/advanced/xaml-and-custom-classes-for-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>x:ClassModifier Directive<ept id="p1">](../../../docs/framework/xaml-services/x-classmodifier-directive.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](../../../docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>