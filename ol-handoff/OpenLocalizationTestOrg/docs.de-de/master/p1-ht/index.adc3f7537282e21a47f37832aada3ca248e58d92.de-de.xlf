<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65e882db800d51c69f6f135b4d4529af0bc86653</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68624ca19ba667e82e5f63980bb1c68581c33505</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce82e57944f9ee02e5056e174d21a90530452350</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Language-Integrated Query (LINQ) (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Language Integrated Query (LINQ)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Language-Integrated Query (LINQ) is the name for a set of technologies based on the integration of query capabilities directly into the C# language.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Traditionally, queries against data are expressed as simple strings without type checking at compile time or IntelliSense support.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Furthermore, you have to learn a different query language for each type of data source: SQL databases, XML documents, various Web services, and so on.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>With LINQ, a query is a first-class language construct, just like classes, methods, events.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For a developer who writes queries, the most visible "language-integrated" part of LINQ is the query expression.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Query expressions are written in a declarative <bpt id="p1">*</bpt>query syntax<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By using query syntax, you can perform filtering, ordering, and grouping operations on data sources with a minimum of code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You use the same basic query expression patterns to query and transform data in SQL databases, ADO .NET Datasets, XML documents and streams, and .NET collections.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows the complete query operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The complete operation includes creating a data source, defining the query expression, and executing the query in a <ph id="ph1">`foreach`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideLINQ#11<ept id="p2">](../../../../../samples/snippets/csharp/concepts/linq/index_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Query expression overview</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Query expressions can be used to query and to transform data from any LINQ-enabled data source.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, a single query can retrieve data from a SQL database, and produce an XML stream as output.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Query expressions are easy to master because they use many familiar C# language constructs.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The variables in a query expression are all strongly typed, although in many cases you do not have to provide the type explicitly because the compiler can infer it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Type relationships in LINQ query operations<ept id="p1">](type-relationships-in-linq-query-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A query is not executed until you iterate over the query variable, for example, in a <ph id="ph1">`foreach`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to LINQ queries<ept id="p1">](introduction-to-linq-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>At compile time, query expressions are converted to Standard Query Operator method calls according to the rules set forth in the C# specification.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Any query that can be expressed by using query syntax can also be expressed by using method syntax.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>However, in most cases query syntax is more readable and concise.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>C# language specification<ept id="p1">](../../../language-reference/language-specification.md)</ept> and <bpt id="p2">[</bpt>Standard query operators overview<ept id="p2">](standard-query-operators-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As a rule when you write LINQ queries, we recommend that you use query syntax whenever possible and method syntax whenever necessary.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>There is no semantic or performance difference between the two different forms.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Query expressions are often more readable than equivalent expressions written in method syntax.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Some query operations, such as <ph id="ph1">&lt;xref:System.Linq.Enumerable.Count%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Enumerable.Max%2A&gt;</ph>, have no equivalent query expression clause and must therefore be expressed as a method call.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Method syntax can be combined with query syntax in various ways.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Query syntax and method syntax in LINQ<ept id="p1">](query-syntax-and-method-syntax-in-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Query expressions can be compiled to expression trees or to delegates, depending on the type that the query is applied to.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> queries are compiled to delegates.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.IQueryable&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph> queries are compiled to expression trees.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Expression trees<ept id="p1">](../../../expression-trees.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To learn more details about LINQ, start by becoming familiar with some basic concepts in <bpt id="p1">[</bpt>Query expression basics<ept id="p1">](../../../linq/query-expression-basics.md)</ept>, and then read the documentation for the LINQ technology in which you are interested:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>XML documents: <bpt id="p1">[</bpt>LINQ to XML<ept id="p1">](linq-to-xml.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>ADO.NET Entity Framework: <bpt id="p1">[</bpt>LINQ to entities<ept id="p1">](../../../../framework/data/adonet/ef/language-reference/linq-to-entities.md)</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>.NET collections, files, strings and so on: <bpt id="p1">[</bpt>LINQ to objects<ept id="p1">](linq-to-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To gain a deeper understanding of LINQ in general, see <bpt id="p1">[</bpt>LINQ in C#<ept id="p1">](../../../linq/linq-in-csharp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To start working with LINQ in C#, see the tutorial <bpt id="p1">[</bpt>Working with LINQ<ept id="p1">](../../../tutorials/working-with-linq.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>