<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75726b9864abc0c9b556085e5215c6692d80fb12</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\nullable-types\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a86ec8e08ae46a19e41e8d50d143863d04cab13a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7d857030631d7f593eedf5fbb8365a632929733a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Nullable Types (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Nullable Types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Nullable types are instances of the <ph id="ph1">&lt;xref:System.Nullable%601?displayProperty=fullName&gt;</ph> struct.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A nullable type can represent the correct range of values for its underlying value type, plus an additional <ph id="ph1">`null`</ph> value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">`Nullable&lt;Int32&gt;`</ph>, pronounced "Nullable of Int32," can be assigned any value from -2147483648 to 2147483647, or it can be assigned the <ph id="ph2">`null`</ph> value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Nullable&lt;bool&gt;`</ph> can be assigned the values <bpt id="p1">[</bpt>true<ept id="p1">](../../../csharp/language-reference/keywords/true.md)</ept>, <bpt id="p2">[</bpt>false<ept id="p2">](../../../csharp/language-reference/keywords/false.md)</ept>, or <bpt id="p3">[</bpt>null<ept id="p3">](../../../csharp/language-reference/keywords/null.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The ability to assign <ph id="ph1">`null`</ph> to numeric and Boolean types is especially useful when you are dealing with databases and other data types that contain elements that may not be assigned a value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, a Boolean field in a database can store the values <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>, or it may be undefined.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The example will display the output:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>Using Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Nullable Types Overview</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Nullable types have the following characteristics:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Nullable types represent value-type variables that can be assigned the value of <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You cannot create a nullable type based on a reference type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(Reference types already support the <ph id="ph1">`null`</ph> value.)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The syntax <ph id="ph1">`T?`</ph> is shorthand for <ph id="ph2">&lt;xref:System.Nullable%601&gt;</ph>, where <ph id="ph3">`T`</ph> is a value type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The two forms are interchangeable.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assign a value to a nullable type just as you would for an ordinary value type, for example <ph id="ph1">`int? x = 10;`</ph> or <ph id="ph2">`double? d = 4.108`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A nullable type can also be assigned the value <ph id="ph1">`null`</ph>: <ph id="ph2">`int? x = null.`</ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName&gt;</ph> method to return either the assigned value, or the default value for the underlying type if the value is <ph id="ph2">`null`</ph>, for example <ph id="ph3">`int j = x.GetValueOrDefault();`</ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Nullable%601.HasValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Nullable%601.Value%2A&gt;</ph> read-only properties to test for null and retrieve the value, as shown in the following example: <ph id="ph3">`if(x.HasValue) j = x.Value;`</ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`HasValue`</ph> property returns <ph id="ph2">`true`</ph> if the variable contains a value, or <ph id="ph3">`false`</ph> if it is <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Value`</ph> property returns a value if one is assigned.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Otherwise, a <ph id="ph1">&lt;xref:System.InvalidOperationException?displayProperty=fullName&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The default value for <ph id="ph1">`HasValue`</ph> is <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Value`</ph> property has no default value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`==`</ph> and <ph id="ph2">`!=`</ph> operators with a nullable type, as shown in the following example: <ph id="ph3">`if (x != null) y = x;`</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`??`</ph> operator to assign a default value that will be applied when a nullable type whose current value is <ph id="ph2">`null`</ph> is assigned to a non-nullable type, for example <ph id="ph3">`int? x = null; int y = x ?? -1;`</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Nested nullable types are not allowed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following line will not compile: <ph id="ph1">`Nullable&lt;Nullable&lt;int&gt;&gt; n;`</ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/using-nullable-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boxing Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/boxing-nullable-types.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>?? Operator<ept id="p1">](../../../csharp/language-reference/operators/null-conditional-operator.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C#<ept id="p1">](../../../csharp/csharp.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What exactly does 'lifted' mean?<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=112382)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>