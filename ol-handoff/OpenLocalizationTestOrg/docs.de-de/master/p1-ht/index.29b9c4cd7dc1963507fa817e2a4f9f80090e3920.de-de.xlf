<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84447f877f0bb5af8eff737b1ec2503539185bbf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\threading\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d24e52c9ac598231b899cf0c21526ee981f9c2a5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4184e6d2cb12e902056d444da8c48ca08bfe488a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Threading (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Threading (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Threading enables your C# program to perform concurrent processing so that you can do more than one operation at a time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you can use threading to monitor input from the user, perform background tasks, and handle simultaneous streams of input.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Threads have the following properties:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Threads enable your program to perform concurrent processing.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The .NET Framework <ph id="ph1">&lt;xref:System.Threading&gt;</ph> namespace makes using threads easier.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Threads share the application's resources.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Using Threads and Threading<ept id="p1">](https://msdn.microsoft.com/library/e1dx6b2h)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By default, a C# program has one thread.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>However, auxiliary threads can be created and used to execute code in parallel with the primary thread.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>These threads are often called <bpt id="p1">*</bpt>worker threads<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Worker threads can be used to perform time-consuming or time-critical tasks without tying up the primary thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, worker threads are often used in server applications to fulfill incoming requests without waiting for the previous request to be completed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Worker threads are also used to perform "background" tasks in desktop applications so that the main thread--which drives user interface elements--remains responsive to user actions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Threading solves problems with throughput and responsiveness, but it can also introduce resource-sharing issues such as deadlocks and race conditions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Multiple threads are best for tasks that require different resources such as file handles and network connections.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assigning multiple threads to a single resource is likely to cause synchronization issues, and having threads frequently blocked when waiting for other threads defeats the purpose of using multiple threads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A common strategy is to use worker threads to perform time-consuming or time-critical tasks that do not require many of the resources used by other threads.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Naturally, some resources in your program must be accessed by multiple threads.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For these cases, the <ph id="ph1">&lt;xref:System.Threading&gt;</ph> namespace provides classes for synchronizing threads.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These classes include <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Monitor&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Interlocked&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>, and <ph id="ph5">&lt;xref:System.Threading.ManualResetEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use some or all these classes to synchronize the activities of multiple threads, but some support for threading is supported by the C# language.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>Lock Statement<ept id="p1">](../../../../csharp/language-reference/keywords/lock-statement.md)</ept> provides synchronization features through implicit use of <ph id="ph1">&lt;xref:System.Threading.Monitor&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../../csharp/programming-guide/concepts/threading/includes/net_v40_long_md.md)]</ph>, multithreaded programming is greatly simplified with the <ph id="ph2">&lt;xref:System.Threading.Tasks.Parallel?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> classes, <bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](https://msdn.microsoft.com/library/dd460688)</ept>, new concurrent collection classes in the <ph id="ph4">&lt;xref:System.Collections.Concurrent?displayProperty=fullName&gt;</ph> namespace, and a new programming model that is based on the concept of tasks rather than threads.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](https://msdn.microsoft.com/library/dd460693)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multithreaded Applications (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/multithreaded-applications.md)</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Describes how to create and use threads.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parameters and Return Values for Multithreaded Procedures (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md)</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Describes how to pass and return parameters with multithreaded applications.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Multithreading with the BackgroundWorker Component (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Shows how to create a simple multithreaded application.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Synchronization (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/thread-synchronization.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Describes how to control the interactions of threads.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Timers (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/thread-timers.md)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Describes how to run procedures on separate threads at fixed intervals.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Thread Pooling (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/thread-pooling.md)</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Describes how to use a pool of worker threads that are managed by the system.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Use a Thread Pool (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/how-to-use-a-thread-pool.md)</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Demonstrates synchronized use of multiple threads in the thread pool.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading<ept id="p1">](https://msdn.microsoft.com/library/3e8s7xdd)</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Describes how to implement threading in the .NET Framework.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>