<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="query-expression-basics.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a52751a1d704e3ad480e54dadb717f1ce7a402c0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\linq\query-expression-basics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47667ffbf9fe42cd3fe9a48d6f3610d917dd11ba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">996ca5f22a51508c1da8ad20efac427c1edf43cc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Query expression basics</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Introduces concepts related to query expressions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>.NET, .NET Core, C#</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Query expression basics</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What is a query and what does it do?</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>query<ept id="p1">*</ept> is a set of instructions that describes what data to retrieve from a given data source (or sources) and what shape and organization the returned data should have.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A query is distinct from the results that it produces.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Generally, the source data is organized logically as a sequence of elements of the same kind.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, a SQL database table contains a sequence of rows.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In an XML file, there is a "sequence" of XML elements (although these are organized hierarchically in a tree structure).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An in-memory collection contains a sequence of objects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>From an application's viewpoint, the specific type and structure of the original source data is not important.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The application always sees the source data as an <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.IQueryable%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, in LINQ to XML, the source data is made visible as an <ph id="ph1">`IEnumerable`</ph><ph id="ph2">\&lt;</ph><ph id="ph3">&lt;xref:System.Xml.Linq.XElement&gt;</ph>&gt;.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Given this source sequence, a query may do one of three things:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Retrieve a subset of the elements to produce a new sequence without modifying the individual elements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The query may then sort or group the returned sequence in various ways, as shown in the following example (assume <ph id="ph1">`scores`</ph> is an <ph id="ph2">`int[]`</ph>):</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Retrieve a sequence of elements as in the previous example but transform them to a new type of object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, a query may retrieve only the last names from certain customer records in a data source.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Or it may retrieve the complete record and then use it to construct another in-memory object type or even XML data before generating the final result sequence.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example shows a projection from an <ph id="ph1">`int`</ph> to a <ph id="ph2">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note the new type of <ph id="ph1">`highScoresQuery`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieve a singleton value about the source data, such as:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The number of elements that match a certain condition.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The element that has the greatest or least value.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first element that matches a condition, or the sum of particular values in a specified set of elements.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the following query returns the number of scores greater than 80 from the <ph id="ph1">`scores`</ph> integer array:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the previous example, note the use of parentheses around the query expression before the call to the <ph id="ph1">`Count`</ph> method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also express this by using a new variable to store the concrete result.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This technique is more readable because it keeps the variable that stores the query separate from the query that stores a result.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the previous example, the query is executed in the call to <ph id="ph1">`Count`</ph>, because <ph id="ph2">`Count`</ph> must iterate over the results in order to determine the number of elements returned by <ph id="ph3">`highScoresQuery`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>What is a query expression?</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>query expression<ept id="p1">*</ept> is a query expressed in query syntax.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A query expression is a first-class language construct.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is just like any other expression and can be used in any context in which a C# expression is valid.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A query expression consists of a set of clauses written in a declarative syntax similar to SQL or XQuery.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Each clause in turn contains one or more C# expressions, and these expressions may themselves be either a query expression or contain a query expression.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A query expression must begin with a <bpt id="p1">[</bpt>from<ept id="p1">](../language-reference/keywords/from-clause.md)</ept> clause and must end with a <bpt id="p2">[</bpt>select<ept id="p2">](../language-reference/keywords/select-clause.md)</ept> or <bpt id="p3">[</bpt>group<ept id="p3">](../language-reference/keywords/group-clause.md)</ept> clause.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Between the first <ph id="ph1">`from`</ph> clause and the last <ph id="ph2">`select`</ph> or <ph id="ph3">`group`</ph> clause, it can contain one or more of these optional clauses: <bpt id="p1">[</bpt>where<ept id="p1">](../language-reference/keywords/where-clause.md)</ept>, <bpt id="p2">[</bpt>orderby<ept id="p2">](../language-reference/keywords/orderby-clause.md)</ept>, <bpt id="p3">[</bpt>join<ept id="p3">](../language-reference/keywords/join-clause.md)</ept>, <bpt id="p4">[</bpt>let<ept id="p4">](../language-reference/keywords/let-clause.md)</ept> and even additional <bpt id="p5">[</bpt>from<ept id="p5">](../language-reference/keywords/from-clause.md)</ept> clauses.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can also use the <bpt id="p1">[</bpt>into<ept id="p1">](../language-reference/keywords/into.md)</ept> keyword to enable the result of a <ph id="ph1">`join`</ph> or <ph id="ph2">`group`</ph> clause to serve as the source for additional query clauses in the same query expression.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Query variable</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In LINQ, a query variable is any variable that stores a <bpt id="p1">*</bpt>query<ept id="p1">*</ept> instead of the <bpt id="p2">*</bpt>results<ept id="p2">*</ept> of a query.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>More specifically, a query variable is always an enumerable type that will produce a sequence of elements when it is iterated over in a <ph id="ph1">`foreach`</ph> statement or a direct call to its <ph id="ph2">`IEnumerator.MoveNext`</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following code example shows a simple query expression with one data source, one filtering clause, one ordering clause, and no transformation of the source elements.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`select`</ph> clause ends the query.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the previous example, <ph id="ph1">`scoreQuery`</ph> is a <bpt id="p1">*</bpt>query variable,<ept id="p1">*</ept> which is sometimes referred to as just a <bpt id="p2">*</bpt>query<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The query variable stores no actual result data, which is produced in the <ph id="ph1">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>And when the <ph id="ph1">`foreach`</ph> statement executes, the query results are not returned through the query variable <ph id="ph2">`scoreQuery`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Rather, they are returned through the iteration variable <ph id="ph1">`testScore`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`scoreQuery`</ph> variable can be iterated in a second <ph id="ph2">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It will produce the same results as long as neither it nor the data source has been modified.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A query variable may store a query that is expressed in query syntax or method syntax, or a combination of the two.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the following examples, both <ph id="ph1">`queryMajorCities`</ph> and <ph id="ph2">`queryMajorCities2`</ph> are query variables:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>On the other hand, the following two examples show variables that are not query variables even through each is initialized with a query.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>They are not query variables because they store results:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information about the different ways to express queries, see <bpt id="p1">[</bpt>Query syntax and method syntax in LINQ<ept id="p1">](../programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Explicit and implicit typing of query variables</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This documentation usually provides the explicit type of the query variable in order to show the type relationship between the query variable and the <bpt id="p1">[</bpt>select clause<ept id="p1">](../language-reference/keywords/select-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>However, you can also use the <bpt id="p1">[</bpt>var<ept id="p1">](../language-reference/keywords/var.md)</ept> keyword to instruct the compiler to infer the type of a query variable (or any other local variable) at compile time.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example, the query example that was shown previously in this topic can also be expressed by using implicit typing:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implicitly typed local variables<ept id="p1">](../programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept> and <bpt id="p2">[</bpt>Type relationships in LINQ query operations<ept id="p2">](../programming-guide/concepts/linq/type-relationships-in-linq-query-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Starting a query expression</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A query expression must begin with a <ph id="ph1">`from`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It specifies a data source together with a range variable.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The range variable represents each successive element in the source sequence as the source sequence is being traversed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The range variable is strongly typed based on the type of elements in the data source.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the following example, because <ph id="ph1">`countries`</ph> is an array of <ph id="ph2">`Country`</ph> objects, the range variable is also typed as <ph id="ph3">`Country`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the range variable is strongly typed, you can use the dot operator to access any available members of the type.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The range variable is in scope until the query is exited either with a semicolon or with a <bpt id="p1">*</bpt>continuation<ept id="p1">*</ept> clause.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A query expression may contain multiple <ph id="ph1">`from`</ph> clauses.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Use additional <ph id="ph1">`from`</ph> clauses when each element in the source sequence is itself a collection or contains a collection.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For example, assume that you have a collection of <ph id="ph1">`Country`</ph> objects, each of which contains a collection of <ph id="ph2">`City`</ph> objects named <ph id="ph3">`Cities`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To query the <ph id="ph1">`City`</ph> objects in each <ph id="ph2">`Country`</ph>, use two <ph id="ph3">`from`</ph> clauses as shown here:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>from clause<ept id="p1">](../language-reference/keywords/from-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Ending a query expression</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A query expression must end with either a <ph id="ph1">`group`</ph> clause or a <ph id="ph2">`select`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>group clause</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`group`</ph> clause to produce a sequence of groups organized by a key that you specify.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The key can be any data type.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, the following query creates a sequence of groups that contains one or more <ph id="ph1">`Country`</ph> objects and whose key is a <ph id="ph2">`char`</ph> value.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information about grouping, see <bpt id="p1">[</bpt>group clause<ept id="p1">](../language-reference/keywords/group-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>select clause</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`select`</ph> clause to produce all other types of sequences.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A simple <ph id="ph1">`select`</ph> clause just produces a sequence of the same type of objects as the objects that are contained in the data source.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In this example, the data source contains <ph id="ph1">`Country`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`orderby`</ph> clause just sorts the elements into a new order and the <ph id="ph2">`select`</ph> clause produces a sequence of the reordered <ph id="ph3">`Country`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`select`</ph> clause can be used to transform source data into sequences of new types.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This transformation is also named a <bpt id="p1">*</bpt>projection<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`select`</ph> clause <bpt id="p1">*</bpt>projects<ept id="p1">*</ept> a sequence of anonymous types which contains only a subset of the fields in the original element.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Note that the new objects are initialized by using an object initializer.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For more information about all the ways that a <ph id="ph1">`select`</ph> clause can be used to transform source data, see <bpt id="p1">[</bpt>select clause<ept id="p1">](../language-reference/keywords/select-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Continuations with "into"</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`into`</ph> keyword in a <ph id="ph2">`select`</ph> or <ph id="ph3">`group`</ph> clause to create a temporary identifier that stores a query.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Do this when you must perform additional query operations on a query after a grouping or select operation.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In the following example <ph id="ph1">`countries`</ph> are grouped according to population in ranges of 10 million.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>After these groups are created, additional clauses filter out some groups, and then to sort the groups in ascending order.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To perform those additional operations, the continuation represented by <ph id="ph1">`countryGroup`</ph> is required.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>into<ept id="p1">](../language-reference/keywords/into.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Filtering, ordering, and joining</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Between the starting <ph id="ph1">`from`</ph> clause, and the ending <ph id="ph2">`select`</ph> or <ph id="ph3">`group`</ph> clause, all other clauses (<ph id="ph4">`where`</ph>, <ph id="ph5">`join`</ph>, <ph id="ph6">`orderby`</ph>, <ph id="ph7">`from`</ph>, <ph id="ph8">`let`</ph>) are optional.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Any of the optional clauses may be used zero times or multiple times in a query body.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>where clause</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`where`</ph> clause to filter out elements from the source data based on one or more predicate expressions.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause in the following example has one predicate with two conditions.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>where clause<ept id="p1">](../language-reference/keywords/where-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>orderby clause</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`orderby`</ph> clause to sort the results in either ascending or descending order.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can also specify secondary sort orders.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following example performs a primary sort on the <ph id="ph1">`country`</ph> objects by using the <ph id="ph2">`Area`</ph> property.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It then performs a secondary sort by using the <ph id="ph1">`Population`</ph> property.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ascending`</ph> keyword is optional; it is the default sort order if no order is specified.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>orderby clause<ept id="p1">](../language-reference/keywords/orderby-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>join clause</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`join`</ph> clause to associate and/or combine elements from one data source with elements from another data source based on an equality comparison between specified keys in each element.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In LINQ, join operations are performed on sequences of objects whose elements are different types.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>After you have joined two sequences, you must use a <ph id="ph1">`select`</ph> or <ph id="ph2">`group`</ph> statement to specify which element to store in the output sequence.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can also use an anonymous type to combine properties from each set of associated elements into a new type for the output sequence.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The following example associates <ph id="ph1">`prod`</ph> objects whose <ph id="ph2">`Category`</ph> property matches one of the categories in the <ph id="ph3">`categories`</ph> string array.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Products whose <ph id="ph1">`Category`</ph> does not match any string in <ph id="ph2">`categories`</ph> are filtered out. The <ph id="ph3">`select`</ph> statement projects a new type whose properties are taken from both <ph id="ph4">`cat`</ph> and <ph id="ph5">`prod`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You can also perform a group join by storing the results of the <ph id="ph1">`join`</ph> operation into a temporary variable by using the <bpt id="p1">[</bpt>into<ept id="p1">](../language-reference/keywords/into.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>join clause<ept id="p1">](../language-reference/keywords/join-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>let clause</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`let`</ph> clause to store the result of an expression, such as a method call, in a new range variable.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>In the following example, the range variable <ph id="ph1">`firstName`</ph> stores the first element of the array of strings that is returned by <ph id="ph2">`Split`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>let clause<ept id="p1">](../language-reference/keywords/let-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Subqueries in a query expression</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>A query clause may itself contain a query expression, which is sometimes referred to as a <bpt id="p1">*</bpt>subquery<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Each subquery starts with its own <ph id="ph1">`from`</ph> clause that does not necessarily point to the same data source in the first <ph id="ph2">`from`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>For example, the following query shows a query expression that is used in the select statement to retrieve the results of a grouping operation.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: perform a subquery on a grouping operation<ept id="p1">](perform-a-subquery-on-a-grouping-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# programming guide<ept id="p1">](../programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ query expressions<ept id="p1">](index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query keywords (LINQ)<ept id="p1">](../language-reference/keywords/query-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Standard query operators overview<ept id="p1">](../programming-guide/concepts/linq/standard-query-operators-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>