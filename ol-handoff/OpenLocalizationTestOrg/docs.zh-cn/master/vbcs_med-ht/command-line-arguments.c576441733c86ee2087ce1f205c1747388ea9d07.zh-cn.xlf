<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="command-line-arguments.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4034f1575321c94f003a12a83df617d4a0d50702</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\main-and-command-args\command-line-arguments.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02c8e9e592c500d965a75962b88355c2ec8e3465</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1f3702cb27a5f95030441dfa08be01fb7d5f66c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Command-Line Arguments (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Command-Line Arguments (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can send arguments to the <ph id="ph1">`Main`</ph> method by defining the method in one of the following ways:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To enable command-line arguments in the <ph id="ph1">`Main`</ph> method in a Windows Forms application, you must manually modify the signature of <ph id="ph2">`Main`</ph> in program.cs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The code generated by the Windows Forms designer creates a <ph id="ph1">`Main`</ph> without an input parameter.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">&lt;xref:System.Environment.CommandLine%2A?displayProperty=fullName&gt;</ph> or <ph id="ph2">&lt;xref:System.Environment.GetCommandLineArgs%2A?displayProperty=fullName&gt;</ph> to access the command-line arguments from any point in a console or Windows application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The parameter of the <ph id="ph1">`Main`</ph> method is a <ph id="ph2">&lt;xref:System.String&gt;</ph> array that represents the command-line arguments.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Usually you determine whether arguments exist by testing the <ph id="ph1">`Length`</ph> property, for example:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also convert the string arguments to numeric types by using the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class or the <ph id="ph2">`Parse`</ph> method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the following statement converts the <ph id="ph1">`string`</ph> to a <ph id="ph2">`long`</ph> number by using the <ph id="ph3">&lt;xref:System.Int64.Parse%2A&gt;</ph> method:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It is also possible to use the C# type <ph id="ph1">`long`</ph>, which aliases <ph id="ph2">`Int64`</ph>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`Convert`</ph> class method <ph id="ph2">`ToInt64`</ph> to do the same thing:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Int64.Parse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows how to use command-line arguments in a console application.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The application takes one argument at run time, converts the argument to an integer, and calculates the factorial of the number.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied, the application issues a message that explains the correct usage of the program.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To compile and run the application from a command prompt, follow these steps:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Paste the following code into any text editor, and then save the file as  a text file with the name <ph id="ph1">`Factorial.cs`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> screen or <bpt id="p2">**</bpt>Start<ept id="p2">**</ept> menu, open a Visual Studio <bpt id="p3">**</bpt>Developer Command Prompt<ept id="p3">**</ept> window, and then navigate to the folder that contains the file that you just created.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Enter the following command to compile the application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If your application has no compilation errors, an executable file that's named <ph id="ph1">`Factorial.exe`</ph> is created.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Enter the following command to calculate the factorial of 3:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The command produces this output: <ph id="ph1">`The factorial of 3 is 6.`</ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When running an application in Visual Studio, you can specify command-line arguments in the <bpt id="p1">[</bpt>Debug Page, Project Designer<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/reference/debug-page-project-designer)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more examples about how to use command-line arguments, see <bpt id="p1">[</bpt>How to: Create and Use Assemblies Using the Command Line<ept id="p1">](http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Main() and Command-Line Arguments<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Display Command Line Arguments<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/how-to-display-command-line-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Access Command-Line Arguments Using foreach<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/how-to-access-command-line-arguments-using-foreach.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Main() Return Values<ept id="p1">](../../../csharp/programming-guide/main-and-command-args/main-return-values.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/classes.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>