<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="using-nullable-types.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88397167b12a00bf5e99a0537148a2957b9f0bd8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\nullable-types\using-nullable-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05fbee8e06b7517fd272ae9ed29212361cb24f78</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fd054c8f872a4cc4bbce9e5479839209713b8ac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Using Nullable Types (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Nullable Types (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Nullable types can represent all the values of an underlying type, and an additional <bpt id="p1">[</bpt>null<ept id="p1">](../../../csharp/language-reference/keywords/null.md)</ept> value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Nullable types are declared in one of two ways:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`T`</ph> is the underlying type of the nullable type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`T`</ph> can be any value type including <ph id="ph2">`struct`</ph>; it cannot be a reference type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For an example of when you might use a nullable type, consider how an ordinary Boolean variable can have two values: true and false.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There is no value that signifies "undefined".</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In many programming applications, most notably database interactions, variables can occur in an undefined state.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, a field in a database may contain the values true or false, but it may also contain no value at all.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Similarly, reference types can be set to <ph id="ph1">`null`</ph> to indicate that they are not initialized.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This disparity can create extra programming work, with additional variables used to store state information, the use of special values, and so on.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The nullable type modifier enables C# to create value-type variables that indicate an undefined value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Examples of Nullable Types</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Any value type may be used as the basis for a nullable type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Members of Nullable Types</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each instance of a nullable type has two public read-only properties:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`HasValue`</ph> is of type <ph id="ph2">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It is set to <ph id="ph1">`true`</ph> when the variable contains a non-null value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Value`</ph> is of the same type as the underlying type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`HasValue`</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">`Value`</ph> contains a meaningful value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`HasValue`</ph> is <ph id="ph2">`false`</ph>, accessing <ph id="ph3">`Value`</ph> will throw a <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`HasValue`</ph> member is used to test whether the variable contains a value before it tries to display it.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Testing for a value can also be done as in the following example:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Explicit Conversions</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A nullable type can be cast to a regular type, either explicitly with a cast, or by using the <ph id="ph1">`Value`</ph> property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If a user-defined conversion is defined between two data types, the same conversion can also be used with the nullable versions of these data types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Implicit Conversions</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A variable of nullable type can be set to null with the <ph id="ph1">`null`</ph> keyword, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The conversion from an ordinary type to a nullable type, is implicit.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The predefined unary and binary operators and any user-defined operators that exist for value types may also be used by nullable types.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These operators produce a null value if the operands are null; otherwise, the operator uses the contained value to calculate the result.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you perform comparisons with nullable types, if the value of one of the nullable types is null and the other is not, all comparisons evaluate to <ph id="ph1">`false`</ph> except for <ph id="ph2">`!=`</ph> (not equal).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is important not to assume that because a particular comparison returns <ph id="ph1">`false`</ph>, the opposite case returns <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the following example, 10 is not greater than, less than, nor equal to null.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Only <ph id="ph1">`num1 != num2`</ph> evaluates to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>An equality comparison of two nullable types that are both null evaluates to <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The ??</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`??`</ph> operator defines a default value that is returned when a nullable type is assigned to a non-nullable type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This operator can also be used with multiple nullable types.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The bool? type</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bool?`</ph> nullable type can contain three different values: <bpt id="p1">[</bpt>true<ept id="p1">](../../../csharp/language-reference/keywords/true.md)</ept>, <bpt id="p2">[</bpt>false<ept id="p2">](../../../csharp/language-reference/keywords/false.md)</ept> and <bpt id="p3">[</bpt>null<ept id="p3">](../../../csharp/language-reference/keywords/null.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For information about how to cast from a bool? to a bool, see <bpt id="p1">[</bpt>How to: Safely Cast from bool? to bool<ept id="p1">](../../../csharp/programming-guide/nullable-types/how-to-safely-cast-from-bool-to-bool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Nullable Booleans are like the Boolean variable type that is used in SQL.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To ensure that the results produced by the <ph id="ph1">`&amp;`</ph> and <ph id="ph2">`|`</ph> operators are consistent with the three-valued Boolean type in SQL, the following predefined operators are provided:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The results of these operators are listed in the following table:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>X</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>y</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>x&amp;y</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>x&amp;#124;y</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>true</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>false</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>null</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boxing Nullable Types<ept id="p1">](../../../csharp/programming-guide/nullable-types/boxing-nullable-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nullable Value Types<ept id="p1">](../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>