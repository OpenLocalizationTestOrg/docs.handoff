<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="switch.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39fd3a458303c33fe679684d5dfacdfbdb495e4b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\switch.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad6d93438ee54c986b250d772f4d529091d11f72</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b47c6da441132c76f4992447b952b9ac00b15fc5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>switch keyword (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>switch (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`switch`</ph> is a selection statement that chooses a single <bpt id="p1">*</bpt>switch section<ept id="p1">*</ept> to execute from a list of candidates based on a pattern match with the <bpt id="p2">*</bpt>match expression<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`switch`</ph> statement is often used as an alternative to an <bpt id="p1">[</bpt>if-else<ept id="p1">](if-else.md)</ept> construct if a single expression is tested against three or more conditions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`switch`</ph> statement determines whether a variable of type <ph id="ph2">`Color`</ph> has one of three values:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is equivalent to the following example that uses an <ph id="ph1">`if`</ph><ph id="ph2">-</ph><ph id="ph3">`else`</ph> construct.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The match expression</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The match expression provides the value to match against the patterns in <ph id="ph1">`case`</ph> labels.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In C# 6, the match expression must be an expression that returns a value of the following types:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>a <bpt id="p1">[</bpt>char<ept id="p1">](char.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>a <bpt id="p1">[</bpt>string<ept id="p1">](string.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>a <bpt id="p1">[</bpt>bool<ept id="p1">](bool.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>an integral value, such as an <bpt id="p1">[</bpt>int<ept id="p1">](int.md)</ept> or a <bpt id="p2">[</bpt>long<ept id="p2">](long.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>an <bpt id="p1">[</bpt>enum<ept id="p1">](enum.md)</ept> value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, the match expression can be any non-null expression.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The switch section</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`switch`</ph> statement includes one or more switch sections.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each switch section contains one or more <bpt id="p1">*</bpt>case labels<ept id="p1">*</ept> followed by one or more statements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows a simple <ph id="ph1">`switch`</ph> statement that has three switch sections.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each switch section has one case label, such as <ph id="ph1">`case 1:`</ph>, and two statements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`switch`</ph> statement can include any number of switch sections, and each section can have one or more case labels, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, no two case labels may contain the same expression.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Only one switch section in a switch statement executes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>C# does not allow execution to continue from one switch section to the next.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because of this, the following code generates a compiler error, CS0163: "Control cannot fall through from one case label (<ph id="ph1">&lt;case label&gt;</ph>) to another."</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This requirement is usually met by explicitly exiting the switch section by using a <bpt id="p1">[</bpt>break<ept id="p1">](break.md)</ept>, <bpt id="p2">[</bpt>goto<ept id="p2">](goto.md)</ept>, or <bpt id="p3">[</bpt>return<ept id="p3">](return.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, the following code is also valid, because it ensures that program control cannot fall through to the <ph id="ph1">`default`</ph> switch section.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Execution of the statement list in the switch section with a case label that matches the match expression begins with the first statement and proceeds through the statement list, typically until a jump statement, such as a <ph id="ph1">`break`</ph>, <ph id="ph2">`goto case`</ph>, <ph id="ph3">`return`</ph>, or <ph id="ph4">`throw`</ph>, is reached.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>At that point, control is transferred outside the <ph id="ph1">`switch`</ph> statement or to another case label.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Case labels</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each case label specifies a pattern to compare to the match expression (the <ph id="ph1">`caseSwitch`</ph> variable in the previous examples).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If they match, control is transferred to the switch section that contains the <bpt id="p1">**</bpt>first<ept id="p1">**</ept> matching case label.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If no case label pattern matches the match expression, control is transfered to the section with the <ph id="ph1">`default`</ph> case label, if there is one.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If there is no <ph id="ph1">`default`</ph> case, no statements in any switch section are executed, and control is transferred outside the <ph id="ph2">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For information on the <ph id="ph1">`switch`</ph> statement and pattern matching, see the <bpt id="p1">[</bpt>Pattern matching with the <ph id="ph2">`switch`</ph> statement<ept id="p1">](#pattern)</ept> section.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because C# 6 supports only the constant pattern and does not allow the repetition of constant values, case labels define mutually exclusive values, and only one pattern can match the match expression.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As a result, the order in which <ph id="ph1">`case`</ph> statements appear is unimportant.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In C# 7, however, because other patterns are supported, case labels need not define mutually exclusive values, and multiple patterns can match the match expression.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because only the statements in the switch section that contains the first matching pattern are executed, the order in which <ph id="ph1">`case`</ph> statements appear is now important.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If C# detects a switch section whose case statement or statements are equivalent to or are subsets of previous statements, it generates a compiler error, CS8120, "The switch case has already been handled by a previous case."</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example illustrates a <ph id="ph1">`switch`</ph> statement that uses a variety of non-mutually exclusive patterns.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you move the <ph id="ph1">`case 0:`</ph> switch section so that it is no longer the first section in the <ph id="ph2">`switch`</ph> statement, C# generates a compiler error because an integer whose value is zero is a subset of all integers, which is the pattern defined by the <ph id="ph3">`case int val`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can correct this issue and eliminate the compiler warning in one of two ways:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>By changing the order of the switch sections.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>By using a &lt;/a name="when"&gt;when clause<ph id="ph1">&lt;/a&gt;</ph> in the <ph id="ph2">`case`</ph> label.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> case</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> case specifies the switch section to execute if the match expression does not match any other <ph id="ph2">`case`</ph> label.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`default`</ph> case is not present and the match expression does not match any other <ph id="ph2">`case`</ph> label, program flow falls through the <ph id="ph3">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`default`</ph> case can appear in any order in the <ph id="ph2">`switch`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Regardless of its order in the source code, it is always evaluated last, after all <ph id="ph1">`case`</ph> labels have been evaluated.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="pattern" /&gt;</ph> Pattern matching with the <ph id="ph2">`switch`</ph> statement</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`case`</ph> statement defines a pattern that, if it matches the match expression, causes its  containing switch section to be executed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>All versions of C# support the constant pattern.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The remaining patterns are supported beginning with C# 7.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Constant pattern</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The constant pattern tests whether the match expression equals a specified constant.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>constant<ept id="p1">*</ept> is the value to test for.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>constant<ept id="p1">*</ept> can be any of the following constant expressions:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>bool<ept id="p1">](bool.md)</ept> literal, either <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Any integral constant, such as an <bpt id="p1">[</bpt>int<ept id="p1">](int.md)</ept>, a <bpt id="p2">[</bpt>long<ept id="p2">](long.md)</ept>, or a <bpt id="p3">[</bpt>byte<ept id="p3">](byte.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The name of a declared <ph id="ph1">`const`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An enumeration constant.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>char<ept id="p1">](char.md)</ept> literal.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>string<ept id="p1">](string.md)</ept> literal.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The constant expression is evaluated as follows:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> and <bpt id="p2">*</bpt>constant<ept id="p2">*</ept> are integral types, the C# equality operator determines whether the expression returns <ph id="ph1">`true`</ph> (that is, whether <ph id="ph2">`expr == constant`</ph>).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Otherwise, the value of the expression is determined by a call to the static <bpt id="p1">[</bpt>Object.Equals(expr, constant)<ept id="p1">](xref:System.Object.Equals(System.Object,System.Object))</ept> method.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example uses the constant pattern to determine whether a particular date is a weekend, the first day of the work week, the last day of the work week, or the middle of the work week.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It evalutes the <bpt id="p1">[</bpt>DateTime.DayOfWeek<ept id="p1">](xref:System.DateTime.DayOfWeek)</ept> property of the current day against the members of the <ph id="ph1">@System.DayOfWeek</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following example uses the constant pattern to handle user input in a console application that simulates an automatic coffee machine.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Type pattern</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The type pattern enables concise type evaluation and conversion.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When used with the <ph id="ph1">`switch`</ph> statement to perform pattern matching, it tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>type<ept id="p1">*</ept> is the name of the type to which the result of <bpt id="p2">*</bpt>expr<ept id="p2">*</ept> is to be converted, and <bpt id="p3">*</bpt>varname<ept id="p3">*</ept> is the object to which the result of <bpt id="p4">*</bpt>expr<ept id="p4">*</ept> is converted if the match succeeds.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`case`</ph> expression is <ph id="ph2">`true`</ph> if any of the following is true:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of the same type as <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of a type that derives from <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In other words, the result of <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> can be upcast to an instance of <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> has a compile-time type that is a base class of <bpt id="p2">*</bpt>type<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>expr<ept id="p3">*</ept> has a runtime type that is <bpt id="p4">*</bpt>type<ept id="p4">*</ept> or is derived from <bpt id="p5">*</bpt>type<ept id="p5">*</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>compile-time type<ept id="p1">*</ept> of a variable is the variable's type as defined in its type declaration.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>runtime type<ept id="p1">*</ept> of a variable is the type of the instance that is assigned to that variable.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of a type that implements the <bpt id="p2">*</bpt>type<ept id="p2">*</ept> interface.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the case expression is true, <bpt id="p1">*</bpt>varname<ept id="p1">*</ept> is definitely assigned and has local scope within the switch section only.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`null`</ph> does not match a type.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To match a <ph id="ph1">`null`</ph>, you use the following <ph id="ph2">`case`</ph> label:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following example uses the type pattern to provide information about various kinds of collection types.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Without pattern matching, this code might be written as follows.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The use of type pattern matching produces more compact, readable code by eliminating the need to test whether the result of a conversion is a <ph id="ph1">`null`</ph> or to perform repeated casts.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`case`</ph> statement and the <ph id="ph2">`when`</ph> clause</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, because case statements need not be mutually exclusive, you can use add a <ph id="ph1">`when`</ph> clause to specify an additional condition that must be satisfied for the case statement to evaluate to true.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`when`</ph> clause can be any expression that returns a Boolean value.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>One of the more common uses for the <ph id="ph1">`when`</ph> clause is used to prevent a switch section from executing when the value of a match expression is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following example defines a base <ph id="ph1">`Shape`</ph> class, a <ph id="ph2">`Rectangle`</ph> class that derives from <ph id="ph3">`Shape`</ph>, and a <ph id="ph4">`Square`</ph> class that derives from <ph id="ph5">`Rectangle`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>It uses the <ph id="ph1">`when`</ph> clause to ensure that the <ph id="ph2">`ShowShapeInfo`</ph> treats a <ph id="ph3">`Rectangle`</ph> object that has been assigned equal lengths and widths as a <ph id="ph4">`Square`</ph> even if is has not been instantiated as a <ph id="ph5">`Square`</ph> object.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The method does not attempt to display information either about an object that is <ph id="ph1">`null`</ph> or a shape whose area is zero.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`when`</ph> clause in the example that attempts to test whether a <ph id="ph2">`Shape`</ph> object is <ph id="ph3">`null`</ph> does not execute.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The correct type pattern to test for a <ph id="ph1">`null`</ph> is <ph id="ph2">`case null:`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>if-else<ept id="p1">](if-else.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pattern Matching<ept id="p1">](../../pattern-matching.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>