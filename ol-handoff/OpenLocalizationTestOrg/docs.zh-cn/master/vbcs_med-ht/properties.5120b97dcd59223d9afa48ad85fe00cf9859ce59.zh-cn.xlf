<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f4d2bf3ad04fedafb44f8fed63f7234d48af63b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\properties.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dceb71fdcf21cdabb474033c8060d5454c4be509</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc54bbee2bd0901d957d15d11c6bb92b6cabfbd6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Properties (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Properties (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Properties can be used as if they are public data members, but they are actually special methods called <bpt id="p1">*</bpt>accessors<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This enables data to be accessed easily and still helps promote the safety and flexibility of methods.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Properties overview</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Properties enable a class to expose a public way of getting and setting values, while hiding implementation or verification code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>get<ept id="p1">](../../../csharp/language-reference/keywords/get.md)</ept> property accessor is used to return the property value, and a <bpt id="p2">[</bpt>set<ept id="p2">](../../../csharp/language-reference/keywords/set.md)</ept> property accessor is used to assign a new value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These accessors can have different access levels.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Restricting Accessor Accessibility<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>value<ept id="p1">](../../../csharp/language-reference/keywords/value.md)</ept> keyword is used to define the value being assigned by the <ph id="ph1">`set`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Properties can be <bpt id="p1">*</bpt>read-write<ept id="p1">*</ept> (they have both a <ph id="ph1">`get`</ph> and a <ph id="ph2">`set`</ph> accessor), <bpt id="p2">*</bpt>read-only<ept id="p2">*</ept> (they have a <ph id="ph3">`get`</ph> accessor but no <ph id="ph4">`set`</ph> accessor), or <bpt id="p3">*</bpt>write-only<ept id="p3">*</ept> (they have a <ph id="ph5">`set`</ph> accessor, but no <ph id="ph6">`get`</ph> accessor).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Write-only properties are rare and are most commonly used to restrict access to sensitive data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Simple properties that require no custom accessor code can be implemented either as expression body definitions or as <bpt id="p1">[</bpt>auto-implemented properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Properties with backing fields</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One basic pattern for implementing a property involves using a private backing field for setting and retrieving the property value.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> accessor returns the value of the private field, and the <ph id="ph2">`set`</ph> accessor may perform some data validation before assigning a value to the private field.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Both accessors may also perform some conversion or computation on the data before it is stored or returned.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example illustrates this pattern.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`TimePeriod`</ph> class represents an interval of time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Internally, the class stores the time interval in seconds in a private field named <ph id="ph1">`seconds`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A read-write property named <ph id="ph1">`Hours`</ph> allows the customer to specify the time interval in hours.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">`get`</ph> and the <ph id="ph2">`set`</ph> accessors perform the necessary conversion between hours and seconds.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`set`</ph> accessor validates the data and throws an <ph id="ph2">@System.ArgumentOutOfRangeException</ph> if the number of hours is invalid.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>Properties#1<ept id="p2">](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Expression body definitions</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Property accessors often consist of single-line statements that just assign or return the result of an expression.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can implement these properties as expression-bodied members.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Expression body definitions consist of the <ph id="ph1">`=&gt;`</ph> symbol followed by the expression to assign to or retrieve from the property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Starting with C# 6, read-only properties can implement the <ph id="ph1">`get`</ph> accessor as an expression-bodied member.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this case, neither the <ph id="ph1">`get`</ph> accessor keyword nor the <ph id="ph2">`return`</ph> keyword is used.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example implements the read-only <ph id="ph1">`Name`</ph> property as an expression-bodied member.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>Properties#2<ept id="p2">](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, both the <ph id="ph1">`get`</ph> and the <ph id="ph2">`set`</ph> accessor can be implemented as expression-bodied members.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> keywords must be present.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of expression body definitions for both accessors.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`return`</ph> keyword is not used with the <ph id="ph2">`get`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>Properties#3<ept id="p2">](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Auto-implemented properties</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In some cases, property <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors just assign a value to or retrieve a value from a backing field without including any additional logic.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>By using auto-implemented properties, you can simplify your code while having the C# compiler transparently provide the backing field for you.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a property has both a <ph id="ph1">`get`</ph> and a <ph id="ph2">`set`</ph> accessor, both must be auto-implemented.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You define an auto-implemented property by using the <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> keywords without providing any implementation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example repeats the previous one, except that <ph id="ph1">`Name`</ph> and <ph id="ph2">`Price`</ph> are auto-implemented properties.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that the example also removes the parameterized constructor, so that <ph id="ph1">`SaleItem`</ph> objects are now initialized with a call to the default constructor and an <bpt id="p1">[</bpt>object initializer<ept id="p1">](object-and-collection-initializers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>Properties#4<ept id="p2">](../../../../samples/snippets/csharp/programming-guide/classes-and-structs/properties-4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Related sections</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/using-properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interface Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/interface-properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparison Between Properties and Indexers<ept id="p1">](../../../csharp/programming-guide/indexers/comparison-between-properties-and-indexers.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Restricting Accessor Accessibility<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auto-Implemented Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/using-properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Indexers<ept id="p1">](../../../csharp/programming-guide/indexers/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>get keyword<ept id="p1">](../../../csharp/language-reference/keywords/get.md)</ept><ph id="ph1">  </ph></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>set keyword<ept id="p1">](../../../csharp/language-reference/keywords/set.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>