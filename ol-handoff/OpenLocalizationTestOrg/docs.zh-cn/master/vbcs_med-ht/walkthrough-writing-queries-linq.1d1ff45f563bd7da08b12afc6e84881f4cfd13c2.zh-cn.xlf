<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5692bd4b2fae4c5e17d48c12e98eb2e18523ba61</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\walkthrough-writing-queries-linq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e85ba8776db46b5c14701caf83b7a388054f5b6e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bd6dc83cebc45d1dc827a55206a7a32416d0525</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Writing Queries in C# (LINQ) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Writing Queries in C# (LINQ)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough demonstrates the C# language features that are used to write LINQ query expressions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create a C# Project</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following instructions are for Visual Studio.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you are using a different development environment, create a console project with a reference to System.Core.dll and a <ph id="ph1">`using`</ph> directive for the <ph id="ph2">&lt;xref:System.Linq?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To create a project in Visual Studio</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Expand <bpt id="p1">**</bpt>Installed<ept id="p1">**</ept>, expand <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept>, expand <bpt id="p3">**</bpt>Visual C#<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>Console Application<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> text box, enter a different name or accept the default name, and then choose the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Notice that your project has a reference to System.Core.dll and a <ph id="ph1">`using`</ph> directive for the <ph id="ph2">&lt;xref:System.Linq?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create an in-Memory Data Source</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The data source for the queries is a simple list of <ph id="ph1">`Student`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`Student`</ph> record has a first name, last name, and an array of integers that represents their test scores in the class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copy this code into your project.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note the following characteristics:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Student`</ph> class consists of auto-implemented properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each student in the list is initialized with an object initializer.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The list itself is initialized with a collection initializer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This whole data structure will be initialized and instantiated without explicit calls to any constructor or explicit member access.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about these new features, see <bpt id="p1">[</bpt>Auto-Implemented Properties<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/auto-implemented-properties.md)</ept> and <bpt id="p2">[</bpt>Object and Collection Initializers<ept id="p2">](../../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To add the data source</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`Student`</ph> class and the initialized list of students to the <ph id="ph2">`Program`</ph> class in your project.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CsLinqGettingStarted#11<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To add a new Student to the Students list</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Add a new <ph id="ph1">`Student`</ph> to the <ph id="ph2">`Students`</ph> list and use a name and test scores of your choice.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Try typing all the new student information in order to better learn the syntax for the object initializer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Create the Query</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To create a simple query</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the application's <ph id="ph1">`Main`</ph> method, create a simple query that, when it is executed, will produce a list of all students whose score on the first test was greater than 90.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note that because the whole <ph id="ph1">`Student`</ph> object is selected, the type of the query is <ph id="ph2">`IEnumerable&lt;Student&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Although the code could also use implicit typing by using the <bpt id="p1">[</bpt>var<ept id="p1">](../../../../csharp/language-reference/keywords/var.md)</ept> keyword, explicit typing is used to clearly illustrate results.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(For more information about <ph id="ph1">`var`</ph>, see <bpt id="p1">[</bpt>Implicitly Typed Local Variables<ept id="p1">](../../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note also that the query's range variable, <ph id="ph1">`student`</ph>, serves as a reference to each <ph id="ph2">`Student`</ph> in the source, providing member access for each object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CsLINQGettingStarted#12<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Execute the Query</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To execute the query</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now write the <ph id="ph1">`foreach`</ph> loop that will cause the query to execute.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Note the following about the code:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Each element in the returned sequence is accessed through the iteration variable in the <ph id="ph1">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type of this variable is <ph id="ph1">`Student`</ph>, and the type of the query variable is compatible, <ph id="ph2">`IEnumerable&lt;Student&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>After you have added this code, build and run the application to see the results in the <bpt id="p1">**</bpt>Console<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CsLINQGettingStarted#13<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To add another filter condition</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can combine multiple Boolean conditions in the <ph id="ph1">`where`</ph> clause in order to further refine a query.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following code adds a condition so that the query returns those students whose first score was over 90 and whose last score was less than 80.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`where`</ph> clause should resemble the following code.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>where clause<ept id="p1">](../../../../csharp/language-reference/keywords/where-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Modify the Query</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To order the results</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It will be easier to scan the results if they are in some kind of order.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can order the returned sequence by any accessible field in the source elements.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`orderby`</ph> clause orders the results in alphabetical order from A to Z according to the last name of each student.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`orderby`</ph> clause to your query, right after the <ph id="ph2">`where`</ph> statement and before the <ph id="ph3">`select`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Now change the <ph id="ph1">`orderby`</ph> clause so that it orders the results in reverse order according to the score on the first test, from the highest score to the lowest score.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`WriteLine`</ph> format string so that you can see the scores:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>orderby clause<ept id="p1">](../../../../csharp/language-reference/keywords/orderby-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To group the results</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Grouping is a powerful capability in query expressions.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A query with a group clause produces a sequence of groups, and each group itself contains a <ph id="ph1">`Key`</ph> and a sequence that consists of all the members of that group.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following new query groups the students by using the first letter of their last name as the key.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CsLINQGettingStarted#14<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Note that the type of the query has now changed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>It now produces a sequence of groups that have a <ph id="ph1">`char`</ph> type as a key, and a sequence of <ph id="ph2">`Student`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Because the type of the query has changed, the following code changes the <ph id="ph1">`foreach`</ph> execution loop also:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CsLINQGettingStarted#15<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Run the application and view the results in the <bpt id="p1">**</bpt>Console<ept id="p1">**</ept> window.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>group clause<ept id="p1">](../../../../csharp/language-reference/keywords/group-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To make the variables implicitly typed</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Explicitly coding <ph id="ph1">`IEnumerables`</ph> of <ph id="ph2">`IGroupings`</ph> can quickly become tedious.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can write the same query and <ph id="ph1">`foreach`</ph> loop much more conveniently by using <ph id="ph2">`var`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`var`</ph> keyword does not change the types of your objects; it just instructs the compiler to infer the types.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Change the type of <ph id="ph1">`studentQuery`</ph> and the iteration variable <ph id="ph2">`group`</ph> to <ph id="ph3">`var`</ph> and rerun the query.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Note that in the inner <ph id="ph1">`foreach`</ph> loop, the iteration variable is still typed as <ph id="ph2">`Student`</ph>, and the query works just as before.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Change the <ph id="ph1">`s`</ph> iteration variable to <ph id="ph2">`var`</ph> and run the query again.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You see that you get exactly the same results.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>CsLINQGettingStarted#16<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information about <bpt id="p1">[</bpt>var<ept id="p1">](../../../../csharp/language-reference/keywords/var.md)</ept>, see <bpt id="p2">[</bpt>Implicitly Typed Local Variables<ept id="p2">](../../../../csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To order the groups by their key value</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When you run the previous query, you notice that the groups are not in alphabetical order.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>To change this, you must provide an <ph id="ph1">`orderby`</ph> clause after the <ph id="ph2">`group`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>But to use an <ph id="ph1">`orderby`</ph> clause, you first need an identifier that serves as a reference to the groups created by the <ph id="ph2">`group`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>You provide the identifier by using the <ph id="ph1">`into`</ph> keyword, as follows:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csLINQGettingStarted#17<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_7.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>When you run this query, you will see the groups are now sorted in alphabetical order.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>To introduce an identifier by using let</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`let`</ph> keyword to introduce an identifier for any expression result in the query expression.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This identifier can be a convenience, as in the following example, or it can enhance performance by storing the results of an expression so that it does not have to be calculated multiple times.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csLINQGettingStarted#18<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_8.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>let clause<ept id="p1">](../../../../csharp/language-reference/keywords/let-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To use method syntax in a query expression</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>As described in <bpt id="p1">[</bpt>Query Syntax and Method Syntax in LINQ<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq.md)</ept>, some query operations can only be expressed by using method syntax.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following code calculates the total score for each <ph id="ph1">`Student`</ph> in the source sequence, and then calls the <ph id="ph2">`Average()`</ph> method on the results of that query to calculate the average score of the class.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Note the placement of parentheses around the query expression.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csLINQGettingStarted#19<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_9.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>To transform or project in the select clause</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>It is very common for a query to produce a sequence whose elements differ from the elements in the source sequences.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Delete or comment out your previous query and execution loop, and replace it with the following code.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Note that the query returns a sequence of strings (not <ph id="ph1">`Students`</ph>), and this fact is reflected in the <ph id="ph2">`foreach`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csLINQGettingStarted#20<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_10.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Code earlier in this walkthrough indicated that the average class score is approximately 334.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To produce a sequence of <ph id="ph1">`Students`</ph> whose total score is greater than the class average, together with their <ph id="ph2">`Student ID`</ph>, you can use an anonymous type in the <ph id="ph3">`select`</ph> statement:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csLINQGettingStarted#21<ept id="p2">](../../../../csharp/programming-guide/concepts/linq/codesnippet/CSharp/walkthrough-writing-queries-linq_11.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>After you are familiar with the basic aspects of working with queries in C#, you are ready to read the documentation and samples for the specific type of LINQ provider you are interested in:</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to SQL<ept id="p1">](https://msdn.microsoft.com/library/bb386976)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to DataSet<ept id="p1">](../../../../framework/data/adonet/linq-to-dataset.md)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to XML (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-xml.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to Objects (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/linq-to-objects.md)</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Language-Integrated Query (LINQ) (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Getting Started with LINQ in C#<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/getting-started-with-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>LINQ Query Expressions<ept id="p1">](../../../../csharp/programming-guide/linq-query-expressions/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>