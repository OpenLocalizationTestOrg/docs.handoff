<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interpolated-strings-local.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">97773659ea7dd00c291aa6a96401cac531adfdc8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\exploration\interpolated-strings-local.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea02e4ad7e173f5a0d5a9e1cbc75f1657b847bed</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9662136a952155144b7076bb874a8cda3e3a6c46</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>String interpolation - C# tutorial</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This tutorial shows you how to use the C# string interpolation feature to include formatted expression results in a larger string.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Use string interpolation to construct formatted strings</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you how to use C# <bpt id="p1">[</bpt>string interpolation<ept id="p1">](../../language-reference/tokens/interpolated.md)</ept> to insert values into a single result string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You write C# code and see the results of compiling and running it.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The tutorial contains a series of lessons that show you how to insert values into a string and format those values in different ways.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This tutorial expects that you have a machine you can use for development.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The .NET topic <bpt id="p1">[</bpt>Get Started in 10 minutes<ept id="p1">](https://www.microsoft.com/net/core)</ept> has instructions for setting up your local development environment on Mac, PC or Linux.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You also can complete the <bpt id="p1">[</bpt>interactive version<ept id="p1">](interpolated-strings.yml)</ept> of this tutorial in your browser.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create an interpolated string</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a directory named <bpt id="p1">**</bpt>interpolated<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Make it the current directory and run the following command from a console window:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This command creates a new .NET Core console application in the current directory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> in your favorite editor, and replace the line <ph id="ph1">`Console.WriteLine("Hello World!");`</ph> with the following code, where you replace <ph id="ph2">`&lt;name&gt;`</ph> with your name:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Try this code by typing <ph id="ph1">`dotnet run`</ph> in your console window.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you run the program, it displays a single string that includes your name in the greeting.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The string included in the <ph id="ph1">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method call is an <bpt id="p1">*</bpt>interpolated string<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It's a kind of template that lets you construct a single string (called the <bpt id="p1">*</bpt>result string<ept id="p1">*</ept>) from a string that includes embedded code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This simple example contains the two elements that every interpolated string must have:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A string literal that begins with the <ph id="ph1">`$`</ph> character before its opening quotation mark character.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There can't be any spaces between the <ph id="ph1">`$`</ph> symbol and the quotation mark character.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(If you'd like to see what happens if you include one, insert a space after the <ph id="ph1">`$`</ph> character, save the file, and run the program again by typing <ph id="ph2">`dotnet run`</ph> in the console window.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The C# compiler displays an error message, "error CS1056: Unexpected character '$'".)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One or more <bpt id="p1">*</bpt>interpolated expressions<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An interpolated expression is indicated by an opening and closing brace (<ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph>).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can put any C# expression that returns a value (including <ph id="ph1">`null`</ph>) inside the braces.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Let's try a few more string interpolation examples with some other data types.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Include different data types</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the previous section, you used string interpolation to insert one string inside of another.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The result of an interpolated expression can be of any data type, though.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Let's include values of various data types in an interpolated string.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following example, we first define a <bpt id="p1">[</bpt>class<ept id="p1">](../../programming-guide/classes-and-structs/classes.md)</ept> data type <ph id="ph1">`Vegetable`</ph> that has a <ph id="ph2">`Name`</ph> <bpt id="p2">[</bpt>property<ept id="p2">](../../properties.md)</ept> and a <ph id="ph3">`ToString`</ph> <bpt id="p3">[</bpt>method<ept id="p3">](../../methods.md)</ept>, which <bpt id="p4">[</bpt>overrides<ept id="p4">](../../language-reference/keywords/override.md)</ept> the behavior of the <ph id="ph4">&lt;xref:System.Object.ToString?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">`public`</ph> access modifier<ept id="p1">](../../language-reference/keywords/public.md)</ept> makes that method available to any client code to get the string representation of a <ph id="ph2">`Vegetable`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the example the <ph id="ph1">`Vegetable.ToString`</ph> method returns the value of the <ph id="ph2">`Name`</ph> property that is initialized at the <ph id="ph3">`Vegetable`</ph> <bpt id="p1">[</bpt>constructor<ept id="p1">](../../programming-guide/classes-and-structs/constructors.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Then we create an instance of the <ph id="ph1">`Vegetable`</ph> class named <ph id="ph2">`item`</ph> by using the <bpt id="p1">[</bpt><ph id="ph3">`new`</ph> keyword<ept id="p1">](../../language-reference/keywords/new-operator.md)</ept> and providing a name for the constructor <ph id="ph4">`Vegetable`</ph>:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Finally, we include the <ph id="ph1">`item`</ph> variable into an interpolated string that also contains a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value, a <ph id="ph3">&lt;xref:System.Decimal&gt;</ph> value, and a <ph id="ph4">`Unit`</ph> <bpt id="p1">[</bpt>enumeration<ept id="p1">](../../programming-guide/enumeration-types.md)</ept> value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Replace all of the C# code in your editor with the following code, and then use the <ph id="ph1">`dotnet run`</ph> command to run it:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Note that the interpolated expression <ph id="ph1">`item`</ph> in the interpolated string resolves to the text "eggplant" in the result string.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the interpolated expression evaluates to <ph id="ph1">`null`</ph>, an empty string ("", or <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>) is used.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the interpolated expression doesn't evaluate to <ph id="ph1">`null`</ph>, typically the <ph id="ph2">`ToString`</ph> method of the result type is called.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can test this by updating the implementation of the <ph id="ph1">`Vegetable.ToString`</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You might not even need to implement the <ph id="ph1">`ToString`</ph> method since every type has some implementation of this method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To test this, comment out the definition of the <ph id="ph1">`Vegetable.ToString`</ph> method in the example (to do that, put a comment symbol, <ph id="ph2">`//`</ph>, in front of it).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In the output, the string "eggplant" is replaced by the fully qualified type name ("Vegetable" in this example), which is the default behavior of the <ph id="ph1">&lt;xref:System.Object.ToString?displayProperty=nameWithType&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The default behavior of the <ph id="ph1">`ToString`</ph> method for an enumeration value is to return the string representation of the value.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the next section, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Control the formatting of interpolated expressions</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the previous section, two poorly formatted strings were inserted into the result string.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>One was a date and time value for which only the date was appropriate.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The second was a price that didn't indicate its unit of currency.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Both issues are easy to address.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>String interpolation lets you specify <bpt id="p1">*</bpt>format strings<ept id="p1">*</ept> that control the formatting of particular types.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Modify the call to <ph id="ph1">`Console.WriteLine`</ph> from the previous example to include the format strings for the date and price expressions as shown in the following line:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You specify a format string by following the interpolated expression with a colon (":") and the format string.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>"d" is a <bpt id="p1">[</bpt>standard date and time format string<ept id="p1">](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)</ept> that represents the short date format.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>"C2" is a  <bpt id="p1">[</bpt>standard numeric format string<ept id="p1">](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)</ept> that represents a number as a currency value with two digits after the decimal point.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A number of types in the .NET libraries support a predefined set of format strings.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>These include all the numeric types and the date and time types.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For a complete list of types that support format strings, see <bpt id="p1">[</bpt>Format Strings and .NET Class Library Types<ept id="p1">](../../../standard/base-types/formatting-types.md#stringRef)</ept> in the <bpt id="p2">[</bpt>Formatting Types in .NET<ept id="p2">](../../../standard/base-types/formatting-types.md)</ept> article.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Try modifying the format strings in your text editor and, each time you make a change, rerun the program to see how the changes affect the formatting of the date and time and the numeric value.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Change the "d" in <ph id="ph1">`{date:d}`</ph> to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Change the "C2" in <ph id="ph1">`{price:C2}`</ph> to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the next section, you'll learn how to do this.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Control the field width and alignment of interpolated expressions</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To see this, replace all the code in your text editor with the following code, then type <ph id="ph1">`dotnet run`</ph> to execute the program:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The names of authors are left-aligned, and the titles they wrote are right-aligned.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You specify the alignment by adding a comma (",") after an interpolated expression and designating the <bpt id="p1">*</bpt>minimum<ept id="p1">*</ept> field width.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If the specified value is a positive number, the field is right-aligned.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If it is a negative number, the field is left-aligned.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Try removing the negative signs from the <ph id="ph1">`{"Author",-25}`</ph> and <ph id="ph2">`{title.Key,-25}`</ph> code and run the example again, as the following code does:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This time, the author information is right-aligned.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can combine an alignment specifier and a format string for a single interpolated expression.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To do that, specify the alignment first, followed by a colon and the format string.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Replace all of the code inside the <ph id="ph1">`Main`</ph> method with the following code, which displays three formatted strings with defined field widths.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Then run the program by entering the <ph id="ph1">`dotnet run`</ph> command.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The output looks something like the following:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You've completed the string interpolation tutorial.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>String interpolation<ept id="p1">](../../language-reference/tokens/interpolated.md)</ept> topic and the <bpt id="p2">[</bpt>String interpolation in C#<ept id="p2">](../../tutorials/string-interpolation.md)</ept> tutorial.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>