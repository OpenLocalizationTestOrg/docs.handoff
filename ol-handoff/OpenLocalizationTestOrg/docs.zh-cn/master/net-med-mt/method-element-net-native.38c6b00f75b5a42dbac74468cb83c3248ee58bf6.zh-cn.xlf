<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">114ee2937bd84248473fc87bebbbb1fe6be2a906</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\net-native\method-element-net-native.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bfaa0f24a22376d3c95d0c838d3e78d8cb6bcfaf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f76f2ef68ee7b45ab2d2d2b47fb10809d56057db</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>Method<ph id="ph2">&amp;gt;</ph> Element (.NET Native) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>Method<ph id="ph2">&amp;gt;</ph> Element (.NET Native)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applies runtime reflection policy to a constructor or method.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Attributes and Elements</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following sections describe attributes, child elements, and parent elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Attributes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Attribute type</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>General</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required attribute.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifies the method name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>General</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Specifies the method signature.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If multiple parameters are present, they are separated by commas.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">`&lt;Method&gt;`</ph> element defines policy for the <ph id="ph2">&lt;xref:System.DateTimeOffset.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the attribute is absent, the runtime directive applies to all overloads of the method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reflection</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Controls querying for information about or enumerating a method but does not enable any dynamic invocation at run time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Reflection</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Controls runtime access to a constructor or method to enable dynamic programming.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This policy ensures that a member can be invoked dynamically at run time.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name attribute</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>method_name<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The method name.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type of the method is defined by the parent <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> or <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>TypeInstantiation&gt;<ept id="p2">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Signature attribute</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>method_signature<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The parameter types that form the method signature.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Multiple parameters are separated by commas, for example, <ph id="ph1">`"System.String,System.Int32,System.Int32)"`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameter type names should be fully qualified.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>All other attributes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>policy_setting<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The setting to apply to this policy type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Possible values are <ph id="ph1">`Auto`</ph>, <ph id="ph2">`Excluded`</ph>, <ph id="ph3">`Included`</ph>, and <ph id="ph4">`Required`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Runtime Directive Policy Settings<ept id="p1">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Child Elements</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Parameter&gt;<ept id="p1">](../../../docs/framework/net-native/parameter-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Applies policy to the type of the argument passed to a method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>GenericParameter&gt;<ept id="p1">](../../../docs/framework/net-native/genericparameter-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Applies policy to the parameter type of a generic type or method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>ImpliesType&gt;<ept id="p1">](../../../docs/framework/net-native/impliestype-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Applies policy to a type, if that policy has been applied to the method represented by the containing <ph id="ph1">`&lt;Method&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>TypeParameter&gt;<ept id="p1">](../../../docs/framework/net-native/typeparameter-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Applies policy to the type represented by a <ph id="ph1">&lt;xref:System.Type&gt;</ph> argument passed to a method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parent Elements</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a type and all its members.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>TypeInstantiation&gt;<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a constructed generic type and all its members.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`&lt;Method&gt;`</ph> element of a generic method applies its policy to all instantiations that do not have their own policy.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Signature`</ph> attribute to specify policy for a particular method overload.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Otherwise, if the <ph id="ph1">`Signature`</ph> attribute is absent, the runtime directive applies to all overloads of the method.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You cannot define the runtime reflection policy for a constructor by using the <ph id="ph1">`&lt;Method&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Instead, use the <ph id="ph1">`Activate`</ph> attribute of the  <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>Assembly&gt;<ept id="p1">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>, <bpt id="p2">[</bpt><ph id="ph3">\&lt;</ph>Namespace&gt;<ept id="p2">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>, <bpt id="p3">[</bpt><ph id="ph4">\&lt;</ph>Type&gt;<ept id="p3">](../../../docs/framework/net-native/type-element-net-native.md)</ept>, or <bpt id="p4">[</bpt><ph id="ph5">\&lt;</ph>TypeInstantiation&gt;<ept id="p4">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Stringify`</ph> method in the following example is a general-purpose formatting method that uses reflection to convert an object to its string representation.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In addition to calling the object's default <ph id="ph1">`ToString`</ph> method, the method can produce a formatted result string by passing an object's <ph id="ph2">`ToString`</ph> method a format string, an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> implementation, or both.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It can also call one of the <ph id="ph1">&lt;xref:System.Convert.ToString%2A?displayProperty=fullName&gt;</ph> overloads that converts a number to its binary, hexadecimal, or octal representation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ProjectN_Reflection#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/cs/method1.cs#7)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Stringify`</ph> method can be called by code like the following:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ProjectN_Reflection#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/cs/method1.cs#7)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>However, when compiled with .NET Native, the example can throw an number of exceptions at runtime, including <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> and <bpt id="p1">[</bpt>MissingRuntimeArtifactException<ept id="p1">](../../../docs/framework/net-native/missingruntimeartifactexception-class-net-native.md)</ept> exceptions, This occurs because the <ph id="ph2">`Stringify`</ph> method is intended primarily to support dynamically formatting the primitive types in the .NET Framework Class Library.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>However, their metadata is not made available by the default directives file.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Even when their metadata is made available, however, the example throws <bpt id="p1">[</bpt>MissingRuntimeArtifactException<ept id="p1">](../../../docs/framework/net-native/missingruntimeartifactexception-class-net-native.md)</ept> exceptions because the appropriate <ph id="ph1">`ToString`</ph> implementations have not been include in the native code.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These exceptions can all be eliminated by using the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Type&gt;<ept id="p1">](../../../docs/framework/net-native/type-element-net-native.md)</ept> element to define the types whose metadata must be present, and by adding <ph id="ph2">`&lt;Method&gt;`</ph> elements to ensure that the implementation of method overloads that can be called dynamically is also present.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The following is the default.rd.xml file that eliminates these exceptions and allows the example to execute without error.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Runtime Directive Elements<ept id="p1">](../../../docs/framework/net-native/runtime-directive-elements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Runtime Directive Policy Settings<ept id="p1">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt><ph id="ph1">\&lt;</ph>MethodInstantiation&gt; Element<ept id="p1">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>