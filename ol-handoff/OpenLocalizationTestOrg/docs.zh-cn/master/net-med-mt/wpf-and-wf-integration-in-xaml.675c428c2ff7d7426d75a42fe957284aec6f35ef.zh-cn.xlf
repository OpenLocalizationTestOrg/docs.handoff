<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ea48faeb468d40640ebed669d9daabd4b3e74b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\wpf-and-wf-integration-in-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7455a52586c64b2b71ee597318c9778b467fd6ac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4604ba87bbc1eb9c180a300643ddb116b0437a2e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WPF and WF Integration in XAML | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WPF and WF Integration in XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to create an application that uses <ph id="ph1">[!INCLUDE[avalon1](../../../../includes/avalon1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf](../../../../includes/wf-md.md)]</ph> features in a single XAML document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To accomplish this, the sample uses <ph id="ph1">[!INCLUDE[wf](../../../../includes/wf-md.md)]</ph> and XAML extensibility.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Sample Details</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The ShowWindow.xaml file deserializes into a <ph id="ph1">&lt;xref:System.Activities.Statements.Sequence&gt;</ph> activity with two string variables that are manipulated by the sequence’s activities: <ph id="ph2">`ShowWindow`</ph> and <ph id="ph3">`WriteLine`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity outputs to the console window the expression that it assigns to the <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine.Text%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowWindow`</ph> activity displays a <ph id="ph2">[!INCLUDE[avalon2](../../../../includes/avalon2-md.md)]</ph> window as part of its execution logic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Activities.ActivityContext.DataContext%2A&gt;</ph> of the window includes the variables declared in the sequence.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The controls of the window declared in the <ph id="ph1">`ShowWindow`</ph> activity use data binding to manipulate those variables.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, the window contains a button control.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Click`</ph> event for the button is handled by a <ph id="ph2">&lt;xref:System.Activities.ActivityDelegate&gt;</ph> named <ph id="ph3">`MarkupExtension`</ph> that contains a <ph id="ph4">`CloseWindow`</ph> activity.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MarkUpExtension`</ph> invokes the contained activity that provides, as context, any objects identified by an <ph id="ph2">`x:Name`</ph>, as well as the <ph id="ph3">&lt;xref:System.Activities.ActivityContext.DataContext%2A&gt;</ph> of the containing window.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Thus, the <ph id="ph1">`CloseWindow.InArgument&lt;Window&gt;`</ph> can be bound using an expression that references the window’s name.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowWindow`</ph> activity derives from the <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity%601&gt;</ph> class to display a <ph id="ph3">[!INCLUDE[avalon2](../../../../includes/avalon2-md.md)]</ph> window and completes when the window is closed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Window`</ph> property is of type <ph id="ph2">`Func&lt;Window&gt;`</ph> that allows the window to be created on demand for each execution of the activity.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Window`</ph> property uses a <ph id="ph2">&lt;xref:System.Xaml.XamlDeferringLoader&gt;</ph> to enable this deferred evaluation model.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FuncFactoryDeferringLoader`</ph> allows a <ph id="ph2">`XamlReader`</ph> to be captured during serialization and then read during activity execution.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A well-written activity never blocks the scheduler thread.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`ShowWindow`</ph> activity cannot complete until the window it is displaying is closed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowWindow`</ph> activity achieves this behavior by deriving from <ph id="ph2">&lt;xref:System.Activities.AsyncCodeActivity&gt;</ph>, calling the <ph id="ph3">&lt;xref:System.Activities.WorkflowInvoker.BeginInvoke%2A&gt;</ph> method in the <ph id="ph4">&lt;xref:System.Activities.AsyncCodeActivity.BeginExecute%2A&gt;</ph> method, and showing the window modally.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The delegate is invoked through the WPF <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.SynchronizationContext%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowWindow`</ph> activity assigns the <ph id="ph2">&lt;xref:System.Activities.ActivityContext.DataContext%2A&gt;</ph> property to the <ph id="ph3">`Window.DataContext`</ph> property to provide any data bound controls access to the in-scope variables.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The last point of interest in this sample is a <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.Serialization.MarkupExtension&gt;</ph> called <ph id="ph2">`DelegateActivityExtension`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ProvideValue`</ph> method of this markup extension returns a delegate that invokes an embedded activity.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This activity runs in an environment that includes the <ph id="ph1">[!INCLUDE[avalon2](../../../../includes/avalon2-md.md)]</ph> data context and any <ph id="ph2">`x:Name`</ph> values in scope.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`GenericInvoke`</ph> method, this environment is provided to the activity through a <ph id="ph2">&lt;xref:System.Activities.Hosting.SymbolResolver&gt;</ph> extension.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This extension is added to a <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> that is then used to invoke the embedded activity whenever the markup extension’s delegate is invoked.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The default designer does not support the ShowWindow activity; as such, the ShowWindow.Xaml file does not display correctly in the designer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To use this sample</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph>, open the WPFWFIntegration.sln solution file.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To build the solution, press CTRL+SHIFT+B.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To run the solution, press F5.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Type your first and last name into the dialog.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Close the dialog and the console echoes your name.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>