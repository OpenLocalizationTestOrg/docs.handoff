<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-contract-versioning.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f742461f79163ead705330d6ed2b684a58e37345</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\data-contract-versioning.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5a36c270642bc124d1cc7c2be63a4ccd1bb94fe</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c40f21e2f1e274480be08c57a65b540bf788bc6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Contract Versioning | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Contract Versioning</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As applications evolve, you may also have to change the data contracts the services use.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic explains how to version data contracts.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes the data contract versioning mechanisms.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For a complete overview and prescriptive versioning guidance, see <bpt id="p1">[</bpt>Best Practices: Data Contract Versioning<ept id="p1">](../../../../docs/framework/wcf/best-practices-data-contract-versioning.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Breaking vs. Nonbreaking Changes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Changes to a data contract can be breaking or nonbreaking.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When a data contract is changed in a nonbreaking way, an application using the older version of the contract can communicate with an application using the newer version, and an application using the newer version of the contract can communicate with an application using the older version.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On the other hand, a breaking change prevents communication in one or both directions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Any changes to a type that do not affect how it is transmitted and received are nonbreaking.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Such changes do not change the data contract, only the underlying type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, you can change the name of a field in a nonbreaking way if you then set the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.Name%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to the older version name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code shows version 1 of a data contract.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_DataContractVersioning#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_datacontractversioning/cs/source.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>C_DataContractVersioning#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_datacontractversioning/vb/source.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following code shows a nonbreaking change.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_DataContractVersioning#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_datacontractversioning/cs/source.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>C_DataContractVersioning#2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_datacontractversioning/vb/source.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Some changes do modify the transmitted data, but may or may not be breaking.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following changes are always breaking:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Changing the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph> value of a data contract.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Changing the order of data members by using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.Order%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Renaming a data member.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Changing the data contract of a data member.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, changing the type of data member from an integer to a string, or from a type with a data contract named "Customer" to a type with a data contract named "Person".</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following changes are also possible.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Adding and Removing Data Members</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In most cases, adding or removing a data member is not a breaking change, unless you require strict schema validity (new instances validating against the old schema).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When a type with an extra field is deserialized into a type with a missing field, the extra information is ignored.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>(It may also be stored for round-tripping purposes; for more information, see <bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When a type with a missing field is deserialized into a type with an extra field, the extra field is left at its default value, usually zero or <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>(The default value may be changed; for more information, see <bpt id="p1">[</bpt>Version-Tolerant Serialization Callbacks<ept id="p1">](../../../../docs/framework/wcf/feature-details/version-tolerant-serialization-callbacks.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, you can use the <ph id="ph1">`CarV1`</ph> class on a client and the <ph id="ph2">`CarV2`</ph> class on a service, or you can use the <ph id="ph3">`CarV1`</ph> class on a service and the <ph id="ph4">`CarV2`</ph> class on a client.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>C_DataContractVersioning#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/c_datacontractversioning/cs/source.cs#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>C_DataContractVersioning#3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/c_datacontractversioning/vb/source.vb#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The version 2 endpoint can successfully send data to the version 1 endpoint.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Serializing version 2 of the <ph id="ph1">`Car`</ph> data contract yields XML similar to the following.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The deserialization engine on V1 does not find a matching data member for the <ph id="ph1">`HorsePower`</ph> field, and discards that data.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Also, the version 1 endpoint can send data to the version 2 endpoint.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Serializing version 1 of the <ph id="ph1">`Car`</ph> data contract yields XML similar to the following.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The version 2 deserializer does not know what to set the <ph id="ph1">`HorsePower`</ph> field to, because there is no matching data in the incoming XML.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Instead, the field is set to the default value of 0.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Required Data Members</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A data member may be marked as being required by setting the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.IsRequired%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If required data is missing while deserializing, an exception is thrown instead of setting the data member to its default value.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Adding a required data member is a breaking change.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>That is, the newer type can still be sent to endpoints with the older type, but not the other way around.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Removing a data member that was marked as required in any prior version is also a breaking change.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Changing the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.IsRequired%2A&gt;</ph> property value from <ph id="ph2">`true`</ph> to <ph id="ph3">`false`</ph> is not breaking, but changing it from <ph id="ph4">`false`</ph> to <ph id="ph5">`true`</ph> may be breaking if any prior versions of the type do not have the data member in question.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.IsRequired%2A&gt;</ph> property is set to <ph id="ph2">`true`</ph>, the incoming data may be null or zero, and a type must be prepared to handle this possibility.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.IsRequired%2A&gt;</ph> as a security mechanism to protect against bad incoming data.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Omitted Default Values</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>It is possible (although not recommended) to set the <ph id="ph1">`EmitDefaultValue`</ph> property on the DataMemberAttribute attribute to <ph id="ph2">`false`</ph>, as described in <bpt id="p1">[</bpt>Data Member Default Values<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-member-default-values.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If this setting is <ph id="ph1">`false`</ph>, the data member will not be emitted if it is set to its default value (usually null or zero).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This is not compatible with required data members in different versions in two ways:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A data contract with a data member that is required in one version cannot receive default (null or zero) data from a different version in which the data member has <ph id="ph1">`EmitDefaultValue`</ph> set to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A required data member that has <ph id="ph1">`EmitDefaultValue`</ph> set to <ph id="ph2">`false`</ph> cannot be used to serialize its default (null or zero) value, but can receive such a value on deserialization.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This creates a round-tripping problem (data can be read in but the same data cannot then be written out).</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, if <ph id="ph1">`IsRequired`</ph> is <ph id="ph2">`true`</ph> and <ph id="ph3">`EmitDefaultValue`</ph> is <ph id="ph4">`false`</ph> in one version, the same combination should apply to all other versions such that no version of the data contract would be able to produce a value that does not result in a round trip.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Schema Considerations</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For an explanation of what schema is produced for data contract types, see <bpt id="p1">[</bpt>Data Contract Schema Reference<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-schema-reference.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The schema <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> produces for data contract types makes no provisions for versioning.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>That is, the schema exported from a certain version of a type contains only those data members present in that version.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Implementing the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface does not change the schema for a type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Data members are exported to the schema as optional elements by default.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>That is, the <ph id="ph1">`minOccurs`</ph> (XML attribute) value is set to 0.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Required data members are exported with <ph id="ph1">`minOccurs`</ph> set to 1.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Many of the changes considered to be nonbreaking are actually breaking if strict adherence to the schema is required.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the preceding example, a <ph id="ph1">`CarV1`</ph> instance with just the <ph id="ph2">`Model`</ph> element would validate against the <ph id="ph3">`CarV2`</ph> schema (which has both <ph id="ph4">`Model`</ph> and <ph id="ph5">`Horsepower`</ph>, but both are optional).</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>However, the reverse is not true: a <ph id="ph1">`CarV2`</ph> instance would fail validation against the <ph id="ph2">`CarV1`</ph> schema.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Round-tripping also entails some additional considerations.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> the "Schema Considerations" section in <bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Other Permitted Changes</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Implementing the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> interface is a nonbreaking change.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>However, round-tripping support does not exist for versions of the type prior to the version in which <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> was implemented.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Enumerations</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Adding or removing an enumeration member is a breaking change.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Changing the name of an enumeration member is breaking, unless its contract name is kept the same as in the old version by using the <ph id="ph1">`EnumMemberAtttribute`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Enumeration Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/enumeration-types-in-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Collections</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Most collection changes are nonbreaking because most collection types are interchangeable with each other in the data contract model.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>However, making a noncustomized collection customized or vice versa is a breaking change.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Also, changing the collection's customization settings is a breaking change; that is, changing its data contract name and namespace, repeating element name, key element name, and value element name.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> collection customization, see <bpt id="p1">[</bpt>Collection Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/collection-types-in-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Naturally, changing the data contract of contents of a collection (for example, changing from a list of integers to a list of strings) is a breaking change.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.Name%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Name%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.Order%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.IsRequired%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationException&gt;</ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Version-Tolerant Serialization Callbacks<ept id="p1">](../../../../docs/framework/wcf/feature-details/version-tolerant-serialization-callbacks.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Best Practices: Data Contract Versioning<ept id="p1">](../../../../docs/framework/wcf/best-practices-data-contract-versioning.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-data-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Contract Equivalence<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-equivalence.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>