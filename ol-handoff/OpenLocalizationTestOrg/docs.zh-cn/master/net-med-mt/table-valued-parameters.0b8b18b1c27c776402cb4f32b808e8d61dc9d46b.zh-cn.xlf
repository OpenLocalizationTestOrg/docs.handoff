<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a65c3c9b3f8e38699b6190bb467b3ce87fd8d1c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\table-valued-parameters.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b765c2ca9ee8258608284feae5833ad05ce4b35</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e84751de8bb23554c141e7a414c2988946902d26</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Table-Valued Parameters | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Table-Valued Parameters</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Table-valued parameters provide an easy way to marshal multiple rows of data from a client application to <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> without requiring multiple round trips or special server-side logic for processing the data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use table-valued parameters to encapsulate rows of data in a client application and send the data to the server in a single parameterized command.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The incoming data rows are stored in a table variable that can then be operated on by using <ph id="ph1">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Column values in table-valued parameters can be accessed using standard <ph id="ph1">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> SELECT statements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Table-valued parameters are strongly typed and their structure is automatically validated.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The size of table-valued parameters is limited only by server memory.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You cannot return data in a table-valued parameter.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Table-valued parameters are input-only; the OUTPUT keyword is not supported.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about table-valued parameters, see the following resources.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Resource</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Table-Valued Parameters (Database Engine)<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=98363)</ept> in <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> Books Online</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Describes how to create and use table-valued parameters.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>User-Defined Table Types<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=98364)</ept> in <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> Books Online</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Describes user-defined table types that are used to declare table-valued parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Microsoft SQL Server Database Engine<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=120507)</ept> section of <bpt id="p2">[</bpt>CodePlex<ept id="p2">](http://go.microsoft.com/fwlink/?LinkID=67739)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Contains samples that demonstrate how to use <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> features and functionality.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Passing Multiple Rows in Previous Versions of SQL Server</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Before table-valued parameters were introduced to <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> 2008, the options for passing multiple rows of data to a stored procedure or a parameterized SQL command were limited.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A developer could choose from the following options for passing multiple rows to the server:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use a series of individual parameters to represent the values in multiple columns and rows of data.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The amount of data that can be passed by using this method is limited by the number of parameters allowed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> procedures can have, at most, 2100 parameters.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Server-side logic is required to assemble these individual values into a table variable or a temporary table for processing.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Bundle multiple data values into delimited strings or XML documents and then pass those text values to a procedure or statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This requires the procedure or statement to include the logic necessary for validating the data structures and unbundling the values.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create a series of individual SQL statements for data modifications that affect multiple rows, such as those created by calling the <ph id="ph1">`Update`</ph> method of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataAdapter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Changes can be submitted to the server individually or batched into groups.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, even when submitted in batches that contain multiple statements, each statement is executed separately on the server.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`bcp`</ph> utility program or the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlBulkCopy&gt;</ph> object to load many rows of data into a table.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Although this technique is very efficient, it does not support server-side processing unless the data is loaded into a temporary table or table variable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Creating Table-Valued Parameter Types</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Table-valued parameters are based on strongly-typed table structures that are defined by using <ph id="ph1">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> CREATE TYPE statements.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You have to create a table type and define the structure in <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> before you can use table-valued parameters in your client applications.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about creating table types, see <bpt id="p1">[</bpt>User-Defined Table Types<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=98364)</ept> in <ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> Books Online.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following statement creates a table type named CategoryTableType that consists of CategoryID and CategoryName columns:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>After you create a table type, you can declare table-valued parameters based on that type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> fragment demonstrates how to declare a table-valued parameter in a stored procedure definition.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note that the READONLY keyword is required for declaring a table-valued parameter.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Modifying Data with Table-Valued Parameters (Transact-SQL)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Table-valued parameters can be used in set-based data modifications that affect multiple rows by executing a single statement.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, you can select all the rows in a table-valued parameter and insert them into a database table, or you can create an update statement by joining a table-valued parameter to the table you want to update.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> UPDATE statement demonstrates how to use a table-valued parameter by joining it to the Categories table.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When you use a table-valued parameter with a JOIN in a FROM clause, you must also alias it, as shown here, where the table-valued parameter is aliased as "ec":</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> example demonstrates how to select rows from a table-valued parameter to perform an INSERT in a single set-based operation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Limitations of Table-Valued Parameters</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>There are several limitations to table-valued parameters:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You cannot pass table-valued parameters to <bpt id="p1">[</bpt>CLR user-defined functions<ept id="p1">](http://msdn.microsoft.com/library/ms131077.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Table-valued parameters can only be indexed to support UNIQUE or PRIMARY KEY constraints.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[ssNoVersion](../../../../../includes/ssnoversion-md.md)]</ph> does not maintain statistics on table-valued parameters.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Table-valued parameters are read-only in <ph id="ph1">[!INCLUDE[tsql](../../../../../includes/tsql-md.md)]</ph> code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You cannot update the column values in the rows of a table-valued parameter and you cannot insert or delete rows.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To modify the data that is passed to a stored procedure or parameterized statement in table-valued parameter, you must insert the data into a temporary table or into a table variable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You cannot use ALTER TABLE statements to modify the design of table-valued parameters.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Configuring a SqlParameter Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Data.SqlClient&gt;</ph> supports populating table-valued parameters from <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph>, <ph id="ph3">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> or System.Collections.Generic.IEnumerable<ph id="ph4">\&lt;</ph><ph id="ph5">&lt;xref:Microsoft.SqlServer.Server.SqlDataRecord&gt;</ph>&gt; (<ph id="ph6">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>?qualifyHint=False&amp;autoUpgrade=True) objects.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You must specify a type name for the table-valued parameter by using the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter.TypeName%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TypeName`</ph> must match the name of a compatible type previously created on the server.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following code fragment demonstrates how to configure <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> to insert data.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can also use any object derived from <ph id="ph1">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> to stream rows of data to a table-valued parameter, as shown in this fragment:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Passing a Table-Valued Parameter to a Stored Procedure</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This example demonstrates how to pass table-valued parameter data to a stored procedure.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The code extracts added rows into a new <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> by using the <ph id="ph2">&lt;xref:System.Data.DataTable.GetChanges%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The code then defines a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph>, setting the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCommand.CommandType%2A&gt;</ph> property to <ph id="ph3">&lt;xref:System.Data.CommandType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> is populated by using the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlParameterCollection.AddWithValue%2A&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt;</ph> is set to <ph id="ph4">`Structured`</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> is then executed by using the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Passing a Table-Valued Parameter to a Parameterized SQL Statement</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to insert data into the dbo.Categories table by using an INSERT statement with a SELECT subquery that has a table-valued parameter as the data source.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When passing a table-valued parameter to a parameterized SQL statement, you must specify a type name for the table-valued parameter by using the new <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter.TypeName%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`TypeName`</ph> must match the name of a compatible type previously created on the server.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The code in this example uses the <ph id="ph1">`TypeName`</ph> property to reference the type structure defined in dbo.CategoryTableType.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you supply a value for an identity column in a table-valued parameter, you must issue the SET IDENTITY_INSERT statement for the session.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Streaming Rows with a DataReader</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can also use any object derived from <ph id="ph1">&lt;xref:System.Data.Common.DbDataReader&gt;</ph> to stream rows of data to a table-valued parameter.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following code fragment demonstrates retrieving data from an Oracle database by using an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> and an <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The code then configures a <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlCommand&gt;</ph> to invoke a stored procedure with a single input parameter.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameter.SqlDbType%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlParameter&gt;</ph> is set to <ph id="ph3">`Structured`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlParameterCollection.AddWithValue%2A&gt;</ph> passes the <ph id="ph2">`OracleDataReader`</ph> result set to the stored procedure as a table-valued parameter.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Configuring Parameters and Parameter Data Types<ept id="p1">](../../../../../docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commands and Parameters<ept id="p1">](../../../../../docs/framework/data/adonet/commands-and-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataAdapter Parameters<ept id="p1">](../../../../../docs/framework/data/adonet/dataadapter-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SQL Server Data Operations in ADO.NET<ept id="p1">](../../../../../docs/framework/data/adonet/sql/sql-server-data-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>