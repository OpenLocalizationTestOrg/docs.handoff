<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">92b2dbaaac6d13c542bfa308a20d368dfcf62ed1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\querying-across-relationships.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32412379caf0de68eb0d1449e051275ca07d028a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3550a01291bdfa41012380147744144c398485d8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Querying Across Relationships | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Querying Across Relationships</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>References to other objects or collections of other objects in your class definitions directly correspond to foreign-key relationships in the database.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use these relationships when you query by using dot notation to access the relationship properties and navigate from one object to another.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These access operations translate to more complex joins or correlated subqueries in the equivalent SQL.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, the following query navigates from orders to customers as a way to restrict the results to only those orders for customers located in London.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryConcepts#3<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryConcepts/cs/Program.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryConcepts#3<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryConcepts/vb/Module1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If relationship properties did not exist you would have to write them manually as <bpt id="p1">*</bpt>joins<ept id="p1">*</ept>, just as you would do in a SQL query, as in the following code:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryConcepts#4<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryConcepts/cs/Program.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryConcepts#4<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryConcepts/vb/Module1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">*</bpt>relationship<ept id="p1">*</ept> property to define this particular relationship one time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can then use the more convenient dot syntax.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>But relationship properties exist more importantly because domain-specific object models are typically defined as hierarchies or graphs.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The objects that you program against have references to other objects.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It is only a happy coincidence that object-to-object relationships correspond to foreign-key-styled relationships in databases.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Property access then provides a convenient way to write joins.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>With regard to this, relationship properties are more important on the results side of a query than as part of the query itself.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>After the query has retrieved data about a particular customer, the class definition indicates that customers have orders.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In other words, you expect the <ph id="ph1">`Orders`</ph> property of a particular customer to be a collection that is populated with all the orders from that customer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>That is in fact the contract you declared by defining the classes in this manner.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You expect to see the orders there even if the query did not request orders.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You expect your object model to maintain an illusion that it is an in-memory extension of the database with related objects immediately available.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Now that you have relationships, you can write queries by referring to the relationship properties defined in your classes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These relationship references correspond to foreign-key relationships in the database.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Operations that use these relationships translate to more complex joins in the equivalent SQL.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>As long as you have defined a relationship (using the <ph id="ph1">&lt;xref:System.Data.Linq.Mapping.AssociationAttribute&gt;</ph> attribute), you do not have to code an explicit join in <ph id="ph2">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To help maintain this illusion, <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph> implements a technique called <bpt id="p1">*</bpt>deferred loading<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Deferred versus Immediate Loading<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/deferred-versus-immediate-loading.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Consider the following SQL query to project a list of <ph id="ph1">`CustomerID`</ph><ph id="ph2">-</ph><ph id="ph3">`OrderID`</ph> pairs:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To obtain the same results by using <ph id="ph1">[!INCLUDE[vbtecdlinq](../../../../../../includes/vbtecdlinq-md.md)]</ph>, you use the <ph id="ph2">`Orders`</ph> property reference already existing in the <ph id="ph3">`Customer`</ph> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Orders`</ph> reference provides the necessary information to execute the query and project the <ph id="ph2">`CustomerID`</ph><ph id="ph3">-</ph><ph id="ph4">`OrderID`</ph> pairs, as in the following code:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryConcepts#5<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryConcepts/cs/Program.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryConcepts#5<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryConcepts/vb/Module1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can also do the reverse.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>That is, you can query <ph id="ph1">`Orders`</ph> and use its <ph id="ph2">`Customer`</ph> relationship reference to access information about the associated <ph id="ph3">`Customer`</ph> object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following code projects the same <ph id="ph1">`CustomerID`</ph><ph id="ph2">-</ph><ph id="ph3">`OrderID`</ph> pairs as before, but this time by querying <ph id="ph4">`Orders`</ph> instead of <ph id="ph5">`Customers`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DLinqQueryConcepts#6<ept id="p2">](../../../../../../samples/snippets/csharp/VS_Snippets_Data/DLinqQueryConcepts/cs/Program.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DLinqQueryConcepts#6<ept id="p4">](../../../../../../samples/snippets/visualbasic/VS_Snippets_Data/DLinqQueryConcepts/vb/Module1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Concepts<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/query-concepts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>