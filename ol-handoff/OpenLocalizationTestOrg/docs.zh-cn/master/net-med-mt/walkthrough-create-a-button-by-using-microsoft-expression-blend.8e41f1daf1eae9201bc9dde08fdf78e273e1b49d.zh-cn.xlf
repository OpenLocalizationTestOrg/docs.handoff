<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8fb876121ea07659a38c19d6e9f20e1a614547ff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\walkthrough-create-a-button-by-using-microsoft-expression-blend.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6bd7ce67b86be8b691d308a6c22cdc04a0dae88</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c368a948d64c536f6ea957d163558d688fe4d850</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Create a Button by Using Microsoft Expression Blend | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Create a Button by Using Microsoft Expression Blend</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough steps you through the process of creating a <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> customized button using Microsoft Expression Blend.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Microsoft Expression Blend works by generating <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> that is then compiled to make the executable program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you would rather work with <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> directly, there is another walkthrough that creates the same application as this one using <ph id="ph2">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> with <ph id="ph3">[!INCLUDE[vs_current_short](../../../../includes/vs-current-short-md.md)]</ph> rather than Blend.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Create a Button by Using XAML<ept id="p1">](../../../../docs/framework/wpf/controls/walkthrough-create-a-button-by-using-xaml.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following illustration shows the customized button that you will create.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The customized button that you will create<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-intro.jpg "</bpt>custom_button_blend_Intro<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Convert a Shape to a Button</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the first part of this walkthrough you create the custom look of the custom button.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To do this, you first convert a rectangle to a button.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You then add additional shapes to the template of the button, creating a more complex looking button.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Why not start with a regular button and customize it?</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because a button has built-in functionality that you do not need; for custom buttons, it is easier to start with a rectangle.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To create a new project in Expression Blend</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Start Expression Blend.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(Click <bpt id="p1">**</bpt>Start<ept id="p1">**</ept>, point to <bpt id="p2">**</bpt>All Programs<ept id="p2">**</ept>, point to <bpt id="p3">**</bpt>Microsoft Expression<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Microsoft Expression Blend<ept id="p4">**</ept>.)</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Maximize the application if needed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>New Project<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Standard Application (.exe)<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Name the project <ph id="ph1">`CustomButton`</ph> and press <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>At this point you have a blank <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can press F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As you might expect, the application consists of only a blank window.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Next, you create a rounded rectangle and convert it into a button.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To convert a Rectangle to a Button</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Set the Window Background property to black:<ept id="p1">**</ept> Select the Window, click the <bpt id="p2">**</bpt>Properties Tab<ept id="p2">**</ept>, and set the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property to <ph id="ph2">`Black`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to set the background of a button to black<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-changebackground.png "</bpt>custom_button_blend_ChangeBackground<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Draw a rectangle approximately the size of a button on the Window:<ept id="p1">**</ept> Select the rectangle tool on the left-hand tool panel and drag the rectangle onto the Window.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to draw a rectangle<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-drawrect.png "</bpt>custom_button_blend_DrawRect<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Round out the corners of the rectangle:<ept id="p1">**</ept> Either drag the control points of the rectangle or directly set the <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle.RadiusX%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle.RadiusY%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Set the values of <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle.RadiusX%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle.RadiusY%2A&gt;</ph> to 20.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to make the corners of a rectangle round<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-roundcorners.png "</bpt>custom_button_blend_RoundCorners<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Change the rectangle into a button:<ept id="p1">**</ept> Select the rectangle.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Make Button<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to make a shape into a button<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-makebutton.png "</bpt>custom_button_blend_MakeButton<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Specify the scope of the style/template:<ept id="p1">**</ept> A dialog box like the following appears.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The "Create Style Resource" dialog box<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-makebutton2.gif "</bpt>custom_button_blend_MakeButton2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Resource name (Key)<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Apply to all<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This will make the resulting style and button template apply to all objects that are buttons.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Define in<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Application<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This will make the resulting style and button template have scope over the entire application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When you set the values in these two boxes, the button style and template apply to all buttons within the entire application and any button you create in the application will, by default, use this template.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Edit the Button Template</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You now have a rectangle that has been changed to a button.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In this section, you'll modify the template of the button and further customize how it looks.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To edit the button template to change the button appearance</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Go into edit template view:<ept id="p1">**</ept> To further customize the look of our button, we need to edit the button template.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This template was created when we converted the rectangle into a button.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To edit the button template, right-click the button and select <bpt id="p1">**</bpt>Edit Control Parts (Template)<ept id="p1">**</ept> and then <bpt id="p2">**</bpt>Edit Template<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to edit a template<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-edittemplate.jpg "</bpt>custom_button_blend_EditTemplate<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the template editor, notice that the button is now separated into a <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> and the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> is used to present content within the button (for example, the string "Button").</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Both the rectangle and <ph id="ph1">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> are laid out inside of a <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Components in the presentation of a rectangle<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-templatepanel.png "</bpt>custom_button_blend_TemplatePanel<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Change the names of the template components:<ept id="p1">**</ept> Right-click the rectangle in the template inventory, change the <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> name from "[Rectangle]" to "outerRectangle", and change "[ContentPresenter]" to "myContentPresenter".</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to rename a component of a template<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-renamecomponents.png "</bpt>custom_button_blend_RenameComponents<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Alter the rectangle so that it is empty inside (like a donut):<ept id="p1">**</ept> Select <bpt id="p2">**</bpt>outerRectangle<ept id="p2">**</ept> and set <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> to "Transparent" and <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.StrokeThickness%2A&gt;</ph> to 5.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to make a rectangle empty<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-changerectproperties.png "</bpt>custom_button_blend_ChangeRectProperties<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Then set the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> to the color of whatever the template will be.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To do this, click the small white box next to <bpt id="p1">**</bpt>Stroke<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>CustomExpression<ept id="p2">**</ept>, and type "{TemplateBinding Background}" in the dialog box.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to set the use the color of the template<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-templatestroke.png "</bpt>custom_button_blend_TemplateStroke<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create an inner rectangle:<ept id="p1">**</ept> Now, create another rectangle (name it "innerRectangle") and position it symmetrically on the inside of <bpt id="p2">**</bpt>outerRectangle<ept id="p2">**</ept> .</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For this kind of work, you will probably want to zoom to make the button larger in the editing area.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Your rectangle might look different than the one in the figure (for example, it might have rounded corners).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to create a rectangle inside another rectangle<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-innerrectangleproperties.png "</bpt>custom_button_blend_innerRectangleProperties<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Move ContentPresenter to the top:<ept id="p1">**</ept> At this point, it is possible that the text "Button" will not be visible any longer.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If this is so, this is because <bpt id="p1">**</bpt>innerRectangle<ept id="p1">**</ept> is on top of the <bpt id="p2">**</bpt>myContentPresenter<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To fix this, drag <bpt id="p1">**</bpt>myContentPresenter<ept id="p1">**</ept> below <bpt id="p2">**</bpt>innerRectangle<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Reposition rectangles and <bpt id="p1">**</bpt>myContentPresenter<ept id="p1">**</ept> to look similar to below.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Alternatively, you can also position <bpt id="p1">**</bpt>myContentPresenter<ept id="p1">**</ept> on top by right-clicking it and pressing <bpt id="p2">**</bpt>Send Forward<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to move one button on top of another button<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-innerrectangle2.png "</bpt>custom_button_blend_innerRectangle2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Change the look of innerRectangle:<ept id="p1">**</ept> Set the <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle.RadiusX%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle.RadiusY%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape.StrokeThickness%2A&gt;</ph> values to 20.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In addition, set the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> to the background of the template using the custom expression "{TemplateBinding Background}" ) and set <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> to "transparent".</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Notice that the settings for the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> of <bpt id="p1">**</bpt>innerRectangle<ept id="p1">**</ept> are the opposite of those for <bpt id="p2">**</bpt>outerRectangle<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to change the appearance of a rectangle<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-glassrectangleproperties1.png "</bpt>custom_button_blend_glassRectangleProperties1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Add a glass layer on top:<ept id="p1">**</ept> The final piece of customizing the look of the button is to add a glass layer on top.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This glass layer consists of a third rectangle.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Because the glass will cover the entire button, the glass rectangle is similar in dimensions to the <bpt id="p1">**</bpt>outerRectangle<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Therefore, create the rectangle by simply making a copy of the <bpt id="p1">**</bpt>outerRectangle<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Highlight <bpt id="p1">**</bpt>outerRectangle<ept id="p1">**</ept> and use CTRL+C and CTRL+V to make a copy.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Name this new rectangle "glassCube".</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reposition glassCube if necessary:<ept id="p1">**</ept> If <bpt id="p2">**</bpt>glassCube<ept id="p2">**</ept> is not already positioned so that it covers the entire button, drag it into position.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Give glassCube a slightly different shape than outerRectangle:<ept id="p1">**</ept> Change the properties of <bpt id="p2">**</bpt>glassCube<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Start off by changing the <ph id="ph1">&lt;xref:System.Windows.Shapes.Rectangle.RadiusX%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Shapes.Rectangle.RadiusY%2A&gt;</ph> properties to 10 and the <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape.StrokeThickness%2A&gt;</ph> to 2.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The appearance settings for glassCube<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-glasscubeappearance.gif "</bpt>custom_button_blend_GlassCubeAppearance<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Make glassCube look like glass:<ept id="p1">**</ept> Set the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> to a glassy look by  using a linear gradient that is 75% opaque and alternates between the color White and Transparent over 6 approximately evenly spaced intervals.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This is what to set the gradient stops to:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Gradient Stop 1: White with Alpha value of 75%</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Gradient Stop 2: Transparent</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Gradient Stop 3: White with Alpha value of 75%</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Gradient Stop 4: Transparent</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Gradient Stop 5: White with Alpha value of 75%</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Gradient Stop 6: Transparent</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This creates a "wavy" glass look.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A rectangle that that looks like glass<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-glassrectangleproperties2.png "</bpt>custom_button_blend_glassRectangleProperties2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hide the glass layer:<ept id="p1">**</ept> Now that you see what the glassy layer looks like, go into the <bpt id="p2">**</bpt>Appearance pane<ept id="p2">**</ept> of the <bpt id="p3">**</bpt>Properties panel<ept id="p3">**</ept> and set the Opacity to 0% to hide it.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In the sections ahead, we'll use property triggers and events to show and manipulate the glass layer.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to hide the glass rectangle<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-glassrectangleproperties3.gif "</bpt>custom_button_glassRectangleProperties3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Customize the Button Behavior</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>At this point, you have customized the presentation of the button by editing its template, but the button does not react to user actions as typical buttons do (for example, changing appearance upon mouse-over, receiving focus, and clicking.) The next two procedures show how to build behaviors like these into the custom button.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>We'll start with simple property triggers, and then add event triggers and animations.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To set property triggers</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create a new property trigger:<ept id="p1">**</ept> With <bpt id="p2">**</bpt>glassCube<ept id="p2">**</ept> selected, click <bpt id="p3">**</bpt>+ Property<ept id="p3">**</ept> in the <bpt id="p4">**</bpt>Triggers<ept id="p4">**</ept> panel (see the figure that follows the next step).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This creates a property trigger with a default property trigger.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Make IsMouseOver the property used by the trigger:<ept id="p1">**</ept> Change the property to <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This makes the property trigger activate when the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property is <ph id="ph2">`true`</ph> (when the user points to the button with the mouse).</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to set a trigger on a property<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-ismousedoverpropertytrigger.png "</bpt>custom_button_blend_IsMousedOverPropertyTrigger<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IsMouseOver triggers opacity of 100% for glassCube:<ept id="p1">**</ept> Notice that the <bpt id="p2">**</bpt>Trigger recording is on<ept id="p2">**</ept> (see the preceding figure).</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This means that any changes you make to the property values of <bpt id="p1">**</bpt>glassCube<ept id="p1">**</ept> while recording is on will become an action that takes place when <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>While recording, change the <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> of <bpt id="p1">**</bpt>glassCube<ept id="p1">**</ept> to 100%.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to set the opacity of a button<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-ismousedoverpropertytrigger2.gif "</bpt>custom_button_blend_IsMousedOverPropertyTrigger2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You have now created your first property trigger.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Notice that the <bpt id="p1">**</bpt>Triggers panel<ept id="p1">**</ept> of the editor has recorded the <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> being changed to 100%.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The "Triggers" panel<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-propertytriggerinfo.png "</bpt>custom_button_blend_PropertyTriggerInfo<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application, and move the mouse pointer over and off the button.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You should see the glass layer appear when you mouse-over the button and disappear when the pointer leaves.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IsMouseOver triggers stroke value change:<ept id="p1">**</ept> Let's associate some other actions with the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> trigger.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>While recording continues, switch your selection from <bpt id="p1">**</bpt>glassCube<ept id="p1">**</ept> to <bpt id="p2">**</bpt>outerRectangle<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Then set the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> of <bpt id="p1">**</bpt>outerRectangle<ept id="p1">**</ept> to the custom expression of "{DynamicResource {x:Static SystemColors.HighlightBrushKey}}".</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This sets the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> to the typical highlight color used by buttons.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Press F5 to see the effect when you mouse over the button.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to set the stroke to the highlight color<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-ismousedoverpropertytrigger3.png "</bpt>custom_button_blend_IsMousedOverPropertyTrigger3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IsMouseOver triggers blurry text:<ept id="p1">**</ept> Let's associate one more action to the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property trigger.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Make the content of the button appear a little blurry when the glass appears over it.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>To do this, we can apply a blur <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentPresenter&gt;</ph> (<bpt id="p1">**</bpt>myContentPresenter<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to blur the content of a button<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-propertytriggerwithbitmapeffect.png "</bpt>custom_button_blend_PropertyTriggerWithBitMapEffect<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>To return the <bpt id="p1">**</bpt>Properties panel<ept id="p1">**</ept> back to what it was before you did the search for <ph id="ph1">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, clear the text from the <bpt id="p2">**</bpt>Search box<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>At this point, we have used a property trigger with several associated actions to create highlighting behavior for when the mouse pointer enters and leaves the button area.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Another typical behavior for a button is to highlight when it has focus (as after it is clicked).</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>We can add such behavior by adding another property trigger for the <ph id="ph1">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create property trigger for IsFocused:<ept id="p1">**</ept> Using the same procedure as for <ph id="ph1">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> (see the first step of this section), create another property trigger for the <ph id="ph2">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>While <bpt id="p1">**</bpt>Trigger recording is on<ept id="p1">**</ept>, add the following actions to the trigger:</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>glassCube<ept id="p1">**</ept> gets an <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> of 100%.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>outerRectangle<ept id="p1">**</ept> gets a <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> custom expression value of "{DynamicResource {x:Static SystemColors.HighlightBrushKey}}".</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>As the final step in this walkthrough, we will add animations to the button.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>These animations will be triggered by events—specifically, the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To use event triggers and animations to add interactivity</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create a MouseEnter Event Trigger:<ept id="p1">**</ept> Add a new event trigger and select <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> as the event to use in the trigger.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to create a MouseEnter event trigger<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-mouseovereventtrigger.png "</bpt>custom_button_blend_MouseOverEventTrigger<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create an animation timeline:<ept id="p1">**</ept> Next, associate an animation timeline to the <ph id="ph1">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to add an animation timeline to an event<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-mouseovereventtrigger2.png "</bpt>custom_button_blend_MouseOverEventTrigger2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>After you press <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> to create a new timeline, a <bpt id="p2">**</bpt>Timeline Panel<ept id="p2">**</ept> appears and "Timeline recording is on" is visible in the design panel.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>This means we can start recording property changes in the timeline (animate property changes).</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>You may need to resize your window and/or panels to see the display.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The timeline panel<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-mouseovereventtrigger3.png "</bpt>custom_button_blend_MouseOverEventTrigger3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create a keyframe:<ept id="p1">**</ept> To create an animation, select the object you want to animate, create two or more keyframes on the timeline, and for those keyframes, set the property values you want the animation to interpolate between.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The following figure guides you through the creation of a keyframe.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to create a keyframe<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-mouseovereventtrigger4.png "</bpt>custom_button_blend_MouseOverEventTrigger4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Shrink glassCube at this keyframe:<ept id="p1">**</ept> With the second keyframe selected, shrink the size of the <bpt id="p2">**</bpt>glassCube<ept id="p2">**</ept> to 90% of its full size using the <bpt id="p3">**</bpt>Size Transform<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to shrink the size of a button<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-sizetransform.png "</bpt>custom_button_blend_SizeTransform<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Move the mouse pointer over the button.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Notice that the glass layer shrinks on top of the button.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create another Event Trigger and associate a different animation with it:<ept id="p1">**</ept> Let's add one more animation.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Use a similar procedure to what you used to create the previous event trigger animation:</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Create a new event trigger using the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Associate a new timeline with the <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to create a new timeline<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-clickeventtrigger1.png "</bpt>custom_button_blend_ClickEventTrigger1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>For this timeline, create two keyframes, one at 0.0 seconds and the second one at 0.3 seconds.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>With the keyframe at 0.3 seconds highlighted, set the <bpt id="p1">**</bpt>Rotate Transform Angle<ept id="p1">**</ept> to 360 degrees.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>How to create a rotate transform<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-rotatetransform.gif "</bpt>custom_button_blend_RotateTransform<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Click the button.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Notice that the glass layer spins around.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>You have completed a customized button.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>You did this using a button template that was applied to all buttons in the application.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If you leave the template editing mode (see the following figure) and create more buttons, you will see that they look and behave like your custom button rather than like the default button.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The custom buton template<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-scopeup.gif "</bpt>custom_button_blend_ScopeUp<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Multiple buttons that use the same template<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-createmultiplebuttons.png "</bpt>custom_button_blend_CreateMultipleButtons<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Press F5 to run the application.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Click the buttons and notice how they all behave the same.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Remember that while you were customizing the template, you set the <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property of <bpt id="p1">**</bpt>innerRectangle<ept id="p1">**</ept> and the <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> property <bpt id="p2">**</bpt>outerRectangle<ept id="p2">**</ept> to the template background ({TemplateBinding Background}).</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Because of this, when you set the background color of the individual buttons, the background you set will be used for those respective properties.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Try changing the backgrounds now.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>In the following figure, different gradients are used.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Therefore, although a template is useful for overall customization of controls like button, controls with templates can still be modified to look different from each other.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Buttons with the same template that look diferent<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/custom-button-blend-blendconclusion.jpg "</bpt>custom_button_blend_BlendConclusion<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>In conclusion, in the process of customizing a button template you have learned how to do the following in Microsoft Expression Blend:</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Customize the look of a control.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Set property triggers.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Property triggers are very useful because they can be used on most objects, not just controls.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Set event triggers.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Event triggers are very useful because they can be used on most objects, not just controls.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Create animations.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Miscellaneous: create gradients, add BitmapEffects, use transforms, and set basic properties of objects.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Create a Button by Using XAML<ept id="p1">](../../../../docs/framework/wpf/controls/walkthrough-create-a-button-by-using-xaml.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Painting with Solid Colors and Gradients Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Bitmap Effects Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/bitmap-effects-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>