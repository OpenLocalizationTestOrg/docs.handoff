<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c5771309b0b91f7760080783b771fd24f0ee89f6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\designing-service-contracts.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b340c96d4871c2cc72c8e5ca38aee4e51b969603</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">336772fccdf301373416f5176df6fdb1deee1259</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Designing Service Contracts | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Designing Service Contracts</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes what service contracts are, how they are defined, what operations are available (and the implications for the underlying message exchanges), what data types are used, and other issues that help you design operations that satisfy the requirements of your scenario.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Creating a Service Contract</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Services expose a number of operations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> applications, define the operations by creating a method and marking it with the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Then, to create a service contract, group together your operations, either by declaring them within an interface marked with the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute, or by defining them in a class marked with the same attribute.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>(For a basic example, see <bpt id="p1">[</bpt>How to: Define a Service Contract<ept id="p1">](../../../docs/framework/wcf/how-to-define-a-wcf-service-contract.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Any methods that do not have a <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute are not service operations and are not exposed by <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> services.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This topic describes the following decision points when designing a service contract:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Whether to use classes or interfaces.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>How to specify the data types you want to exchange.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The types of exchange patterns you can use.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Whether you can make explicit security requirements part of the contract.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The restrictions for operation inputs and outputs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Classes or Interfaces</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Both classes and interfaces represent a grouping of functionality and, therefore, both can be used to define a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service contract.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, it is recommended that you use interfaces because they directly model service contracts.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Without an implementation, interfaces do no more than define a grouping of methods with certain signatures.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Implement a service contract interface and you have implemented a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All the benefits of managed interfaces apply to service contract interfaces:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Service contract interfaces can extend any number of other service contract interfaces.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A single class can implement any number of service contracts by implementing those service contract interfaces.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can modify the implementation of a service contract by changing the interface implementation, while the service contract remains the same.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can version your service by implementing the old interface and the new one.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Old clients connect to the original version, while newer clients can connect to the newer version.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When inheriting from other service contract interfaces, you cannot override operation properties, such as the name or namespace.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If you attempt to do so, you create a new operation in the current service contract.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crexample](../../../includes/crexample-md.md)]</ph> using an interface to create a service contract, see <bpt id="p1">[</bpt>How to: Create a Service with a Contract Interface<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-service-with-a-contract-interface.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can, however, use a class to define a service contract and implement that contract at the same time.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The advantage of creating your services by applying <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> directly to the class and the methods on the class, respectively, is speed and simplicity.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The disadvantages are that managed classes do not support multiple inheritance, and as a result they can only implement one service contract at a time.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In addition, any modification to the class or method signatures modifies the public contract for that service, which can prevent unmodified clients from using your service.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Implementing Service Contracts<ept id="p1">](../../../docs/framework/wcf/implementing-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For an example that uses a class to create a service contract and implements it at the same time, see <bpt id="p1">[</bpt>How to: Create a Service with a Contract Class<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-wcf-contract-with-a-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>At this point, you should understand the difference between defining your service contract by using an interface and by using a class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The next step is deciding what data can be passed back and forth between a service and its clients.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Parameters and Return Values</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Each operation has a return value and a parameter, even if these are <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, unlike a local method, in which you can pass references to objects from one object to another, service operations do not pass references to objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Instead, they pass copies of the objects.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is significant because each type used in a parameter or return value must be serializable; that is, it must be possible to convert an object of that type into a stream of bytes and from a stream of bytes into an object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Primitive types are serializable by default, as are many types in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The value of the parameter names in the operation signature are part of the contract and are case sensitive.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you want to use the same parameter name locally but modify the name in the published metadata, see the <ph id="ph1">&lt;xref:System.ServiceModel.MessageParameterAttribute?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Data Contracts</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Service-oriented applications like <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> applications are designed to interoperate with the widest possible number of client applications on both Microsoft and non-Microsoft platforms.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For the widest possible interoperability, it is recommended that you mark your types with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attributes to create a data contract, which is the portion of the service contract that describes the data that your service operations exchange.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Data contracts are opt-in style contracts: No type or data member is serialized unless you explicitly apply the data contract attribute.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Data contracts are unrelated to the access scope of the managed code: Private data members can be serialized and sent elsewhere to be accessed publicly.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>(For a basic example of a data contract, see <bpt id="p1">[</bpt>How to: Create a Basic Data Contract for a Class or Structure<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-basic-data-contract-for-a-class-or-structure.md)</ept>.) <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> handles the definition of the underlying SOAP messages that enable the operation's functionality as well as the serialization of your data types into and out of the body of the messages.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As long as your data types are serializable, you do not need to think about the underlying message exchange infrastructure when designing your operations.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Although the typical <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> application uses the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attributes to create data contracts for operations, you can use other serialization mechanisms.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The standard <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>, <ph id="ph2">&lt;xref:System.SerializableAttribute&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> mechanisms all work to handle the serialization of your data types into the underlying SOAP messages that carry them from one application to another.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can employ more serialization strategies if your data types require special support.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> the choices for serialization of data types in <ph id="ph2">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> applications, see <bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Mapping Parameters and Return Values to Message Exchanges</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Service operations are supported by an underlying exchange of SOAP messages that transfer application data back and forth, in addition to the data required by the application to support certain standard security, transaction, and session-related features.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Because this is the case, the signature of a service operation dictates a certain underlying <bpt id="p1">*</bpt>message exchange pattern<ept id="p1">*</ept> (MEP) that can support the data transfer and the features an operation requires.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can specify three patterns in the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> programming model: request/reply, one-way, and duplex message patterns.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Request/Reply</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A request/reply pattern is one in which a request sender (a client application) receives a reply with which the request is correlated.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is the default MEP because it supports an operation in which one or more parameters are passed to the operation and a return value is passed back to the caller.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the following C# code example shows a basic service operation that takes one string and returns a string.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following is the equivalent Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This operation signature dictates the form of underlying message exchange.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If no correlation existed, <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> cannot determine for which operation the return value is intended.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Note that unless you specify a different underlying message pattern, even service operations that return <ph id="ph1">`void`</ph> (<ph id="ph2">`Nothing`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) are request/reply message exchanges.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The result for your operation is that unless a client invokes the operation asynchronously, the client stops processing until the return message is received, even though that message is empty in the normal case.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following C# code example shows an operation that does not return until the client has received an empty message in response.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The following is the equivalent Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The preceding example can slow client performance and responsiveness if the operation takes a long time to perform, but there are advantages to request/reply operations even when they return <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The most obvious one is that SOAP faults can be returned in the response message, which indicates that some service-related error condition has occurred, whether in communication or processing.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>SOAP faults that are specified in a service contract are passed to the client application as a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> object, where the type parameter is the type specified in the service contract.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This makes notifying clients about error conditions in <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> services easy.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> exceptions, SOAP faults, and error handling, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](../../../docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To see an example of a request/reply service and client, see <bpt id="p1">[</bpt>How to: Create a Request-Reply Contract<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-request-reply-contract.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> issues with the request-reply pattern, see <bpt id="p1">[</bpt>Request-Reply Services<ept id="p1">](../../../docs/framework/wcf/feature-details/request-reply-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>One-way</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the client of a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service application should not wait for the operation to complete and does not process SOAP faults, the operation can specify a one-way message pattern.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A one-way operation is one in which a client invokes an operation and continues processing after <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> writes the message to the network.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Typically this means that unless the data being sent in the outbound message is extremely large the client continues running almost immediately (unless there is an error sending the data).</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This type of message exchange pattern supports event-like behavior from a client to a service application.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A message exchange in which one message is sent and none are received cannot support a service operation that specifies a return value other than <ph id="ph1">`void`</ph>; in this case an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>No return message also means that there can be no SOAP fault returned to indicate any errors in processing or communication.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>(Communicating error information when operations are one-way operations requires a duplex message exchange pattern.)</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>To specify a one-way message exchange for an operation that returns <ph id="ph1">`void`</ph>, set the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property to <ph id="ph3">`true`</ph>, as in the following C# code example.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following is the equivalent Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>This method is identical to the preceding request/reply example, but setting the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> property to <ph id="ph2">`true`</ph> means that although the method is identical, the service operation does not send a return message and clients return immediately once the outbound message has been handed to the channel layer.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Create a One-Way Contract<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-one-way-contract.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> the one-way pattern, see <bpt id="p1">[</bpt>One-Way Services<ept id="p1">](../../../docs/framework/wcf/feature-details/one-way-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Duplex</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A duplex pattern is characterized by the ability of both the service and the client to send messages to each other independently whether using one-way or request/reply messaging.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This form of two-way communication is useful for services that must communicate directly to the client or for providing an asynchronous experience to either side of a message exchange, including event-like behavior.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The duplex pattern is slightly more complex than the request/reply or one-way patterns because of the additional mechanism for communicating with the client.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To design a duplex contract, you must also design a callback contract and assign the type of that callback contract to the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph> attribute that marks your service contract.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To implement a duplex pattern, you must create a second interface that contains the method declarations that are called on the client.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crexample](../../../includes/crexample-md.md)]</ph> creating a service, and a client that accesses that service, see <bpt id="p1">[</bpt>How to: Create a Duplex Contract<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-duplex-contract.md)</ept> and <bpt id="p2">[</bpt>How to: Access Services with a Duplex Contract<ept id="p2">](../../../docs/framework/wcf/feature-details/how-to-access-services-with-a-duplex-contract.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>For a working sample, see <bpt id="p1">[</bpt>Duplex<ept id="p1">](../../../docs/framework/wcf/samples/duplex.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> issues using duplex contracts, see <bpt id="p1">[</bpt>Duplex Services<ept id="p1">](../../../docs/framework/wcf/feature-details/duplex-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When a service receives a duplex message, it looks at the <ph id="ph1">`ReplyTo`</ph> element in that incoming message to determine where to send the reply.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the channel that is used to receive the message is not secured, then an untrusted client could send a malicious message with a target machine's <ph id="ph1">`ReplyTo`</ph>, leading to a denial of service (DOS) of that target machine.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Out and Ref Parameters</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In most cases, you can use <ph id="ph1">`in`</ph> parameters (<ph id="ph2">`ByVal`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) and <ph id="ph4">`out`</ph> and <ph id="ph5">`ref`</ph> parameters (<ph id="ph6">`ByRef`</ph> in <ph id="ph7">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Because both <ph id="ph1">`out`</ph> and <ph id="ph2">`ref`</ph> parameters indicate that data is returned from an operation, an operation signature such as the following specifies that a request/reply operation is required even though the operation signature returns <ph id="ph3">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following is the equivalent Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The only exceptions are those cases in which your signature has a particular structure.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>For example, you can use the <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph> binding to communicate with clients only if the method used to declare an operation returns <ph id="ph2">`void`</ph>; there can be no output value, whether it is a return value, <ph id="ph3">`ref`</ph>, or <ph id="ph4">`out`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In addition, using <ph id="ph1">`out`</ph> or <ph id="ph2">`ref`</ph> parameters requires that the operation have an underlying response message to carry back the modified object.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If your operation is a one-way operation, an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown at runtime.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Specify Message Protection Level on the Contract</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>When designing your contract, you must also decide the message protection level of services that implement your contract.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This is necessary only if message security is applied to the binding in the contract's endpoint.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If the binding has security turned off (that is, if the system-provided binding sets the <ph id="ph1">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=fullName&gt;</ph> to the value <ph id="ph2">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=fullName&gt;</ph>) then you do not have to decide on the message protection level for the contract.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In most cases, system-provided bindings with message-level security applied provide a sufficient protection level and you do not have to consider the protection level for each operation or for each message.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The protection level is a value that specifies whether the messages (or message parts) that support a service are signed, signed and encrypted, or sent without signatures or encryption.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The protection level can be set at various scopes: At the service level, for a particular operation, for a message within that operation, or a message part.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Values set at one scope become the default value for smaller scopes unless explicitly overridden.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If a binding configuration cannot provide the required minimum protection level for the contract, an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>And when no protection level values are explicitly set on the contract, the binding configuration controls the protection level for all messages if the binding has message security.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This is the default behavior.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Deciding whether to explicitly set various scopes of a contract to less than the full protection level of <ph id="ph1">&lt;xref:System.Net.Security.ProtectionLevel?displayProperty=fullName&gt;</ph> is generally a decision that trades some degree of security for increased performance.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>In these cases, your decisions must revolve around your operations and the value of the data they exchange.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Securing Services<ept id="p1">](../../../docs/framework/wcf/securing-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, the following code example does not set either the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> or the <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> property on the contract.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following is the equivalent Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When interacting with an <ph id="ph1">`ISampleService`</ph> implementation in an endpoint with a default <ph id="ph2">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> (the default <ph id="ph3">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=fullName&gt;</ph>, which is <ph id="ph4">&lt;xref:System.ServiceModel.SecurityMode&gt;</ph>), all messages are encrypted and signed because this is the default protection level.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>However, when an <ph id="ph1">`ISampleService`</ph> service is used with a default <ph id="ph2">&lt;xref:System.ServiceModel.BasicHttpBinding&gt;</ph> (the default <ph id="ph3">&lt;xref:System.ServiceModel.SecurityMode&gt;</ph>, which is <ph id="ph4">&lt;xref:System.ServiceModel.SecurityMode&gt;</ph>), all messages are sent as text because there is no security for this binding and so the protection level is ignored (that is, the messages are neither encrypted nor signed).</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.SecurityMode&gt;</ph> was changed to <ph id="ph2">&lt;xref:System.ServiceModel.SecurityMode&gt;</ph>, then these messages would be encrypted and signed (because that would now be the binding's default protection level).</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If you want to explicitly specify or adjust the protection requirements for your contract, set the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A&gt;</ph> property (or any of the <ph id="ph2">`ProtectionLevel`</ph> properties at a smaller scope) to the level your service contract requires.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>In this case, using an explicit setting requires the binding to support that setting at a minimum for the scope used.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For example, the following code example specifies one <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A&gt;</ph> value explicitly, for the <ph id="ph2">`GetGuid`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The following is the equivalent Visual Basic code.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A service that implements this <ph id="ph1">`IExplicitProtectionLevelSampleService`</ph> contract and has an endpoint that uses the default <ph id="ph2">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> (the default <ph id="ph3">&lt;xref:System.ServiceModel.SecurityMode?displayProperty=fullName&gt;</ph>, which is <ph id="ph4">&lt;xref:System.ServiceModel.SecurityMode&gt;</ph>) has the following behavior:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetString`</ph> operation messages are encrypted and signed.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetInt`</ph> operation messages are sent as unencrypted and unsigned (that is, plain) text.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetGuid`</ph> operation <ph id="ph2">&lt;xref:System.Guid?displayProperty=fullName&gt;</ph> is returned in a message that is encrypted and signed.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> protection levels and how to use them, see <bpt id="p1">[</bpt>Understanding Protection Level<ept id="p1">](../../../docs/framework/wcf/understanding-protection-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> security, see <bpt id="p1">[</bpt>Securing Services<ept id="p1">](../../../docs/framework/wcf/securing-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Other Operation Signature Requirements</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Some application features require a particular kind of operation signature.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph> binding supports durable services and clients, in which an application can restart in the middle of communication and pick up where it left off without missing any messages.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Queues in WCF<ept id="p1">](../../../docs/framework/wcf/feature-details/queues-in-wcf.md)</ept>.) However, durable operations must take only one <ph id="ph2">`in`</ph> parameter and have no return value.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Another example is the use of <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> types in operations.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> parameter includes the entire message body, if an input or an output (that is, <ph id="ph2">`ref`</ph> parameter, <ph id="ph3">`out`</ph> parameter, or return value) is of type <ph id="ph4">&lt;xref:System.IO.Stream&gt;</ph>, then it must be the only input or output specified in your operation.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>In addition, the parameter or return type must be either <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.Serialization.IXmlSerializable?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> streams, see <bpt id="p1">[</bpt>Large Data and Streaming<ept id="p1">](../../../docs/framework/wcf/feature-details/large-data-and-streaming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Names, Namespaces, and Obfuscation</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The names and namespaces of the .NET types in the definition of contracts and operations are significant when contracts are converted into WSDL and when contract messages are created and sent.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Therefore, it is strongly recommended that service contract names and namespaces are explicitly set using the <ph id="ph1">`Name`</ph> and <ph id="ph2">`Namespace`</ph> properties of all supporting contract attributes such as the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceContractAttribute&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph>, <ph id="ph5">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph>,  <ph id="ph6">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph>, and other contract attributes.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>One result of this is that if the names and namespaces are not explicitly set, the use of IL obfuscation on the assembly alters the contract type names and namespaces and results in modified WSDL and wire exchanges that typically fail.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>If you do not set the contract names and namespaces explicitly but do intend to use obfuscation, use the <ph id="ph1">&lt;xref:System.Reflection.ObfuscationAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.ObfuscateAssemblyAttribute&gt;</ph> attributes to prevent the modification of the contract type names and namespaces.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Request-Reply Contract<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-request-reply-contract.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a One-Way Contract<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-one-way-contract.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Duplex Contract<ept id="p1">](../../../docs/framework/wcf/feature-details/how-to-create-a-duplex-contract.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying Data Transfer in Service Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](../../../docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Sessions<ept id="p1">](../../../docs/framework/wcf/using-sessions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Synchronous and Asynchronous Operations<ept id="p1">](../../../docs/framework/wcf/synchronous-and-asynchronous-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reliable Services<ept id="p1">](../../../docs/framework/wcf/reliable-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Services and Transactions<ept id="p1">](../../../docs/framework/wcf/services-and-transactions.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>