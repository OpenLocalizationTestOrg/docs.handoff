<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f393b14a524e66dd49ed7387877ee8e66851f8a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\type-conversion.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5aa167838a869418aa38ee83e4b12dda95956f7c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71cbd2d66636aad429d6d46566c14d8002514ca2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>title: "Type Conversion in the .NET Framework | Microsoft Docs" ms.custom: "" ms.date: "03/30/2017" ms.prod: ".net" ms.reviewer: "" ms.suite: "" ms.technology:v ms.tgt_pltfrm: "" ms.topic: "article" helpviewer_keywords:</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>"widening conversions"</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>"explicit conversions"</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>"narrowing conversions"</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>"type conversion, about type conversion"</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>"type conversion"</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>"converting types"</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>"narrowing coercion"</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>"Explicit operator"</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>"IConvertible interface"</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>"base types, converting"</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>"op_Implicit method"</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>"widening coercion"</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>"op_Explicit method"</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>"Convert class"</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>"implicit conversions"</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>"Implicit operator"</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>"data types [.NET Framework], converting" ms.assetid: ba36154f-064c-47d3-9f05-72f93a7ca96d caps.latest.revision: 22 author: "rpetrusha" ms.author: "ronpet" manager: "wpickett"</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Type Conversion in the .NET Framework</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="top"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Every value has an associated type, which defines attributes such as the amount of space allocated to the value, the range of possible values it can have, and the members that it makes available.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Many values can be expressed as more than one type.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, the value 4 can be expressed as an integer or a floating-point value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Type conversion creates a value in a new type that is equivalent to the value of an old type, but does not necessarily preserve the identity (or exact value) of the original object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The .NET Framework automatically supports the following conversions:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Conversion from a derived class to a base class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This means, for example, that an instance of any class or structure can be converted to an <ph id="ph1">&lt;xref:System.Object&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting or conversion operator.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Conversion from a base class back to the original derived class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Conversion from a type that implements an interface to an interface object that represents that interface.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This conversion does not require a casting or conversion operator.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Conversion from an interface object back to the original type that implements that interface.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In C#, this conversion requires a casting operator.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In Visual Basic, it requires the <ph id="ph1">`CType`</ph> operator if <ph id="ph2">`Option Strict`</ph> is on.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition to these automatic conversions, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> provides several features that support custom type conversion.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These include the following:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Implicit`</ph> operator, which defines the available widening conversions between types.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Implicit Conversion with the Implicit Operator<ept id="p1">](#implicit_conversion_with_the_implicit_operator)</ept> section.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Explicit`</ph> operator, which defines the available narrowing conversions between types.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Explicit Conversion with the Explicit Operator<ept id="p1">](#explicit_conversion_with_the_explicit_operator)</ept> section.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface, which defines conversions to each of the base .NET Framework data types.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The IConvertible Interface<ept id="p1">](#the_iconvertible_interface)</ept> section.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class, which provides a set of methods that implement the methods in the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see the<bpt id="p1">[</bpt>The Convert Class<ept id="p1">](#Convert)</ept> section.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> class, which is a base class that can be extended to support the conversion of a specified type to any other type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>The TypeConverter Class<ept id="p1">](#the_typeconverter_class)</ept> section.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Implicit Conversion with the Implicit Operator</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Widening conversions involve the creation of a new value from the value of an existing type that has either a more restrictive range or a more restricted member list than the target type.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Widening conversions cannot result in data loss (although they may result in a loss of precision).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Because data cannot be lost, compilers can handle the conversion implicitly or transparently, without requiring the use of an explicit conversion method or a casting operator.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Although code that performs an implicit conversion can call a conversion method or use a casting operator, their use is not required by compilers that support implicit conversions.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> type supports implicit conversions from <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Int16&gt;</ph>, <ph id="ph5">&lt;xref:System.Int32&gt;</ph>, <ph id="ph6">&lt;xref:System.Int64&gt;</ph>, <ph id="ph7">&lt;xref:System.SByte&gt;</ph>, <ph id="ph8">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, and <ph id="ph10">&lt;xref:System.UInt64&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example illustrates some of these implicit conversions in assigning values to a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> variable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/implicit1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/implicit1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom operators, you can also define implicit conversions in your own custom types.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It supports implicit conversion of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> and <ph id="ph2">&lt;xref:System.SByte&gt;</ph> values to <ph id="ph3">`ByteWithSign`</ph> values.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/implicit1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/implicit1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <ph id="ph2">&lt;xref:System.Byte&gt;</ph> and <ph id="ph3">&lt;xref:System.SByte&gt;</ph> values without performing any explicit conversions or using any casting operators, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/implicit1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/implicit1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Explicit Conversion with the Explicit Operator</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Narrowing conversions involve the creation of a new value from the value of an existing type that has either a greater range or a larger member list than the target type.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Because a narrowing conversion can result in a loss of data, compilers often require that the conversion be made explicit through a call to a conversion method or a casting operator.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>That is, the conversion must be handled explicitly in developer code.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The major purpose of requiring a conversion method or casting operator for narrowing conversions is to make the developer aware of the possibility of data loss or an <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> so that it can be handled in code.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>However, some compilers can relax this requirement.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For example, in Visual Basic, if <ph id="ph1">`Option Strict`</ph> is off (its default setting), the Visual Basic compiler tries to perform narrowing conversions implicitly.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph2">&lt;xref:System.Int64&gt;</ph>, and <ph id="ph3">&lt;xref:System.UInt64&gt;</ph> data types have ranges that exceed that the <ph id="ph4">&lt;xref:System.Int32&gt;</ph> data type, as the following table shows.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Comparison with range of Int32</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Int64.MaxValue?displayProperty=fullName&gt;</ph> is greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Int64.MinValue?displayProperty=fullName&gt;</ph> is less than (has a greater negative range than) <ph id="ph4">&lt;xref:System.Int32.MinValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;</ph> is greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.UInt64.MaxValue?displayProperty=fullName&gt;</ph> is greater than <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To handle such narrowing conversions, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> allows types to define an <ph id="ph2">`Explicit`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Individual language compilers can then implement this operator using their own syntax, or a member of the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class can be called to perform the conversion.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>(For more information about the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class, see <bpt id="p1">[</bpt>The Convert Class<ept id="p1">](#Convert)</ept> later in this topic.) The following example illustrates the use of language features to handle the explicit conversion of these potentially out-of-range integer values to <ph id="ph2">&lt;xref:System.Int32&gt;</ph> values.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/explicit1.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/explicit1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Explicit conversions can produce different results in different languages, and these results can differ from the value returned by the corresponding <ph id="ph1">&lt;xref:System.Convert&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value 12.63251 is converted to an <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, both the Visual Basic <ph id="ph3">`CInt`</ph> method and the .NET Framework <ph id="ph4">&lt;xref:System.Convert.ToInt32%28System.Double%29?displayProperty=fullName&gt;</ph> method round the <ph id="ph5">&lt;xref:System.Double&gt;</ph> to return a value of 13, but the C# <ph id="ph6">`(int)`</ph> operator truncates the <ph id="ph7">&lt;xref:System.Double&gt;</ph> to return a value of 12.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Similarly, the C# <ph id="ph1">`(int)`</ph> operator does not support Boolean-to-integer conversion, but the Visual Basic <ph id="ph2">`CInt`</ph> method converts a value of <ph id="ph3">`true`</ph> to -1.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>On the other hand, the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Boolean%29?displayProperty=fullName&gt;</ph> method converts a value of <ph id="ph2">`true`</ph> to 1.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Most compilers allow explicit conversions to be performed in a checked or unchecked manner.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>When a checked conversion is performed, an <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> is thrown when the value of the type to be converted is outside the range of the target type.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When an unchecked conversion is performed under the same conditions, the conversion might not throw an exception, but the exact behavior becomes undefined and an incorrect value might result.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In C#, checked conversions can be performed by using the <ph id="ph1">`checked`</ph> keyword together with a casting operator, or by specifying the <ph id="ph2">`/checked+`</ph> compiler option.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by using the <ph id="ph1">`unchecked`</ph> keyword together with the casting operator, or by specifying the <ph id="ph2">`/checked-`</ph> compiler option.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are unchecked.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In Visual Basic, checked conversions can be performed by clearing the <bpt id="p1">**</bpt>Remove integer overflow checks<ept id="p1">**</ept> check box in the project's <bpt id="p2">**</bpt>Advanced Compiler Settings<ept id="p2">**</ept> dialog box, or by specifying the <ph id="ph1">`/removeintchecks-`</ph> compiler option.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Conversely, unchecked conversions can be performed by selecting the <bpt id="p1">**</bpt>Remove integer overflow checks<ept id="p1">**</ept> check box in the project's <bpt id="p2">**</bpt>Advanced Compiler Settings<ept id="p2">**</ept> dialog box or by specifying the <ph id="ph1">`/removeintchecks+`</ph> compiler option.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>By default, explicit conversions are checked.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following C# example uses the <ph id="ph1">`checked`</ph> and <ph id="ph2">`unchecked`</ph> keywords to illustrate the difference in behavior when a value outside the range of a <ph id="ph3">&lt;xref:System.Byte&gt;</ph> is converted to a <ph id="ph4">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The checked conversion throws an exception, but the unchecked conversion assigns <ph id="ph1">&lt;xref:System.Byte.MaxValue?displayProperty=fullName&gt;</ph> to the <ph id="ph2">&lt;xref:System.Byte&gt;</ph> variable.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#12<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/explicit1.cs#12)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If a particular language compiler supports custom overloaded operators, you can also define explicit conversions in your own custom types.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The following example provides a partial implementation of a signed byte data type named <ph id="ph1">`ByteWithSign`</ph> that uses sign-and-magnitude representation.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It supports explicit conversion of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> values to <ph id="ph3">`ByteWithSign`</ph> values.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/explicit1.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/explicit1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Client code can then declare a <ph id="ph1">`ByteWithSign`</ph> variable and assign it <ph id="ph2">&lt;xref:System.Int32&gt;</ph> and <ph id="ph3">&lt;xref:System.UInt32&gt;</ph> values if the assignments include a casting operator or a conversion method, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#6<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/explicit1.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#6<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/explicit1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The IConvertible Interface</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>To support the conversion of any type to a common language runtime base type, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> provides the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The implementing type is required to provide the following:</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A method that returns the <ph id="ph1">&lt;xref:System.TypeCode&gt;</ph> of the implementing type.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Methods to convert the implementing type to each common language runtime base type (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.DateTime&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, and so on).</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A generalized conversion method to convert an instance of the implementing type to another specified type.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Conversions that are not supported should throw an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Each common language runtime base type (that is, the <ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.DateTime&gt;</ph>, <ph id="ph5">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph6">&lt;xref:System.Double&gt;</ph>, <ph id="ph7">&lt;xref:System.Int16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.Int64&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.Single&gt;</ph>, <ph id="ph12">&lt;xref:System.String&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph14">&lt;xref:System.UInt32&gt;</ph>, and <ph id="ph15">&lt;xref:System.UInt64&gt;</ph>), as well as the <ph id="ph16">&lt;xref:System.DBNull&gt;</ph> and <ph id="ph17">&lt;xref:System.Enum&gt;</ph> types, implement the <ph id="ph18">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>However, these are explicit interface implementations; the conversion method can be called only through an <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface variable, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This example converts an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> value to its equivalent <ph id="ph2">&lt;xref:System.Char&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/iconvertible1.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#7<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/iconvertible1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The requirement to call the conversion method on its interface rather than on the implementing type makes explicit interface implementations relatively expensive.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Instead, we recommend that you call the appropriate member of the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class to convert between common language runtime base types.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more information, see the next section, <bpt id="p1">[</bpt>The Convert Class<ept id="p1">](#Convert)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In addition to the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface and the <ph id="ph2">&lt;xref:System.Convert&gt;</ph> class provided by the <ph id="ph3">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph>, individual languages may also provide ways to perform conversions.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For example, C# uses casting operators; Visual Basic uses compiler-implemented conversion functions such as <ph id="ph1">`CType`</ph>, <ph id="ph2">`CInt`</ph>, and <ph id="ph3">`DirectCast`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>For the most part, the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface is designed to support conversion between the base types in the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>However, the interface can also be implemented by a custom type to support conversion of that type to other custom types.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information, see the section <bpt id="p1">[</bpt>Custom Conversions with the ChangeType Method<ept id="p1">](#ChangeType)</ept> later in this topic.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The Convert Class</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Although each base type's <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface implementation can be called to perform a type conversion, calling the methods of the <ph id="ph2">&lt;xref:System.Convert?displayProperty=fullName&gt;</ph> class is the recommended language-neutral way to convert from one base type to another.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method can be used to convert from a specified custom type to another type.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Conversions Between Base Types</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class provides a language-neutral way to perform conversions between base types and is available to all languages that target the common language runtime.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>It provides a complete set of methods for both widening and narrowing conversions, and throws an <ph id="ph1">&lt;xref:System.InvalidCastException&gt;</ph> for conversions that are not supported (such as the conversion of a <ph id="ph2">&lt;xref:System.DateTime&gt;</ph> value to an integer value).</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Narrowing conversions are performed in a checked context, and an <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> is thrown if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class includes methods to convert to and from each base type, it eliminates the need to call each base type's <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> explicit interface implementation.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Convert?displayProperty=fullName&gt;</ph> class to perform several widening and narrowing conversions between .NET Framework base types.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#8<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/convert1.cs#8)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#8<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/convert1.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In some cases, particularly when converting to and from floating-point values, a conversion may involve a loss of precision, even though it does not throw an <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example illustrates this loss of precision.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In the first case, a <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> value has less precision (fewer significant digits) when it is converted to a <ph id="ph2">&lt;xref:System.Double&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In the second case, a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value is rounded from 42.72 to 43 in order to complete the conversion.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#9<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/convert1.cs#9)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#9<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/convert1.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>For a table that lists both the widening and narrowing conversions supported by the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class, see <bpt id="p1">[</bpt>Type Conversion Tables<ept id="p1">](../../../docs/standard/base-types/conversion-tables.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Custom Conversions with the ChangeType Method</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In addition to supporting conversions to each of the base types, the <ph id="ph1">&lt;xref:System.Convert&gt;</ph> class can be used to convert a custom type to one or more predefined types.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>This conversion is performed by the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> method, which in turn wraps a call to the <ph id="ph2">&lt;xref:System.IConvertible.ToType%2A?displayProperty=fullName&gt;</ph> method of the <ph id="ph3">`value`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>This means that the object represented by the <ph id="ph1">`value`</ph> parameter must provide an implementation of the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Because the <ph id="ph1">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> methods use a <ph id="ph3">&lt;xref:System.Type&gt;</ph> object to specify the target type to which <ph id="ph4">`value`</ph> is converted, they can be used to perform a dynamic conversion to an object whose type is not known at compile time.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>However, note that the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementation of <ph id="ph2">`value`</ph> must still support this conversion.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The following example illustrates a possible implementation of the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface that allows a <ph id="ph2">`TemperatureCelsius`</ph> object to be converted to a <ph id="ph3">`TemperatureFahrenheit`</ph> object and vice versa.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The example defines a base class, <ph id="ph1">`Temperature`</ph>, that implements the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface and overrides the <ph id="ph3">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The derived <ph id="ph1">`TemperatureCelsius`</ph> and <ph id="ph2">`TemperatureFahrenheit`</ph> classes each override the <ph id="ph3">`ToType`</ph> and the <ph id="ph4">`ToString`</ph> methods of the base class.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#10<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/iconvertible2.cs#10)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#10<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/iconvertible2.vb#10)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The following example illustrates several calls to these <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> implementations to convert <ph id="ph2">`TemperatureCelsius`</ph> objects to <ph id="ph3">`TemperatureFahrenheit`</ph> objects and vice versa.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.Conversion#11<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.conversion/cs/iconvertible2.cs#11)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.Conversion#11<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.conversion/vb/iconvertible2.vb#11)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The TypeConverter Class</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The .NET Framework also allows you to define a type converter for a custom type by extending the <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter?displayProperty=fullName&gt;</ph> class and associating the type converter with the type through a <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverterAttribute?displayProperty=fullName&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The following table highlights the differences between this approach and implementing the <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> interface for a custom type.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Design-time support can be provided for a custom type only if it has a type converter defined for it.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Conversion using TypeConverter</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Conversion using IConvertible</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Is implemented for a custom type by deriving a separate class from <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This derived class is associated with the custom type by applying a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Is implemented by a custom type to perform conversion.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A user of the type invokes an <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph> conversion method on the type.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Can be used both at design time and at run time.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Can be used only at run time.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Uses reflection; therefore, is slower than conversion enabled by <ph id="ph1">&lt;xref:System.IConvertible&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Does not use reflection.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Allows two-way type conversions from the custom type to other data types, and from other data types to the custom type.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For example, a <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> defined for <ph id="ph2">`MyType`</ph> allows conversions from <ph id="ph3">`MyType`</ph> to <ph id="ph4">&lt;xref:System.String&gt;</ph>, and from <ph id="ph5">&lt;xref:System.String&gt;</ph> to <ph id="ph6">`MyType`</ph>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Allows conversion from a custom type to other data types, but not from other data types to the custom type.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For more information about using type converters to perform conversions, see <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Tables<ept id="p1">](../../../docs/standard/base-types/conversion-tables.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>