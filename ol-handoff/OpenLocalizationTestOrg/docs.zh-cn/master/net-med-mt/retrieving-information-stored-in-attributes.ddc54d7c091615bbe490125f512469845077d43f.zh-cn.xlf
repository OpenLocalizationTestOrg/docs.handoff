<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="retrieving-information-stored-in-attributes.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">548f5d96cfaf8c8a8c9185ba894e79508c2283f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\attributes\retrieving-information-stored-in-attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5daa4f2ba9fc1d8d66764870da52cbbe48eeb40</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fd7004040677fca86804702c6a6a9cb46fc4b6a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Retrieving Information Stored in Attributes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Retrieving Information Stored in Attributes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Retrieving a custom attribute is a simple process.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>First, declare an instance of the attribute you want to retrieve.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Then, use the <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttribute%2A?displayProperty=fullName&gt;</ph> method to initialize the new attribute to the value of the attribute you want to retrieve.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Once the new attribute is initialized, you simply use its properties to get the values.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic describes how to retrieve attributes for code loaded into the execution context.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To retrieve attributes for code loaded into the reflection-only context, you must use the <ph id="ph1">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class, as shown in <bpt id="p1">[</bpt>How to: Load Assemblies into the Reflection-Only Context<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This section describes the following ways to retrieve attributes:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving a single instance of an attribute<ept id="p1">](#cpconretrievingsingleinstanceofattribute)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving multiple instances of an attribute applied to the same scope<ept id="p1">](#cpconretrievingmultipleinstancesofattributeappliedtosamescope)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving multiple instances of an attribute applied to different scopes<ept id="p1">](#cpconretrievingmultipleinstancesofattributeappliedtodifferentscopes)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Retrieving a Single Instance of an Attribute</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`DeveloperAttribute`</ph> (described in the previous section) is applied to the <ph id="ph2">`MainApp`</ph> class on the class level.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`GetAttribute`</ph> method uses <bpt id="p1">**</bpt>GetCustomAttribute<ept id="p1">**</ept> to retrieve the values stored in <ph id="ph2">`DeveloperAttribute`</ph> on the class level before displaying them to the console.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This program displays the following text when executed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the attribute is not found, the <bpt id="p1">**</bpt>GetCustomAttribute<ept id="p1">**</ept> method initializes <ph id="ph1">`MyAttribute`</ph> to a null value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This example checks <ph id="ph1">`MyAttribute`</ph> for such an instance and notifies the user if no attribute is found.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`DeveloperAttribute`</ph> is not found in the class scope, the following message displays to the console.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This example assumes that the attribute definition is in the current namespace.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Remember to import the namespace in which the attribute definition resides if it is not in the current namespace.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Retrieving Multiple Instances of an Attribute Applied to the Same Scope</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the previous example, the class to inspect and the specific attribute to find are passed to <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttribute%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>That code works well if only one instance of an attribute is applied on the class level.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, if multiple instances of an attribute are applied on the same class level, the <bpt id="p1">**</bpt>GetCustomAttribute<ept id="p1">**</ept> method does not retrieve all the information.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In cases where multiple instances of the same attribute are applied to the same scope, you can use <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> to place all instances of an attribute into an array.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, if two instances of <ph id="ph1">`DeveloperAttribute`</ph> are applied on the class level of the same class, the <ph id="ph2">`GetAttribute`</ph> method can be modified to display the information found in both attributes.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remember, to apply multiple attributes on the same level, the attribute must be defined with the <bpt id="p1">**</bpt>AllowMultiple<ept id="p1">**</ept> property set to <bpt id="p2">**</bpt>true<ept id="p2">**</ept> in the <ph id="ph1">&lt;xref:System.AttributeUsageAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code example shows how to use the <bpt id="p1">**</bpt>GetCustomAttributes<ept id="p1">**</ept> method to create an array that references all instances of <ph id="ph1">`DeveloperAttribute`</ph> in any given class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The values of all attributes are then displayed to the console.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If no attributes are found, this code alerts the user.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Otherwise, the information contained in both instances of <ph id="ph1">`DeveloperAttribute`</ph> is displayed.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Retrieving Multiple Instances of an Attribute Applied to Different Scopes</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Attribute.GetCustomAttribute%2A&gt;</ph> methods do not search an entire class and return all instances of an attribute in that class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Rather, they search only one specified method or member at a time.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you have a class with the same attribute applied to every member and you want to retrieve the values in all the attributes applied to those members, you must supply every method or member individually to <bpt id="p1">**</bpt>GetCustomAttributes<ept id="p1">**</ept> and <bpt id="p2">**</bpt>GetCustomAttribute<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code example takes a class as a parameter and searches for the <ph id="ph1">`DeveloperAttribute`</ph> (defined previously) on the class level and on every individual method of that class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If no instances of the <ph id="ph1">`DeveloperAttribute`</ph> are found on the method level or class level, the <ph id="ph2">`GetAttribute`</ph> method notifies the user that no attributes were found and displays the name of the method or class that does not contain the attribute.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If an attribute is found, the <ph id="ph1">`Name`</ph>, <ph id="ph2">`Level`</ph>, and <ph id="ph3">`Reviewed`</ph> fields are displayed to the console.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can use the members of the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class to get the individual methods and members in the passed class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This example first queries the <bpt id="p1">**</bpt>Type<ept id="p1">**</ept> object to get attribute information for the class level.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Next, it uses <ph id="ph1">&lt;xref:System.Type.GetMethods%2A?displayProperty=fullName&gt;</ph> to place instances of all methods into an array of <ph id="ph2">&lt;xref:System.Reflection.MemberInfo?displayProperty=fullName&gt;</ph> objects to retrieve attribute information for the method level.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Type.GetProperties%2A?displayProperty=fullName&gt;</ph> method to check for attributes on the property level or <ph id="ph2">&lt;xref:System.Type.GetConstructors%2A?displayProperty=fullName&gt;</ph> to check for attributes on the constructor level.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Type?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Attribute.GetCustomAttribute%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](../../../docs/standard/attributes/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>