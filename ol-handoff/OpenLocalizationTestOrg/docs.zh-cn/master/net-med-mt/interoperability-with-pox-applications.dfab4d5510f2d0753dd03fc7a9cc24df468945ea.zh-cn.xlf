<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="interoperability-with-pox-applications.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4bba6e501dcf02c584a4b8fe4ef02b2e29b52da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\interoperability-with-pox-applications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae2130760fa20302ea0813b83337bac94a9828f4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2991764ed8fe07be680b694ef2a88479340839ed</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Interoperability with POX Applications | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interoperability with POX Applications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>"Plain Old XML" (POX) applications communicate by exchanging raw HTTP messages that contain only XML application data that is not enclosed within a SOAP envelope.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> can provide both services and clients that use POX messages.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>On the service, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can be used to implement services that expose endpoints to clients such as Web browsers and scripting languages that send and receive POX messages.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>On the client, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> programming model can be used to implement clients that communicate with POX-based services.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This document was originally written for the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> 3.0.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> 3.5 has built-in support for working with POX applications.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> see <bpt id="p1">[</bpt>WCF Web HTTP Programming Model<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-web-http-programming-model.md)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>POX Programming with WCF</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services that communicate over HTTP using POX messages use a <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>customBinding&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/custombinding.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This custom binding contains two elements:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>httpTransport&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/httptransport.md)</ept> and</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>textMessageEncoding&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/textmessageencoding.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The standard <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Text Message Encoder is specially configured to use the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MessageVersion.None%2A&gt;</ph> value, which allows it to process XML message payloads that do not arrive wrapped in a SOAP envelope.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> clients that communicate over HTTP using POX messages use a similar binding (shown in the following imperative code).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because POX clients must explicitly specify the URIs to which they send messages, they usually must configure the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.HttpTransportBindingElement&gt;</ph> to a manual addressing mode by setting the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing%2A&gt;</ph> property to <ph id="ph3">`true`</ph> on the element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This allows messages to be addressed explicitly by application code and it is not necessary to create a new <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph> every time an application sends a message to a different HTTP URI.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because POX messages do not use SOAP headers to convey important protocol information, POX clients and services often must manipulate pieces of the underlying HTTP request used to send or receive a message.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>HTTP-specific protocol information such as the HTTP headers and status codes are surfaced in the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> programming model through two classes:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty&gt;</ph>, which contains information about the HTTP request, such as the HTTP method and request headers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Channels.HttpResponseMessageProperty&gt;</ph>, which contains information about the HTTP response, such as the HTTP status code and status description, as well as any HTTP response headers.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following code example shows how to create an HTTP GET request message that is addressed to http://localhost:8100/customers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>First, an empty request <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> is created by calling <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.CreateMessage%28System.ServiceModel.Channels.MessageVersion%2CSystem.String%29&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageVersion.None%2A&gt;</ph> parameter is used to indicate that a SOAP envelope is not required and <ph id="ph2">&lt;xref:System.String.Empty&gt;</ph> parameter is passed as the Action.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The request message is then addressed by setting <ph id="ph1">&lt;xref:System.ServiceModel.Channels.MessageHeaders.To%2A&gt;</ph> header to the desired URI.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Next, an <ph id="ph1">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty&gt;</ph> is created and the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty.Method%2A&gt;</ph> is set to the HTTP verb GET method and the <ph id="ph3">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody%2A&gt;</ph> is set to <ph id="ph4">`true`</ph> to indicate that no data should be sent in the body of the outgoing HTTP request message.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Finally, the request property is added to the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.Properties%2A&gt;</ph> collection of the request message so it can influence how the HTTP Transport sends the request.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The message is then ready to be sent over an appropriate instance of the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IRequestChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Similar techniques can be used on the service to extract the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.HttpRequestMessageProperty&gt;</ph> from an incoming message and construct a response.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>