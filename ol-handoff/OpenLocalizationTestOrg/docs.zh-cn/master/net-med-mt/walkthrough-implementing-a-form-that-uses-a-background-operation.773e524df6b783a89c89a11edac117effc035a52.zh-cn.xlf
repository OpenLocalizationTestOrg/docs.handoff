<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d466241c6a6795789430a58d910abe821b1dc871</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\walkthrough-implementing-a-form-that-uses-a-background-operation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f394f45c52eee8b35553974773428fd2ed365c58</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fbe5ff7b392c4f6f0d6b32646e0197d20b2ce4c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing a Form That Uses a Background Operation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing a Form That Uses a Background Operation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you have an operation that will take a long time to complete, and you do not want your user interface (UI) to stop responding or "hang," you can use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class to execute the operation on another thread.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This walkthrough illustrates how to use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class to perform time-consuming computations "in the background," while the user interface remains responsive.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When you are through, you will have an application that computes Fibonacci numbers asynchronously.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Even though computing a large Fibonacci number can take a noticeable amount of time, the main UI thread will not be interrupted by this delay, and the form will be responsive during the calculation.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Tasks illustrated in this walkthrough include:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating a Windows-based Application</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> in Your Form</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Adding Asynchronous Event Handlers</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Adding Progress Reporting and Support for Cancellation</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For a complete listing of the code used in this example, see <bpt id="p1">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-implement-a-form-that-uses-a-background-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To change your settings, choose <bpt id="p1">**</bpt>Import and Export Settings<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Tools<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Customizing Development Settings in Visual Studio<ept id="p1">](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Creating the Project</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The first step is to create the project and to set up the form.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create a form that uses a background operation</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a Windows-based application project called <ph id="ph1">`BackgroundWorkerExample`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>How to: Create a Windows Application Project<ept id="p1">](http://msdn.microsoft.com/en-us/b2f93fed-c635-4705-8d0e-cf079a264efa)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click <bpt id="p2">**</bpt>Form1<ept id="p2">**</ept> and select <bpt id="p3">**</bpt>Rename<ept id="p3">**</ept> from the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Change the file name to <ph id="ph1">`FibonacciCalculator`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept> button when you are asked if you want to rename all references to the code element '<ph id="ph1">`Form1`</ph>'.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Drag a <ph id="ph1">&lt;xref:System.Windows.Forms.NumericUpDown&gt;</ph> control from the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept> onto the form.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Forms.NumericUpDown.Minimum%2A&gt;</ph> property to <ph id="ph2">`1`</ph> and the <ph id="ph3">&lt;xref:System.Windows.Forms.NumericUpDown.Maximum%2A&gt;</ph> property to <ph id="ph4">`91`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add two <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls to the form.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Rename the first <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control <ph id="ph2">`startAsyncButton`</ph> and set the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property to <ph id="ph4">`Start Async`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Rename the second <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> control <ph id="ph2">`cancelAsyncButton`</ph>, and set the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> property to <ph id="ph4">`Cancel Async`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Set its <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Enabled%2A&gt;</ph> property to <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Create an event handler for both of the <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls' <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>How to: Create Event Handlers Using the Designer<ept id="p1">](http://msdn.microsoft.com/en-us/8461e9b8-14e8-406f-936e-3726732b23d2)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Drag a <ph id="ph1">&lt;xref:System.Windows.Forms.Label&gt;</ph> control from the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept> onto the form and rename it <ph id="ph2">`resultLabel`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Drag a <ph id="ph1">&lt;xref:System.Windows.Forms.ProgressBar&gt;</ph> control from the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept> onto the form.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Creating a BackgroundWorker in Your Form</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can create the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> for your asynchronous operation using the <bpt id="p1">**</bpt>Windows<ept id="p1">**</ept> <bpt id="p2">**</bpt>Forms Designer<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To create a BackgroundWorker with the Designer</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Toolbox<ept id="p2">**</ept>, drag a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> onto the form.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Adding Asynchronous Event Handlers</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You are now ready to add event handlers for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component's asynchronous events.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The time-consuming operation that will run in the background, which computes Fibonacci numbers, is called by one of these event handlers.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To implement asynchronous event handlers</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, with the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component still selected, click the <bpt id="p2">**</bpt>Events<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Double-click the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events to create event handlers.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more information about how to use event handlers, see <bpt id="p1">[</bpt>How to: Create Event Handlers Using the Designer<ept id="p1">](http://msdn.microsoft.com/en-us/8461e9b8-14e8-406f-936e-3726732b23d2)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Create a new method, called <ph id="ph1">`ComputeFibonacci`</ph>, in your form.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This method does the actual work, and it will run in the background.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This code demonstrates the recursive implementation of the Fibonacci algorithm, which is notably inefficient, taking exponentially longer time to complete for larger numbers.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It is used here for illustrative purposes, to show an operation that can introduce long delays in your application.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#10<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#10)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#10<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#10)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#10<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#10)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler, add a call to the <ph id="ph2">`ComputeFibonacci`</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Take the first parameter for <ph id="ph1">`ComputeFibonacci`</ph> from the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph> parameters will be used later for progress reporting and cancellation support.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Assign the return value from <ph id="ph1">`ComputeFibonacci`</ph> to the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This result will be available to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler does not reference the <ph id="ph2">`backgroundWorker1`</ph> instance variable directly, as this would couple this event handler to a specific instance of <ph id="ph3">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Instead, a reference to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> that raised this event is recovered from the <ph id="ph2">`sender`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This is important when the form hosts more than one <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It is also important not to manipulate any user-interface objects in your <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Instead, communicate to the user interface through the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#5<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#5<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#5<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`startAsyncButton`</ph> control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler, add the code that starts the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#13<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#13)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#13<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#13)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#13<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#13)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler, assign the result of the calculation to the <ph id="ph2">`resultLabel`</ph> control.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#6<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#6<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#6<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Adding Progress Reporting and Support for Cancellation</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For asynchronous operations that will take a long time, it is often desirable to report progress to the user and to allow the user to cancel the operation.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class provides an event that allows you to post progress as your background operation proceeds.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It also provides a flag that allows your worker code to detect a call to <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> and interrupt itself.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To implement progress reporting</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, window, select <ph id="ph1">`backgroundWorker1`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> properties to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Declare two variables in the <ph id="ph1">`FibonacciCalculator`</ph> form.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>These will be used to track progress.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#14<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#14)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#14<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#14)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#14<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#14)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Add an event handler for the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.ProgressChanged&gt;</ph> event handler, update the <ph id="ph2">&lt;xref:System.Windows.Forms.ProgressBar&gt;</ph> with the <ph id="ph3">&lt;xref:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#7<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#7<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#7<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To implement support for cancellation</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`cancelAsyncButton`</ph> control's <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler, add the code that cancels the asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#4<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#4<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#4<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following code fragments in the <ph id="ph1">`ComputeFibonacci`</ph> method report progress and support cancellation.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#11<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#11)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#11<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#11)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#11<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#11)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker#12<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#12)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker#12<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#12)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.ComponentModel.BackgroundWorker#12<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#12)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Checkpoint</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>At this point, you can compile and run the Fibonacci Calculator application.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To test your project</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Press F5 to compile and run the application.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>While the calculation is running in the background, you will see the <ph id="ph1">&lt;xref:System.Windows.Forms.ProgressBar&gt;</ph> displaying the progress of the calculation toward completion.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can also cancel the pending operation.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For small numbers, the calculation should be very fast, but for larger numbers, you should see a noticeable delay.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If you enter a value of 30 or greater, you should see a delay of several seconds, depending on the speed of your computer.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For values greater than 40, it may take minutes or hours to finish the calculation.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>While the calculator is busy computing a large Fibonacci number, notice that you can freely move the form around, minimize, maximize, and even dismiss it.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>This is because the main UI thread is not waiting for the calculation to finish.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Now that you have implemented a form that uses a <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component to execute a computation in the background, you can explore other possibilities for asynchronous operations:</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Use multiple <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> objects for several simultaneous operations.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To debug your multithreaded application, see <bpt id="p1">[</bpt>How to: Use the Threads Window<ept id="p1">](/visualstudio/debugger/how-to-use-the-threads-window)</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Implement your own component that supports the asynchronous programming model.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When using multithreading of any sort, you potentially expose yourself to very serious and complex bugs.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Consult the <bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](../../../../docs/standard/threading/managed-threading-best-practices.md)</ept> before implementing any solution that uses multithreading.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Managed Threading Best Practices<ept id="p1">](../../../../docs/standard/threading/managed-threading-best-practices.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multithreading in Components<ept id="p1">](http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NOT IN BUILD: Multithreading in Visual Basic<ept id="p1">](http://msdn.microsoft.com/en-us/c731a50c-09c1-4468-9646-54c86b75d269)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-implement-a-form-that-uses-a-background-operation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Running an Operation in the Background<ept id="p1">](../../../../docs/framework/winforms/controls/walkthrough-running-an-operation-in-the-background.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BackgroundWorker Component<ept id="p1">](../../../../docs/framework/winforms/controls/backgroundworker-component.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>