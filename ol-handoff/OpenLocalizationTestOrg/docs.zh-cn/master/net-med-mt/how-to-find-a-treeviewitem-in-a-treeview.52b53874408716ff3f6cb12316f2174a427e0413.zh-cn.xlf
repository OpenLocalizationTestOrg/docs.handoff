<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-find-a-treeviewitem-in-a-treeview.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5d7395750794c5a7613179cebf6cac3647843c24</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\how-to-find-a-treeviewitem-in-a-treeview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5310222bc0e3e72d3a52a6a1124d92bbc2950090</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">106967f6e6d8bcaa2dbc244f346d934a7a5c877a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Find a TreeViewItem in a TreeView | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Find a TreeViewItem in a TreeView</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> control provides a convenient way to display hierarchical data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> is bound to a data source, the <ph id="ph2">&lt;xref:System.Windows.Controls.TreeView.SelectedItem%2A&gt;</ph> property provides a convenient way for you to quickly retrieve the selected data object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It is typically best to work with the underlying data object, but sometimes you may need to programmatically manipulate the data's containing <ph id="ph1">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, you may need to programmatically expand the <ph id="ph1">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph>, or select a different item in the <ph id="ph2">&lt;xref:System.Windows.Controls.TreeView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To find a <ph id="ph1">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph> that contains a specific data object, you must traverse each level of the <ph id="ph2">&lt;xref:System.Windows.Controls.TreeView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The items in a <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> can also be virtualized to improve performance.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the case where items might be virtualized, you also must realize a <ph id="ph1">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph> to check whether it contains the data object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following example searches a <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> for a specific object and returns the object's containing <ph id="ph2">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The example ensures that each <ph id="ph1">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph> is instantiated so that its child items can be searched.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This example also works if the <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> does not use virtualized items.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example works for any <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph>, regardless of the underlying data model, and searches every <ph id="ph2">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph> until the object is found.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Another technique that has better performance is to search the data model for the specified object, keep track of its location within the data hierarchy, and then find the corresponding <ph id="ph1">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph> in the <ph id="ph2">&lt;xref:System.Windows.Controls.TreeView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, the technique that has better performance requires knowledge of the data model and cannot be generalized for any given <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TreeViewFindTVI#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TreeViewFindTVI/CSharp/MainWindow.xaml.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>TreeViewFindTVI#1<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/TreeViewFindTVI/VisualBasic/MainWindow.xaml.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The previous code relies on a custom <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> that exposes a method named <ph id="ph2">`BringIntoView`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code defines the custom <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TreeViewFindTVI#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TreeViewFindTVI/CSharp/MainWindow.xaml.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>TreeViewFindTVI#2<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/TreeViewFindTVI/VisualBasic/MainWindow.xaml.vb#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following XAML shows how to create a <ph id="ph1">&lt;xref:System.Windows.Controls.TreeView&gt;</ph> that uses the custom <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>TreeViewFindTVI#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/TreeViewFindTVI/CSharp/MainWindow.xaml#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Improve the Performance of a TreeView<ept id="p1">](../../../../docs/framework/wpf/controls/how-to-improve-the-performance-of-a-treeview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>