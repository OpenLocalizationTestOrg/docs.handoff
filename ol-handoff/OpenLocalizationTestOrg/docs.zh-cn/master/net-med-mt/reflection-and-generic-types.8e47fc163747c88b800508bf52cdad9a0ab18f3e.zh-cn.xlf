<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02f6c3409533eb1ce7ab316e7c3fc6282a4c466b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\reflection-and-generic-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e989286391eb74b3f50cc19e56d7043f40ef9bc7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6c6320e48d3ed9b691657ddf13c8d1854b4f302</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Reflection and Generic Types | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reflection and Generic Types</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="top"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> From the point of view of reflection, the difference between a generic type and an ordinary type is that a generic type has associated with it a set of type parameters (if it is a generic type definition) or type arguments (if it is a constructed type).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A generic method differs from an ordinary method in the same way.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are two keys to understanding how reflection handles generic types and methods:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type parameters of generic type definitions and generic method definitions are represented by instances of the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Many properties and methods of <ph id="ph1">&lt;xref:System.Type&gt;</ph> have different behavior when a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object represents a generic type parameter.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These differences are documented in the property and method topics.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, see <ph id="ph1">&lt;xref:System.Type.IsAutoClass%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Type.DeclaringType%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition, some members are valid only when a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object represents a generic type parameter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, see <ph id="ph1">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an instance of <ph id="ph1">&lt;xref:System.Type&gt;</ph> represents a generic type, then it includes an array of types that represent the type parameters (for generic type definitions) or the type arguments (for constructed types).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The same is true of an instance of the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class that represents a generic method.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Reflection provides methods of <ph id="ph1">&lt;xref:System.Type&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that allow you to access the array of type parameters, and to determine whether an instance of <ph id="ph3">&lt;xref:System.Type&gt;</ph> represents a type parameter or an actual type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example code demonstrating the methods discussed here, see <bpt id="p1">[</bpt>How to: Examine and Instantiate Generic Types with Reflection<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following discussion assumes familiarity with the terminology of generics, such as the difference between type parameters and arguments and open or closed constructed types.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generics<ept id="p1">](../../../docs/standard/generics/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This overview consists of the following sections:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Is This a Generic Type or Method?<ept id="p1">](#is_this_a_generic_type_or_method)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generating Closed Generic Types<ept id="p1">](#generating_closed_generic_types)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Examining Type Arguments and Type Parameters<ept id="p1">](#examining_type_arguments)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Invariants<ept id="p1">](#invariants)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Related Topics<ept id="p1">](#related_topics)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Is This a Generic Type or Method?</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you use reflection to examine an unknown type, represented by an instance of <ph id="ph1">&lt;xref:System.Type&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Type.IsGenericType%2A&gt;</ph> property to determine whether the unknown type is generic.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`true`</ph> if the type is generic.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Similarly, when you examine an unknown method, represented by an instance of the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo&gt;</ph> class, use the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A&gt;</ph> property to determine whether the method is generic.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Is This a Generic Type or Method Definition?</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph> property to determine whether a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object represents a generic type definition, and use the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo.IsGenericMethodDefinition%2A&gt;</ph> method to determine whether a <ph id="ph4">&lt;xref:System.Reflection.MethodInfo&gt;</ph> represents a generic method definition.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Generic type and method definitions are the templates from which instantiable types are created.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Generic types in the .NET Framework class library, such as <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, are generic type definitions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Is the Type or Method Open or Closed?</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A generic type or method is closed if instantiable types have been substituted for all its type parameters, including all the type parameters of all enclosing types.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can only create an instance of a generic type if it is closed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type.ContainsGenericParameters%2A?displayProperty=fullName&gt;</ph> property returns <ph id="ph2">`true`</ph> if a type is open.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For methods, the <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.ContainsGenericParameters%2A?displayProperty=fullName&gt;</ph> method performs the same function.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Generating Closed Generic Types</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Once you have a generic type or method definition, use the <ph id="ph1">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method to create a closed generic type or the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.MakeGenericMethod%2A&gt;</ph> method to create a <ph id="ph3">&lt;xref:System.Reflection.MethodInfo&gt;</ph> for a closed generic method.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Getting the Generic Type or Method Definition</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If you have an open generic type or method that is not a generic type or method definition, you cannot create instances of it and you cannot supply the type parameters that are missing.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You must have a generic type or method definition.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph> method to obtain the generic type definition or the <ph id="ph2">&lt;xref:System.Reflection.MethodInfo.GetGenericMethodDefinition%2A&gt;</ph> method to obtain the generic method definition.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, if you have a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object representing <ph id="ph2">`Dictionary&lt;int, string&gt;`</ph> (<ph id="ph3">`Dictionary(Of Integer, String)`</ph> in Visual Basic) and you want to create the type <ph id="ph4">`Dictionary&lt;string, MyClass&gt;`</ph>, you can use the <ph id="ph5">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph> method to get a <ph id="ph6">&lt;xref:System.Type&gt;</ph> representing <ph id="ph7">`Dictionary&lt;TKey, TValue&gt;`</ph> and then use the <ph id="ph8">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph> method to produce a <ph id="ph9">&lt;xref:System.Type&gt;</ph> representing <ph id="ph10">`Dictionary&lt;int, MyClass&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For an example of an open generic type that is not a generic type, see "Type Parameter or Type Argument" later in this topic.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Examining Type Arguments and Type Parameters</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method to obtain an array of <ph id="ph2">&lt;xref:System.Type&gt;</ph> objects that represent the type parameters or type arguments of a generic type, and use the <ph id="ph3">&lt;xref:System.Reflection.MethodInfo.GetGenericArguments%2A?displayProperty=fullName&gt;</ph> method to do the same for a generic method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Once you know that a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object represents a type parameter, there are many additional questions reflection can answer.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can determine the type parameter's source, its position, and its constraints.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Type Parameter or Type Argument</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To determine whether a particular element of the array is a type parameter or a type argument, use the <ph id="ph1">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph> property is <ph id="ph2">`true`</ph> if the element is a type parameter.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A generic type can be open without being a generic type definition, in which case it has a mixture of type arguments and type parameters.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, in the following code, class <ph id="ph1">`D`</ph> derives from a type created by substituting the first type parameter of <ph id="ph2">`D`</ph> for the second type parameter of <ph id="ph3">`B`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you obtain a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object representing <ph id="ph2">`D&lt;V, W&gt;`</ph> and use the <ph id="ph3">&lt;xref:System.Type.BaseType%2A&gt;</ph> property to obtain its base type, the resulting <ph id="ph4">`type B&lt;int, V&gt;`</ph> is open, but it is not a generic type definition.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Source of a Generic Parameter</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A generic type parameter might come from the type you are examining, from an enclosing type, or from a generic method.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can determine the source of the generic type parameter as follows:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>First, use the <ph id="ph1">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph> property to determine whether the type parameter comes from a generic method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the property value is not a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic), then the source is a generic method.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the source is not a generic method, use the <ph id="ph1">&lt;xref:System.Type.DeclaringType%2A&gt;</ph> property to determine the generic type the generic type parameter belongs to.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the type parameter belongs to a generic method, the <ph id="ph1">&lt;xref:System.Type.DeclaringType%2A&gt;</ph> property returns the type that declared the generic method, which is irrelevant.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Position of a Generic Parameter</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In rare situations, it is necessary to determine the position of a type parameter in the type parameter list of its declaring class.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, suppose you have a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object representing the <ph id="ph2">`B&lt;int, V&gt;`</ph> type from the preceding example.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph> method gives you a list of type arguments, and when you examine <ph id="ph2">`V`</ph> you can use the <ph id="ph3">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Type.DeclaringType%2A&gt;</ph> properties to discover where it comes from.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph> property to determine its position in the type parameter list where it was defined.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`V`</ph> is at position 0 (zero) in the type parameter list where it was defined.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Base Type and Interface Constraints</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph> method to obtain the base type constraint and interface constraints of a type parameter.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The order of the elements of the array is not significant.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An element represents an interface constraint if it is an interface type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Generic Parameter Attributes</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph> property gets a <ph id="ph2">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> value that indicates the variance (covariance or contravariance) and the special constraints of a type parameter.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Covariance and Contravariance</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To determine whether a type parameter is covariant or contravariant, apply the <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph> mask to the <ph id="ph2">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> value that is returned by the <ph id="ph3">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the result is <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph>, the type parameter is invariant.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Covariance and Contravariance<ept id="p1">](../../../docs/standard/generics/covariance-and-contravariance.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Special Constraints</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To determine the special constraints of a type parameter, apply the <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph> mask to the <ph id="ph2">&lt;xref:System.Reflection.GenericParameterAttributes&gt;</ph> value that is returned by the <ph id="ph3">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the result is <ph id="ph1">&lt;xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName&gt;</ph>, there are no special constraints.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A type parameter can be constrained to be a reference type, to be a non-nullable value type, and to have a default constructor.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Invariants</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For a table of the invariant conditions for common terms in reflection for generic types, see <ph id="ph1">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For additional terms relating to generic methods, see <ph id="ph1">&lt;xref:System.Reflection.MethodInfo.IsGenericMethod%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Back to top<ept id="p1">](#top)</ept></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Examine and Instantiate Generic Types with Reflection<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md)</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Shows how to use the properties and methods of <ph id="ph1">&lt;xref:System.Type&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodInfo&gt;</ph> to examine generic types.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics<ept id="p1">](../../../docs/standard/generics/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Describes the generics feature and how it is supported in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define a Generic Type with Reflection Emit<ept id="p1">](../../../docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md)</ept></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Shows how to use reflection emit to generate generic types in dynamic assemblies.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Viewing Type Information<ept id="p1">](../../../docs/framework/reflection-and-codedom/viewing-type-information.md)</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Describes the <ph id="ph1">&lt;xref:System.Type&gt;</ph> class and provides code examples that illustrate how to use <ph id="ph2">&lt;xref:System.Type&gt;</ph> with various reflection classes to obtain information about constructors, methods, fields, properties, and events.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>