<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="client-architecture.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1212c5e23048172dc08048b6b2e458553452be1e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\client-architecture.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d75aeb6ad180de79baa451933c72a7132ec9c3f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5a684302cb375b553e842480d44b130ad99ccfb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Client Architecture | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Client Architecture</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applications use <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> client objects to invoke service operations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic discusses <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client objects, <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client channels, and their relationships to the underlying channel architecture.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For a basic overview of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client objects, see <bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> the channel layer, see <bpt id="p1">[</bpt>Extending the Channel Layer<ept id="p1">](../../../../docs/framework/wcf/extending/extending-the-channel-layer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The service model run time creates <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> clients, which are composed of the following:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An automatically generated client implementation of a service contract, which turns calls from your application code into outgoing messages, and turns response messages into output parameters and return values that your application can retrieve.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An implementation of a control interface (<ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel?displayProperty=fullName&gt;</ph>) that groups together various interfaces and provides access to control functionality, most notably the ability to close the client session and dispose the channel.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A client channel that is built based on the configuration settings specified by the used binding.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Applications can create such clients on demand, either through a <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory?displayProperty=fullName&gt;</ph> or by creating an instance of a <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> derived class as it is generated by the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These ready-built client classes encapsulate and delegate to a client channel implementation that is dynamically constructed by a <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Therefore, the client channel and the channel factory that produces them are the focal point of interest for this discussion.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Client Objects and Client Channels</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The base interface of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> clients is the <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel?displayProperty=fullName&gt;</ph> interface, which exposes core client functionality as well as the basic communication object functionality of <ph id="ph3">&lt;xref:System.ServiceModel.ICommunicationObject?displayProperty=fullName&gt;</ph>, the context functionality of <ph id="ph4">&lt;xref:System.ServiceModel.IContextChannel?displayProperty=fullName&gt;</ph>, and the extensible behavior of <ph id="ph5">&lt;xref:System.ServiceModel.IExtensibleObject%601?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> interface, however, does not define a service contract itself.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Those are declared by the service contract interface (typically generated from service metadata using a tool like the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client types extend both <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> and the target service contract interface to enable applications to call operations directly and also have access to client-side run-time functionality.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Creating an <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client provides <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph><ph id="ph3">&lt;xref:System.ServiceModel.ChannelFactory?displayProperty=fullName&gt;</ph> objects with the information necessary to create a run time that can connect and interact with the configured service endpoint.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, the two <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client types must be configured before you can use them.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The simplest <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client types are objects that derive from <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> (or <ph id="ph3">&lt;xref:System.ServiceModel.DuplexClientBase%601&gt;</ph> if the service contract is a duplex contract).</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can create these types by using a constructor, configured programmatically, or by using a configuration file, and then called directly to invoke service operations.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For a basic overview of <ph id="ph1">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> objects, see <bpt id="p1">[</bpt>WCF Client Overview<ept id="p1">](../../../../docs/framework/wcf/wcf-client-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second type is generated at run time from a call to the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Applications concerned with tight control of the communication specifics typically use this client type, called a <bpt id="p1">*</bpt>client channel object<ept id="p1">*</ept>, because it enables more direct interaction than the underlying client run-time and channel system.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Channel Factories</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The class that is responsible for creating the underlying run time that supports client invocations is the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client objects and <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client channel objects use a <ph id="ph3">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> object to create instances; the <ph id="ph4">&lt;xref:System.ServiceModel.ClientBase%601&gt;</ph> derived client object encapsulates the handling of the channel factory, but for a number of scenarios it is perfectly reasonable to use the channel factory directly.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The common scenario for this is if you want to repeatedly create new client channels from an existing factory.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you are using a client object, you can obtain the underlying channel factory from a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client object by calling the <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601.ChannelFactory%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The important thing to remember about channel factories is that they create new instances of client channels for the configuration provided to them prior to calling <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Once you call <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A&gt;</ph> (or <ph id="ph2">&lt;xref:System.ServiceModel.ClientBase%601.Open%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.ClientBase%601.CreateChannel%2A?displayProperty=fullName&gt;</ph>, or any operation on a <ph id="ph4">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client object), you cannot modify the channel factory and expect to get channels to different service instances, even if you are merely changing the target endpoint address.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you want to create a client object or client channel with a different configuration, you must create a new channel factory first.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> various issues using <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client objects and <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client channels, see <bpt id="p1">[</bpt>Accessing Services Using a WCF Client<ept id="p1">](../../../../docs/framework/wcf/feature-details/accessing-services-using-a-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following two sections describe the creation and use of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client channel objects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Creating a New WCF Client Channel Object</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To illustrate the use of a client channel, assume the following service contract has been generated.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To connect to an <ph id="ph1">`ISampleService`</ph> service, use the generated contract interface directly with a channel factory (<ph id="ph2">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Once you create and configure a channel factory for a particular contract, you can call the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A&gt;</ph> method to return client channel objects that you can use to communicate with an <ph id="ph2">`ISampleService`</ph> service.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601&gt;</ph> class with a service contract interface, you must cast to the <ph id="ph2">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> interface to explicitly open, close, or abort the channel.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To make it easier to work with, the Svcutil.exe tool also generates a helper interface that implements both the service contract interface and <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> to enable you to interact with the client channel infrastructure without having to cast.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following code shows the definition of a helper client channel that implements the preceding service contract.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Creating a New WCF Client Channel Object</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To use a client channel to connect to an <ph id="ph1">`ISampleService`</ph> service, use the generated contract interface (or the helper version) directly with a channel factory, passing the type of the contract interface as the type parameter.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Once a channel factory for a particular contract has been created and configured, you can call the <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=fullName&gt;</ph> method to return client channel objects that you can use to communicate with an <ph id="ph2">`ISampleService`</ph> service.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When created, the client channel objects implement <ph id="ph1">&lt;xref:System.ServiceModel.IClientChannel&gt;</ph> and the contract interface.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, you can use them directly to call operations that interact with a service that supports that contract.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The difference between using client objects and client channel objects is merely one of control and ease of use for developers.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Many developers who are comfortable working with classes and objects will prefer to use the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client object instead of the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client channel.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Use the ChannelFactory<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-use-the-channelfactory.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>