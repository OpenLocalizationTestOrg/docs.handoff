<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7689fa06ab5f356864f5e6e60417173157c52b7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\shapes-and-basic-drawing-in-wpf-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c6e315f24b2f86434df3cb9f31deb545f44e32a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">efa68c2ef1188c96332c97f93f8d065835c47e1a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Shapes and Basic Drawing in WPF Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Shapes and Basic Drawing in WPF Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic gives an overview of how to draw with              <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A              <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> is a type of              <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> that enables you to draw a shape to the screen.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Because they are UI elements,              <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects can be used inside              <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements and most controls.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> offers several layers of access to graphics and rendering services.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>At the top layer,              <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects are easy to use and provide many useful features, such as layout and participation in the              <ph id="ph2">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> event system.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Shape Objects</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a number of ready-to-use                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All shape objects inherit from the                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Available shape objects include                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Line&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Shapes.Path&gt;</ph>,                  <ph id="ph4">&lt;xref:System.Windows.Shapes.Polygon&gt;</ph>,                  <ph id="ph5">&lt;xref:System.Windows.Shapes.Polyline&gt;</ph>, and                  <ph id="ph6">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> objects share the following common properties.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph>: Describes how the shape's outline is painted.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.StrokeThickness%2A&gt;</ph>: Describes the thickness of the shape's outline.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph>: Describes how the interior of the shape is painted.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Data properties to specify coordinates and vertices, measured in device-independent pixels.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because they derive from                  <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, shape objects can be used inside panels and most controls                 .</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> panel is a particularly good choice for creating complex drawings because it supports absolute positioning of its child objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Line&gt;</ph> class enables you to draw a line between two points.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows several ways to specify line coordinates and stroke properties.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>drawingwithshapeelements#LineExample1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DrawingWithShapeElements/CS/lineexample.xaml#lineexample1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>shapesprocedural#ShapesProceduralLine<ept id="p2">](../../../../samples/snippets/cpp/VS_Snippets_Wpf/ShapesProcedural/CPP/ShapesProcedural.cpp#shapesproceduralline)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>shapesprocedural#ShapesProceduralLine<ept id="p4">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ShapesProcedural/Csharp/ShapesProcedural.cs#shapesproceduralline)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>shapesprocedural#ShapesProceduralLine<ept id="p6">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/ShapesProcedural/VisualBasic/ShapesProceduralVB.vb#shapesproceduralline)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following image shows the rendered                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Line&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Line illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/shape-ovw-line2.gif "</bpt>shape_ovw_line2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Although the                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Line&gt;</ph> class does provide a                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph> property, setting it has no effect because a                  <ph id="ph3">&lt;xref:System.Windows.Shapes.Line&gt;</ph> has no area.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Another common shape is the                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Create an                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> by defining the shape's                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To draw a circle, specify an                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> whose                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> values are equal.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>ShapeOverviews#ShapesOVW1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/ShapeOverviews/CS/Window1.xaml#shapesovw1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>brushesmiscsnippets_procedural_snip#SetBackgroundColorOfShapeCodeExampleWholePage<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/BrushesMiscSnippets_procedural_snip/CSharp/SetBackgroundColorOfShapeExample.cs#setbackgroundcolorofshapecodeexamplewholepage)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>brushesmiscsnippets_procedural_snip#SetBackgroundColorOfShapeCodeExampleWholePage<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesMiscSnippets_procedural_snip/visualbasic/setbackgroundcolorofshapeexample.vb#setbackgroundcolorofshapecodeexamplewholepage)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following image shows an example of a rendered                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Ellipse illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/shape-ovw-ellipse2.png "</bpt>shape_ovw_ellipse2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using Paths and Geometries</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Path&gt;</ph> class enables you to draw curves and complex shapes.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These curves and shapes are described using                  <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To use a                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Path&gt;</ph>, you create a                  <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> and use it to set the                  <ph id="ph3">&lt;xref:System.Windows.Shapes.Path&gt;</ph> object's                  <ph id="ph4">&lt;xref:System.Windows.Shapes.Path.Data%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>There are a variety of                  <ph id="ph1">&lt;xref:System.Windows.Media.Geometry&gt;</ph> objects to choose from.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.LineGeometry&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.Media.RectangleGeometry&gt;</ph>, and                  <ph id="ph3">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph> classes describe relatively simple shapes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To create more complex shapes or create curves, use a                  <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>PathGeometry and PathSegments</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> objects are comprised of one or more                          <ph id="ph2">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> objects; each                          <ph id="ph3">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> represents a different "figure" or shape.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Each                          <ph id="ph1">&lt;xref:System.Windows.Media.PathFigure&gt;</ph> is itself comprised of one or more                          <ph id="ph2">&lt;xref:System.Windows.Media.PathSegment&gt;</ph> objects, each representing a connected portion of the figure or shape.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Segment types include the following:                          <ph id="ph1">&lt;xref:System.Windows.Media.LineSegment&gt;</ph>,                          <ph id="ph2">&lt;xref:System.Windows.Media.BezierSegment&gt;</ph>, and                          <ph id="ph3">&lt;xref:System.Windows.Media.ArcSegment&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the following example, a                          <ph id="ph1">&lt;xref:System.Windows.Shapes.Path&gt;</ph> is used to draw a quadratic Bezier curve.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>geometrysample#34<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/GeometrySample/CS/pathgeometryexample.xaml#34)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following image shows the rendered shape.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Path illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/shape-ovw-path2.gif "</bpt>shape_ovw_path2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about                          <ph id="ph1">&lt;xref:System.Windows.Media.PathGeometry&gt;</ph> and the other                          <ph id="ph2">&lt;xref:System.Windows.Media.Geometry&gt;</ph> classes, see the                          <bpt id="p1">[</bpt>Geometry Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>XAML Abbreviated Syntax</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In                          <ph id="ph1">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph>, you may also use a special abbreviated syntax to describe a                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the following example, abbreviated syntax is used to draw a complex shape.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following image shows a rendered                          <ph id="ph1">&lt;xref:System.Windows.Shapes.Path&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Path illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/shape-ovw-path.PNG "</bpt>shape_ovw_path<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Shapes.Path.Data%2A&gt;</ph> attribute string begins with the "moveto" command, indicated by M, which establishes a start point for the path in the coordinate system of the                          <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Shapes.Path&gt;</ph> data parameters are case-sensitive.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The capital                          M                          indicates an absolute location for the new current point.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A lowercase m would indicate relative coordinates.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The first segment is a cubic Bezier curve beginning at (100,200) and ending at (400,175), drawn using the two control points (100,25) and (400,350).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This segment is indicated by the C command in the                          <ph id="ph1">&lt;xref:System.Windows.Shapes.Path.Data%2A&gt;</ph> attribute string.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Again, the capital C indicates an absolute path; the lowercase c would indicate a relative path.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second segment begins with an absolute horizontal "lineto" command H, which specifies a line drawn from the preceding subpath's endpoint (400,175) to a new endpoint (280,175).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because it is a horizontal "lineto" command, the value specified is an                          <bpt id="p1">*</bpt>x<ept id="p1">*</ept>-coordinate.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For the complete path syntax, see the                          <ph id="ph1">&lt;xref:System.Windows.Shapes.Path.Data%2A&gt;</ph> reference and                          <bpt id="p1">[</bpt>Create a Shape by Using a PathGeometry<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/how-to-create-a-shape-by-using-a-pathgeometry.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Painting Shapes</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> objects are used to paint a shape's                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape.Stroke%2A&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.Shapes.Shape.Fill%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the following example, the stroke and fill of an                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph> are specified.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Note that valid input for brush properties can be either a keyword or hexadecimal color value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For more information about available color                  keywords                 , see properties of the                  <ph id="ph1">&lt;xref:System.Windows.Media.Colors&gt;</ph> class in the                  <ph id="ph2">&lt;xref:System.Windows.Media&gt;</ph> namespace                 .</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The following image shows the rendered                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Ellipse&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>An ellipse<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/shape-ovw-ellipsefill.PNG "</bpt>shape_ovw_ellipsefill<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use                  property element syntax                  to explicitly create a                  <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> object to paint the shape with a solid color.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following illustration shows the rendered shape.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>SolidColorBrush illustration<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/shape-ovw-solidcolorbrush.PNG "</bpt>shape_ovw_solidcolorbrush<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also paint a shape's stroke or fill with gradients, images, patterns, and more.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see the                  <bpt id="p1">[</bpt>Painting with Solid Colors and Gradients Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Stretchable Shapes</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Line&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Shapes.Polygon&gt;</ph>,                  <ph id="ph4">&lt;xref:System.Windows.Shapes.Polyline&gt;</ph>, and                  <ph id="ph5">&lt;xref:System.Windows.Shapes.Rectangle&gt;</ph> classes all have a                  <ph id="ph6">&lt;xref:System.Windows.Shapes.Shape.Stretch%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This property determines how a                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's contents (the shape to be drawn) is stretched to fill the                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's layout space.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's layout space is the amount of space the                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> is allocated by the layout system, because of either an explicit                  <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and                  <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> setting or because of its                  <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> and                  <ph id="ph6">&lt;xref:System.Windows.FrameworkElement.VerticalAlignment%2A&gt;</ph>settings                 .</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For additional information on layout in Windows Presentation Foundation, see                  <bpt id="p1">[</bpt>Layout<ept id="p1">](../../../../docs/framework/wpf/advanced/layout.md)</ept> overview.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The Stretch property takes one of the following values:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's contents are not stretched.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's contents are stretched to fill its layout space.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Aspect ratio is not preserved.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's contents are stretched as much as possible to fill its layout space while preserving its original aspect ratio.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The                          <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's contents are stretched to completely fill its layout space while preserving its original aspect ratio.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Note that, when a                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's contents are stretched, the                  <ph id="ph2">&lt;xref:System.Windows.Shapes.Shape&gt;</ph> object's outline is painted after the stretching.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the following example, a                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Polygon&gt;</ph> is used to draw a very small triangle from (0,0) to (0,1) to (1,1).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Polygon&gt;</ph> object's                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> are set to 100, and its stretch property is set to Fill.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>As a result, the                  <ph id="ph1">&lt;xref:System.Windows.Shapes.Polygon&gt;</ph> object's contents (the triangle) are stretched to fill the larger space.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Transforming Shapes</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Media.Transform&gt;</ph> class provides the means to transform shapes in a two-dimensional plane.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The different types of transformation include rotation (                 <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>), scale (                 <ph id="ph2">&lt;xref:System.Windows.Media.ScaleTransform&gt;</ph>), skew (                 <ph id="ph3">&lt;xref:System.Windows.Media.SkewTransform&gt;</ph>), and translation (                 <ph id="ph4">&lt;xref:System.Windows.Media.TranslateTransform&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A common transform to apply to a shape is a rotation.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To rotate a shape, create a                  <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> and specify its                  <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform.Angle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An                  <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform.Angle%2A&gt;</ph> of 45 rotates the element 45 degrees clockwise; an angle of 90 rotates the element 90 degrees clockwise; and so on.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Set the                  <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform.CenterX%2A&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform.CenterY%2A&gt;</ph> properties if you want to control the point about which the element is rotated.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>These property values are expressed in the coordinate space of the element being transformed.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform.CenterX%2A&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Media.RotateTransform.CenterY%2A&gt;</ph> have default values of zero.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Finally, apply the                  <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> to the element.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you don't want the transform to affect layout, set the shape's                  <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph>property                 .</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In the following example, a                  <ph id="ph1">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph> is used to rotate a shape 45 degrees about the shape's top left corner (0,0).</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>transformssample#14<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/transformsSample/CS/RotateTransformExample.xaml#14)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the next example, another shape is rotated 45 degrees, but this time it's rotated about the point (25,50).</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>transformssample#15<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/transformsSample/CS/RotateTransformExample.xaml#15)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The following illustration shows the results of applying the two transforms.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>45 degree rotations with different center points<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-graphicsmm-rotatetransform45degrees.gif "</bpt>wcpsdk_graphicsmm_rotatetransform45degrees<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In the previous examples, a single transform was applied to each shape object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>To apply multiple transforms to a shape (or any other UI element), use a                  <ph id="ph1">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>2D Graphics and Imaging<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-2d-graphics-and-imaging.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Painting with Solid Colors and Gradients Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Geometry Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/geometry-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: My First WPF Desktop Application<ept id="p1">](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Animation Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>