<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="application-management-overview.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36e1dad529e5c6e23505079fbfd79a0bd9eb032e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\application-management-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b1261484322497b53c53afd8b9423cdb2915800</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">43182ff0ac48cd839ca08a841c0ead5b1f0c2d6f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Application Management Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Application Management Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>All applications tend to share a common set of functionality that applies to application implementation and management.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic provides an overview of the functionality in the              <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class for creating and managing applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Application Class</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, common application-scoped functionality is encapsulated in the                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class includes the following functionality:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Tracking and interacting with application lifetime.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Retrieving and processing command-line parameters.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Detecting and responding to unhandled exceptions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Sharing application-scope properties and resources.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Managing windows in standalone applications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Tracking and managing navigation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to Perform Common Tasks Using the Application Class</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you are not interested in all of the details of the                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class, t                 he following table                  lists some of the common tasks for                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> and how to accomplish them.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By viewing the related API and topics, you can find more information and sample code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Task</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Approach</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Get an object that represents the current application</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Current%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Add a startup screen to an application</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See                                  <bpt id="p1">[</bpt>Add a Splash Screen to a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/how-to-add-a-splash-screen-to-a-wpf-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Start an application</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Stop an application</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method of the                                  <ph id="ph2">&lt;xref:System.Windows.Application.Current%2A?displayProperty=fullName&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Get arguments from the command line</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Handle the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Startup?displayProperty=fullName&gt;</ph> event and use the                                  <ph id="ph2">&lt;xref:System.Windows.StartupEventArgs.Args%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For an example, see the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Startup?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Get and set the application exit code</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Set the                                  <ph id="ph1">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A?displayProperty=fullName&gt;</ph> property in the                                  <ph id="ph2">&lt;xref:System.Windows.Application.Exit?displayProperty=fullName&gt;</ph> event handler or call the                                  <ph id="ph3">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method and pass in an integer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Detect and respond to unhandled exceptions</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Handle the                                  <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Get and set application-scoped resources</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Use the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Resources%2A?displayProperty=fullName&gt;</ph> property                                 .</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use an application-scope resource dictionary</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See                                  <bpt id="p1">[</bpt>Use an Application-Scope Resource Dictionary<ept id="p1">](../../../../docs/framework/wpf/app-development/how-to-use-an-application-scope-resource-dictionary.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Get and set application-scoped properties</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Use the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Properties%2A?displayProperty=fullName&gt;</ph> property                                 .</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Get and save an application's state</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See                                  <bpt id="p1">[</bpt>Persist and Restore Application-Scope Properties Across Application Sessions<ept id="p1">](../../../../docs/framework/wpf/app-development/persist-and-restore-application-scope-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Manage non-code data files, including resource files, content files, and site-of-origin files.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See                                  <bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Manage windows in standalone applications</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See                                  <bpt id="p1">[</bpt>WPF Windows Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-windows-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Track and manage navigation</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See                                  <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The Application Definition</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To utilize the functionality of the                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class, you must implement an application definition.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application definition is a class that derives from                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> and is configured with a special                  <ph id="ph3">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> setting.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Implementing an Application Definition</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A typical                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application definition is implemented using both markup and code-behind.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This allows you to use markup to declaratively set application properties, resources, and register events, while handling events and implementing application-specific behavior in code-behind.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following example shows how to implement an application definition using both markup and code-behind:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To allow a markup file and code-behind file to work together, the following needs to happen:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In markup, the                                  <ph id="ph1">`Application`</ph> element must include the                                  <ph id="ph2">`x:Class`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When the application is built, the existence of                                  <ph id="ph1">`x:Class`</ph> in the markup file causes                                  <ph id="ph2">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> to create a                                  <ph id="ph3">`partial`</ph> class that derives from                                  <ph id="ph4">&lt;xref:System.Windows.Application&gt;</ph> and has the name that is specified by the                                  <ph id="ph5">`x:Class`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This requires the addition of an                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> namespace declaration for the                                  <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> schema (                                  <ph id="ph3">`xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"`</ph> ).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In code-behind, the class must be a                                  <ph id="ph1">`partial`</ph> class with the same name that is specified by the                                  <ph id="ph2">`x:Class`</ph> attribute in markup and must derive from                                  <ph id="ph3">&lt;xref:System.Windows.Application&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This allows the code-behind file to be associated with the                                  <ph id="ph1">`partial`</ph> class that is generated for the markup file when the application is built (see                                  <bpt id="p1">[</bpt>Building a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/building-a-wpf-application-wpf.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When you create a new WPF Application project or WPF Browser Application project using                              <ph id="ph1">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>, an application definition is included by default and is defined using both markup and code-behind.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This code is the minimum that is required to implement an application definition.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>However, an additional                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> configuration needs to be made to the application definition before building and running the application.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Configuring the Application Definition for MSBuild</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Standalone applications and                          <ph id="ph1">[!INCLUDE[TLA#tla_xbap#plural](../../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph> require the implementation of a certain level of infrastructure before they can run.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The most important part of this infrastructure is the entry point.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>When an application is launched by a user, the operating system calls the entry point, which is a well-known function for starting applications.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Traditionally, developers have needed to write some or all of this code for themselves, depending on the technology.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>However,                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> generates this code for you when the markup file of your application definition is configured as an                          <ph id="ph2">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph3">`ApplicationDefinition`</ph> item, as shown in the following                          <ph id="ph4">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> project file:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Because the code-behind file contains code, it is marked as an                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph2">`Compile`</ph> item, as is normal.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The application of these                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> configurations to the markup and code-behind files of an application definition causes                          <ph id="ph2">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> to generate code like the following:</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The resulting code augments your application definition with additional infrastructure code, which includes the entry-point method                          <ph id="ph1">`Main`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.STAThreadAttribute&gt;</ph> attribute is applied to the                          <ph id="ph2">`Main`</ph> method to indicate that the main                          <ph id="ph3">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> thread for the                          <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application is an STA thread, which is required for                          <ph id="ph5">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When called,                          <ph id="ph1">`Main`</ph> creates a new instance of                          <ph id="ph2">`App`</ph> before calling the                          <ph id="ph3">`InitializeComponent`</ph> method to register the events and set the properties that are implemented in markup.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Because                          <ph id="ph1">`InitializeComponent`</ph> is generated for you, you don't need to explicitly call                          <ph id="ph2">`InitializeComponent`</ph> from an application definition like you do for                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph> and                          <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Finally, the                          <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> method is called to start the application.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Getting the Current Application</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Because the functionality of the                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class are shared across an application, there can be only one instance of the                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class per                  <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To enforce this, the                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class is implemented as a singleton class (see                  <bpt id="p1">[</bpt>Implementing Singleton in C#<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=100567)</ept>), which creates a single instance of itself and provides shared access to it with the                  <ph id="ph2">`static`</ph><ph id="ph3">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following code shows how to acquire a reference to the                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object for the current                  <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> returns a reference to an instance of the                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you want a reference to your                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> derived class you must cast the value of the                  <ph id="ph2">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> property, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can inspect the value of                  <ph id="ph1">&lt;xref:System.Windows.Application.Current%2A&gt;</ph> at any point in the lifetime of an                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>However, you should be careful.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>After the                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> class is instantiated, there is a period during which the state of the                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> object is inconsistent.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>During this period,                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> is performing the various initialization tasks that are required by your code to run, including establishing application infrastructure, setting properties, and registering events.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you try to use the                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object during this period, your code may have unexpected results, particularly if it depends on the various                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> properties being set.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>When                  <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> completes its initialization work, its lifetime truly begins.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Application Lifetime</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The lifetime of a                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> application is marked by several events that are raised by                  <ph id="ph2">&lt;xref:System.Windows.Application&gt;</ph> to let you know when your application has started, has been activated and deactivated, and has been shut down.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Splash Screen</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Starting in                          the                         <ph id="ph1">[!INCLUDE[net_v35SP1_short](../../../../includes/net-v35sp1-short-md.md)]</ph>, you can specify an image to be used in a startup window, or                          <bpt id="p1">*</bpt>splash screen<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.SplashScreen&gt;</ph> class makes it easy to display a startup window while your application is loading.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.SplashScreen&gt;</ph> window is created and shown before                          <ph id="ph2">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information, see                          <bpt id="p1">[</bpt>Application Startup Time<ept id="p1">](../../../../docs/framework/wpf/advanced/application-startup-time.md)</ept> and                          <bpt id="p2">[</bpt>Add a Splash Screen to a WPF Application<ept id="p2">](../../../../docs/framework/wpf/app-development/how-to-add-a-splash-screen-to-a-wpf-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Starting an Application</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>After                          <ph id="ph1">&lt;xref:System.Windows.Application.Run%2A&gt;</ph> is called and the application is initialized, the application is ready to run.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This moment is signified when the                          <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event is raised:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>At this point in an application's lifetime, the most common thing to do is to show a                          <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Showing a User Interface</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Most standalone                          <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> applications open a                          <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> when they begin running.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler is one location from which you can do this, as demonstrated by the following code.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The first                              <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> to be instantiated in a standalone application becomes the main application window by default.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This                              <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> object is referenced by the                              <ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The value of the                              <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> property can be changed programmatically if a different window than the first instantiated                              <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> should be the main window.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> first starts, it will most likely navigate to a                          <ph id="ph2">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This is shown in the following code.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If you handle                          <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> to only open a                          <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> or navigate to a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph>, you can set the                          <ph id="ph4">`StartupUri`</ph> attribute in markup instead.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the                          <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> from a standalone application to open a                          <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following example shows how to use                          <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> from an                          <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> to navigate to a                          <ph id="ph3">&lt;xref:System.Windows.Controls.Page&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This markup has the same effect as the previous code for opening a window.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For more information on navigation, see                              <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You need to handle the                          <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> event to open a                          <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> if you need to instantiate it using a non-default constructor, or you need to set its properties or subscribe to its events before showing it, or you need to process any command-line arguments that were supplied when the application was launched.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Processing Command-Line Arguments</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In                          <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph>, standalone applications can be launched from either a command prompt or the desktop.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In both cases, command-line arguments can be passed to the application.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example shows an application that is launched with a single command-line argument, "/StartMinimized":</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>During application initialization,                          <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> retrieves the command-line arguments from the operating system and passes them to the                          <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event handler via the                          <ph id="ph3">&lt;xref:System.Windows.StartupEventArgs.Args%2A&gt;</ph> property of the                          <ph id="ph4">&lt;xref:System.Windows.StartupEventArgs&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You can retrieve and store the command-line arguments using code like the following.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The code handles                          <ph id="ph1">&lt;xref:System.Windows.Application.Startup&gt;</ph> to check whether the                          <bpt id="p1">**</bpt>/StartMinimized<ept id="p1">**</ept> command-line argument was provided; if so, it opens the main window with a                          <ph id="ph2">&lt;xref:System.Windows.WindowState&gt;</ph> of                          <ph id="ph3">&lt;xref:System.Windows.WindowState&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Note that because the                          <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property must be set programmatically, the main                          <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> must be opened explicitly in code.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> cannot retrieve and process command-line arguments because they are launched using                          <ph id="ph2">[!INCLUDE[TLA#tla_clickonce](../../../../includes/tlasharptla-clickonce-md.md)]</ph> deployment (see                          <bpt id="p1">[</bpt>Deploying a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/deploying-a-wpf-application-wpf.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>However, they can retrieve and process query string parameters from the URLs that are used to launch them.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Application Activation and Deactivation</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> allows users to switch between applications.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The most common way is to use the ALT+TAB key combination.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An application can only be switched to if it has a visible                          <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> that a user can select.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The currently selected                          <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> is the                          <bpt id="p1">*</bpt>active window<ept id="p1">*</ept> (also known as the                          <bpt id="p2">*</bpt>foreground window<ept id="p2">*</ept>) and is the                          <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> that receives user input.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The application with the active window is the                          <bpt id="p1">*</bpt>active application<ept id="p1">*</ept> (or                          <bpt id="p2">*</bpt>foreground application<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>An application becomes the active application in the following circumstances:</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>It is launched and shows a                                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A user switches from another application by selecting a                                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> in the application.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can detect when an application becomes active by handling the                          <ph id="ph1">&lt;xref:System.Windows.Application.Activated?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Likewise, an application can become inactive in the following circumstances:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>A user switches to another application from the current one.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>When the application shuts down.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can detect when an application becomes inactive by handling the                          <ph id="ph1">&lt;xref:System.Windows.Application.Deactivated?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The following code shows how to handle the                          <ph id="ph1">&lt;xref:System.Windows.Application.Activated&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated&gt;</ph> events to determine whether an application is active.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A                          <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> can also be activated and deactivated.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>See                          <ph id="ph1">&lt;xref:System.Windows.Window.Activated?displayProperty=fullName&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated?displayProperty=fullName&gt;</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Neither                              <ph id="ph1">&lt;xref:System.Windows.Application.Activated?displayProperty=fullName&gt;</ph> nor                              <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated?displayProperty=fullName&gt;</ph> is raised for                              <ph id="ph3">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Application Shutdown</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The life of an application ends when it is shut down, which can occur for the following reasons:</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>A user closes every                                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A user closes the main                                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A user ends the                                  <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> session by logging off or shutting down.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An application-specific condition has been met.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>To help you manage application shutdown,                          <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> provides the                          <ph id="ph2">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method, the                          <ph id="ph3">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property, and the                          <ph id="ph4">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> and                          <ph id="ph5">&lt;xref:System.Windows.Application.Exit&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> can only be called from applications that have                              <ph id="ph2">&lt;xref:System.Security.Permissions.UIPermission&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Standalone                              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications always have this permission.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>However,                              <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> running in the Internet zone partial-trust security sandbox do not.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Shutdown Mode</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Most applications shut down either when all the windows are closed or when the main window is closed.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Sometimes, however, other application-specific conditions may determine when an application shuts down.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You can specify the conditions under which your application will shut down by setting                                  <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> with one of the following                                  <ph id="ph2">&lt;xref:System.Windows.ShutdownMode&gt;</ph> enumeration values:</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The default value of                                  <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is                                  <ph id="ph2">&lt;xref:System.Windows.ShutdownMode&gt;</ph>, which means that an application automatically shuts down when the last window in the application is closed by the user.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>However, if your application should be shut down when the main window is closed,                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> automatically does that if you set                                  <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> to                                  <ph id="ph3">&lt;xref:System.Windows.ShutdownMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>When you have application-specific shutdown conditions, you set                                  <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> to                                  <ph id="ph2">&lt;xref:System.Windows.ShutdownMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>In this case, it is your responsibility to shut an application down by explicitly calling the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> method; otherwise, your application will continue running even if all the windows are closed.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Note that                                  <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called implicitly when the                                  <ph id="ph2">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is either                                  <ph id="ph3">&lt;xref:System.Windows.ShutdownMode&gt;</ph> or                                  <ph id="ph4">&lt;xref:System.Windows.ShutdownMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> can be set from an                                      <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>, but it is ignored; an                                      <ph id="ph3">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> is always shut down when it is navigated away from in a browser or when the browser that hosts the                                      <ph id="ph4">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>For more information, see                                      <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Session Ending</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The shutdown conditions that are described by the                                  <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> property are specific to an application.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In some cases, though, an application may shut down as a result of an external condition.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The most common external condition occurs when a user ends the                                  <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> session by the following actions:</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Logging off</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Shutting down</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Restarting</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Hibernating</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>To detect when a                                  <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> session ends, you can handle the                                  <ph id="ph2">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> event, as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>In this example, the code inspects the                                  <ph id="ph1">&lt;xref:System.Windows.SessionEndingCancelEventArgs.ReasonSessionEnding%2A&gt;</ph> property to determine how the                                  <ph id="ph2">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> session is ending.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>It uses this value to display a confirmation message to the user.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>If the user does not want the session to end, the code sets                                  <ph id="ph1">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> to                                  <ph id="ph2">`true`</ph> to prevent the                                  <ph id="ph3">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> session from ending.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> is not raised for                                      <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Exit</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>When an application shuts down, it may need to perform some final processing, such as persisting application state.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>For these situations, you can handle the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>For the complete example, see                                  <bpt id="p1">[</bpt>Persist and Restore Application-Scope Properties Across Application Sessions<ept id="p1">](../../../../docs/framework/wpf/app-development/persist-and-restore-application-scope-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> can be handled by both standalone applications and                                  <ph id="ph2">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For                                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>,                                  <ph id="ph2">&lt;xref:System.Windows.Application.Exit&gt;</ph> is raised when in the following circumstances:</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>An                                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> is navigated away from.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>In                                          <ph id="ph1">[!INCLUDE[TLA2#tla_ie7](../../../../includes/tla2sharptla-ie7-md.md)]</ph>, when the tab that is hosting the                                          <ph id="ph2">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph> is closed.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When the browser is closed.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Exit Code</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Applications are mostly launched by the operating system in response to a user request.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>However, an application can be launched by another application to perform some specific task.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>When the launched application shuts down, the launching application may want to know the condition under which the launched application shut down.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>In these situations,                                  <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> allows applications to return an application exit code on shutdown.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>By default,                                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications return an exit code value of 0.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>When you debug from                                      <ph id="ph1">[!INCLUDE[TLA2#tla_visualstu](../../../../includes/tla2sharptla-visualstu-md.md)]</ph>, the application exit code is displayed in the                                      <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window when the application shuts down, in a message that looks like the following:</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>You open the                                      <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window by clicking                                      <bpt id="p2">**</bpt>Output<ept id="p2">**</ept> on the                                      <bpt id="p3">**</bpt>View<ept id="p3">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>To change the exit code, you can call the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%28System.Int32%29&gt;</ph> overload, which accepts an integer argument to be the exit code:</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>You can detect the value of the exit code, and change it, by handling the                                  <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The                                  <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph> event handler is passed an                                  <ph id="ph2">&lt;xref:System.Windows.ExitEventArgs&gt;</ph> which provides access to the exit code with the                                  <ph id="ph3">&lt;xref:System.Windows.ExitEventArgs.ApplicationExitCode%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>For more information, see                                  <ph id="ph1">&lt;xref:System.Windows.Application.Exit&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>You can set the exit code in both standalone applications and                                      <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>However, the exit code value is ignored for                                      <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Unhandled Exceptions</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Sometimes an application may shut down under abnormal conditions, such as when an unanticipated exception is thrown.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In this case, the application may not have the code to detect and process the exception.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>This type of exception is an unhandled exception; a notification similar to that shown in the following figure is displayed before the application is closed.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Unhandled exception notification<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/applicationmanagementoverviewfigure2.png "</bpt>ApplicationManagementOverviewFigure2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>From the user experience perspective, it is better for an application to avoid this default behavior by doing some or all of the following:</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Displaying user-friendly information.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Attempting to keep an application running.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Recording detailed, developer-friendly, exception information in the                                  <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> event log.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Implementing this support depends on being able to detect unhandled exceptions, which is what the                          <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> event is raised for.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> event handler is passed a                          <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs&gt;</ph> parameter that contains contextual information regarding the unhandled exception, including the exception itself (                         <ph id="ph3">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception%2A?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>You can use this information to determine how to handle the exception.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>When you handle                          <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph>, you should set the                          <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A?displayProperty=fullName&gt;</ph> property to                          <ph id="ph3">`true`</ph>; otherwise,                          <ph id="ph4">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> still considers the exception to be unhandled and reverts to the default behavior described earlier.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>If an unhandled exception is raised and either the                          <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> event is not handled, or the event is handled and                          <ph id="ph2">&lt;xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled%2A&gt;</ph> is set to                          <ph id="ph3">`false`</ph>, the application shuts down immediately.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Furthermore, no other                          <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> events are raised.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Consequently, you need to handle                          <ph id="ph1">&lt;xref:System.Windows.Application.DispatcherUnhandledException&gt;</ph> if your application has code that must run before the application shuts down.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Although an application may shut down as a result of an unhandled exception, an application usually shuts down in response to a user request, as discussed in the next section.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Application Lifetime Events</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Standalone applications and                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> don't have exactly the same lifetimes.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The following figure illustrates the key events in the lifetime of a standalone application and shows the sequence in which they are raised.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Standalone Application &amp;#45; Application Object Events<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/applicationmodeloverview-applicationobjectevents.png "</bpt>ApplicationModelOverview_ApplicationObjectEvents<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Likewise, the following figure illustrates the key events in the lifetime of an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xbap](../../../../includes/tla2sharptla-xbap-md.md)]</ph>, and shows the sequence in which they are raised.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>XBAP &amp;#45; Application Object Events<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/applicationmodeloverview-applicationobjectevents-xbap.png "</bpt>ApplicationModelOverview_ApplicationObjectEvents_xbap<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Windows Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-windows-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WPF Application Resource, Content, and Data Files<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pack URIs in WPF<ept id="p1">](../../../../docs/framework/wpf/app-development/pack-uris-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Model: How-to Topics<ept id="p1">](http://msdn.microsoft.com/en-us/76771b09-3688-4d1c-8818-9b3f4cf39a30)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Application Development<ept id="p1">](../../../../docs/framework/wpf/app-development/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>