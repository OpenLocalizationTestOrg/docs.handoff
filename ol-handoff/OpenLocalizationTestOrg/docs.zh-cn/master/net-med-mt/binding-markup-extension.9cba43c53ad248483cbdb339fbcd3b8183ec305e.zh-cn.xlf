<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45ab76b7e76eb8bfa3768a1724b468624d79ac6f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\binding-markup-extension.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d02ad7383ae7599a42a3e43cfb27cdcbd1d6764</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1897c1988ff2caad291c95027dca227ff638ad12</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Binding Markup Extension | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Binding Markup Extension</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Defers a property value to be a data-bound value, creating an intermediate expression object and interpreting the data context that applies to the element and its binding at run time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Binding Expression Usage</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax Notes</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In these syntaxes, the <ph id="ph1">`[]`</ph> and <ph id="ph2">`*`</ph> are not literals.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They are part of a notation to indicate that zero or more <bpt id="p1">*</bpt>bindProp<ept id="p1">*</ept><ph id="ph1">`=`</ph><bpt id="p2">*</bpt>value<ept id="p2">*</ept> pairs can be used, with a <ph id="ph2">`,`</ph> separator between them and preceding <bpt id="p3">*</bpt>bindProp<ept id="p3">*</ept><ph id="ph3">`=`</ph><bpt id="p4">*</bpt>value<ept id="p4">*</ept> pairs.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Any of the properties listed in the "Binding Properties That Can Be Set with the Binding Extension" section could instead be set using attributes of a <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object element.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, that is not truly the markup extension usage of <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>, it is just the general XAML processing of attributes that set properties of the CLR <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In other words, <ph id="ph1">`&lt;Binding`</ph> <bpt id="p1">*</bpt>bindProp1<ept id="p1">*</ept><ph id="ph2">`="`</ph><bpt id="p2">*</bpt>value1<ept id="p2">*</ept><ph id="ph3">`"[`</ph> <bpt id="p3">*</bpt>bindPropN<ept id="p3">*</ept><ph id="ph4">`="`</ph><bpt id="p4">*</bpt>valueN<ept id="p4">*</ept><ph id="ph5">`"]*/&gt;`</ph> is an equivalent syntax for attributes of <ph id="ph6">&lt;xref:System.Windows.Data.Binding&gt;</ph> object element usage instead of a <ph id="ph7">`Binding`</ph> expression usage.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To learn about the XAML attribute usage of specific properties of <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph>, see the "XAML Attribute Usage" section of the relevant property of <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> in the .NET Framework Class Library.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The name of the <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> property to set.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Not all <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> properties can be set with the <ph id="ph2">`Binding`</ph> extension, and some properties are settable within a <ph id="ph3">`Binding`</ph> expression only by using further nested markup extensions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See "Binding Properties That Can Be Set with the Binding Extension" section.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The value to set the property to.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The handling of the attribute value is ultimately specific to the type and logic of the specific <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> property being set.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The path string that sets the implicit <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See also <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](../../../../docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Unqualified {Binding}</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`{Binding}`</ph> usage shown in "Binding Expression Usage" creates a <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> object with default values, which includes an initial <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph> of <ph id="ph4">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is still useful in many scenarios, because the created <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> might be relying on key data binding properties such as <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName&gt;</ph> being set in the run-time data context.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information on the concept of data context, see <bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Implicit Path</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Binding`</ph> markup extension uses <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph> as a conceptual "default property", where <ph id="ph3">`Path=`</ph> does not need to appear in the expression.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you specify a <ph id="ph1">`Binding`</ph> expression with an implicit path, the implicit path must appear first in the expression, prior to any other <ph id="ph2">`bindProp`</ph><ph id="ph3">=</ph><ph id="ph4">`value`</ph> pairs where the <ph id="ph5">&lt;xref:System.Windows.Data.Binding&gt;</ph> property is specified by name.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example: <ph id="ph1">`{Binding PathString}`</ph>, where <ph id="ph2">`PathString`</ph> is a string that is evaluated to be the value of <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph> in the <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph> created by the markup extension usage.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can append an implicit path with other named properties after the comma separator, for example, <ph id="ph1">`{Binding LastName, Mode=TwoWay}`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Binding Properties That Can Be Set with the Binding Extension</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The syntax shown in this topic uses the generic <ph id="ph1">`bindProp`</ph><ph id="ph2">=</ph><ph id="ph3">`value`</ph> approximation, because there are many read/write properties of <ph id="ph4">&lt;xref:System.Windows.Data.BindingBase&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Data.Binding&gt;</ph> that can be set through the <ph id="ph6">`Binding`</ph> markup extension / expression syntax.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>They can be set in any order, with the exception of an implicit <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(You do have the option to explicitly specify <ph id="ph1">`Path=`</ph>, in which case it can be set in any order).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Basically, you can set zero or more of the properties in the list below, using <ph id="ph1">`bindProp`</ph><ph id="ph2">=</ph><ph id="ph3">`value`</ph> pairs separated by commas.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Several of these property values require object types that do not support a native type conversion from a text syntax in XAML, and thus require markup extensions in order to be set as an attribute value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Check the XAML Attribute Usage section in the .NET Framework Class Library for each property for more information; the string you use for XAML attribute syntax with or without further markup extension usage is basically the same as the value you specify in a <ph id="ph1">`Binding`</ph> expression, with the exception that you do not place quotation marks around each <ph id="ph2">`bindProp`</ph><ph id="ph3">=</ph><ph id="ph4">`value`</ph> in the <ph id="ph5">`Binding`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph>: a string that identifies a possible binding group.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is a relatively advanced binding concept; see reference page for <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.BindingGroupName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.BindsDirectlyToSource%2A&gt;</ph>: Boolean, can be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.Converter%2A&gt;</ph>: can be set as a <ph id="ph2">`bindProp`</ph><ph id="ph3">=</ph><ph id="ph4">`value`</ph> string in the expression, but to do so requires an object reference for the value, such as a <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The value in this case is an instance of a custom converter class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ConverterCulture%2A&gt;</ph>: settable in the expression as a standards-based identifier; see the reference topic for <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ConverterCulture%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ConverterParameter%2A&gt;</ph>: can be set as a <ph id="ph2">`bindProp`</ph><ph id="ph3">=</ph><ph id="ph4">`value`</ph> string in the expression, but this is dependent on the type of the parameter being passed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If passing a reference type for the value, this usage requires an object reference such as a nested <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>: mutually exclusive versus <ph id="ph2">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>; each of these binding properties represents a particular binding methodology.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.FallbackValue%2A&gt;</ph>: can be set as a <ph id="ph2">`bindProp`</ph><ph id="ph3">=</ph><ph id="ph4">`value`</ph> string in the expression, but this is dependent on the type of the value being passed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If passing a reference type, requires an object reference such as a nested <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.IsAsync%2A&gt;</ph>: Boolean, can be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.Mode%2A&gt;</ph>: <bpt id="p1">*</bpt>value<ept id="p1">*</ept> is a constant name from the <ph id="ph2">&lt;xref:System.Windows.Data.BindingMode&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`{Binding Mode=OneWay}`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.NotifyOnSourceUpdated%2A&gt;</ph>: Boolean, can be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A&gt;</ph>: Boolean, can be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.NotifyOnValidationError%2A&gt;</ph>: Boolean, can be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph>: a string that describes a path into a data object or a general object model.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The format provides several different conventions for traversing an object model that cannot be adequately described in this topic.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>PropertyPath XAML Syntax<ept id="p1">](../../../../docs/framework/wpf/advanced/propertypath-xaml-syntax.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph>: mutually exclusive versus with <ph id="ph2">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>; each of these binding properties represents a particular binding methodology.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Requires a nested <bpt id="p1">[</bpt>RelativeSource MarkupExtension<ept id="p1">](../../../../docs/framework/wpf/advanced/relativesource-markupextension.md)</ept> usage to specify the value.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.Source%2A&gt;</ph>: mutually exclusive versus <ph id="ph2">&lt;xref:System.Windows.Data.Binding.RelativeSource%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Data.Binding.ElementName%2A&gt;</ph>; each of these binding properties represents a particular binding methodology.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Requires a nested extension usage, typically a <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept> that refers to an object data source from a keyed resource dictionary.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph>: a string that describes a string format convention for the bound data.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This is a relatively advanced binding concept; see reference page for <ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.StringFormat%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.BindingBase.TargetNullValue%2A&gt;</ph>: can be set as a <ph id="ph2">`bindProp`</ph><ph id="ph3">=</ph><ph id="ph4">`value`</ph> string in the expression, but this is dependent on the type of the parameter being passed.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If passing a reference type for the value, requires an object reference such as a nested <bpt id="p1">[</bpt>StaticResource Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/staticresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph>: <bpt id="p1">*</bpt>value<ept id="p1">*</ept> is a constant name from the <ph id="ph2">&lt;xref:System.Windows.Data.UpdateSourceTrigger&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`{Binding UpdateSourceTrigger=LostFocus}`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specific controls potentially have different default values for this binding property.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A&gt;</ph>: Boolean, can be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A&gt;</ph>: Boolean, can be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See Remarks.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph>: a string that describes a path into the XMLDOM of an XML data source.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Bind to XML Data Using an XMLDataProvider and XPath Queries<ept id="p1">](../../../../docs/framework/wpf/data/how-to-bind-to-xml-data-using-an-xmldataprovider-and-xpath-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The following are properties of <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> that cannot be set using the <ph id="ph2">`Binding`</ph> markup extension/<ph id="ph3">`{Binding}`</ph> expression form.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A&gt;</ph>: this property expects a reference to a callback implementation.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Callbacks/methods other than event handlers cannot be referenced in XAML syntax.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph>: the property takes a generic collection of <ph id="ph2">&lt;xref:System.Windows.Controls.ValidationRule&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This could be expressed as a property element in a <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> object element, but has no readily available attribute-parsing technique for usage in a <ph id="ph2">`Binding`</ph> expression.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See reference topic for <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>In terms of dependency property precedence, a <ph id="ph1">`Binding`</ph> expression is equivalent to a locally set value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If you set a local value for a property that previously had a <ph id="ph1">`Binding`</ph> expression, the <ph id="ph2">`Binding`</ph> is completely removed.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Describing data binding at a basic level is not covered in this topic.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph> do not support a <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> extension syntax.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You would instead use property elements.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>See reference topics for <ph id="ph1">&lt;xref:System.Windows.Data.MultiBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Data.PriorityBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Boolean values for XAML are case insensitive.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For example you could specify either <ph id="ph1">`{Binding NotifyOnValidationError=true}`</ph> or <ph id="ph2">`{Binding NotifyOnValidationError=True}`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Bindings that involve data validation are typically specified by an explicit <ph id="ph1">`Binding`</ph> element rather than as a <ph id="ph2">`{Binding ...}`</ph> expression, and setting <ph id="ph3">&lt;xref:System.Windows.Data.Binding.ValidatesOnDataErrors%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Data.Binding.ValidatesOnExceptions%2A&gt;</ph> in an expression is uncommon.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>This is because the companion property <ph id="ph1">&lt;xref:System.Windows.Data.Binding.ValidationRules%2A&gt;</ph> cannot be readily set in the expression form.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implement Binding Validation<ept id="p1">](../../../../docs/framework/wpf/data/how-to-implement-binding-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Binding`</ph> is a markup extension.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Markup extensions are typically implemented when there is a requirement to escape attribute values to be other than literal values or handler names, and the requirement is more global than type converters attributed on certain types or properties.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>All markup extensions in XAML use the <ph id="ph1">`{`</ph> and <ph id="ph2">`}`</ph> characters in their attribute syntax, which is the convention by which a XAML processor recognizes that a markup extension must process the string contents.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Binding`</ph> is an atypical markup extension in that the <ph id="ph2">&lt;xref:System.Windows.Data.Binding&gt;</ph> class that implements the extension functionality for WPF's XAML implementation also implements several other methods and properties that are not related to XAML.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The other members are intended to make <ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph> a more versatile and self-contained class that can address many data binding scenarios in addition to functioning as a XAML markup extension.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding&gt;</ph></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Markup Extensions and WPF XAML<ept id="p1">](../../../../docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>