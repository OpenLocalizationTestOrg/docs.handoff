<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="semantic-analysis.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dac733cba1d60a1bd24f5308717f4933cd620319</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\roslyn-sdk\get-started\semantic-analysis.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7e5305a9f6e89d9c8663a49e359335f35f3d26d7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ade00b466502a2c64cff9a236d331de26a0c6d2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Get started with semantic analysis</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>This tutorial provides an overview of working with semantic analysis using the .NET Compiler SDK.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Get started with semantic analysis</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial assumes you're familiar with the Syntax API.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>get started with syntax analysis<ept id="p1">](syntax-analysis.md)</ept> article provides sufficient introduction.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this tutorial, you explore the <bpt id="p1">**</bpt>Symbol<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Binding APIs<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These APIs provide information about the <bpt id="p1">_</bpt>semantic meaning<ept id="p1">_</ept> of a program.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>They enable you to ask and answer questions about the types represented by any symbol in your program.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You'll need to install the <bpt id="p1">**</bpt>.NET Compiler Platform SDK<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Understanding Compilations and Symbols</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As you work more with the .NET Compiler SDK, you become familiar with the distinctions between Syntax API and the Semantic API.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Syntax API<ept id="p1">**</ept> allows you to look at the <bpt id="p2">_</bpt>structure<ept id="p2">_</ept> of a program.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, often you want richer information about the semantics or <bpt id="p1">_</bpt>meaning<ept id="p1">_</ept> of a program.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>While a loose code file or snippet of VB or C# code can be syntactically analyzed in isolation, it's not meaningful to ask questions such as "what's the type of this variable" in a vacuum.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The meaning of a type name may be dependent on assembly references, namespace imports, or other code files.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Those questions are answered using the <bpt id="p1">**</bpt>Semantic API<ept id="p1">**</ept>, specifically the <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.Compilation?displayProperty=nameWithType&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An instance of <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.Compilation&gt;</ph> is analogous to a single project as seen by the compiler and represents everything needed to compile a Visual Basic or C# program.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>compilation<ept id="p1">**</ept> includes the set of source files to be compiled, assembly references, and compiler options.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can reason about the meaning of the code using all the other information in this context.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.Compilation&gt;</ph> allows you to find <bpt id="p1">**</bpt>Symbols<ept id="p1">**</ept> - entities such as types, namespaces, members, and variables which names and other expressions refer to.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The process of associating names and expressions with <bpt id="p1">**</bpt>Symbols<ept id="p1">**</ept> is called <bpt id="p2">**</bpt>Binding<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Like <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.SyntaxTree?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.Compilation&gt;</ph> is an abstract class with language-specific derivatives.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When creating an instance of Compilation, you must invoke a factory method on the <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.CSharp.CSharpCompilation?displayProperty=nameWithType&gt;</ph> (or <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation?displayProperty=nameWithType&gt;</ph>) class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Querying symbols</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this tutorial, you look at the "Hello World" program again.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This time, you query the symbols in the program to understand what types those symbols represent.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You query for the types in a namespace, and learn to find the methods available on a type.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can see the finished code for this sample in <bpt id="p1">[</bpt>our GitHub repository<ept id="p1">](https://github.com/dotnet/samples/tree/master/csharp/roslyn-sdk/SemanticQuickStart)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The Syntax Tree types use inheritance to describe the different syntax elements that are valid at different locations in the program.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using these APIs often means casting properties or collection members to specific derived types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the following examples, the assignment and the casts are separate statements, using explicitly typed variables.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can read the code to see the return types of the API and the runtime type of the objects returned.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In practice, it's more common to use implicitly typed variables and rely on API names to describe the type of objects being examined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Create a new C# <bpt id="p1">**</bpt>Stand-Alone Code Analysis Tool<ept id="p1">**</ept> project:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>New<ept id="p2">**</ept><ph id="ph2"> &gt; </ph><bpt id="p3">**</bpt>Project<ept id="p3">**</ept> to display the New Project dialog.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Visual C#<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Extensibility<ept id="p2">**</ept>, choose <bpt id="p3">**</bpt>Stand-Alone Code Analysis Tool<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Name your project "<bpt id="p1">**</bpt>SemanticQuickStart<ept id="p1">**</ept>" and click OK.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You're going to analyze the basic "Hello World!"</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>program shown earlier.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add the text for the Hello World program as a constant in your <ph id="ph1">`Program`</ph> class:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Next, add the following code to build the syntax tree for the code text in the <ph id="ph1">`programText`</ph> constant.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add the following line to your <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Next, build a <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.CSharp.CSharpCompilation&gt;</ph> from the tree you already created.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The "Hello World" sample relies on the <ph id="ph1">&lt;xref:System.String&gt;</ph> and <ph id="ph2">&lt;xref:System.Console&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You need to reference the assembly that declares those two types in your compilation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the following line to your <ph id="ph1">`Main`</ph> method to create a compilation of your syntax tree, including the reference to the appropriate assembly:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.CSharp.CSharpCompilation.AddReferences%2A?displayProperty=nameWithType&gt;</ph> method adds references to the compilation.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.MetadataReference.CreateFromFile%2A?displayProperty=nameWithType&gt;</ph> method loads an assembly as a reference.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Querying the semantic model</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Once you have a <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.Compilation&gt;</ph> you can ask it for a <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.SemanticModel&gt;</ph> for any <ph id="ph3">&lt;xref:Microsoft.CodeAnalysis.SyntaxTree&gt;</ph> contained in that <ph id="ph4">&lt;xref:Microsoft.CodeAnalysis.Compilation&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can think of the semantic model as the source for all the information you would normally get from intellisense.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.SemanticModel&gt;</ph> can answer questions like "What names are in scope at this location?", "What members are accessible from this method?", "What variables are used in this block of text?", and "What does this name/expression refer to?"</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add this statement to create the semantic model:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Binding a name</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.Compilation&gt;</ph> creates the  <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.SemanticModel&gt;</ph> from the <ph id="ph3">&lt;xref:Microsoft.CodeAnalysis.SyntaxTree&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>After creating the model, you can query it to find the first <ph id="ph1">`using`</ph> directive, and retrieve the symbol information for the <ph id="ph2">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add these two lines to your <ph id="ph1">`Main`</ph> method to create the semantic model and retrieve the symbol for the first using statement:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The preceding code shows how to bind the name in the first <ph id="ph1">`using`</ph> directive to retrieve a <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.SymbolInfo?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The preceding code also illustrates that you use the <bpt id="p1">**</bpt>syntax model<ept id="p1">**</ept> to find the structure of the code; you use the <bpt id="p2">**</bpt>semantic model<ept id="p2">**</ept> to understand its meaning.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>syntax model<ept id="p1">**</ept> finds the string <ph id="ph1">`System`</ph> in the using statement.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>semantic model<ept id="p1">**</ept> has all the information about the types defined in the <ph id="ph1">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>From the <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.SymbolInfo&gt;</ph> object you can obtain the <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.ISymbol?displayProperty=nameWithType&gt;</ph> using the <ph id="ph3">&lt;xref:Microsoft.CodeAnalysis.SymbolInfo.Symbol?displayProperty=nameWithType&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This property returns the symbol this expression refers to.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For expressions that don't refer to anything (such as numeric literals) this property is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.SymbolInfo.Symbol?displayProperty=nameWithType&gt;</ph> is not null, the <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.ISymbol.Kind?displayProperty=nameWithType&gt;</ph> denotes the type of the symbol.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.ISymbol.Kind?displayProperty=nameWithType&gt;</ph> property is a <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.SymbolKind.Namespace?displayProperty=nameWithType&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Add the following code to your <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It retrieves the symbol for the <ph id="ph1">`System`</ph> namespace and then displays all the child namespaces declared in the <ph id="ph2">`System`</ph> namespace:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Run the program and you should see the following output:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The output does not include every namespace that is a child namespace of the <ph id="ph1">`System`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>It displays every namespace that is present in this compilation, which only references the assembly where <ph id="ph1">`System.String`</ph> is declared.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Any namespaces declared in other assemblies are not known to this compilation</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Binding an expression</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The preceding code shows how to find a symbol by binding to a name.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>There are other expressions in a C# program that can be bound that aren't names.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To demonstrate this capability, let's access the binding to a simple string literal.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The "Hello World" program contains a <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.CSharp.Syntax.LiteralExpressionSyntax?displayProperty=nameWithType&gt;</ph>, the "Hello, World!"</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>string displayed to the console.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You find the "Hello, World!"</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>string by locating the single string literal in the program.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Then, once you've located the syntax node, get the type info for that node from the semantic model.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Add the following code to your <ph id="ph1">`Main`</ph> method:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:Microsoft.CodeAnalysis.TypeInfo?displayProperty=nameWithType&gt;</ph> struct includes a <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.TypeInfo.Type?displayProperty=nameWithType&gt;</ph> property that enables access to the semantic information about the type of the literal.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this example, that's the <ph id="ph1">`string`</ph> type.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Add a declaration that assigns this property to a local variable:</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To finish this tutorial, let's build a LINQ query that creates a sequence of all the public methods declared on the <ph id="ph1">`string`</ph> type that return a <ph id="ph2">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This query gets complex, so let's build it line by line, then reconstruct it as a single query.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The source for this query is the sequence of all members declared on the <ph id="ph1">`string`</ph> type:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>That source sequence contains all members, including properties and fields, so filter it using the <ph id="ph1">&lt;xref:System.Collections.Immutable.ImmutableArray%601.OfType%2A?displayProperty=nameWithType&gt;</ph> method to find elements that are <ph id="ph2">&lt;xref:Microsoft.CodeAnalysis.IMethodSymbol?displayProperty=nameWithType&gt;</ph> objects:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Next, add another filter to return only those methods that are public and return a <ph id="ph1">`string`</ph>:</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Select only the name property, and only distinct names by removing any overloads:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can also build the full query using the LINQ query syntax, and then display all the method names in  the console:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Build and run the program.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You should see the following output:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You've used the Semantic API to find and display information about the symbols that are part of this program.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>