<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c91f2686a03d2590e1aaf166d27c49744bb13c9b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\attributes\attributeusage.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14c93af33b39ad1373ce0971152aef8e9a86e782</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8ffec1cc3579f9897e31bbca7ff4ac5af0985365</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>AttributeUsage (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>AttributeUsage (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Determines how a custom attribute class can be used.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AttributeUsage`</ph> is an attribute that can be applied to custom attribute definitions to control how the new attribute can be applied.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The default settings look like this when applied explicitly:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`NewAttribute`</ph> class can be applied to any attribute-able code entity, but can be applied only once to each entity.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is inherited by derived classes when applied to a base class.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AllowMultiple`</ph> and <ph id="ph2">`Inherited`</ph> arguments are optional, so this code has the same effect:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`AttributeUsage`</ph> argument must be one or more elements of the <ph id="ph2">&lt;xref:System.AttributeTargets&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Multiple target types can be linked together with the OR operator, like this:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`AllowMultiple`</ph> argument is set to <ph id="ph2">`true`</ph>, then the resulting attribute can be applied more than once to a single entity, like this:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this case <ph id="ph1">`MultiUseAttr`</ph> can be applied repeatedly because <ph id="ph2">`AllowMultiple`</ph> is set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both formats shown for applying multiple attributes are valid.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Inherited`</ph> is set to <ph id="ph2">`false`</ph>, then the attribute is not inherited by classes that are derived from a class that is attributed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case <ph id="ph1">`Attr1`</ph> is not applied to <ph id="ph2">`DClass`</ph> via inheritance.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AttributeUsage`</ph> attribute is a single-use attribute--it cannot be applied more than once to the same class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AttributeUsage`</ph> is an alias for <ph id="ph2">&lt;xref:System.AttributeUsageAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Accessing Attributes by Using Reflection (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the effect of the <ph id="ph1">`Inherited`</ph> and <ph id="ph2">`AllowMultiple`</ph> arguments to the <ph id="ph3">`AttributeUsage`</ph> attribute, and how the custom attributes applied to a class can be enumerated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Sample Output</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Attribute&gt;</ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection&gt;</ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Programming Guide<ept id="p1">](../../../../visual-basic/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](https://msdn.microsoft.com/library/5x6cd29c)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/reflection.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes (Visual Basic)<ept id="p1">](../../../../visual-basic/language-reference/attributes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Custom Attributes (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/attributes/creating-custom-attributes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Accessing Attributes by Using Reflection (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/attributes/accessing-attributes-by-using-reflection.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>