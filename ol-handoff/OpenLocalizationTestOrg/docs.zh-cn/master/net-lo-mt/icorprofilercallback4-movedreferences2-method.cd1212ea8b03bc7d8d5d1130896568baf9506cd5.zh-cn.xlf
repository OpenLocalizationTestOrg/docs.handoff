<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="icorprofilercallback4-movedreferences2-method.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a916d0df63e7af453034c4537f3613294414d86f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\profiling\icorprofilercallback4-movedreferences2-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">393742652dcac77b14f9f286cdc20c408f21ec08</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">120952348932b2e0d220db984f007de083453e2b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>ICorProfilerCallback4::MovedReferences2 Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ICorProfilerCallback4::MovedReferences2 Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Called to report the new layout of objects in the heap as a result of a compacting garbage collection.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This method is called if the profiler has implemented the <bpt id="p1">[</bpt>ICorProfilerCallback4<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-interface.md)</ept> interface.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This callback replaces the <bpt id="p1">[</bpt>ICorProfilerCallback::MovedReferences<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-movedreferences-method.md)</ept> method, because it can report larger ranges of objects whose lengths exceed what can be expressed in a ULONG.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>[in] The number of blocks of contiguous objects that moved as the result of the compacting garbage collection.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>That is, the value of <ph id="ph1">`cMovedObjectIDRanges`</ph> is the total size of the <ph id="ph2">`oldObjectIDRangeStart`</ph>, <ph id="ph3">`newObjectIDRangeStart`</ph>, and <ph id="ph4">`cObjectIDRangeLength`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The next three arguments of <ph id="ph1">`MovedReferences2`</ph> are parallel arrays.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In other words, <ph id="ph1">`oldObjectIDRangeStart[i]`</ph>, <ph id="ph2">`newObjectIDRangeStart[i]`</ph>, and <ph id="ph3">`cObjectIDRangeLength[i]`</ph> all concern a single block of contiguous objects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>[in] An array of <ph id="ph1">`ObjectID`</ph> values, each of which is the old (pre-garbage collection) starting address of a block of contiguous, live objects in memory.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>[in] An array of <ph id="ph1">`ObjectID`</ph> values, each of which is the new (post-garbage collection) starting address of a block of contiguous, live objects in memory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>[in] An array of integers, each of which is the size of a block of contiguous objects in memory.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A size is specified for each block that is referenced in the <ph id="ph1">`oldObjectIDRangeStart`</ph> and <ph id="ph2">`newObjectIDRangeStart`</ph> arrays.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A compacting garbage collector reclaims the memory occupied by dead objects and compacts that freed space.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>As a result, live objects might be moved within the heap, and <ph id="ph1">`ObjectID`</ph> values distributed by previous notifications might change.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Assume that an existing <ph id="ph1">`ObjectID`</ph> value (<ph id="ph2">`oldObjectID`</ph>) lies within the following range:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, the offset from the start of the range to the start of the object is as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For any value of <ph id="ph1">`i`</ph> that is in the following range:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>0 &lt;= <ph id="ph1">`i`</ph><ph id="ph2"> &lt; </ph><ph id="ph3">`cMovedObjectIDRanges`</ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>you can calculate the new <ph id="ph1">`ObjectID`</ph> as follows:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`newObjectID`</ph><ph id="ph2"> = </ph><ph id="ph3">`newObjectIDRangeStart[i]`</ph> + (<ph id="ph4">`oldObjectID`</ph> â€“ <ph id="ph5">`oldObjectIDRangeStart[i]`</ph>)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>None of the <ph id="ph1">`ObjectID`</ph> values passed by <ph id="ph2">`MovedReferences2`</ph> are valid during the callback itself, because the garbage collector might be in the middle of moving objects from old locations to new locations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Therefore, profilers should not attempt to inspect objects during a <ph id="ph1">`MovedReferences2`</ph> call.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>ICorProfilerCallback2::GarbageCollectionFinished<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback2-garbagecollectionfinished-method.md)</ept> callback indicates that all objects have been moved to their new locations and inspection can be performed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the profiler implements both the <bpt id="p1">[</bpt>ICorProfilerCallback<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept> and the <bpt id="p2">[</bpt>ICorProfilerCallback4<ept id="p2">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-interface.md)</ept> interfaces, the <ph id="ph1">`MovedReferences2`</ph> method is called before the <bpt id="p3">[</bpt>ICorProfilerCallback::MovedReferences<ept id="p3">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-movedreferences-method.md)</ept> method, but only if the <ph id="ph2">`MovedReferences2`</ph> method returns successfully.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Profilers can return an HRESULT that indicates failure from the <ph id="ph1">`MovedReferences2`</ph> method, to avoid calling the second method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorProf.idl, CorProf.h</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorProfilerCallback Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MovedReferences Method<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback-movedreferences-method.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorProfilerCallback4 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/icorprofilercallback4-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Profiling Interfaces<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/profiling-interfaces.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Profiling<ept id="p1">](../../../../docs/framework/unmanaged-api/profiling/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>