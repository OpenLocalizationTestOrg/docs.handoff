<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06c3a618d8b76360547c506a2e863ec71a571e3e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\metadata\imetadataemit-mergeend-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aef9b411f4f2bc6e7637e509dfcd3843ce6644f1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">953d0cac8496ae498615162c257dd3b51670249c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>IMetaDataEmit::MergeEnd Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>IMetaDataEmit::MergeEnd Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Merges into the current scope all the metadata scopes specified by one or more prior calls to <bpt id="p1">[</bpt>IMetaDataEmit::Merge<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-merge-method.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This method takes no parameters.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This routine triggers the actual merge of metadata, of all import scopes specified by preceding calls to <ph id="ph1">`IMetaDataEmit::Merge`</ph>, into the current output scope.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following special conditions apply to the merge:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A module version identifier (MVID) is never imported, because it is unique to the metadata in the import scope.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>No existing module-wide properties are overwritten.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If module properties were already set for the current scope, no module properties are imported.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, if module properties have not been set in the current scope, they are imported only once, when they are first encountered.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If those module properties are encountered again, they are duplicates.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the values of all module properties (except MVID) are compared and no duplicates are found, an error is raised.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For type definitions (<ph id="ph1">`TypeDef`</ph>), no duplicates are merged into the current scope.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TypeDef`</ph> objects are checked for duplicates against each <bpt id="p1">*</bpt>fully-qualified object name<ept id="p1">*</ept><ph id="ph2"> + </ph><bpt id="p2">*</bpt>GUID<ept id="p2">*</ept><ph id="ph3"> + </ph><bpt id="p3">*</bpt>version number<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If there is a match on either name or GUID, and any of the other two elements is different, an error is raised.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Otherwise, if all three items match, <ph id="ph1">`MergeEnd`</ph> does a cursory check to ensure the entries are indeed duplicates; if not, an error is raised.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This cursory check looks for:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The same member declarations, occurring in the same order.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Members that are flagged as <ph id="ph1">`mdPrivateScope`</ph> (see the <bpt id="p1">[</bpt>CorMethodAttr<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/cormethodattr-enumeration.md)</ept> enumeration) are not included in this check; they are merged specially.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The same class layout.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This means that a <ph id="ph1">`TypeDef`</ph> object must always be fully and consistently defined in every metadata scope in which it is declared; if its member implementations (for a class) are spread across multiple compilation units, the full definition is assumed to be present in every scope and not incremental to each scope.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, if parameter names are relevant to the contract, they must be emitted the same way into every scope; if they are not relevant, they should not be emitted into metadata.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The exception is that a <ph id="ph1">`TypeDef`</ph> object can have incremental members flagged as <ph id="ph2">`mdPrivateScope`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>On encountering these, <ph id="ph1">`MergeEnd`</ph> incrementally adds them to the current scope without regard for duplicates.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because the compiler understands the private scope, the compiler must be responsible for enforcing rules.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Relative virtual addresses (RVAs) are not imported or merged; the compiler is expected to re-emit this information.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Custom attributes are merged only when the item to which they are attached is merged.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, custom attributes associated with a class are merged when the class is first encountered.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If custom attributes are associated with a <ph id="ph1">`TypeDef`</ph> or <ph id="ph2">`MemberDef`</ph> that is specific to the compilation unit (such as the time stamp of a member compile), they are not merged and it is up to the compiler to remove or update such metadata.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> Cor.h</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> Used as a resource in MSCorEE.dll</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[net_current_v11plus](../../../../includes/net-current-v11plus-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>IMetaDataEmit Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit-interface.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>IMetaDataEmit2 Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/metadata/imetadataemit2-interface.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>