<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b817abfa6f3b529d76dbd700677183612170e4d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\design-guidelines\names-of-classes-structs-and-interfaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9c88ccf0696d91754db2eecc88120b7e632a377</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94d601e67f1703477c8d1d6e0105850d78135de4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Names of Classes, Structs, and Interfaces | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Names of Classes, Structs, and Interfaces</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The naming guidelines that follow apply to general type naming.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> name classes and structs with nouns or noun phrases, using PascalCasing.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This distinguishes type names from methods, which are named with verb phrases.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> name interfaces with adjective phrases, or occasionally with nouns or noun phrases.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Nouns and noun phrases should be used rarely and they might indicate that the type should be an abstract class, and not an interface.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> give class names a prefix (e.g., "C").</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ CONSIDER<ept id="p1">**</ept> ending the name of derived classes with the name of the base class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is very readable and explains the relationship clearly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Some examples of this in code are: <ph id="ph1">`ArgumentOutOfRangeException`</ph>, which is a kind of <ph id="ph2">`Exception`</ph>, and <ph id="ph3">`SerializableAttribute`</ph>, which is a kind of <ph id="ph4">`Attribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, it is important to use reasonable judgment in applying this guideline; for example, the <ph id="ph1">`Button`</ph> class is a kind of <ph id="ph2">`Control`</ph> event, although <ph id="ph3">`Control`</ph> doesn’t appear in its name.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> prefix interface names with the letter I, to indicate that the type is an interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`IComponent`</ph> (descriptive noun), <ph id="ph2">`ICustomAttributeProvider`</ph> (noun phrase), and <ph id="ph3">`IPersistable`</ph> (adjective) are appropriate interface names.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As with other type names, avoid abbreviations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> ensure that the names differ only by the "I" prefix on the interface name when you are defining a class–interface pair where the class is a standard implementation of the interface.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Names of Generic Type Parameters</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Generics were added to .NET Framework 2.0.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The feature introduced a new kind of identifier called <bpt id="p1">*</bpt>type parameter<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> name generic type parameters with descriptive names unless a single-letter name is completely self-explanatory and a descriptive name would not add value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ CONSIDER<ept id="p1">**</ept> using <ph id="ph1">`T`</ph> as the type parameter name for types with one single-letter type parameter.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> prefix descriptive type parameter names with <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ CONSIDER<ept id="p1">**</ept> indicating constraints placed on a type parameter in the name of the parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, a parameter constrained to <ph id="ph1">`ISession`</ph> might be called <ph id="ph2">`TSession`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Names of Common Types</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> follow the guidelines described in the following table when naming types derived from or implementing certain .NET Framework types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Base Type</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Derived/Implementing Type Guideline</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "Attribute" to names of custom attribute classes.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>add the suffix "Attribute" to names of custom attribute classes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "EventHandler" to names of delegates that are used in events.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "Callback" to names of delegates other than those used as event handlers.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> add the suffix "Delegate" to a delegate.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "EventArgs."</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> derive from this class; use the keyword supported by your language instead; for example, in C#, use the enum keyword.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> add the suffix "Enum" or "Flag."</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "Exception."</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "Dictionary."</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`IDictionary`</ph> is a specific type of collection, but this guideline takes precedence over the more general collections guideline that follows.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "Collection."</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "Stream."</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> add the suffix "Permission."</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Naming Enumerations</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Names of enumeration types (also called enums) in general should follow the standard type-naming rules (PascalCasing, etc.).</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>However, there are additional guidelines that apply specifically to enums.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> use a singular type name for an enumeration unless its values are bit fields.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>✓ DO<ept id="p1">**</ept> use a plural type name for an enumeration with bit fields as values, also called flags enum.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> use an "Enum" suffix in enum type names.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> use "Flag" or "Flags" suffixes in enum type names.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>X DO NOT<ept id="p1">**</ept> use a prefix on enumeration value names (e.g., "ad" for ADO enums, "rtf" for rich text enums, etc.).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Portions © 2005, 2009 Microsoft Corporation. All rights reserved.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Reprinted by permission of Pearson Education, Inc. from <bpt id="p2">[</bpt>Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition<ept id="p2">](http://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619)</ept> by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Framework Design Guidelines<ept id="p1">](../../../docs/standard/design-guidelines/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Naming Guidelines<ept id="p1">](../../../docs/standard/design-guidelines/naming-guidelines.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>