<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59851175865939243260702470955fe0dea38495</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\events\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53c3e2b567dfbdf1249baa01fd203f55e214d894</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38f9c127c5aa2d52fa921461bee8335111340a7a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Events (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Events (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>While you might visualize a <ph id="ph1">[!INCLUDE[vsprvs](../../../../csharp/includes/vsprvs_md.md)]</ph> project as a series of procedures that execute in a sequence, in reality, most programs are event driven—meaning the flow of execution is determined by external occurrences called <bpt id="p1">*</bpt>events<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An event is a signal that informs an application that something important has occurred.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, when a user clicks a control on a form, the form can raise a <ph id="ph1">`Click`</ph> event and call a procedure that handles the event.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Events also allow separate tasks to communicate.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Say, for example, that your application performs a sort task separately from the main application.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If a user cancels the sort, your application can send a cancel event instructing the sort process to stop.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Event Terms and Concepts</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This section describes the terms and concepts used with events in <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Declaring Events</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You declare events within classes, structures, modules, and interfaces using the <ph id="ph1">`Event`</ph> keyword, as in the following example:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Raising Events</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An event is like a message announcing that something important has occurred.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The act of broadcasting the message is called <bpt id="p1">*</bpt>raising<ept id="p1">*</ept> the event.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, you raise events with the <ph id="ph2">`RaiseEvent`</ph> statement, as in the following example:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Events must be raised within the scope of the class, module, or structure where they are declared.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, a derived class cannot raise events inherited from a base class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Event Senders</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Any object capable of raising an event is an <bpt id="p1">*</bpt>event sender<ept id="p1">*</ept>, also known as an <bpt id="p2">*</bpt>event source<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Forms, controls, and user-defined objects are examples of event senders.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Event Handlers</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Event handlers<ept id="p1">*</ept> are procedures that are called when a corresponding event occurs.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use any valid subroutine with a matching signature as an event handler.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You cannot use a function as an event handler, however, because it cannot return a value to the event source.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>uses a standard naming convention for event handlers that combines the name of the event sender, an underscore, and the name of the event.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Click`</ph> event of a button named <ph id="ph2">`button1`</ph> would be named <ph id="ph3">`Sub button1_Click`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>We recommend that you use this naming convention when defining event handlers for your own events, but it is not required; you can use any valid subroutine name.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Associating Events with Event Handlers</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Before an event handler becomes usable, you must first associate it with an event by using either the <ph id="ph1">`Handles`</ph> or <ph id="ph2">`AddHandler`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>WithEvents and the Handles Clause</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WithEvents`</ph> statement and <ph id="ph2">`Handles`</ph> clause provide a declarative way of specifying event handlers.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An event raised by an object declared with the <ph id="ph1">`WithEvents`</ph> keyword can be handled by any procedure with a <ph id="ph2">`Handles`</ph> statement for that event, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WithEvents`</ph> statement and the <ph id="ph2">`Handles`</ph> clause are often the best choice for event handlers because the declarative syntax they use makes event handling easier to code, read and debug.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>However, be aware of the following limitations on the use of <ph id="ph1">`WithEvents`</ph> variables:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You cannot use a <ph id="ph1">`WithEvents`</ph> variable as an object variable.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>That is, you cannot declare it as <ph id="ph1">`Object`</ph>—you must specify the class name when you declare the variable.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Because shared eventsare not tied to class instances, you cannot use <ph id="ph1">`WithEvents`</ph> to declaratively handle shared events.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Similarly, you cannot use <ph id="ph1">`WithEvents`</ph> or <ph id="ph2">`Handles`</ph> to handle events from a <ph id="ph3">`Structure`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In both cases, you can use the <ph id="ph1">`AddHandler`</ph> statement to handle those events.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You cannot create arrays of <ph id="ph1">`WithEvents`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WithEvents`</ph> variables allow a single event handler to handle one or more kind of event, or one or more event handlers to handle the same kind of event.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`Handles`</ph> clause is the standard way of associating an event with an event handler, it is limited to associating events with event handlers at compile time.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In some cases, such as with events associated with forms or controls, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically stubs out an empty event handler and associates it with an event.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, when you double-click a command button on a form in design mode, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> creates an empty event handler and a <ph id="ph2">`WithEvents`</ph> variable for the command button, as in the following code:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>AddHandler and RemoveHandler</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AddHandler`</ph> statement is similar to the <ph id="ph2">`Handles`</ph> clause in that both allow you to specify an event handler.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`AddHandler`</ph>, used with <ph id="ph2">`RemoveHandler`</ph>, provides greater flexibility than the <ph id="ph3">`Handles`</ph> clause, allowing you to dynamically add, remove, and change the event handler associated with an event.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If you want to handle shared events or events from a structure, you must use <ph id="ph1">`AddHandler`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddHandler`</ph> takes two arguments: the name of an event from an event sender such as a control, and an expression that evaluates to a delegate.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You do not need to explicitly specify the delegate class when using <ph id="ph1">`AddHandler`</ph>, since the <ph id="ph2">`AddressOf`</ph> statement always returns a reference to the delegate.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example associates an event handler with an event raised by an object:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`RemoveHandler`</ph>, which disconnects an event from an event handler, uses the same syntax as <ph id="ph2">`AddHandler`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the following example, an event handler is associated with an event, and the event is raised.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The event handler catches the event and displays a message.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Then the first event handler is removed and a different event handler is associated with the event.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When the event is raised again, a different message is displayed.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Finally, the second event handler is removed and the event is raised for a third time.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Because there is no longer an event handler associated with the event, no action is taken.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Handling Events Inherited from a Base Class</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Derived classes<ept id="p1">*</ept>—classes that inherit characteristics from a base class—can handle events raised by their base class using the <ph id="ph1">`Handles``MyBase`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To handle events from a base class</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Declare an event handler in the derived class by adding a <ph id="ph1">`Handles MyBase.`</ph><bpt id="p1">*</bpt>eventname<ept id="p1">*</ept> statement to the declaration line of your event-handler procedure, where <bpt id="p2">*</bpt>eventname<ept id="p2">*</ept> is the name of the event in the base class you are handling.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Declaring and Raising Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/walkthrough-declaring-and-raising-events.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Provides a step-by-step description of how to declare and raise events for a class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Handling Events<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Demonstrates how to write an event-handler procedure.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare Custom Events To Avoid Blocking<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-avoid-blocking.md)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Demonstrates how to define a custom event that allows its event handlers to be called asynchronously.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Declare Custom Events To Conserve Memory<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/how-to-declare-custom-events-to-conserve-memory.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Demonstrates how to define a custom event that uses memory only when the event is handled.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Inherited Event Handlers in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/events/troubleshooting-inherited-event-handlers.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Lists common issues that arise with event handlers in inherited components.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Events<ept id="p1">](../../../../standard/events/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Provides an overview of the event model in the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Event Handlers in Windows Forms<ept id="p1">](https://msdn.microsoft.com/library/dacysss4.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Describes how to work with events associated with Windows Forms objects.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Delegates<ept id="p1">](../../../../visual-basic/programming-guide/language-features/delegates/index.md)</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Provides an overview of delegates in Visual Basic.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>