<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ref-return-values.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">40951069f2a2149a8f88f2d372d84a15559cdd6e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\ref-return-values.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a6b001c9e238e2279a3f3e0b6a49b1ce413960e9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb9132d738d223c77a5646b4fc597ee53d14b819</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Ref Return Values (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Support for reference return values (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, the C# language supports <bpt id="p1">*</bpt>reference return values<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>One way to understand reference return values is that they are the opposite of arguments that are passed by reference to a method.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When an argument passed by reference is modified, the changes are reflected in value of the variable on the caller.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When an method provides a reference return value to a caller, modifications made to the reference return value by the caller are reflected in the called method's data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Visual Basic does not allow you to author methods with reference return values, but it does allow you to consume reference return values.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In other words, you can call a method with a reference return value and modify that return value, and changes to the reference return value are reflected in the called method's data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Modifying the ref return value directly</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For methods that always succeed and have no <ph id="ph1">`ByRef`</ph> parameters, you can modify the reference return value directly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You do this by assigning the new value to the expressions that returns the reference return value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following C# example defines a <ph id="ph1">`NumericValue.IncrementValue`</ph> method that increments an internal value and returns it as a reference return value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The reference return value is then modified by the caller in the following Visual Basic example.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note that the line with the <ph id="ph1">`NumericValue.IncrementValue`</ph> method call does not assign a value to the method.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Instead, it assigns a value to the reference return value returned by the method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Using a helper method</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In other cases, modifying the reference return value of a method call directly may not always be desirable.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, a search method that returns a string may not always find a match.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In that case, you want to modify the reference return value only if the search is successful.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following C# example illustrates this scenario.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It defines a <ph id="ph1">`Sentence`</ph> class written in C# includes a <ph id="ph2">`FindNext`</ph> method that finds the next word in a sentence that begins with a specified substring.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The string is returned as a reference return value, and a <ph id="ph1">`Boolean`</ph> variable passed by reference to the method indicates whether the search was successful.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The reference return value indicates that the caller can not only read the returned value; he or she can also modify it, and that modification is reflected in the data contained internally in the <ph id="ph1">`Sentence`</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Directly modifying the reference return value in this case is not reliable, since the method call may fail to find a match and return the first word in the sentence.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In that case, the caller will inadvertently modify the first word of the sentence.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This could be prevented by the caller returning a <ph id="ph1">`null`</ph> (or <ph id="ph2">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>But in that case, attempting to modify a string whose value is <ph id="ph1">`Nothing`</ph> throws a <ph id="ph2">&lt;xref:System.NullReferenceException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If could also be prevented by the caller returning <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, but this requires that the caller define a string variable whose value is <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>While the caller can modify that string, the modification itself serves no purpose, since the modified string has no relationship to the words in the sentence stored by the <ph id="ph1">`Sentence`</ph> class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The best way to handle this scenario is to pass the reference return value by reference to a helper method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The helper method then contains the logic to determine whether the method call succeeded and, if it did, to modify the reference return value.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example provides a possible implementation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Passing arguments by value and by reference<ept id="p1">](passing-arguments-by-value-and-by-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures in Visual Basic<ept id="p1">](index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>