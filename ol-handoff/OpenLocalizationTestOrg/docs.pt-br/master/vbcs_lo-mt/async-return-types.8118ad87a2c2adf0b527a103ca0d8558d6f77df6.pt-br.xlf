<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d962a621191813f387af2f0c1939545b17663e65</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\concepts\async\async-return-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ccc0e0370bc7eb77c8db0ace13eb2a40e0752d40</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93eb3ff36975359e427b55c86ef0efbff4275bcf</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Async Return Types (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Async Return Types (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Async methods have three possible return types: <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, and void.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Visual Basic, the void return type is written as a <bpt id="p1">[</bpt>Sub<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md)</ept> procedure.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about async methods, see <bpt id="p1">[</bpt>Asynchronous Programming with Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each return type is examined in one of the following sections, and you can find a full example that uses all three types at the end of the topic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To run the example, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_TaskTReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Task(T) Return Type</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> return type is used for an async method that contains a <bpt id="p1">[</bpt>Return<ept id="p1">](../../../../visual-basic/language-reference/statements/return-statement.md)</ept> statement in which the operand has type <ph id="ph2">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`TaskOfT_MethodAsync`</ph> async method contains a return statement that returns an integer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Therefore, the method declaration must specify a return type of <ph id="ph1">`Task(Of Integer)`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`TaskOfT_MethodAsync`</ph> is called from within an await expression, the await expression retrieves the integer value (the value of <ph id="ph2">`leisureHours`</ph>) that's stored in the task that's returned by <ph id="ph3">`TaskOfT_MethodAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about await expressions, see <bpt id="p1">[</bpt>Await Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code calls and awaits method <ph id="ph1">`TaskOfT_MethodAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The result is assigned to the <ph id="ph1">`result1`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can better understand how this happens by separating the call to <ph id="ph1">`TaskOfT_MethodAsync`</ph> from the application of <ph id="ph2">`Await`</ph>, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A call to method <ph id="ph1">`TaskOfT_MethodAsync`</ph> that isn't immediately awaited returns a <ph id="ph2">`Task(Of Integer)`</ph>, as you would expect from the declaration of the method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The task is assigned to the <ph id="ph1">`integerTask`</ph> variable in the example.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`integerTask`</ph> is a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, it contains a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result&gt;</ph> property of type <ph id="ph4">`TResult`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this case, TResult represents an integer type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Await`</ph> is applied to <ph id="ph2">`integerTask`</ph>, the await expression evaluates to the contents of the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property of <ph id="ph4">`integerTask`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The value is assigned to the <ph id="ph1">`result2`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property is a blocking property.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you try to access it before its task is finished, the thread that's currently active is blocked until the task completes and the value is available.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In most cases, you should access the value by using <ph id="ph1">`Await`</ph> instead of accessing the property directly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The display statements in the following code verify that the values of the <ph id="ph1">`result1`</ph> variable, the <ph id="ph2">`result2`</ph> variable, and the <ph id="ph3">`Result`</ph> property are the same.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remember that the <ph id="ph1">`Result`</ph> property is a blocking property and shouldn't be accessed before its task has been awaited.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_TaskReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Task Return Type</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Async methods that don't contain a return statement or that contain a return statement that doesn't return an operand usually have a return type of <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Such methods would be <bpt id="p1">[</bpt>Sub<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/sub-procedures.md)</ept> procedures if they were written to run synchronously.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you use a <ph id="ph1">`Task`</ph> return type for an async method, a calling method can use an <ph id="ph2">`Await`</ph> operator to suspend the caller's completion until the called async method has finished.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the following example, async method <ph id="ph1">`Task_MethodAsync`</ph> doesn't contain a return statement.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Therefore, you specify a return type of <ph id="ph1">`Task`</ph> for the method, which enables <ph id="ph2">`Task_MethodAsync`</ph> to be awaited.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The definition of the <ph id="ph1">`Task`</ph> type doesn't include a <ph id="ph2">`Result`</ph> property to store a return value.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Task_MethodAsync`</ph> is called and awaited by using an await statement instead of an await expression, similar to the calling statement for a synchronous <ph id="ph2">`Sub`</ph> or void-returning method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The application of an <ph id="ph1">`Await`</ph> operator in this case doesn't produce a value.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code calls and awaits method <ph id="ph1">`Task_MethodAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As in the previous <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> example, you can separate the call to <ph id="ph2">`Task_MethodAsync`</ph> from the application of an <ph id="ph3">`Await`</ph> operator, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, remember that a <ph id="ph1">`Task`</ph> doesn't have a <ph id="ph2">`Result`</ph> property, and that no value is produced when an await operator is applied to a <ph id="ph3">`Task`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following code separates calling <ph id="ph1">`Task_MethodAsync`</ph> from awaiting the task that <ph id="ph2">`Task_MethodAsync`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_VoidReturnType"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Void Return Type</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The primary use of <ph id="ph1">`Sub`</ph> procedures is in event handlers, where there is no return type (referred to as a void return type in other languages).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A void return also can be used to override void-returning methods or for methods that perform activities that can be categorized as "fire and forget."</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>However, you should return a <ph id="ph1">`Task`</ph> wherever possible, because a void-returning async method can't be awaited.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Any caller of such a method must be able to continue to completion without waiting for the called async method to finish, and the caller must be independent of any values or exceptions that the async method generates.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The caller of a void-returning async method can't catch exceptions that are thrown from the method, and such unhandled exceptions are likely to cause your application to fail.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If an exception occurs in an async method that returns a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, the exception is stored in the returned task, and rethrown when the task is awaited.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, make sure that any async method that can produce an exception has a return type of <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> and that calls to the method are awaited.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information about how to catch exceptions in async methods, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following code defines an async event handler.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_Example"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Complete Example</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following Windows Presentation Foundation (WPF) project contains the code examples from this topic.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To run the project, perform the following steps:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Start Visual Studio.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box opens.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Installed<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept> category, choose <bpt id="p3">**</bpt>Visual Basic<ept id="p3">**</ept>, and then choose <bpt id="p4">**</bpt>Windows<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>WPF Application<ept id="p1">**</ept> from the list of project types.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Enter <ph id="ph1">`AsyncReturnTypes`</ph> as the name of the project, and then choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The new project appears in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the Visual Studio Code Editor, choose the <bpt id="p1">**</bpt>MainWindow.xaml<ept id="p1">**</ept> tab.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the tab is not visible, open the shortcut menu for MainWindow.xaml in <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, and then choose <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>XAML<ept id="p1">**</ept> window of MainWindow.xaml, replace the code with the following code.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A simple window that contains a text box and a button appears in the <bpt id="p1">**</bpt>Design<ept id="p1">**</ept> window of MainWindow.xaml.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for MainWindow.xaml.vb, and then choose <bpt id="p2">**</bpt>View Code<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Replace the code in MainWindow.xaml.vb with the following code.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Choose the F5 key to run the program, and then choose the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The following output should appear.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task.FromResult%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Accessing the Web by Using Async and Await (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Control Flow in Async Programs (Visual Basic)<ept id="p1">](../../../../visual-basic/programming-guide/concepts/async/control-flow-in-async-programs.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Async<ept id="p1">](../../../../visual-basic/language-reference/modifiers/async.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Await Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/await-operator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>