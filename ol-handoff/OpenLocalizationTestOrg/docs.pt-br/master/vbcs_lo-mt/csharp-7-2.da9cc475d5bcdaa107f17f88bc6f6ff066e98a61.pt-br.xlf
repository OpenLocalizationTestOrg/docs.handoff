<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="csharp-7-2.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8b2be68aac3cba92e0dbd74dfe4ee3cbbef0e88</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\whats-new\csharp-7-2.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f284ab97511c3b9d695f746d4c0d5b4097e828c0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27d06ea321c7809655627886cae5b39694511093</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>What's new in C# 7.2</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>An overview of new features in C# 7.2.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>What's new in C# 7.2</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>C# 7.2 is another point release that adds a number of useful features.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>One theme for this release is working more efficiently with value types by avoiding unnecessary copies or allocations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The remaining features are small, nice-to-have features.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>C# 7.2 uses the <bpt id="p1">[</bpt>language version selection<ept id="p1">](../language-reference/configure-language-version.md)</ept> configuration element to select the compiler language version.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The new language features in this release are:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Techniques for writing safe efficient code<ept id="p1">](#safe-efficient-code-enhancements)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A combination of syntax improvements that enable working with value types using reference semantics.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Non-trailing named arguments<ept id="p1">](#non-trailing-named-arguments)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Named arguments can be followed by positional arguments.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Leading underscores in numeric literals<ept id="p1">](#leading-underscores-in-numeric-literals)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Numeric literals can now have leading underscores before any printed digits.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`private protected`</ph> access modifier<ept id="p1">](#private-protected-access-modifier)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`private protected`</ph> access modifier enables access for derived classes in the same assembly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Conditional <ph id="ph1">`ref`</ph> expressions<ept id="p1">](#conditional-ref-expressions)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The result of a conditional expression (<ph id="ph1">`?:`</ph>) can now be a reference.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Safe efficient code enhancements</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Language features introduced in 7.2 let you work with value types while using reference semantics.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>They are designed to increase performance by minimizing copying value types without incurring the memory allocations associated with using reference types.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The features include:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`in`</ph> modifier on parameters, to specify that an argument is passed by reference but not modified by the called method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`in`</ph> modifier to an argument is a <bpt id="p1">[</bpt>source compatible change<ept id="p1">](version-update-considerations.md#source-compatible-changes)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ref readonly`</ph> modifier on method returns, to indicate that a method returns its value by reference but doesn't allow writes to that object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`ref readonly`</ph> modifier is a <bpt id="p1">[</bpt>source compatible change<ept id="p1">](version-update-considerations.md#source-compatible-changes)</ept>, if the return is assigned to a value.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`readonly`</ph> modifier to an existing <ph id="ph2">`ref`</ph> return statement is an <bpt id="p1">[</bpt>incompatible change<ept id="p1">](version-update-considerations.md#incompatible-changes)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It requires callers to update the declaration of <ph id="ph1">`ref`</ph> local variables to include the <ph id="ph2">`readonly`</ph> modifier.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`readonly struct`</ph> declaration, to indicate that a struct is immutable and should be passed as an <ph id="ph2">`in`</ph> parameter to its member methods.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`readonly`</ph> modifier to an existing struct declaration is a <bpt id="p1">[</bpt>binary compatible change<ept id="p1">](version-update-considerations.md#binary-compatible-changes)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ref struct`</ph> declaration, to indicate that a struct type accesses managed memory directly and must always be stack allocated.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Adding the <ph id="ph1">`ref`</ph> modifier to an existing <ph id="ph2">`struct`</ph> declaration is an <bpt id="p1">[</bpt>incompatible change<ept id="p1">](version-update-considerations.md#incompatible-changes)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ref struct`</ph> cannot be a member of a class or used in other locations where it may be allocated on the heap.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can read more about all these changes in <bpt id="p1">[</bpt>Write safe efficient code<ept id="p1">](../write-safe-efficient-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Non-trailing named arguments</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Method calls may now use named arguments that precede positional arguments when those named arguments are in the correct positions.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>Named and optional arguments<ept id="p1">](../programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Leading underscores in numeric literals</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The implementation of support for digit separators in C# 7.0 didn't allow the <ph id="ph1">`_`</ph> to be the first character of the literal value.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Hex and binary numeric literals may now begin with an <ph id="ph1">`_`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>private protected<ept id="p1">_</ept> access modifier</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A new compound access modifier: <ph id="ph1">`private protected`</ph> indicates that a member may be accessed by containing class or derived classes that are declared in the same assembly.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>While <ph id="ph1">`protected internal`</ph> allows access by derived classes or classes that are in the same assembly, <ph id="ph2">`private protected`</ph> limits access to derived types declared in the same assembly.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>access modifiers<ept id="p1">](../language-reference/keywords/access-modifiers.md)</ept> in the language reference.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Conditional <ph id="ph1">`ref`</ph> expressions</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Finally, the conditional expression may produce a ref result instead of a value result.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, you would write the following to retrieve a reference to the first element in one of two arrays:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`r`</ph> is a reference to the first value in either <ph id="ph2">`arr`</ph> or <ph id="ph3">`otherArr`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>conditional operator (?:)<ept id="p1">](../language-reference/operators/conditional-operator.md)</ept> in the language reference.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>