<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34eb32cb6e640d681db6853aaa164d84acca7e4f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\data-types\conversions-between-strings-and-other-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a65b54bdc3e35144c6ea5bb0943fea5e17b5bd69</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b127d020d5ffd7fdcf2d3bae000651fbb46339da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Conversions Between Strings and Other Types (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Conversions Between Strings and Other Types (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can convert a numeric, <ph id="ph1">`Boolean`</ph>, or date/time value to a <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also convert in the reverse direction — from a string value to numeric, <ph id="ph1">`Boolean`</ph>, or <ph id="ph2">`Date`</ph> — provided the contents of the string can be interpreted as a valid value of the destination data type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If they cannot, a run-time error occurs.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The conversions for all these assignments, in either direction, are narrowing conversions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You should use the type conversion keywords (<ph id="ph1">`CBool`</ph>, <ph id="ph2">`CByte`</ph>, <ph id="ph3">`CDate`</ph>, <ph id="ph4">`CDbl`</ph>, <ph id="ph5">`CDec`</ph>, <ph id="ph6">`CInt`</ph>, <ph id="ph7">`CLng`</ph>, <ph id="ph8">`CSByte`</ph>, <ph id="ph9">`CShort`</ph>, <ph id="ph10">`CSng`</ph>, <ph id="ph11">`CStr`</ph>, <ph id="ph12">`CUInt`</ph>, <ph id="ph13">`CULng`</ph>, <ph id="ph14">`CUShort`</ph>, and <ph id="ph15">`CType`</ph>).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Strings.Format%2A&gt;</ph> and <ph id="ph2">&lt;xref:Microsoft.VisualBasic.Conversion.Val%2A&gt;</ph> functions give you additional control over conversions between strings and numbers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you have defined a class or structure, you can define type conversion operators between <ph id="ph1">`String`</ph> and the type of your class or structure.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Define a Conversion Operator<ept id="p1">](../../../../visual-basic/programming-guide/language-features/procedures/how-to-define-a-conversion-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Conversion of Numbers to Strings</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Format`</ph> function to convert a number to a formatted string, which can include not only the appropriate digits but also formatting symbols such as a currency sign (such as <ph id="ph2">`$`</ph>), thousands separators or <bpt id="p1">*</bpt>digit grouping symbols<ept id="p1">*</ept> (such as <ph id="ph3">`,`</ph>), and a decimal separator (such as <ph id="ph4">`.`</ph>).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Format`</ph> automatically uses the appropriate symbols according to the <bpt id="p1">**</bpt>Regional Options<ept id="p1">**</ept> settings specified in the Windows <bpt id="p2">**</bpt>Control Panel<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note that the concatenation (<ph id="ph1">`&amp;`</ph>) operator can convert a number to a string implicitly, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Conversion of Strings to Numbers</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`Val`</ph> function to explicitly convert the digits in a string to a number.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Val`</ph> reads the string until it encounters a character other than a digit, space, tab, line feed, or period.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The sequences "&amp;O" and "&amp;H" alter the base of the number system and terminate the scanning.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Until it stops reading, <ph id="ph1">`Val`</ph> converts all appropriate characters to a numeric value.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, the following statement returns the value <ph id="ph1">`141.825`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> converts a string to a numeric value, it uses the <bpt id="p1">**</bpt>Regional Options<ept id="p1">**</ept> settings specified in the Windows <bpt id="p2">**</bpt>Control Panel<ept id="p2">**</ept> to interpret the thousands separator, decimal separator, and currency symbol.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This means that a conversion might succeed under one setting but not another.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`"$14.20"`</ph> is acceptable in the English (United States) locale but not in any French locale.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Conversions in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/type-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Implicit and Explicit Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/implicit-and-explicit-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Convert an Object to Another Type in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/how-to-convert-an-object-to-another-type.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Array Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/array-conversions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Types<ept id="p1">](../../../../visual-basic/language-reference/data-types/data-type-summary.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Type Conversion Functions<ept id="p1">](../../../../visual-basic/language-reference/functions/type-conversion-functions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introduction to International Applications Based on the .NET Framework<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/introduction-to-international-applications-based-on-the-dotnet-framework)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>