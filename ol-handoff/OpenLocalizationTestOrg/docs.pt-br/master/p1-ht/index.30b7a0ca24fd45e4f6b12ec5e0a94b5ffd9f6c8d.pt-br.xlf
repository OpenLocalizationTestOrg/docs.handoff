<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c42c213a3933f35750d2ad7db9c88867aacd549</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\language-reference\error-messages\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">beb22b0a373f44166081bbfe034cf7099c83f99a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c57e6fddcea97e23253aebca9f36ffdb4ec10b0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Error Messages (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Error Messages (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you write, compile, or run a Visual Basic application, the following types of errors can occur:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Design-time errors, which occur when you write an application in Visual Studio.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Compile-time errors, which occur when you compile an application in Visual Studio or at a command prompt.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Run-time errors, which occur when you run an application in Visual Studio or as a stand-alone executable file.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For information about how to troubleshoot a specific error, see <bpt id="p1">[</bpt>Additional Resources for Visual Basic Programmers<ept id="p1">](../../../visual-basic/getting-started/additional-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Run Time Errors</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a Visual Basic application tries to perform an action that the system can't execute, a run-time error occurs, and <ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> throws an <ph id="ph2">`Exception`</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> can generate custom errors of any data type, including <ph id="ph2">`Exception`</ph> objects, by using the <ph id="ph3">`Throw`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An application can identify the error by displaying the error number and message of a caught exception.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an error isn't caught, the application ends.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The code can trap and examine run-time errors.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you enclose the code that produces the error in a <ph id="ph1">`Try`</ph> block, you can catch any thrown error within a matching <ph id="ph2">`Catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For information about how to trap errors at run time and respond to them in your code, see <bpt id="p1">[</bpt>Try...Catch...Finally Statement<ept id="p1">](../../../visual-basic/language-reference/statements/try-catch-finally-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compile Time Errors</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the Visual Basic compiler encounters a problem in the code, a compile-time error occurs.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the Code Editor, you can easily identify which line of code caused the error because a wavy line appears under that line of code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The error message appears if you either point to the wavy underline or open the <bpt id="p1">**</bpt>Error List<ept id="p1">**</ept>, which also shows other messages.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If an identifier has a wavy underline and a short underline appears under the rightmost character, you can generate a stub for the class, constructor, method, property, field or enum.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Generate From Usage<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/visual-csharp-intellisense#generate-from-usage)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By resolving warnings from the Visual Basic compiler, you might be able to write code that runs faster and has fewer bugs.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>These warnings identify code that may cause errors when the application is run.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, the compiler warns you if you try to invoke a member of an unassigned object variable, return from a function without setting the return value, or execute a <ph id="ph1">`Try`</ph> block with errors in the logic to catch exceptions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about warnings, including how to turn them on and off, see <bpt id="p1">[</bpt>Configuring Warnings in Visual Basic<ept id="p1">](https://docs.microsoft.com/visualstudio/ide/configuring-warnings-in-visual-basic)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>