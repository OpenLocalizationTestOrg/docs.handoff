<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3eab50a6a785676dd397498fbe95348187e2b7e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\exceptions\creating-and-throwing-exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">154eb81cff12e705a983d3f12f061fcdb20a0fe1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6e9b71b7f778e6b9e4ddc454e036301c4af84b5e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating and Throwing Exceptions (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating and Throwing Exceptions (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Exceptions are used to indicate that an error has occurred while running the program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Exception objects that describe an error are created and then <bpt id="p1">*</bpt>thrown<ept id="p1">*</ept> with the <bpt id="p2">[</bpt>throw<ept id="p2">](../../../csharp/language-reference/keywords/throw.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The runtime then searches for the most compatible exception handler.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Programmers should throw exceptions when one or more of the following conditions are true:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The method cannot complete its defined functionality.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, if a parameter to a method has an invalid value:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#12<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/creating-and-throwing-exceptions_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An inappropriate call to an object is made, based on the object state.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>One example might be trying to write to a read-only file.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In cases where an object state does not allow an operation, throw an instance of <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> or an object based on a derivation of this class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This is an example of a method that throws an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> object:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#13<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/creating-and-throwing-exceptions_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When an argument to a method causes an exception.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case, the original exception should be caught and an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> instance should be created.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The original exception should be passed to the constructor of the <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph> as the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> parameter:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#14<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/creating-and-throwing-exceptions_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Exceptions contain a property named <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This string contains the name of the methods on the current call stack, together with the file name and line number where the exception was thrown for each method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Exception.StackTrace%2A&gt;</ph> object is created automatically by the common language runtime (CLR) from the point of the <ph id="ph2">`throw`</ph> statement, so that exceptions must be thrown from the point where the stack trace should begin.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>All exceptions contain a property named <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This string should be set to explain the reason for the exception.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that information that is sensitive to security should not be put in the message text.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> contains a property named <ph id="ph3">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> that should be set to the name of the argument that caused the exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the case of a property setter, <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> should be set to <ph id="ph2">`value`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Public and protected methods members should throw exceptions whenever they cannot complete their intended functions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The exception class that is thrown should be the most specific exception available that fits the error conditions.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These exceptions should be documented as part of the class functionality, and derived classes or updates to the original class should retain the same behavior for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Things to Avoid When Throwing Exceptions</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following list identifies practices to avoid when throwing exceptions:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Exceptions should not be used to change the flow of a program as part of ordinary execution.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Exceptions should only be used to report and handle error conditions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Exceptions should not be returned as a return value or parameter instead of being thrown.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Do not throw <ph id="ph1">&lt;xref:System.Exception?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.SystemException?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.NullReferenceException?displayProperty=fullName&gt;</ph>, or <ph id="ph4">&lt;xref:System.IndexOutOfRangeException?displayProperty=fullName&gt;</ph> intentionally from your own source code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Do not create exceptions that can be thrown in debug mode but not release mode.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To identify run-time errors during the development phase, use Debug Assert instead.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Defining Exception Classes</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Programs can throw a predefined exception class in the <ph id="ph1">&lt;xref:System&gt;</ph> namespace (except where previously noted), or create their own exception classes by deriving from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The derived classes should define at least four constructors: one default constructor, one that sets the message property, and one that sets both the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The fourth constructor is used to serialize the exception.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>New exception classes should be serializable.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#15<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/creating-and-throwing-exceptions_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>New properties should only be added to the exception class when the data they provide is useful to resolving the exception.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If new properties are added to the derived exception class, <ph id="ph1">`ToString()`</ph> should be overridden to return the added information.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exceptions and Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Hierarchy<ept id="p1">](http://msdn.microsoft.com/library/f7d68675-be06-40fb-a555-05f0c5a6f66b)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/exception-handling.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>