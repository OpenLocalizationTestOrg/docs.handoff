<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9c22ca8ee9c83e6f1808520530c6d1912d8f4f1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\exceptions\how-to-execute-cleanup-code-using-finally.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6583a90d642813b5c9a421fae6aa408b095d3e51</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">891f5bc7e2c033ba8b77529e26dafb189fd19fa0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Execute Cleanup Code Using finally (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Execute Cleanup Code Using finally (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The purpose of a <ph id="ph1">`finally`</ph> statement is to ensure that the necessary cleanup of objects, usually objects that are holding external resources, occurs immediately, even if an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>One example of such cleanup is calling <ph id="ph1">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> immediately after use instead of waiting for the object to be garbage collected by the common language runtime, as follows:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#16<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/how-to-execute-cleanup-code-using-finally_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To turn the previous code into a <ph id="ph1">`try-catch-finally`</ph> statement, the cleanup code is separated from the working code, as follows.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideExceptions#17<ept id="p2">](../../../csharp/programming-guide/exceptions/codesnippet/CSharp/how-to-execute-cleanup-code-using-finally_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Because an exception can occur at any time within the <ph id="ph1">`try`</ph> block before the <ph id="ph2">`OpenWrite()`</ph> call, or the <ph id="ph3">`OpenWrite()`</ph> call itself could fail, we are not guaranteed that the file is open when we try to close it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`finally`</ph> block adds a check to make sure that the <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> object is not <ph id="ph3">`null`</ph> before you call the <ph id="ph4">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Without the <ph id="ph1">`null`</ph> check, the <ph id="ph2">`finally`</ph> block could throw its own <ph id="ph3">&lt;xref:System.NullReferenceException&gt;</ph>, but throwing exceptions in <ph id="ph4">`finally`</ph> blocks should be avoided if it is possible.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A database connection is another good candidate for being closed in a <ph id="ph1">`finally`</ph> block.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because the number of connections allowed to a database server is sometimes limited, you should close database connections as quickly as possible.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If an exception is thrown before you can close your connection, this is another case where using the <ph id="ph1">`finally`</ph> block is better than waiting for garbage collection.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exceptions and Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Exception Handling<ept id="p1">](../../../csharp/programming-guide/exceptions/exception-handling.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>using Statement<ept id="p1">](../../../csharp/language-reference/keywords/using-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>try-catch<ept id="p1">](../../../csharp/language-reference/keywords/try-catch.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>try-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-finally.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>try-catch-finally<ept id="p1">](../../../csharp/language-reference/keywords/try-catch-finally.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>