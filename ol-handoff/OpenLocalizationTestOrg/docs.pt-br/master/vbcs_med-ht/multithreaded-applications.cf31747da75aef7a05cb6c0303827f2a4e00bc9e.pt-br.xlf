<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63692a5d62359a5f6f9f3c2d08f469c24ed9f0f3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\threading\multithreaded-applications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3789cc290532a4b5cd73bdfcd25d5b67a6548f90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27820f299cc30a8adcf72eec1d7ede3320914898</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multithreaded Applications (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multithreaded Applications (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>With C#, you can write applications that perform multiple tasks at the same time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Tasks with the potential of holding up other tasks can execute on separate threads, a process known as <bpt id="p1">*</bpt>multithreading<ept id="p1">*</ept> or <bpt id="p2">*</bpt>free threading<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Applications that use multithreading are more responsive to user input because the user interface stays active as processor-intensive tasks execute on separate threads.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Multithreading is also useful when you create scalable applications, because you can add threads as the workload increases.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating and Using Threads</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If you need more control over the behavior of your application's threads, you can manage the threads yourself.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, realize that writing correct multithreaded applications can be difficult: Your application may stop responding or experience transient errors caused by race conditions.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread-Safe Components<ept id="p1">](http://msdn.microsoft.com/library/4f7c7377-a782-4bd0-aaa3-9db8c12945ee)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You create a new thread by declaring a variable of type <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> and calling the constructor, providing the name of the procedure or method that you want to execute on the new thread.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code provides an example.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Starting and Stopping Threads</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To start the execution of a new thread, use the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To stop the execution of a thread, use the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Besides starting and stopping threads, you can also pause threads by calling the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> method, resume a suspended thread by using the <ph id="ph3">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph> method, and destroy a thread by using the <ph id="ph4">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Thread Methods</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following table shows some of the methods that you can use to control individual threads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Action</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Causes a thread to start to run.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Pauses a thread for a specified time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Pauses a thread when it reaches a safe point.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Stops a thread when it reaches a safe point.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Restarts a suspended thread</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Causes the current thread to wait for another thread to finish.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If used with a time-out value, this method returns <ph id="ph1">`True`</ph> if the thread finishes in the allocated time.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Safe Points</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Most of these methods are self-explanatory, but the concept of <bpt id="p1">*</bpt>safe points<ept id="p1">*</ept> may be new to you.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Safe points are locations in code where it is safe for the common language runtime to perform automatic <bpt id="p1">*</bpt>garbage collection<ept id="p1">*</ept>, the process of releasing unused variables and reclaiming memory.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When you call the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> method of a thread, the common language runtime analyzes the code and determines the location of an appropriate location for the thread to stop running.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Thread Properties</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Threads also contain several useful properties, as shown in the following table:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Contains the value <ph id="ph1">`True`</ph> if a thread is active.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Gets or sets a Boolean that indicates if a thread is or should be a background thread.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Background threads are like foreground threads, but a background thread does not prevent a process from stopping.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Once all foreground threads that belong to a process have stopped, the common language runtime ends the process by calling the <ph id="ph1">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> method on background threads that are still alive.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of a thread.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Most frequently used to discover individual threads when you debug.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that is used by the operating system to prioritize thread scheduling.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Contains a value that describes a thread's state or states.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Thread Priorities</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Every thread has a priority property that determines how big or small a slice of processor time it has to execute.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The operating system allocates longer time slices to high-priority threads and shorter time slices to low-priority threads.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>New threads are created with the value of <ph id="ph1">`Normal`</ph>, but you can change the <ph id="ph2">&lt;xref:System.Threading.Thread.Priority%2A&gt;</ph> property to any value in the <ph id="ph3">&lt;xref:System.Threading.ThreadPriority&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Threading.ThreadPriority&gt;</ph> for a detailed description of the various thread priorities.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Foreground and Background Threads</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>foreground thread<ept id="p1">*</ept> runs indefinitely, whereas a <bpt id="p2">*</bpt>background thread<ept id="p2">*</ept> stops as soon as the last foreground thread has stopped.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> property to determine or change the background status of a thread.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Synchronization (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/thread-synchronization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Parameters and Return Values for Multithreaded Procedures (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Threading (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/threading/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>