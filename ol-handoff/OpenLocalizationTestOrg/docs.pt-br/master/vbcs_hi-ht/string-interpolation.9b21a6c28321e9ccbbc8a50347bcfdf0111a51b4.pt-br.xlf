<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5115b5affc122e4f46059297746dc3c0e8a9527</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\tutorials\string-interpolation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_hi-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fcc36437a112f8eb14a84c6da4654ba8b162f4b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c204268b81f0104850142c70650375c305b48f45</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String Interpolation | C#</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Learn how string interpolation works in C# 6</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>.NET, .NET Core, C#, string</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>String Interpolation in C#</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>String Interpolation is the way that placeholders in a string are replaced by the value of a string variable.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Before C# 6, the way to do this is with <ph id="ph1">`System.String.Format`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This works okay, but since it uses numbered placeholders, it can be harder to read and more verbose.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Other programming languages have had string interpolation built into the language for a while.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For instance, in PHP:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In C# 6, we finally have that style of string interpolation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use a <ph id="ph1">`$`</ph> before a string to indicate that it should substitute variables/expressions for their values.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You’ll need to set up your machine to run .NET core.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can find the installation instructions on the <bpt id="p1">[</bpt>.NET Core<ept id="p1">](https://www.microsoft.com/net/core)</ept> page.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can run this application on Windows, Ubuntu Linux, macOS or in a Docker container.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You’ll need to install your favorite code editor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The descriptions below use <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com/)</ept> which is an open source, cross platform editor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, you can use whatever tools you are comfortable with.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create the Application</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Now that you've installed all the tools, create a new .NET Core application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To use the command line generator, create a directory for your project, such as <ph id="ph1">`interpolated`</ph>, and execute the following command in your favorite shell:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This command will create a barebones .NET core project with a project file, <bpt id="p1">*</bpt>interpolated.csproj<ept id="p1">*</ept>, and a source code file, <bpt id="p2">*</bpt>Program.cs<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You will need to execute <ph id="ph1">`dotnet restore`</ph> to restore the dependencies needed to compile this project.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To execute the program, use <ph id="ph1">`dotnet run`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You should see "Hello, World" output to the console.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Intro to String Interpolation</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>With <ph id="ph1">`System.String.Format`</ph>, you specify "placeholders" in a string that are replaced by the parameters following the string.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For instance:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>String.Format example<ept id="p2">](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#StringFormatExample)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>That will output "My name is Matt Groves".</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In C# 6, instead of using <ph id="ph1">`String.Format`</ph>, you define an interpolated string by prepending it with the <ph id="ph2">`$`</ph> symbol, and then using the variables directly in the string.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For instance:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Interpolation example<ept id="p2">](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationExample)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You don't have to use just variables.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can use any expression within the brackets.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For instance:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Interpolation expression example<ept id="p2">](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationExpressionExample)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Which would output:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>How string interpolation works</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Behind the scenes, this string interpolation syntax is translated into String.Format by the compiler.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>So, you can do the <bpt id="p1">[</bpt>same type of stuff you've done before with String.Format<ept id="p1">](https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For instance, you can add padding and numeric formatting:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Interpolation formatting example<ept id="p2">](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationFormattingExample)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The above would output something like:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If a variable name is not found, then a compile time error will be generated.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For instance:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you compile this, you'll get errors:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Cannot use local variable 'adj' before it is declared`</ph> - the <ph id="ph2">`adj`</ph> variable wasn't declared until <bpt id="p1">*</bpt>after<ept id="p1">*</ept> the interpolated string.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`The name 'otheranimal' does not exist in the current context`</ph> - a variable called <ph id="ph2">`otheranimal`</ph> was never even declared</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Localization and Internationalization</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>An interpolated string supports <ph id="ph1">`IFormattable`</ph> and <ph id="ph2">`FormattableString`</ph>, which can be useful for internationalization.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>By default, an interpolated string uses the current culture.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>To use a different culture, you could cast it as <ph id="ph1">`IFormattable`</ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For instance:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Interpolation internationalization example<ept id="p2">](../../../samples/snippets/csharp/new-in-6/string-interpolation.cs#InterpolationInternationalizationExample)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In this tutorial, you learned how to use string interpolation features of C# 6.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It's basically a more concise way of writing simple <ph id="ph1">`String.Format`</ph> statements, with some caveats for more advanced uses of it.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>