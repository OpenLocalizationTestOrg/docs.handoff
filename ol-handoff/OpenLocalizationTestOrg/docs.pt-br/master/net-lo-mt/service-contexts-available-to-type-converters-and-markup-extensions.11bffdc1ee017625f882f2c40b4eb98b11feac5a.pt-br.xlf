<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="service-contexts-available-to-type-converters-and-markup-extensions.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59712ae16589457364ee44ccea431186b45e37aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\service-contexts-available-to-type-converters-and-markup-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26a30b71ac032db8c03cecb43bf59f9bf30efb6e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db5d40c84f356520b86a6deda67956c769953fb1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Service Contexts Available to Type Converters and Markup Extensions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Service Contexts Available to Type Converters and Markup Extensions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Authors of the types that support type converter and markup extension usages must often have contextual information about where a usage is located in the markup, or in surrounding object graph structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Information might be needed so that the provided object is instantiated correctly or so that object references to existing objects in the object graph can be made.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When using .NET Framework XAML Services, the context that might be required is exposed as a series of service interfaces.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type converter or markup extension support code can query for a service by using a service provider context that is available and passed through from <ph id="ph1">&lt;xref:System.Xaml.XamlObjectWriter&gt;</ph> or related types.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The XAML schema context is directly available through one such service.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic describes how to access service contexts from a value converter implementation, and lists typically available services and their roles.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Obtaining Services</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>As an implementer of a value converter, you often need access to some type of context in which the value converter is applied.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This context might include information such as the active XAML schema context, access to the type mapping system that the XAML schema context and XAML object writer provide, and so on.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The services available for a markup extension or type converter implementation are communicated through the context parameters that are part of the signature of each virtual method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In every case, you have <ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph> implemented in the context, and can call <ph id="ph2">&lt;xref:System.IServiceProvider.GetService%2A?displayProperty=fullName&gt;</ph> to request a service.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Services for a Markup Extension</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension&gt;</ph> has only one virtual method, <ph id="ph2">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The input <ph id="ph1">`serviceProvider`</ph> parameter is how the services are communicated to implementations when the markup extension is called by a XAML processor.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following pseudocode illustrates how a markup extension implementation might query for services in its <ph id="ph1">&lt;xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Services for a Type Converter</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> has four virtual methods that use a service context and that support XAML usages.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each of these methods passes an input <ph id="ph1">`context`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This parameter is of type <ph id="ph1">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph>, but that interface inherits <ph id="ph2">&lt;xref:System.IServiceProvider&gt;</ph>, and therefore, there is a <ph id="ph3">&lt;xref:System.IServiceProvider.GetService%2A&gt;</ph> method available to type converter implementations.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following pseudocode illustrates how a type converter implementation for XAML usages might query for services in one of its overrides, in this case <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter.ConvertFrom%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Services for a Value Serializer</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For value serializer context, you use a service provider type that is specific to the <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> class, <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That context is passed to overrides of the four <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> virtual methods.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">&lt;xref:System.IServiceProvider.GetService%2A&gt;</ph> from the context to obtain services.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Using the XAML Service Provider Contexts</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The service provider for <ph id="ph1">&lt;xref:System.IServiceProvider.GetService%2A&gt;</ph> access to XAML services available to markup extensions or type converters is implemented as an internal class, with exposure only through the interface and how it is passed into the relevant context .</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Whenever a XAML processing operation in the default .NET Framework XAML Services implementations of load path or save path invokes the relevant markup extension or type converter methods that require a service context, this internal object is passed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Depending on the circumstance, the system service context provides either <ph id="ph1">`MarkupExtensionContext`</ph> or <ph id="ph2">`TextSyntaxContext`</ph>, but the specifics of both of these classes are internal.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Your interaction with these classes is limited to requesting services from them, through <ph id="ph1">&lt;xref:System.IServiceProvider.GetService%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Available Services from the .NET Framework XAML Service Context</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>.NET Framework XAML Services defines services for markup extensions, type converters, value serializers, and potentially other usages.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following sections describe each of these services and provide guidance about how the service might be used in an implementation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>IServiceProvider</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Basic operation of a service-based infrastructure in the .NET Framework so that you can call <ph id="ph1">&lt;xref:System.IServiceProvider.GetService%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>ITypeDescriptorContext</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Derives from <ph id="ph1">&lt;xref:System.IServiceProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This class represents context in the standard <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> signatures; <ph id="ph2">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> is a class that has existed since .NET Framework 1.0.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It predates XAML and the XAML <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> scenario for string-value type conversion.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the .NET Framework XAML Services context, methods of <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> are implemented explicitly.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The explicit implementation's behavior indicates to callers that the <ph id="ph1">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph> API is not relevant for XAML type systems, or for reading or writing objects from XAML.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.ITypeDescriptorContext.Container%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.ComponentModel.ITypeDescriptorContext.Instance%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor%2A&gt;</ph> generally return <ph id="ph4">`null`</ph> from .NET Framework XAML Services contexts.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>IValueSerializerContext</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Derives from <ph id="ph1">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph> and also relies on explicit implementations to suppress false implications about the XAML type system.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Supports the static lookup helper methods on <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>IXamlTypeResolver</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path scenarios, and interaction with XAML schema context</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service API:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.IXamlTypeResolver.Resolve%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Can influence the XAML-to-CLR type mapping that is necessary when the XAML writer constructs a CLR object in an object graph.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IXamlTypeResolver.Resolve%2A&gt;</ph> processes a potentially prefix-qualified string that corresponds to a XAML type name (<ph id="ph2">&lt;xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName&gt;</ph>), and returns a CLR <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Resolving types is typically heavily dependent on XAML schema context.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Only the XAML schema context is aware of considerations such as which assemblies are loaded, and which of these assemblies can or should be accessed for type resolution.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>IUriContext</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Markup.IUriContext&gt;</ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path and save path handling of member values that are URIs or <ph id="ph1">`x:Uri`</ph> values.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service API:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.IUriContext.BaseUri%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This service reports a globally available URI root, if any.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The URI root can be used to resolve relative URIs to absolute URIs or vice versa.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This scenario is mainly relevant to application services that are exposed by a particular framework, or capabilities of a frequently used root element class in a framework.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The base URI can be established as a XAML reader setting, which is then passed through to the XAML object writer and reported by this service.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>IAmbientProvider</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider&gt;</ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path handling and type lookup deferrals or optimizations.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service APIs:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A&gt;</ph>, 3 others.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The ambience concept in XAML is a technique for marking a particular member of a type as ambient.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Alternatively, a type can be ambient so that all property values that hold an instance of the type should be considered ambient properties.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Markup extensions or type converters that are further along the XAML node stream and that are descendants in the object graph can access the ambient property or type instance at load time; or they can use knowledge of the ambient structure at save time.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This can affect the degree of qualification that is needed to resolve types for other services, such as for <ph id="ph1">&lt;xref:System.Windows.Markup.IXamlTypeResolver&gt;</ph> or for <ph id="ph2">`x:Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See also <ph id="ph1">&lt;xref:System.Xaml.AmbientPropertyValue&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>IXamlSchemaContextProvider</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Xaml.IXamlSchemaContextProvider&gt;</ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path, and any operation that must resolve a XAML type to a backing type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service API:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml.IXamlSchemaContextProvider.SchemaContext%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>XAML schema context is necessary for any defer load operations, because the same schema context must act on the deferred area in order to integrate the deferred content.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information about the role of the XAML schema context, see <bpt id="p1">[</bpt>XAML Services<ept id="p1">](../../../docs/framework/xaml-services/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>IRootObjectProvider</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Xaml.IRootObjectProvider&gt;</ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service API:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml.IRootObjectProvider.RootObject%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The service is relevant to application services that are exposed by a particular framework or by capabilities of a frequently used root element class in a framework.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>One scenario for obtaining the root object is connecting code-behind and event wiring.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example, the WPF implementation of <ph id="ph1">`x:Class`</ph> is used for markup compile and wiring of any event handler attribute that is found at any other position in the XAML markup.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The connection point of markup and code-behind defined partial classes for markup compile is at the root element.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>IXamlNamespaceResolver</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Xaml.IXamlNamespaceResolver&gt;</ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path, save path.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service API:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Xaml.IXamlNamespaceResolver.GetNamespace%2A&gt;</ph> for load path, <ph id="ph2">&lt;xref:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes%2A&gt;</ph> for save path.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xaml.IXamlNamespaceResolver&gt;</ph> is a service that can return a XAML namespace identifier / URI based on its prefix as mapped in the originating XAML markup.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>IProvideValueTarget</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path and save path.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service APIs:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget&gt;</ph> enables a type converter or markup extension to obtain context about where it is acting at load time.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Implementations might use this context to invalidate a usage.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For example, WPF has logic inside some of its markup extensions such as <ph id="ph1">&lt;xref:System.Windows.DynamicResourceExtension&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The logic checks the <ph id="ph1">&lt;xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A&gt;</ph> to make sure that the extension is only used to set dependency properties (or a short list of other non-dependency properties).</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>IXamlNameResolver</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Xaml.IXamlNameResolver&gt;</ph></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path object graph definition, resolving objects identified by <ph id="ph1">`x:Name`</ph>, <ph id="ph2">`x:Reference`</ph>, or framework-specific techniques.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service APIs:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml.IXamlNameResolver.Resolve%2A&gt;</ph>; other APIs for more advanced scenarios such as dealing with forward references.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The .NET Framework XAML Services implementation of <ph id="ph1">`x:Reference`</ph> handling relies on this service.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Specific frameworks or tools that support the framework use this service for <ph id="ph1">`x:Name`</ph> handling or equivalent (<ph id="ph2">&lt;xref:System.Windows.Markup.RuntimeNamePropertyAttribute&gt;</ph> attributed) property handling.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>IDestinationTypeProvider</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference documentation<ept id="p1">**</ept>: <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider&gt;</ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Defined by:<ept id="p1">**</ept>  <ph id="ph1">&lt;xref:System.Xaml&gt;</ph> namespace, System.Xaml assembly</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relevant to:<ept id="p1">**</ept> Load path resolution of indirect CLR type information.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service API:<ept id="p1">**</ept> <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Xaml.IDestinationTypeProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Markup Extensions for XAML Overview<ept id="p1">](../../../docs/framework/xaml-services/markup-extensions-for-xaml-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type Converters for XAML Overview<ept id="p1">](../../../docs/framework/xaml-services/type-converters-for-xaml-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>