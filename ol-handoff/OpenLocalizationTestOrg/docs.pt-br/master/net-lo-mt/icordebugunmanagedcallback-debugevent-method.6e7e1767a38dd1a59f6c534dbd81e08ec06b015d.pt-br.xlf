<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a2f99a4e0f8f0a64eee1b1620f403c475bf0a31</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\unmanaged-api\debugging\icordebugunmanagedcallback-debugevent-method.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">516b0c71a4e73b174aecb242f5fef2d932fc003d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bfcf7bc5b503c96835976fc7df4da5e788829a4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ICorDebugUnmanagedCallback::DebugEvent Method | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ICorDebugUnmanagedCallback::DebugEvent Method</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Notifies the debugger that a native event has been fired.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>[in] A pointer to the native event.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in] <ph id="ph1">`true`</ph>, if interaction with the managed process state is impossible after an unmanaged event occurs, until the debugger calls <bpt id="p1">[</bpt>ICorDebugController::Continue<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugcontroller-continue-method.md)</ept>; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the thread being debugged is a Win32 thread, do not use any members of the Win32 debugging interface.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`ICorDebugController::Continue`</ph> only on a Win32 thread and only when continuing past an out-of-band event.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DebugEvent`</ph> callback does not follow the standard rules for callbacks.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When you call <ph id="ph1">`DebugEvent`</ph>, the process will be in the raw, OS-debug stopped state.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The process will not be synchronized.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It will automatically enter the synchronized state when necessary to satisfy requests for information about managed code, which may result in other nested <ph id="ph1">`DebugEvent`</ph> callbacks.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>ICorDebugProcess::ClearCurrentException<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess-clearcurrentexception-method.md)</ept> on the process to ignore an exception event before continuing the process.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Calling this method sends DBG_CONTINUE instead of DBG_EXCEPTION_NOT_HANDLED on the continue request, and automatically clears out-of-band breakpoints and single-step exceptions.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Out-of-band events can come at any time, even when the application being debugged appears stopped and when an outstanding in-band event already exists.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the .NET Framework version 2.0, the debugger should immediately continue past an out-of-band breakpoint event.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The debugger should be using the <bpt id="p1">[</bpt>ICorDebugProcess2::SetUnmanagedBreakpoint<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess2-setunmanagedbreakpoint-method.md)</ept> and <bpt id="p2">[</bpt>ICorDebugProcess2::ClearUnmanagedBreakpoint<ept id="p2">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess2-clearunmanagedbreakpoint-method.md)</ept> methods to add and remove breakpoints.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>These methods will skip over any out-of-band breakpoints automatically.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Thus, the only out-of-band breakpoints that get dispatched should be raw breakpoints that are already in the instruction stream, such as a call to the Win32 <ph id="ph1">`DebugBreak`</ph> function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Do not try to use <ph id="ph1">`ICorDebugProcess::ClearCurrentException`</ph>, <bpt id="p1">[</bpt>ICorDebugProcess::GetThreadContext<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess-getthreadcontext-method.md)</ept>, <bpt id="p2">[</bpt>ICorDebugProcess::SetThreadContext<ept id="p2">](../../../../docs/framework/unmanaged-api/debugging/icordebugprocess-setthreadcontext-method.md)</ept>, or any other member of the <bpt id="p3">[</bpt>debugging API<ept id="p3">](../../../../docs/framework/unmanaged-api/debugging/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Platforms:<ept id="p1">**</ept> See <bpt id="p2">[</bpt>System Requirements<ept id="p2">](../../../../docs/framework/get-started/system-requirements.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> CorDebug.idl, CorDebug.h</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Library:<ept id="p1">**</ept> CorGuids.lib</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Framework Versions:<ept id="p1">**</ept> <ph id="ph1">[!INCLUDE[net_current_v10plus](../../../../includes/net-current-v10plus-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ICorDebugUnmanagedCallback Interface<ept id="p1">](../../../../docs/framework/unmanaged-api/debugging/icordebugunmanagedcallback-interface.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>