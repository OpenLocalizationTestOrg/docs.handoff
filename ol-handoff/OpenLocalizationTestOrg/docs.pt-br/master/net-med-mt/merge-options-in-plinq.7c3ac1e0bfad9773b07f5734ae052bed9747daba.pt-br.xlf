<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="merge-options-in-plinq.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d87481baa1f75f9ba7176d1c3deb3c4d6e966973</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\merge-options-in-plinq.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b567d54a53d466c402ac1b35671a895a4693d5c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5252ead129df08a94d22b340ac56d5b5bc187daa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Merge Options in PLINQ | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Merge Options in PLINQ</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When a query is executing as parallel, PLINQ partitions the source sequence so that multiple threads can work on different parts concurrently, typically on separate threads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If the results are to be consumed on one thread, for example, in a <ph id="ph1">`foreach`</ph> (<ph id="ph2">`For Each`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) loop, then the results from every thread must be merged back into one sequence.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The kind of merge that PLINQ performs depends on the operators that are present in the query.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, operators that impose a new order on the results must buffer all elements from all threads.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>From the perspective of the consuming thread (which is also that of the application user) a fully buffered query might run for a noticeable period of time before it produces its first result.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Other operators, by default, are partially buffered; they yield their results in batches.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One operator, <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.ForAll%2A&gt;</ph> is not buffered by default.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It yields all elements from all threads immediately.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By using the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.WithMergeOptions%2A&gt;</ph> method, as shown in the following example, you can provide a hint to PLINQ that indicates what kind of merging to perform.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>PLINQ#26<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/plinq/cs/plinqsamples.cs#26)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>PLINQ#26<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/plinq/vb/plinq2_vb.vb#26)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For the complete example, see <bpt id="p1">[</bpt>How to: Specify Merge Options in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/how-to-specify-merge-options-in-plinq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the particular query cannot support the requested option, then the option will just be ignored.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In most cases, you do not have to specify a merge option for a PLINQ query.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, in some cases you may find by testing and measurement that a query executes best in a non-default mode.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A common use of this option is to force a chunk-merging operator to stream its results in order to provide a more responsive user interface.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>ParallelMergeOptions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph> enumeration includes the following options that specify, for supported query shapes, how the final output of the query is yielded when the results are consumed on one thread:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph> option causes each processed element to be returned from each thread as soon as it is produced.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This behavior is analogous to "streaming" the output.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsOrdered%2A&gt;</ph> operator is present in the query, <ph id="ph2">`NotBuffered`</ph> preserves the order of the source elements.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">`NotBuffered`</ph> starts yielding results as soon as they're available,, the total time to produce all the results might still be longer than using one of the other merge options.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph> option causes the query to collect elements into a buffer and then periodically yield the buffer contents all at once to the consuming thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is analogous to yielding the source data in "chunks" instead of using the "streaming" behavior of <ph id="ph1">`NotBuffered`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AutoBuffered`</ph> may take longer than <ph id="ph2">`NotBuffered`</ph> to make the first element available on the consuming thread.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The size of the buffer and the exact yielding behavior are not configurable and may vary, depending on various factors that relate to the query.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph> option causes the output of the whole query to be buffered before any of the elements are yielded.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you use this option, it can take longer before the first element is available on the consuming thread, but the complete results might still be produced faster than by using the other options.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Query Operators that Support Merge Options</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following table lists the operators that support all merge option modes, subject to the specified restrictions.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Restrictions</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Non-ordered queries that have an Array or List source only.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Non-ordered queries that have an Array or List source only.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All other PLINQ query operators might ignore user-provided merge options.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Some query operators, for example, <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.Reverse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Linq.ParallelEnumerable.OrderBy%2A&gt;</ph>, cannot yield any elements until all have been produced and reordered.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, when <ph id="ph1">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph> is used in a query that also contains an operator such as <ph id="ph2">&lt;xref:System.Linq.ParallelEnumerable.Reverse%2A&gt;</ph>, the merge behavior will not be applied in the query until after that operator has produced its results.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The ability of some operators to handle merge options depends on the type of the source sequence, and whether the <ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.AsOrdered%2A&gt;</ph> operator was used earlier in the query.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.ForAll%2A&gt;</ph> is always <ph id="ph2">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph> ; it yields its elements immediately.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Linq.ParallelEnumerable.OrderBy%2A&gt;</ph> is always <ph id="ph2">&lt;xref:System.Linq.ParallelMergeOptions&gt;</ph>; it must sort the whole list before it yields.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel LINQ (PLINQ)<ept id="p1">](../../../docs/standard/parallel-programming/parallel-linq-plinq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Specify Merge Options in PLINQ<ept id="p1">](../../../docs/standard/parallel-programming/how-to-specify-merge-options-in-plinq.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>