<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4843797111d97bfc445c85c862bdfc9548c2eb7e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\types-supported-by-the-data-contract-serializer.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93650fcf57a83bf751a078fabaa10919ec22b475</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2825bc414cbc21d40ef5dae3c48f2c8baae84b42</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Types Supported by the Data Contract Serializer | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Types Supported by the Data Contract Serializer</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> uses the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> as its default serialization engine to convert data into XML and to convert XML back into data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is designed to serialize <bpt id="p1">*</bpt>data contract<ept id="p1">*</ept> types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, it supports many other types, which can be thought of as having an implicit data contract.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following is a complete list of types that can be serialized:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>All publicly visible types that have a constructor that does not have parameters.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Data contract types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These are types to which the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute has been applied.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>New custom types that represent business objects should normally be created as data contract types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-data-contracts.md)</ept> and <bpt id="p2">[</bpt>Serializable Types<ept id="p2">](../../../../docs/framework/wcf/feature-details/serializable-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Collection types.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These are types that represent lists of data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These can be regular arrays of types, or collection types, such as <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.CollectionDataContractAttribute&gt;</ph> attribute can be used to customize the serialization of these types, but is not required.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Collection Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/collection-types-in-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Enumeration types.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Enumerations, including flag enumerations, are serializable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Optionally, enumeration types can be marked with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute, in which case every member that participates in serialization must be marked with the <ph id="ph2">&lt;xref:System.Runtime.Serialization.EnumMemberAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Members that are not marked are not serialized.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Enumeration Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/enumeration-types-in-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>.NET Framework primitive types.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following types built into the .NET Framework can all be serialized and are considered to be primitive types: <ph id="ph1">&lt;xref:System.Byte&gt;</ph>, <ph id="ph2">&lt;xref:System.SByte&gt;</ph>, <ph id="ph3">&lt;xref:System.Int16&gt;</ph>, <ph id="ph4">&lt;xref:System.Int32&gt;</ph>, <ph id="ph5">&lt;xref:System.Int64&gt;</ph>, <ph id="ph6">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph8">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.Double&gt;</ph>, <ph id="ph11">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph12">&lt;xref:System.Char&gt;</ph>, <ph id="ph13">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph14">&lt;xref:System.Object&gt;</ph>, and <ph id="ph15">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Other primitive types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These types are not primitives in the .NET Framework but are treated as primitives in the serialized XML form.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These types are <ph id="ph1">&lt;xref:System.DateTime&gt;</ph>, <ph id="ph2">&lt;xref:System.DateTimeOffset&gt;</ph>, <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph>, <ph id="ph4">&lt;xref:System.Guid&gt;</ph>, <ph id="ph5">&lt;xref:System.Uri&gt;</ph>, <ph id="ph6">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph>, and arrays of <ph id="ph7">&lt;xref:System.Byte&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Unlike other primitive types, <ph id="ph1">&lt;xref:System.DateTimeOffset&gt;</ph> is not a known type by default.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Types marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Many types included in the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> base class library fall into this category.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> fully supports this serialization programming model that was used by .NET Framework remoting, the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>, and the <ph id="ph3">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph>, including support for the <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Types that represent raw XML or types that represent <ph id="ph1">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph> relational data.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph> and array of <ph id="ph2">&lt;xref:System.Xml.XmlNode&gt;</ph> types are supported as a way of representing XML directly.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Additionally, types that implement the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface are supported, including the related <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSchemaProviderAttribute&gt;</ph> attribute, and the <ph id="ph3">&lt;xref:System.Xml.Linq.XDocument&gt;</ph> and <ph id="ph4">&lt;xref:System.Xml.Linq.XElement&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[vstecado](../../../../includes/vstecado-md.md)]</ph><ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> type and the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> type (as well as its typed derived classes) all implement the <ph id="ph4">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface, and therefore fit into this category.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>XML and ADO.NET Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/xml-and-ado-net-types-in-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Limitations of Using Certain Types in Partial Trust Mode</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following is a list of limitations when using certain types in partial trust mode scenarios:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To serialize or deserialize a type that implements <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> in partially-trusted code using the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> requires the <ph id="ph3">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A&gt;</ph> permissions.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When running <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> code in <bpt id="p1">[</bpt>Partial Trust<ept id="p1">](../../../../docs/framework/wcf/feature-details/partial-trust.md)</ept> mode, the serialization and deserialization of <ph id="ph2">`readonly`</ph> fields (both <ph id="ph3">`public`</ph> and <ph id="ph4">`private`</ph>) is not supported.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is because the generated IL is unverifiable and therefore requires elevated permissions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> are supported in a partial trust environment.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, use of the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is subject to the following conditions:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>All serializable <ph id="ph1">`[DataContract]`</ph> types must be public.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>All serializable <ph id="ph1">`[DataMember]`</ph> fields or properties in a <ph id="ph2">`[DataContract]`</ph> type must be public and read/write.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The serialization and deserialization of <ph id="ph1">`readonly`</ph> fields is not supported when running <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> in a partially-trusted application.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Serializable]`</ph><ph id="ph2">/</ph><ph id="ph3">`ISerializable]`</ph> programming model is not supported in a partial trust environment.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Known types must be specified in code or machine-level configuration (<ph id="ph1">`Machine.config`</ph>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Known types cannot be specified in application-level configuration for security reasons.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Types that implement <ph id="ph1">&lt;xref:System.Runtime.Serialization.IObjectReference&gt;</ph> throw an exception in a partially-trusted environment because the <ph id="ph2">&lt;xref:System.Runtime.Serialization.IObjectReference.GetRealObject%2A&gt;</ph> method requires the security permission <ph id="ph3">`[SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.SerializationFormatter)]`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Additional Notes on Serialization</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following rules also apply to types supported by the Data Contract Serializer:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Generic types are fully supported by the data contract serializer.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Nullable types are fully supported by the data contract serializer.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Interface types are treated either as <ph id="ph1">&lt;xref:System.Object&gt;</ph> or, in the case of collection interfaces, as collection types.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Both structures and classes are supported.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> does not support the programming model used by the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> and <ph id="ph3">[!INCLUDE[vstecasp](../../../../includes/vstecasp-md.md)]</ph> Web services.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In particular, it does not support attributes like <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlElementAttribute&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlAttributeAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To enable support for this programming model, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> must be switched to use the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> instead of the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.DBNull&gt;</ph> type is treated in a special way.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>It is a singleton type, and upon deserialization the deserializer respects the singleton constraint and points all <ph id="ph1">`DBNull`</ph> references to the singleton instance.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`DBNull`</ph> is a serializable type, it demands <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter%2A&gt;</ph> permission.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML and ADO.NET Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/xml-and-ado-net-types-in-data-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-data-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Serializable Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/serializable-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Collection Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/collection-types-in-data-contracts.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Enumeration Types in Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/enumeration-types-in-data-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>