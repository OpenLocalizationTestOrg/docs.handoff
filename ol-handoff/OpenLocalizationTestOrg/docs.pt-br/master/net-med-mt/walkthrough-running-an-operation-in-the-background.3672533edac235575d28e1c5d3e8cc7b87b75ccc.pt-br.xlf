<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e566b7ce3a9bf74f450192e2dd0f956a44be2c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\walkthrough-running-an-operation-in-the-background.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aec6e8e7b30ea341cba04a4d668a040ba7a28eb1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55f2fdd39cecf168fdbaa4ca56ee21b6b1e566c8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Running an Operation in the Background | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Running an Operation in the Background</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you have an operation that will take a long time to complete, and you do not want to cause delays in your user interface, you can use the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class to run the operation on another thread.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For a complete listing of the code used in this example, see <bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The dialog boxes and menu commands you see might differ from those described in Help depending on your active settings or edition.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To change your settings, choose <bpt id="p1">**</bpt>Import and Export Settings<ept id="p1">**</ept> on the <bpt id="p2">**</bpt>Tools<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Customizing Development Settings in Visual Studio<ept id="p1">](http://msdn.microsoft.com/en-us/22c4debb-4e31-47a8-8f19-16f328d7dcd3)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To run an operation in the background</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>With your form active in the Windows Forms Designer, drag two <ph id="ph1">&lt;xref:System.Windows.Forms.Button&gt;</ph> controls from the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept> to the form, and then set the <ph id="ph2">`Name`</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.Control.Text%2A&gt;</ph> properties of the buttons according to the following table.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Button</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Text</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Start<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Toolbox<ept id="p1">**</ept>, click the <bpt id="p2">**</bpt>Components<ept id="p2">**</ept> tab, and then drag the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component onto your form.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`backgroundWorker1`</ph> component appears in the <bpt id="p1">**</bpt>Component Tray<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, set the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> window, click on the <bpt id="p2">**</bpt>Events<ept id="p2">**</ept> button, and then double-click the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> and <ph id="ph2">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> events to create event handlers.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Insert your time-consuming code into the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.DoWork&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Extract any parameters required by the operation from the <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Argument%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Assign the result of the computation to the <ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs.Result%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This is will be available to the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker.Example#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#2)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker.Example#2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Insert code for retrieving the result of your operation in the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker.Example#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#3)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker.Example#3<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">`TimeConsumingOperation`</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker.Example#4<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#4)</ept><ept id="p1">]</ept>   <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker.Example#4<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the Windows Forms Designer, double-click <ph id="ph1">`startButton`</ph> to create the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A&gt;</ph> method in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler for <ph id="ph3">`startButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker.Example#5<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker.Example#5<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the Windows Forms Designer, double-click <ph id="ph1">`cancelButton`</ph> to create the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A&gt;</ph> method in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> event handler for <ph id="ph3">`cancelButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker.Example#6<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker.Example#6<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>At the top of the file, import the System.ComponentModel and System.Threading namespaces.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ComponentModel.BackgroundWorker.Example#7<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/CS/Form1.cs#7)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ComponentModel.BackgroundWorker.Example#7<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.Example/VB/Form1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Press F6 to build the solution, and then press CTRL-F5 to run the application outside the debugger.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you press F5 to run the application under the debugger, the exception raised in the <ph id="ph1">`TimeConsumingOperation`</ph> method is caught and displayed by the debugger.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you run the application outside the debugger, the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> handles the exception and caches it in the <ph id="ph2">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ComponentModel.RunWorkerCompletedEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> button to run an asynchronous operation, and then click the <bpt id="p2">**</bpt>Cancel<ept id="p2">**</ept> button to stop a running asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The outcome of each operation is displayed in a <ph id="ph1">&lt;xref:System.Windows.Forms.MessageBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Implement a form that reports progress as an asynchronous operation proceeds.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-implement-a-form-that-uses-a-background-operation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Implement a class that supports the Asynchronous Pattern for Components.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../../docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.DoWorkEventArgs&gt;</ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-implement-a-form-that-uses-a-background-operation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>BackgroundWorker Component<ept id="p1">](../../../../docs/framework/winforms/controls/backgroundworker-component.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>