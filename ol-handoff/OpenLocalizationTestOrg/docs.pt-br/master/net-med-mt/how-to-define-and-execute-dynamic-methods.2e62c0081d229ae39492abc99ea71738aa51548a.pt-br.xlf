<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-define-and-execute-dynamic-methods.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8126900918edb0c4cd701b4e613fbe735106dcb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\reflection-and-codedom\how-to-define-and-execute-dynamic-methods.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f33fffc5f29288f0fb100ecd0f7e84fca868501</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c7fe053ae7527c2de3829bf59c5896766aec2a8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Define and Execute Dynamic Methods | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Define and Execute Dynamic Methods</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following procedures show how to define and execute a simple dynamic method and a dynamic method bound to an instance of a class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information on dynamic methods, see the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class and <bpt id="p1">[</bpt>Reflection Emit Dynamic Method Scenarios<ept id="p1">](http://msdn.microsoft.com/en-us/7c27ea3d-0f24-4bf3-8ceb-f49d33faca5e)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To define and execute a dynamic method</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Declare a delegate type to execute the method.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Consider using a generic delegate to minimize the number of delegate types you need to declare.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following code declares two delegate types that could be used for the <ph id="ph1">`SquareIt`</ph> method, and one of them is generic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create an array that specifies the parameter types for the dynamic method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this example, the only parameter is an <ph id="ph1">`int`</ph> (<ph id="ph2">`Integer`</ph> in Visual Basic), so the array has only one element.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this example the method is named <ph id="ph1">`SquareIt`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It is not necessary to give dynamic methods names, and they cannot be invoked by name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Multiple dynamic methods can have the same name.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, the name appears in call stacks and can be useful for debugging.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The type of the return value is specified as <ph id="ph1">`long`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The method is associated with the module that contains the <ph id="ph1">`Example`</ph> class, which contains the example code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Any loaded module could be specified.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The dynamic method acts like a module-level <ph id="ph1">`static`</ph> method (<ph id="ph2">`Shared`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Emit the method body.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this example, an <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object is used to emit the Microsoft intermediate language (MSIL).</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Alternatively, a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object can be used in conjunction with unmanaged code generators to emit the method body for a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The MSIL in this example loads the argument, which is an <ph id="ph1">`int`</ph>, onto the stack, converts it to a <ph id="ph2">`long`</ph>, duplicates the <ph id="ph3">`long`</ph>, and multiplies the two numbers.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This leaves the squared result on the stack, and all the method has to do is return.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Create an instance of the delegate (declared in step 1) that represents the dynamic method by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creating the delegate completes the method, and any further attempts to change the method — for example, adding more MSIL — are ignored.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code creates the delegate and invokes it, using a generic delegate.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To define and execute a dynamic method that is bound to an object</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Declare a delegate type to execute the method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Consider using a generic delegate to minimize the number of delegate types you need to declare.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code declares a generic delegate type that can be used to execute any method with one parameter and a return value, or a method with two parameters and a return value if the delegate is bound to an object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create an array that specifies the parameter types for the dynamic method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the delegate representing the method is to be bound to an object, the first parameter must match the type the delegate is bound to.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In this example, there are two parameters, of type <ph id="ph1">`Example`</ph> and type <ph id="ph2">`int`</ph> (<ph id="ph3">`Integer`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Create a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example the method has no name.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The type of the return value is specified as <ph id="ph1">`int`</ph> (<ph id="ph2">`Integer`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The method has access to the private and protected members of the <ph id="ph1">`Example`</ph> class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Emit the method body.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this example, an <ph id="ph1">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object is used to emit the Microsoft intermediate language (MSIL).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Alternatively, a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object can be used in conjunction with unmanaged code generators to emit the method body for a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The MSIL in this example loads the first argument, which is an instance of the <ph id="ph1">`Example`</ph> class, and uses it to load the value of a private instance field of type <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The second argument is loaded, and the two numbers are multiplied.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the result is larger than <ph id="ph1">`int`</ph>, the value is truncated and the most significant bits are discarded.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The method returns, with the return value on the stack.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Create an instance of the delegate (declared in step 1) that represents the dynamic method by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Creating the delegate completes the method, and any further attempts to change the method — for example, adding more MSIL — are ignored.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method multiple times to create delegates bound to other instances of the target type.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following code binds the method to a new instance of the <ph id="ph1">`Example`</ph> class whose private test field is set to 42.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>That is, each time the delegate is invoked the instance of <ph id="ph1">`Example`</ph> is passed to the first parameter of the method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The delegate <ph id="ph1">`OneParameter`</ph> is used because the first parameter of the method always receives the instance of <ph id="ph2">`Example`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When the delegate is invoked, only the second parameter is required.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates a simple dynamic method and a dynamic method bound to an instance of a class.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The simple dynamic method takes one argument, a 32-bit integer, and returns the 64-bit square of that integer.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A generic delegate is used to invoke the method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The second dynamic method has two parameters, of type <ph id="ph1">`Example`</ph> and type <ph id="ph2">`int`</ph> (<ph id="ph3">`Integer`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When the dynamic method has been created, it is bound to an instance of <ph id="ph1">`Example`</ph>, using a generic delegate that has one argument of type <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The delegate does not have an argument of type <ph id="ph1">`Example`</ph> because the first parameter of the method always receives the bound instance of <ph id="ph2">`Example`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When the delegate is invoked, only the <ph id="ph1">`int`</ph> argument is supplied.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This dynamic method accesses a private field of the <ph id="ph1">`Example`</ph> class and returns the product of the private field and the <ph id="ph2">`int`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The code example defines delegates that can be used to execute the methods.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The code contains the C# <ph id="ph1">`using`</ph> statements (<ph id="ph2">`Imports`</ph> in Visual Basic) necessary for compilation.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>No additional assembly references are required.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Compile the code at the command line using csc.exe, vbc.exe, or cl.exe.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To compile the code in Visual Studio, place it in a console application project template.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Reflection Emit<ept id="p1">](http://msdn.microsoft.com/en-us/ccc6540d-0e2c-4d89-b456-eb7353f9e9ac)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reflection Emit Dynamic Method Scenarios<ept id="p1">](http://msdn.microsoft.com/en-us/7c27ea3d-0f24-4bf3-8ceb-f49d33faca5e)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>