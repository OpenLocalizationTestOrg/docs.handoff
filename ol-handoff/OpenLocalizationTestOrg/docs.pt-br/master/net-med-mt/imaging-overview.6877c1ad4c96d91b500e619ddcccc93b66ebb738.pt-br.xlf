<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="imaging-overview.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e2e4b4712fd707cad4a4c20bf147e53a6d65ab2f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\imaging-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c2d4a87b167c95a61003fb680a235faee202766</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59d7a6f927f80d3a9304a944e05e26d498dd16e3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Imaging Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Imaging Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides an introduction to the <ph id="ph1">[!INCLUDE[TLA#tla_wic](../../../../includes/tlasharptla-wic-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> enables developers to display, transform, and format images.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>WPF Imaging Component</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>provides significant enhancements in imaging capabilities within <ph id="ph1">[!INCLUDE[TLA#tla_win](../../../../includes/tlasharptla-win-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Imaging capabilities, such as displaying a bitmap or using an image on a common control were previously reliant upon the <ph id="ph1">[!INCLUDE[TLA#tla_gdi](../../../../includes/tlasharptla-gdi-md.md)]</ph> or <ph id="ph2">[!INCLUDE[TLA#tla_gdiplus](../../../../includes/tlasharptla-gdiplus-md.md)]</ph> libraries.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>These <ph id="ph1">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph> provide baseline imaging functionality, but lack features such as support for codec extensibility and high fidelity image support.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> is designed to overcome the shortcomings of <ph id="ph2">[!INCLUDE[TLA2#tla_gdi](../../../../includes/tla2sharptla-gdi-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_gdiplus](../../../../includes/tla2sharptla-gdiplus-md.md)]</ph> and provide a new set of <ph id="ph4">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph> to display and use images within your applications.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are two ways to access the <ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph>, a managed component and an unmanaged component.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The unmanaged component provides the following features.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Extensibility model for new or proprietary image formats.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Improved performance and security on native image formats including <ph id="ph1">[!INCLUDE[TLA#tla_bmp](../../../../includes/tlasharptla-bmp-md.md)]</ph>, <ph id="ph2">[!INCLUDE[TLA#tla_jpegorg](../../../../includes/tlasharptla-jpegorg-md.md)]</ph>, <ph id="ph3">[!INCLUDE[TLA#tla_png](../../../../includes/tlasharptla-png-md.md)]</ph>, <ph id="ph4">[!INCLUDE[TLA#tla_tiff](../../../../includes/tlasharptla-tiff-md.md)]</ph>, <ph id="ph5">[!INCLUDE[TLA#tla_wdp](../../../../includes/tlasharptla-wdp-md.md)]</ph>, <ph id="ph6">[!INCLUDE[TLA#tla_gif](../../../../includes/tlasharptla-gif-md.md)]</ph>, and icon (.ico).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Preservation of high bit-depth image data up to 8 bits per channel (32 bits per pixel).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Nondestructive image scaling, cropping, and rotations.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Simplified color management.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Support for in-file, proprietary metadata.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The managed component utilizes the unmanaged infrastructure to provide seamless integration of images with other <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> features such as <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>, animation, and graphics.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The managed component also benefits from the <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> imaging codec extensibility model which enables automatic recognition of new image formats in <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The majority of the managed <ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> <ph id="ph2">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph> reside in the <ph id="ph3">&lt;xref:System.Windows.Media.Imaging?displayProperty=fullName&gt;</ph> namespace, though several important types, such as <ph id="ph4">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Media.ImageDrawing&gt;</ph> reside in the <ph id="ph6">&lt;xref:System.Windows.Media?displayProperty=fullName&gt;</ph> namespace and <ph id="ph7">&lt;xref:System.Windows.Controls.Image&gt;</ph> resides in the <ph id="ph8">&lt;xref:System.Windows.Controls?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This topic provides additional information about the managed component.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information on the unmanaged <ph id="ph1">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph> see the <bpt id="p1">[</bpt>Unmanaged WPF Imaging Component<ept id="p1">](https://msdn.microsoft.com/library/ee719902.aspx)</ept> documentation.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>WPF Image Formats</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A codec is used to decode or encode a specific media format.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> includes a codec  for <ph id="ph2">[!INCLUDE[TLA2#tla_bmp](../../../../includes/tla2sharptla-bmp-md.md)]</ph>, <ph id="ph3">[!INCLUDE[TLA2#tla_jpeg](../../../../includes/tla2sharptla-jpeg-md.md)]</ph>, <ph id="ph4">[!INCLUDE[TLA2#tla_png](../../../../includes/tla2sharptla-png-md.md)]</ph>, <ph id="ph5">[!INCLUDE[TLA2#tla_tiff](../../../../includes/tla2sharptla-tiff-md.md)]</ph>, <ph id="ph6">[!INCLUDE[TLA2#tla_wdp](../../../../includes/tla2sharptla-wdp-md.md)]</ph>, <ph id="ph7">[!INCLUDE[TLA2#tla_gif](../../../../includes/tla2sharptla-gif-md.md)]</ph>, and ICON image formats.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Each of these codecs enable applications to decode and, with the exception of ICON, encode their respective image formats.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph> is an important class used in the decoding and encoding of images.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is the basic building block of the <ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> pipeline and represents a single, constant set of pixels at a certain size and resolution.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph> can be an individual frame of a multiple frame image, or it can be the result of a transform performed on a <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is the parent of many of the primary classes used in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> imaging such as <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapFrame&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapFrame&gt;</ph> is used to store the actual bitmap data of an image format.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Many image formats only support a single <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapFrame&gt;</ph>, although formats such as <ph id="ph2">[!INCLUDE[TLA2#tla_gif](../../../../includes/tla2sharptla-gif-md.md)]</ph> and <ph id="ph3">[!INCLUDE[TLA2#tla_tiff](../../../../includes/tla2sharptla-tiff-md.md)]</ph> support multiple frames per image.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Frames are used by decoders as input data and are passed to encoders to create image files.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how a <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapFrame&gt;</ph> is created from a <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph> and then added to a <ph id="ph3">[!INCLUDE[TLA2#tla_tiff](../../../../includes/tla2sharptla-tiff-md.md)]</ph> image.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Image Format Decoding</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Image decoding is the translation of an image format to image data that can be used by the system.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The image data can then be used to display, process, or encode to a different format.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Decoder selection is based on the image format.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Codec selection is automatic unless a specific decoder is specified.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The examples in the <bpt id="p1">[</bpt>Displaying Images in WPF<ept id="p1">](#_displayingimages)</ept> section demonstrate automatic decoding.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Custom format decoders developed using the unmanaged <ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> interfaces and registered with the system automatically participate in decoder selection.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This allows custom formats to be displayed automatically in <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of a bitmap decoder to decode a <ph id="ph1">[!INCLUDE[TLA2#tla_bmp](../../../../includes/tla2sharptla-bmp-md.md)]</ph> format image.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Image Format Encoding</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Image encoding is the translation of image data to a specific image format.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The encoded image data can then be used to create new image files.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> provides encoders for each of the image formats described above.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of an encoder to save a newly created bitmap image.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Displaying Images in WPF</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There are several ways to display an image in a <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> application.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Images can be displayed using an <ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> control, painted on a visual using an <ph id="ph2">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>, or drawn using an <ph id="ph3">&lt;xref:System.Windows.Media.ImageDrawing&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using the Image Control</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph> is a framework element and the primary way to display images in applications.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph> can be used in two ways; attribute syntax or property syntax.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example shows how to render an image 200 pixels wide using both attribute syntax and property tag syntax.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information on attribute syntax and property syntax, see <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Many of the examples use a <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapImage&gt;</ph> object to reference an image file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapImage&gt;</ph> is a specialized <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph> that is optimized for <ph id="ph3">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> loading and is an easy way to display images as the <ph id="ph4">&lt;xref:System.Windows.Controls.Image.Source%2A&gt;</ph> of an <ph id="ph5">&lt;xref:System.Windows.Controls.Image&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following example shows how to render an image 200 pixels wide using code.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapImage&gt;</ph> implements the <ph id="ph2">&lt;xref:System.ComponentModel.ISupportInitialize&gt;</ph> interface to optimize initialization on multiple properties.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Property changes can only occur during object initialization.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapImage.BeginInit%2A&gt;</ph> to signal that initialization has begun and <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapImage.EndInit%2A&gt;</ph> to signal that initialization has completed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Once initialized, property changes are ignored.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Rotating, Converting, and Cropping Images</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>enables users to transform images by using properties of <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapImage&gt;</ph> or by using additional <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph> objects such as <ph id="ph3">&lt;xref:System.Windows.Media.Imaging.CroppedBitmap&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Media.Imaging.FormatConvertedBitmap&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These image transformations can scale or rotate an image, change the pixel format of an image, or crop an image.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Image rotations are performed using the <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapImage.Rotation%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapImage&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Rotations can only be done in 90 degree increments.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the following example, an image is rotated 90 degrees.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Converting an image to a different pixel format such as grayscale is done using <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.FormatConvertedBitmap&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In the following examples, an image is converted to <ph id="ph1">&lt;xref:System.Windows.Media.PixelFormats.Gray4%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To crop an image, either the <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Media.Imaging.CroppedBitmap&gt;</ph> can be used.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Typically, if you just want to display a portion of an image, <ph id="ph1">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> should be used.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you need to encode and save a cropped image, the <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.CroppedBitmap&gt;</ph> should be used.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In the following example, an image is cropped using the Clip property using an <ph id="ph1">&lt;xref:System.Windows.Media.EllipseGeometry&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Stretching Images</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Image.Stretch%2A&gt;</ph> property controls how an image is stretched to fill its container.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Image.Stretch%2A&gt;</ph> property accepts the following values, defined by the <ph id="ph2">&lt;xref:System.Windows.Media.Stretch&gt;</ph> enumeration:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The image is not stretched to fill the output area.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the image is larger than the output area, the image is drawn to the output area, clipping what does not fit.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The image is scaled to fit the output area.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Because the image height and width are scaled independently, the original aspect ratio of the image might not be preserved.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>That is, the image might be warped in order to completely fill the output container.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The image is scaled so that it fits completely within the output area.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The image's aspect ratio is preserved.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph>: The image is scaled so that it completely fills the output area while preserving the image's original aspect ratio.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example applies each of the available <ph id="ph1">&lt;xref:System.Windows.Media.Stretch&gt;</ph> enumerations to an <ph id="ph2">&lt;xref:System.Windows.Controls.Image&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The following image shows the output from the example and demonstrates the affect the different <ph id="ph1">&lt;xref:System.Windows.Controls.Image.Stretch%2A&gt;</ph> settings have when applied to an image.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Different TileBrush Stretch settings<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/img-mmgraphics-stretchenum.jpg "</bpt>img_mmgraphics_stretchenum<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Different stretch settings</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Painting with Images</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Images can also be displayed in an application by painting with a <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Brushes enable you to paint <ph id="ph1">[!INCLUDE[TLA2#tla_ui](../../../../includes/tla2sharptla-ui-md.md)]</ph> objects with anything from simple, solid colors to complex sets of patterns and images.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To paint with images, use an <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph> is a type of <ph id="ph2">&lt;xref:System.Windows.Media.TileBrush&gt;</ph> that defines its content as a bitmap image.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph> displays a single image, which is specified by its <ph id="ph2">&lt;xref:System.Windows.Media.ImageBrush.ImageSource%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can control how the image is stretched, aligned, and tiled, enabling you to prevent distortion and produce patterns and other effects.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The following illustration shows some effects that can be achieved with an <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>ImageBrush output examples<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/wcpsdk-mmgraphics-imagebrushexamples.gif "</bpt>wcpsdk_mmgraphics_imagebrushexamples<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Image brushes can fill shapes, controls, text, and more</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to paint the background of a button with an image using an <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For additional information about <ph id="ph1">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph> and painting images see <bpt id="p1">[</bpt>Painting with Images, Drawings, and Visuals<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/painting-with-images-drawings-and-visuals.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Image Metadata</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Some image files contain metadata that describes the content or the characteristics of the file.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, most digital cameras create images that contain metadata about the make and model of the camera used to capture the image.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Each image format handles metadata differently but <ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> provides a uniform way of storing and retrieving metadata for each supported image format.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Access to metadata is provided through the <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapSource.Metadata%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapSource.Metadata%2A&gt;</ph> returns a <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata&gt;</ph> object that includes all the metadata contained by the image.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This data may be in one metadata schema or a combination of different schemes.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> supports the following image metadata schemas: <ph id="ph2">[!INCLUDE[TLA#tla_exif](../../../../includes/tlasharptla-exif-md.md)]</ph>, tEXt (PNG Textual Data), <ph id="ph3">[!INCLUDE[TLA#tla_ifd](../../../../includes/tlasharptla-ifd-md.md)]</ph>, <ph id="ph4">[!INCLUDE[TLA#tla_iptc](../../../../includes/tlasharptla-iptc-md.md)]</ph>, and <ph id="ph5">[!INCLUDE[TLA#tla_xmp](../../../../includes/tlasharptla-xmp-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In order to simplify the process of reading metadata, <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata&gt;</ph> provides several named properties that can be easily accessed such as <ph id="ph2">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata.Author%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata.Title%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata.CameraModel%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Many of these named properties can also be used to write metadata.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Additional support for reading metadata is provided by the metadata query reader.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata.GetQuery%2A&gt;</ph> method is used to retrieve a metadata query reader by providing a string query such as <bpt id="p1">*</bpt>"/app1/exif/"<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata.GetQuery%2A&gt;</ph> is used to obtain the text stored in the <bpt id="p1">*</bpt>"/Text/Description"<ept id="p1">*</ept> location.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>To write metadata, a metadata query writer is used.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata.SetQuery%2A&gt;</ph> obtains the query writer and sets the desired value.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata.SetQuery%2A&gt;</ph> is used to write the text stored in the <bpt id="p1">*</bpt>"/Text/Description"<ept id="p1">*</ept> location.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Codec Extensibility</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>A core feature of <ph id="ph1">[!INCLUDE[TLA2#tla_wic](../../../../includes/tla2sharptla-wic-md.md)]</ph> is the extensibility model for new image codecs.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>These unmanaged interfaces enable codec developers to integrate codecs with <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> so new image formats can automatically be used by <ph id="ph2">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>For a sample of the extensibility <ph id="ph1">[!INCLUDE[TLA2#tla_api](../../../../includes/tla2sharptla-api-md.md)]</ph>, see the <bpt id="p1">[</bpt>Win32 Sample Codec<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160052)</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>This sample demonstrates how to create a decoder and encoder for a custom image format.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The codec must be digitally signed for the system to recognize it.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapSource&gt;</ph></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapImage&gt;</ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Image&gt;</ph></source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Imaging.BitmapMetadata&gt;</ph></source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>2D Graphics and Imaging<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-2d-graphics-and-imaging.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Win32 Sample Codec<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160052)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>