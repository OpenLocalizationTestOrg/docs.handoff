<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="writing-custom-attributes.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f1cccb2ea2d45fa9f49f307dee89c7d0a09601e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\attributes\writing-custom-attributes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50baa98d93506512765bac1a8f0cd310e69718fc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">217f894dd358d85ab39cd6c01da7173b58ef1c0c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Writing Custom Attributes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Writing Custom Attributes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To design your own custom attributes, you do not need to master many new concepts.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you are familiar with object-oriented programming and know how to design classes, you already have most of the knowledge needed.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Custom attributes are essentially traditional classes that derive directly or indirectly from <ph id="ph1">&lt;xref:System.Attribute?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Just like traditional classes, custom attributes contain methods that store and retrieve data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The primary steps to properly design custom attribute classes are as follows:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Applying the AttributeUsageAttribute<ept id="p1">](#cpconapplyingattributeusageattribute)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declaring the attribute class<ept id="p1">](#cpcondeclaringattributeclass)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declaring constructors<ept id="p1">](#cpcondeclaringconstructors)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declaring properties<ept id="p1">](#cpcondeclaringproperties)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This section describes each of these steps and concludes with a <bpt id="p1">[</bpt>custom attribute example<ept id="p1">](#cpconcustomattributeexample)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Applying the AttributeUsageAttribute</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A custom attribute declaration begins with the <bpt id="p1">**</bpt>AttributeUsageAttribute<ept id="p1">**</ept>, which defines some of the key characteristics of your attribute class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, you can specify whether your attribute can be inherited by other classes or specify which elements the attribute can be applied to.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following code fragment demonstrates how to use the <bpt id="p1">**</bpt>AttributeUsageAttribute<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.AttributeUsageAttribute?displayProperty=fullName&gt;</ph> has three members that are important for the creation of custom attributes: <bpt id="p1">[</bpt>AttributeTargets<ept id="p1">](#cpconwritingcustomattributesanchor1)</ept>, <bpt id="p2">[</bpt>Inherited<ept id="p2">](#cpconwritingcustomattributesanchor2)</ept>, and <bpt id="p3">[</bpt>AllowMultiple<ept id="p3">](#cpconwritingcustomattributesanchor3)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>AttributeTargets Member</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the previous example, <bpt id="p1">**</bpt>AttributeTargets.All<ept id="p1">**</ept> is specified, indicating that this attribute can be applied to all program elements.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Alternatively, you can specify <bpt id="p1">**</bpt>AttributeTargets.Class<ept id="p1">**</ept>, indicating that your attribute can be applied only to a class, or <bpt id="p2">**</bpt>AttributeTargets.Method<ept id="p2">**</ept>, indicating that your attribute can be applied only to a method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>All program elements can be marked for description by a custom attribute in this manner.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can also pass multiple instances of <ph id="ph1">&lt;xref:System.AttributeTargets&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following code fragment specifies that a custom attribute can be applied to any class or method.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Inherited Property</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.Inherited%2A?displayProperty=fullName&gt;</ph> property indicates whether your attribute can be inherited by classes that are derived from the classes to which your attribute is applied.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This property takes either a <bpt id="p1">**</bpt>true<ept id="p1">**</ept> (the default) or <bpt id="p2">**</bpt>false<ept id="p2">**</ept> flag.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, in the following example, <ph id="ph1">`MyAttribute`</ph> has a default <ph id="ph2">&lt;xref:System.AttributeUsageAttribute.Inherited%2A&gt;</ph> value of <bpt id="p1">**</bpt>true<ept id="p1">**</ept>, while <ph id="ph3">`YourAttribute`</ph> has an <ph id="ph4">&lt;xref:System.AttributeUsageAttribute.Inherited%2A&gt;</ph> value of <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The two attributes are then applied to a method in the base class <ph id="ph1">`MyClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Finally, the class <ph id="ph1">`YourClass`</ph> is inherited from the base class <ph id="ph2">`MyClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The method <ph id="ph1">`MyMethod`</ph> shows <ph id="ph2">`MyAttribute`</ph>, but not <ph id="ph3">`YourAttribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>AllowMultiple Property</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName&gt;</ph> property indicates whether multiple instances of your attribute can exist on an element.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>, multiple instances are allowed; if set to <bpt id="p2">**</bpt>false<ept id="p2">**</ept> (the default), only one instance is allowed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`MyAttribute`</ph> has a default <ph id="ph2">&lt;xref:System.AttributeUsageAttribute.AllowMultiple%2A&gt;</ph> value of <bpt id="p1">**</bpt>false<ept id="p1">**</ept>, while <ph id="ph3">`YourAttribute`</ph> has a value of <bpt id="p2">**</bpt>true<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When multiple instances of these attributes are applied, <ph id="ph1">`MyAttribute`</ph> produces a compiler error.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code example shows the valid use of <ph id="ph1">`YourAttribute`</ph> and the invalid use of <ph id="ph2">`MyAttribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If both the <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.AllowMultiple%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.AttributeUsageAttribute.Inherited%2A&gt;</ph> property are set to <bpt id="p1">**</bpt>true<ept id="p1">**</ept>, a class that is inherited from another class can inherit an attribute and have another instance of the same attribute applied in the same child class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.AttributeUsageAttribute.AllowMultiple%2A&gt;</ph> is set to <bpt id="p1">**</bpt>false<ept id="p1">**</ept>, the values of any attributes in the parent class will be overwritten by new instances of the same attribute in the child class.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Declaring the Attribute Class</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>After you apply the <ph id="ph1">&lt;xref:System.AttributeUsageAttribute&gt;</ph>, you can begin to define the specifics of your attribute.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The declaration of an attribute class looks similar to the declaration of a traditional class, as demonstrated by the following code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This attribute definition demonstrates the following points:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Attribute classes must be declared as public classes.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>By convention, the name of the attribute class ends with the word <bpt id="p1">**</bpt>Attribute<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>While not required, this convention is recommended for readability.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the attribute is applied, the inclusion of the word Attribute is optional.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>All attribute classes must inherit directly or indirectly from <bpt id="p1">**</bpt>System.Attribute<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In Microsoft Visual Basic, all custom attribute classes must have the <bpt id="p1">**</bpt>AttributeUsageAttribute<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Declaring Constructors</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Attributes are initialized with constructors in the same way as traditional classes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following code fragment illustrates a typical attribute constructor.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This public constructor takes a parameter and sets its value equal to a member variable.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can overload the constructor to accommodate different combinations of values.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you also define a <bpt id="p1">[</bpt>property<ept id="p1">](http://msdn.microsoft.com/library/8f1a1ff1-0f05-40e0-bfdf-80de8fff7d52)</ept> for your custom attribute class, you can use a combination of named and positional parameters when initializing the attribute.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Typically, you define all required parameters as positional and all optional parameters as named.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this case, the attribute cannot be initialized without the required parameter.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>All other parameters are optional.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Note that in Visual Basic, constructors for an attribute class should not use a ParamArray argument.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following code example shows how an attribute that uses the previous constructor can be applied using optional and required parameters.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>It assumes that the attribute has one required Boolean value and one optional string property.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Declaring Properties</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you want to define a named parameter or provide an easy way to return the values stored by your attribute, declare a <bpt id="p1">[</bpt>property<ept id="p1">](http://msdn.microsoft.com/library/8f1a1ff1-0f05-40e0-bfdf-80de8fff7d52)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Attribute properties should be declared as public entities with a description of the data type that will be returned.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Define the variable that will hold the value of your property and associate it with the <bpt id="p1">**</bpt>get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>set<ept id="p2">**</ept> methods.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to implement a simple property in your attribute.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Custom Attribute Example</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This section incorporates the previous information and shows how to design a simple attribute that documents information about the author of a section of code.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The attribute in this example stores the name and level of the programmer, and whether the code has been reviewed.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>It uses three private variables to store the actual values to save.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Each variable is represented by a public property that gets and sets the values.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Finally, the constructor is defined with two required parameters.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can apply this attribute using the full name, <ph id="ph1">`DeveloperAttribute`</ph>, or using the abbreviated name, <ph id="ph2">`Developer`</ph>, in one of the following ways.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The first example shows the attribute applied with only the required named parameters, while the second example shows the attribute applied with both the required and optional parameters.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes<ept id="p1">](../../../docs/standard/attributes/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>