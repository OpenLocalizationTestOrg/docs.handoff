<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2c6a7e5cc9f28a3cda9ebf1ce338969d973ee558</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\interop\copying-and-pinning.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93dac2d08d9013c4a342d759713b13ccce9f92b4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e64e46b05826ae3ba872ff8a70d49e8c0ca3038d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Copying and Pinning | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Copying and Pinning</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When marshaling data, the interop marshaler can copy or pin the data being marshaled.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Copying the data places a copy of data from one memory location in another memory location.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following illustration shows the differences between copying a value type and copying a type passed by reference from managed to unmanaged memory.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Value types passed by value and by reference<ept id="p1">](../../../docs/framework/interop/media/interopmarshalcopy.gif "interopmarshalcopy")</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Value types passed by value and by reference</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Method arguments passed by value are marshaled to unmanaged code as values on the stack.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The copying process is direct.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Arguments passed by reference are passed as pointers on the stack.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Reference types are also passed by value and by reference.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As the following illustration shows, reference types passed by value are either copied or pinned.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>COM interop<ept id="p1">](../../../docs/framework/interop/media/interopmarshalpin.gif "interopmarshalpin")</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Reference types passed by value and by reference</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Pinning temporarily locks the data in its current memory location, thus keeping it from being relocated by the common language runtime's garbage collector.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The marshaler pins data to reduce the overhead of copying and enhance performance.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The type of the data determines whether it is copied or pinned during the marshaling process.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Pinning is automatically performed during marshaling for objects such as <ph id="ph1">&lt;xref:System.String&gt;</ph>, however you can also manually pin memory using the <ph id="ph2">&lt;xref:System.Runtime.InteropServices.GCHandle&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Formatted Blittable Classes</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Formatted <bpt id="p1">[</bpt>blittable<ept id="p1">](../../../docs/framework/interop/blittable-and-non-blittable-types.md)</ept> classes have fixed layout (formatted) and common data representation in both managed and unmanaged memory.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When these types require marshaling, a pointer to the object in the heap is passed to the callee directly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The callee can change the contents of the memory location being referenced by the pointer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The callee can change the memory contents if the parameter is marked Out or In/Out.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In contrast, the callee should avoid changing the contents when the parameter is set to marshal as In, which is the default for formatted blittable types.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Modifying an In object generates problems when the same class is exported to a type library and used to make cross-apartment calls.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Formatted Non-Blittable Classes</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Formatted <bpt id="p1">[</bpt>non-blittable<ept id="p1">](../../../docs/framework/interop/blittable-and-non-blittable-types.md)</ept> classes have fixed layout (formatted) but the data representation is different in managed and unmanaged memory.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The data can require transformation under the following conditions:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If a non-blittable class is marshaled by value, the callee receives a pointer to a copy of the data structure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If a non-blittable class is marshaled by reference, the callee receives a pointer to a pointer to a copy of the data structure.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.InAttribute&gt;</ph> attribute is set, this copy is always initialized with the instance's state, marshaling as necessary.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.OutAttribute&gt;</ph> attribute is set, the state is always copied back to the instance on return, marshaling as necessary.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If both <bpt id="p1">**</bpt>InAttribute<ept id="p1">**</ept> and <bpt id="p2">**</bpt>OutAttribute<ept id="p2">**</ept> are set, both copies are required.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If either attribute is omitted, the marshaler can optimize by eliminating either copy.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Reference Types</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reference types can be passed by value or by reference.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When they are passed by value, a pointer to the type is passed on the stack.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When passed by reference, a pointer to a pointer to the type is passed on the stack.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Reference types have the following conditional behavior:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If a reference type is passed by value and it has members of non-blittable types, the types are converted twice:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>When an argument is passed to the unmanaged side.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>On return from the call.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To avoid unnecessarily copying and conversion, these types are marshaled as In parameters.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You must explicitly apply the <bpt id="p1">**</bpt>InAttribute<ept id="p1">**</ept> and <bpt id="p2">**</bpt>OutAttribute<ept id="p2">**</ept> attributes to an argument for the caller to see changes made by the callee.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If a reference type is passed by value and it has only members of blittable types, it can be pinned during marshaling and any changes made to the members of the type by the callee are seen by the caller.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Apply <bpt id="p1">**</bpt>InAttribute<ept id="p1">**</ept> and <bpt id="p2">**</bpt>OutAttribute<ept id="p2">**</ept> explicitly if you want this behavior.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Without these directional attributes, the interop marshaler does not export directional information to the type library (it exports as In, which is the default) and this can cause problems with COM cross-apartment marshaling.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If a reference type is passed by reference, it will be marshaled as In/Out by default.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>System.String and System.Text.StringBuilder</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When data is marshaled to unmanaged code by value or by reference, the marshaler typically copies the data to a secondary buffer (possibly converting character sets during the copy) and passes a reference to the buffer to the callee.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Unless the reference is a <bpt id="p1">**</bpt>BSTR<ept id="p1">**</ept> allocated with <bpt id="p2">**</bpt>SysAllocString<ept id="p2">**</ept>, the reference is always allocated with <bpt id="p3">**</bpt>CoTaskMemAlloc<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As an optimization when either string type is marshaled by value (such as a Unicode character string), the marshaler passes the callee a direct pointer to managed strings in the internal Unicode buffer instead of copying it to a new buffer.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When a string is passed by value, the callee must never alter the reference passed by the marshaler.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Doing so can corrupt the managed heap.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">&lt;xref:System.String?displayProperty=fullName&gt;</ph> is passed by reference, the marshaler copies the contents the string to a secondary buffer before making the call.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It then copies the contents of the buffer into a new string on return from the call.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This technique ensures that the immutable managed string remains unaltered.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">&lt;xref:System.Text.StringBuilder?displayProperty=fullName&gt;</ph> is passed by value, the marshaler passes a reference to the internal buffer of the <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept> directly to the caller.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The caller and callee must agree on the size of the buffer.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The caller is responsible for creating a <bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept> of adequate length.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The callee must take the necessary precautions to ensure that the buffer is not overrun.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StringBuilder<ept id="p1">**</ept> is an exception to the rule that reference types passed by value are passed as In parameters by default.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>It is always passed as In/Out.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Default Marshaling Behavior<ept id="p1">](../../../docs/framework/interop/default-marshaling-behavior.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Memory Management with the Interop Marshaler<ept id="p1">](http://msdn.microsoft.com/en-us/417206ce-ee3e-4619-9529-0c0b686c7bee)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Directional Attributes<ept id="p1">](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Interop Marshaling<ept id="p1">](../../../docs/framework/interop/interop-marshaling.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>