<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="styling-and-templating.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90ae3675ab7a4747372d3d1f8ad16a66e10f4028</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\controls\styling-and-templating.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad9067e98137220eb84df6dab25ca10ef7141e08</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e5d3323cb8fb7bbc9ff485c0c6d97b2787436543</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Styling and Templating | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Styling and Templating</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>styling and templating refer to a suite of features (styles, templates, triggers, and storyboards) that allow developers and designers to create visually compelling effects and to create a consistent appearance for their product.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although developers and or designers can customize the appearance extensively on an application-by-application basis, a strong styling and templating model is necessary to allow maintenance and sharing of the appearance within and among applications.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides that model.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Another feature of the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> styling model is the separation of presentation and logic.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This means that designers can work on the appearance of an application by using only <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> at the same time that developers work on the programming logic by using C# or Visual Basic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This overview focuses on the styling and templating aspects of the application and does not discuss any data binding concepts.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For information about data binding, see <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition, it is important to understand resources, which are what enable styles and templates to be reused.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information about resources, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Styling and Templating Sample</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The code examples used in this overview are based on a simple photo sample shown in the following illustration:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Styled ListView<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-triggers.png "</bpt>StylingIntro_triggers<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This simple photo sample uses styling and templating to create a visually compelling user experience.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The sample has two <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements and a <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> control that is bound to a list of images.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For the complete sample, see <bpt id="p1">[</bpt>Introduction to Styling and Templating Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160010)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Style Basics</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can think of a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> as a convenient way to apply a set of property values to more than one element.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, consider the following <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements and their default appearance:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Styling sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-textblocksbefore.PNG "</bpt>StylingIntro_TextBlocksBefore<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can change the default appearance by setting properties, such as <ph id="ph1">&lt;xref:System.Windows.Controls.Control.FontSize%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Control.FontFamily%2A&gt;</ph>, on each <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element directly.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, if you want your <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements to share some properties, you can create a <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> in the <ph id="ph3">`Resources`</ph> section of your <ph id="ph4">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file, as shown here:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you set the <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> of your style to the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> type, the style is applied to all the <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements in the window.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Now the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements appear as follows:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Styling sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-textblocksbasestyle.PNG "</bpt>StylingIntro_TextBlocksBaseStyle<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Extending Styles</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Perhaps you want your two <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements to share some property values, such as the <ph id="ph2">&lt;xref:System.Windows.Controls.Control.FontFamily%2A&gt;</ph> and the centered <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph>, but you also want the text "My Pictures" to have some additional properties.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can do that by creating a new style that is based on the first style, as shown here:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Notice that the previous style is given an <ph id="ph1">`x:Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To apply the style, you set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property on your <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> to the <ph id="ph3">`x:Key`</ph> value, as shown here:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> style now has a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.HorizontalAlignment%2A&gt;</ph> value of <ph id="ph3">&lt;xref:System.Windows.HorizontalAlignment&gt;</ph>, a <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock.FontFamily%2A&gt;</ph> value of <ph id="ph5">`Comic Sans MS`</ph>, a <ph id="ph6">&lt;xref:System.Windows.Controls.TextBlock.FontSize%2A&gt;</ph> value of 26, and a <ph id="ph7">&lt;xref:System.Windows.Controls.TextBlock.Foreground%2A&gt;</ph> value set to the <ph id="ph8">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph> shown in the example.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Notice that it overrides the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.FontSize%2A&gt;</ph> value of the base style.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If there is more than one <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> setting the same property in a <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Setter&gt;</ph> that is declared last takes precedence.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following shows what the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements now look like:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Styled TextBlocks<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-textblocks.png "</bpt>StylingIntro_TextBlocks<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`TitleText`</ph> style extends the style that has been created for the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also extend a style that has an <ph id="ph1">`x:Key`</ph> by using the <ph id="ph2">`x:Key`</ph> value.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For an example, see the example provided for the <ph id="ph1">&lt;xref:System.Windows.Style.BasedOn%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Relationship of the TargetType Property and the x:Key Attribute</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As shown in the first example, setting the <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property to <ph id="ph2">`TextBlock`</ph> without assigning the style an <ph id="ph3">`x:Key`</ph> causes the style to be applied to all <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`x:Key`</ph> is implicitly set to <ph id="ph2">`{x:Type TextBlock}`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This means that if you explicitly set the <ph id="ph1">`x:Key`</ph> value to anything other than <ph id="ph2">`{x:Type TextBlock}`</ph>, the <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph> is not applied to all <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements automatically.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Instead, you must apply the style (by using the <ph id="ph1">`x:Key`</ph> value) to the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements explicitly.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If your style is in the resources section and you do not set the <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property on your style, then you must provide an <ph id="ph2">`x:Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In addition to providing a default value for the <ph id="ph1">`x:Key`</ph>, the <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property specifies the type to which setter properties apply.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you do not specify a <ph id="ph1">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph>, you must qualify the properties in your <ph id="ph2">&lt;xref:System.Windows.Setter&gt;</ph> objects with a class name by using the syntax <ph id="ph3">`Property="ClassName.Property"`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, instead of setting <ph id="ph1">`Property="FontSize"`</ph>, you must set <ph id="ph2">&lt;xref:System.Windows.Setter.Property%2A&gt;</ph> to <ph id="ph3">`"TextBlock.FontSize"`</ph> or <ph id="ph4">`"Control.FontSize"`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Also note that many <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> controls consist of a combination of other <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> controls.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If you create a style that applies to all controls of a type, you might get unexpected results.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, if you create a style that targets the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> type in a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>, the style is applied to all <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> controls in the window, even if the <ph id="ph4">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> is part of another control, such as a <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Styles and Resources</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can use a style on any element that derives from <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The most common way to declare a style is as a resource in the <ph id="ph1">`Resources`</ph> section in a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file, as shown in the previous examples.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Because styles are resources, they obey the same scoping rules that apply to all resources; where you declare a style affects where the style can be applied.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example, if you declare the style in the root element of your application definition <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file, the style can be used anywhere in your application.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you create a navigation application and declare the style in one of the application's <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files, the style can be used only in that <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information about scoping rules for resources, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In addition, you can find more information about styles and resources in <bpt id="p1">[</bpt>Shared Resources and Themes<ept id="p1">](#styling_themes)</ept> later in this overview.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Setting Styles Programmatically</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To assign a named style to an element programmatically, get the style from the resources collection and assign it to the element's <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Note that the items in a resources collection are of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Therefore, you must cast the retrieved style to a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> before assigning it to the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, to set the defined <ph id="ph1">`TitleText`</ph> style on a <ph id="ph2">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> named <ph id="ph3">`textblock1`</ph>, do the following:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Note that once a style has been applied, it is sealed and cannot be changed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you want to dynamically change a style that has already been applied, you must create a new style to replace the existing one.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Windows.Style.IsSealed%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can create an object that chooses a style to apply based on custom logic.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For an example, see the example provided for the <ph id="ph1">&lt;xref:System.Windows.Controls.StyleSelector&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Bindings, Dynamic Resources, and Event Handlers</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Note that you can use the <ph id="ph1">`Setter.Value`</ph> property to specify a <bpt id="p1">[</bpt>Binding Markup Extension<ept id="p1">](../../../../docs/framework/wpf/advanced/binding-markup-extension.md)</ept> or a <bpt id="p2">[</bpt>DynamicResource Markup Extension<ept id="p2">](../../../../docs/framework/wpf/advanced/dynamicresource-markup-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information, see the examples provided for the <ph id="ph1">&lt;xref:System.Windows.Setter.Value%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>So far, this overview only discusses the use of setters to set property value.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also specify event handlers in a style.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.EventSetter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Data Templates</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In this sample application, there is a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> control that is bound to a list of photos:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> currently looks like the following:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>ListBox before applying template<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-listboxbefore.png "</bpt>StylingIntro_ListBoxBefore<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Most controls have some type of content, and that content often comes from data that you are binding to.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In this sample, the data is the list of photos.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, you use a <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> to define the visual representation of data.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Basically, what you put into a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> determines what the data looks like in the rendered application.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In our sample application, each custom <ph id="ph1">`Photo`</ph> object has a <ph id="ph2">`Source`</ph> property of type string that specifies the file path of the image.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Currently, the photo objects appear as file paths.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For the photos to appear as images, you create a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> as a resource:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.DataTemplate.DataType%2A&gt;</ph> property is very similar to the <ph id="ph2">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> is in the resources section, when you specify the <ph id="ph2">&lt;xref:System.Windows.DataTemplate.DataType%2A&gt;</ph> property to a type and not assign it an <ph id="ph3">`x:Key`</ph>, the <ph id="ph4">&lt;xref:System.Windows.DataTemplate&gt;</ph> is applied whenever that type appears.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You always have the option to assign the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> with an <ph id="ph2">`x:Key`</ph> and then set it as a <ph id="ph3">`StaticResource`</ph> for properties that take <ph id="ph4">&lt;xref:System.Windows.DataTemplate&gt;</ph> types, such as the <ph id="ph5">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A&gt;</ph> property or the <ph id="ph6">&lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Essentially, the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> in the above example defines that whenever there is a <ph id="ph2">`Photo`</ph> object, it should appear as an <ph id="ph3">&lt;xref:System.Windows.Controls.Image&gt;</ph> within a <ph id="ph4">&lt;xref:System.Windows.Controls.Border&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>With this <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>, our application now looks like this:</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Photo image<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-photosasimages.png "</bpt>StylingIntro_PhotosAsImages<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The data templating model provides other features.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, if you are displaying collection data that contains other collections using a <ph id="ph1">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph> type such as a <ph id="ph2">&lt;xref:System.Windows.Controls.Menu&gt;</ph> or a <ph id="ph3">&lt;xref:System.Windows.Controls.TreeView&gt;</ph>, there is the <ph id="ph4">&lt;xref:System.Windows.HierarchicalDataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Another data templating feature is the <ph id="ph1">&lt;xref:System.Windows.Controls.DataTemplateSelector&gt;</ph>, which allows you to choose a <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> to use based on custom logic.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Data Templating Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-templating-overview.md)</ept>, which provides a more in-depth discussion of the different data templating features.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Control Templates</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> of a control defines the appearance of the control.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can change the structure and appearance of a control by defining a new <ph id="ph1">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> for the control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In many cases, this gives you enough flexibility so that you do not have to write your own custom controls.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id="p1">](../../../../docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Triggers</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A trigger sets properties or starts actions, such as an animation, when a property value changes or when an event is raised.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph> all have a <ph id="ph4">`Triggers`</ph> property that can contain a set of triggers.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>There are various types of triggers.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Property Triggers</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> that sets property values or starts actions based on the value of a property is called a property trigger.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To demonstrate how to use property triggers, you can make each <ph id="ph1">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> partially transparent unless it is selected.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The following style sets the <ph id="ph1">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> value of a <ph id="ph2">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> to <ph id="ph3">`0.5`</ph>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBoxItem.IsSelected%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, however, the <ph id="ph3">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> is set to <ph id="ph4">`1.0`</ph>:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This example uses a <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> to set a property value, but note that the <ph id="ph2">&lt;xref:System.Windows.Trigger&gt;</ph> class also has the <ph id="ph3">&lt;xref:System.Windows.TriggerBase.EnterActions%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.TriggerBase.ExitActions%2A&gt;</ph> properties that enable a trigger to perform actions.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> is set to <ph id="ph3">`75`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In the following illustration, the third item is the selected item:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Styled ListView<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-triggers.png "</bpt>StylingIntro_triggers<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>EventTriggers and Storyboards</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Another type of trigger is the <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph>, which starts a set of actions based on the occurrence of an event.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For example, the following <ph id="ph1">&lt;xref:System.Windows.EventTrigger&gt;</ph> objects specify that when the mouse pointer enters the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> property animates to a value of <ph id="ph4">`90`</ph> over a <ph id="ph5">`0.2`</ph> second period.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>When the mouse moves away from the item, the property returns to the original value over a period of <ph id="ph1">`1`</ph> second.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Note how it is not necessary to specify a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.DoubleAnimation.To%2A&gt;</ph> value for the <ph id="ph2">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> animation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This is because the animation is able to keep track of the original value.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In the following illustration, the mouse is pointing to the third item:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Styling sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-eventtriggers.png "</bpt>StylingIntro_EventTriggers<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>MultiTriggers, DataTriggers, and MultiDataTriggers</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In addition to <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.EventTrigger&gt;</ph>, there are other types of triggers.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.MultiTrigger&gt;</ph> allows you to set property values based on multiple conditions.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>You use <ph id="ph1">&lt;xref:System.Windows.DataTrigger&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.MultiDataTrigger&gt;</ph> when the property of your condition is data-bound.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Shared Resources and Themes</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>A typical <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> application might have multiple user interface (UI) resources that are applied throughout the application.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Collectively, this set of resources can be considered the theme for the application.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> provides support for packaging user interface (UI) resources as a theme by using a resource dictionary that is encapsulated as the <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>themes are defined by using the styling and templating mechanism that <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> exposes for customizing the visuals of any element.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>theme resources are stored in embedded resource dictionaries.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>These resource dictionaries must be embedded within a signed assembly, and can either be embedded in the same assembly as the code itself or in a side-by-side assembly.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>In the case of PresentationFramework.dll, the assembly which contains <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> controls, theme resources are in a series of side-by-side assemblies.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The theme becomes the last place to look when searching for the style of an element.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Typically, the search will begin by walking up the element tree searching for an appropriate resource, then look in the application resource collection and finally query the system.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>This gives application developers a chance to redefine the style for any object at the tree or application level before reaching the theme.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You can define resource dictionaries as individual files that enable you to reuse a theme across multiple applications.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>You can also create swappable themes by defining multiple resource dictionaries that provide the same types of resources but with different values.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Redefining these styles or other resources at the application level is the recommended approach for skinning an application.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>To share a set of resources, including styles and templates, across applications, you can create a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> file and define a <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For example, take a look at the following illustration that shows part of the <bpt id="p1">[</bpt>Styling with ControlTemplates Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160041)</ept>:</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Control Template Examples<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/controls/media/stylingintro-controltemplateexamples.png "</bpt>StylingIntro_ControlTemplateExamples<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If you look at the <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> files in the sample, you will notice that the files all have the following:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>It is the sharing of <ph id="ph1">`shared.xaml`</ph>, which defines a <ph id="ph2">&lt;xref:System.Windows.ResourceDictionary&gt;</ph> that contains a set of style and brush resources that enables the controls in the sample to have a consistent look.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Merged Resource Dictionaries<ept id="p1">](../../../../docs/framework/wpf/advanced/merged-resource-dictionaries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If you are creating a theme for you custom control, see the External Control Library section of the <bpt id="p1">[</bpt>Control Authoring Overview<ept id="p1">](../../../../docs/framework/wpf/controls/control-authoring-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pack URIs in WPF<ept id="p1">](../../../../docs/framework/wpf/app-development/pack-uris-in-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Find ControlTemplate-Generated Elements<ept id="p1">](../../../../docs/framework/wpf/controls/how-to-find-controltemplate-generated-elements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Find DataTemplate-Generated Elements<ept id="p1">](../../../../docs/framework/wpf/data/how-to-find-datatemplate-generated-elements.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>