<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c82900860a197787c02cb351771a8afee6776bc9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\samples\loosely-typed-extensions-sample.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3564c905bc46a1b7f8c9d6af5549f9bfd70f40fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b2a20cd918725e9110d0d104122b96f9f79436e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Loosely-Typed Extensions Sample | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Loosely-Typed Extensions Sample</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Syndication object model provides rich support for working with extension dataâ€”information that is present in a syndication feed's XML representation but not explicitly exposed by classes such as <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Syndication.SyndicationItem&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This sample illustrates the basic techniques for working with extension data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The sample uses the <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed&gt;</ph> class for the purposes of the example.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, the patterns demonstrated in this sample can be used with all of the Syndication classes that support extension data:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Sample XML</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For reference, the following XML document is used in this sample.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This document contains the following pieces of extension data:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`myAttribute`</ph> attribute of the <ph id="ph2">`&lt;feed&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;simpleString&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;DataContractExtension&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;XmlSerializerExtension&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;xElementExtension&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Writing Extension Data</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Attribute extensions are created by adding entries to the <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions%2A&gt;</ph> collection as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Element extensions are created by adding entries to the <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These extensions can by basic values such as strings, XML serializations of .NET Framework objects, or XML nodes coded by hand.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following sample code creates an extension element named <ph id="ph1">`simpleString`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The XML namespace for this element is the empty namespace ("") and its value is a text node that contains the string "hello, world!".</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>One way to create complex element extensions that consist of many nested elements is to use the .NET Framework APIs for serialization (both the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> are supported) as shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`DataContractExtension`</ph> and <ph id="ph2">`XmlSerializerExtension`</ph> are custom types written for use with a serializer.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationElementExtensionCollection&gt;</ph> class can also be used to create element extensions from an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This allows for easy integration with XML processing APIs such as <ph id="ph1">&lt;xref:System.Xml.Linq.XElement&gt;</ph> as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Reading Extension Data</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The values for attribute extensions can be obtained by looking up the attribute in the <ph id="ph1">&lt;xref:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions%2A&gt;</ph> collection by its <ph id="ph2">&lt;xref:System.Xml.XmlQualifiedName&gt;</ph> as shown in the following sample code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Element extensions are accessed using the <ph id="ph1">`ReadElementExtensions&lt;T&gt;`</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is also possible to obtain an <ph id="ph1">`XmlReader`</ph> at individual element extensions by using the <ph id="ph2">&lt;xref:System.ServiceModel.Syndication.SyndicationElementExtension.GetReader&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Ensure that you have performed the <bpt id="p1">[</bpt>One-Time Setup Procedure for the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/one-time-setup-procedure-for-the-wcf-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To build the C# or Visual Basic .NET edition of the solution, follow the instructions in <bpt id="p1">[</bpt>Building the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/building-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To run the sample in a single- or cross-machine configuration, follow the instructions in <bpt id="p1">[</bpt>Running the Windows Communication Foundation Samples<ept id="p1">](../../../../docs/framework/wcf/samples/running-the-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Strongly-Typed Extensions<ept id="p1">](../../../../docs/framework/wcf/samples/strongly-typed-extensions-sample.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>WCF Syndication<ept id="p1">](../../../../docs/framework/wcf/feature-details/wcf-syndication.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>