<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="metadata-architecture-overview.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3406b2639bf992584cbbeb5ad0f1e38e538383e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\metadata-architecture-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0aef83fb6f9d0c73901dcb357ef65aa63d397215</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e048fbf2d6b6d9c0b67b44bc00e71844939f2fcb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Metadata Architecture Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Metadata Architecture Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> provides a rich infrastructure for exporting, publishing, retrieving, and importing service metadata.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services use metadata to describe how to interact with the service's endpoints so that tools, such as Svcutil.exe, can automatically generate client code for accessing the service.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Most of the types that make up the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> metadata infrastructure reside in the <ph id="ph2">&lt;xref:System.ServiceModel.Description&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> class to describe endpoints in a service.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> to generate metadata for service endpoints or import service metadata to generate <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> instances.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> represents the metadata for a service as an instance of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataSet&gt;</ph> type, the structure of which is strongly tied to the metadata serialization format defined in WS-MetadataExchange.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataSet&gt;</ph> type bundles the actual service metadata, such as Web Services Description Language (WSDL) documents, XML schema documents, or WS-Policy expressions, as a collection of <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataSection&gt;</ph> instances.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataSection?displayProperty=fullName&gt;</ph> instance contains a specific metadata dialect and an identifier.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataSection?displayProperty=fullName&gt;</ph> can contain the following items in its <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataSection.Metadata%2A?displayProperty=fullName&gt;</ph> property:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Raw metadata.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataReference&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataLocation&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataReference?displayProperty=fullName&gt;</ph> instances  point to another metadata exchange (MEX) endpoint and <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataLocation?displayProperty=fullName&gt;</ph> instances point to a metadata document using an HTTP URL.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports using WSDL documents to describe service endpoints, service contracts, bindings, message exchange patterns, messages and fault messages implemented by a service.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Data types used by the service are described in WSDL documents using XML schema.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Schema Import and Export<ept id="p1">](../../../../docs/framework/wcf/feature-details/schema-import-and-export.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> to export and import WSDL extensions for service behavior, contract behaviors, and binding elements that extend the functionality of a service.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Exporting Custom Metadata for a WCF Extension<ept id="p1">](../../../../docs/framework/wcf/extending/exporting-custom-metadata-for-a-wcf-extension.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Exporting Service Metadata</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, <bpt id="p1">*</bpt>metadata export<ept id="p1">*</ept> is the process of describing service endpoints and projecting them into a parallel, standardized representation that clients can use to understand how to use the service.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To export metadata from <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> instances, use an implementation of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataExporter&gt;</ph> abstract class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=fullName&gt;</ph> implementation generates metadata that is encapsulated in a <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataSet&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=fullName&gt;</ph> class provides a framework for generating policy expressions that describe the capabilities and requirements of an endpoint binding and its associated operations, messages, and faults.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These policy expressions are captured in a <ph id="ph1">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=fullName&gt;</ph> implementation can then attach these policy expressions to the metadata it generates.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=fullName&gt;</ph> calls into each <ph id="ph2">&lt;xref:System.ServiceModel.Channels.BindingElement?displayProperty=fullName&gt;</ph> that implements the <ph id="ph3">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension&gt;</ph> interface in the binding of a <ph id="ph4">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> when generating a <ph id="ph5">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph> object for the <ph id="ph6">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=fullName&gt;</ph> implementation to use.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can export new policy assertions by implementing the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IPolicyExportExtension&gt;</ph> interface on your custom implementations of the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.BindingElement&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlExporter&gt;</ph> type is the implementation of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataExporter?displayProperty=fullName&gt;</ph> abstract class included with <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlExporter&gt;</ph> type generates WSDL metadata with attached policy expressions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To export custom WSDL metadata or WSDL extensions for endpoint behaviors, contract behaviors, or binding elements in a service endpoint, you can implement the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension&gt;</ph> interface.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlExporter&gt;</ph> looks at a <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> instance for binding elements, operation behaviors, contract behaviors, and endpoint behaviors that implement the <ph id="ph3">&lt;xref:System.ServiceModel.Description.IWsdlExportExtension&gt;</ph> interface when generating the WSDL document.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Publishing Service Metadata</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> services publish metadata by exposing one or more metadata endpoints.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Publishing service metadata makes service metadata available using standardized protocols, such as MEX and HTTP/GET requests.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Metadata endpoints are similar to other service endpoints in that they have an address, a binding, and a contract.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can add metadata endpoints to a service host in configuration or in code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To publish metadata endpoints for a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service, you must first add an instance of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> service behavior to the service.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Adding a <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName&gt;</ph> instance to your service augments your service with the ability to publish metadata by exposing one or more metadata endpoints.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Once you add the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName&gt;</ph> service behavior you can then expose metadata endpoints that support the MEX protocol or metadata endpoints that respond to HTTP/GET requests.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To add metadata endpoints that use the MEX protocol, add service endpoints to your service host that use the service contract named IMetadataExchange.<ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>defines the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IMetadataExchange&gt;</ph> interface that has this service contract name.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>WS-MetadataExchange endpoints, or MEX endpoints, can use one of the four default bindings exposed by the static factory methods on the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeBindings&gt;</ph> class to match the default bindings used by <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> tools, such as Svcutil.exe.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can also configure MEX metadata endpoints using a custom binding.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> uses a <ph id="ph2">&lt;xref:System.ServiceModel.Description.WsdlExporter?displayProperty=fullName&gt;</ph> to export metadata for all service endpoints in your service.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> exporting metadata from a service, see <bpt id="p1">[</bpt>Exporting and Importing Metadata<ept id="p1">](../../../../docs/framework/wcf/feature-details/exporting-and-importing-metadata.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> augments your service host by adding a <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceMetadataExtension&gt;</ph> instance as an extension to your service host.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataExtension?displayProperty=fullName&gt;</ph> provides the implementation for the metadata publishing protocols.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataExtension?displayProperty=fullName&gt;</ph> to get the service's metadata at runtime by accessing the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceMetadataExtension.Metadata%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you add a MEX endpoint in your application configuration file and then attempt to add the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> to your service host in code you get the following exception:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>System.InvalidOperationException: The contract name 'IMetadataExchange' could not be found in the list of contracts implemented by the service Service1.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add a ServiceMetadataBehavior to the configuration file or to the ServiceHost directly to enable support for this contract.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can work around this issue by either adding the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> in the configuration file or adding both the endpoint and <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> in code.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For an example of adding <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> in an application configuration file, see the <bpt id="p1">[</bpt>Getting Started<ept id="p1">](../../../../docs/framework/wcf/samples/getting-started-sample.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For an example of adding <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceMetadataBehavior&gt;</ph> in code, see the <bpt id="p1">[</bpt>Self-Host<ept id="p1">](../../../../docs/framework/wcf/samples/self-host.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When publishing metadata for a service that exposes two different service contracts in which each contain an operation of the same name an exception is thrown.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, if you have a service that exposes a service contract called ICarService that has an operation Get(Car c) and the same service exposes a service contract called IBookService that has an operation Get(Book b), an exception is thrown or an error message is displayed when generating the service's metadata.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To work around this issue do one of the following:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Rename one of the operations.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.ServiceModel.OperationContractAttribute.Name%2A&gt;</ph> to a different name.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Set one of the operations' namespaces to a different namespace using the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieving Service Metadata</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can retrieve service metadata using standardized protocols such as WS-MetadataExchange and HTTP.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Both of these protocols are supported by the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You retrieve service metadata using the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> type by providing an address and an optional binding.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The binding used by a <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> instance can be one of the default bindings from the <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataExchangeBindings&gt;</ph> static class, a user-supplied binding, or a binding loaded from an endpoint configuration for the <ph id="ph3">`IMetadataExchange`</ph> contract.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> can also resolve HTTP URL references to metadata using the <ph id="ph2">&lt;xref:System.Net.HttpWebRequest&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>By default, a <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> instance is tied to a single <ph id="ph2">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can change or replace the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.ChannelFactoryBase&gt;</ph> instance used by a <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> by overriding the <ph id="ph3">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient.GetChannelFactory%2A&gt;</ph> virtual method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Similarly, you can change or replace the <ph id="ph1">&lt;xref:System.Net.HttpWebRequest?displayProperty=fullName&gt;</ph> instance used by a <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> to make HTTP/GET requests by overriding the <ph id="ph3">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient.GetWebRequest%2A?displayProperty=fullName&gt;</ph> virtual method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can retrieve service metadata using WS-MetadataExchange or HTTP/GET requests by using the Svcutil.exe tool and passing the <bpt id="p1">**</bpt>/target:metadata<ept id="p1">**</ept> switch and an address.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Svcutil.exe downloads the metadata at the specified address and saves the files to disk.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Svcutil.exe uses a <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName&gt;</ph> instance internally and loads an MEX endpoint configuration (from the application configuration file) whose name matches the scheme of the address passed to Svcutil.exe, if one exists.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Otherwise, Svcutil.exe defaults to using one of the bindings defined by the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataExchangeBindings&gt;</ph> static factory type.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Importing Service Metadata</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, metadata import is the process of generating an abstract representation of a service or its component parts from its metadata.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> can import <ph id="ph2">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> instances, <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> instances or <ph id="ph4">&lt;xref:System.ServiceModel.Description.ContractDescription&gt;</ph> instances from a WSDL document for a service.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To import service metadata in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, use an implementation of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataImporter&gt;</ph> abstract class.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Types that derive from the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataImporter?displayProperty=fullName&gt;</ph> class implement support for importing metadata formats that take advantage of the WS-Policy import logic in <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataImporter?displayProperty=fullName&gt;</ph> implementation collects the policy expressions attached to the service metadata in a <ph id="ph2">&lt;xref:System.ServiceModel.Description.PolicyConversionContext&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataImporter?displayProperty=fullName&gt;</ph> then processes the policies as part of importing the metadata by calling the implementations of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt;</ph> interface in the <ph id="ph3">&lt;xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can add support for importing new policy assertions to a <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataImporter?displayProperty=fullName&gt;</ph> by adding your own implementation of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IPolicyImportExtension&gt;</ph> interface to the <ph id="ph3">&lt;xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A&gt;</ph> collection on a <ph id="ph4">&lt;xref:System.ServiceModel.Description.MetadataImporter?displayProperty=fullName&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Alternatively, you can register your policy import extension in your client application configuration file.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName&gt;</ph> type is the implementation of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataImporter?displayProperty=fullName&gt;</ph> abstract class included with <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName&gt;</ph> type imports WSDL metadata with attached policies that are bundled in a <ph id="ph2">&lt;xref:System.ServiceModel.Description.MetadataSet&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>You can add support for importing WSDL extensions by implementing the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension&gt;</ph> interface and then adding your implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A&gt;</ph> property on your <ph id="ph3">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName&gt;</ph> can also load implementations of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName&gt;</ph> interface registered in your client application configuration file.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Dynamic Bindings</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can dynamically update the binding that you use to create a channel to a service endpoint in the event that the binding for the endpoint changes or you want to create a channel to an endpoint that uses the same contract but has a different binding.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.ServiceModel.Description.MetadataResolver&gt;</ph> static class to retrieve and import metadata at runtime for service endpoints that implement a specific contract.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can then use the imported <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName&gt;</ph> objects to create a client or channel factory to the desired endpoint.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Metadata Formats<ept id="p1">](../../../../docs/framework/wcf/feature-details/metadata-formats.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exporting and Importing Metadata<ept id="p1">](../../../../docs/framework/wcf/feature-details/exporting-and-importing-metadata.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Publishing Metadata<ept id="p1">](../../../../docs/framework/wcf/feature-details/publishing-metadata.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving Metadata<ept id="p1">](../../../../docs/framework/wcf/feature-details/retrieving-metadata.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using Metadata<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-metadata.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations with Metadata<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-with-metadata.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Extending the Metadata System<ept id="p1">](../../../../docs/framework/wcf/extending/extending-the-metadata-system.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>