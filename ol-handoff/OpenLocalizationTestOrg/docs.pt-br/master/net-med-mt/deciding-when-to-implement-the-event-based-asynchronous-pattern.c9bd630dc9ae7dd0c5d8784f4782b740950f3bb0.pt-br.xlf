<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61e8df29720f8f6c66894ac580fbff0d97175c7f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\deciding-when-to-implement-the-event-based-asynchronous-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b52f906121c5dcc8dbff1671904b04d98a0c6800</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c11c6197d0f69644b5b1d39f7176235799a4f54</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Deciding When to Implement the Event-based Asynchronous Pattern | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Deciding When to Implement the Event-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Event-based Asynchronous Pattern provides a pattern for exposing the asynchronous behavior of a class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>With the introduction of this pattern, the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> defines two patterns for exposing asynchronous behavior: the Asynchronous Pattern based on the <ph id="ph2">&lt;xref:System.IAsyncResult?displayProperty=fullName&gt;</ph> interface, and the event-based pattern.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes when it is appropriate for you to implement both patterns.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about asynchronous programming with the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> interface, see <bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>General Principles</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In general, you should expose asynchronous features using the Event-based Asynchronous Pattern whenever possible.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, there are some requirements that the event-based pattern cannot meet.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In those cases, you may need to implement the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern in addition to the event-based pattern.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It is rare for the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern to be implemented without the event-based pattern also being implemented.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Guidelines</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following list describes the guidelines for when you should implement Event-based Asynchronous Pattern:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use the event-based pattern as the default API to expose asynchronous behavior for your class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Do not expose the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern when your class is primarily used in a client application, for example Windows Forms.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Only expose the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern when it is necessary for meeting your requirements.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, compatibility with an existing API may require you to expose the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Do not expose the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern without also exposing the event-based pattern.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you must expose the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern, do so as an advanced option.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, if you generate a proxy object, generate the event-based pattern by default, with an option to generate the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Build your event-based pattern implementation on your <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern implementation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Avoid exposing both the event-based pattern and the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern on the same class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Expose the event-based pattern on "higher level" classes and the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern on "lower level" classes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, compare the event-based pattern on the <ph id="ph1">&lt;xref:System.Net.WebClient&gt;</ph> component with the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pattern on the <ph id="ph3">&lt;xref:System.Web.HttpRequest&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Expose the event-based pattern and the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern on the same class when compatibility requires it.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, if you have already released an API that uses the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern, you would need to retain the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pattern for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Expose the event-based pattern and the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern on the same class if the resulting object model complexity outweighs the benefit of separating the implementations.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It is better to expose both patterns on a single class than to avoid exposing the event-based pattern.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you must expose both the event-based pattern and <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern on a single class, use <ph id="ph2">&lt;xref:System.ComponentModel.EditorBrowsableAttribute&gt;</ph> set to <ph id="ph3">&lt;xref:System.ComponentModel.EditorBrowsableState&gt;</ph> to mark the <ph id="ph4">&lt;xref:System.IAsyncResult&gt;</ph> pattern implementation as an advanced feature.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This indicates to design environments, such as <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> IntelliSense, not to display the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> properties and methods.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These properties and methods are still fully usable, but the developer working through IntelliSense has a clearer view of the API.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Criteria for Exposing the IAsyncResult Pattern in Addition to the Event-based Pattern</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>While the Event-based Asynchronous Pattern has many benefits under the previously mentioned scenarios, it does have some drawbacks, which you should be aware of if performance is your most important requirement.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>There are three scenarios that the event-based pattern does not address as well as the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Blocking wait on one <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Blocking wait on many <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> objects</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Polling for completion on the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can address these scenarios by using the event-based pattern, but doing so is more cumbersome than using the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Developers often use the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern for services that typically have very high performance requirements.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example, the polling for completion scenario is a high-performance server technique.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Additionally, the event-based pattern is less efficient than the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern because it creates more objects, especially <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph>, and because it synchronizes across threads.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following list shows some recommendations to follow if you decide to use the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Only expose the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern when you specifically require support for <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> or <ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Only expose the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern when you have an existing API that uses the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pattern.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If you have an existing API based on the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern, consider also exposing the event-based pattern in your next release.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Only expose <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> pattern if you have high performance requirements which you have verified cannot be met by the event-based pattern but can be met by the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> pattern.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Implementing a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/component-that-supports-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Multithreaded Programming with the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/multithreaded-programming-with-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Best Practices for Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>