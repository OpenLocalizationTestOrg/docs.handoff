<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="variables-and-arguments.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-7148b53" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">903d4a7cd2525a75142eb4fc516ec2ed7c92ff70</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\variables-and-arguments.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa23d12a40b038d035c3c5c0b25928c2dfe3f17b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e426a6b98c997b33db5099220b2503e6412402a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Variables and Arguments | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Variables and Arguments</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[wf](../../../includes/wf-md.md)]</ph>, variables represent the storage of data and arguments represent the flow of data into and out of an activity.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An activity has a set of arguments and they make up the signature of the activity.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Additionally, an activity can maintain a list of variables to which a developer can add or remove variables during the design of a workflow.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An argument is bound using an expression that returns a value.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Variables</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Variables are storage locations for data.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Variables are declared as part of the definition of a workflow.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Variables take on values at runtime and these values are stored as part of the state of a workflow instance.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A variable definition specifies the type of the variable and optionally, the name.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following code shows how to declare a variable, assign a value to it using an <ph id="ph1">&lt;xref:System.Activities.Statements.Assign%601&gt;</ph> activity, and then display its value to the console using a <ph id="ph2">&lt;xref:System.Activities.Statements.WriteLine&gt;</ph> activity.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A default value expression can optionally be specified as part of a variable declaration.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Variables also can have modifiers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if a variable is read-only then the read-only <ph id="ph1">&lt;xref:System.Activities.VariableModifiers&gt;</ph> modifier can be applied.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the following example, a read-only variable is created that has a default value assigned.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Variable Scoping</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The lifetime of a variable at runtime is equal to the lifetime of the activity that declares it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When an activity completes, its variables are cleaned up and can no longer be referenced.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Activity authors use arguments to define the way data flows into and out of an activity.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Each argument has a specified direction: <ph id="ph1">&lt;xref:System.Activities.ArgumentDirection&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.ArgumentDirection&gt;</ph>, or <ph id="ph3">&lt;xref:System.Activities.ArgumentDirection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The workflow runtime makes the following guarantees about the timing of data movement into and out of activities:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When an activity starts executing, the values of all of its input and input/output arguments are calculated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, regardless of when <ph id="ph1">&lt;xref:System.Activities.Argument.Get%2A&gt;</ph> is called, the value returned is the one calculated by the runtime prior to its invocation of <ph id="ph2">`Execute`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref:System.Activities.InOutArgument%601.Set%2A&gt;</ph> is called, the runtime sets the value immediately.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Arguments can optionally have their <ph id="ph1">&lt;xref:System.Activities.Argument.EvaluationOrder%2A&gt;</ph> specified.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Argument.EvaluationOrder%2A&gt;</ph> is a zero-based value that specifies the order in which the argument is evaluated.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By default, the evaluation order of the argument is unspecified and is equal to the <ph id="ph1">&lt;xref:System.Activities.Argument.UnspecifiedEvaluationOrder&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Set <ph id="ph1">&lt;xref:System.Activities.Argument.EvaluationOrder%2A&gt;</ph> to a value greater or equal to zero to specify an evaluation order for this argument.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[wf2](../../../includes/wf2-md.md)]</ph> evaluates arguments with a specified evaluation order in ascending order.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that arguments with an unspecified evaluation order are evaluated before those with a specified evaluation order.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An activity author can use a strongly-typed mechanism for exposing its arguments.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is accomplished by declaring properties of type <ph id="ph1">&lt;xref:System.Activities.InArgument%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.OutArgument%601&gt;</ph>, and <ph id="ph3">&lt;xref:System.Activities.InOutArgument%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This allows an activity author to establish a specific contract about the data going into and out of an activity.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Defining the Arguments on an Activity</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Arguments can be defined on an activity by specifying properties of type <ph id="ph1">&lt;xref:System.Activities.InArgument%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.OutArgument%601&gt;</ph>, and <ph id="ph3">&lt;xref:System.Activities.InOutArgument%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following code shows how to define the arguments for a <ph id="ph1">`Prompt`</ph> activity that takes in a string to display to the user and returns a string that contains the user's response.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Activities that return a single value can derive from <ph id="ph1">&lt;xref:System.Activities.Activity%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Activities.NativeActivity%601&gt;</ph>, or <ph id="ph3">&lt;xref:System.Activities.CodeActivity%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These activities have a well-defined <ph id="ph1">&lt;xref:System.Activities.OutArgument%601&gt;</ph> named <ph id="ph2">&lt;xref:System.Activities.Activity%601.Result%2A&gt;</ph> that contains the return value of the activity.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Using Variables and Arguments in Workflows</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example shows how variables and arguments are used in a workflow.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The workflow is a sequence that declares three variables: <ph id="ph1">`var1`</ph>, <ph id="ph2">`var2`</ph>, and <ph id="ph3">`var3`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The first activity in the workflow is an <ph id="ph1">`Assign`</ph> activity that assigns the value of variable <ph id="ph2">`var1`</ph> to the variable <ph id="ph3">`var2`</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is followed by a <ph id="ph1">`WriteLine`</ph> activity that prints the value of the <ph id="ph2">`var2`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next is another <ph id="ph1">`Assign`</ph> activity that assigns the value of variable <ph id="ph2">`var2`</ph> to the variable <ph id="ph3">`var3`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Finally there is another <ph id="ph1">`WriteLine`</ph> activity that prints the value of the <ph id="ph2">`var3`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`Assign`</ph> activity uses <ph id="ph2">`InArgument&lt;string&gt;`</ph> and <ph id="ph3">`OutArgument&lt;string&gt;`</ph> objects that explicitly represent the bindings for the activity's arguments.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InArgument&lt;string&gt;`</ph> is used for <ph id="ph2">&lt;xref:System.Activities.Statements.Assign.Value%2A&gt;</ph> because the value is flowing into the <ph id="ph3">&lt;xref:System.Activities.Statements.Assign%601&gt;</ph> activity through its <ph id="ph4">&lt;xref:System.Activities.Statements.Assign.Value%2A&gt;</ph> argument, and <ph id="ph5">`OutArgument&lt;string&gt;`</ph> is used for <ph id="ph6">&lt;xref:System.Activities.Statements.Assign.To%2A&gt;</ph> because the value is flowing out of the <ph id="ph7">&lt;xref:System.Activities.Statements.Assign.To%2A&gt;</ph> argument into the variable.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`Assign`</ph> activity accomplishes the same thing with more compact but equivalent syntax that uses implicit casts.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`WriteLine`</ph> activities also use the compact syntax.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using Variables and Arguments in Code-Based Activities</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The previous examples show how to use arguments and variables in workflows and declarative activities.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Arguments and variables are also used in code-based activities.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Conceptually the usage is very similar.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Variables represent data storage within the activity, and arguments represent the flow of data into or out of the activity, and are bound by the workflow author to other variables or arguments in the workflow that represent where the data flows to or from.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To get or set the value of a variable or argument in an activity, an activity context must be used that represents the current execution environment of the activity.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This is passed into the <ph id="ph1">&lt;xref:System.Activities.CodeActivity%601.Execute%2A&gt;</ph> method of the activity by the workflow runtime.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In this example, a custom <ph id="ph1">`Add`</ph> activity is defined that has two <ph id="ph2">&lt;xref:System.Activities.ArgumentDirection&gt;</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To access the value of the arguments, the <ph id="ph1">&lt;xref:System.Activities.Argument.Get%2A&gt;</ph> method is used and the context that was passed in by the workflow runtime is used.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>working with arguments, variables, and expressions in code, see <bpt id="p1">[</bpt>Authoring Workflows, Activities, and Expressions Using Imperative Code<ept id="p1">](../../../docs/framework/windows-workflow-foundation/authoring-workflows-activities-and-expressions-using-imperative-code.md)</ept> and <bpt id="p2">[</bpt>Required Arguments and Overload Groups<ept id="p2">](../../../docs/framework/windows-workflow-foundation/required-arguments-and-overload-groups.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>