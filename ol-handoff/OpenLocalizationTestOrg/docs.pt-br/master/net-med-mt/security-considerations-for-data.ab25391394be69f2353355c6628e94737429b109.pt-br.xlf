<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="security-considerations-for-data.md" source-language="en-US" target-language="pt-br">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75cacb1236b3aa715da9e9c396eabb60ff73be09</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\security-considerations-for-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">058a4885f5cdbf0bfce2b0ef1ae8db817d1b1004</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a99494b5777036041ae9aecafe479bcc43c191a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Security Considerations for Data | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Security Considerations for Data</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When dealing with data in <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>, you must consider a number of threat categories.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following table lists the most important threat classes that relate to data processing.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides tools to mitigate these threats.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Denial of service</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When receiving untrusted data, the data may cause the receiving side to access a disproportionate amount of various resources, such as memory, threads, available connections, or processor cycles by causing lengthy computations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A denial-of-service attack against a server may cause it to crash and be unable to process messages from other, legitimate clients.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Malicious code execution</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Incoming untrusted data causes the receiving side to run code it did not intend to.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Information disclosure</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The remote attacker forces the receiving party to respond to its requests in such a way as to disclose more information than it intends to.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>User-Provided Code and Code Access Security</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A number of places in the <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> infrastructure run code that is provided by the user.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> serialization engine may call user-provided property <ph id="ph2">`set`</ph> accessors and <ph id="ph3">`get`</ph> accessors.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> channel infrastructure may also call into user-provided derived classes of the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the code author to ensure that no security vulnerabilities exist.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, if you create a data contract type with a data member property of type integer, and in the <ph id="ph1">`set`</ph> accessor implementation allocate an array based on the property value, you expose the possibility of a denial-of-service attack if a malicious message contains an extremely large value for this data member.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In general, avoid any allocations based on incoming data or lengthy processing in user-provided code (especially if lengthy processing can be caused by a small amount of incoming data).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When performing security analysis of user-provided code, make sure to also consider all failure cases (that is, all code branches where exceptions are thrown).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The ultimate example of user-provided code is the code inside your service implementation for each operation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The security of your service implementation is your responsibility.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is easy to inadvertently create insecure operation implementations that may result in denial-of-service vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, an operation that takes a string and returns the list of customers from a database whose name starts with that string.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you are working with a large database and the string being passed is just a single letter, your code may attempt to create a message larger than all available memory, causing the entire service to fail.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>(An <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> is not recoverable in the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> and always results in the termination of your application.)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You should ensure that no malicious code is plugged in to the various extensibility points.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is especially relevant when running under partial trust, dealing with types from partially-trusted assemblies, or creating components usable by partially-trusted code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For more information, see "Partial Trust Threats" in a later section.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that when running in partial trust, the data contract serialization infrastructure supports only a limited subset of the data contract programming model - for example, private data members or types using the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute are not supported.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Partial Trust<ept id="p1">](../../../../docs/framework/wcf/feature-details/partial-trust.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Avoiding Unintentional Information Disclosure</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When designing serializable types with security in mind, information disclosure is a possible concern.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Consider the following points:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> programming model allows the exposure of private and internal data outside of the type or assembly during serialization.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Additionally, the shape of a type can be exposed during schema export.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Be sure to understand your type's serialization projection.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you do not want anything exposed, disable serializing it (for example, by not applying the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute&gt;</ph> attribute in the case of a data contract).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Be aware that the same type may have multiple serialization projections, depending on the serializer in use.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The same type may expose one set of data when used with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and another set of data when used with the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Accidentally using the wrong serializer may lead to information disclosure.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> in legacy remote procedure call (RPC)/encoded mode may unintentionally expose the shape of the object graph on the sending side to the receiving side.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Preventing Denial-of-Service Attacks</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Quotas</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Causing the receiving side to allocate a significant amount of memory is a potential denial-of-service attack.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>While this section concentrates on memory consumption issues arising from large messages, other attacks may occur.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, messages may use a disproportionate amount of processing time.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Denial-of-service attacks are usually mitigated using quotas.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When a quota is exceeded, a <ph id="ph1">&lt;xref:System.ServiceModel.QuotaExceededException&gt;</ph> exception is normally thrown.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Without the quota, a malicious message may cause all available memory to be accessed, resulting in an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception, or all available stacks to be accessed, resulting in a <ph id="ph2">&lt;xref:System.StackOverflowException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The quota exceeded scenario is recoverable; if encountered in a running service, the message currently being processed is discarded and the service keeps running and processes further messages.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The out-of-memory and stack overflow scenarios, however, are not recoverable anywhere in the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph>; the service terminates if it encounters such exceptions.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Quotas in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> do not involve any pre-allocation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> quota (found on various classes) is set to 128 KB, it does not mean that 128 KB is automatically allocated for each message.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The actual amount allocated depends on the actual incoming message size.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Many quotas are available at the transport layer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>These are quotas enforced by the specific transport channel in use (HTTP, TCP, and so on).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>While this topic discusses some of these quotas, these quotas are described in detail in <bpt id="p1">[</bpt>Transport Quotas<ept id="p1">](../../../../docs/framework/wcf/feature-details/transport-quotas.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Hashtable Vulnerability</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A vulnerability exists when data contracts contain hashtables or collections.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The problem occurs if a large number of values are inserted into a hashtable where a large number of those values generate the same hash value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This can be used as a DOS attack.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This vulnerability can be mitigated by setting the MaxRecievedMessageSize binding quota.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Care must be taken while setting this quota in order to prevent such attacks.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This quota puts an upper limit on the size of WCF message.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Additionally, avoid using hashtables or collections in your data contracts.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Limiting Memory Consumption Without Streaming</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The security model around large messages depends on whether streaming is in use.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In the basic, non-streamed case, messages are buffered into memory.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In this case, use the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A&gt;</ph> quota on the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.TransportBindingElement&gt;</ph> or on the system-provided bindings to protect against large messages by limiting the maximum message size to access.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Note that a service may be processing multiple messages at the same time, in which case they are all in memory.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Use the throttling feature to mitigate this threat.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Also note that <ph id="ph1">`MaxReceivedMessageSize`</ph> does not place an upper bound on per-message memory consumption, but limits it to within a constant factor.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">`MaxReceivedMessageSize`</ph> is 1 MB and a 1-MB message is received and then deserialized, additional memory is required to contain the deserialized object graph, resulting in total memory consumption well over 1 MB.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>For this reason, avoid creating serializable types that could result in significant memory consumption without much incoming data.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, a data contract "MyContract" with 50 optional data member fields and an additional 100 private fields could be instantiated with the XML construction "<ph id="ph1">\&lt;</ph>MyContract/&gt;".</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This XML results in memory being accessed for 150 fields.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Note that data members are optional by default.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The problem is compounded when such a type is part of an array.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxReceivedMessageSize`</ph> alone is not enough to prevent all denial-of-service attacks.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, the deserializer may be forced to deserialize a deeply-nested object graph (an object that contains another object that contains yet another one, and so on) by an incoming message.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> call methods in a nested way to deserialize such graphs.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Deep nesting of method calls may result in an unrecoverable <ph id="ph1">&lt;xref:System.StackOverflowException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This threat is mitigated by setting the <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.XmlDictionaryReaderQuotasElement.MaxDepth%2A&gt;</ph> quota to limit the level of XML nesting, as discussed in the "Using XML Safely" section later in the topic.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Setting additional quotas to <ph id="ph1">`MaxReceivedMessageSize`</ph> is especially important when using binary XML encoding.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Using binary encoding is somewhat equivalent to compression: a small group of bytes in the incoming message may represent a lot of data.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Thus, even a message fitting into the <ph id="ph1">`MaxReceivedMessageSize`</ph> limit may take up much more memory in fully expanded form.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>To mitigate such XML-specific threats, all of the XML reader quotas must be set correctly, as discussed in the "Using XML Safely" section later in this topic.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Limiting Memory Consumption with Streaming</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When streaming, you may use a small <ph id="ph1">`MaxReceivedMessageSize`</ph> setting to protect against denial-of-service attacks.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>However, more complicated scenarios are possible with streaming.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>For example, a file upload service accepts files larger than all available memory.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In this case, set the <ph id="ph1">`MaxReceivedMessageSize`</ph> to an extremely large value, expecting that almost no data is buffered in memory and the message streams directly to disk.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If a malicious message can somehow force <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> to buffer data instead of streaming it in this case, <ph id="ph2">`MaxReceivedMessageSize`</ph> no longer protects against the message accessing all available memory.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>To mitigate this threat, specific quota settings exist on various <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> data-processing components that limit buffering.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The most important of these is the <ph id="ph1">`MaxBufferSize`</ph> property on various transport binding elements and standard bindings.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When streaming, this quota should be set taking into account the maximum amount of memory you are willing to allocate per message.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>As with <ph id="ph1">`MaxReceivedMessageSize`</ph>, the setting does not put an absolute maximum on memory consumption but only limits it to within a constant factor.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Also, as with <ph id="ph1">`MaxReceivedMessageSize`</ph>, be aware of the possibility of multiple messages being processed simultaneously.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>MaxBufferSize Details</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MaxBufferSize`</ph> property limits any bulk buffering <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> does.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> always buffers SOAP headers and SOAP faults, as well as any MIME parts found to be not in the natural reading order in an Message Transmission Optimization Mechanism (MTOM) message.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This setting limits the amount of buffering in all these cases.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> accomplishes this by passing the <ph id="ph2">`MaxBufferSize`</ph> value to the various components that may buffer.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For example, some <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.CreateMessage%2A&gt;</ph> overloads of the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class take a <ph id="ph3">`maxSizeOfHeaders`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> passes the <ph id="ph2">`MaxBufferSize`</ph> value to this parameter to limit the amount of SOAP header buffering.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>It is important to set this parameter when using the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class directly.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>In general, when using a component in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> that takes quota parameters, it is important to understand the security implications of these parameters and set them correctly.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The MTOM message encoder also has a <ph id="ph1">`MaxBufferSize`</ph> setting.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When using standard bindings, this is set automatically to the transport-level <ph id="ph1">`MaxBufferSize`</ph> value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>However, when using the MTOM message encoder binding element to construct a custom binding, it is important to set the <ph id="ph1">`MaxBufferSize`</ph> property to a safe value when streaming is used.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>XML-Based Streaming Attacks</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxBufferSize`</ph> alone is not enough to ensure that <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> cannot be forced into buffering when streaming is expected.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> XML readers always buffer the entire XML element start tag when starting to read a new element.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This is done so that namespaces and attributes are properly processed.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`MaxReceivedMessageSize`</ph> is configured to be large (for example, to enable a direct-to-disk large file streaming scenario), a malicious message may be constructed where the entire message body is a large XML element start tag.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>An attempt to read it results in an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This is one of many possible XML-based denial-of-service attacks that can all be mitigated using XML reader quotas, discussed in the "Using XML Safely" section later in this topic.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>When streaming, it is especially important to set all of these quotas.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Mixing Streaming and Buffering Programming Models</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Many possible attacks arise from mixing streaming and non-streaming programming models in the same service.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Suppose there is a service contract with two operations: one takes a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> and another takes an array of some custom type.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Suppose also that <ph id="ph1">`MaxReceivedMessageSize`</ph> is set to a large value to enable the first operation to process large streams.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Unfortunately, this means that large messages can now be sent to the second operation as well, and the deserializer buffers data in memory as an array before the operation is called.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This is a potential denial-of-service attack: the <ph id="ph1">`MaxBufferSize`</ph> quota does not limit the size of the message body, which is what the deserializer works with.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>For this reason, avoid mixing stream-based and non-streamed operations in the same contract.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If you absolutely must mix the two programming models, use the following precautions:</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Turn off the <ph id="ph1">&lt;xref:System.Runtime.Serialization.IExtensibleDataObject&gt;</ph> feature by setting the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IgnoreExtensionDataObject%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This ensures that only members that are a part of the contract are deserialized.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to a safe value.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This quota is also available on the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph> attribute or through configuration.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>This quota limits the number of objects that are deserialized in one deserialization episode.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Normally, each operation parameter or message body part in a message contract is deserialized in one episode.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>When deserializing arrays, each array entry is counted as a separate object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Set all of the XML reader quotas to safe values.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Pay attention to <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A&gt;</ph> and avoid strings in non-streaming operations.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Review the list of known types, keeping in mind that any one of them can be instantiated at any time (see the "Preventing Unintended Types from Being Loaded" section later in this topic).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Do not use any types that implement the <ph id="ph1">&lt;xref:System.Xml.Serialization.IXmlSerializable&gt;</ph> interface that buffer a lot of data.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Do not add such types to the list of known types.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlNode&gt;</ph> arrays, <ph id="ph3">&lt;xref:System.Byte&gt;</ph> arrays, or types that implement <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> in a contract.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlNode&gt;</ph> arrays, <ph id="ph3">&lt;xref:System.Byte&gt;</ph> arrays, or types that implement <ph id="ph4">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> in the list of known types.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The preceding precautions apply when the non-streamed operation uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Never mix streaming and non-streaming programming models on the same service if you are using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, because it does not have the protection of the <ph id="ph2">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior.MaxItemsInObjectGraph%2A&gt;</ph> quota.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Slow Stream Attacks</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A class of streaming denial-of-service attacks does not involve memory consumption.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Instead, the attack involves a slow sender or receiver of data.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>While waiting for the data to be sent or received, resources such as threads and available connections are exhausted.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>This situation could arise either as a result of a malicious attack or from a legitimate sender/receiver on a slow network connection.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>To mitigate these attacks, set the transport time-outs correctly.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Transport Quotas<ept id="p1">](../../../../docs/framework/wcf/feature-details/transport-quotas.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Secondly, never use synchronous <ph id="ph1">`Read`</ph> or <ph id="ph2">`Write`</ph> operations when working with streams in <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Using XML Safely</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Although this section is about XML, the information also applies to JavaScript Object Notation (JSON) documents.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The quotas work similarly, using <bpt id="p1">[</bpt>Mapping Between JSON and XML<ept id="p1">](../../../../docs/framework/wcf/feature-details/mapping-between-json-and-xml.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Secure XML Readers</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The XML Infoset forms the basis of all message processing in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>When accepting XML data from an untrusted source, a number of denial-of-service attack possibilities exist that must be mitigated.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides special, secure XML readers.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>These readers are created automatically when using one of the standard encodings in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> (text, binary, or MTOM).</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Some of the security features on these readers are always active.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example, the readers never process document type definitions (DTDs), which are a potential source of denial-of-service attacks and should never appear in legitimate SOAP messages.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Other security features include reader quotas that must be configured, which are described in the following section.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>When working directly with XML readers (such as when writing your own custom encoder or when working directly with the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class), always use the <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> secure readers when there is a chance of working with untrusted data.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Create the secure readers by calling one of the static factory method overloads of <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader.CreateTextReader%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReader.CreateBinaryReader%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.XmlDictionaryReader.CreateMtomReader%2A&gt;</ph> on the <ph id="ph4">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>When creating a reader, pass in secure quota values.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Do not call the <ph id="ph1">`Create`</ph> method overloads.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>These do not create a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> reader.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Instead, a reader is created that is not protected by the security features described in this section.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Reader Quotas</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The secure XML readers have five configurable quotas.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>These are normally configured using the <ph id="ph1">`ReaderQuotas`</ph> property on the encoding binding elements or standard bindings, or by using an <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph> object passed when creating a reader.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>MaxBytesPerRead</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>This quota limits the number of bytes that are read in a single <ph id="ph1">`Read`</ph> operation when reading the element start tag and its attributes.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>(In non-streamed cases, the element name itself is not counted against the quota.) <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead%2A&gt;</ph> is important for the following reasons:</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The element name and its attributes are always buffered in memory when they are being read.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Therefore, it is important to set this quota correctly in streaming mode to prevent excessive buffering when streaming is expected.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>See the <ph id="ph1">`MaxDepth`</ph> quota section for information about the actual amount of buffering that takes place.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Having too many XML attributes may use up disproportionate processing time because attribute names have to be checked for uniqueness.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxBytesPerRead`</ph> mitigates this threat.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>MaxDepth</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This quota limits the maximum nesting depth of XML elements.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>For example, the document "<ph id="ph1">\&lt;</ph>A&gt;<ph id="ph2">\&lt;</ph>B&gt;<ph id="ph3">\&lt;</ph>C/&gt;<ph id="ph4">\&lt;</ph>/B&gt;<ph id="ph5">\&lt;</ph>/A&gt;" has a nesting depth of three.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxDepth%2A&gt;</ph> is important for the following reasons:</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxDepth`</ph> interacts with <ph id="ph2">`MaxBytesPerRead`</ph>: the reader always keeps data in memory for the current element and all of its ancestors, so the maximum memory consumption of the reader is proportional to the product of these two settings.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>When deserializing a deeply-nested object graph, the deserializer is forced to access the entire stack and throw an unrecoverable <ph id="ph1">&lt;xref:System.StackOverflowException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A direct correlation exists between XML nesting and object nesting for both the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`MaxDepth`</ph> to mitigate this threat.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>MaxNameTableCharCount</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This quota limits the size of the reader’s <bpt id="p1">*</bpt>nametable<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The nametable contains certain strings (such as namespaces and prefixes) that are encountered when processing an XML document.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>As these strings are buffered in memory, set this quota to prevent excessive buffering when streaming is expected.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>MaxStringContentLength</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>This quota limits the maximum string size that the XML reader returns.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>This quota does not limit memory consumption in the XML reader itself, but in the component that is using the reader.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>For example, when the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> uses a reader secured with <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A&gt;</ph>, it does not deserialize strings larger than this quota.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> class directly, not all methods respect this quota, but only the methods that are specifically designed to read strings, such as the <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReader.ReadContentAsString%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlReader.Value%2A&gt;</ph> property on the reader is not affected by this quota, and thus should not be used when the protection this quota provides is necessary.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>MaxArrayLength</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>This quota limits the maximum size of an array of primitives that the XML reader returns, including byte arrays.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>This quota does not limit memory consumption in the XML reader itself, but in whatever component that is using the reader.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>For example, when the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> uses a reader secured with <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength%2A&gt;</ph>, it does not deserialize byte arrays larger than this quota.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>It is important to set this quota when attempting to mix streaming and buffered programming models in a single contract.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Keep in mind that when using the <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> class directly, only the methods that are specifically designed to read arrays of arbitrary size of certain primitive types, such as <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReader.ReadInt32Array%2A&gt;</ph>, respect this quota.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Threats Specific to the Binary Encoding</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The binary XML encoding <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports includes a <bpt id="p1">*</bpt>dictionary strings<ept id="p1">*</ept> feature.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A large string may be encoded using only a few bytes.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>This enables significant performance gains, but introduces new denial-of-service threats that must be mitigated.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>There are two kinds of dictionaries: <bpt id="p1">*</bpt>static<ept id="p1">*</ept> and <bpt id="p2">*</bpt>dynamic<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The static dictionary is a built-in list of long strings that may be represented using a short code in the binary encoding.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>This list of strings is fixed when the reader is created and cannot be modified.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>None of the strings in the static dictionary that <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses by default are sufficiently large to pose a serious denial-of-service threat, although they may still be used in a dictionary expansion attack.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>In advanced scenarios where you supply your own static dictionary, be careful when introducing large dictionary strings.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The dynamic dictionaries feature allows messages to define their own strings and associate them with short codes.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>These string-to-code mappings are kept in memory during the entire communication session, such that subsequent messages do not have to resend the strings and can utilize codes that are already defined.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>These strings may be of arbitrary length and thus pose a more serious threat than those in the static dictionary.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The first threat that must be mitigated is the possibility of the dynamic dictionary (the string-to-code mapping table) becoming too large.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This dictionary may be expanded over the course of several messages, and so the <ph id="ph1">`MaxReceivedMessageSize`</ph> quota offers no protection because it applies only to each message separately.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Therefore, a separate <ph id="ph1">&lt;xref:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MaxSessionSize%2A&gt;</ph> property exists on the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement&gt;</ph> that limits the size of the dictionary.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Unlike most other quotas, this quota also applies when writing messages.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>If it is exceeded when reading a message, the <ph id="ph1">`QuotaExceededException`</ph> is thrown as usual.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If it is exceeded when writing a message, any strings that cause the quota to be exceeded are written as-is, without using the dynamic dictionaries feature.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Dictionary Expansion Threats</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A significant class of binary-specific attacks arises from dictionary expansion.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>A small message in binary form may turn into a very large message in fully expanded textual form if it makes extensive use of the string dictionaries feature.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The expansion factor for dynamic dictionary strings is limited by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MaxSessionSize%2A&gt;</ph> quota, because no dynamic dictionary string exceeds the maximum size of the entire dictionary.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount%2A&gt;</ph>, <ph id="ph2">`MaxStringContentLength`</ph>, and <ph id="ph3">`MaxArrayLength`</ph> properties only limit memory consumption.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>They are normally not required to mitigate any threats in the non-streamed usage because memory usage is already limited by <ph id="ph1">`MaxReceivedMessageSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">`MaxReceivedMessageSize`</ph> counts pre-expansion bytes.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>When binary encoding is in use, memory consumption could potentially go beyond <ph id="ph1">`MaxReceivedMessageSize`</ph>, limited only by a factor of <ph id="ph2">&lt;xref:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MaxSessionSize%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>For this reason, it is important to always set all of the reader quotas (especially <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength%2A&gt;</ph>) when using the binary encoding.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>When using binary encoding together with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, the <ph id="ph2">`IExtensibleDataObject`</ph> interface can be misused to mount a dictionary expansion attack.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This interface essentially provides unlimited storage for arbitrary data that is not a part of the contract.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>If quotas cannot be set low enough such that <ph id="ph1">`MaxSessionSize`</ph> multiplied by <ph id="ph2">`MaxReceivedMessageSize`</ph> does not pose a problem, disable the <ph id="ph3">`IExtensibleDataObject`</ph> feature when using the binary encoding.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`IgnoreExtensionDataObject`</ph> property to <ph id="ph2">`true`</ph> on the <ph id="ph3">`ServiceBehaviorAttribute`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Alternatively, do not implement the <ph id="ph1">`IExtensibleDataObject`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Quotas Summary</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The following table summarizes the guidance about quotas.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Important quotas to set</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>No streaming or streaming small messages, text, or MTOM encoding</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxReceivedMessageSize`</ph>, <ph id="ph2">`MaxBytesPerRead`</ph>, and <ph id="ph3">`MaxDepth`</ph></source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>No streaming or streaming small messages, binary encoding</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxReceivedMessageSize`</ph>, <ph id="ph2">`MaxSessionSize`</ph>, and all <ph id="ph3">`ReaderQuotas`</ph></source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Streaming large messages, text, or MTOM encoding</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxBufferSize`</ph> and all <ph id="ph2">`ReaderQuotas`</ph></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Streaming large messages, binary encoding</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MaxBufferSize`</ph>, <ph id="ph2">`MaxSessionSize`</ph>, and all <ph id="ph3">`ReaderQuotas`</ph></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Transport-level time-outs must always be set and never use synchronous reads/writes when streaming is in use, regardless of whether you are streaming large or small messages.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>When in doubt about a quota, set it to a safe value rather than leaving it open.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Preventing Malicious Code Execution</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>The following general classes of threats can execute code and have unintended effects:</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The deserializer loads a malicious, unsafe, or security-sensitive type.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>An incoming message causes the deserializer to construct an instance of a normally safe type in such a way that it has unintended consequences.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The following sections discuss these classes of threats further.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>DataContractSerializer</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>(For security information on the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, see the relevant documentation.) The security model for the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> is similar to that of the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, and differs mostly in details.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlIncludeAttribute&gt;</ph> attribute is used for type inclusion instead of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>However, some threats unique to the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> are discussed later in this topic.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Preventing Unintended Types from Being Loaded</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Loading unintended types may have significant consequences, whether the type is malicious or just has security-sensitive side effects.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>A type may contain exploitable security vulnerability, perform security-sensitive actions in its constructor or class constructor, have a large memory footprint that facilitates denial-of-service attacks, or may throw non-recoverable exceptions.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Types may have class constructors that run as soon as the type is loaded and before any instances are created.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>For these reasons, it is important to control the set of types that the deserializer may load.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> deserializes in a loosely coupled way.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>It never reads common language runtime (CLR) type and assembly names from the incoming data.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>This is similar to the behavior of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, but differs from the behavior of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph>, <ph id="ph3">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>, and the <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Loose coupling introduces a degree of safety, because the remote attacker cannot indicate an arbitrary type to load just by naming that type in the message.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is always allowed to load a type that is currently expected according to the contract.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>For example, if a data contract has a data member of type <ph id="ph1">`Customer`</ph>, the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is allowed to load the <ph id="ph3">`Customer`</ph> type when it deserializes this data member.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> supports polymorphism.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>A data member may be declared as <ph id="ph1">&lt;xref:System.Object&gt;</ph>, but the incoming data may contain a <ph id="ph2">`Customer`</ph> instance.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>This is possible only if the <ph id="ph1">`Customer`</ph> type has been made "known" to the deserializer through one of these mechanisms:</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute applied to a type.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`KnownTypeAttribute`</ph> attribute specifying a method that returns a list of types.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ServiceKnownTypeAttribute`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`KnownTypes`</ph> configuration section.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>A list of known types explicitly passed to the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> during construction, if using the serializer directly.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Each of these mechanisms increases the surface area by introducing more types that the deserializer can load.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Control each of these mechanisms to ensure no malicious or unintended types are added to the known types list.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Once a known type is in scope, it can be loaded at any time, and instances of the type can be created, even if the contract forbids actually using it.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>For example, suppose the type "MyDangerousType" is added to the known types list using one of the mechanisms above.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>This means that:</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MyDangerousType`</ph> is loaded and its class constructor runs.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Even when deserializing a data contract with a string data member, a malicious message may still cause an instance of <ph id="ph1">`MyDangerousType`</ph> to create.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Code in <ph id="ph1">`MyDangerousType`</ph>, such as property setters, may run.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>After this is done, the deserializer tries to assign this instance to the string data member and fail with an exception.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>When writing a method that returns a list of known types, or when passing a list directly to the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> constructor, ensure that the code that prepares the list is secure and operates only on trusted data.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>If specifying known types in configuration, ensure that the configuration file is secure.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Always use strong names in configuration (by specifying the public key of the signed assembly where the type resides), but do not specify the version of the type to load.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>The type loader automatically picks the latest version, if possible.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>If you specify a particular version in configuration, you run the following risk: A type may have a security vulnerability that may be fixed in a future version, but the vulnerable version still loads because it is explicitly specified in configuration.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Having too many known types has another consequence: The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> creates a cache of serialization/deserialization code in the application domain, with an entry for each type it must serialize and deserialize.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>This cache is never cleared as long as the application domain is running.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Therefore, an attacker who is aware that an application uses many known types can cause the deserialization of all these types, causing the cache to consume a disproportionately large amount of memory.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Preventing Types from Being in an Unintended State</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>A type may have internal consistency constraints that must be enforced.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Care must be taken to avoid breaking these constraints during deserialization.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>The following example of a type represents the state of an airlock on a spacecraft, and enforces the constraint that both the inner and the outer doors cannot be open at the same time.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DataContractAttribute#3<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>DataContractAttribute#3<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>An attacker may send a malicious message like this, getting around the constraints and getting the object into an invalid state, which may have unintended and unpredictable consequences.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>This situation can be avoided by being aware of the following points:</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> deserializes most classes, constructors do not run.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Therefore, do not rely on any state management done in the constructor.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Use callbacks to ensure that the object is in a valid state.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The callback marked with the <ph id="ph1">&lt;xref:System.Runtime.Serialization.OnDeserializedAttribute&gt;</ph> attribute is especially useful because it runs after deserialization is complete and has a chance to examine and correct the overall state.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Version-Tolerant Serialization Callbacks<ept id="p1">](../../../../docs/framework/wcf/feature-details/version-tolerant-serialization-callbacks.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Do not design data contract types to rely on any particular order in which property setters must be called.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Take care using legacy types marked with the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Many of them were designed to work with <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> remoting for use with trusted data only.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Existing types marked with this attribute may not have been designed with state safety in mind.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Do not rely on the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataMemberAttribute.IsRequired%2A&gt;</ph> property of the <ph id="ph2">`DataMemberAttribute`</ph> attribute to guarantee presence of data as far as state safety is concerned.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Data could always be <ph id="ph1">`null`</ph>, <ph id="ph2">`zero`</ph>, or <ph id="ph3">`invalid`</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Never trust an object graph deserialized from an untrusted data source without validating it first.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Each individual object may be in a consistent state, but the object graph as a whole may not be.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Furthermore, even if the object graph preservation mode is disabled, the deserialized graph may have multiple references to the same object or have circular references.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Serialization and Deserialization<ept id="p1">](../../../../docs/framework/wcf/feature-details/serialization-and-deserialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Using the NetDataContractSerializer Securely</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph> is a serialization engine that uses tight coupling to types.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>This is similar to the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph> and the <ph id="ph2">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>That is, it determines which type to instantiate by reading the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> assembly and type name from the incoming data.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Although it is a part of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, there is no supplied way of plugging in this serialization engine; custom code must be written.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`NetDataContractSerializer`</ph> is provided primarily to ease migration from <ph id="ph2">[!INCLUDE[dnprdnshort](../../../../includes/dnprdnshort-md.md)]</ph> remoting to <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> the relevant section in <bpt id="p1">[</bpt>Serialization and Deserialization<ept id="p1">](../../../../docs/framework/wcf/feature-details/serialization-and-deserialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Because the message itself may indicate any type can be loaded, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph> mechanism is inherently insecure and should be used only with trusted data.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>It is possible to make it secure by writing a secure, type-limiting type binder that allows only safe types to load (using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer.Binder%2A&gt;</ph> property).</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Even when used with trusted data, the incoming data may insufficiently specify the type to load, especially if the <ph id="ph1">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer.AssemblyFormat%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Anyone with access to the application’s directory or to the global assembly cache can substitute a malicious type in place of the one that is supposed to load.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Always ensure the security of your application’s directory and of the global assembly cache by correctly setting permissions.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>In general, if you allow partially trusted code access to your <ph id="ph1">`NetDataContractSerializer`</ph> instance or otherwise control the surrogate selector (<ph id="ph2">&lt;xref:System.Runtime.Serialization.ISurrogateSelector&gt;</ph>) or the serialization binder (<ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationBinder&gt;</ph>), the code may exercise a great deal of control over the serialization/deserialization process.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>For example, it may inject arbitrary types, lead to information disclosure, tamper with the resulting object graph or serialized data, or overflow the resultant serialized stream.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Another security concern with the <ph id="ph1">`NetDataContractSerializer`</ph> is a denial of service, not a malicious code execution threat.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">`NetDataContractSerializer`</ph>, always set the <ph id="ph2">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer.MaxItemsInObjectGraph%2A&gt;</ph> quota to a safe value.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>It is easy to construct a small malicious message that allocates an array of objects whose size is limited only by this quota.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>XmlSerializer-Specific Threats</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> security model is similar to that of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>A few threats, however, are unique to the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> generates <bpt id="p1">*</bpt>serialization assemblies<ept id="p1">*</ept> at runtime that contain code that actually serializes and deserializes; these assemblies are created in a temporary files directory.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>If some other process or user has access rights to that directory, they may overwrite the serialization/deserialization code with arbitrary code.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> then runs this code using its security context, instead of the serialization/deserialization code.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Make sure the permissions are set correctly on the temporary files directory to prevent this from happening.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> also has a mode in which it uses pre-generated serialization assemblies instead of generating them at runtime.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>This mode is triggered whenever the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> can find a suitable serialization assembly.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> checks whether or not the serialization assembly was signed by the same key that was used to sign the assembly that contains the types being serialized.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>This offers protection from malicious assemblies being disguised as serialization assemblies.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>However, if the assembly that contains your serializable types is not signed, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> cannot perform this check and uses any assembly with the correct name.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>This makes running malicious code possible.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Always sign the assemblies that contain your serializable types, or tightly control access to your application’s directory and the global assembly cache to prevent the introduction of malicious assemblies.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> can be subject to a denial of service attack.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> does not have a <ph id="ph2">`MaxItemsInObjectGraph`</ph> quota (as is available on the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Thus, it deserializes an arbitrary amount of objects, limited only by the message size.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Partial Trust Threats</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Note the following concerns regarding threats related to code running with partial trust.</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>These threats include malicious partially-trusted code as well as malicious partially-trusted code in combination with other attack scenarios (for example, partially-trusted code that constructs a specific string and then deserializing it).</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>When using any serialization components, never assert any permissions before such usage, even if the entire serialization scenario is within the scope of your assert, and you are not dealing with any untrusted data or objects.</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>Such usage may lead to security vulnerabilities.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>In cases where partially-trusted code has control over the serialization process, either through extensibility points (surrogates), types being serialized, or through other means, the partially-trusted code may cause the serializer to output a large amount of data into the serialized stream, which may cause Denial of Service (DoS) to the receiver of this stream.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>If you are serializing data intended for a target that is sensitive to DoS threats, do not serialize partially-trusted types or otherwise let partially-trusted code control serialization.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>If you allow partially-trusted code access to your <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> instance or otherwise control the <bpt id="p1">[</bpt>Data Contract Surrogates<ept id="p1">](../../../../docs/framework/wcf/extending/data-contract-surrogates.md)</ept>, it may exercise a great deal of control over the serialization/deserialization process.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>For example, it may inject arbitrary types, lead to information disclosure, tamper with the resulting object graph or serialized data, or overflow the resultant serialized stream.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>An equivalent <ph id="ph1">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph> threat is described in the "Using the NetDataContractSerializer Securely" section.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractAttribute&gt;</ph> attribute is applied to a type (or the type marked as <ph id="ph2">`[Serializable]`</ph> but is not <ph id="ph3">`ISerializable`</ph>), the deserializer can create an instance of such a type even if all constructors are non-public or protected by demands.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Never trust the result of deserialization unless the data to be deserialized is trusted and you are certain that all known types are types that you trust.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Note that known types are not loaded from the application configuration file, (but are loaded from the computer configuration file) when running in partial trust.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>If you pass a <ph id="ph1">`DataContractSerializer`</ph> instance with a surrogate added to partially-trusted code, the code can change any modifiable settings on that surrogate.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>For a deserialized object, if the XML reader (or the data therein) comes from partially-trusted code, treat the resulting deserialized object as untrusted data.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The fact that the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ExtensionDataObject&gt;</ph> type has no public members does not mean that data within it is secure.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>For example, if you deserialize from a privileged data source into an object in which some data resides, then hand that object to partially-trusted code, the partially-trusted code can read the data in the <ph id="ph1">`ExtensionDataObject`</ph> by serializing the object.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Consider setting <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject%2A&gt;</ph> to <ph id="ph2">`true`</ph> when deserializing from a privileged data source into an object that is later passed to partially-trusted code.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and <ph id="ph2">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer&gt;</ph> support the serialization of private, protected, internal, and public members in full trust.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>However, in partial trust, only public members can be serialized.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`SecurityException`</ph> is thrown if an application attempts to serialize a non-public member.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>To allow internal or protected internal members to be serialized in partial trust, use the <ph id="ph1">`System.Runtime.CompilerServices.InternalsVisibleTo`</ph> assembly attribute.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>This attribute allows an assembly to declare that its internal members are visible to some other assembly.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>In this case, an assembly that wants to have its internal members serialized declares that its internal members are visible to System.Runtime.Serialization.dll.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The advantage of this approach is that it does not require an elevated code generation path.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>At the same time, there are two major disadvantages.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The first disadvantage is that the opt-in property of the <ph id="ph1">`InternalsVisibleTo`</ph> attribute is assembly-wide.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>That is, you cannot specify that only a certain class can have its internal members serialized.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Of course, you can still choose not to serialize a specific internal member, by simply not adding a <ph id="ph1">`DataMember`</ph> attribute to that member.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Similarly, a developer can also choose to make a member internal rather than private or protected, with slight visibility concerns.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>The second disadvantage is that it still does not support private or protected members.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>To illustrate the use of the <ph id="ph1">`InternalsVisibleTo`</ph> attribute in partial trust, consider the following program:</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CDF_WCF_SecurityConsiderationsForData#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/cdf_wcf_securityconsiderationsfordata/cs/program.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>In the example above, <ph id="ph1">`PermissionsHelper.InternetZone`</ph> corresponds to the <ph id="ph2">`PermissionSet`</ph> for partial trust.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Now, without <ph id="ph1">`InternalsVisibleToAttribute`</ph>, the application will fail, throwing a <ph id="ph2">`SecurityException`</ph> indicating that non-public members cannot be serialized in partial trust.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>However, if we add the following line to the source file, the program runs successfully.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CDF_WCF_SecurityConsiderationsForData#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_CFX/cdf_wcf_securityconsiderationsfordata/cs/program.cs#2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>Other State Management Concerns</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>A few other concerns regarding object state management are worth mentioning:</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>When using the stream-based programming model with a streaming transport, processing of the message occurs as the message arrives.</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The sender of the message may abort the send operation in the middle of the stream, leaving your code in an unpredictable state if more content was expected.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>In general, do not rely on the stream being complete, and do not perform any work in a stream-based operation that cannot be rolled back in case the stream is aborted.</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>This also applies to the situation where a message may be malformed after the streaming body (for example, it may be missing an end tag for the SOAP envelope or may have a second message body).</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Using the <ph id="ph1">`IExtensibleDataObject`</ph> feature may cause sensitive data to be emitted.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>If you are accepting data from an untrusted source into data contracts with <ph id="ph1">`IExtensibleObjectData`</ph> and later re-emitting it on a secure channel where messages are signed, you are potentially vouching for data you know nothing about.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Moreover, the overall state you are sending may be invalid if you take both the known and unknown pieces of data into account.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Avoid this situation by either selectively setting the extension data property to <ph id="ph1">`null`</ph> or by selectively disabling the <ph id="ph2">`IExtensibleObjectData`</ph> feature.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Schema Import</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Normally, the process of importing schema to generate types happens only at design time, for example, when using the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> on a Web service to generate a client class.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>However, in more advanced scenarios, you may process schema at runtime.</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Be aware that doing so can expose you to denial-of-service risks.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Some schema may take a long time to be imported.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Never use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> schema import component in such scenarios if schemas are possibly coming from an untrusted source.</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Threats Specific to ASP.NET AJAX Integration</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>When the user implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.WebScriptEnablingBehavior&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.Description.WebHttpBehavior&gt;</ph>, <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> exposes an endpoint that can accept both XML and JSON messages.</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>However, there is only one set of reader quotas, used both by the XML reader and the JSON reader.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Some quota settings may be appropriate for one reader but too large for the other.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>When implementing <ph id="ph1">`WebScriptEnablingBehavior`</ph>, the user has the option to expose a JavaScript proxy at the endpoint.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The following security issues must be considered:</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Information about the service (operation names, parameter names, and so on) can be obtained by examining the JavaScript proxy.</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>When using the JavaScript endpoint, sensitive and private information might be retained in the client Web browser cache.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>A Note on Components</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> is a flexible and customizable system.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Most of the contents of this topic focus on the most common <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> usage scenarios.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>However, it is possible to compose components <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides in many different ways.</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>It is important to understand the security implications of using each component.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>In particular:</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>When you must use XML readers, use the readers the <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph> class provides as opposed to any other readers.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Safe readers are created using <ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader.CreateTextReader%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryReader.CreateBinaryReader%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.XmlDictionaryReader.CreateMtomReader%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Do not use the <ph id="ph1">&lt;xref:System.Xml.XmlReader.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Always configure the readers with safe quotas.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The serialization engines in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> are secure only when used with secure XML readers from <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>When using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> to deserialize potentially untrusted data, always set the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>When creating a message, set the <ph id="ph1">`maxSizeOfHeaders`</ph> parameter if <ph id="ph2">`MaxReceivedMessageSize`</ph> does not offer enough protection.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>When creating an encoder, always configure the relevant quotas, such as <ph id="ph1">`MaxSessionSize`</ph> and <ph id="ph2">`MaxBufferSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>When using an XPath message filter, set the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.XPathMessageFilter.NodeQuota%2A&gt;</ph> to limit the amount of XML nodes the filter visits.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Do not use XPath expressions that could take a long time to compute without visiting many nodes.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>In general, when using any component that accepts a quota, understand its security implications and set it to a safe value.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlDictionaryReader&gt;</ph></source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph></source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-known-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>