<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="security-behaviors-in-wcf.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f2ae9989b7c3d7021195b76b85efa5cea8ab569</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\security-behaviors-in-wcf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60b464459842f8b9dbe70b9550bd3ccd15a11504</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fcc58daea0bd330603cc0c91121233f8a50e8d4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Security Behaviors in WCF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Security Behaviors in WCF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph>, behaviors modify run-time behavior at the service level or at the endpoint level.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> behaviors in general, see <bpt id="p1">[</bpt>Specifying Service Run-Time Behavior<ept id="p1">](../../../../docs/framework/wcf/specifying-service-run-time-behavior.md)</ept>.) <bpt id="p2">*</bpt>Security behaviors<ept id="p2">*</ept> allow control over credentials, authentication, authorization, and auditing logs.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use behaviors either by programming or through configuration.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic focuses on configuring the following behaviors related to security functions:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceCredentials&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicecredentials.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>clientCredentials&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/clientcredentials.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceAuthorization&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceSecurityAudit&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicesecurityaudit.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceMetadata&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicemetadata.md)</ept>, which also enables you to specify a secure endpoint that clients can access for metadata.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Setting Credentials with Behaviors</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceCredentials&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicecredentials.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>clientCredentials&gt;<ept id="p2">](../../../../docs/framework/configure-apps/file-schema/wcf/clientcredentials.md)</ept> to set credential values for a service or client.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The underlying binding configuration determines whether a credential has to be set.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if the security mode is set to <ph id="ph1">`None`</ph>, both clients and services do not authenticate each other and require no credentials of any type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>On the other hand, the service binding can require a client credential type.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In that case, you may have to set a credential value using a behavior.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> the possible types of credentials, see <bpt id="p1">[</bpt>Selecting a Credential Type<ept id="p1">](../../../../docs/framework/wcf/feature-details/selecting-a-credential-type.md)</ept>.) In some cases, such as when Windows credentials are used to authenticate, the environment automatically establishes the actual credential value and you do not need to explicitly set the credential value (unless you want to specify a different set of credentials).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>All service credentials are found as child elements of the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceBehaviors&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicebehaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows a certificate used as a service credential.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Service Credentials</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceCredentials&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicecredentials.md)</ept> contains four child elements.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The elements and their usages are discussed in the following sections.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>serviceCertificate&gt; Element</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use this element to specify an X.509 certificate that is used to authenticate the service to clients using Message security mode.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If you are using a certificate that is periodically renewed, then its thumbprint changes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In that case, use the subject name as the <ph id="ph1">`X509FindType`</ph> because the certificate can be reissued with the same subject name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> using the element, see <bpt id="p1">[</bpt>How to: Specify Client Credential Values<ept id="p1">](../../../../docs/framework/wcf/how-to-specify-client-credential-values.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>certificate&gt; of <ph id="ph2">\&lt;</ph>clientCertificate&gt; Element</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>certificate&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/certificate-of-clientcertificate-element.md)</ept> element when the service must have the client's certificate in advance to communicate securely with the client.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This occurs when using the duplex communication pattern.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the more typical request-reply pattern, the client includes its certificate in the request, which the service uses to secure its response back to the client.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The duplex communication pattern, however, has no requests and replies.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The service cannot infer the client's certificate from the communication and therefore the service requires the client's certificate in advance to secure the messages to the client.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You must obtain the client's certificate in an out-of-band manner and specify the certificate using this element.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> duplex services, see <bpt id="p1">[</bpt>How to: Create a Duplex Contract<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-duplex-contract.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>authentication&gt; of <ph id="ph2">\&lt;</ph>clientCertificate&gt; Element</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>authentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/authentication-of-clientcertificate-element.md)</ept> element enables you to customize how clients are authenticated.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can set the <ph id="ph1">`CertificateValidationMode`</ph> attribute to <ph id="ph2">`None`</ph>, <ph id="ph3">`ChainTrust`</ph>, <ph id="ph4">`PeerOrChainTrust`</ph>, <ph id="ph5">`PeerTrust`</ph>, or <ph id="ph6">`Custom`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By default, the level is set to <ph id="ph1">`ChainTrust`</ph>, which specifies that each certificate must be found in a hierarchy of certificates ending in a <bpt id="p1">*</bpt>root authority<ept id="p1">*</ept> at the top of the chain.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is the most secure mode.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also set the value to <ph id="ph1">`PeerOrChainTrust`</ph>, which specifies that self-issued certificates (peer trust) are accepted as well as certificates that are in a trusted chain.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This value is used when developing and debugging clients and services because self-issued certificates need not be purchased from a trusted authority.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When deploying a client, use the <ph id="ph1">`ChainTrust`</ph> value instead.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can also set the value to <ph id="ph1">`Custom`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When set to the <ph id="ph1">`Custom`</ph> value, you must also set the <ph id="ph2">`CustomCertificateValidatorType`</ph> attribute to an assembly and type used to validate the certificate.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To create your own custom validator, you must inherit from the abstract <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.X509CertificateValidator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>issuedTokenAuthentication&gt; Element</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The issued token scenario has three stages.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the first stage, a client trying to access a service is referred to a <bpt id="p1">*</bpt>secure token service<ept id="p1">*</ept> (STS).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The STS then authenticates the client and subsequently issues the client a token, typically a Security Assertions Markup Language (SAML) token.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The client then returns to the service with the token.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The service examines the token for data that allows the service to authenticate the token and therefore the client.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To authenticate the token, the certificate that the secure token service uses must be known to the service.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>issuedTokenAuthentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/issuedtokenauthentication-of-servicecredentials.md)</ept> element is the repository for any such secure token service certificates.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To add certificates, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>knownCertificates&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/knowncertificates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Insert an <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>add&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/add-of-knowncertificates.md)</ept> for each certificate, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>By default, the certificates must be obtained from a secure token service.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>These "known" certificates ensure that only legitimate clients can access a service.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You should use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>allowedAudienceUris&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/allowedaudienceuris.md)</ept> collection in a federated application that utilizes a <bpt id="p2">*</bpt>secure token service<ept id="p2">*</ept> (STS) that issues <ph id="ph2">`SamlSecurityToken`</ph> security tokens.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When the STS issues the security token, it can specify the URI of the Web services for which the security token is intended by adding a <ph id="ph1">`SamlAudienceRestrictionCondition`</ph> to the security token.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>That allows the <ph id="ph1">`SamlSecurityTokenAuthenticator`</ph> for the recipient Web service to verify that the issued security token is intended for this Web service by specifying that this check should happen by doing the following:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`audienceUriMode`</ph> attribute of <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>issuedTokenAuthentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/issuedtokenauthentication-of-servicecredentials.md)</ept> to <ph id="ph3">`Always`</ph> or <ph id="ph4">`BearerKeyOnly`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specify the set of valid URIs, by adding the URIs to this collection.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To do this, insert an <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>add&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/add-of-allowedaudienceuris.md)</ept> for each URI</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <ph id="ph2">&lt;xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> using this configuration element, see <bpt id="p1">[</bpt>How to: Configure Credentials on a Federation Service<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-configure-credentials-on-a-federation-service.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Allowing Anonymous CardSpace Users</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">`AllowUntrustedRsaIssuers`</ph> attribute of the <ph id="ph2">`&lt;IssuedTokenAuthentication&gt;`</ph> element to <ph id="ph3">`true`</ph> explicitly allows any client to present a self-issued token signed with an arbitrary RSA key pair.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The issuer is <bpt id="p1">*</bpt>untrusted<ept id="p1">*</ept> because the key has no issuer data associated with it.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[infocard](../../../../includes/infocard-md.md)]</ph> user can create a self-issued card that includes self-provided claims of identity.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Use this capability with caution.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To use this feature, think of the RSA public key as a more secure password that should be stored in a database along with a user name.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Before allowing a client access to the service, verify the client-presented RSA public key by comparing it with the stored public key for the presented user name.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This presumes that you have established a registration process whereby users can register their user names and associate them with the self-issued RSA public keys.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Client Credentials</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Client credentials are used to authenticate the client to services in cases where mutual authentication is required.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can use the section to specify service certificates for scenarios where the client must secure messages to a service with the service's certificate.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can also configure a client as part of a federation scenario to use issued tokens from a secure token service or a local issuer of tokens.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> federated scenarios, see <bpt id="p1">[</bpt>Federation and Issued Tokens<ept id="p1">](../../../../docs/framework/wcf/feature-details/federation-and-issued-tokens.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>All client credentials are found under the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>endpointBehaviors&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/endpointbehaviors.md)</ept>, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>clientCertifictate&gt; Element</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Set the certificate used to authenticate the client with this element.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Specify Client Credential Values<ept id="p1">](../../../../docs/framework/wcf/how-to-specify-client-credential-values.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>httpDigest&gt;</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>This feature must be enabled with Active Directory on Windows and Internet Information Services (IIS).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Digest Authentication in IIS 6.0<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=88443)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>issuedToken&gt; Element</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>issuedToken&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/issuedtoken.md)</ept> contains the elements used to configure a local issuer of tokens, or behaviors used with an security token service.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For instructions on configuring a client to use a local issuer, see <bpt id="p1">[</bpt>How to: Configure a Local Issuer<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-configure-a-local-issuer.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>localIssuerAddress&gt;</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Specifies a default security token service address.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This is used when the <ph id="ph1">&lt;xref:System.ServiceModel.WSFederationHttpBinding&gt;</ph> does not supply a URL for the security token service, or when the issuer address of a federated binding is http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous or <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In such cases, the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ClientCredentials&gt;</ph> must be configured with the address of the local issuer and the binding to use to communicate with that issuer.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>issuerChannelBehaviors&gt;</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>issuerChannelBehaviors&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/issuerchannelbehaviors-element.md)</ept> to add <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client behaviors used when communicating with a security token service.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Define client behaviors in the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>endpointBehaviors&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/endpointbehaviors.md)</ept> section.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To use a defined behavior, add an &lt;<ph id="ph1">`add`</ph>&gt; element to the <ph id="ph2">`&lt;issuerChannelBehaviors&gt;`</ph> element with two attributes.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`issuerAddress`</ph> to the URL of the security token service and set the <ph id="ph2">`behaviorConfiguration`</ph> attribute to the name of the defined endpoint behavior, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>serviceCertificate&gt; Element</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Use this element to control authentication of service certificates.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>defaultCertificate&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/defaultcertificate-element.md)</ept> element can store a single certificate used when the service specifies no certificate.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>scopedCertificates&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/scopedcertificates-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>add&gt;<ept id="p2">](../../../../docs/framework/configure-apps/file-schema/wcf/add-of-scopedcertificates-element.md)</ept> to set service certificates that are associated with specific services.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;add&gt;`</ph> element includes a <ph id="ph2">`targetUri`</ph> attribute that is used to associate the certificate with the service.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>authentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/authentication-of-servicecertificate-element.md)</ept> element specifies the level of trust used to authenticate certificates.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>By default, the level is set to "ChainTrust," which specifies that each certificate must be found in a hierarchy of certificates ending in a trusted certification authority at the top of the chain.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>This is the most secure mode.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You can also set the value to "PeerOrChainTrust", which specifies that self-issued certificates (peer trust) are accepted, as well as certificates that are in a trusted chain.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This value is used when developing and debugging clients and services because self-issued certificates need not be purchased from a trusted authority.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>When deploying a client, use the "ChainTrust" value instead.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can also set the value to "Custom" or "None."</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>To use the "Custom" value, you must also set the <ph id="ph1">`CustomCertificateValidatorType`</ph> attribute to an assembly and type used to validate the certificate.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>To create your own custom validator, you must inherit from the abstract <ph id="ph1">&lt;xref:System.IdentityModel.Selectors.X509CertificateValidator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>How to: Create a Service that Employs a Custom Certificate Validator<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-create-a-service-that-employs-a-custom-certificate-validator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>authentication&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/authentication-of-servicecertificate-element.md)</ept> element includes a <ph id="ph2">`RevocationMode`</ph> attribute that specifies how certificates are checked for revocation.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The default is "online", which indicates that certificates are automatically checked for revocation.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Working with Certificates<ept id="p1">](../../../../docs/framework/wcf/feature-details/working-with-certificates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>ServiceAuthorization</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceAuthorization&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md)</ept> element contains elements that affect authorization, custom role providers, and impersonation.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Security.Permissions.PrincipalPermissionAttribute&gt;</ph> class is applied to a service method.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The attribute specifies the groups of users to use when authorizing use of a protected method.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The default value is "UseWindowsGroups" and specifies that Windows groups, such as "Administrators" or "Users," are searched for an identity trying to access a resource.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can also specify "UseAspNetRoles" to use a custom role provider that is configured under the &lt;<ph id="ph1">`system.web`</ph> &gt; element, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following code shows the <ph id="ph1">`roleProviderName`</ph> used with the <ph id="ph2">`principalPermissionMode`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Configuring Security Audits</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>serviceSecurityAudit&gt;<ept id="p1">](../../../../docs/framework/configure-apps/file-schema/wcf/servicesecurityaudit.md)</ept> to specify the log written to, and what types of events to log.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Auditing<ept id="p1">](../../../../docs/framework/wcf/feature-details/auditing-security-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Secure Metadata Exchange</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Exporting metadata to clients is convenient for service and client developers, as it enables downloads of configuration and client code.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To reduce the exposure of a service to malicious users, it is possible to secure the transfer using the SSL over HTTP (HTTPS) mechanism.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To do so, you must first bind a suitable X.509 certificate to a specific port on the computer that is hosting the service.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Working with Certificates<ept id="p1">](../../../../docs/framework/wcf/feature-details/working-with-certificates.md)</ept>.) Second, add a <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>serviceMetadata&gt;<ept id="p2">](../../../../docs/framework/configure-apps/file-schema/wcf/servicemetadata.md)</ept> to the service configuration and set the <ph id="ph3">`HttpsGetEnabled`</ph> attribute to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Finally, set the <ph id="ph1">`HttpsGetUrl`</ph> attribute to the URL of the service metadata endpoint, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Auditing<ept id="p1">](../../../../docs/framework/wcf/feature-details/auditing-security-events.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Model for Windows Server App Fabric<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=201279&amp;clcid=0x409)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>