<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b6151037fc0660dd94e502f4469fe29eb0528a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\endpoint-creation-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e373876840a01f46b0aaf074bab82ff7b1eb4ab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">deccf3065b47c6c12f57e085bcdf69596e279cde</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Endpoint Creation Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Endpoint Creation Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>All communication with a <ph id="ph1">[!INCLUDE[indigo1](../../../includes/indigo1-md.md)]</ph> service occurs through the <bpt id="p1">*</bpt>endpoints<ept id="p1">*</ept> of the service.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Endpoints provide the clients access to the functionality that a <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> service offers.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This section describes the structure of an endpoint and outlines how to define an endpoint in configuration and in code.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Structure of an Endpoint</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each endpoint contains an address that indicates where to find the endpoint, a binding that specifies how a client can communicate with the endpoint, and a contract that identifies the methods available.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Address<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The address uniquely identifies the endpoint and tells potential consumers where the service is located.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is represented in the <ph id="ph1">[!INCLUDE[indigo2](../../../includes/indigo2-md.md)]</ph> object model by the <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> address, which contains a Uniform Resource Identifier (URI) and address properties that include an identity, some Web Services Description Language (WSDL) elements, and a collection of optional headers.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The optional headers provide additional detailed addressing information to identify or interact with the endpoint.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Specifying an Endpoint Address<ept id="p1">](../../../docs/framework/wcf/specifying-an-endpoint-address.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Binding<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The binding specifies how to communicate with the endpoint.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The binding specifies how the endpoint communicates with the world, including which transport protocol to use (for example, TCP or HTTP), which encoding to use for the messages (for example, text or binary), and which security requirements are necessary (for example, Secure Sockets Layer [SSL] or SOAP message security).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Using Bindings to Configure Services and Clients<ept id="p1">](../../../docs/framework/wcf/using-bindings-to-configure-services-and-clients.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Service contract<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The service contract outlines what functionality the endpoint exposes to the client.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A contract specifies the operations that a client can call, the form of the message and the type of input parameters or data required to call the operation, and the kind of processing or response message the client can expect.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Three basic types of contracts correspond to basic message exchange patterns (MEPs): datagram (one-way), request/reply, and duplex (bidirectional).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The service contract can also employ data and message contracts to require specific data types and message formats when being accessed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> how to define a service contract, see <bpt id="p1">[</bpt>Designing Service Contracts<ept id="p1">](../../../docs/framework/wcf/designing-service-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that a client may also be required to implement a service-defined contract, called a callback contract, to receive messages from the service in a duplex MEP.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Duplex Services<ept id="p1">](../../../docs/framework/wcf/feature-details/duplex-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The endpoint for a service can be specified either imperatively by using code or declaratively through configuration.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If no endpoints are specified then the runtime provides default endpoints by adding one default endpoint for each base address for each service contract implemented by the service.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Defining endpoints in code is usually not practical because the bindings and addresses for a deployed service are typically different from those used while the service is being developed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Generally, it is more practical to define service endpoints using configuration rather than code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Keeping the binding and addressing information out of the code allows them to change without having to recompile and redeploy the application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When adding a service endpoint that performs impersonation, you must either use one of the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHost.AddServiceEndpoint%2A&gt;</ph> methods or the <ph id="ph2">&lt;xref:System.ServiceModel.Description.ContractDescription.GetContract%28System.Type%2CSystem.Type%29&gt;</ph> method to properly load the contract into a new <ph id="ph3">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Defining Endpoints in Code</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to specify an endpoint in code with the following:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Define a contract for an <ph id="ph1">`IEcho`</ph> type of service that accepts someone's name and echo with the response "Hello <ph id="ph2">\&lt;</ph>name&gt;!".</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Implement an <ph id="ph1">`Echo`</ph> service of the type defined by the <ph id="ph2">`IEcho`</ph> contract.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specify an endpoint address of http://localhost:8000/Echo for the service.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Configure the <ph id="ph1">`Echo`</ph> service using a <ph id="ph2">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> binding.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The service host is created with a base address and then the rest of the address, relative to the base address, is specified as part of an endpoint.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This partitioning of the address allows multiple endpoints to be defined more conveniently for services at a host.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Properties of <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceDescription&gt;</ph> in the service application must not be modified subsequent to the <ph id="ph2">&lt;xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A&gt;</ph> method on <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Some members, such as the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase.Credentials%2A&gt;</ph> property and the <ph id="ph2">`AddServiceEndpoint`</ph> methods on <ph id="ph3">&lt;xref:System.ServiceModel.ServiceHostBase&gt;</ph> and <ph id="ph4">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>, throw an exception if modified past that point.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Others permit you to modify them, but the result is undefined.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Similarly, on the client the <ph id="ph1">&lt;xref:System.ServiceModel.Description.ServiceEndpoint&gt;</ph> values must not be modified after the call to <ph id="ph2">&lt;xref:System.ServiceModel.Channels.CommunicationObject.OnOpening%2A&gt;</ph> on the <ph id="ph3">&lt;xref:System.ServiceModel.ChannelFactory&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.ChannelFactory.Credentials%2A&gt;</ph> property throws an exception if modified past that point.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The other client description values can be modified without error, but the result is undefined.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Whether for the service or client, it is recommended that you modify the description prior to calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CommunicationObject.Open%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Defining Endpoints in Configuration</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When creating an application, you often want to defer decisions to the administrator who is deploying the application.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example, there is often no way of knowing in advance what a service address (a URI) will be.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Instead of hard-coding an address, it is preferable to allow an administrator to do so after creating a service.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This flexibility is accomplished through configuration.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Configuring Services<ept id="p1">](../../../docs/framework/wcf/configuring-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>ServiceModel Metadata Utility Tool (Svcutil.exe)<ept id="p1">](../../../docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md)</ept> with the <ph id="ph1">`/config:`</ph><bpt id="p2">*</bpt>filename<ept id="p2">*</ept><ph id="ph2">`[,`</ph><bpt id="p3">*</bpt>filename<ept id="p3">*</ept><ph id="ph3">`]`</ph> switch to quickly create configuration files.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Using Default Endpoints</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If no endpoints are specified in code or in configuration then the runtime provides default endpoints by adding one default endpoint for each base address for each service contract implemented by the service.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The base address can be specified in code or in configuration, and the default endpoints are added when <ph id="ph1">&lt;xref:System.ServiceModel.ICommunicationObject.Open&gt;</ph> is called on the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This example is the same example from the previous section, but since no endpoints are specified, the default endpoints are added.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If endpoints are explicitly provided, the default endpoints can still be added by calling <ph id="ph1">&lt;xref:System.ServiceModel.ServiceHostBase.AddDefaultEndpoints%2A&gt;</ph> on the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceHost&gt;</ph> before calling <ph id="ph3">&lt;xref:System.ServiceModel.Channels.CommunicationObject.Open%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../includes/crabout-md.md)]</ph> default endpoints, see <bpt id="p1">[</bpt>Simplified Configuration<ept id="p1">](../../../docs/framework/wcf/simplified-configuration.md)</ept> and <bpt id="p2">[</bpt>Simplified Configuration for WCF Services<ept id="p2">](../../../docs/framework/wcf/samples/simplified-configuration-for-wcf-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Implementing Service Contracts<ept id="p1">](../../../docs/framework/wcf/implementing-service-contracts.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>