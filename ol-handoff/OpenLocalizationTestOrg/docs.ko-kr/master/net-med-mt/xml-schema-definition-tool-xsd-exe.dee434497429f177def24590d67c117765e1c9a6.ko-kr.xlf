<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">daec0d5fbc12f6adbce940eb25e87bc75a465bfc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\xml-schema-definition-tool-xsd-exe.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1bb8a771ecf7900bafcb16e9903863485fc27b0b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f27f374fa2686d5549c303576bb1a583a90b2cb7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XML Schema Definition Tool (Xsd.exe) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XML Schema Definition Tool (Xsd.exe)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The XML Schema Definition (Xsd.exe) tool generates XML schema or common language runtime classes from XDR, XML, and XSD files, or from classes in a runtime assembly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Argument</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>file.extension<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifies the input file to convert.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You must specify the extensionas one of the following: .xdr, .xml, .xsd, .dll, or .exe.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If you specify an XDR schema file (.xdr extension), Xsd.exe converts the XDR schema to an XSD schema.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The output file has the same name as the XDR schema, but with the .xsd extension.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you specify an XML file (.xml extension), Xsd.exe infers a schema from the data in the file and produces an XSD schema.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The output file has the same name as the XML file, but with the .xsd extension.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you specify an XML schema file (.xsd extension), Xsd.exe generates source code for runtime objects that correspond to the XML schema.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you specify a runtime assembly file (.exe or .dll extension), Xsd.exe generates schemas for one or more types in that assembly.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`/type`</ph> option to specify the types for which to generate schemas.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The output schemas are named schema0.xsd, schema1.xsd, and so on.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Xsd.exe produces multiple schemas only if the given types specify a namespace using the <ph id="ph1">`XMLRoot`</ph> custom attribute.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>General Options</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/h<ept id="p1">**</ept>[<bpt id="p2">**</bpt>elp<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/o<ept id="p1">**</ept>[<bpt id="p2">**</bpt>utputdir<ept id="p2">**</ept>]<bpt id="p3">**</bpt>:<ept id="p3">**</ept><bpt id="p4">*</bpt>directory<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Specifies the directory for output files.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This argument can appear only once.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The default is the current directory.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/?<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/P[arameters]:<ept id="p1">**</ept> <bpt id="p2">*</bpt>file.xml<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Read options for various operation modes from the specified .xml file.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The short form is '/p:'.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see the following Remarks section.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>XSD File Options</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You must specify only one of the following options for .xsd files.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/c<ept id="p1">**</ept>[<bpt id="p2">**</bpt>lasses<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Generates classes that correspond to the specified schema.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To read XML data into the object, use the <ph id="ph1">`System.Xml.Serialization.XmlSerializer.Deserializer`</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/d<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ataset<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Generates a class derived from <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> that corresponds to the specified schema.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To read XML data into the derived class, use the <ph id="ph1">`System.Data.DataSet.ReadXml`</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can also specify any of the following options for .xsd files.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/e<ept id="p1">**</ept>[<bpt id="p2">**</bpt>lement<ept id="p2">**</ept>]<bpt id="p3">**</bpt>:<ept id="p3">**</ept><bpt id="p4">*</bpt>element<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Specifies the element in the schema to generate code for.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By default all elements are typed.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can specify this argument more than once.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/enableDataBinding<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Implements the <ph id="ph1">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> interface on all generated types to enable data binding.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The short form is <ph id="ph1">`/edb`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/enableLinqDataSet<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(Short form: <ph id="ph1">`/eld`</ph>.) Specifies that the generated DataSet can be queried against using LINQ to DataSet.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This option is used when the /dataset option is also specified.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>LINQ to DataSet Overview<ept id="p1">](../../../docs/framework/data/adonet/linq-to-dataset-overview.md)</ept> and <bpt id="p2">[</bpt>Querying Typed DataSets<ept id="p2">](../../../docs/framework/data/adonet/querying-typed-datasets.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For general information about using LINQ, see <bpt id="p1">[</bpt>LINQ (Language-Integrated Query)<ept id="p1">](http://msdn.microsoft.com/library/a73c4aec-5d15-4e98-b962-1274021ea93d)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/f<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ields<ept id="p2">**</ept>]</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Generates fields instead of properties.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>By default, properties are generated.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/l<ept id="p1">**</ept>[<bpt id="p2">**</bpt>anguage<ept id="p2">**</ept>]<bpt id="p3">**</bpt>:<ept id="p3">**</ept><bpt id="p4">*</bpt>language<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Specifies the programming language to use.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Choose from <ph id="ph1">`CS`</ph> (C#, which is the default), <ph id="ph2">`VB`</ph> (Visual Basic), <ph id="ph3">`JS`</ph> (JScript), or <ph id="ph4">`VJS`</ph> (Visual J#).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You can also specify a fully qualified name for a class implementing <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt><ph id="ph1">/n</ph><ept id="p1">**</ept>[<bpt id="p2">**</bpt>amespace<ept id="p2">**</ept>]<bpt id="p3">**</bpt>:<ept id="p3">**</ept><bpt id="p4">*</bpt>namespace<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Specifies the runtime namespace for the generated types.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The default namespace is <ph id="ph1">`Schemas`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/nologo<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Suppresses the banner.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/order<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Generates explicit order identifiers on all particle members.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/o[ut]:<ept id="p1">**</ept> <bpt id="p2">*</bpt>directoryName<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Specifies the output directory to place the files in.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The default is the current directory.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/u<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ri<ept id="p2">**</ept>]<bpt id="p3">**</bpt>:<ept id="p3">**</ept><bpt id="p4">*</bpt>uri<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Specifies the URI for the elements in the schema to generate code for.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This URI, if present, applies to all elements specified with the <ph id="ph1">`/element`</ph> option.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>DLL and EXE File Options</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Option</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>/t<ept id="p1">**</ept>[<bpt id="p2">**</bpt>ype<ept id="p2">**</ept>]<bpt id="p3">**</bpt>:<ept id="p3">**</ept><bpt id="p4">*</bpt>typename<ept id="p4">*</ept></source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Specifies the name of the type to create a schema for.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can specify multiple type arguments.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> does not specify a namespace, Xsd.exe matches all types in the assembly with the specified type.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> specifies a namespace, only that type is matched.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>typename<ept id="p1">*</ept> ends with an asterisk character (<ph id="ph1">\*</ph>), the tool matches all types that start with the string preceding the <ph id="ph2">\*</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If you omit the <ph id="ph1">`/type`</ph> option, Xsd.exe generates schemas for all types in the assembly.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The following table shows the operations that Xsd.exe performs.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>XDR to XSD</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Generates an XML schema from an XML-Data-Reduced schema file.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>XDR is an early XML-based schema format.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>XML to XSD</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Generates an XML schema from an XML file.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>XSD to DataSet</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Generates common language runtime <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> classes from an XSD schema file.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The generated classes provide a rich object model for regular XML data.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>XSD to Classes</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Generates runtime classes from an XSD schema file.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The generated classes can be used in conjunction with <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName&gt;</ph> to read and write XML code that follows the schema.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Classes to XSD</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Generates an XML schema from a type or types in a runtime assembly file.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The generated schema defines the XML format used by <ph id="ph1">`System.Xml.Serialization.XmlSerializer`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Xsd.exe only allows you to manipulate XML schemas that follow the XML Schema Definition (XSD) language proposed by the World Wide Web Consortium (W3C).</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information on the XML Schema Definition proposal or the XML standard, see http://w3.org.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Setting Options with an XML File</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>By using the <ph id="ph1">`/parameters`</ph> switch, you can specify a single XML file that sets various options.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The options you can set depend on how you are using the XSD.exe tool.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Choices include generating schemas, generating code files, or generating code files that include <ph id="ph1">`DataSet`</ph> features.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For example, you can set the <ph id="ph1">`&lt;assembly\&gt;`</ph> element to the name of an executable (.exe) or type library (.dll) file when generating a schema, but not when generating a code file.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following XML shows how to use the <ph id="ph1">`&lt;generateSchemas\&gt;`</ph> element with a specified executable:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If the preceding XML is contained in a file named GenerateSchemas.xml, then use the <ph id="ph1">`/parameters`</ph> switch by typing the following at a command prompt and pressing ENTER:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>On the other hand, if you are generating a schema for a single type found in the assembly, you can use the following XML:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>But to use preceding code, you must also supply the name of the assembly at the command prompt.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Type the following at a command prompt (presuming the XML file is named GenerateSchemaFromType.xml):</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You must specify only one of the following options for the <ph id="ph1">`\&lt;generateSchemas&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>assembly&gt;</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Specifies an assembly to generate the schema from.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>type&gt;</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Specifies a type found in an assembly to generate a schema for.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xml&gt;</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Specifies an XML file to generate a schema for.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>xdr&gt;</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Specifies an XDR file to generate a schema for.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To generate a code file, use the <ph id="ph1">`&lt;generateClasses\&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following example generates a code file.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Note that two attributes are also shown that allow you to set the programming language and namespace of the generated file.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Options you can set for the <ph id="ph1">`\&lt;generateClasses&gt;`</ph> element include the following.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>element&gt;</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Specifies an element in the .xsd file to generate code for.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>schemaImporterExtensions&gt;</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Specifies a type derived from the <ph id="ph1">&lt;xref:System.Xml.Serialization.Advanced.SchemaImporterExtension&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>schema&gt;</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Specifies a XML Schema file to generate code for.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Multiple XML Schema files can be specified using multiple <ph id="ph1">\&lt;</ph>schema&gt; elements.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The following table shows the attributes that can also be used with the <ph id="ph1">`&lt;generateClasses\&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>language</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specifies the programming language to use.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Choose from <ph id="ph1">`CS`</ph> (C#, the default), <ph id="ph2">`VB`</ph> (Visual Basic), <ph id="ph3">`JS`</ph> (JScript), or <ph id="ph4">`VJS`</ph> (Visual J#).</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>You can also specify a fully qualified name for a class that implements <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>namespace</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Specifies the namespace for the generated code.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The namespace must conform to CLR standards (for example, no spaces or backslash characters).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>options</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>One of the following values: <ph id="ph1">`none`</ph>, <ph id="ph2">`properties`</ph> (generates properties instead of public fields), <ph id="ph3">`order`</ph>, or <ph id="ph4">`enableDataBinding`</ph> (see the <ph id="ph5">`/order`</ph> and <ph id="ph6">`/enableDataBinding`</ph> switches in the preceding XSD File Options section.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>You can also control how <ph id="ph1">`DataSet`</ph> code is generated by using the <ph id="ph2">`&lt;generateDataSets\&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The following XML specifies that the generated codeuses <ph id="ph1">`DataSet`</ph> structures (such as the <ph id="ph2">&lt;xref:System.Data.DataTable&gt;</ph> class) to create Visual Basic code for a specified element.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The generated DataSet structures will support LINQ queries.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Options you can set for the <ph id="ph1">`&lt;generateDataSet\&gt;`</ph> element include the following.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph>schema&gt;</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Specifies an XML Schema file to generate code for.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Multiple XML Schema files can be specified using multiple <ph id="ph1">\&lt;</ph>schema&gt; elements.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The following table shows the attributes that can be used with the <ph id="ph1">`&lt;generateDataSet\&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>enableLinqDataSet</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Specifies that the generated DataSet can be queried against using LINQ to DataSet.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The default value is false.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>language</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Specifies the programming language to use.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Choose from <ph id="ph1">`CS`</ph> (C#, the default), <ph id="ph2">`VB`</ph> (Visual Basic), <ph id="ph3">`JS`</ph> (JScript), or <ph id="ph4">`VJS`</ph> (Visual J#).</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You can also specify a fully qualified name for a class that implements <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>namespace</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Specifies the namespace for the generated code.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The namespace must conform to CLR standards (for example, no spaces or backslash characters).</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>There are attributes that you can set on the top level <ph id="ph1">`&lt;xsd\&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>These options can be used with any of the child elements (<ph id="ph1">`&lt;generateSchemas\&gt;`</ph>, <ph id="ph2">`&lt;generateClasses\&gt;`</ph> or <ph id="ph3">`&lt;generateDataSet\&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The following XML code generates code for an element named "IDItems" in the output directory named "MyOutputDirectory".</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The following table shows the attributes that can also be used with the <ph id="ph1">`\&lt;xsd&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>output</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The name of a directory where the generated schema or code file will be placed.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>nologo</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Suppresses the banner.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Set to <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>help</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Displays command syntax and options for the tool.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Set to <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The following command generates an XML schema from <ph id="ph1">`myFile.xdr`</ph> and saves it to the current directory.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The following command generates an XML schema from <ph id="ph1">`myFile.xml`</ph> and saves it to the specified directory.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The following command generates a data set that corresponds to the specified schema in the C# language and saves it as <ph id="ph1">`XSDSchemaFile.cs`</ph> in the current directory.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The following command generates XML schemas for all types in the assembly <ph id="ph1">`myAssembly.dll`</ph> and saves them as <ph id="ph2">`schema0.xsd`</ph> in the current directory.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tools<ept id="p1">](../../../docs/framework/tools/index.md)</ept><ph id="ph1">    </ph></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Command Prompts<ept id="p1">](../../../docs/framework/tools/developer-command-prompt-for-vs.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ to DataSet Overview<ept id="p1">](../../../docs/framework/data/adonet/linq-to-dataset-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Querying Typed DataSets<ept id="p1">](../../../docs/framework/data/adonet/querying-typed-datasets.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ (Language-Integrated Query)<ept id="p1">](http://msdn.microsoft.com/library/a73c4aec-5d15-4e98-b962-1274021ea93d)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>