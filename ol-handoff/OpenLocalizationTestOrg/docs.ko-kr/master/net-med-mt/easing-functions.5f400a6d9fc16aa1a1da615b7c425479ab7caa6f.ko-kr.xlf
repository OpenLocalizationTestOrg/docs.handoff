<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="easing-functions.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f613f403f02fd0d240262b13e8b1b25e3771d3a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\graphics-multimedia\easing-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e860970d95cb8b934b573e43ba2c3e5f984f616</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d03448d963b93b25e5d9bf3cf99e82cd66ca7703</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Easing Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Easing Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Easing functions allow you to apply custom mathematical formulas to your animations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you may want an object to realistically bounce or behave as though it were on a spring.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You could use Key-Frame or even From/To/By animations to approximate these effects but it would take a significant amount of work and the animation would be less accurate than using a mathematical formula.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Besides creating your own custom easing function by inheriting from              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase&gt;</ph>, you can use one of several easing functions provided by the runtime to create common effects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.BackEase&gt;</ph>: Retracts the motion of an animation slightly before it begins to animate in the path indicated.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.BounceEase&gt;</ph>: Creates a bouncing effect.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.CircleEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using a circular function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.CubicEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id="p1">*</bpt>f<ept id="p1">*</ept>(                     <bpt id="p2">*</bpt>t<ept id="p2">*</ept>) =                      <bpt id="p3">*</bpt>t<ept id="p3">*</ept><bpt id="p4">&lt;sup&gt;</bpt>3<ept id="p4">&lt;/sup&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.ElasticEase&gt;</ph>: Creates an animation that resembles a spring oscillating back and forth until it comes to rest.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.ExponentialEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using an exponential formula.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.PowerEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id="p1">*</bpt>f<ept id="p1">*</ept>(                     <bpt id="p2">*</bpt>t<ept id="p2">*</ept>) =                      <bpt id="p3">*</bpt>t<ept id="p3">*</ept><bpt id="p4">&lt;sup&gt;</bpt>p<ept id="p4">&lt;/sup&gt;</ept> where p is equal to the                      <ph id="ph2">&lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.QuadraticEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id="p1">*</bpt>f<ept id="p1">*</ept>(                     <bpt id="p2">*</bpt>t<ept id="p2">*</ept>) =                      <bpt id="p3">*</bpt>t<ept id="p3">*</ept><bpt id="p4">&lt;sup&gt;</bpt>2<ept id="p4">&lt;/sup&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.QuarticEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using the formula                      <bpt id="p1">*</bpt>f<ept id="p1">*</ept>(                     <bpt id="p2">*</bpt>t<ept id="p2">*</ept>) =                      <bpt id="p3">*</bpt>t<ept id="p3">*</ept><bpt id="p4">&lt;sup&gt;</bpt>4<ept id="p4">&lt;/sup&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.QuinticEase&gt;</ph>: Create an animation that accelerates and/or decelerates using the formula                      <bpt id="p1">*</bpt>f<ept id="p1">*</ept>(                     <bpt id="p2">*</bpt>t<ept id="p2">*</ept>) =                      <bpt id="p3">*</bpt>t<ept id="p3">*</ept><bpt id="p4">&lt;sup&gt;</bpt>5<ept id="p4">&lt;/sup&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.SineEase&gt;</ph>: Creates an animation that accelerates and/or decelerates using a sine formula.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can explore the behavior of these easing functions with the following sample.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Run this sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=easing_functions_gallery)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To apply an easing function to an animation, use the              <ph id="ph1">`EasingFunction`</ph> property of the animation specify the easing function to apply to the animation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following example applies a              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.BounceEase&gt;</ph> easing function to a              <ph id="ph2">&lt;xref:System.Windows.Media.Animation.DoubleAnimation&gt;</ph> to create a bouncing effect.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Run this sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=BounceEase)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>BounceEase_snippet#BounceEase<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/bounceease_snippet/CS/window1.xaml#bounceease)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the previous example, the easing function was applied to a From/To/By animation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can also apply these easing functions to Key-Frame animations.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to use key frames with easing functions associated with them to create an animation of a rectangle that contracts upward, slows down, then expands downward (as though falling) and then bounces to a stop.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Run this sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=EasingFunctionDoubleKeyFrame)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>EasingFunctionDoubleKeyFrame_snippet#EasingFunctionDoubleKeyFrame<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/easingfunctiondoublekeyframe_snippet/CS/window1.xaml#easingfunctiondoublekeyframe)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use the              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;</ph> property to alter how the easing function behaves, that is, change how the animation interpolates.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>There are three possible values you can give for              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph>: Interpolation follows the mathematical formula associated with the easing function.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph>: Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph>: Interpolation uses                      <ph id="ph2">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph> for the first half of the animation and                      <ph id="ph3">&lt;xref:System.Windows.Media.Animation.EasingMode&gt;</ph> for the second half.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The graphs below demonstrate the different values of              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A&gt;</ph> where              <bpt id="p1">*</bpt>f<ept id="p1">*</ept>(             <bpt id="p2">*</bpt>x<ept id="p2">*</ept>) represents the animation progress and              <bpt id="p3">*</bpt>t<ept id="p3">*</ept> represents time.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>BackEase EasingMode graphs.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/backease-graph.png "</bpt>BackEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>BounceEase EasingMode graphs.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/bounceease-graph.png "</bpt>BounceEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>CircleEase EasingMode graphs.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/circleease-graph.png "</bpt>CircleEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>CubicEase EasingMode graphs.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/cubicease-graph.png "</bpt>CubicEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>ElasticEase with graphs of different easingmodes.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/elasticease-graph.png "</bpt>ElasticEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>ExponentialEase graphs of different easingmodes.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/exponentialease-graph.png "</bpt>ExponentialEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>QuarticEase with graphs of different easingmodes.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png "</bpt>QuarticEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>QuadraticEase with graphs of different easingmodes<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/quadraticease-graph.png "</bpt>QuadraticEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>QuarticEase with graphs of different easingmodes.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/quarticease-graph.png "</bpt>QuarticEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>QuinticEase with graphs of different easingmodes.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/quinticease-graph.png "</bpt>QuinticEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>SineEase for different EasingMode values<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/graphics-multimedia/media/sineease-graph.png "</bpt>SineEase_Graph<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can use                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.PowerEase&gt;</ph> to create the same behavior as                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.CubicEase&gt;</ph>,                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.QuadraticEase&gt;</ph>,                  <ph id="ph4">&lt;xref:System.Windows.Media.Animation.QuarticEase&gt;</ph>, and                  <ph id="ph5">&lt;xref:System.Windows.Media.Animation.QuinticEase&gt;</ph> by using the                  <ph id="ph6">&lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, if you want to use                  <ph id="ph1">&lt;xref:System.Windows.Media.Animation.PowerEase&gt;</ph> to substitute for                  <ph id="ph2">&lt;xref:System.Windows.Media.Animation.CubicEase&gt;</ph>, specify a                  <ph id="ph3">&lt;xref:System.Windows.Media.Animation.PowerEase.Power%2A&gt;</ph> value of 3.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In addition to using the easing functions included in the run-time, you can create your own custom easing functions by inheriting from              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to create a simple custom easing function.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can add your own mathematical logic for how the easing function behaves by overriding the              <ph id="ph1">&lt;xref:System.Windows.Media.Animation.EasingFunctionBase.EaseInCore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Run this sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=139798&amp;sref=CustomEasingFunction)</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>CustomEasingFunction#CustomEasingFunction<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/customlog10easingfunction.cs#customeasingfunction)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>CustomEasingFunction#CustomEasingFunction<ept id="p2">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/customeasingfunction/visualbasic/customlog10easingfunction.vb#customeasingfunction)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>CustomEasingFunction#CustomEasingFunction<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/customeasingfunction/csharp/window1.xaml#customeasingfunction)</ept><ept id="p1">]</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>