<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9b6548e5f84d325ee021338c2d66455bac2a9d5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\xml-serialization-with-xml-web-services.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b35ac28f43d03d6232986d2d337e452ca01e24fb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4f2ee85cd91441d5830e477e97d77664337efc4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>XML Serialization with XML Web Services | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>XML Serialization with XML Web Services</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XML serialization is the underlying transport mechanism used in the XML Web services architecture, performed by the <bpt id="p1">[</bpt>XmlSerializer<ept id="p1">](https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer.aspx)</ept> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To control the XML generated by an XML Web service, you can apply the attributes listed in both <bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept> and <bpt id="p2">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id="p2">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept> to the classes, return values, parameters, and fields of a file used to create an XML Web service (.asmx).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information about creating an XML Web service, see <bpt id="p1">[</bpt>Building XML Web Services Using ASP.NET<ept id="p1">](http://msdn.microsoft.com/en-us/01dfc27c-c68e-4910-a0aa-5e4c2a766b0c)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Literal and Encoded Styles</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The XML generated by an XML Web service can be formatted in either one of two ways, either literal or encoded, as explained in <bpt id="p1">[</bpt>Customizing SOAP Messages<ept id="p1">](http://msdn.microsoft.com/en-us/1d777288-c0d9-4e6a-b638-f010da031952)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Therefore there are two sets of attributes that control XML serialization.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The attributes listed in <bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept> are designed to control literal style XML.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The attributes listed in <bpt id="p1">[</bpt>Attributes That Control Encoded SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept> control the encoded style.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>By selectively applying these attributes, you can tailor an application to return either, or both styles.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Furthermore, these attributes can be applied (as appropriate) to return values and parameters.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example of Using Both Styles</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you're creating an XML Web service, you can use both sets of attributes on the methods.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the following code example, the class named <ph id="ph1">`MyService`</ph> contains two XML Web service methods, <ph id="ph2">`MyLiteralMethod`</ph> and <ph id="ph3">`MyEncodedMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Both methods perform the same function: returning an instance of the <ph id="ph1">`Order`</ph> class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Order`</ph> class, the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlTypeAttribute&gt;</ph> and the <ph id="ph3">&lt;xref:System.Xml.Serialization.SoapTypeAttribute&gt;</ph> attributes are both applied to the <ph id="ph4">`OrderID`</ph> field, and both attributes have their <ph id="ph5">`ElementName`</ph> property set to different values.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To run the example, paste the code into a file with an .asmx extension, and place the file into a virtual directory managed by Internet Information Services (IIS).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>From an HTML browser, such as Internet Explorer, type the name of the computer, virtual directory, and file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code example calls <ph id="ph1">`MyLiteralMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The element name is changed to "LiteralOrderID".</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following code example calls <ph id="ph1">`MyEncodedMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The element name is "EncodedOrderID".</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Applying Attributes to Return Values</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can also apply attributes to return values to control the namespace, element name, and so forth.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following code example applies the <ph id="ph1">`XmlElementAttribute`</ph> attribute to the return value of the <ph id="ph2">`MyLiteralMethod`</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Doing so allows you to control the namespace and element name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When invoked, the code returns XML that resembles the following.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Attributes Applied to Parameters</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can also apply attributes to parameters to specify namespace, element name and so forth.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code example adds a parameter to the <ph id="ph1">`MyLiteralMethodResponse`</ph> method, and applies the <ph id="ph2">`XmlAttributeAttribute`</ph> attribute to the parameter.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The element name and namespace are both set for the parameter.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The SOAP request would resemble the following.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Applying Attributes to Classes</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you need to control the namespace of elements that correlate to classes, you can apply <ph id="ph1">`XmlTypeAttribute`</ph>, <ph id="ph2">`XmlRootAttribute`</ph>, and <ph id="ph3">`SoapTypeAttribute`</ph>, as appropriate.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following code example applies all three to the <ph id="ph1">`Order`</ph> class.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The results of applying the <ph id="ph1">`XmlTypeAttribute`</ph> and <ph id="ph2">`SoapTypeAttribute`</ph> can be seen when you examine the service description, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The effect of the <ph id="ph1">`XmlRootAttribute`</ph> can also be seen in the HTTP GET and HTTP POST results, as follows.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/xml-and-soap-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Attributes That Control Encoded SOAP Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-encoded-soap-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Serialize an Object as a SOAP-Encoded XML Stream<ept id="p1">](../../../docs/framework/serialization/how-to-serialize-an-object-as-a-soap-encoded-xml-stream.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Override Encoded SOAP XML Serialization<ept id="p1">](../../../docs/framework/serialization/how-to-override-encoded-soap-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Introducing XML Serialization<ept id="p1">](../../../docs/framework/serialization/introducing-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Serialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Deserialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>