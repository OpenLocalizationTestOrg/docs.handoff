<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9e704d788c44a54afc02c7a16268f01edcb820e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\migrating-from-the-xsltransform-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ae957543ab34c3066e375b8174bfc5dd31cc0c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">95bc991b66ef9e13661a684581aaf1146b6cd667</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Migrating From the XslTransform Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Migrating From the XslTransform Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The XSLT architecture was redesigned in the <ph id="ph1">[!INCLUDE[vsprvslong](../../../../includes/vsprvslong-md.md)]</ph> release.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class has been replaced by the <ph id="ph2">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following sections describe some of the main differences between the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> and the <ph id="ph2">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Performance</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class includes many performance improvements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The new XSLT processor compiles the XSLT style sheet down to a common intermediate format, similar to what the common language runtime (CLR) does for other programming languages.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Once the style sheet is compiled, it can be cached and reused.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class also includes other optimizations that make it much faster than the <ph id="ph2">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Although the overall performance of the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class is better than the <ph id="ph2">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class, the <ph id="ph3">&lt;xref:System.Xml.Xsl.XslCompiledTransform.Load%2A&gt;</ph> method of the <ph id="ph4">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class might perform more slowly than the <ph id="ph5">&lt;xref:System.Xml.Xsl.XslTransform.Load%2A&gt;</ph> method of the <ph id="ph6">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class the first time it is called on a transformation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This is because the XSLT file must be compiled before it is loaded.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see the following blog post: <bpt id="p1">[</bpt>XslCompiledTransform Slower than XslTransform?<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=130590)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>By default, the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class disables support for the XSLT <ph id="ph2">`document()`</ph> function and embedded scripting.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These features can be enabled by creating an <ph id="ph1">&lt;xref:System.Xml.Xsl.XsltSettings&gt;</ph> object that has the features enabled and passing it to the <ph id="ph2">&lt;xref:System.Xml.Xsl.XslCompiledTransform.Load%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example shows how to enable scripting and perform an XSLT transformation.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>XML_Migration#16<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Data/XML_Migration/CS/migration.cs#16)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>XML_Migration#16<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Data/XML_Migration/VB/migration.vb#16)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>XSLT Security Considerations<ept id="p1">](../../../../docs/standard/data/xml/xslt-security-considerations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>New Features</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Temporary Files</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Temporary files are sometimes generated during XSLT processing.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a style sheet contains script blocks, or if it is compiled with the debug setting set to true, temporary files may be created in the %TEMP% folder.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There may be instances when some temporary files are not deleted due to timing issues.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, if the files are in use by the current AppDomain or by the debugger, the finalizer of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.TempFileCollection&gt;</ph> object will not be able to remove them.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles%2A&gt;</ph> property can be used for additional cleanup to make sure that all temporary files are removed from the client.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Support for the xsl:output Element and XmlWriter</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class ignored <ph id="ph2">`xsl:output`</ph> settings when the transform output was sent to an <ph id="ph3">&lt;xref:System.Xml.XmlWriter&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class has an <ph id="ph2">&lt;xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A&gt;</ph> property that returns an <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object containing the output information derived from the <ph id="ph4">`xsl:output`</ph> element of the style sheet.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> object is used to create an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> object with the correct settings that can be passed to the <ph id="ph3">&lt;xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following C# code illustrates this behavior:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Debug Option</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class can generate debug information, which enables you to debug the style sheet with the Microsoft <ph id="ph2">[!INCLUDE[vsprvs](../../../../includes/vsprvs-md.md)]</ph> Debugger.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform.%23ctor%28System.Boolean%29&gt;</ph> for more information.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Behavioral Differences</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Transforming to an XmlReader</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class has several Transform overloads that return transformation results as an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These overloads can be used to load the transformation results into an in-memory representation (such as <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph>) without incurring the overhead of serialization and deserialization of the resulting XML tree.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following C# code shows how to load the transformation results into an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class does not support transforming to an <ph id="ph2">&lt;xref:System.Xml.XmlReader&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>However, you can do something similar by using the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.CreateNavigator%2A&gt;</ph> method to load the resulting XML tree directly from an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following C# code shows how to accomplish the same task using <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Discretionary Behavior</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The W3C XSL Transformations (XSLT) Version 1.0 Recommendation includes areas in which the implementation provider may decide how to handle a situation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>These areas are considered to be discretionary behavior.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>There are several areas where the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> behaves differently than the <ph id="ph2">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Recoverable XSLT Errors<ept id="p1">](../../../../docs/standard/data/xml/recoverable-xslt-errors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Extension Objects and Script Functions</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> introduces two new restrictions on the use of script functions:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Only public methods may be called from XPath expressions.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Overloads are distinguishable from each other based on the number of arguments.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If more than one overload has the same number of arguments, an exception will be raised.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph>, a binding (method name lookup) to script functions occurs at compile time, and style sheets that worked with XslTranform may cause an exception when they are loaded with <ph id="ph2">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> supports having <ph id="ph2">`msxsl:using`</ph> and <ph id="ph3">`msxsl:assembly`</ph> child elements within the <ph id="ph4">`msxsl:script`</ph> element.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`msxsl:using`</ph> and <ph id="ph2">`msxsl:assembly`</ph> elements are used to declare additional namespaces and assemblies for use in the script block.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Script Blocks Using msxsl:script<ept id="p1">](../../../../docs/standard/data/xml/script-blocks-using-msxsl-script.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> prohibits extension objects that have multiple overloads with the same number of arguments.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>MSXML Functions</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Support for additional MSXML functions have been added to the <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The following list describes new or improved functionality:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>msxsl:node-set: <ph id="ph1">&lt;xref:System.Xml.Xsl.XslTransform&gt;</ph> required the argument of the <bpt id="p1">[</bpt>node-set Function<ept id="p1">](http://msdn.microsoft.com/en-us/87b6b3f4-16f4-4fa3-8103-d62a679ac2a7)</ept> function to be a result tree fragment.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph> class does not have this requirement.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>msxsl:version: This function is supported in <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>XPath extension functions: The <bpt id="p1">[</bpt>ms:string-compare Function<ept id="p1">](http://msdn.microsoft.com/en-us/20616b82-9e27-444c-b714-4f1e09b73aee)</ept>, <bpt id="p2">[</bpt>ms:utc Function<ept id="p2">](http://msdn.microsoft.com/en-us/ef26fc88-84c6-4fb9-9c3b-f2f5264b864f)</ept>, <bpt id="p3">[</bpt>ms:namespace-uri Function<ept id="p3">](http://msdn.microsoft.com/en-us/91f9cabf-ab93-4dbe-9c12-e6a75214f4c7)</ept>, <bpt id="p4">[</bpt>ms:local-name Function<ept id="p4">](http://msdn.microsoft.com/en-us/10ed60a1-17a9-4d74-8b98-7940ac97c0b5)</ept>, <bpt id="p5">[</bpt>ms:number Function<ept id="p5">](http://msdn.microsoft.com/en-us/b94fc08e-1f31-4f48-b1a8-6d78c1b5d954)</ept>, <bpt id="p6">[</bpt>ms:format-date Function<ept id="p6">](http://msdn.microsoft.com/en-us/51f35609-89a9-4098-a166-88bf01300bf5)</ept>, and <bpt id="p7">[</bpt>ms:format-time Function<ept id="p7">](http://msdn.microsoft.com/en-us/e5c2df2d-e8fb-4a8f-bfc0-db84ea12a5d5)</ept> functions are now supported.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Schema-related XPath extension functions: These functions are not supported natively by <ph id="ph1">&lt;xref:System.Xml.Xsl.XslCompiledTransform&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>However, they can be implemented as extension functions.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XSLT Transformations<ept id="p1">](../../../../docs/standard/data/xml/xslt-transformations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using the XslCompiledTransform Class<ept id="p1">](../../../../docs/standard/data/xml/using-the-xslcompiledtransform-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>