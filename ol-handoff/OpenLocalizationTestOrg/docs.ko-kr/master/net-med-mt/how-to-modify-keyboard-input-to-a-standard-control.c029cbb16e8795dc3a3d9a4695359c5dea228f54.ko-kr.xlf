<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-modify-keyboard-input-to-a-standard-control.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b82daea93556842f035475b2f8170490d1c4c520</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\how-to-modify-keyboard-input-to-a-standard-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e69274bb0b748dbb2ed456f88c7c5503c23e78e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29ffe9a4d4cb44e0fa83e7cf6eca00ae42f1dc4d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Modify Keyboard Input to a Standard Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Modify Keyboard Input to a Standard Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Windows Forms provides the ability to consume and modify keyboard input.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Consuming a key refers to handling a key within a method or event handler so that other methods and events further down the message queue do not receive the key value.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Modifying a key refers to modifying the value of a key so that methods and event handlers further down the message queue receive a different key value.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic shows how to accomplish these tasks.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To consume a key</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event handler, set the <ph id="ph2">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.KeyPressEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event handler, set the <ph id="ph2">&lt;xref:System.Windows.Forms.KeyEventArgs.Handled%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.KeyEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyEventArgs.Handled%2A&gt;</ph> property in the <ph id="ph2">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event handler does not prevent the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> events from being raised for the current keystroke.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A&gt;</ph> property for this purpose.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example is an excerpt from a <ph id="ph1">`switch`</ph> statement that examines the <ph id="ph2">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.KeyPressEventArgs&gt;</ph> received by a <ph id="ph4">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event handler.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This code consumes the 'A' and 'a' character keys.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#6<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/CS/form1.cs#6)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#6<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/VB/form1.vb#6)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To modify a standard character key</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event handler, set the <ph id="ph2">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.KeyPressEventArgs&gt;</ph> class to the value of the new character key.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example is an excerpt from a <ph id="ph1">`switch`</ph> statement that modifies 'B' to 'A' and 'b' to 'a'.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.KeyPressEventArgs&gt;</ph> parameter is set to <ph id="ph3">`false`</ph>, so that the new key value is propagated to other methods and events in the message queue.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/CS/form1.cs#7)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#7<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/VB/form1.vb#7)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To modify a noncharacter key</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Override a <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> method that processes Windows messages, detect the WM_KEYDOWN or WM_SYSKEYDOWN message, and set the <ph id="ph2">&lt;xref:System.Windows.Forms.Message.WParam%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.Message&gt;</ph> parameter to the <ph id="ph4">&lt;xref:System.Windows.Forms.Keys&gt;</ph> value that represents the new noncharacter key.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how to override the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.PreProcessMessage%2A&gt;</ph> method of a control to detect keys F1 through F9 and modify any F3 key press to F1.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> methods that you can override to intercept keyboard messages, see <bpt id="p1">[</bpt>User Input in a Windows Forms Application<ept id="p1">](../../../docs/framework/winforms/user-input-in-a-windows-forms-application.md)</ept> and <bpt id="p2">[</bpt>How Keyboard Input Works<ept id="p2">](../../../docs/framework/winforms/how-keyboard-input-works.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#12<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/CS/form1.cs#12)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#12<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/VB/form1.vb#12)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code example is the complete application for the code examples in the previous sections.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The application uses a custom control derived from the <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> class to consume and modify keyboard input.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#0<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/CS/form1.cs#0)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>System.Windows.Forms.KeyBoardInput#0<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.KeyboardInput/VB/form1.vb#0)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This example requires:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>References to the System, System.Drawing and System.Windows.Forms assemblies.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For information about building this example from the command line for <ph id="ph1">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> or <ph id="ph2">[!INCLUDE[csprcs](../../../includes/csprcs-md.md)]</ph>, see <bpt id="p1">[</bpt>Building from the Command Line<ept id="p1">](~/docs/visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id="p2">[</bpt>Command-line Building With csc.exe<ept id="p2">](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can also build this example in <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> by pasting the code into a new project.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Also see <bpt id="p1">[</bpt>How to: Compile and Run a Complete Windows Forms Code Example Using Visual Studio<ept id="p1">](http://msdn.microsoft.com/library/Bb129228\(v=vs.110\))</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Keyboard Input in a Windows Forms Application<ept id="p1">](../../../docs/framework/winforms/keyboard-input-in-a-windows-forms-application.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>User Input in a Windows Forms Application<ept id="p1">](../../../docs/framework/winforms/user-input-in-a-windows-forms-application.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How Keyboard Input Works<ept id="p1">](../../../docs/framework/winforms/how-keyboard-input-works.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>