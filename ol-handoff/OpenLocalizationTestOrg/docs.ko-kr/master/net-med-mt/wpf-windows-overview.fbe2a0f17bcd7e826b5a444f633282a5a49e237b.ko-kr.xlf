<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7470ae3d4f9cda37594e406fe43740ad76728513</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\app-development\wpf-windows-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03578aea4b19c057ec4620203faacaccf4762e2b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c211e5070b0c7566f7e0c6dfd819d7d1b6da2c53</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>WPF Windows Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>WPF Windows Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Users interact with              <ph id="ph1">[!INCLUDE[TLA#tla_wpf](../../../../includes/tlasharptla-wpf-md.md)]</ph> standalone applications through windows.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The primary purpose of a window is to host content that visualizes data and enables users to interact with data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Standalone              <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications provide their own windows by using the              <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic introduces              <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> before covering the fundamentals of creating and managing windows in standalone applications.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Browser-hosted                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications, including                  <ph id="ph2">[!INCLUDE[TLA#tla_xbap#plural](../../../../includes/tlasharptla-xbapsharpplural-md.md)]</ph> and loose                  <ph id="ph3">[!INCLUDE[TLA#tla_xaml](../../../../includes/tlasharptla-xaml-md.md)]</ph> pages, don't provide their own windows.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Instead, they are hosted in windows provided by                  <ph id="ph1">[!INCLUDE[TLA#tla_iegeneric](../../../../includes/tlasharptla-iegeneric-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>See                  <bpt id="p1">[</bpt>WPF XAML Browser Applications Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/wpf-xaml-browser-applications-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Window Class</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following figure illustrates the constituent parts of a window.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Window elements<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/windowoverviewfigure1.PNG "</bpt>WindowOverviewFigure1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A window is divided into two areas: the non-client area and client area.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The                  <bpt id="p1">*</bpt>non-client area<ept id="p1">*</ept> of a window is implemented by                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> and includes the parts of a window that are common to most windows, including the following:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A border.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A title bar.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An icon.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Minimize, Maximize, and Restore buttons.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A Close button.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A System menu with menu items that allow users to minimize, maximize, restore, move, resize, and close a window.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The                  <bpt id="p1">*</bpt>client area<ept id="p1">*</ept> of a window is the area within a window's non-client area and is used by developers to add application-specific content, such as menu bars, tool bars, and controls.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, a window is encapsulated by the                  <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph> class that you use to do the following:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Display a window.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Configure the size, position, and appearance of a window.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Host application-specific content.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Manage the lifetime of a window.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Implementing a Window</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The implementation of a typical window comprises both appearance and behavior, where                  <bpt id="p1">*</bpt>appearance<ept id="p1">*</ept> defines how a window looks to users and                  <bpt id="p2">*</bpt>behavior<ept id="p2">*</ept> defines the way a window functions as users interact with it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph>, you can implement the appearance and behavior of a window using either code or                  <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In general, however, the appearance of a window is implemented using                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup, and its behavior is implemented using code-behind, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#MarkupAndCodeBehindWindowMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/MarkupAndCodeBehindWindow.xaml#markupandcodebehindwindowmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#MarkupAndCodeBehindWindowCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/MarkupAndCodeBehindWindow.xaml.cs#markupandcodebehindwindowcodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowsOverviewSnippets#MarkupAndCodeBehindWindowCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WindowsOverviewSnippets/VisualBasic/MarkupAndCodeBehindWindow.xaml.vb#markupandcodebehindwindowcodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To enable a                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup file and code-behind file to work together, the following are required:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In markup, the                          <ph id="ph1">`Window`</ph> element must include the                          <ph id="ph2">`x:Class`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When the application is built, the existence of                          <ph id="ph1">`x:Class`</ph> in the markup file causes                          <ph id="ph2">[!INCLUDE[TLA#tla_msbuild](../../../../includes/tlasharptla-msbuild-md.md)]</ph> to create a                          <ph id="ph3">`partial`</ph> class that derives from                          <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> and has the name that is specified by the                          <ph id="ph5">`x:Class`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This requires the addition of an                          <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> namespace declaration for the                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> schema (                          <ph id="ph3">`xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"`</ph> ).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The generated                          <ph id="ph1">`partial`</ph> class implements the                          <ph id="ph2">`InitializeComponent`</ph> method, which is called to register the events and set the properties that are implemented in markup.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In code-behind, the class must be a                          <ph id="ph1">`partial`</ph> class with the same name that is specified by the                          <ph id="ph2">`x:Class`</ph> attribute in markup, and it must derive from                          <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This allows the code-behind file to be associated with the                          <ph id="ph1">`partial`</ph> class that is generated for the markup file when the application is built (see                          <bpt id="p1">[</bpt>Building a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/building-a-wpf-application-wpf.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In code-behind, the                          <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> class must implement a constructor that calls the                          <ph id="ph2">`InitializeComponent`</ph> method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`InitializeComponent`</ph> is implemented by the markup file's generated                          <ph id="ph2">`partial`</ph> class to register events and set properties that are defined in markup.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When you add a new                      <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> to your project by using                      <ph id="ph2">[!INCLUDE[TLA#tla_visualstu](../../../../includes/tlasharptla-visualstu-md.md)]</ph>, the                      <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> is implemented using both markup and code-behind, and includes the necessary configuration to create the association between the markup and code-behind files as described here.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>With this configuration in place, you can focus on defining the appearance of the window in                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup and implementing its behavior in code-behind.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example shows a window with a button, implemented in                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup, and an event handler for the button's                  <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event, implemented in code-behind.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewWindowWithButtonSnippets#MarkupAndCodeBehindWindowMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewWindowWithButtonSnippets/CSharp/MarkupAndCodeBehindWindow.xaml#markupandcodebehindwindowmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowsOverviewWindowWithButtonSnippets#MarkupAndCodeBehindWindowCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewWindowWithButtonSnippets/CSharp/MarkupAndCodeBehindWindow.xaml.cs#markupandcodebehindwindowcodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowsOverviewWindowWithButtonSnippets#MarkupAndCodeBehindWindowCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WindowsOverviewWindowWithButtonSnippets/VisualBasic/MarkupAndCodeBehindWindow.xaml.vb#markupandcodebehindwindowcodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Configuring a Window Definition for MSBuild</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>How you implement your window determines how it is configured for                  <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For a window that is defined using both                  <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup and code-behind:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup files are configured as                          <ph id="ph2">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph3">`Page`</ph> items.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Code-behind files are configured as                          <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph><ph id="ph2">`Compile`</ph> items.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This is shown in the following                  <ph id="ph1">[!INCLUDE[TLA2#tla_msbuild](../../../../includes/tla2sharptla-msbuild-md.md)]</ph> project file.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For information about building                  <ph id="ph1">[!INCLUDE[TLA2#tla_wpf](../../../../includes/tla2sharptla-wpf-md.md)]</ph> applications, see                  <bpt id="p1">[</bpt>Building a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/building-a-wpf-application-wpf.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Window Lifetime</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As with any class, a window has a lifetime that begins when it is first instantiated, after which it is opened, activated and deactivated, and eventually closed.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Opening a Window</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To open a window, you first create an instance of it, which is demonstrated in the following example.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewStartupEventSnippets#AppMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewStartupEventSnippets/CSharp/App.xaml#appmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowsOverviewStartupEventSnippets#AppCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewStartupEventSnippets/CSharp/App.xaml.cs#appcodebehind)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this example, the                          <ph id="ph1">`MarkupAndCodeBehindWindow`</ph> is instantiated when the application starts, which occurs when the                          <ph id="ph2">&lt;xref:System.Windows.Application.Startup&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When a window is instantiated, a reference to it is automatically added to a list of windows that is managed by the                          <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> object (see                          <ph id="ph2">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Additionally, the first window to be instantiated is, by default, set by                          <ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph> as the main application window (see                          <ph id="ph2">&lt;xref:System.Windows.Application.MainWindow%2A?displayProperty=fullName&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The window is finally opened by calling the                          <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method; the result is shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A Window Opened by Calling Window.Show<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/windowoverviewfigure8.png "</bpt>WindowOverviewFigure8<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A window that is opened by calling                          <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is a modeless window, which means that the application operates in a mode that allows users to activate other windows in the same application.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> is called to open windows such as dialog boxes modally.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>See                              <bpt id="p1">[</bpt>Dialog Boxes Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/dialog-boxes-overview.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When                          <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is called, a window performs initialization work before it is shown to establish infrastructure that allows it to receive user input.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When the window is initialized, the                          <ph id="ph1">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event is raised and the window is shown.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>As a shortcut,                          <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> can be set to specify the first window that is opened automatically when an application starts.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#ApplicationStartupUriMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/App.xaml#applicationstartupurimarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When the application starts, the window specified by the value of                          <ph id="ph1">&lt;xref:System.Windows.Application.StartupUri%2A&gt;</ph> is opened modelessly; internally, the window is opened by calling its                          <ph id="ph2">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Window Ownership</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A window that is opened by using the                                  <ph id="ph1">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method does not have an implicit relationship with the window that created it; users can interact with either window independently of the other, which means that either window can do the following:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Cover the other (unless one of the windows has its                                          <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property set to                                          <ph id="ph2">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Be minimized, maximized, and restored without affecting the other.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Some windows require a relationship with the window that opens them.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, an                                  <ph id="ph1">[!INCLUDE[TLA#tla_ide](../../../../includes/tlasharptla-ide-md.md)]</ph> application may open property windows and tool windows whose typical behavior is to cover the window that creates them.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Furthermore, such windows should always close, minimize, maximize, and restore in concert with the window that created them.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Such a relationship can be established by making one window                                  <bpt id="p1">*</bpt>own<ept id="p1">*</ept> another, and is achieved by setting the                                  <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of the                                  <bpt id="p2">*</bpt>owned window<ept id="p2">*</ept> with a reference to the                                  <bpt id="p3">*</bpt>owner window<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This is shown in the following example.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>After ownership is established:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The owned window can reference its owner window by inspecting the value of its                                          <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The owner window can discover all the windows it owns by inspecting the value of its                                          <ph id="ph1">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Preventing Window Activation</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>There are scenarios where windows should not be activated when shown, such as conversation windows of an Internet messenger-style application or notification windows of an e-mail application.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If your application has a window that shouldn't be activated when shown, you can set its                                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property to                                  <ph id="ph2">`false`</ph> before calling the                                  <ph id="ph3">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> method for the first time.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>As a consequence:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The window is not activated.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The window's                                          <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is not raised.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The currently activated window remains activated.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The window will become activated, however, as soon as the user activates it by clicking either the client or non-client area.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In this case:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The window is activated.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The window's                                          <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The previously activated window is deactivated.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The window's                                          <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> and                                          <ph id="ph2">&lt;xref:System.Windows.Window.Activated&gt;</ph> events are subsequently raised as expected in response to user actions.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Window Activation</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>When a window is first opened, it becomes the active window (unless it is shown with                          <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> set to                          <ph id="ph2">`false`</ph>).</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The                          <bpt id="p1">*</bpt>active window<ept id="p1">*</ept> is the window that is currently capturing user input, such as key strokes and mouse clicks.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When a window becomes active, it raises the                          <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>When a window is first opened, the                              <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> and                              <ph id="ph2">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> events are raised only after the                              <ph id="ph3">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>With this in mind, a window can effectively be considered opened when                              <ph id="ph1">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> is raised.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>After a window becomes active, a user can activate another window in the same application, or activate another application.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When that happens, the currently active window becomes deactivated and raises the                          <ph id="ph1">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Likewise, when the user selects a currently deactivated window, the window becomes active again and                          <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> is raised.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>One common reason to handle                          <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> is to enable and disable functionality that can only run when a window is active.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>For example, some windows display interactive content that requires constant user input or attention, including games and video players.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The following example is a simplified video player that demonstrates how to handle                          <ph id="ph1">&lt;xref:System.Windows.Window.Activated&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> to implement this behavior.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#ActivationDeactivationMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/CustomMediaPlayerWindow.xaml#activationdeactivationmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#ActivationDeactivationCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/CustomMediaPlayerWindow.xaml.cs#activationdeactivationcodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowsOverviewSnippets#ActivationDeactivationCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WindowsOverviewSnippets/VisualBasic/CustomMediaPlayerWindow.xaml.vb#activationdeactivationcodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Other types of applications may still run code in the background when a window is deactivated.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, a mail client may continue polling the mail server while the user is using other applications.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Applications like these often provide different or additional behavior while the main window is deactivated.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>With respect to the mail program, this may mean both adding the new mail item to the inbox and adding a notification icon to the system tray.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A notification icon need only be displayed when the mail window isn't active, which can be determined by inspecting the                          <ph id="ph1">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If a background task completes, a window may want to notify the user more urgently by calling                          <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If the user is interacting with another application activated when                          <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph> is called, the window's taskbar button flashes.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If a user is interacting with the current application, calling                          <ph id="ph1">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph> will bring the window to the foreground.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You can handle application-scope activation using the                              <ph id="ph1">&lt;xref:System.Windows.Application.Activated?displayProperty=fullName&gt;</ph> and                              <ph id="ph2">&lt;xref:System.Windows.Application.Deactivated?displayProperty=fullName&gt;</ph> events.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Closing a Window</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The life of a window starts coming to an end when a user closes it.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A window can be closed by using elements in the non-client area, including the following:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The                                  <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> item of the                                  <bpt id="p2">**</bpt>System<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Pressing ALT+F4.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Pressing the                                  <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can provide additional mechanisms to the client area to close a window, the more common of which include the following:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>An                                  <bpt id="p1">**</bpt>Exit<ept id="p1">**</ept> item in the                                  <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu, typically for main application windows.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A                                  <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> item in the                                  <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu, typically on a secondary application window.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A                                  <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> button, typically on a modal dialog box.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A                                  <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> button, typically on a modeless dialog box.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>To close a window in response to one of these custom mechanisms, you need to call the                          <ph id="ph1">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The following example implements the ability to close a window by choosing the                          <bpt id="p1">**</bpt>Exit<ept id="p1">**</ept> on the                          <bpt id="p2">**</bpt>File<ept id="p2">**</ept> menu.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WindowWithFileExitMARKUP<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WindowWithFileExit.xaml#windowwithfileexitmarkup)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WindowWithFileExitCODEBEHIND<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WindowWithFileExit.xaml.cs#windowwithfileexitcodebehind)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowsOverviewSnippets#WindowWithFileExitCODEBEHIND<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WindowsOverviewSnippets/VisualBasic/WindowWithFileExit.xaml.vb#windowwithfileexitcodebehind)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>When a window closes, it raises two events:                          <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.Window.Closed&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is raised before the window closes, and it provides a mechanism by which window closure can be prevented.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>One common reason to prevent window closure is if window content contains modified data.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In this situation, the                          <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event can be handled to determine whether data is dirty and, if so, to ask the user whether to either continue closing the window without saving the data or to cancel window closure.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The following example shows the key aspects of handling                          <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>WindowClosingSnippets<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>WindowClosingSnippets<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>The                          <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> event handler is passed a                          <ph id="ph2">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph>, which implements the                          <ph id="ph3">`Boolean`</ph><ph id="ph4">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property that you set to                          <ph id="ph5">`true`</ph> to prevent a window from closing.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If                          <ph id="ph1">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not handled, or it is handled but not canceled, the window will close.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Just before a window actually closes,                          <ph id="ph1">&lt;xref:System.Windows.Window.Closed&gt;</ph> is raised.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>At this point, a window cannot be prevented from closing.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>An application can be configured to shut down automatically when either the main application window closes (see                              <ph id="ph1">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph>) or the last window closes.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For details, see                              <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>While a window can be explicitly closed through mechanisms provided in the non-client and client areas, a window can also be implicitly closed as a result of behavior in other parts of the application or                          <ph id="ph1">[!INCLUDE[TLA#tla_mswin](../../../../includes/tlasharptla-mswin-md.md)]</ph>, including the following:</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A user logs off or shuts down                                  <ph id="ph1">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A window's owner closes (see                                  <ph id="ph1">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The main application window is closed and                                  <ph id="ph1">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is                                  <ph id="ph2">&lt;xref:System.Windows.ShutdownMode&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A window cannot be reopened after it is closed.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Window Lifetime Events</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The following illustration shows the sequence of the principal events in the lifetime of a window.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Window Lifetime<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/windowlifetimeevents.png "</bpt>WindowLifetimeEvents<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The following illustration shows the sequence of the principal events in the lifetime of a window that is shown without activation (                         <ph id="ph1">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> is set to                          <ph id="ph2">`false`</ph> before the window is shown).</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Window Lifetime &amp;#40;Window.ShowActivated &amp;#61; False&amp;#41;<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/windowlifetimenoact.png "</bpt>WindowLifetimeNoAct<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Window Location</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>While a window is open, it has a location in the x and y dimensions relative to the desktop.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>This location can be determined by inspecting the                  <ph id="ph1">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties, respectively.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>You can set these properties to change the location of the window.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>You can also specify the initial location of a                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> when it first appears by setting the                  <ph id="ph2">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph> property with one of the following                  <ph id="ph3">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> enumeration values:</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> (default)</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If the startup location is specified as                  <ph id="ph1">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph>, and the                  <ph id="ph2">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and                  <ph id="ph3">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties have not been set,                  <ph id="ph4">&lt;xref:System.Windows.Window&gt;</ph> will ask                  <ph id="ph5">[!INCLUDE[TLA2#tla_mswin](../../../../includes/tla2sharptla-mswin-md.md)]</ph> for a location to appear in.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Topmost Windows and Z-Order</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Besides having an x and y location, a window also has a location in the z dimension, which determines its vertical position with respect to other windows.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This is known as the window's z-order, and there are two types: normal z-order and topmost z-order.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The location of a window in the                          <bpt id="p1">*</bpt>normal z-order<ept id="p1">*</ept> is determined by whether it is currently active or not.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>By default, a window is located in the normal z-order.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The location of a window in the                          <bpt id="p1">*</bpt>topmost z-order<ept id="p1">*</ept> is also determined by whether it is currently active or not.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Furthermore, windows in the topmost z-order are always located above windows in the normal z-order.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A window is located in the topmost z-order by setting its                          <ph id="ph1">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property to                          <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#TopmostWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/TopmostWindow.xaml#topmostwindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#TopmostWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/TopmostWindow.xaml#topmostwindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Within each z-order, the currently active window appears above all other windows in the same z-order.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Window Size</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Besides having a desktop location, a window has a size that is determined by several properties, including the various width and height properties and                  <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, and                  <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> are used to manage the range of widths that a window can have during its lifetime, and are configured as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WidthWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WidthWindow.xaml#widthwindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WidthWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WidthWindow.xaml#widthwindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Window height is managed by                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, and                  <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and are configured as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#HeightWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/HeightWindow.xaml#heightwindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#HeightWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/HeightWindow.xaml#heightwindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Because the various width values and height values each specify a range, it is possible for the width and height of a resizable window to be anywhere within the specified range for the respective dimension.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>To detect its current width and height, inspect                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph> and                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>If you'd like the width and height of your window to have a size that fits to the size of the window's content, you can use the                  <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> property, which has the following values:</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.SizeToContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>No effect (default).</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.SizeToContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Fit to content width, which has the same effect as setting both                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> to the width of the content.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.SizeToContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Fit to content height, which has the same effect as setting both                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> to the height of the content.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.SizeToContent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Fit to content width and height, which has the same effect as setting both                          <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MinHeight%2A&gt;</ph> and                          <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph> to the height of the content, and setting both                          <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MinWidth%2A&gt;</ph> and                          <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> to the width of the content.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>The following example shows a window that automatically sizes to fit its content, both vertically and horizontally, when first shown.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#SizeToContentWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/SizeToContentWindow.xaml#sizetocontentwindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#SizeToContentWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/SizeToContentWindow.xaml#sizetocontentwindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The following example shows how to set the                  <ph id="ph1">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> property in code to specify how a window resizes to fit its content                 .</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Order of Precedence for Sizing Properties</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Essentially, the various sizes properties of a window combine to define the range of width and height for a resizable window.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To ensure a valid range is maintained,                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> evaluates the values of the size properties using the following orders of precedence.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>For Height Properties:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>For Width Properties:<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The order of precedence can also determine the size of a window when it is maximized, which is managed with the                  <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Window State</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>During the lifetime of a resizable window, it can have three states: normal, minimized, and maximized.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A window with a                  <bpt id="p1">*</bpt>normal<ept id="p1">*</ept> state is the default state of a window.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>A window with this state allows a user to move and resize it by using a resize grip or the border, if it is resizable.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>A window with a                  <bpt id="p1">*</bpt>minimized<ept id="p1">*</ept> state collapses to its task bar button if                  <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> is set to                  <ph id="ph2">`true`</ph>; otherwise, it collapses to the smallest possible size it can be and relocates itself to the bottom-left corner of the desktop.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Neither type of minimized window can be resized using a border or resize grip, although a minimized window that isn't shown in the task bar can be dragged around the desktop.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A window with a                  <bpt id="p1">*</bpt>maximized<ept id="p1">*</ept> state expands to the maximum size it can be, which will only be as large as its                  <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>,                  <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph>, and                  <ph id="ph3">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> properties dictate.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Like a minimized window, a maximized window cannot be resized by using a resize grip or by dragging the border.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The values of the                      <ph id="ph1">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>,                      <ph id="ph2">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>,                      <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, and                      <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> properties of a window always represent the values for the normal state, even when the window is currently maximized or                      minimized.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The state of a window can be configured by setting its                  <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property, which can have one of the following                  <ph id="ph2">&lt;xref:System.Windows.WindowState&gt;</ph> enumeration values:</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.WindowState&gt;</ph> (default)</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a window that is shown as maximized when it opens.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WindowStateWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WindowStateWindow.xaml#windowstatewindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WindowStateWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WindowStateWindow.xaml#windowstatewindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>In general, you should set                  <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> to configure the initial state of a window.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Once a resizable window is shown, users can press the minimize, maximize, and restore buttons on the window's title bar to change the window state.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Window Appearance</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>You change the appearance of the client area of a window by adding window-specific content to it, such as buttons, labels, and text boxes.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>To configure the non-client area,                  <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> provides several properties, which include                  <ph id="ph2">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to set a window's icon and                  <ph id="ph3">&lt;xref:System.Windows.Window.Title%2A&gt;</ph> to set its title.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>You can also change the appearance and behavior of non-client area border by configuring a window's resize mode, window style, and whether it appears as a button in the desktop task bar.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Resize Mode</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Depending on the                          <ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property, you can control how (and if) users can resize the window.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>The choice of window style affects whether a user can resize the window by dragging its border with the mouse, whether the                          <bpt id="p1">**</bpt>Minimize<ept id="p1">**</ept>,                          <bpt id="p2">**</bpt>Maximize<ept id="p2">**</ept>, and                          <bpt id="p3">**</bpt>Resize<ept id="p3">**</ept> buttons appear on the non-client area, and, if they do appear, whether they are enabled.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>You can configure how a window resizes by setting its                          <ph id="ph1">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph> property, which can be one of the following                          <ph id="ph2">&lt;xref:System.Windows.ResizeMode&gt;</ph> enumeration values:</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.ResizeMode&gt;</ph> (default)</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>As with                          <ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph>, the resize mode of a window is unlikely to change during its lifetime, which means that you'll most likely set it from                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#ResizeModeWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/ResizeModeWindow.xaml#resizemodewindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#ResizeModeWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/ResizeModeWindow.xaml#resizemodewindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Note that you can detect whether a window is maximized, minimized, or restored by inspecting the                          <ph id="ph1">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Window Style</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The border that is exposed from the non-client area of a window is suitable for most applications.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>However, there are circumstances where different types of borders are needed, or no borders are needed at all, depending on the type of window.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>To control what type of border a window gets, you set its                          <ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property with one of the following values of the                          <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph> enumeration:</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.WindowStyle&gt;</ph> (default)</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The effect of these window styles are illustrated in the following figure.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Window styles<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/windowoverviewfigure6.PNG "</bpt>WindowOverviewFigure6<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>You can set                          <ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> using either                          <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup or code; because it is unlikely to change during the lifetime of a window, you will most likely configure it using                          <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> markup.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WindowStyleWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WindowStyleWindow.xaml#windowstylewindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#WindowStyleWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/WindowStyleWindow.xaml#windowstylewindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Non-Rectangular Window Style</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>There are also situations where the border styles that                                  <ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> allows you to have are not sufficient.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>For example, you may want to create an application with a non-rectangular border, like                                  <ph id="ph1">[!INCLUDE[TLA#tla_wmp](../../../../includes/tlasharptla-wmp-md.md)]</ph> uses.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>For example, consider the speech bubble window shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Nonrectangular window<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/nonrectangularwindowfigure.PNG "</bpt>NonRectangularWindowFigure<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This type of window can be created by setting the                                  <ph id="ph1">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property to                                  <ph id="ph2">&lt;xref:System.Windows.WindowStyle&gt;</ph>, and by using special support that                                  <ph id="ph3">&lt;xref:System.Windows.Window&gt;</ph> has for transparency.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#TransparentWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/TransparentWindow.xaml#transparentwindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#TransparentWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/TransparentWindow.xaml#transparentwindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>This combination of values instructs the window to render completely transparent.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>In this state, the window's non-client area adornments (the Close menu, Minimize, Maximize, and Restore buttons, and so on) cannot be used.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Consequently, you need to provide your own.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Task Bar Presence</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The default appearance of a window includes a task bar button, like the one shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Window with a task bar button<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/app-development/media/windowoverviewfigure7.PNG "</bpt>WindowOverviewFigure7<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Some types of windows don't have a task bar button, such as message boxes and dialog boxes (see                          <bpt id="p1">[</bpt>Dialog Boxes Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/dialog-boxes-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>You can control whether the task bar button for a window is shown by setting the                          <ph id="ph1">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> property (                         <ph id="ph2">`true`</ph> by default).</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#ShowInTaskbarWindowMARKUP1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/ShowInTaskbarWindow.xaml#showintaskbarwindowmarkup1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>WindowsOverviewSnippets#ShowInTaskbarWindowMARKUP2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/WindowsOverviewSnippets/CSharp/ShowInTaskbarWindow.xaml#showintaskbarwindowmarkup2)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> requires                  <ph id="ph2">`UnmanagedCode`</ph> security permission to be instantiated.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>For applications installed on and launched from the local machine, this falls within the set of permissions that are granted to the application.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>However, this falls outside the set of permissions granted to applications that are launched from the Internet or Local intranet zone using                  <ph id="ph1">[!INCLUDE[TLA#tla_clickonce](../../../../includes/tlasharptla-clickonce-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Consequently, users will receive a                  <ph id="ph1">[!INCLUDE[TLA2#tla_clickonce](../../../../includes/tla2sharptla-clickonce-md.md)]</ph> security warning and will need to elevate the permission set for the application to full trust.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Additionally,                  <ph id="ph1">[!INCLUDE[TLA2#tla_xbap#plural](../../../../includes/tla2sharptla-xbapsharpplural-md.md)]</ph> cannot show windows or dialog boxes by default.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>For a discussion on standalone application security considerations, see                  <bpt id="p1">[</bpt>WPF Security Strategy - Platform Security<ept id="p1">](../../../../docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>Other Types of Windows</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> is a window that is designed to host navigable content.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>For more information, see                  <bpt id="p1">[</bpt>Navigation Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/navigation-overview.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Dialog boxes are windows that are often used to gather information from a user to complete a function.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>For example, when a user wants to open a file, the                  <bpt id="p1">**</bpt>Open File<ept id="p1">**</ept> dialog box is usually displayed by an application to get the file name from the user.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>For more information, see                  <bpt id="p1">[</bpt>Dialog Boxes Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/dialog-boxes-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph></source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.MessageBox&gt;</ph></source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph></source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Application&gt;</ph></source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Dialog Boxes Overview<ept id="p1">](../../../../docs/framework/wpf/app-development/dialog-boxes-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Building a WPF Application<ept id="p1">](../../../../docs/framework/wpf/app-development/building-a-wpf-application-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>