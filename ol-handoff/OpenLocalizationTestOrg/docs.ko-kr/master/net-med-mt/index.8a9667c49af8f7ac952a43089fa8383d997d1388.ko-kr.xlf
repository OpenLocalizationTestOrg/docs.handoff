<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1d0c203313b33aeba26aded268467b1a1b181118</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\io\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26dbd326b8e4826e383027169464faa32b1000c0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c934a51d6a2bdd3e9b68acaf13ac11941944816c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>File and Stream I-O | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>File and Stream I/O</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>File and stream I/O (input/output) refers to the transfer of data either to or from a storage medium.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the .NET Framework, the <bpt id="p1">[</bpt>System.IO<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=231142)</ept> namespaces contain types that enable reading and writing, both synchronously and asynchronously, on data streams and files.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These namespaces also contain types that perform compression and decompression on files, and types that enable communication through pipes and serial ports.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A file is an ordered and named collection of bytes that has persistent storage.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you work with files, you work with directory paths, disk storage, and file and directory names.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In contrast, a stream is a sequence of bytes that you can use to read from and write to a backing store, which can be one of several storage mediums (for example, disks or memory).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Just as there are several backing stores other than disks, there are several kinds of streams other than file streams, such as network, memory, and pipe streams.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Files and Directories</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the types in the <ph id="ph1">&lt;xref:System.IO?displayProperty=fullName&gt;</ph> namespace to interact with files and directories.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, you can get and set properties for files and directories, and retrieve collections of files and directories based on search criteria.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Here are some commonly used file and directory classes:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.File&gt;</ph> - provides static methods for creating, copying, deleting, moving, and opening files, and helps create a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> - provides instance methods for creating, copying, deleting, moving, and opening files, and helps create a <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Directory&gt;</ph> - provides static methods for creating, moving, and enumerating through directories and subdirectories.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.DirectoryInfo&gt;</ph> - provides instance methods for creating, moving, and enumerating through directories and subdirectories.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Path&gt;</ph> - provides methods and properties for processing directory strings in a cross-platform manner.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In addition to using these classes, Visual Basic users can use the methods and properties provided by the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.FileIO.FileSystem?displayProperty=fullName&gt;</ph> class for file I/O.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Copy Directories<ept id="p1">](../../../docs/standard/io/how-to-copy-directories.md)</ept>, <bpt id="p2">[</bpt>How to: Create a Directory Listing<ept id="p2">](http://msdn.microsoft.com/en-us/4d2772b1-b991-4532-a8a6-6ef733277e69)</ept>, and <bpt id="p3">[</bpt>How to: Enumerate Directories and Files<ept id="p3">](../../../docs/standard/io/how-to-enumerate-directories-and-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Streams</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The abstract base class <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> supports reading and writing bytes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>All classes that represent streams inherit from the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class and its derived classes provide a common view of data sources and repositories, and isolate the programmer from the specific details of the operating system and underlying devices.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Streams involve three fundamental operations:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Reading - transferring data from a stream into a data structure, such as an array of bytes.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Writing - transferring data to a stream from a data source.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Seeking - querying and modifying the current position within a stream.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Depending on the underlying data source or repository, a stream might support only some of these capabilities.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> class does not support seeking.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> properties of a stream specify the operations that the stream supports.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Here are some commonly used stream classes:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> – for reading and writing to a file.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> – for reading and writing to a file in isolated storage.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.MemoryStream&gt;</ph> – for reading and writing to memory as the backing store.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> – for improving performance of read and write operations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> – for reading and writing over network sockets.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Pipes.PipeStream&gt;</ph> – for reading and writing over anonymous and named pipes.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Cryptography.CryptoStream&gt;</ph> – for linking data streams to cryptographic transformations.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For an example of working with streams asynchronously, see <bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../../../docs/standard/io/asynchronous-file-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Readers and Writers</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO?displayProperty=fullName&gt;</ph> namespace also provides types for reading encoded characters from streams and writing them to streams.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Typically, streams are designed for byte input and output.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The reader and writer types handle the conversion of the encoded characters to and from bytes so the stream can complete the operation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each reader and writer class is associated with a stream, which can be retrieved through the class's <ph id="ph1">`BaseStream`</ph> property.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here are some commonly used reader and writer classes:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> – for reading and writing primitive data types as binary values.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> – for reading and writing characters by using an encoding value to convert the characters to and from bytes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.StringReader&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.StringWriter&gt;</ph> – for reading and writing characters to and from strings.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.TextReader&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.TextWriter&gt;</ph> – serve as the abstract base classes for other readers and writers that read and write characters and strings, but not binary data.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](../../../docs/standard/io/how-to-read-text-from-a-file.md)</ept>, <bpt id="p2">[</bpt>How to: Write Text to a File<ept id="p2">](../../../docs/standard/io/how-to-write-text-to-a-file.md)</ept>, <bpt id="p3">[</bpt>How to: Read Characters from a String<ept id="p3">](../../../docs/standard/io/how-to-read-characters-from-a-string.md)</ept>, and <bpt id="p4">[</bpt>How to: Write Characters to a String<ept id="p4">](../../../docs/standard/io/how-to-write-characters-to-a-string.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Asynchronous I/O Operations</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Reading or writing a large amount of data can be resource-intensive.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You should perform these tasks asynchronously if your application needs to remain responsive to the user.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>With synchronous I/O operations, the UI thread is blocked until the resource-intensive operation has completed.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use asynchronous I/O operations when developing <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps to prevent creating the impression that your app has stopped working.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The asynchronous members contain <ph id="ph1">`Async`</ph> in their names, such as the <ph id="ph2">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Stream.FlushAsync%2A&gt;</ph>,  <ph id="ph4">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>You use these methods with the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../../../docs/standard/io/asynchronous-file-i-o.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Compression</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Compression refers to the process of reducing the size of a file for storage.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Decompression is the process of extracting the contents of a compressed file so they are in a usable format.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.Compression?displayProperty=fullName&gt;</ph> namespace contains types for compressing and decompressing files and streams.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following classes are frequently used when compressing and decompressing files and streams:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Compression.ZipArchive&gt;</ph> – for creating and retrieving entries in the zip archive.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Compression.ZipArchiveEntry&gt;</ph> – for representing a compressed file.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Compression.ZipFile&gt;</ph> – for creating,  extracting, and opening a compressed package.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Compression.ZipFileExtensions&gt;</ph> – for creating and extracting entries in a compressed package.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Compression.DeflateStream&gt;</ph> – for compressing and decompressing streams using the Deflate algorithm.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.Compression.GZipStream&gt;</ph> – for compressing and decompressing streams in gzip data format.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>How to: Compress and Extract Files<ept id="p1">](../../../docs/standard/io/how-to-compress-and-extract-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Isolated Storage</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Isolated storage is a data storage mechanism that provides isolation and safety by defining standardized ways of associating code with saved data.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The storage provides a virtual file system that is isolated by user, assembly, and (optionally) domain.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Isolated storage is particularly useful when your application does not have permission to access user files.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You can save settings or files for your application in a manner that is controlled by the computer's security policy.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Isolated storage is not available for <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps; instead, use application data classes in the <bpt id="p1">[</bpt>Windows.Storage<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.storage.aspx)</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Application data<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=229175)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The following classes are frequently used when implementing isolated storage:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorage&gt;</ph> – provides the base class for isolated storage implementations.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile&gt;</ph> – provides an isolated storage area that contains files and directories.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph> - exposes a file within isolated storage.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Isolated Storage<ept id="p1">](../../../docs/standard/io/isolated-storage.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>I/O Operations in Windows Store apps</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[net_win8_profile](../../../includes/net-win8-profile-md.md)]</ph> contains many of the types for reading from and writing to streams; however, this set does not include all the .NET Framework I/O types.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Some important differences to note when using I/O operations in <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps:</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Types specifically related to file operations, such as <ph id="ph1">&lt;xref:System.IO.File&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.FileInfo&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.Directory&gt;</ph> and <ph id="ph4">&lt;xref:System.IO.DirectoryInfo&gt;</ph>, are not included in the <ph id="ph5">[!INCLUDE[net_win8_profile](../../../includes/net-win8-profile-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Instead, use the types in the <bpt id="p1">[</bpt>Windows.Storage<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.storage.aspx)</ept> namespace of the <ph id="ph1">[!INCLUDE[wrt](../../../includes/wrt-md.md)]</ph>, such as <bpt id="p2">[</bpt>StorageFile<ept id="p2">](http://msdn.microsoft.com/library/windows/apps/windows.storage.storagefile.aspx)</ept> and <bpt id="p3">[</bpt>StorageFolder<ept id="p3">](http://msdn.microsoft.com/library/windows/apps/windows.storage.storagefolder.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Isolated storage is not available; instead, use <bpt id="p1">[</bpt>application data<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=229175)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Use asynchronous methods, such as <ph id="ph1">&lt;xref:System.IO.Stream.ReadAsync%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.WriteAsync%2A&gt;</ph>, to prevent blocking the UI thread.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The path-based compression types <ph id="ph1">&lt;xref:System.IO.Compression.ZipFile&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Compression.ZipFileExtensions&gt;</ph> are not available.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Instead, use the types in the <bpt id="p1">[</bpt>Windows.Storage.Compression<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.storage.compression.aspx)</ept> namespace.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can convert between .NET Framework streams and Windows Runtime streams, if necessary.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Convert Between .NET Framework Streams and Windows Runtime Streams<ept id="p1">](../../../docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</ept> or <bpt id="p2">[</bpt>System.IO.WindowsRuntimeStreamExtensions<ept id="p2">](https://msdn.microsoft.com/library/system.io.windowsruntimestreamextensions.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information about I/O operations in a <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> app, see <bpt id="p1">[</bpt>Quickstart: Reading and writing a file<ept id="p1">](http://go.microsoft.com/fwlink/p/?LinkId=243072)</ept> in the Windows Dev Center.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>I/O and Security</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When you use the classes in the <ph id="ph1">&lt;xref:System.IO?displayProperty=fullName&gt;</ph> namespace, you must follow operating system security requirements such as access control lists (ACLs) to control access to files and directories.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This requirement is in addition to any <ph id="ph1">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> requirements.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can manage ACLs programmatically.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add or Remove Access Control List Entries<ept id="p1">](../../../docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Default security policies prevent Internet or intranet applications from accessing files on the user’s computer.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Therefore, do not use the I/O classes that require a path to a physical file when writing code that will be downloaded over the Internet or intranet.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Instead, use <bpt id="p1">[</bpt>isolated storage<ept id="p1">](../../../docs/standard/io/isolated-storage.md)</ept> for traditional .NET Framework applications, or use <bpt id="p2">[</bpt>application data<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=229175)</ept> for <ph id="ph1">[!INCLUDE[win8_appname_long](../../../includes/win8-appname-long-md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>A security check is performed only when the stream is constructed.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Therefore, do not open a stream and then pass it to less-trusted code or application domains.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Common I/O Tasks<ept id="p1">](../../../docs/standard/io/common-i-o-tasks.md)</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Provides a list of I/O tasks associated with files, directories, and streams, and links to relevant content and examples for each task.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../../../docs/standard/io/asynchronous-file-i-o.md)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Describes the performance advantages and basic operation of asynchronous I/O.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Isolated Storage<ept id="p1">](../../../docs/standard/io/isolated-storage.md)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Describes a data storage mechanism that provides isolation and safety by defining standardized ways of associating code with saved data.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pipes<ept id="p1">](../../../docs/standard/io/pipe-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Describes anonymous and named pipe operations in the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Memory-Mapped Files<ept id="p1">](../../../docs/standard/io/memory-mapped-files.md)</ept></source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Describes memory-mapped files, which contain the contents of files on disk in virtual memory.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>You can use memory-mapped files to edit very large files and to create shared memory for interprocess communication.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>