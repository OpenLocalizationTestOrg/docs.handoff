<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="select-entity-sql.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2454b5508a164ff30c65d3d7df90eb574fbf5264</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\ef\language-reference\select-entity-sql.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11f9fbecf71ae7db8ea584f8ea3712d42c54bc8a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">016195e52a00732e68d73cf88ed3fbb5615b2144</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>SELECT (Entity SQL) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>SELECT (Entity SQL)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the elements returned by a query.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Arguments</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>ALL</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Specifies that duplicates can appear in the result set.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ALL is the default.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>DISTINCT</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Specifies that only unique results can appear in the result set.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>VALUE</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Allows only one item to be specified, and does not add on a row wrapper.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Any valid expression that indicates the number of first results to return from the query, of the form <ph id="ph1">`top (``expr``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The LIMIT parameter of the <bpt id="p1">[</bpt>ORDER BY<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md)</ept> operator also lets you select the first n items in the result set.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>An expression of the form:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expr`</ph> as <ph id="ph2">`identifier`</ph> &amp;#124; <ph id="ph3">`expr`</ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A literal or expression.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The SELECT clause is evaluated after the <bpt id="p1">[</bpt>FROM<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/from-entity-sql.md)</ept>, <bpt id="p2">[</bpt>GROUP BY<ept id="p2">](../../../../../../docs/framework/data/adonet/ef/language-reference/group-by-entity-sql.md)</ept>, and <bpt id="p3">[</bpt>HAVING<ept id="p3">](../../../../../../docs/framework/data/adonet/ef/language-reference/having-entity-sql.md)</ept> clauses have been evaluated.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The SELECT clause can only refer to items currently in-scope (from the FROM clause, or from outer scopes).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If a GROUP BY clause has been specified, the SELECT clause is only allowed to reference the aliases for the GROUP BY keys.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Referring to the FROM clause items is only permitted in aggregate functions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The list of one or more query expressions following the SELECT keyword is known as the select list, or more formally as the projection.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The most general form of projection is a single query expression.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you select a member <ph id="ph1">`member1`</ph> from a collection <ph id="ph2">`collection1`</ph>, you will produce a new collection of all the <ph id="ph3">`member1`</ph> values for each object in <ph id="ph4">`collection1`</ph>, as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, if <ph id="ph1">`customers`</ph> is a collection of type <ph id="ph2">`Customer`</ph> that has a property <ph id="ph3">`Name`</ph> that is of type <ph id="ph4">`string`</ph>, selecting <ph id="ph5">`Name`</ph> from <ph id="ph6">`customers`</ph> will yield a collection of strings, as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is also possible to use JOIN syntax (FULL, INNER, LEFT, OUTER, ON, and RIGHT).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>ON is required for inner joins and is nto allowed for cross joins.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Row and Value Select Clauses</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> supports two variants of the SELECT clause.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The first variant, row select, is identified by the SELECT keyword, and can be used to specify one or more values that should be projected out. Because a row wrapper is implicitly added around the values returned, the result of the query expression is always a multiset of rows.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each query expression in a row select must specify an alias.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If no alias is specified,<ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> attempts to generate an alias by using the alias generation rules.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The other variant of the SELECT clause, value select, is identified by the SELECT VALUE keyword.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It allows only one value to be specified, and does not add a row wrapper.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A row select is always expressible in terms of VALUE SELECT, as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>All and Distinct Modifiers</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Both variants of SELECT in <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> allow the specification of an ALL or DISTINCT modifier.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the DISTINCT modifier is specified, duplicates are eliminated from the collection produced by the query expression (up to and including the SELECT clause).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the ALL modifier is specified, no duplicate elimination is performed; ALL is the default.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Differences from Transact-SQL</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Unlike Transact-SQL, <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> does not support use of the * argument in the SELECT clause.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Instead, <ph id="ph1">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> allows queries to project out entire records by referencing the collection aliases from the FROM clause, as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The previous <ph id="ph1">[!INCLUDE[tsql](../../../../../../includes/tsql-md.md)]</ph> query expression is expressed in <ph id="ph2">[!INCLUDE[esql](../../../../../../includes/esql-md.md)]</ph> in the following way.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following Entity SQL query uses the SELECT operator to specify the elements to be returned by a query.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The query is based on the AdventureWorks Sales Model.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To compile and run this query, follow these steps:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Follow the procedure in <bpt id="p1">[</bpt>How to: Execute a Query that Returns StructuralType Results<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/how-to-execute-a-query-that-returns-structuraltype-results.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Pass the following query as an argument to the <ph id="ph1">`ExecuteStructuralTypeQuery`</ph> method:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Expressions<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/query-expressions-entity-sql.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Entity SQL Reference<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/entity-sql-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>TOP<ept id="p1">](../../../../../../docs/framework/data/adonet/ef/language-reference/top-entity-sql.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>