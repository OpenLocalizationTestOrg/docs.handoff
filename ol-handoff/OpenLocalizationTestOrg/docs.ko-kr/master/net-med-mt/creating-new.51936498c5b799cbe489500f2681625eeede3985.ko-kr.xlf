<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="creating-new.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73d036a45ae0296d5030c0e54edc35f1e368e852</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\base-types\creating-new.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c1f76efc6897f2b49807e10420734477c1cd0cb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8e3030e859f7a9398aec2d182f1cf8c1bfe9ed32</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Creating New Strings in .NET | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Creating New Strings in .NET</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> allows strings to be created using simple assignment, and also overloads a class constructor to support string creation using a number of different parameters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph> also provides several methods in the <ph id="ph2">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class that create new string objects by combining several strings, arrays of strings, or objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creating Strings Using Assignment</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The easiest way to create a new <ph id="ph1">&lt;xref:System.String&gt;</ph> object is simply to assign a string literal to a <ph id="ph2">&lt;xref:System.String&gt;</ph>object.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating Strings Using a Class Constructor</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can use overloads of the <ph id="ph1">&lt;xref:System.String&gt;</ph> class constructor to create strings from character arrays.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also create a new string by duplicating a particular character a specified number of times.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Methods that Return Strings</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table lists several useful methods that return new string objects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Method name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Use</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Builds a formatted string from a set of input objects.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Builds strings from two or more strings.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Builds a new string by combining an array of strings.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Builds a new string by inserting a string into the specified index of an existing string.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Copies specified characters in a string into a specified position in an array of characters.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Format</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>String.Format<ept id="p1">**</ept> method to create formatted strings and concatenate strings representing multiple objects.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method automatically converts any passed object into a string.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, if your application must display an <bpt id="p1">**</bpt>Int32<ept id="p1">**</ept> value and a <bpt id="p2">**</bpt>DateTime<ept id="p2">**</ept> value to the user, you can easily construct a string to represent these values using the <bpt id="p3">**</bpt>Format<ept id="p3">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For information about formatting conventions used with this method, see the section on <bpt id="p1">[</bpt>composite formatting<ept id="p1">](../../../docs/standard/base-types/composite-formatting.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>Format<ept id="p1">**</ept> method to create a string that uses an integer variable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this example,<ph id="ph1">&lt;xref:System.DateTime.Now%2A?displayProperty=fullName&gt;</ph> displays the current date and time in a manner specified by the culture associated with the current thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Concat</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>String.Concat<ept id="p1">**</ept> method can be used to easily create a new string object from two or more existing objects.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It provides a language-independent way to concatenate strings.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This method accepts any class that derives from <bpt id="p1">**</bpt>System.Object<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example creates a string from two existing string objects and a separating character.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Join</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>String.Join<ept id="p1">**</ept> method creates a new string from an array of strings and a separator string.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This method is useful if you want to concatenate multiple strings together, making a list perhaps separated by a comma.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example uses a space to bind a string array.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Insert</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>String.Insert<ept id="p1">**</ept> method creates a new string by inserting a string into a specified position in another string.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This method uses a zero-based index.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example inserts a string into the fifth index position of <ph id="ph1">`MyString`</ph> and creates a new string with this value.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CopyTo</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>String.CopyTo<ept id="p1">**</ept> method copies portions of a string into an array of characters.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can specify both the beginning index of the string and the number of characters to be copied.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This method takes the source index, an array of characters, the destination index, and the number of characters to copy.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>All indexes are zero-based.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The following example uses the <bpt id="p1">**</bpt>CopyTo<ept id="p1">**</ept> method to copy the characters of the word "Hello" from a string object to the first index position of an array of characters.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Basic String Operations<ept id="p1">](../../../docs/standard/base-types/basic-string-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Composite Formatting<ept id="p1">](../../../docs/standard/base-types/composite-formatting.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>