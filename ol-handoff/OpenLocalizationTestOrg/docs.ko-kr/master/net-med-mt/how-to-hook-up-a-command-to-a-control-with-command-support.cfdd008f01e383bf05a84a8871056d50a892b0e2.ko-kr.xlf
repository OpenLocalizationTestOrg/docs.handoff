<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-hook-up-a-command-to-a-control-with-command-support.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bac43b0d06624c620f28100209888d93d05d832d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\how-to-hook-up-a-command-to-a-control-with-command-support.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f40606ea15150fa5a3988561a4a0577bfe9e4019</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89b6a3eb2e25c69aedb2363ad0764db9e0b7e443</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Hook Up a Command to a Control with Command Support | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Hook Up a Command to a Control with Command Support</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following example shows how to hook up a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph> which has built in support for the command.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For a complete sample which hooks up commands to multiple sources, see the <bpt id="p1">[</bpt>Create a Custom RoutedCommand Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159980)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> provides a library of common commands which application programmers encounter regularly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The classes which comprise the command library are: <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.ComponentCommands&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.NavigationCommands&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.MediaCommands&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.Documents.EditingCommands&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The static <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> objects which make up these classes do not supply command logic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The logic for the command is associated with the command with a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Some controls have built in CommandBindings for some commands.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This mechanism allows the semantics of a command to stay the same, while the actual implementation is can change.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, for example, handles the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command differently than a control designed to support images, but the basic idea of what it means to paste something stays the same.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The command logic cannot be supplied by the command, but rather must be supplied by the control or the application.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Many controls in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> do have built in support for some of the commands in the command library.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, for example, supports many of the application edit commands such as <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Copy%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Input.ApplicationCommands.Cut%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.ApplicationCommands.Redo%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Input.ApplicationCommands.Undo%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The application developer does not have to do anything special to get these commands to work with these controls.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is the command target when the command is executed, it will handle the command using the <ph id="ph2">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> that is built into the control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following shows how to use a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> as the command source for the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command, where a <ph id="ph3">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is the target of the command.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>All the logic that defines how the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> performs the paste is built into the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> is created and it's <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem.Command%2A&gt;</ph> property is set to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem.CommandTarget%2A&gt;</ph> is not explicitly set to the <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When the  <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem.CommandTarget%2A&gt;</ph> is not set, the target for the command is the element which has keyboard focus.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the element which has keyboard focus does not support the <ph id="ph1">&lt;xref:System.Windows.Input.ApplicationCommands.Paste%2A&gt;</ph> command or cannot currently execute the paste command (the clipboard is empty, for example) then the <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> would be grayed out.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/commanding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hook Up a Command to a Control with No Command Support<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-hook-up-a-command-to-a-control-with-no-command-support.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>