<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f28a86272213b31bfdc1625036cc8578fe87d958</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\controls-with-built-in-owner-drawing-support.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a0fc3656e2c56b54becf7d013be1909f0434f26</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">774886e113f8712b69e2c4d0b081493fde15c8df</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Controls with Built-In Owner-Drawing Support | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Controls with Built-In Owner-Drawing Support</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Owner drawing in Windows Forms, which is also known as custom drawing, is a technique for changing the visual appearance of certain controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The word "control" in this topic is used to mean classes that derive from either <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> or <ph id="ph2">&lt;xref:System.ComponentModel.Component&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Typically, Windows handles painting automatically by using property settings such as <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BackColor%2A&gt;</ph> to determine the appearance of a control.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>With owner drawing, you take over the painting process, changing elements of appearance that are not available by using properties.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, many controls let you set the color of the text that is displayed, but you are limited to a single color.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Owner drawing enables you to do things like display part of the text in black and part in red.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In practice, owner drawing is similar to drawing graphics on a form.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, you could use graphics methods in a handler for the form's <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Paint&gt;</ph> event to emulate a <ph id="ph2">`ListBox`</ph> control, but you would have to write your own code to handle all user interaction.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>With owner drawing, the control uses your code to draw its contents but otherwise retains all its intrinsic capabilities.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use graphics methods to draw each item in the control or to customize some aspects of each item while you use the default appearance for other aspects of each item.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Owner Drawing in Windows Forms Controls</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To perform owner drawing in controls that support it, you will typically set one property and handle one or more events.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Most controls that support owner drawing have an <ph id="ph1">`OwnerDraw`</ph> or <ph id="ph2">`DrawMode`</ph> property that indicates whether the control will raise its drawing-related event or events when it paints itself.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Controls that do not have an <ph id="ph1">`OwnerDraw`</ph> or <ph id="ph2">`DrawMode`</ph> property include the <ph id="ph3">`DataGridView`</ph> control, which provides drawing events that occur automatically, and the <ph id="ph4">`ToolStrip`</ph> control, which is drawn using an external rendering class that has its own drawing-related events.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There are many different kinds of drawing events, but a typical drawing event occurs in order to draw a single item within a control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The event handler receives an <ph id="ph1">`EventArgs`</ph> object that contains information about the item being drawn and tools you can use to draw it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, this object typically contains the item's index number within its parent collection, a <ph id="ph1">&lt;xref:System.Drawing.Rectangle&gt;</ph> that indicates the item's display boundaries, and a <ph id="ph2">&lt;xref:System.Drawing.Graphics&gt;</ph> object for calling paint methods.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For some events, the <ph id="ph1">`EventArgs`</ph> object provides additional information about the item and methods that you can call to paint some aspects of the item by default, such as the background or a focus rectangle.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To create a reusable control that contains your owner-drawn customizations, create a new class that derives from a control class that supports owner drawing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Rather than handling drawing events, include your owner-drawing code in overrides for the appropriate <ph id="ph1">`On`</ph><bpt id="p1">*</bpt>EventName<ept id="p1">*</ept> method or methods in the new class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Make sure that you call the base class <ph id="ph1">`On`</ph><bpt id="p1">*</bpt>EventName<ept id="p1">*</ept> method or methods in this case so that users of your control can handle owner-drawing events and provide additional customization.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following Windows Forms controls support owner drawing in all versions of the .NET Framework:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph> (used by <ph id="ph2">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph>)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following controls support owner drawing only in <ph id="ph1">[!INCLUDE[dnprdnext](../../../../includes/dnprdnext-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following controls support owner drawing and are new in <ph id="ph1">[!INCLUDE[dnprdnext](../../../../includes/dnprdnext-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following sections provide additional details for each of these controls.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ListBox and ComboBox Controls</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.ComboBox&gt;</ph> controls enable you to draw individual items in the control either all in one size, or in varying sizes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">&lt;xref:System.Windows.Forms.CheckedListBox&gt;</ph> control is derived from the <ph id="ph2">&lt;xref:System.Windows.Forms.ListBox&gt;</ph> control, it does not support owner drawing.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To draw each item the same size, set the <ph id="ph1">`DrawMode`</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.DrawMode&gt;</ph> and handle the <ph id="ph3">`DrawItem`</ph> event.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To draw each item using a different size, set the <ph id="ph1">`DrawMode`</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.DrawMode&gt;</ph> and handle both the <ph id="ph3">`MeasureItem`</ph> and <ph id="ph4">`DrawItem`</ph> events.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MeasureItem`</ph> event lets you indicate the size of an item before the <ph id="ph2">`DrawItem`</ph> event occurs for that item.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following topics:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create Variable Sized Text in a ComboBox Control<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-create-variable-sized-text-in-a-combobox-control.md)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>MenuItem Component</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph> component represents a single menu item in a <ph id="ph2">&lt;xref:System.Windows.Forms.MainMenu&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Forms.ContextMenu&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To draw a <ph id="ph1">&lt;xref:System.Windows.Forms.MenuItem&gt;</ph>, set its <ph id="ph2">`OwnerDraw`</ph> property to <ph id="ph3">`true`</ph> and handle its <ph id="ph4">`DrawItem`</ph> event.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To customize the size of the menu item before the <ph id="ph1">`DrawItem`</ph> event occurs, handle the item's <ph id="ph2">`MeasureItem`</ph> event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following reference topics:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>TabControl Control</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph> control enables you to draw individual tabs in the control.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Owner drawing affects only the tabs; the <ph id="ph1">&lt;xref:System.Windows.Forms.TabPage&gt;</ph> contents are not affected.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To draw each tab in a <ph id="ph1">&lt;xref:System.Windows.Forms.TabControl&gt;</ph>, set the <ph id="ph2">`DrawMode`</ph> property to <ph id="ph3">&lt;xref:System.Windows.Forms.TabDrawMode&gt;</ph> and handle the <ph id="ph4">`DrawItem`</ph> event.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This event occurs once for each tab only when the tab is visible in the control.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following reference topics:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ToolTip Component</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ToolTip&gt;</ph> component enables you to draw the entire ToolTip when it is displayed.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To draw a <ph id="ph1">&lt;xref:System.Windows.Forms.ToolTip&gt;</ph>, set its <ph id="ph2">`OwnerDraw`</ph> property to <ph id="ph3">`true`</ph> and handle its <ph id="ph4">`Draw`</ph> event.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To customize the size of the <ph id="ph1">&lt;xref:System.Windows.Forms.ToolTip&gt;</ph> before the <ph id="ph2">`Draw`</ph> event occurs, handle the <ph id="ph3">`Popup`</ph> event and set the <ph id="ph4">&lt;xref:System.Windows.Forms.PopupEventArgs.ToolTipSize%2A&gt;</ph> property in the event handler.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following reference topics:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>ListView Control</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.ListView&gt;</ph> control enables you to draw individual items, subitems, and column headers in the control.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To enable owner drawing in the control, set the <ph id="ph1">`OwnerDraw`</ph> property to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To draw each item in the control, handle the <ph id="ph1">`DrawItem`</ph> event.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To draw each subitem or column header in the control when the <ph id="ph1">&lt;xref:System.Windows.Forms.ListView.View%2A&gt;</ph> property is set to <ph id="ph2">&lt;xref:System.Windows.Forms.View&gt;</ph>, handle the <ph id="ph3">`DrawSubItem`</ph> and <ph id="ph4">`DrawColumnHeader`</ph> events.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following reference topics:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>TreeView Control</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.TreeView&gt;</ph> control enables you to draw individual nodes in the control.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To draw only the text displayed in each node, set the <ph id="ph1">`DrawMode`</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.TreeViewDrawMode&gt;</ph> and handle the <ph id="ph3">`DrawNode`</ph> event to draw the text.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To draw all elements of each node, set the <ph id="ph1">`DrawMode`</ph> property to <ph id="ph2">&lt;xref:System.Windows.Forms.TreeViewDrawMode&gt;</ph> and handle the <ph id="ph3">`DrawNode`</ph> event to draw whichever elements you need, such as text, icons, check boxes, plus and minus signs, and lines connecting the nodes.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following reference topics:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>DataGridView Control</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.DataGridView&gt;</ph> control enables you to draw individual cells and rows in the control.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To draw individual cells, handle the <ph id="ph1">`CellPainting`</ph> event.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To draw individual rows or elements of rows, handle one or both of the <ph id="ph1">`RowPrePaint`</ph> and <ph id="ph2">`RowPostPaint`</ph> events.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RowPrePaint`</ph> event occurs before the cells in a row are painted, and the <ph id="ph2">`RowPostPaint`</ph> event occurs after the cells are painted.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can handle both events and the <ph id="ph1">`CellPainting`</ph> event to paint row background, individual cells, and row foreground separately, or you can provide specific customizations where you need them and use the default display for other elements of the row.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following topics:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Customize the Appearance of Cells in the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/customize-the-appearance-of-cells-in-the-datagrid.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Customize the Appearance of Rows in the Windows Forms DataGridView Control<ept id="p1">](../../../../docs/framework/winforms/controls/customize-the-appearance-of-rows-in-the-datagrid.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>ToolStrip Control</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.ToolStrip&gt;</ph> and derived controls enable you to customize any aspect of their appearance.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To provide custom rendering for <ph id="ph1">&lt;xref:System.Windows.Forms.ToolStrip&gt;</ph> controls, set the <ph id="ph2">`Renderer`</ph> property of a <ph id="ph3">&lt;xref:System.Windows.Forms.ToolStrip&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.ToolStripManager&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.ToolStripPanel&gt;</ph>, or <ph id="ph6">&lt;xref:System.Windows.Forms.ToolStripContentPanel&gt;</ph> to a <ph id="ph7">`ToolStripRenderer`</ph> object and handle one or more of the many drawing events provided by the <ph id="ph8">`ToolStripRenderer`</ph> class.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Alternatively, set a <ph id="ph1">`Renderer`</ph> property to an instance of your own class derived from <ph id="ph2">`ToolStripRenderer`</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.ToolStripProfessionalRenderer&gt;</ph>, or <ph id="ph4">&lt;xref:System.Windows.Forms.ToolStripSystemRenderer&gt;</ph> that implements or overrides specific <ph id="ph5">`On`</ph><bpt id="p1">*</bpt>EventName<ept id="p1">*</ept> methods.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>For more information, including code examples, see the following topics:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create and Set a Custom Renderer for the ToolStrip Control in Windows Forms<ept id="p1">](../../../../docs/framework/winforms/controls/create-and-set-a-custom-renderer-for-the-toolstrip-control-in-wf.md)</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Custom Draw a ToolStrip Control<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-custom-draw-a-toolstrip-control.md)</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Controls to Use on Windows Forms<ept id="p1">](../../../../docs/framework/winforms/controls/controls-to-use-on-windows-forms.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>