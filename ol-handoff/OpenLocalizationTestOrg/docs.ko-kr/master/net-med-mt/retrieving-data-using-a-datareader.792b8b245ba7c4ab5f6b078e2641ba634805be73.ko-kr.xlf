<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="retrieving-data-using-a-datareader.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6eba5d42978d190bf4cd7d4598e670d29fff3ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\retrieving-data-using-a-datareader.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3a4cfd84bdfdec811896798e10d3bdad6ff257f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8721cad85c4da808ff056393f5d53305055c7477</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Retrieving Data Using a DataReader | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Retrieving Data Using a DataReader</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Retrieving data using a <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> involves creating an instance of the <bpt id="p2">**</bpt>Command<ept id="p2">**</ept> object and then creating a <bpt id="p3">**</bpt>DataReader<ept id="p3">**</ept> by calling <bpt id="p4">**</bpt>Command.ExecuteReader<ept id="p4">**</ept> to retrieve rows from a data source.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following example illustrates using a <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> where <ph id="ph1">`reader`</ph> represents a valid DataReader and <ph id="ph2">`command`</ph> represents a valid Command object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">**</bpt>Read<ept id="p1">**</ept> method of the <bpt id="p2">**</bpt>DataReader<ept id="p2">**</ept> object to obtain a row from the results of the query.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can access each column of the returned row by passing the name or ordinal reference of the column to the <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, for best performance, the <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> provides a series of methods that allow you to access column values in their native data types (<bpt id="p2">**</bpt>GetDateTime<ept id="p2">**</ept>, <bpt id="p3">**</bpt>GetDouble<ept id="p3">**</ept>, <bpt id="p4">**</bpt>GetGuid<ept id="p4">**</ept>, <bpt id="p5">**</bpt>GetInt32<ept id="p5">**</ept>, and so on).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For a list of typed accessor methods for data provider-specific <bpt id="p1">**</bpt>DataReaders<ept id="p1">**</ept>, see <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph> and <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using the typed accessor methods, assuming the underlying data type is known, reduces the amount of type conversion required when retrieving the column value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Windows Server 2003 release of the .NET Framework includes an additional property for the <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept>, <bpt id="p2">**</bpt>HasRows<ept id="p2">**</ept>, which enables you to determine if the <bpt id="p3">**</bpt>DataReader<ept id="p3">**</ept> has returned any results before reading from it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following code example iterates through a <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> object, and returns two columns from each row.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> provides an unbuffered stream of data that allows procedural logic to efficiently process results from a data source sequentially.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> is a good choice when retrieving large amounts of data because the data is not cached in memory.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Closing the DataReader</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You should always call the <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> method when you have finished using the <bpt id="p2">**</bpt>DataReader<ept id="p2">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If your <bpt id="p1">**</bpt>Command<ept id="p1">**</ept> contains output parameters or return values, they will not be available until the <bpt id="p2">**</bpt>DataReader<ept id="p2">**</ept> is closed.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that while a <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> is open, the <bpt id="p2">**</bpt>Connection<ept id="p2">**</ept> is in use exclusively by that <bpt id="p3">**</bpt>DataReader<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You cannot execute any commands for the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept>, including creating another <bpt id="p2">**</bpt>DataReader<ept id="p2">**</ept>, until the original <bpt id="p3">**</bpt>DataReader<ept id="p3">**</ept> is closed.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Do not call <bpt id="p1">**</bpt>Close<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Dispose<ept id="p2">**</ept> on a <bpt id="p3">**</bpt>Connection<ept id="p3">**</ept>, a <bpt id="p4">**</bpt>DataReader<ept id="p4">**</ept>, or any other managed object in the <bpt id="p5">**</bpt>Finalize<ept id="p5">**</ept> method of your class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In a finalizer, only release unmanaged resources that your class owns directly.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If your class does not own any unmanaged resources, do not include a <bpt id="p1">**</bpt>Finalize<ept id="p1">**</ept> method in your class definition.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Garbage Collection<ept id="p1">](../../../../docs/standard/garbage-collection/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieving Multiple Result Sets using NextResult</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If multiple result sets are returned, the <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> provides the <bpt id="p2">**</bpt>NextResult<ept id="p2">**</ept> method to iterate through the result sets in order.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.Data.SqlClient.SqlDataReader&gt;</ph> processing the results of two SELECT statements using the <ph id="ph2">&lt;xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Getting Schema Information from the DataReader</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>While a <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept> is open, you can retrieve schema information about the current result set using the <bpt id="p2">**</bpt>GetSchemaTable<ept id="p2">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetSchemaTable<ept id="p1">**</ept> returns a <ph id="ph1">&lt;xref:System.Data.DataTable&gt;</ph> object populated with rows and columns that contain the schema information for the current result set.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>DataTable<ept id="p1">**</ept> contains one row for each column of the result set.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each column of the schema table row maps to a property of the column returned in the result set, where the <bpt id="p1">**</bpt>ColumnName<ept id="p1">**</ept> is the name of the property and the value of the column is the value of the property.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following code example writes out the schema information for <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Working with OLE DB Chapters</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Hierarchical rowsets, or chapters (OLE DB type <bpt id="p1">**</bpt>DBTYPE_HCHAPTER<ept id="p1">**</ept>, ADO type <bpt id="p2">**</bpt>adChapter<ept id="p2">**</ept>) can be retrieved using the <ph id="ph1">&lt;xref:System.Data.OleDb.OleDbDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When a query that includes a chapter is returned as a <bpt id="p1">**</bpt>DataReader<ept id="p1">**</ept>, the chapter is returned as a column in that <bpt id="p2">**</bpt>DataReader<ept id="p2">**</ept> and is exposed as a <bpt id="p3">**</bpt>DataReader<ept id="p3">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The ADO.NET <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> can also be used to represent hierarchical rowsets using parent-child relationships between tables.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>DataSets, DataTables, and DataViews<ept id="p1">](../../../../docs/framework/data/adonet/dataset-datatable-dataview/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following code example uses the MSDataShape Provider to generate a chapter column of orders for each customer in a list of customers.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Returning Results with Oracle REF CURSORs</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The .NET Framework Data Provider for Oracle supports the use of Oracle REF CURSORs to return a query result.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An Oracle REF CURSOR is returned as an <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleDataReader&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can retrieve an <bpt id="p1">**</bpt>OracleDataReader<ept id="p1">**</ept> object, that represents an Oracle REF CURSOR using the <ph id="ph1">&lt;xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A&gt;</ph> method, and you can also specify an <ph id="ph2">&lt;xref:System.Data.OracleClient.OracleCommand&gt;</ph> that returns one or more Oracle REF CURSORs as the <bpt id="p2">**</bpt>SelectCommand<ept id="p2">**</ept> for an <ph id="ph3">&lt;xref:System.Data.OracleClient.OracleDataAdapter&gt;</ph> used to fill a <ph id="ph4">&lt;xref:System.Data.DataSet&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To access a REF CURSOR returned from an Oracle data source, create an <bpt id="p1">**</bpt>OracleCommand<ept id="p1">**</ept> for your query and add an output parameter that references the REF CURSOR to the <bpt id="p2">**</bpt>Parameters<ept id="p2">**</ept> collection of your <bpt id="p3">**</bpt>OracleCommand<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The name of the parameter must match the name of the REF CURSOR parameter in your query.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Set the type of the parameter to <bpt id="p1">**</bpt>OracleType.Cursor<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ExecuteReader<ept id="p1">**</ept> method of your <bpt id="p2">**</bpt>OracleCommand<ept id="p2">**</ept> will return an <bpt id="p3">**</bpt>OracleDataReader<ept id="p3">**</ept> for the REF CURSOR.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>If your <bpt id="p1">**</bpt>OracleCommand<ept id="p1">**</ept> returns multiple REF CURSORS, add multiple output parameters.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can access the different REF CURSORs by calling the <bpt id="p1">**</bpt>OracleCommand.ExecuteReader<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The call to <bpt id="p1">**</bpt>ExecuteReader<ept id="p1">**</ept> returns an <bpt id="p2">**</bpt>OracleDataReader<ept id="p2">**</ept> referencing the first REF CURSOR.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can then call the <bpt id="p1">**</bpt>OracleDataReader.NextResult<ept id="p1">**</ept> method to access subsequent REF CURSORs.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Although the parameters in your <bpt id="p1">**</bpt>OracleCommand.Parameters<ept id="p1">**</ept> collection match the REF CURSOR output parameters by name, the <bpt id="p2">**</bpt>OracleDataReader<ept id="p2">**</ept> accesses them in the order that they were added to the <bpt id="p3">**</bpt>Parameters<ept id="p3">**</ept> collection.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, consider the following Oracle package and package body.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following code creates an <bpt id="p1">**</bpt>OracleCommand<ept id="p1">**</ept> that returns the REF CURSORs from the previous Oracle package by adding two parameters of type <bpt id="p2">**</bpt>OracleType.Cursor<ept id="p2">**</ept> to the <bpt id="p3">**</bpt>Parameters<ept id="p3">**</ept> collection.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following code returns the results of the previous command using the <bpt id="p1">**</bpt>Read<ept id="p1">**</ept> and <bpt id="p2">**</bpt>NextResult<ept id="p2">**</ept> methods of the <bpt id="p3">**</bpt>OracleDataReader<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The REF CURSOR parameters are returned in order.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The following example uses the previous command to populate a <bpt id="p1">**</bpt>DataSet<ept id="p1">**</ept> with the results of the Oracle package.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To avoid an <bpt id="p1">**</bpt>OverflowException<ept id="p1">**</ept>, we recommend that you also handle any conversion from the Oracle NUMBER type to a valid .NET Framework type before storing the value in a <bpt id="p2">**</bpt>DataRow<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>FillError<ept id="p1">**</ept> event to determine if an <bpt id="p2">**</bpt>OverflowException<ept id="p2">**</ept> has occurred.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information on the <bpt id="p1">**</bpt>FillError<ept id="p1">**</ept> event, see <bpt id="p2">[</bpt>Handling DataAdapter Events<ept id="p2">](../../../../docs/framework/data/adonet/handling-dataadapter-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Working with DataReaders<ept id="p1">](http://msdn.microsoft.com/en-us/126a966a-d08d-4d22-a19f-f432908b2b54)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DataAdapters and DataReaders<ept id="p1">](../../../../docs/framework/data/adonet/dataadapters-and-datareaders.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Commands and Parameters<ept id="p1">](../../../../docs/framework/data/adonet/commands-and-parameters.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Retrieving Database Schema Information<ept id="p1">](../../../../docs/framework/data/adonet/retrieving-database-schema-information.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ADO.NET Managed Providers and DataSet Developer Center<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=217917)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>