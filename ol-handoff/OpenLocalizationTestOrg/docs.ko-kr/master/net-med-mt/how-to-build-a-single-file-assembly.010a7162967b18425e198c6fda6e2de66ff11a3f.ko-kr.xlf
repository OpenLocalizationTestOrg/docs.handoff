<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-build-a-single-file-assembly.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ddf25f1d588c0972381a54ee0da4b35e3c0dc33</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\app-domains\how-to-build-a-single-file-assembly.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c6d48229cbec9f9f74a4ad1401ed693534dcfae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d9ecb79842b13167f6bb8ba2dccef49aa17a671</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Build a Single-File Assembly | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Build a Single-File Assembly</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A single-file assembly, which is the simplest type of assembly, contains type information and implementation, as well as the <bpt id="p1">[</bpt>assembly manifest<ept id="p1">](../../../docs/framework/app-domains/assembly-manifest.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use command-line compilers or <ph id="ph1">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> to create a single-file assembly.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By default, the compiler creates an assembly file with an .exe extension.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> for C# and Visual Basic can be used only to create single-file assemblies.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you want to create multifile assemblies, you must use command-line compilers or <ph id="ph1">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> for Visual C++.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following procedures show how to create single-file assemblies using command-line compilers.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To create an assembly with an .exe extension</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following command:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>compiler command<ept id="p1">*</ept><ph id="ph2">&gt; </ph><ph id="ph3">\&lt;</ph><bpt id="p2">*</bpt>module name<ept id="p2">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this command, <bpt id="p1">*</bpt>compiler command<ept id="p1">*</ept> is the compiler command for the language used in your code module, and <bpt id="p2">*</bpt>module name<ept id="p2">*</ept> is the name of the code module to compile into the assembly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example creates an assembly named <ph id="ph1">`myCode.exe`</ph> from a code module called <ph id="ph2">`myCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To create an assembly with an .exe extension and specify the output file name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following command:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>compiler command<ept id="p1">*</ept><ph id="ph2">&gt; </ph><bpt id="p2">**</bpt>/out:<ept id="p2">**</ept><ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>file name<ept id="p3">*</ept><ph id="ph4">&gt; </ph><ph id="ph5">\&lt;</ph><bpt id="p4">*</bpt>module name<ept id="p4">*</ept><ph id="ph6">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this command, <bpt id="p1">*</bpt>compiler command<ept id="p1">*</ept> is the compiler command for the language used in your code module, <bpt id="p2">*</bpt>file name<ept id="p2">*</ept> is the output file name, and <bpt id="p3">*</bpt>module name<ept id="p3">*</ept> is the name of the code module to compile into the assembly.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example creates an assembly named <ph id="ph1">`myAssembly.exe`</ph> from a code module called <ph id="ph2">`myCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Creating Library Assemblies</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A library assembly is similar to a class library.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It contains types that will be referenced by other assemblies, but it has no entry point to begin execution.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To create a library assembly</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>At the command prompt, type the following command:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>compiler command<ept id="p1">*</ept><ph id="ph2">&gt; </ph><bpt id="p2">**</bpt>/t:library<ept id="p2">**</ept> <ph id="ph3">\&lt;</ph><bpt id="p3">*</bpt>module name<ept id="p3">*</ept><ph id="ph4">&gt;</ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this command, <bpt id="p1">*</bpt>compiler command<ept id="p1">*</ept> is the compiler command for the language used in your code module, and <bpt id="p2">*</bpt>module name<ept id="p2">*</ept> is the name of the code module to compile into the assembly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can also use other compiler options, such as the <bpt id="p1">**</bpt>/out:<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following example creates a library assembly named <ph id="ph1">`myCodeAssembly.dll`</ph> from a code module called <ph id="ph2">`myCode`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating Assemblies<ept id="p1">](../../../docs/framework/app-domains/create-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Multifile Assemblies<ept id="p1">](../../../docs/framework/app-domains/multifile-assemblies.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Build a Multifile Assembly<ept id="p1">](../../../docs/framework/app-domains/how-to-build-a-multifile-assembly.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Programming with Assemblies<ept id="p1">](../../../docs/framework/app-domains/programming-with-assemblies.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>