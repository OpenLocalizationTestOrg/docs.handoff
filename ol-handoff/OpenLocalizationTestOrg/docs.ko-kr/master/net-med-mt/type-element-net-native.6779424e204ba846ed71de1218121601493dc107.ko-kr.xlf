<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37ae0ab9327cb71abedf222fb9baa2303e6ecffd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\net-native\type-element-net-native.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce631b31f78b3848c1dbd70896874f0e85234034</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5421a8569e86cb540e27f190bf5c3532544a4b7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>Type<ph id="ph2">&amp;gt;</ph> Element (.NET Native) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&amp;lt;</ph>Type<ph id="ph2">&amp;gt;</ph> Element (.NET Native)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Applies runtime policy to a particular type, such as a class or structure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Attributes and Elements</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following sections describe attributes, child elements, and parent elements.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Attributes</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Attribute type</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>General</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Required attribute.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifies the type name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Reflection</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Controls runtime access to constructors to enable activation of instances.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Reflection</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Controls querying for information about program elements, but does not enable any runtime access.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Reflection</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Controls runtime access to all type members, including constructors, methods, fields, properties, and events, to enable dynamic programming.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Controls runtime access to constructors, fields, and properties, to enable type instances to be serialized and deserialized by libraries such as the Newtonsoft JSON serializer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Controls policy for serialization that uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Controls policy for JSON serialization that uses the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Json.DataContractJsonSerializer?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Controls policy for XML serialization that uses the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Interop</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Controls policy for marshaling reference types to Windows Runtime and COM.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Interop</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Controls policy for marshaling delegate types as function pointers to native code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Interop</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Optional attribute.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Controls policy for marshaling value types to native code.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Name attribute</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type_name<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The type name.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If this <ph id="ph1">`&lt;Type&gt;`</ph> element is the child of either a <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>Namespace&gt;<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> element or another <ph id="ph3">`&lt;Type&gt;`</ph> element, <bpt id="p2">*</bpt>type_name<ept id="p2">*</ept> can include the name of the type without its namespace.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Otherwise, <bpt id="p1">*</bpt>type_name<ept id="p1">*</ept> must include the fully qualified type name.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>All other attributes</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>policy_setting<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The setting to apply to this policy type.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Possible values are <ph id="ph1">`All`</ph>, <ph id="ph2">`Auto`</ph>, <ph id="ph3">`Excluded`</ph>, <ph id="ph4">`Public`</ph>, <ph id="ph5">`PublicAndInternal`</ph>, <ph id="ph6">`Required Public`</ph>, <ph id="ph7">`Required PublicAndInternal`</ph>, and <ph id="ph8">`Required All`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Runtime Directive Policy Settings<ept id="p1">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Child Elements</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>AttributeImplies&gt;<ept id="p1">](../../../docs/framework/net-native/attributeimplies-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the containing type is an attribute, defines runtime policy for code elements to which the attribute is applied.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Event&gt;<ept id="p1">](../../../docs/framework/net-native/event-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to an event belonging to this type.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Field&gt;<ept id="p1">](../../../docs/framework/net-native/field-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a field belonging to this type.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>GenericParameter&gt;<ept id="p1">](../../../docs/framework/net-native/genericparameter-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Applies policy to the parameter type of a generic type.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>ImpliesType&gt;<ept id="p1">](../../../docs/framework/net-native/impliestype-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Applies policy to a type, if that policy has been applied to the type represented by the containing <ph id="ph1">`&lt;Type&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Method&gt;<ept id="p1">](../../../docs/framework/net-native/method-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a method belonging to this type.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>MethodInstantiation&gt;<ept id="p1">](../../../docs/framework/net-native/methodinstantiation-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a constructed generic method belonging to this type.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Property&gt;<ept id="p1">](../../../docs/framework/net-native/property-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a property belonging to this type.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Subtypes&gt;<ept id="p1">](../../../docs/framework/net-native/subtypes-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Applies runtime policy to all classes inherited from the containing type.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a nested type.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>TypeInstantiation&gt;<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a constructed generic type.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Parent Elements</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Element</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Application&gt;<ept id="p1">](../../../docs/framework/net-native/application-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Serves as a container for application-wide types and type members whose metadata is available for reflection at run time.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Assembly&gt;<ept id="p1">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to all the types in a specified assembly.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Library&gt;<ept id="p1">](../../../docs/framework/net-native/library-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Defines the assembly that contains types and type members whose metadata is available for reflection at run time.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>Namespace&gt;<ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to all the types in a namespace.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a type and all its members.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>TypeInstantiation&gt;<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Applies reflection policy to a constructed generic type and all its members.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The reflection, serialization, and interop attributes are all optional.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If none are present, the <ph id="ph1">`&lt;Type&gt;`</ph> element serves as a container whose child types define policy for individual members.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`&lt;Type&gt;`</ph> element is the child of an <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>Assembly&gt;<ept id="p1">](../../../docs/framework/net-native/assembly-element-net-native.md)</ept>, <bpt id="p2">[</bpt><ph id="ph3">\&lt;</ph>Namespace&gt;<ept id="p2">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept>, <ph id="ph4">`&lt;Type&gt;`</ph>, or <bpt id="p3">[</bpt><ph id="ph5">\&lt;</ph>TypeInstantiation&gt;<ept id="p3">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> element, it overrides the policy settings defined by the parent element.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`&lt;Type&gt;`</ph> element of a generic type applies its policy to all instantiations that do not have their own policy.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The policy of constructed generic types is defined by the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>TypeInstantiation&gt;<ept id="p1">](../../../docs/framework/net-native/typeinstantiation-element-net-native.md)</ept> element.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the type is a generic type, its name is decorated by a grave accent symbol (```) followed by its number of generic parameters.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Name`</ph> attribute of a <ph id="ph2">`&lt;Type&gt;`</ph> element for the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph> class appears as <ph id="ph4">`Name="System.Collections.Generic.List`</ph>1"`.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The following example uses reflection to display information about the fields, properties, and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`b`</ph> in the example is a <bpt id="p1">[</bpt>TextBlock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> control.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Because the example simply retrieves type information, the availability of metadata is controlled by the <ph id="ph1">`Browse`</ph> policy setting.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ProjectN_Reflection#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/cs/browsegenerictype1.cs#3)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Because metadata for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class isn't automatically included by the <ph id="ph2">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain, the example fails to display the requested member information at run time.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>To provide the necessary metadata, add the following <ph id="ph1">`&lt;Type&gt;`</ph> element to the runtime directives file.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Note that, because we've provided a parent <bpt id="p1">[</bpt>&lt;Namespace<ph id="ph1">\&gt;</ph><ept id="p1">](../../../docs/framework/net-native/namespace-element-net-native.md)</ept> element, we don't have to provide a fully qualified type name in the <ph id="ph2">`&lt;Type&gt;`</ph> element.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The following example uses reflection to retrieve a <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.String.Chars%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method to retrieve the value of the seventh character in a string, and to display all the characters in the string.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The variable <ph id="ph1">`b`</ph> in the example is a <bpt id="p1">[</bpt>TextBlock<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/windows.ui.xaml.controls.textblock.aspx)</ept> control.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>ProjectN_Reflection#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/projectn_reflection/cs/propertyinfo1.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Because metadata for the <ph id="ph1">&lt;xref:System.String&gt;</ph> object isn't available, the call to the <ph id="ph2">&lt;xref:System.Reflection.PropertyInfo.GetValue%28System.Object%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method throws a <ph id="ph3">&lt;xref:System.NullReferenceException&gt;</ph> exception at run time when compiled with the <ph id="ph4">[!INCLUDE[net_native](../../../includes/net-native-md.md)]</ph> tool chain.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To eliminate the exception and provide the necessary metadata, add the following <ph id="ph1">`&lt;Type&gt;`</ph> element to the runtime directives file:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Runtime Directives (rd.xml) Configuration File Reference<ept id="p1">](../../../docs/framework/net-native/runtime-directives-rd-xml-configuration-file-reference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Runtime Directive Elements<ept id="p1">](../../../docs/framework/net-native/runtime-directive-elements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Runtime Directive Policy Settings<ept id="p1">](../../../docs/framework/net-native/runtime-directive-policy-settings.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>