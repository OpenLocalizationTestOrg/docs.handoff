<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="messaging-protocols.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-229404f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e850ee50503289ed25dd0fe920d0cb56af318c8b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\messaging-protocols.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1443a19f0482129b4f8013ed3db916f71b357c4b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26077efc83c9eee77302b1a158476c7913fcd956</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Messaging Protocols | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Messaging Protocols</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> channel stack employs encoding and transport channels to transform internal message representation into its wire format and send it by using a particular transport.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The most common transport used for Web services interoperability is HTTP, and the most common encodings used by Web services are XML-based SOAP 1.1, SOAP 1.2, and Message Transmission Optimization Mechanism (MTOM).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic covers <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implementation details for the following protocols employed by <ph id="ph2">&lt;xref:System.ServiceModel.Channels.HttpTransportBindingElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Specification/document</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Link</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>HTTP 1.1</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>SOAP 1.1 HTTP Binding</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">http://www.w3.org/TR/2000/NOTE-SOAP-20000508/</ph>, Section 7</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>SOAP 1.2 HTTP Binding</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">http://www.w3.org/TR/soap12-part2/</ph>, Section 7</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This topic covers <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implementation details for the following protocols  that <ph id="ph2">&lt;xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.MtomMessageEncodingBindingElement&gt;</ph> employ.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Specification/Document</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Link</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>XML</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>SOAP 1.1</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>SOAP 1.2 Core</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>WS-Addressing 2004/08</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>W3C Web Services Addressing 1.0 - Core</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>W3C Web Services Addressing 1.0 - SOAP Binding</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>W3C Web Services Addressing 1.0 - WSDL Binding</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>W3C Web Services Addressing 1.0 - Metadata</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>WSDL SOAP1.1 Binding</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>WSDL SOAP1.2 Binding</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This topic covers <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implementation details for the following protocols that <ph id="ph2">&lt;xref:System.ServiceModel.Channels.MtomMessageEncodingBindingElement&gt;</ph> employs.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Specification/document</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Link</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>XOP</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>MTOM + SOAP 1.2 Binding</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>MTOM SOAP 1.1 Binding</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>MTOM WS-Policy Assertion</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">http://www.w3.org/Submission/2006/SUBM-WS-MTOMPolicy-20061101/</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following XML namespaces and associated prefixes are used throughout this topic.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Prefix</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Namespace Uniform Resource Identifier (URI)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>s11</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>s12</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>wsa</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>wsam</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>wsap</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>wsa10</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>wsaw10</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>xop</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>xmime</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>dp</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>SOAP 1.1 and SOAP 1.2</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Envelope and Processing Model</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements SOAP 1.1 envelope processing following Basic Profile 1.1 (BP11) and Basic Profile 1.0 (SSBP10).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>SOAP 1.2 Envelope processing is implemented following SOAP12-Part1.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This section explains certain implementation choices taken by <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> with regard to BP11 and SOAP12-Part1.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Mandatory Header Processing</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> follows rules for processing headers marked <ph id="ph2">`mustUnderstand`</ph> described in the SOAP 1.1 and SOAP 1.2 specifications, with the following variations.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A message that enters the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> channel stack is processed by individual channels configured by associated binding elements, for example, Text Message Encoding, Security, Reliable Messaging, and Transactions.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Each channel recognizes headers from the associated namespace and marks them as understood.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Once a message enters the dispatcher, the operation formatter reads headers expected by the corresponding message/operation contract and marks them understood.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Then the dispatcher verifies whether any remaining headers are not understood but marked as <ph id="ph1">`mustUnderstand`</ph> and throws an exception.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Messages that contain <ph id="ph1">`mustUnderstand`</ph> headers that are targeted at the recipient are not processed by recipient application code.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Such layered processing allows for separation between infrastructure layers and application layers of the SOAP node:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>B1111: Headers that are not understood are detected after the message is processed by the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> infrastructure channel stack, but before it is processed by application</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mustUnderstand`</ph> header value differs between SOAP 1.1 and SOAP 1.2.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Basic Profile 1.1 requires that the <ph id="ph1">`mustUnderstand`</ph> value be 0 or 1 for SOAP 1.1 messages.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>SOAP 1.2 allows 0, 1, <ph id="ph1">`false`</ph>, and <ph id="ph2">`true`</ph> as values, but recommends emitting a canonical representation of <ph id="ph3">`xs:boolean`</ph> values (<ph id="ph4">`false`</ph>, <ph id="ph5">`true`</ph>).</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>B1112: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> emits <ph id="ph2">`mustUnderstand`</ph> values 0 and 1 for both SOAP 1.1 and SOAP 1.2 versions of the SOAP envelope.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> accepts the entire value space of <ph id="ph2">`xs:boolean`</ph> for the <ph id="ph3">`mustUnderstand`</ph> header (0, 1, <ph id="ph4">`false`</ph>, <ph id="ph5">`true`</ph>)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>SOAP Faults</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following is a list of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>-specific SOAP fault implementations.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>B2121: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> returns the following SOAP 1.1 Fault Codes: <ph id="ph2">`s11:mustUnderstand`</ph>, <ph id="ph3">`s11:Client`</ph>, and <ph id="ph4">`s11:Server`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>B2122: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> returns the following SOAP 1.2 Fault Codes: <ph id="ph2">`s12:MustUnderstand`</ph>, <ph id="ph3">`s12:Sender`</ph>, and <ph id="ph4">`s12:Receiver`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>HTTP Binding</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>SOAP 1.1 HTTP Binding</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements SOAP1.1 HTTP binding following the Basic Profile 1.1 specification section 3.4 with the following clarifications:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>B2211: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service does not implement redirection of HTTP POST requests.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>B2212: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> clients support HTTP Cookies in accordance with 3.4.8.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>SOAP 1.2 HTTP Binding</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements SOAP 1.2 HTTP binding as described in the SOAP 1.2-part 2 (SOAP12Part2) specification with the following clarifications.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>SOAP 1.2 introduced an optional action parameter for the <ph id="ph1">`application/soap+xml`</ph> media type.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This parameter is useful to optimize message dispatch without requiring that the body of the SOAP message be parsed when WS-Addressing is not used.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>R2221: The <ph id="ph1">`application/soap+xml`</ph> action parameter, when present on a SOAP 1.2 request, must match the <ph id="ph2">`soapAction`</ph> attribute on the <ph id="ph3">`wsoap12:operation`</ph> element inside the corresponding WSDL binding.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>R2222: The <ph id="ph1">`application/soap+xml`</ph> action parameter, when present on a SOAP 1.2 message, must match <ph id="ph2">`wsa:Action`</ph> when WS-Addressing 2004/08 or WS-Addressing 1.0 are used.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When WS-Addressing is disabled and an incoming request does not contain an action parameter, message <ph id="ph1">`Action`</ph> is considered not specified.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>WS-Addressing</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements 3 versions of WS-Addressing:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>WS-Addressing 2004/08</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>W3C Web Services Addressing 1.0 Core  (ADDR10-CORE) and SOAP Binding (ADDR10-SOAP)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>WS-Addressing 1.0 - Metadata</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Endpoint References</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>All versions of WS-Addressing that <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements use endpoint references to describe endpoints.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Endpoint References and WS-Addressing Versions</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements a number of the infrastructure protocols that use WS-Addressing and in particular the <ph id="ph2">`EndpointReference`</ph> element and <ph id="ph3">`W3C.WsAddressing.EndpointReferenceType`</ph> class (for example, WS-ReliableMessaging, WS-SecureConversation, and WS-Trust).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports the use of either version of WS-Addressing with other infrastructure protocols.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoints support one version of WS-Addressing per endpoint.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For R3111, the namespace for the <ph id="ph1">`EndpointReference`</ph> element or type used in messages exchanged with a <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint must match the version of WS-Addressing implemented by this endpoint.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For example, if a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint implements WS-ReliableMessaging, the <ph id="ph2">`AcksTo`</ph> header returned by such an endpoint inside <ph id="ph3">`CreateSequenceResponse`</ph> uses the WS-Addressing version that the <ph id="ph4">`EncodingBinding`</ph> element specifies for this endpoint.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Endpoint References and Metadata</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A number of scenarios require communicating metadata or a reference to metadata for a given endpoint.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>B3121: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> employs mechanisms described in the WS-MetadataExchange (MEX) specification Section 6 to include metadata for endpoint references by value or by reference.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Consider a scenario where a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> service requires authentication using a Security Assertions Markup Language (SAML) token issued by the token issuer at <ph id="ph2">http://sts.fabrikam123.com</ph>. The <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint describes this authentication requirement by using <ph id="ph4">`sp:IssuedToken`</ph> assertion with a nested <ph id="ph5">`sp:Issuer`</ph> assertion pointing to the token issuer.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Client applications that access the <ph id="ph1">`sp:Issuer`</ph> assertion need to know how to communicate with the token issuer endpoint.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The client needs to know metadata about the token issuer.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Using the endpoint reference metadata extensions defined in MEX, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> provides a reference to the token issuer metadata.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Message Addressing Headers</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Message Headers</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For both WS-Addressing versions, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the following message headers as prescribed by the specifications <ph id="ph2">`wsa:To`</ph>, <ph id="ph3">`wsa:ReplyTo`</ph>, <ph id="ph4">`wsa:Action`</ph>, <ph id="ph5">`wsa:MessageID`</ph>,and <ph id="ph6">`wsa:RelatesTo`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>B3211: For all WS-Addressing versions, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> honors, but does not produce out of the box, WS-Addressing message headers <ph id="ph2">`wsa:FaultTo`</ph> and <ph id="ph3">`wsa:From`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Applications that interact with <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> applications can add these message headers and <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> will process them accordingly.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Reference Parameters and Properties</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implements processing of endpoint reference parameters and reference p</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>roperties in accordance with respective specifications.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>B3221: When configured to use WS-Addressing 2004/08, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoints do not differentiate between processing Reference Properties and Reference Parameters.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Message Exchange Patterns</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The sequence of messages involved in the Web service operation invocation is referred to as the <bpt id="p1">*</bpt>message exchange pattern<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports one-way, request-reply, and duplex message exchange patterns.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This section clarifies WS-Addressing requirements on message processing depending on the message exchange pattern being used.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Throughout this section, the requester sends the first message and the responder receives the first message.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>One-Way Message</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint is configured to support messages with a given <ph id="ph2">`Action`</ph> to follow a one-way pattern, the <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint follows the following behaviors and requirements.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Unless otherwise specified, behaviors and rules apply for both versions of WS-Addressing supported in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>R3311: The requester must include <ph id="ph1">`wsa:To`</ph>, <ph id="ph2">`wsa:Action`</ph>, and headers for all reference parameters specified by the endpoint reference.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>When WS-Addressing 2004/08 is used and [reference properties] are specified by the endpoint reference, the corresponding headers must be added to the message too.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>B3312: The requester may include <ph id="ph1">`MessageID`</ph>, <ph id="ph2">`ReplyTo`</ph>, and <ph id="ph3">`FaultTo`</ph> headers.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The receiver infrastructure will ignore them, and they will be passed to the application.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>R3313: When HTTP is used and no message is being sent on the HTTP response leg, the responder must send an HTTP response with an empty body and an HTTP 202 status code.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>When the HTTP transport is in use and the operation contract declares a message one-way, the HTTP response can still be used for sending infrastructure messages—for example, reliable messaging can send a <ph id="ph1">`SequenceAcknowledgement`</ph> message on an HTTP response.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>B3314: The <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> responder does not send a fault message in response to a one-way message.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Request-Reply</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint is configured for a message with a given <ph id="ph2">`Action`</ph> to follow the request-reply pattern, the <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint follows the behaviors and requirements below.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Unless specified otherwise, behaviors and rules apply for both versions of WS-Addressing supported in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>:</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>R3321: The requester must include in the request <ph id="ph1">`wsa:To`</ph>, <ph id="ph2">`wsa:Action`</ph>, <ph id="ph3">`wsa:MessageID`</ph>, and headers for all reference parameters or reference properties (or both) specified by the endpoint reference.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>R3322: When WS-Addressing 2004/08 is used, <ph id="ph1">`ReplyTo`</ph> must also be included in the request.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>R3323: When WS-Addressing 1.0 is used and <ph id="ph1">`ReplyTo`</ph> is not present in the request, a default endpoint reference with the [address] property equal to "<ph id="ph2">http://www.w3.org/2005/08/addressing/anonymous</ph>" is used.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>R3324: The requester must include <ph id="ph1">`wsa:To`</ph>, <ph id="ph2">`wsa:Action`</ph>, and <ph id="ph3">`wsa:RelatesTo`</ph> headers in the reply message, as well as headers for all reference parameters or reference properties (or both) specified by the <ph id="ph4">`ReplyTo`</ph> endpoint reference in the request.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Web Services Addressing Faults</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>R3411: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> produces the following faults defined by WS-Addressing 2004/08.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Cause</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>wsa:DestinationUnreachable</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The message arrived with a <ph id="ph1">`ReplyTo`</ph> that is different from the reply address established for this channel; there is no endpoint listening at the address specified in the To header.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>wsa:ActionNotSupported</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>the infrastructure channels or dispatcher associated with the endpoint do not recognize the action specified in the <ph id="ph1">`Action`</ph> header.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>R3412: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> produces the following faults defined by WS-Addressing 1.0.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Code</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Cause</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>wsa10:InvalidAddressingHeader</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Duplicate <ph id="ph1">`wsa:To`</ph>, <ph id="ph2">`wsa:ReplyTo`</ph>, <ph id="ph3">`wsa:From`</ph> or <ph id="ph4">`wsa:MessageID`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Duplicate <ph id="ph1">`wsa:RelatesTo`</ph> with the same <ph id="ph2">`RelationshipType`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>wsa10:MessageAddressingHeaderRequired</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The required Addressing header is missing.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>wsa10:DestinationUnreachable</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The message arrived with a <ph id="ph1">`ReplyTo`</ph> that is different from the reply address established for this channel.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>There is no endpoint listening at the address specified in the To header.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>wsa10:ActionNotSupported</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>An action specified in the <ph id="ph1">`Action`</ph> header is not recognized by the infrastructure channels or dispatcher associated with the endpoint.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>wsa10:EndpointUnavailable</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The RM channel sends this fault back, indicating the endpoint will not process the sequence based upon examination of the <ph id="ph1">`CreateSequence`</ph> message’s addressing headers.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Code in the preceding tables maps to <ph id="ph1">`FaultCode`</ph> in SOAP 1.1 and <ph id="ph2">`SubCode`</ph> (with Code=Sender) in SOAP 1.2.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>WSDL 1.1 Binding and WS-Policy Assertions</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Indicating Use of WS-Addressing</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses policy assertions to indicate endpoint support for a particular WS-Addressing version.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The following policy assertion has Endpoint Policy Subject [WS-PA] and indicates messages sent and received from the endpoint must use WS-Addressing 2004/08.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>This policy assertion augments the WS-Addressing 2004/08 specification.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The following policy assertion this indicates that messages sent/received must use WS-Addressing 1.0.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The following policy assertion has an Endpoint Policy Subject [WS-PA] and indicates that messages sent and received from the endpoint must use WS-Addressing 2004/08.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`wsaw10:UsingAddressing`</ph> element is borrowed from [WS-Addressing-WSDL] and is used in the context of WS-Policy in compliance with that specification, section 3.1.2.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Use of Addressing does not alter the semantics of WSDL 1.1, SOAP 1.1, and SOAP 1.2 HTTP Bindings.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>For example, if a reply is expected to a request that is sent to an endpoint that uses Addressing and WSDL SOAP 1.x HTTP binding, the reply must be sent by using the HTTP response.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>For replies sent over the http response, the WS-AM assertion is:</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The complete policy assertion might look like this:</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>However, there are message exchange patterns that benefit from having two independent converse HTTP connections established between the requester and the responder, for example, unsolicited one-way messages sent by the responder.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> offers a feature by which two underlying transport channels can form a Composite Duplex channel, where one channel is used for input messages and the other is used for output messages.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>In the case of the HTTP Transport, Composite Duplex provides two converse HTTP connections.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The requester uses one connection to send messages to the responder, and the responder uses the other to send messages back to the requester.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>For replies sent over separate http requests, the ws-am assertion is</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The complete policy assertion might look like this:</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Use of the following assertion that has Endpoint Policy Subject [WS-PA] on endpoints that use WSDL 1.1 SOAP 1.x HTTP bindings requires two separate converse HTTP connections to be used for messages flowing from requester to responder and responder to requester, respectively.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The previous statement leads to the following requirements on the <ph id="ph1">`wsa:ReplyTo`</ph> header for request messages:</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>R3514: Request messages sent to an endpoint must have a <ph id="ph1">`ReplyTo`</ph> header with the <ph id="ph2">`[address]`</ph> property not equal to "<ph id="ph3">http://www.w3.org/2005/08/addressing/anonymous</ph>" if the endpoint uses a WSDL 1.1 SOAP 1.x HTTP binding and has a policy alternative with a <ph id="ph4">`wsap10:UsingAddressing`</ph> or <ph id="ph5">`wsap:UsingAddressing`</ph> assertion coupled with <ph id="ph6">`cdp:CompositeDuplex`</ph> attached.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>R3515: Request messages sent to an endpoint must have a <ph id="ph1">`ReplyTo`</ph> header with the <ph id="ph2">`[address]`</ph> property equal to "<ph id="ph3">http://www.w3.org/2005/08/addressing/anonymous</ph>", or not have a <ph id="ph4">`ReplyTo`</ph> header at all, if the endpoint uses a WSDL 1.1 SOAP 1.x HTTP binding and has a policy alternative with <ph id="ph5">`wsap10:UsingAddressing`</ph> assertion and no <ph id="ph6">`cdp:CompositeDuplex`</ph> assertion attached.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>R3516: Request messages sent to an endpoint must have a <ph id="ph1">`ReplyTo`</ph> header with an <ph id="ph2">`[address]`</ph> property equal to "<ph id="ph3">http://www.w3.org/2005/08/addressing/anonymous</ph>" if the endpoint uses a WSDL 1.1 SOAP 1.x HTTP binding and has a policy alternative with <ph id="ph4">`wsap:UsingAddressing`</ph> assertion and no <ph id="ph5">`cdp:CompositeDuplex`</ph> assertion attached.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The WS-addressing WSDL specification attempts to describe similar protocol bindings by introducing an element <ph id="ph1">`&lt;wsaw:Anonymous/&gt;`</ph> with three textual values (required, optional, and prohibited) to indicate requirements on the <ph id="ph2">`wsa:ReplyTo`</ph> header (section 3.2).</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Unfortunately, such element definition is not particularly usable as an assertion in the context of WS-Policy, because it requires domain-specific extensions to support the intersection of alternatives using such an element as an assertion.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Such element definition also indicates the value of the <ph id="ph1">`ReplyTo`</ph> header as opposed to the endpoint behavior on the wire, which makes it specific to HTTP transport.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Action Definition</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>WS-Addressing 2004/08 defines a <ph id="ph1">`wsa:Action`</ph> attribute for the <ph id="ph2">`wsdl:portType/wsdl:operation/[wsdl:input | wsdl:output | wsdl:fault]`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>WS-Addressing 1.0 WSDL Binding (WS-ADDR10-WSDL) defines a similar attribute, <ph id="ph1">`wsaw10:Action`</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The only difference between the two is the default Action pattern semantics described in section 3.3.2 of WS-ADDR and section 4.4.4 of WS-ADDR10-WSDL, respectively.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>It is a reasonable to have two endpoints that share the same <ph id="ph1">`portType`</ph> (or contract, in <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> terminology) but using different versions of WS-Addressing.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>But given that Action is defined by the <ph id="ph1">`portType`</ph> and should not change across the endpoints that implement the <ph id="ph2">`portType`</ph>, it becomes impossible to support both default action patterns.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>To resolve this controversy, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports a single version of the <ph id="ph2">`Action`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>B3521: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the <ph id="ph2">`wsaw10:Action`</ph> attribute on <ph id="ph3">`wsdl:portType/wsdl:operation/[wsdl:input | wsdl:output | wsdl:fault]`</ph> elements as defined in WS-ADDR10-WSDL to determine the <ph id="ph4">`Action`</ph> URI for the corresponding messages irrespective of the WS-Addressing version used by the endpoint.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Use Endpoint Reference Inside WSDL Port</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>WS-ADDR10-WSDL section 4.1 extends the <ph id="ph1">`wsdl:port`</ph> element to include the <ph id="ph2">`&lt;wsa10:EndpointReference…/&gt;`</ph> child element to describe the endpoint in WS-Addressing terms.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> expands this utility on WS-Addressing 2004/08, allowing <ph id="ph2">`&lt;wsa:EndpointReference…/&gt;`</ph> to appear as a child element of <ph id="ph3">`wsdl:port`</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>R3531: If an endpoint has an attached policy alternative with a <ph id="ph1">`&lt;wsaw10:UsingAddressing/&gt;`</ph> policy assertion, the corresponding <ph id="ph2">`wsdl:port`</ph> element can contain a child element <ph id="ph3">`&lt;wsa10:EndpointReference …/&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>R3532: If a <ph id="ph1">`wsdl:port`</ph> contains a child element <ph id="ph2">`&lt;wsa10:EndpointReference …/&gt;`</ph>, the <ph id="ph3">`wsa10:EndpointReference/wsa10:Address`</ph> child element value must match the value of the <ph id="ph4">`@address`</ph> attribute of the sibling <ph id="ph5">`wsdl:port`</ph><ph id="ph6">/</ph><ph id="ph7">`wsdl:location`</ph> element.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>R3533: If an endpoint has an attached policy alternative with <ph id="ph1">`&lt;wsap:UsingAddressing/&gt;`</ph> policy assertion, the corresponding <ph id="ph2">`wsdl:port`</ph> element can contain a child element <ph id="ph3">`&lt;wsa:EndpointReference …/&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>R3534: If a <ph id="ph1">`wsdl:port`</ph> contains a child element <ph id="ph2">`&lt;wsa:EndpointReference …/&gt;`</ph>, the <ph id="ph3">`wsa:EndpointReference/wsa:Address`</ph> child element value must match the value of the <ph id="ph4">`@address`</ph> attribute of the sibling <ph id="ph5">`wsdl:port`</ph><ph id="ph6">/</ph><ph id="ph7">`wsdl:location`</ph> element.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Composition with WS-Security</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>According to security consideration sections in WS-ADDR and WS-ADDR10, all addressing message headers are recommended to be signed together with the message body to bind them together.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>When WS-Security is used for message integrity protection, WS-Addressing message headers as well as headers resulted from reference parameters or properties (or both) must be signed together with the body of the message.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>One-Way Message</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>In this scenario, the sender sends a one-way message to the receiver.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>SOAP 1.2, HTTP 1.1, and W3C WS-Addressing 1.0 are used.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The Request Message Structure: The message headers include <ph id="ph1">`wsa10:To`</ph> and <ph id="ph2">`wsa10:Action`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The message body includes a specific <ph id="ph1">`&lt;app:Ping&gt;`</ph> element from the application namespace.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>HTTP Headers: The destination in POST matches the URI in the <ph id="ph1">`wsa10:To`</ph> element.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The Content-Type header has the value of <ph id="ph1">`application/soap+xml`</ph> as required by SOAP 1.2.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Parameters <ph id="ph1">`charset`</ph> and <ph id="ph2">`action`</ph> are included.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`action`</ph> parameter of the Content-Type header matches the value of the <ph id="ph2">`wsa10:Action`</ph> message header.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The receiver responds with an empty HTTP response and status 202.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>An example of the HTTP response:</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>SOAP Message Transmission Optimization Mechanism</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>This section describes the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> implementation details for the HTTP SOAP MTOM.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>MTOM technology is SOAP message encoding mechanism of the same class as traditional text/XML encoding or <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Binary encoding.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>MTOM includes the following:</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>An XML encoding and packaging mechanism described by [XOP] that optimizes XML information items containing base64-encoded binary data into separate binary parts.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A MIME encapsulation of the XOP package that serializes the XML Infoset and each binary part of the XOP package into a separate MIME part.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>A MIME XOP encoding applied to SOAP 1.x Envelope.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>An HTTP transport binding.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>It is possible to use MTOM with non-HTTP transports with <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>However, in this topic we will focus on HTTP.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The MTOM format leverages a large set of specifications covering MTOM itself, XOP, and MIME.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Modularity of this specification set makes it somewhat difficult to reconstruct exact requirements on the format and processing semantics.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>This section describes the format and processing requirements for MTOM HTTP binding.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>MTOM Message Encoding</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Generating MTOM messages</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The [XOP] section 3.1 describes the process of encoding XML with element information items that contain base64 values into an abstractly defined XOP package.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The following sequence of steps describes the MTOM-specific encoding process:</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Ensure that the SOAP Envelope to be encoded contains no element information item with a <ph id="ph1">`[namespace name]`</ph> of "<ph id="ph2">http://www.w3.org/2004/08/xop/include</ph>" and a <ph id="ph3">`[local name]`</ph> of <ph id="ph4">`Include`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Create an empty MIME package.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Identify within the Original XML Infoset the element information items to be optimized.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>For the items to be optimized, the characters that make up the <ph id="ph1">`[children]`</ph> of the element information item must be in the canonical form of <ph id="ph2">`xs:base64Binary`</ph> (see XSD-2, 3.2.16 base64Binary) and must not contain any whitespace characters preceding, inline with, or following the non-whitespace content.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Create an XOP SOAP Envelope that is a copy of the Original SOAP Envelope, but with the children of each element information item identified in the previous step replaced by an <ph id="ph1">`xop:Include`</ph> element information item constructed as follows:</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Transform the replaced characters into binary data by processing them as base64-encoded data.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Generate a unique Content-ID header value that satisfies requirements R3133 and R3134.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Generate a Content-Transfer-Encoding MIME header with the value binary.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If the element information item being optimized (the [parent] of the newly inserted <ph id="ph1">`xop:Include`</ph> element information item) has an <ph id="ph2">`xmime:contentType`</ph> attribute information item, generate a Content-Type MIME header with the value of the <ph id="ph3">`xmime:contentType`</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Generate a new binary MIME part with content formed by binary data decoded from the replaced characters processed as base64, Content-ID header from 4b, Content- Transfer-Encoding header from 4c, Content-Type header if generated in step 4d.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Add an <ph id="ph1">`href`</ph> attribute to the <ph id="ph2">`xop:Include`</ph> element with the value cid: uri derived from Content-ID header value generated in step 4b.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remove the enclosing "<ph id="ph1">\&lt;</ph>" and "&gt;" characters, URL-escape the remaining string, and add the prefix <ph id="ph2">`cid:`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The following minimum character set is required to be escaped by RFC1738 and RFC2396.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Other characters can be escaped.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Create a root MIME part with the XOP SOAP Envelope from step 4.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Write the HTTP headers, including the HTTP Content-Type header.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Write the MIME package.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Processing MTOM messages</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Processing of an MTOM message is the exact reverse of the process described in the preceding "Generating MTOM messages" section:</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Ensure the root MIME part has the Content-Type <ph id="ph1">`application/xop+xml`</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Construct a SOAP Envelope by parsing the root MIME part of the package as an XML document.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Character encoding is determined by the <ph id="ph1">`charset`</ph> parameter of the Content-Type of the root MIME part.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For each element information item in the constructed SOAP Envelope, which has, as the sole member of its [children] property, an <ph id="ph1">`xop:Include`</ph> element information item:</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`cid:`</ph> prefix and unescape all URI-escape sequences (RFC 2396) in the value of the <ph id="ph2">`@href`</ph> attribute of the <ph id="ph3">`xop:Include`</ph> element.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Enclose the result string in "<ph id="ph1">\&lt;</ph>", "&gt;".</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Locate the MIME part with the Content-ID header value that matches the string derived in step 3a.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`xop:Include`</ph> element information item that appears in the <ph id="ph2">`children`</ph> property of each item with the character information items that represent the canonical base64 encoding (see XSD-2, 3.2.16 base64Binary) of the entity body of the MIME part identified in step 3b (effectively replace the <ph id="ph3">`xop:Include`</ph> element information item with the data reconstructed from the package part).</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>HTTP Content-Type Header</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The following is a list of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> clarifications for the format of the HTTP Content-Type header of a SOAP 1.x MTOM-encoded message derived from requirements stated in the MTOM specification itself and are derived from MTOM and RFC 2387.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>R4131: An HTTP Content-Type header must have the value of multipart/related (case-insensitive) and its parameters.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Parameter names are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Parameter order is not significant.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The full Backus-Naur Form (BNF) of the Content-Type header for MIME messages is listed in RFC 2045, section 5.1.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>R4132: An HTTP Content-Type header must have a type parameter with the value <ph id="ph1">`application/xop+xml`</ph> enclosed in double quotation marks.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>While the requirement to use double quotation marks is not explicit in RFC 2387, the text observes that all of the multipart/related media type parameters most likely contain reserved characters like "<ph id="ph1">@" or "</ph>/" and therefore need double quotation marks.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>R4133: An HTTP Content-Type header should have a start parameter with the value of the Content-ID header of the MIME part that contains the SOAP 1.x Envelope, enclosed in double quotation marks.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>If the start parameter is omitted, the first MIME part must contain the SOAP 1.x Envelope.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>R4134: An HTTP Content-Type header for a SOAP 1.1 MTOM encoded message must include the start-info parameter with the value of text/xml, enclosed in double quotation marks.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>R4135: An HTTP Content-Type header for a SOAP 1.2 MTOM-encoded message must include the start-info parameter with the value of <ph id="ph1">`application/soap+xml`</ph>, enclosed in double quotation marks.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>R4136: HTTP Content-Type header for a SOAP 1.x MTOM-encoded message must have the boundary parameter with the value (enclosed in double quotation marks) that matches the MIME boundary BNF defined in RFC 2046, section 5.1.1</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Examples:</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>CORRECT</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>CORRECT</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>INCORRECT</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Infoset MIME Part</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>The SOAP 1.x Envelope is encapsulated as a root part of the XOP MIME package and is often called the <ph id="ph1">`infoset`</ph> part.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>R4141: The SOAP 1.x Envelope must be encapsulated as a root part of the XOP MIME package, called the <ph id="ph1">`infoset`</ph> part and referenced from the HTTP Content-Type.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>R4142: The SOAP <ph id="ph1">`Infoset`</ph> part must include the following MIME headers: <ph id="ph2">`Content-ID`</ph>, <ph id="ph3">`Content-Transfer-Encoding`</ph>, and <ph id="ph4">`Content-Type`</ph>.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>The format of the Content-ID header is defined by RFC 2045 as</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`msg-id`</ph> is defined in RFC 2822 (that supersedes RFC 822, referenced in RFC 2045) as:</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>and is effectively an e-mail address enclosed within "<ph id="ph1">\&lt;</ph>" and  "&gt;".</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[CFWS]`</ph> prefix and suffix were added in RFC 2822 to carry comments and should not be used to preserve interoperability.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>R4143: The value of the Content-ID header for the Infoset MIME part must follow <ph id="ph1">`msg-id`</ph> production from RFC 2822 with the <ph id="ph2">`[CFWS]`</ph> prefix and suffix parts omitted.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>A number of MIME implementations relaxed requirements for the value enclosed within "<ph id="ph1">\&lt;</ph>" and "&gt;" to be an e-mail address and used <ph id="ph2">`absoluteURI`</ph> enclosed in "<ph id="ph3">\&lt;</ph>" , "&gt;" in addition to the e-mail address.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>This version of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses values of the Content-ID MIME header of the form:</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>R4144: MTOM processors should accept Content-ID header values that match the following relaxed <ph id="ph1">`msg-id`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>MIME (RFC 2045) provides the Content-Transfer-Encoding header to communicate encoding of the content of the MIME part.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The default defined for Content-Transfer-Encoding is 7-bit, which is not suitable for most SOAP messages, so the Content-Transfer-Encoding header is needed for greater interoperability:</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>R4145: The SOAP Infoset part must contain the Content-Transfer-Encoding header.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>R4146: If the SOAP Envelope character encoding is UTF-8, the value of the Content-Transfer-Encoding header must be 8-bit.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>R4147: If the SOAP Envelope character encoding is UTF-16, the value of the Content-Transfer-Encoding header must be binary.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>According to [XOP] section 5,</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>R4148: SOAP1.1 Infoset part must contain Content-Type header with media type application/xop+xml and parameters type="text/xml" and charset</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>R4149: The SOAP 1.2 Infoset part must contain the Content-Type header with media type <ph id="ph1">`application/xop+xml`</ph> and parameters type="<ph id="ph2">`application/soap+xml`</ph>" and <ph id="ph3">`charset`</ph>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>While XOP defines the <ph id="ph1">`charset`</ph> parameter for <ph id="ph2">`application/xop+xml`</ph> to be optional, it is needed for interoperability similar to the BP 1.1 requirement on the <ph id="ph3">`charset`</ph> parameter for the <ph id="ph4">`text/xml`</ph> media type.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>R41410: The <ph id="ph1">`type`</ph> and <ph id="ph2">`charset`</ph> parameters must be present on the Content-Type header of the SOAP 1.x Infoset part.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>WCF Endpoint Support for MTOM</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The purpose of MTOM is to encode a SOAP message to optimize base64-encoded data.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>The following is a list of constraints:</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>R4151: Any element information item that contains base64-encoded data may be optimized.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>B4152: <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> optimizes element information items that contain base64-encoded data and exceed 1024 bytes in length.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint configured to use MTOM will always send MTOM-encoded messages.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Even if no parts meet the required criteria, the message is still MTOM-encoded (serialized as a MIME package with a single MIME part containing the SOAP envelope).</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>WS-Policy Assertion for MTOM</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses the following policy assertion to indicate MTOM usage by endpoint:</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>R4211: The preceding policy assertion has an Endpoint Policy Subject and specifies that all messages sent to and received from the endpoint must be optimized using MTOM.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>B4212: When configured to use MTOM optimization, an <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> endpoint adds an MTOM Policy assertion to the policy attached to the corresponding <ph id="ph2">`wsdl:binding`</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Composition with WS-Security</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>MTOM is an encoding mechanism that is similar to <ph id="ph1">`text/xml`</ph> and <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> Binary XML.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>MTOM offers natural composition with WS-Security and other WS-* protocols: a message secured using WS-Security can be optimized using MTOM.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>WCF SOAP 1.1 Message Encoded Using MTOM</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>WCF Secure SOAP 1.2 Message Encoded Using MTOM</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>In this example, a message is encoded using MTOM and SOAP 1.2 that is protected using WS-Security.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The binary parts identified for encoding are the contents of the <ph id="ph1">`BinarySecurityToken`</ph>, <ph id="ph2">`CipherValue`</ph> of the <ph id="ph3">`EncryptedData`</ph> corresponding to the encrypted signature and encrypted body.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`CipherValue`</ph> of the <ph id="ph2">`EncryptedKey`</ph> was not identified for optimization by <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, because its length is less then 1024 bytes.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>