<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca14db20120321204078bf3aa3694754b62401a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\feature-details\specifying-data-transfer-in-service-contracts.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e2fd251ae0069384fab984073d0b7d79b91ca2e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cb8a81c33aae8ead67f9c807b8a06b3f61034ae</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifying Data Transfer in Service Contracts | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifying Data Transfer in Service Contracts</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> can be thought of as a messaging infrastructure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service operations can receive messages, process them, and send them messages.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Messages are described using operation contracts.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, consider the following contract.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Here, the <ph id="ph1">`GetAirfare`</ph> operation accepts a message with information about <ph id="ph2">`fromCity`</ph> and <ph id="ph3">`toCity`</ph>, and then returns a message that contains a number.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic explains the various ways in which an operation contract can describe messages.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Describing Messages by Using Parameters</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The simplest way to describe a message is to use a parameter list and the return value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">`fromCity`</ph> and <ph id="ph2">`toCity`</ph> string parameters were used to describe the request message, and the float return value was used to describe the reply message.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the return value alone is not enough to describe a reply message, out parameters may be used.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the following operation has <ph id="ph1">`fromCity`</ph> and <ph id="ph2">`toCity`</ph> in its request message, and a number together with a currency in its reply message:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Additionally, you may use reference parameters to make a parameter part of both the request and the reply message.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The parameters must be of types that can be serialized (converted to XML).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> uses a component called the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> class to perform this conversion.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Most primitive types (such as <ph id="ph1">`int`</ph>, <ph id="ph2">`string`</ph>, <ph id="ph3">`float`</ph>, and <ph id="ph4">`DateTime`</ph>.) are supported.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>User-defined types must normally have a data contract.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Using Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Occasionally, the <ph id="ph1">`DataContractSerializer`</ph> is not adequate to serialize your types.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> supports an alternative serialization engine, the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, which you can also use to serialize parameters.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> allows you to use more control over the resultant XML using attributes such as the <ph id="ph2">`XmlAttributeAttribute`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To switch to using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> for a particular operation or for the entire service, apply the <ph id="ph2">&lt;xref:System.ServiceModel.XmlSerializerFormatAttribute&gt;</ph> attribute to an operation or a service.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Using the XmlSerializer Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-xmlserializer-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remember that manually switching to the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> as shown here is not recommended unless you have specific reasons to do so as detailed in that topic.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To isolate .NET parameter names from contract names, you can use the <ph id="ph1">&lt;xref:System.ServiceModel.MessageParameterAttribute&gt;</ph> attribute, and use the <ph id="ph2">`Name`</ph> property to set the contract name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the following operation contract is equivalent to the first example in this topic.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Describing Empty Messages</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An empty request message can be described by having no input or reference parameters.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example in C#:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example in VB:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An empty reply message can be described by having a <ph id="ph1">`void`</ph> return type and no output or reference parameters.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example in:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This is different from a one-way operation, such as:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetTemperatureStatus`</ph> operation returns an empty message.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It may return a fault instead if there is a problem processing the input message.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`SetLightbulbStatus`</ph> operation returns nothing.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>There is no way to communicate a fault condition from this operation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Describing Messages by Using Message Contracts</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You may want to use a single type to represent the entire message.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>While it is possible to use a data contract for this purpose, the recommended way to do this is to use a message contract—this avoids unnecessary levels of wrapping in the resultant XML.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Additionally, message contracts allow you to exercise more control over resultant messages.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For instance, you can decide which pieces of information should be in the message body and which should be in the message headers.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows the use of message contracts.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Using Message Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-message-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> class is still used by default.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class can also be used with message contracts.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To do this, apply the <ph id="ph1">&lt;xref:System.ServiceModel.XmlSerializerFormatAttribute&gt;</ph> attribute to either the operation or the contract, and use types compatible with the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class in the message headers and body members.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Describing Messages by Using Streams</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Another way to describe messages in operations is to use the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> class or one of its derived classes in an operation contract or as a message contract body member (it must be the only member in this case).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For incoming messages, the type must be <ph id="ph1">`Stream`</ph>—you cannot use derived classes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Instead of invoking the serializer, <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> retrieves data from a stream and puts it directly into an outgoing message, or retrieves data from an incoming message and puts it directly into a stream.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The following sample shows the use of streams.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You cannot combine <ph id="ph1">`Stream`</ph> and non-stream data in a single message body.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Use a message contract to put the extra data in message headers.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example shows the incorrect usage of streams when defining the operation contract.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following sample shows the correct usage of streams when defining an operation contract.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph> <bpt id="p1">[</bpt>Large Data and Streaming<ept id="p1">](../../../../docs/framework/wcf/feature-details/large-data-and-streaming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Using the Message Class</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To have complete programmatic control over messages sent or received, you can use the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> class directly, as shown in the following example code.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This is an advanced scenario, which is described in detail in <bpt id="p1">[</bpt>Using the Message Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-message-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Describing Fault Messages</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In addition to the messages that are described by the return value and output or reference parameters, any operation that is not one-way can return at least two possible messages: its normal response message and a fault message.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Consider the following operation contract.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This operation may either return a normal message that contains a <ph id="ph1">`float`</ph> number, or a fault message that contains a fault code and a description.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can accomplish this by throwing a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> in your service implementation.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You can specify additional possible fault messages by using the <ph id="ph1">&lt;xref:System.ServiceModel.FaultContractAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The additional faults must be serializable using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph>, as shown in the following example code.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>These additional faults can be generated by throwing a <ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> of the appropriate data contract type.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Handling Exceptions and Faults<ept id="p1">](../../../../docs/framework/wcf/extending/handling-exceptions-and-faults.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You cannot use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class to describe faults.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.XmlSerializerFormatAttribute&gt;</ph> has no effect on fault contracts.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Using Derived Types</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You may want to use a base type in an operation or a message contract, and then use a derived type when actually invoking the operation.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In this case, you must use either the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> attribute or some alternative mechanism to allow the use of derived types.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Consider the following operation.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Assume that two types, <ph id="ph1">`Book`</ph> and <ph id="ph2">`Magazine`</ph>, derive from <ph id="ph3">`LibraryItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To use these types in the <ph id="ph1">`IsLibraryItemAvailable`</ph> operation, you can change the operation as follows:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute when the default <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is in use, as shown in the following example code.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlIncludeAttribute&gt;</ph> attribute when using the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can apply the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceKnownTypeAttribute&gt;</ph> attribute to an operation or to the entire service.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It accepts either a type or the name of the method to call to get a list of known types, just like the <ph id="ph1">&lt;xref:System.Runtime.Serialization.KnownTypeAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Data Contract Known Types<ept id="p1">](../../../../docs/framework/wcf/feature-details/data-contract-known-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Specifying the Use and Style</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When describing services using Web Services Description Language (WSDL), the two commonly used styles are Document and remote procedure call (RPC).</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the Document style, the entire message body is described using the schema, and the WSDL describes the various message body parts by referring to elements within that schema.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the RPC style, the WSDL refers to a schema type for each message part rather than an element.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In some cases, you have to manually select one of these styles.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You can do this by applying the <ph id="ph1">&lt;xref:System.ServiceModel.DataContractFormatAttribute&gt;</ph> attribute and setting the <ph id="ph2">`Style`</ph> property (when the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is in use), or by setting <ph id="ph4">`Style`</ph> on the <ph id="ph5">&lt;xref:System.ServiceModel.XmlSerializerFormatAttribute&gt;</ph> attribute (when using the <ph id="ph6">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Additionally, the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> supports two forms of serialized XML: <ph id="ph2">`Literal`</ph> and <ph id="ph3">`Encoded`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Literal`</ph> is the most commonly accepted form, and is the only form the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> supports.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Encoded`</ph> is a legacy form described in section 5 of the SOAP specification, and is not recommended for new services.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To switch to <ph id="ph1">`Encoded`</ph> mode, set the <ph id="ph2">`Use`</ph> property on the <ph id="ph3">&lt;xref:System.ServiceModel.XmlSerializerFormatAttribute&gt;</ph> attribute to <ph id="ph4">`Encoded`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In most cases, you should not change the default settings for the <ph id="ph1">`Style`</ph> and <ph id="ph2">`Use`</ph> properties.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Controlling the Serialization Process</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can do a number of things to customize the way data is serialized.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Changing Server Serialization Settings</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>When the default <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> is in use, you can control some aspects of the serialization process on the service by applying the <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute&gt;</ph> attribute to the service.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Specifically, you may use the <ph id="ph1">`MaxItemsInObjectGraph`</ph> property to set the quota that limits the maximum number of objects the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> deserializes.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`IgnoreExtensionDataObject`</ph> property to turn off the round-tripping versioning feature.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> quotas, see <bpt id="p1">[</bpt>Security Considerations for Data<ept id="p1">](../../../../docs/framework/wcf/feature-details/security-considerations-for-data.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> round-tripping, see <bpt id="p1">[</bpt>Forward-Compatible Data Contracts<ept id="p1">](../../../../docs/framework/wcf/feature-details/forward-compatible-data-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Serialization Behaviors</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Two behaviors are available in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> and the <ph id="ph3">&lt;xref:System.ServiceModel.Description.XmlSerializerOperationBehavior&gt;</ph> that are automatically plugged in depending on which serializer is in use for a particular operation.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Because these behaviors are applied automatically, you normally do not have to be aware of them.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, the <ph id="ph1">`DataContractSerializerOperationBehavior`</ph> has the <ph id="ph2">`MaxItemsInObjectGraph`</ph>, <ph id="ph3">`IgnoreExtensionDataObject`</ph>, and <ph id="ph4">`DataContractSurrogate`</ph> properties that you may use to customize the serialization process.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The first two properties have the same meaning as discussed in the previous section.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`DataContractSurrogate`</ph> property to enable data contract surrogates, which are a powerful mechanism for customizing and extending the serialization process.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Data Contract Surrogates<ept id="p1">](../../../../docs/framework/wcf/extending/data-contract-surrogates.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`DataContractSerializerOperationBehavior`</ph> to customize both client and server serialization.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following example shows how to increase the <ph id="ph1">`MaxItemsInObjectGraph`</ph> quota on the client.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Following is the equivalent code on the service, in the self-hosted case.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>In the Web-hosted case, you must create a new <ph id="ph1">`ServiceHost`</ph> derived class and use a service host factory to plug it in.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Controlling Serialization Settings in Configuration</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`MaxItemsInObjectGraph`</ph> and <ph id="ph2">`IgnoreExtensionDataObject`</ph> can be controlled through configuration by using the <ph id="ph3">`dataContractSerializer`</ph> endpoint or service behavior, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Shared Type Serialization, Object Graph Preservation, and Custom Serializers</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> serializes using data contract names and not .NET type names.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This is consistent with service-oriented architecture tenets and allows for a great degree of flexibility—the .NET types can change without affecting the wire contract.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In rare cases, you may want to serialize actual .NET type names, thereby introducing a tight coupling between the client and the server, similar to the .NET Framework remoting technology.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This is not a recommended practice, except in rare cases that usually occur when migrating to <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> from .NET Framework remoting.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In this case, you must use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph> class instead of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> normally serializes object graphs as object trees.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>That is, if the same object is referred to more than once, it is serialized more than once.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For example, consider a <ph id="ph1">`PurchaseOrder`</ph> instance that has two fields of type Address called <ph id="ph2">`billTo`</ph> and <ph id="ph3">`shipTo`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>If both fields are set to the same Address instance, there are two identical Address instances after serialization and deserialization.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This is done because there is no standard interoperable way to represent object graphs in XML (except for the legacy SOAP encoded standard available on the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, as described in the previous section on <ph id="ph2">`Style`</ph> and <ph id="ph3">`Use`</ph>).</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Serializing object graphs as trees has certain disadvantages, for example, graphs with circular references cannot be serialized.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Occasionally, it is necessary to switch to true object graph serialization, even though it is not interoperable.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This can be done by using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> constructed with the <ph id="ph2">`preserveObjectReferences`</ph> parameter set to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Occasionally, the built-in serializers are not enough for your scenario.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In most cases, you can still use the <ph id="ph1">&lt;xref:System.Runtime.Serialization.XmlObjectSerializer&gt;</ph> abstraction from which both the <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> and the <ph id="ph3">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph> derive.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The previous three cases (.NET type preservation, object graph preservation, and completely custom <ph id="ph1">`XmlObjectSerializer`</ph>-based serialization) all require a custom serializer be plugged in.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>To do this, perform the following steps:</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Write your own behavior deriving from the <ph id="ph1">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Override the two <ph id="ph1">`CreateSerializer`</ph> methods to return your own serializer (either the <ph id="ph2">&lt;xref:System.Runtime.Serialization.NetDataContractSerializer&gt;</ph>, the <ph id="ph3">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> with <ph id="ph4">`preserveObjectReferences`</ph> set to <ph id="ph5">`true`</ph>, or your own custom <ph id="ph6">&lt;xref:System.Runtime.Serialization.XmlObjectSerializer&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Before opening the service host or creating a client channel, remove the existing <ph id="ph1">&lt;xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior&gt;</ph> behavior and plug in the custom derived class that you created in the previous steps.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crabout](../../../../includes/crabout-md.md)]</ph> advanced serialization concepts, see <bpt id="p1">[</bpt>Serialization and Deserialization<ept id="p1">](../../../../docs/framework/wcf/feature-details/serialization-and-deserialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using the XmlSerializer Class<ept id="p1">](../../../../docs/framework/wcf/feature-details/using-the-xmlserializer-class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Enable Streaming<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-enable-streaming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Basic Data Contract for a Class or Structure<ept id="p1">](../../../../docs/framework/wcf/feature-details/how-to-create-a-basic-data-contract-for-a-class-or-structure.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>