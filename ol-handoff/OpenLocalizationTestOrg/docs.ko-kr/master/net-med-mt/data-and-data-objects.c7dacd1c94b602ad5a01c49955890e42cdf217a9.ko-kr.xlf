<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3311cf9ca080999396e7882caaf9ef6b25ce767</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\data-and-data-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a601a55f3c506893569cde7c1a85bd3dc5405418</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">789eb5d57553f138273733c5bd671454d9b79bf3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data and Data Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data and Data Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Data that is transferred as part of a drag-and-drop operation is stored in a data object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Conceptually, a data object consists of one or more of the following pairs:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.Object&gt;</ph> that contains the actual data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A corresponding data format identifier.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The data itself can consist of anything that can be represented as a base <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The corresponding data format is a string or <ph id="ph1">&lt;xref:System.Type&gt;</ph> that provides a hint about what format the data is in.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Data objects support hosting multiple data/data format pairs; this enables a single data object to provide data in multiple formats.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Data Objects</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>All data objects must implement the <ph id="ph1">&lt;xref:System.Windows.IDataObject&gt;</ph> interface, which provides the following standard set of methods that enable and facilitate data transfer.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Retrieves a data object in a specified data format.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Checks to see whether the data is available in, or can be converted to, a specified format.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns a list of formats that the data in this data object is stored in, or can be converted to.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Stores the specified data in this data object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> provides a basic implementation of <ph id="ph2">&lt;xref:System.Windows.IDataObject&gt;</ph> in the <ph id="ph3">&lt;xref:System.Windows.DataObject&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The stock <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> class is sufficient for many common data transfer scenarios.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There are several pre-defined formats, such as bitmap, CSV, file, HTML, RTF, string, text, and audio.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For information about pre-defined data formats provided with <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, see the <ph id="ph2">&lt;xref:System.Windows.DataFormats&gt;</ph> class reference topic.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Data objects commonly include a facility for automatically converting data stored in one format to a different format while extracting data; this facility is referred to as auto-convert.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When querying for the data formats available in a data object, auto-convertible data formats can be filtered from native data formats by calling the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetFormats%28System.Boolean%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.DataObject.GetDataPresent%28System.String%2CSystem.Boolean%29&gt;</ph> method and specifying the <ph id="ph3">`autoConvert`</ph> parameter as <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When adding data to a data object with the <ph id="ph1">&lt;xref:System.Windows.DataObject.SetData%28System.String%2CSystem.Object%2CSystem.Boolean%29&gt;</ph> method, auto-conversion of data can be prohibited by setting the <ph id="ph2">`autoConvert`</ph> parameter to <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Working with Data Objects</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This section describes common techniques for creating and working with data objects.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Creating New Data Objects</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DataObject&gt;</ph> class provides several overloaded constructors that facilitate populating a new <ph id="ph2">&lt;xref:System.Windows.DataObject&gt;</ph> instance with a single data/data format pair.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following example code creates a new data object and uses one of the overloaded constructors <ph id="ph1">&lt;xref:System.Windows.DataObject.%23ctor%2A&gt;</ph>(<ph id="ph2">&lt;xref:System.Windows.DataObject.%23ctor(System.String,System.Object)&gt;</ph>) to initialize the data object with a string and a specified data format.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In this case, the data format is specified by a string; the <ph id="ph1">&lt;xref:System.Windows.DataFormats&gt;</ph> class provides a set of pre-defined type strings.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Auto-conversion of the stored data is allowed by default.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_CreateDataObject_TypeString<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/CSharp/Window1.xaml.cs#_dragdrop_createdataobject_typestring)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_CreateDataObject_TypeString<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/visualbasic/window1.xaml.vb#_dragdrop_createdataobject_typestring)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more examples of code that creates a data object, see <bpt id="p1">[</bpt>Create a Data Object<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-create-a-data-object.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Storing Data in Multiple Formats</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A single data object is able to store data in multiple formats.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Strategic use of multiple data formats within a single data object potentially makes the data object consumable by a wider variety of drop targets than if only a single data format could be represented.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Note that, in general, a drag source must be agnostic about the data formats that are consumable by potential drop targets.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Windows.DataObject.SetData%28System.String%2CSystem.Object%29&gt;</ph> method to add data to a data object in multiple formats.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_StoreMultipleFormats<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/CSharp/Window1.xaml.cs#_dragdrop_storemultipleformats)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_StoreMultipleFormats<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/visualbasic/window1.xaml.vb#_dragdrop_storemultipleformats)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Querying a Data Object for Available Formats</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because a single data object can contain an arbitrary number of data formats, data objects include facilities for retrieving a list of available data formats.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following example code uses the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetFormats%2A&gt;</ph> overload to get an array of strings denoting all data formats available in a data object (both native and by auto-convert).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_GetAllDataFormats<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/CSharp/Window1.xaml.cs#_dragdrop_getalldataformats)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_GetAllDataFormats<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/visualbasic/window1.xaml.vb#_dragdrop_getalldataformats)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For more examples of code that queries a data object for available data formats, see <bpt id="p1">[</bpt>List the Data Formats in a Data Object<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-list-the-data-formats-in-a-data-object.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For examples of querying a data object for the presence of a particular data format, see <bpt id="p1">[</bpt>Determine if a Data Format is Present in a Data Object<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-determine-if-a-data-format-is-present-in-a-data-object.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Retrieving Data from a Data Object</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieving data from a data object in a particular format simply involves calling one of the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> methods and specifying the desired data format.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetDataPresent%2A&gt;</ph> methods can be used to check for the presence of a particular data format.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> returns the data in an <ph id="ph2">&lt;xref:System.Object&gt;</ph>; depending on the data format, this object can be cast to a type-specific container.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example code uses the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetDataPresent%28System.String%29&gt;</ph> overload to check if a specified data format is available (native or by auto-convert).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If the specified format is available, the example retrieves the data by using the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetData%28System.String%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_GetSpecificDataFormat<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/CSharp/Window1.xaml.cs#_dragdrop_getspecificdataformat)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>DragDrop_DragDropMiscCode#_DragDrop_GetSpecificDataFormat<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/DragDrop_DragDropMiscCode/visualbasic/window1.xaml.vb#_dragdrop_getspecificdataformat)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more examples of code that retrieves data from a data object, see <bpt id="p1">[</bpt>Retrieve Data in a Particular Data Format<ept id="p1">](../../../../docs/framework/wpf/advanced/how-to-retrieve-data-in-a-particular-data-format.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Removing Data From a Data Object</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Data cannot be directly removed from a data object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To effectively remove data from a data object, follow these steps:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Create a new data object that will contain only the data you want to retain.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>"Copy" the desired data from the old data object to the new data object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To copy the data, use one of the <ph id="ph1">&lt;xref:System.Windows.DataObject.GetData%2A&gt;</ph> methods to retrieve an <ph id="ph2">&lt;xref:System.Object&gt;</ph> that contains the raw data, and then use one of the <ph id="ph3">&lt;xref:System.Windows.DataObject.SetData%2A&gt;</ph> methods to add the data to the new data object.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Replace the old data object with the new one.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DataObject.SetData%2A&gt;</ph> methods only add data to a data object; they do not replace data, even if the data and data format are exactly the same as a previous call.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.DataObject.SetData%2A&gt;</ph> twice for the same data and data format will result in the data/data format being present twice in the data object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>