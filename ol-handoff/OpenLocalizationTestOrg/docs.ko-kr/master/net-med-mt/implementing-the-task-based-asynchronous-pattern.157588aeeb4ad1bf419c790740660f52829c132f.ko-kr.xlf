<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">08ff1810bce6bcc2fc714179e9c43fb185847675</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\implementing-the-task-based-asynchronous-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b52c000fda20059f6ab851afaf7642b77c7cfa4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71dd70b823b8999312965a9e79740821fc425bad</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementing the Task-based Asynchronous Pattern | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing the Task-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can implement the Task-based Asynchronous Pattern (TAP) in three ways: by using the C# and Visual Basic compilers in Visual Studio, manually, or through a combination of the compiler and manual methods.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following sections discuss each method in detail.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use the TAP pattern to implement both compute-bound and I/O-bound asynchronous operations; the <bpt id="p1">[</bpt>Workloads<ept id="p1">](#workloads)</ept> section discusses each type of operation.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Generating TAP Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using the Compilers</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)]</ph> and the <ph id="ph2">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, any method that is attributed with the <ph id="ph3">`async`</ph> keyword (<ph id="ph4">`Async`</ph> in Visual Basic) is considered an asynchronous method, and the C# and Visual Basic compilers perform the necessary transformations to implement the method asynchronously by using TAP.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An asynchronous method should return either a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> or a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601?displayProperty=fullName&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the case of the latter, the body of the function should return a <ph id="ph1">`TResult`</ph>, and the compiler ensures that this result is made available through the resulting task object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Similarly, any exceptions that go unhandled within the body of the method are marshaled to the output task and cause the resulting task to end in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The exception is when an <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> (or derived type) goes unhandled, in which case the resulting task ends in the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskStatus?displayProperty=fullName&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Generating TAP Methods Manually</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You may implement the TAP pattern manually for better control over implementation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The compiler relies on the public surface area exposed from the <ph id="ph1">&lt;xref:System.Threading.Tasks?displayProperty=fullName&gt;</ph> namespace and supporting types in the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To implement the TAP yourself, you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> object, perform the asynchronous operation, and when it completes, call the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A&gt;</ph> method, or the <ph id="ph5">`Try`</ph> version of one of these methods.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When you implement a TAP method manually, you must complete the resulting task when the represented asynchronous operation completes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP_Patterns#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap_patterns/cs/patterns1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.TAP_Patterns#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap_patterns/vb/patterns1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Hybrid Approach</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You may find it useful to implement the TAP pattern manually but to delegate the core logic for the implementation to the compiler.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, you may want to use the hybrid approach when you want to verify arguments outside a compiler-generated asynchronous method so that exceptions can escape to the methodâ€™s direct caller rather than being exposed through the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> object:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP_Patterns#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap_patterns/cs/patterns1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.TAP_Patterns#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap_patterns/vb/patterns1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Another case where such delegation is useful is when you're implementing fast-path optimization and want to return a cached task.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Workloads</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You may implement both compute-bound and I/O-bound asynchronous operations as TAP methods.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>However, when TAP methods are exposed publicly from a library, they should be provided only for workloads that involve I/O-bound operations (they may also involve computation, but should not be purely computational).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If a method is purely compute-bound, it should be exposed only as a synchronous implementation; the code that consumes it may then choose whether to wrap an invocation of that synchronous method into a task to offload the work to another thread or to achieve parallelism.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Compute-bound Tasks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> class is ideally suited for representing computationally intensive operations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>By default, it takes advantage of special support within the <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> class to provide efficient execution, and it also provides significant control over when, where, and how asynchronous computations execute.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can generate compute-bound tasks in the following ways:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the .NET Framework 4, use the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method, which accepts a delegate (typically an <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> or a <ph id="ph3">&lt;xref:System.Func%601&gt;</ph>) to be executed asynchronously.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you provide an <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate, the method returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task?displayProperty=fullName&gt;</ph> object that represents the asynchronous execution of that delegate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you provide a <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate, the method returns a <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601?displayProperty=fullName&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A&gt;</ph> method accept a cancellation token (<ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph>), task creation options (<ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCreationOptions&gt;</ph>), and a task scheduler (<ph id="ph4">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph>), all of which provide fine-grained control over the scheduling and execution of the task.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A factory instance that targets the current task scheduler is available as a static property (<ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Factory%2A&gt;</ph>) of the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class; for example: <ph id="ph3">`Task.Factory.StartNew(â€¦)`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, use the static <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> method as a shortcut to <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You may use <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Run%2A&gt;</ph> to easily launch a compute-bound task that targets the thread pool.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, this is the preferred mechanism for launching a compute-bound task.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`StartNew`</ph> directly only when you want more fine-grained control over the task.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Use the constructors of the <ph id="ph1">`Task`</ph> type or the <ph id="ph2">`Start`</ph> method if you want to generate and schedule the task separately.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Public methods must only return tasks that have already been started.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Use the overloads of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.ContinueWith%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This method creates a new task that is scheduled when another task completes.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Some of the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.ContinueWith%2A&gt;</ph> overloads accept a cancellation token, continuation options, and a task scheduler for better control over the scheduling and execution of the continuation task.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Use the  <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>These methods create a new task that is scheduled when all or any of a supplied set of tasks completes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These  methods also provide overloads to control the scheduling and execution of these tasks.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In compute-bound tasks, the system can prevent the execution of a scheduled task if it receives a cancellation request before it starts running the task.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>As such, if you provide a cancellation token (<ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object), you can pass that token to the asynchronous code that monitors the token.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also provide the token to one of the previously mentioned methods such as <ph id="ph1">`StartNew`</ph> or <ph id="ph2">`Run`</ph> so that the <ph id="ph3">`Task`</ph> runtime may also monitor the token.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, consider an asynchronous method that renders an image.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The body of the task can poll the cancellation token so that the code may exit early if a cancellation request arrives during rendering.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In addition, if the cancellation request arrives before rendering starts, you'll want to prevent the rendering operation:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP_Patterns#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap_patterns/cs/patterns1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.TAP_Patterns#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap_patterns/vb/patterns1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Compute-bound tasks end in a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state if at least one of the following conditions is true:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A cancellation request arrives through the <ph id="ph1">&lt;xref:System.Threading.CancellationToken&gt;</ph> object, which is provided as an argument to the creation method (for example, <ph id="ph2">`StartNew`</ph> or <ph id="ph3">`Run`</ph>) before the task transitions to the <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.OperationCanceledException&gt;</ph> exception goes unhandled within the body of such a task, that exception contains the same <ph id="ph2">&lt;xref:System.Threading.CancellationToken&gt;</ph> that is passed to the task, and that token shows that cancellation is requested.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If another exception goes unhandled within the body of the task, the task ends in the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskStatus&gt;</ph> state, and any attempts to wait on the task or access its result causes an exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>I/O-bound Tasks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To create a task that should not be directly backed by a thread for the entirety of its execution, use the <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This type exposes a <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A&gt;</ph> property that returns an associated <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The life cycle of this task is controlled by <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> methods such as <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A&gt;</ph>, and their <ph id="ph5">`TrySet`</ph> variants.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Let's say that you want to create a task that will complete after a specified period of time.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, you may want to delay an activity in the user interface.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=fullName&gt;</ph> class already provides the ability to asynchronously invoke a delegate after a specified period of time, and by using <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> you can put a <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> front on the timer, for example:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP_Patterns#4<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap_patterns/cs/patterns1.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.TAP_Patterns#4<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap_patterns/vb/patterns1.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Threading.Tasks.Task.Delay%2A?displayProperty=fullName&gt;</ph> method is provided for this purpose, and you can use it inside another asynchronous method, for example, to implement an asynchronous polling loop:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP_Patterns#5<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap_patterns/cs/patterns1.cs#5)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.TAP_Patterns#5<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap_patterns/vb/patterns1.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> class doesn't have a non-generic counterpart.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>However, <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> derives from <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph>, so you can use the generic <ph id="ph3">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601&gt;</ph> object for I/O-bound methods that simply return a task.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To do this, you can use a source with a dummy <ph id="ph1">`TResult`</ph> (<ph id="ph2">&lt;xref:System.Boolean&gt;</ph> is a good default choice, but if you're concerned about the user of the <ph id="ph3">&lt;xref:System.Threading.Tasks.Task&gt;</ph>downcasting it to a <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>, you can use a private <ph id="ph5">`TResult`</ph> type instead).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`Delay`</ph> method in the previous example returns the current time along with the resulting offset (<ph id="ph2">`Task&lt;DateTimeOffset&gt;`</ph>).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If such a result value is unnecessary, the method could instead be coded as follows (note the change of return type and the change of argument to <ph id="ph1">&lt;xref:System.Threading.Tasks.TaskCompletionSource%601.TrySetResult%2A&gt;</ph>):</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP_Patterns#6<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap_patterns/cs/patterns1.cs#6)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.TAP_Patterns#6<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap_patterns/vb/patterns1.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Mixed Compute-bound and I/O-bound Tasks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Asynchronous methods are not limited to just compute-bound or I/O-bound operations but may represent a mixture of the two.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In fact, multiple asynchronous operations are often combined into larger mixed operations.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`RenderAsync`</ph> method in a previous example performed a computationally intensive operation to render an image based on some input <ph id="ph2">`imageData`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`imageData`</ph> could come from a web service that you asynchronously access:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>Conceptual.TAP_Patterns#7<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.tap_patterns/cs/patterns1.cs#7)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>Conceptual.TAP_Patterns#7<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.tap_patterns/vb/patterns1.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This example also demonstrates how a single cancellation token may be threaded through multiple asynchronous operations.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information, see the cancellation usage section in <bpt id="p1">[</bpt>Consuming the Task-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/consuming-the-task-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task-based Asynchronous Pattern (TAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Consuming the Task-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/consuming-the-task-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Interop with Other Asynchronous Patterns and Types<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/interop-with-other-asynchronous-patterns-and-types.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>