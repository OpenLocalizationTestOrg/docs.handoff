<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44d4d666b31e0806488e57a856e234714fa00da0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\how-to-perform-action-when-a-dataflow-block-receives-data.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f794bed38c834f81fb91808f7a69bd53e00c9f44</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">248e421017bd24c50f927652ae69d08a7d55aa28</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Perform Action When a Dataflow Block Receives Data | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Perform Action When a Dataflow Block Receives Data</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Execution dataflow block<ept id="p1">*</ept> types call a user-provided delegate when they receive data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602?displayProperty=fullName&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602?displayProperty=fullName&gt;</ph> classes are execution dataflow block types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`delegate`</ph> keyword (<ph id="ph2">`Sub`</ph> in <ph id="ph3">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>), <ph id="ph4">&lt;xref:System.Action%601&gt;</ph>, <ph id="ph5">&lt;xref:System.Func%602&gt;</ph>, or a lambda expression when you provide a work function to an execution dataflow block.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document describes how to use <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> and lambda expressions to perform action in execution blocks.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The TPL Dataflow Library (<ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow?displayProperty=fullName&gt;</ph> namespace) is not distributed with the <ph id="ph2">[!INCLUDE[net_v45](../../../includes/net-v45-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To install the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow&gt;</ph> namespace, open your project in <ph id="ph2">[!INCLUDE[vs_dev11_long](../../../includes/vs-dev11-long-md.md)]</ph>, choose <bpt id="p1">**</bpt>Manage NuGet Packages<ept id="p1">**</ept> from the Project menu, and search online for the <ph id="ph3">`Microsoft.Tpl.Dataflow`</ph> package.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example uses dataflow to read a file from disk and computes the number of bytes in that file that are equal to zero.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It uses <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> to read the file and compute the number of zero bytes, and <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> to print the number of zero bytes to the console.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object specifies a <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> object to perform work when the blocks receive data.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object uses a lambda expression to print to the console the number of zero bytes that are read.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TPLDataflow_ExecutionBlocks#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_executionblocks/cs/dataflowexecutionblocks.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TPLDataflow_ExecutionBlocks#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_executionblocks/vb/dataflowexecutionblocks.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Although you can provide a lambda expression to a <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object, this example uses <ph id="ph2">&lt;xref:System.Func%602&gt;</ph> to enable other code to use the <ph id="ph3">`CountBytes`</ph> method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph> object uses a lambda expression because the work to be performed is specific to this task and is not likely to be useful from other code.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about how lambda expressions work in the Task Parallel Library, see <bpt id="p1">[</bpt>Lambda Expressions in PLINQ and TPL<ept id="p1">](../../../docs/standard/parallel-programming/lambda-expressions-in-plinq-and-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The section Summary of Delegate Types in the <bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept> document summarizes the delegate types that you can provide to <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.ActionBlock%601&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph>, and <ph id="ph3">&lt;xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The table also specifies whether the delegate type operates synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`DataflowExecutionBlocks.cs`</ph> (<ph id="ph2">`DataflowExecutionBlocks.vb`</ph> for <ph id="ph3">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>), and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>csc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.cs<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>vbc.exe /r:System.Threading.Tasks.Dataflow.dll DataflowExecutionBlocks.vb<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example provides a delegate of type <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> to the <ph id="ph2">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object to perform the task of the dataflow block synchronously.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To enable the dataflow block to behave asynchronously, provide a delegate of type <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> to the dataflow block.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When a dataflow block behaves asynchronously, the task of the dataflow block is complete only when the returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object finishes.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example modifies the <ph id="ph1">`CountBytes`</ph> method and uses the <bpt id="p1">[</bpt>async<ept id="p1">](~/docs/csharp/language-reference/keywords/async.md)</ept> and <bpt id="p2">[</bpt>await<ept id="p2">](~/docs/csharp/language-reference/keywords/await.md)</ept> operators (<bpt id="p3">[</bpt>Async<ept id="p3">](~/docs/visual-basic/language-reference/modifiers/async.md)</ept> and <bpt id="p4">[</bpt>Await<ept id="p4">](~/docs/visual-basic/language-reference/operators/await-operator.md)</ept> in <ph id="ph2">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph>) to asynchronously compute the total number of bytes that are zero in the provided file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph> method performs file read operations asynchronously.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TPLDataflow_ExecutionBlocks#2<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_executionblocks/cs/dataflowexecutionblocks.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TPLDataflow_ExecutionBlocks#2<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_executionblocks/vb/dataflowexecutionblocks.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can also use asynchronous lambda expressions to perform action in an execution dataflow block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example modifies the <ph id="ph1">&lt;xref:System.Threading.Tasks.Dataflow.TransformBlock%602&gt;</ph> object that is used in the previous example so that it uses a lambda expression to perform the work asynchronously.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TPLDataflow_ExecutionBlocks#3<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpldataflow_executionblocks/cs/dataflowexecutionblocks.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TPLDataflow_ExecutionBlocks#3<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_executionblocks/vb/dataflowexecutionblocks.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dataflow<ept id="p1">](../../../docs/standard/parallel-programming/dataflow-task-parallel-library.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>