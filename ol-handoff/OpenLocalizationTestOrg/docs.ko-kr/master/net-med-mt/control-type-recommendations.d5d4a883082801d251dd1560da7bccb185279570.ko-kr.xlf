<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2d39f1638eae17e94489ac84a776c5b67986916a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\controls\control-type-recommendations.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bf0672190c199e99e846df67c4aefb7900ab4b5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2fb5af80604a748a93d41294a2321ac9fdf3d589</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Control Type Recommendations | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Control Type Recommendations</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework gives you power to develop and implement new controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In addition to the familiar user control, you will now find that you are able to write custom controls that perform their own painting, and are even able to extend the functionality of existing controls through inheritance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Deciding which type of control to create can be confusing.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This section highlights the differences between the various types of controls from which you can inherit, and gives considerations regarding the type to choose for your project.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you want to author a control to use on Web Forms, see <bpt id="p1">[</bpt>Developing Custom ASP.NET Server Controls<ept id="p1">](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Inheriting from a Windows Forms Control</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can derive an inherited control from any existing Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This approach allows you to retain all of the inherent functionality of a Windows Forms control, and to then extend that functionality by adding custom properties, methods, or other functionality.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, you might create a control derived from <ph id="ph1">&lt;xref:System.Windows.Forms.TextBox&gt;</ph> that can accept only numbers and automatically converts input into a value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Such a control might contain validation code that was called whenever the text in the text box changed, and could have an additional property, Value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In some controls, you can also add a custom appearance to the graphical interface of your control by overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> method of the base class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Inherit from a Windows Forms control if:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Most of the functionality you need is already identical to an existing Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You do not need a custom graphical interface, or you want to design a new graphical front end for an existing control.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Inheriting from the UserControl Class</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A user control is a collection of Windows Forms controls encapsulated into a common container.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The container holds all of the inherent functionality associated with each of the Windows Forms controls and allows you to selectively expose and bind their properties.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An example of a user control might be a control built to display customer address data from a database.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This control would include several textboxes to display each field, and button controls to navigate through the records.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Data-binding properties could be selectively exposed, and the entire control could be packaged and reused from application to application.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Inherit from the <ph id="ph1">&lt;xref:System.Windows.Forms.UserControl&gt;</ph> class if:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You want to combine the functionality of several Windows Forms controls into a single reusable unit.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Inheriting from the Control Class</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Another way to create a control is to create one substantially from scratch by inheriting from <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class provides all of the basic functionality required by controls (for example, events), but no control-specific functionality or graphical interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Creating a control by inheriting from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class requires a lot more thought and effort than inheriting from user control or an existing Windows Forms control.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The author must write code for the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.OnPaint%2A&gt;</ph> event of the control, as well as any functionality specific code that is needed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Greater flexibility is allowed, however, and you can custom tailor a control to suit your exact needs.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An example of a custom control is a clock control that duplicates the look and action of an analog clock.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Custom painting would be invoked to cause the hands of the clock to move in response to <ph id="ph1">&lt;xref:System.Windows.Forms.Timer.Tick&gt;</ph> events from an internal timer component.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Inherit from the <ph id="ph1">&lt;xref:System.Windows.Forms.Control&gt;</ph> class if:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You want to provide a custom graphical representation of your control.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You need to implement custom functionality that is not available through standard controls.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Display a Control in the Choose Toolbox Items Dialog Box<ept id="p1">](http://msdn.microsoft.com/library/9yxtkx75\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Serializing Collections of Standard Types with the DesignerSerializationVisibilityAttribute<ept id="p1">](http://msdn.microsoft.com/library/ms171731\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual C#<ept id="p1">](http://msdn.microsoft.com/en-us/library/5h0k2e6x\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Provide a Toolbox Bitmap for a Control<ept id="p1">](http://msdn.microsoft.com/library/4wk1wc0a\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inherit from Existing Windows Forms Controls<ept id="p1">](http://msdn.microsoft.com/library/7h62478z\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Debugging Custom Windows Forms Controls at Design Time<ept id="p1">](http://msdn.microsoft.com/library/5ytx0z24\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inherit from the Control Class<ept id="p1">](http://msdn.microsoft.com/library/skcysbt2\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Test the Run-Time Behavior of a UserControl<ept id="p1">](http://msdn.microsoft.com/library/ms171738\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Align a Control to the Edges of Forms at Design Time<ept id="p1">](http://msdn.microsoft.com/library/1fxyb15b\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inherit from the UserControl Class<ept id="p1">](http://msdn.microsoft.com/library/00ctb4z0\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Author Controls for Windows Forms<ept id="p1">](http://msdn.microsoft.com/library/bs3yhkh7\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Author Composite Controls<ept id="p1">](http://msdn.microsoft.com/library/3sf86w5h\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Authoring a Composite Control with Visual Basic<ept id="p1">](http://msdn.microsoft.com/library/c316f119\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Authoring a Composite Control with Visual C#<ept id="p1">](http://msdn.microsoft.com/en-us/library/a6h7e207\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Inheriting from a Windows Forms Control with Visual Basic<ept id="p1">](http://msdn.microsoft.com/library/w2a8y03d\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features<ept id="p1">](http://msdn.microsoft.com/library/307hck25\(v=vs.110\))</ept></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Create a Windows Forms Control That Takes Advantage of Design-Time Features<ept id="p1">](http://msdn.microsoft.com/library/307hck25\(v=vs.120\))</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Develop a Simple Windows Forms Control<ept id="p1">](../../../../docs/framework/winforms/controls/how-to-develop-a-simple-windows-forms-control.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Varieties of Custom Controls<ept id="p1">](../../../../docs/framework/winforms/controls/varieties-of-custom-controls.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>