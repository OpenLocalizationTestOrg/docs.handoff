<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="claims-based-authorization-using-wif.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-229404f" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd4c76ed2dfcc717905249774157c7d8c42f6e3b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\security\claims-based-authorization-using-wif.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13d65c00cacefd69d9efbda711f04b053a28deb5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">768c927652d19f2551a74f28a5d66a0f8440b9a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Claims Based Authorization Using WIF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Claims Based Authorization Using WIF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In a relying party application, authorization determines what resources an authenticated identity is allowed to access and what operations it is allowed to perform on those resources.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Improper or weak authorization leads to information disclosure and data tampering.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic outlines the available approaches to implementing authorization for claims-aware ASP.NET web applications and services using Windows Identity Foundation (WIF) and a Security Token Service (STS), for example, the Windows Azure Access Control Service (ACS).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Since its first version, the .NET Framework has offered a flexible mechanism for implementing authorization.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This mechanism is based on two simple interfaces—<bpt id="p1">**</bpt>IPrincipal<ept id="p1">**</ept> and <bpt id="p2">**</bpt>IIdentity<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Concrete implementations of <bpt id="p1">**</bpt>IIdentity<ept id="p1">**</ept> represent an authenticated user.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>WindowsIdentity<ept id="p1">**</ept> implementation represents a user who is authenticated by Active Directory, and <bpt id="p2">**</bpt>GenericIdentity<ept id="p2">**</ept> represents a user whose identity is verified via a custom authentication process.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Concrete implementations of <bpt id="p1">**</bpt>IPrincipal<ept id="p1">**</ept> help to check permissions using roles depending on the role store.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, <bpt id="p1">**</bpt>WindowsPrincipal<ept id="p1">**</ept> checks <bpt id="p2">**</bpt>WindowsIdentity<ept id="p2">**</ept> for membership in Active Directory groups.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This check is performed by calling the <bpt id="p1">**</bpt>IsInRole<ept id="p1">**</ept> method on the <bpt id="p2">**</bpt>IPrincipal<ept id="p2">**</ept> interface.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Checking access based on roles is called Role-Based Access Control (RBAC).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Role-Based Access Control<ept id="p1">](../../../docs/framework/security/claims-based-authorization-using-wif.md#BKMK_1)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Claims can be used to carry information about roles to support familiar, role-based authorization mechanisms.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Claims can also be used to enable more complicated authorization decisions beyond roles.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Claims can be based on virtually any information about the user - age, zip code, shoe size, etc. An access control mechanism that is based on arbitrary claims is called claims-based authorization.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Claims-based Authorization<ept id="p1">](../../../docs/framework/security/claims-based-authorization-using-wif.md#BKMK_2)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Role-Based Access Control</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>RBAC is an authorization approach in which user permissions are managed and enforced by an application based on user roles.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If a user has a role that is required to perform an action, the access is granted; otherwise, access is denied.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>IPrincipal.IsInRole Method</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To implement the RBAC approach in claims-aware applications, use the <bpt id="p1">**</bpt>IsInRole()<ept id="p1">**</ept> method in the <bpt id="p2">**</bpt>IPrinicpal<ept id="p2">**</ept> interface, just as you would in non-claims-aware applications.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There are several ways of using the <bpt id="p1">**</bpt>IsInRole()<ept id="p1">**</ept> method:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Explicitly calling on <bpt id="p1">**</bpt>IPrincipal.IsInRole("Administrator")<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this approach, the outcome is a Boolean.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use it in your conditional statements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It can be used arbitrarily any place in your code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using the security demand <bpt id="p1">**</bpt>PrincipalPermission.Demand()<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this approach, the outcome is an exception in case the demand is not satisfied.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This should fit your exception handling strategy.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Throwing exceptions is much more expensive from a performance perspective compared to retiring Boolean.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This can be used any place in your code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Using the declarative attributes <bpt id="p1">**</bpt>[PrincipalPermission(SecurityAction.Demand, Role = "Administrator")]<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This approach is called declarative, because it is used to decorate methods.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It cannot be used in code blocks inside the method’s implementations.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The outcome is an exception in case the demand is not satisfied.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You should make sure that it fits your exception-handling strategy.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Using URL authorization, using the <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>authorization&gt;<ept id="p1">**</ept> section in <bpt id="p2">**</bpt>web.config<ept id="p2">**</ept>. This approach is suitable when you are managing authorization on a URL level.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This is the most coarse level among those previously mentioned.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The advantage of this approach is that changes are made in the configuration file, which means that the code should not be compiled to take advantage of the change.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Expressing Roles as Claims</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>IsInRole()<ept id="p1">**</ept> method is called, there is a check made to see if the current user has that role.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In claims-aware applications, the role is expressed by a role claim type that should be available in the token.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The role claim type is expressed using the following URI:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>There are several ways to enrich a token with a role claim type:</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>During token issuance<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When a user is authenticated the role claim can be issued by the identity provider STS or by a federation drovider such as the Windows Azure Access Control Service (ACS).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Transforming arbitrary claims into of claims role type using ClaimsAuthenticationManager<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The ClaimsAuthenticationManager is a component that ships as part of WIF.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>It allows requests to be intercepted when they launch an application, inspecting tokens and transforming them by adding, changing, or removing claims.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For more information about how to use ClaimsAuthenticationManager for transforming claims, see <bpt id="p1">[</bpt>How To: Implement Role Based Access Control (RBAC) in a Claims Aware ASP.NET Application Using WIF and ACS<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247445)</ept> (<ph id="ph1">http://go.microsoft.com/fwlink/?LinkID=247444)</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Mapping arbitrary claims to a role type using the samlSecurityTokenRequirement configuration section<ept id="p1">**</ept>—A declarative approach where the claims transformation is done using only the configuration and no coding is required.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Claims-based Authorization</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Claims-based authorization is an approach where the authorization decision to grant or deny access is based on arbitrary logic that uses data available in claims to make the decision.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Recall that in the case of RBAC, the only claim used was role type claim.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A role type claim was used to check if the user belongs to specific role or not.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To illustrate the process of making the authorization decisions using claims-based authorization approach, consider the following steps:</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The application receives a request that requires the user is authenticated.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>WIF redirects the user to their identity provider, after they are authenticated the application request is made with an associated security token representing the user containing claims about them.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>WIF associates those claims with the principal that represents the user.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The application passes the claims to the decision logic mechanism.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It can be in-memory code, a call to a web service, a query to a database, a sophisticated rules engine, or using the ClaimsAuthorizationManager.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The decision mechanism calculates the outcome based on the claims.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Access is granted if the outcome is true and denied if it is false.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For example, the rule might be that the user is of age 21 or above and lives in Washington State.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> is useful for externalizing the decision logic for  claims-based authorization in your applications.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>ClaimsAuthorizationManager is a WIF component that ships as part of .NET 4.5.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>ClaimsAuthorizationManager allows you to intercept incoming requests and implement any logic of your choice to make authorization decisions based on the incoming claims.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This becomes important when authorization logic needs to be changed.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In that case, using ClaimsAuthorizationManager will not affect the application’s integrity, thereby reducing the likelihood of an application error as a result of the change.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To learn more about how to use ClaimsAuthorizationManager to implement claims-based access control, see <bpt id="p1">[</bpt>How To: Implement Claims Authorization in a Claims Aware ASP.NET Application Using WIF and ACS<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=247446)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>