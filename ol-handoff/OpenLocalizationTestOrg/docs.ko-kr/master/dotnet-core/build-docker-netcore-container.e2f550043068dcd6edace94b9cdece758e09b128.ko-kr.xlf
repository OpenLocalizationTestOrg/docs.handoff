<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="build-docker-netcore-container.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-0a91294" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">518a2228bb23569689d56577f83b066a5d518be8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\core\docker\build-docker-netcore-container.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dotnet-core</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a75b5f77a0d534c2fd3288cf1bd3079585b7a7a9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe1adc4b9a8770c7690d9fb0f3ef291acc912a2a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Containerize an app with Docker tutorial</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>In this tutorial you will learn how to containerize a .NET Core application with Docker.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Tutorial: Containerize a .NET Core app</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This tutorial teaches you how to build a Docker image that contains your .NET Core application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The image can be used to create containers for your local development environment, private cloud, or public cloud.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this tutorial you will learn how to:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create a Dockerfile</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Pull a Microsoft .NET Core Docker base image</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Customize and deploy your app to the image</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create and run a container</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Deploy to Azure</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This tutorial teaches the Docker container build and deploy tasks for a .NET Core application.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Docker platform<ept id="p1">](https://docs.docker.com/engine/docker-overview/#the-docker-platform)</ept> uses the <bpt id="p2">[</bpt>Docker Engine<ept id="p2">](https://docs.docker.com/engine/docker-overview/#docker-engine)</ept> to quickly build and package apps as <bpt id="p3">[</bpt>Docker images<ept id="p3">](https://docs.docker.com/glossary/?term=image)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These images are written in the <bpt id="p1">[</bpt>Dockerfile<ept id="p1">](https://docs.docker.com/glossary/?term=Dockerfile)</ept> format to be deployed and run in a <bpt id="p2">[</bpt>layered container<ept id="p2">](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#container-and-layers)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>.NET Core: Easiest way to get started</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Before creating the Docker image, you need an application to containerize.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can create it on Linux, MacOS, or Windows.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The quickest and easiest way to do that is to use .NET Core.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you're unfamiliar with the .NET Core CLI toolset, read the <bpt id="p1">[</bpt>.NET Core SDK overview<ept id="p1">](../tools/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can build both Windows and Linux containers with <bpt id="p1">[</bpt>multi-arch based tags<ept id="p1">](https://github.com/dotnet/announcements/issues/14)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Your first .NET Core Docker app</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To complete this tutorial:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>.NET Core SDK</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Install <bpt id="p1">[</bpt>.NET Core 2.1 SDK<ept id="p1">](https://www.microsoft.com/net/download)</ept> or later.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>.NET Core 2.1 Supported OS Versions<ept id="p1">](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md)</ept> for the complete list of .NET Core 2.1 supported operating systems, out of support OS versions, and lifecycle policy links.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Install your favorite code editor, if you haven't already.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Need to install a code editor?</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Try <bpt id="p1">[</bpt>Visual Studio Code<ept id="p1">](https://code.visualstudio.com/download)</ept>!</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Installing Docker Client</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Install <bpt id="p1">[</bpt>Docker 18.06<ept id="p1">](https://docs.docker.com/release-notes/docker-ce/)</ept> or later of the Docker client.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Docker client can be installed in:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Linux distributions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CentOS<ept id="p1">](https://docs.docker.com/install/linux/docker-ce/centos/)</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Debian<ept id="p1">](https://docs.docker.com/install/linux/docker-ce/debian/)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Fedora<ept id="p1">](https://docs.docker.com/install/linux/docker-ce/fedora/)</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Ubuntu<ept id="p1">](https://docs.docker.com/install/linux/docker-ce/ubuntu/)</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>macOS<ept id="p1">](https://docs.docker.com/docker-for-mac/install/)</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Windows<ept id="p1">](https://docs.docker.com/docker-for-windows/install/)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Create a .NET Core 2.1 console app for Dockerization</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Open a command prompt and create a folder named <bpt id="p1">*</bpt>Hello<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Navigate to the folder you created and type the following commands:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Let's do a quick walkthrough:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet new`</ph><ept id="p1">](../tools/dotnet-new.md)</ept> creates an up-to-date <ph id="ph2">`Hello.csproj`</ph> project file with the dependencies necessary to build a console app.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It also creates a <ph id="ph1">`Program.cs`</ph>, a basic file containing the entry point for the application.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Hello.csproj`</ph>:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The project file specifies everything that's needed to restore dependencies and build the program.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OutputType`</ph> tag specifies that we're building an executable, in other words a console application.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TargetFramework`</ph> tag specifies what .NET implementation we're targeting.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In an advanced scenario, you can specify multiple target frameworks and build to the specified frameworks in a single operation.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In this tutorial, we build for .NET Core 2.1.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Program.cs`</ph>:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The program starts by <ph id="ph1">`using System`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This statement means, "Bring everything in the <ph id="ph1">`System`</ph> namespace into scope for this file."</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`System`</ph> namespace includes basic constructs such as <ph id="ph2">`string`</ph>, or numeric types.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>We then define a namespace called <ph id="ph1">`Hello`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can change namespace to anything you want.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A class named <ph id="ph1">`Program`</ph> is defined within that namespace, with a <ph id="ph2">`Main`</ph> method that takes an array of strings as its argument.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This array contains the list of arguments passed in when the compiled program is called.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In our example, the program only writes "Hello World!"</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>to the console.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>dotnet new<ept id="p1">**</ept> runs the <bpt id="p2">[</bpt><ph id="ph1">`dotnet restore`</ph><ept id="p2">](../tools/dotnet-restore.md)</ept> command.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Dotnet restore<ept id="p1">**</ept> restores the tree of dependencies with a <bpt id="p2">[</bpt>NuGet<ept id="p2">](https://www.nuget.org/)</ept>(.NET package manager) call.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>NuGet performs the following tasks:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>analyzes the <bpt id="p1">*</bpt>Hello.csproj<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>downloads the file dependencies (or grabs from your machine cache).</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>writes the <bpt id="p1">*</bpt>obj/project.assets.json<ept id="p1">*</ept> file.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>project.assets.json<ept id="p1">*</ept> file is a complete set of the NuGet dependencies graph, binding resolutions, and other app metadata.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This required file is used by other tools, such as <bpt id="p1">[</bpt><ph id="ph1">`dotnet build`</ph><ept id="p1">](../tools/dotnet-build.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">`dotnet run`</ph><ept id="p2">](../tools/dotnet-run.md)</ept>, to correctly process the source code.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ph id="ph1">`dotnet run`</ph><ept id="p1">](../tools/dotnet-run.md)</ept> calls <bpt id="p2">[</bpt><ph id="ph2">`dotnet build`</ph><ept id="p2">](../tools/dotnet-build.md)</ept> to confirm a successful build, and then calls <ph id="ph3">`dotnet &lt;assembly.dll&gt;`</ph> to run the application.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For advanced scenarios,  see <bpt id="p1">[</bpt>.NET Core Application Deployment<ept id="p1">](../deploying/index.md)</ept> for details.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Dockerize the .NET Core application</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The Hello .NET Core console app successfully runs locally.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Now let's take it a step further and build and run the app in Docker.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Your first Dockerfile</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Open your text editor and let's get started!</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>We're still working from the Hello directory we built the app in.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Add the following Docker instructions for either Linux or <bpt id="p1">[</bpt>Windows Containers<ept id="p1">](https://docs.microsoft.com/virtualization/windowscontainers/about/)</ept> to a new file.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When finished, save it in the root of your Hello directory as <bpt id="p1">**</bpt>Dockerfile<ept id="p1">**</ept>, with no extension (You may need to set your file type to <ph id="ph1">`All types (*.*)`</ph> or something similar).</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The Dockerfile contains Docker build instructions that run sequentially.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The first instruction must be <bpt id="p1">[</bpt><bpt id="p2">**</bpt>FROM<ept id="p2">**</ept><ept id="p1">](https://docs.docker.com/engine/reference/builder/#from)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This instruction initializes a new build stage and sets the Base Image for the remaining instructions.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The multi-arch tags pull either Windows or Linux containers depending on the Docker for Windows <bpt id="p1">[</bpt>container mode<ept id="p1">](https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The Base Image for our sample is the 2.1-sdk image from the microsoft/dotnet repository,</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>WORKDIR<ept id="p2">**</ept><ept id="p1">](https://docs.docker.com/engine/reference/builder/#workdir)</ept> instruction sets the working directory for any remaining RUN, CMD, ENTRYPOINT, COPY, and ADD Dockerfile instructions.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the directory doesn't exist, it's created.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this case, WORKDIR is set to the app directory.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>COPY<ept id="p2">**</ept><ept id="p1">](https://docs.docker.com/engine/reference/builder/#copy)</ept> instruction copies new files or directories from the source path and adds them to the destination container filesystem.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>With this instruction, we are copying the C# project file to the container.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>RUN<ept id="p2">**</ept><ept id="p1">](https://docs.docker.com/engine/reference/builder/#run)</ept> instruction executes any commands in a new layer on top of the current image and commit the results.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The resulting committed image is used for the next step in the Dockerfile.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>We are running <bpt id="p1">**</bpt>dotnet restore<ept id="p1">**</ept> to get the needed dependencies of the C# project file.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This <bpt id="p1">**</bpt>COPY<ept id="p1">**</ept> instruction copies the rest of the files into our container into new <bpt id="p2">[</bpt>layers<ept id="p2">](https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>We are publishing the app with this <bpt id="p1">**</bpt>RUN<ept id="p1">**</ept> instruction.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>dotnet publish<ept id="p2">**</ept><ept id="p1">](../tools/dotnet-publish.md)</ept> command compiles the application, reads through its dependencies specified in the project file, and publishes the resulting set of files to a directory.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Our app is published with a <bpt id="p1">**</bpt>Release<ept id="p1">**</ept> configuration and output to the default directory.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt><bpt id="p2">**</bpt>ENTRYPOINT<ept id="p2">**</ept><ept id="p1">](https://docs.docker.com/engine/reference/builder/#entrypoint)</ept> instruction allows the container to run as an executable.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Now you have a Dockerfile that:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>copies your app to the image</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>your app's dependencies to the image</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>builds the app to run as an executable</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Build and run the Hello .NET Core app</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Essential Docker commands</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>These Docker commands are essential:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>docker build<ept id="p1">](https://docs.docker.com/engine/reference/commandline/build/)</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>docker run<ept id="p1">](https://docs.docker.com/engine/reference/commandline/run/)</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>docker ps<ept id="p1">](https://docs.docker.com/engine/reference/commandline/ps/)</ept></source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>docker stop<ept id="p1">](https://docs.docker.com/engine/reference/commandline/stop/)</ept></source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>docker rm<ept id="p1">](https://docs.docker.com/engine/reference/commandline/rm/)</ept></source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>docker rmi<ept id="p1">](https://docs.docker.com/engine/reference/commandline/rmi/)</ept></source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>docker image<ept id="p1">](https://docs.docker.com/engine/reference/commandline/image/)</ept></source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Build and run</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You wrote the dockerfile; now Docker builds your app and then runs the container.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The output from the <ph id="ph1">`docker build`</ph> command should be similar to the following console output:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>As you can see from the output, the Docker Engine used the Dockerfile to build our container.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The output from the <ph id="ph1">`docker run`</ph> command should be similar to the following console output:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>You have just:</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Created a local .NET Core app</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Created a Dockerfile to build your first container</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Built and ran your Dockerized app</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Next steps</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Here are some next steps you can take:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to .NET Docker Images Video<ept id="p1">](https://channel9.msdn.com/Shows/Code-Conversations/Introduction-to-NET-Docker-Images-with-Kendra-Havens?term=docker)</ept></source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Studio, Docker &amp; Azure Container Instances better together!<ept id="p1">](https://medium.com/@AliMazaheri/visual-studio-docker-azure-container-instances-better-together-bf8c2f0419ae)</ept></source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Docker for Azure Quickstarts<ept id="p1">](https://docs.docker.com/docker-for-azure/#docker-community-edition-ce-for-azure)</ept></source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deploy your app on Docker for Azure<ept id="p1">](https://docs.docker.com/docker-for-azure/deploy/)</ept></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>If you do not have an Azure subscription, <bpt id="p1">[</bpt>sign up today<ept id="p1">](https://azure.microsoft.com/free/?b=16.48)</ept> for a free 30-day account and get $200 in Azure Credits to try out any combination of Azure services.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Docker Images used in this sample</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The following Docker images are used in this sample</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Related resources</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Core Docker samples<ept id="p1">](https://github.com/dotnet/dotnet-docker/tree/master/samples)</ept></source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dockerfile on Windows Containers<ept id="p1">](https://docs.microsoft.com/virtualization/windowscontainers/manage-docker/manage-windows-dockerfile)</ept></source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>.NET Framework Docker samples<ept id="p1">](https://github.com/Microsoft/dotnet-framework-docker-samples)</ept></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ASP.NET Core on DockerHub<ept id="p1">](https://hub.docker.com/r/microsoft/aspnetcore/)</ept></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dockerize a .NET Core application - Docker Tutorial<ept id="p1">](https://docs.docker.com/engine/examples/dotnetcore/)</ept></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Working with Visual Studio Docker Tools<ept id="p1">](https://docs.microsoft.com/aspnet/core/publishing/visual-studio-tools-for-docker)</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deploying Docker Images from the Azure Container Registry to Azure Container Instances<ept id="p1">](https://blogs.msdn.microsoft.com/stevelasker/2017/07/28/deploying-docker-images-from-the-azure-container-registry-to-azure-container-instances/)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>