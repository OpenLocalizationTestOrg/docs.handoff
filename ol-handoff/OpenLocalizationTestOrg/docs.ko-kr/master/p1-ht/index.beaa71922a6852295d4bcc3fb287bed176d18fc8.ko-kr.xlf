<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="index.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b7d76608311e4b29f9ac611885176cc8393fe93</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\arrays\index.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">p1-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91cf92f9d49fc60adfede8361ffa4b70e29e1bac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ce302791d8b6f11c40936f1b5fc8e89e6af3cac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Arrays in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Arrays in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An array is a set of values that are logically related to each other, such as the number of students in each grade in a grammar school.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you are looking for help on arrays in Visual Basic for Applications (VBA), see the <bpt id="p1">[</bpt>language reference<ept id="p1">](https://msdn.microsoft.com/library/office/gg264383\(v=office.14\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>By using an array, you can refer to these related values by the same name, and use a number that’s called an index or subscript to tell them apart.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The individual values are called the elements of the array.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>They’re contiguous from index 0 through the highest index value.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In contrast to an array, a variable that contain a single value is called a <bpt id="p1">*</bpt>scalar<ept id="p1">*</ept> variable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Some quick examples before explanation:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>In this topic<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Array Elements in a Simple Array<ept id="p1">](#BKMK_ArrayElements)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Creating an Array<ept id="p1">](#BKMK_CreatingAnArray)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Storing Values in an Array<ept id="p1">](#BKMK_StoringValues)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Populating an Array with Initial Values<ept id="p1">](#BKMK_Populating)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Nested Array Literals<ept id="p1">](#BKMK_NestedArrayLiterals)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Iterating Through an Array<ept id="p1">](#BKMK_Iterating)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Arrays as Return Values and Parameters<ept id="p1">](#BKMK_ReturnValues)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Jagged Arrays<ept id="p1">](#BKMK_JaggedArrays)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Zero-Length Arrays<ept id="p1">](#BKMK_ZeroLength)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Array Size<ept id="p1">](#BKMK_ArraySize)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Array Types and Other Types<ept id="p1">](#BKMK_ArrayTypes)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Collections as an Alternative to Arrays<ept id="p1">](#BKMK_Collections)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_ArrayElements"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Array Elements in a Simple Array</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example declares an array variable to hold the number of students in each grade in a grammar school.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The array <ph id="ph1">`students`</ph> in the preceding example contains seven elements.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The indexes of the elements range from 0 through 6.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Having this array is simpler than declaring seven variables.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following illustration shows the array <ph id="ph1">`students`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For each element of the array:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The index of the element represents the grade (index 0 represents kindergarten).</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The value that’s contained in the element represents the number of students in that grade.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Picture of array showing numbers of students<ept id="p1">]</ept><bpt id="p2">(../../../../visual-basic/programming-guide/language-features/arrays/media/arrayexampleschool.gif "</bpt>ArrayExampleSchool<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Elements of the "students" array</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example shows how to refer to the first, second, and last element of the array <ph id="ph1">`students`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can refer to the array as a whole by using just the array variable name without indexes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The array <ph id="ph1">`students`</ph> in the preceding example uses one index and is said to be one-dimensional.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An array that uses more than one index or subscript is called multidimensional.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see the rest of this topic and <bpt id="p1">[</bpt>Array Dimensions in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/array-dimensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_CreatingAnArray"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Creating an Array</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can define the size of an array several ways.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can supply the size when the array is declared, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can also use a <ph id="ph1">`New`</ph> clause to supply the size of an array when it’s created, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you have an existing array, you can redefine its size by using the <ph id="ph1">`Redim`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can specify that the <ph id="ph1">`Redim`</ph> statement should keep the values that are in the array, or you can specify that it create an empty array.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example shows different uses of the <ph id="ph1">`Redim`</ph> statement to modify the size of an existing array.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>ReDim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/redim-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_StoringValues"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Storing Values in an Array</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can access each location in an array by using an index of type <ph id="ph1">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can store and retrieve values in an array by referencing each array location by using its index enclosed in parentheses.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Indexes for multi-dimensional arrays are separated by commas (,).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You need one index for each array dimension.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example shows some statements that store values in arrays.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The following example shows some statements that get values from arrays.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_Populating"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Populating an Array with Initial Values</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>By using an array literal, you can create an array that contains an initial set of values.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An array literal consists of a list of comma-separated values that are enclosed in braces (<ph id="ph1">`{}`</ph>).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>When you create an array by using an array literal, you can either supply the array type or use type inference to determine the array type.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following code shows both options.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>When you use type inference, the type of the array is determined by the dominant type in the list of values that’s supplied for the array literal.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The dominant type is a unique type to which all other types in the array literal can widen.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If this unique type can’t be determined, the dominant type is the unique type to which all other types in the array can narrow.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If neither of these unique types can be determined, the dominant type is <ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, if the list of values that’s supplied to the array literal contains values of type <ph id="ph1">`Integer`</ph>, <ph id="ph2">`Long`</ph>, and <ph id="ph3">`Double`</ph>, the resulting array is of type <ph id="ph4">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`Integer`</ph> and <ph id="ph2">`Long`</ph> widen only to <ph id="ph3">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`Double`</ph> is the dominant type.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Widening and Narrowing Conversions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/data-types/widening-and-narrowing-conversions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>These inference rules apply to types that are inferred for arrays that are local variables that are defined in a class member.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Although you can use array literals when you create class-level variables, you can’t use type inference at the class level.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As a result, array literals that are specified at the class level infer the values that are supplied for the array literal as type <ph id="ph1">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>You can explicitly specify the type of the elements in an array that’s created by using an array literal.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In this case, the values in the array literal must widen to the type of the elements of the array.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following code example creates an array of type <ph id="ph1">`Double`</ph> from a list of integers.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_NestedArrayLiterals"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Nested Array Literals</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can create a multidimensional array by using nested array literals.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Nested array literals must have a dimension and number of dimensions, or rank, that’s consistent with the resulting array.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following code example creates a two-dimensional array of integers by using an array literal.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the previous example, an error would occur if the number of elements in the nested array literals didn’t match.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An error would also occur if you explicitly declared the array variable to be other than two-dimensional.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>You can avoid an error when you supply nested array literals of different dimensions by enclosing the inner array literals in parentheses.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The parentheses force the array literal expression to be evaluated, and the resulting values are used with the outer array literal, as the following code shows.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When you create a multidimensional array by using nested array literals, you can use type inference.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When you use type inference, the inferred type is the dominant type for all the values in all the array literals for a nesting level.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following code example creates a two-dimensional array of type <ph id="ph1">`Double`</ph> from values that are of type <ph id="ph2">`Integer`</ph> and <ph id="ph3">`Double`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For additional examples, see <bpt id="p1">[</bpt>How to: Initialize an Array Variable in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_Iterating"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Iterating Through an Array</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>When you iterate through an array, you access each element in the array from the lowest index to the highest index.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The following example iterates through a one-dimensional array by using the <bpt id="p1">[</bpt>For...Next Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/for-next-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Array.GetUpperBound%2A&gt;</ph> method returns the highest value that the index can have.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The lowest index value is always 0.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example iterates through a multidimensional array by using a <ph id="ph1">`For...Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Array.GetUpperBound%2A&gt;</ph> method has a parameter that specifies the dimension.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`GetUpperBound(0)`</ph> returns the high index value for the first dimension, and <ph id="ph2">`GetUpperBound(1)`</ph> returns the high index value for the second dimension.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following example iterates through a one-dimensional array by using a <bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The following example iterates through a multidimensional array by using a <ph id="ph1">`For Each...Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>However, you have more control over the elements of a multidimensional array if you use a nested <ph id="ph1">`For…Next`</ph> statement, as in a previous example, instead of a <ph id="ph2">`For Each…Next`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_ReturnValues"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Arrays as Return Values and Parameters</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>To return an array from a <ph id="ph1">`Function`</ph> procedure, specify the array data type and the number of dimensions as the return type of the <bpt id="p1">[</bpt>Function Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/function-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Within the function, declare a local array variable with same data type and number of dimensions.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Return Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/return-statement.md)</ept>, include the local array variable without parentheses.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To specify an array as a parameter to a <ph id="ph1">`Sub`</ph> or <ph id="ph2">`Function`</ph> procedure, define the parameter as an array with a specified data type and number of dimensions.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>In the call to the procedure, send an array variable with the same data type and number of dimensions.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`GetNumbers`</ph> function returns an <ph id="ph2">`Integer()`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This array type is a one dimensional array of type <ph id="ph1">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowNumbers`</ph> procedure accepts an <ph id="ph2">`Integer()`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`GetNumbersMultiDim`</ph> function returns an <ph id="ph2">`Integer(,)`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This array type is a two dimensional array of type <ph id="ph1">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ShowNumbersMultiDim`</ph> procedure accepts an <ph id="ph2">`Integer(,)`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_JaggedArrays"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Jagged Arrays</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>An array that holds other arrays as elements is known as an array of arrays or a jagged array.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A jagged array and each element in a jagged array can have one or more dimensions.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Sometimes the data structure in your application is two-dimensional but not rectangular.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The following example has an array of months, each element of which is an array of days.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Because different months have different numbers of days, the elements don’t form a rectangular two-dimensional array.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Therefore, a jagged array is used instead of a multidimensional array.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_ZeroLength"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Zero-Length Arrays</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An array that contains no elements is also called a zero-length array.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A variable that holds a zero-length array doesn’t have the value <ph id="ph1">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>To create an array that has no elements, declare one of the array's dimensions to be -1, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>You might need to create a zero-length array under the following circumstances:</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Without risking a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception, your code must access members of the <ph id="ph2">&lt;xref:System.Array&gt;</ph> class, such as <ph id="ph3">&lt;xref:System.Array.Length%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Array.Rank%2A&gt;</ph>, or call a <ph id="ph5">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> function such as <ph id="ph6">&lt;xref:Microsoft.VisualBasic.Information.UBound%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You want to keep the consuming code simpler by not having to check for <ph id="ph1">`Nothing`</ph> as a special case.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Your code interacts with an application programming interface (API) that either requires you to pass a zero-length array to one or more procedures or returns a zero-length array from one or more procedures.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_ArraySize"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Array Size</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The size of an array is the product of the lengths of all its dimensions.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>It represents the total number of elements currently contained in the array.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The following example declares a three-dimensional array.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The overall size of the array in variable <ph id="ph1">`prices`</ph> is (3 + 1) x (4 + 1) x (5 + 1) = 120.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You can find the size of an array by using the <ph id="ph1">&lt;xref:System.Array.Length%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>You can find the length of each dimension of a multi-dimensional array by using the <ph id="ph1">&lt;xref:System.Array.GetLength%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>You can resize an array variable by assigning a new array object to it or by using the <ph id="ph1">`ReDim`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>There are several things to keep in mind when dealing with the size of an array.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Dimension Length</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The index of each dimension is 0-based, which means it ranges from 0 through its upper bound.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Therefore, the length of a given dimension is greater by 1 than the declared upper bound for that dimension.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Length Limits</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The length of every dimension of an array is limited to the maximum value of the <ph id="ph1">`Integer`</ph> data type, which is (2 ^ 31) - 1.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>However, the total size of an array is also limited by the memory available on your system.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If you attempt to initialize an array that exceeds the amount of available RAM, the common language runtime throws an <ph id="ph1">&lt;xref:System.OutOfMemoryException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Size and Element Size</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>An array's size is independent of the data type of its elements.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The size always represents the total number of elements, not the number of bytes that they consume in storage.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Memory Consumption</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>It is not safe to make any assumptions regarding how an array is stored in memory.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Storage varies on platforms of different data widths, so the same array can consume more memory on a 64-bit system than on a 32-bit system.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Depending on system configuration when you initialize an array, the common language runtime (CLR) can assign storage either to pack elements as close together as possible, or to align them all on natural hardware boundaries.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Also, an array requires a storage overhead for its control information, and this overhead increases with each added dimension.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_ArrayTypes"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Array Types and Other Types</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Every array has a data type, but it differs from the data type of its elements.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>There is no single data type for all arrays.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Instead, the data type of an array is determined by the number of dimensions, or <bpt id="p1">*</bpt>rank<ept id="p1">*</ept>, of the array, and the data type of the elements in the array.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Two array variables are considered to be of the same data type only when they have the same rank and their elements have the same data type.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The lengths of the dimensions in an array do not influence the array data type.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Every array inherits from the <ph id="ph1">&lt;xref:System.Array?displayProperty=fullName&gt;</ph> class, and you can declare a variable to be of type <ph id="ph2">`Array`</ph>, but you cannot create an array of type <ph id="ph3">`Array`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Also, the <bpt id="p1">[</bpt>ReDim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/redim-statement.md)</ept> cannot operate on a variable declared as type <ph id="ph1">`Array`</ph>.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>For these reasons, and for type safety, it is advisable to declare every array as a specific type, such as <ph id="ph1">`Integer`</ph> in the preceding example.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You can find out the data type of either an array or its elements in several ways.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>You can call the <ph id="ph1">&lt;xref:System.Object.GetType%2A?displayProperty=fullName&gt;</ph> method on the variable to receive a <ph id="ph2">&lt;xref:System.Type&gt;</ph> object for the run-time type of the variable.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Type&gt;</ph> object holds extensive information in its properties and methods.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>You can pass the variable to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Information.TypeName%2A&gt;</ph> function to receive a <ph id="ph2">`String`</ph> containing the name of run-time type.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>You can pass the variable to the <ph id="ph1">&lt;xref:Microsoft.VisualBasic.Information.VarType%2A&gt;</ph> function to receive a <ph id="ph2">`VariantType`</ph> value representing the type classification of the variable.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The following example calls the <ph id="ph1">`TypeName`</ph> function to determine the type of the array and the type of the elements in the array.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The array type is <ph id="ph1">`Integer(,)`</ph> and the elements in the array are of type <ph id="ph2">`Integer`</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">&lt;a name="BKMK_Collections"&gt;</bpt><ept id="p1">&lt;/a&gt;</ept> Collections as an Alternative to Arrays</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Arrays are most useful for creating and working with a fixed number of strongly typed objects.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Collections provide a more flexible way to work with groups of objects.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Unlike arrays, the group of objects that you work with can grow and shrink dynamically as the needs of the application change.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If you need to change the size of an array, you must use the <bpt id="p1">[</bpt>ReDim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/redim-statement.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>When you do this, <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> creates a new array and releases the previous array for disposal.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>This takes execution time.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Therefore, if the number of items you are working with changes frequently, or you cannot predict the maximum number of items you need, you might obtain better performance using a collection.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If your collection contains elements of only one data type, you can use one of the classes in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=fullName&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>A generic collection enforces type safety so that no other data type can be added to it.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>When you retrieve an element from a generic collection, you do not have to determine its data type or convert it.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information about collections, see <bpt id="p1">[</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> generic class <ph id="ph2">&lt;xref:System.Collections.Generic.List%601?displayProperty=fullName&gt;</ph> to create a list collection of <ph id="ph3">`Customer`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The declaration of the <ph id="ph1">`CustomerFile`</ph> collection specifies that it can contain elements only of type <ph id="ph2">`Customer`</ph>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>It also provides for an initial capacity of 200 elements.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The procedure <ph id="ph1">`AddNewCustomer`</ph> checks the new element for validity and then adds it to the collection.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The procedure <ph id="ph1">`PrintCustomers`</ph> uses a <ph id="ph2">`For Each`</ph> loop to traverse the collection and display its elements.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Term</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Array Dimensions in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/array-dimensions.md)</ept></source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Explains rank and dimensions in arrays.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Initialize an Array Variable in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md)</ept></source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Describes how to populate arrays with initial values.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Sort An Array in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/how-to-sort-an-array.md)</ept></source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Shows how to sort the elements of an array alphabetically.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Assign One Array to Another Array<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/how-to-assign-one-array-to-another-array.md)</ept></source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Describes the rules and steps for assigning an array to another array variable.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Troubleshooting Arrays<ept id="p1">](../../../../visual-basic/programming-guide/language-features/arrays/troubleshooting-arrays.md)</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Discusses some common problems that arise when working with arrays.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Array&gt;</ph></source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/dim-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ReDim Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/redim-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>