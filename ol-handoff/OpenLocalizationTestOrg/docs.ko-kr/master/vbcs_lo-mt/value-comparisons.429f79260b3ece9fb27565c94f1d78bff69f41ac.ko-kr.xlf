<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32a2e1693b4092bad251af67a68ad0ec2ae726a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\operators-and-expressions\value-comparisons.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41207a3e9a22ede37858b258584d9a6f1acafa17</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30de18a71cf20666d1abf3a80ca4845f11b04911</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Value Comparisons (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Value Comparisons (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Comparison operators can be used to construct expressions that compare the values of numeric variables.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These expressions return a <ph id="ph1">`Boolean`</ph> value based on whether the comparison is true or false.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Examples of such an expression are as follows.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The first expression evaluates to <ph id="ph1">`True`</ph>, because 45 is greater than 26.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The second example evaluates to <ph id="ph1">`False`</ph>, because 26 is not greater than 45.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can also compare numeric expressions in this fashion.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The expressions you compare can themselves be complex expressions, as in the following example.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The preceding complex expression includes literals, variables, and function calls.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The expressions on both sides of the comparison operator are evaluated, and the resulting values are then compared using the <ph id="ph1">`&gt;=`</ph> comparison operator.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the value of the expression on the left side is greater than or equal to the value of the expression on the right, the entire expression evaluates to <ph id="ph1">`True`</ph>; otherwise, it evaluates to <ph id="ph2">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Expressions that compare values are most commonly used in <ph id="ph1">`If...Then`</ph> constructions, as in the following example.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#84<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/value-comparisons_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`=`</ph> sign is a comparison operator as well as an assignment operator.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When used as a comparison operator, it evaluates whether the value on the left is equal to the value on the right, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#85<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/value-comparisons_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can also use a comparison expression anywhere a <ph id="ph1">`Boolean`</ph> value is needed, such as in an <ph id="ph2">`If`</ph>, <ph id="ph3">`While`</ph>, <ph id="ph4">`Loop`</ph>, or <ph id="ph5">`ElseIf`</ph> statement, or when assigning to or passing a value to a <ph id="ph6">`Boolean`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the following example, the value returned by the comparison expression is assigned to a <ph id="ph1">`Boolean`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbalrOperators#86<ept id="p2">](../../../../visual-basic/language-reference/operators/codesnippet/VisualBasic/value-comparisons_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Boolean Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/boolean-expressions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operators and Expressions<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparison Operators in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/comparison-operators.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Calculate Numeric Values<ept id="p1">](../../../../visual-basic/programming-guide/language-features/operators-and-expressions/how-to-calculate-numeric-values.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Precedence in Visual Basic<ept id="p1">](../../../../visual-basic/language-reference/operators/operator-precedence.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>