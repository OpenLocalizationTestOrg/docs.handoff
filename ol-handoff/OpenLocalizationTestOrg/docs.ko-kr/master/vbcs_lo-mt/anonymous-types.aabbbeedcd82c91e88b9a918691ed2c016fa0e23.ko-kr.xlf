<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="anonymous-types.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">951f84326a0b74b5c4be7a45bbcc396ef8339135</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\objects-and-classes\anonymous-types.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">278bb98f52e3738ff390ecdc4e3d1d16ce9929c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d3c68703ea1f6cc140a603160e19e2b0f8bee6a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Anonymous Types (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Anonymous Types (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Visual Basic supports anonymous types, which enable you to create objects without writing a class definition for the data type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Instead, the compiler generates a class for you.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The class has no usable name, inherits directly from <ph id="ph1">&lt;xref:System.Object&gt;</ph>, and contains the properties you specify in declaring the object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Because the name of the data type is not specified, it is referred to as an <bpt id="p1">*</bpt>anonymous type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example declares and creates variable <ph id="ph1">`product`</ph> as an instance of an anonymous type that has two properties, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Price`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>query expression<ept id="p1">*</ept> uses anonymous types to combine columns of data selected by a query.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You cannot define the type of the result in advance, because you cannot predict the columns a particular query might select.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Anonymous types enable you to write a query that selects any number of columns, in any order.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The compiler creates a data type that matches the specified properties and the specified order.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the following examples, <ph id="ph1">`products`</ph> is a list of product objects, each of which has many properties.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Variable <ph id="ph1">`namePriceQuery`</ph> holds the definition of a query that, when it is executed, returns a collection of instances of an anonymous type that has two properties, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Price`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Variable <ph id="ph1">`nameQuantityQuery`</ph> holds the definition of a query that, when it is executed, returns a collection of instances of an anonymous type that has two properties, <ph id="ph2">`Name`</ph> and <ph id="ph3">`OnHand`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about the code created by the compiler for an anonymous type, see <bpt id="p1">[</bpt>Anonymous Type Definition<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The name of the anonymous type is compiler generated and may vary from compilation to compilation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your code should not use or rely on the name of an anonymous type because the name might change when a project is recompiled.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Declaring an Anonymous Type</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The declaration of an instance of an anonymous type uses an initializer list to specify the properties of the type.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can specify only properties when you declare an anonymous type, not other class elements such as methods or events.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`product1`</ph> is an instance of an anonymous type that has two properties: <ph id="ph2">`Name`</ph> and <ph id="ph3">`Price`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you designate properties as key properties, you can use them to compare two anonymous type instances for equality.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, the values of key properties cannot be changed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See the Key Properties section later in this topic for more information.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Notice that declaring an instance of an anonymous type is like declaring an instance of a named type by using an object initializer:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about other ways to specify anonymous type properties, see <bpt id="p1">[</bpt>How to: Infer Property Names and Types in Anonymous Type Declarations<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Key Properties</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Key properties differ from non-key properties in several fundamental ways:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Only the values of key properties are compared in order to determine whether two instances are equal.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The values of key properties are read-only and cannot be changed.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Only key property values are included in the compiler-generated hash code algorithm for an anonymous type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Equality</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Instances of anonymous types can be equal only if they are instances of the same anonymous type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The compiler treats two instances as instances of the same type if they meet the following conditions:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>They are declared in the same assembly.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Their properties have the same names, the same inferred types, and are declared in the same order.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Name comparisons are not case-sensitive.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The same properties in each are marked as key properties.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>At least one property in each declaration is a key property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An instance of an anonymous types that has no key properties is equal only to itself.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Two instances of the same anonymous type are equal if the values of their key properties are equal.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following examples illustrate how equality is tested.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Read-Only Values</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The values of key properties cannot be changed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, in <ph id="ph1">`prod8`</ph> in the previous example, the <ph id="ph2">`Name`</ph> and <ph id="ph3">`Price`</ph> fields are <ph id="ph4">`read-only`</ph>, but <ph id="ph5">`OnHand`</ph> can be changed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Anonymous Types from Query Expressions</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Query expressions do not always require the creation of anonymous types.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When possible, they use an existing type to hold the column data.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This occurs when the query returns either whole records from the data source, or only one field from each record.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the following code examples, <ph id="ph1">`customers`</ph> is a collection of objects of a <ph id="ph2">`Customer`</ph> class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The class has many properties, and you can include one or more of them in the query result, in any order.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the first two examples, no anonymous types are required because the queries select elements of named types:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`custs1`</ph> contains a collection of strings, because <ph id="ph2">`cust.Name`</ph> is a string.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`custs2`</ph> contains a collection of <ph id="ph2">`Customer`</ph> objects, because each element of <ph id="ph3">`customers`</ph> is a <ph id="ph4">`Customer`</ph> object, and the whole element is selected by the query.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, appropriate named types are not always available.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You might want to select customer names and addresses for one purpose, customer ID numbers and locations for another, and customer names, addresses, and order histories for a third.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Anonymous types enable you to select any combination of properties, in any order, without first declaring a new named type to hold the result.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Instead, the compiler creates an anonymous type for each compilation of properties.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following query selects only the customer's name and ID number from each <ph id="ph1">`Customer`</ph> object in <ph id="ph2">`customers`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Therefore, the compiler creates an anonymous type that contains only those two properties.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Both the names and the data types of the properties in the anonymous type are taken from the arguments to <ph id="ph1">`Select`</ph>, <ph id="ph2">`cust.Name`</ph> and <ph id="ph3">`cust.ID`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The properties in an anonymous type that is created by a query are always key properties.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`custs3`</ph> is executed in the following <ph id="ph2">`For Each`</ph> loop, the result is a collection of instances of an anonymous type with two key properties, <ph id="ph3">`Name`</ph> and <ph id="ph4">`ID`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The elements in the collection represented by <ph id="ph1">`custs3`</ph> are strongly typed, and you can use IntelliSense to navigate through the available properties and to verify their types.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Deciding Whether to Use Anonymous Types</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Before you create an object as an instance of an anonymous class, consider whether that is the best option.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, if you want to create a temporary object to contain related data, and you have no need for other fields and methods that a complete class might contain, an anonymous type is a good solution.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Anonymous types are also convenient if you want a different selection of properties for each declaration, or if you want to change the order of the properties.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, if your project includes several objects that have the same properties, in a fixed order, you can declare them more easily by using a named type with a class constructor.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For example, with an appropriate constructor, it is easier to declare several instances of a <ph id="ph1">`Product`</ph> class than it is to declare several instances of an anonymous type.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Another advantage of named types is that the compiler can catch an accidental mistyping of a property name.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In the previous examples, <ph id="ph1">`firstProd2`</ph>, <ph id="ph2">`secondProd2`</ph>, and <ph id="ph3">`thirdProd2`</ph> are intended to be instances of the same anonymous type.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>However, if you were to accidentally declare <ph id="ph1">`thirdProd2`</ph> in one of the following ways, its type would be different from that of <ph id="ph2">`firstProd2`</ph> and <ph id="ph3">`secondProd2`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>More importantly, there are limitations on the use of anonymous types that do not apply to instances of named types.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`firstProd2`</ph>, <ph id="ph2">`secondProd2`</ph>, and <ph id="ph3">`thirdProd2`</ph> are instances of the same anonymous type.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, the name for the shared anonymous type is not available and cannot appear where a type name is expected in your code.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, an anonymous type cannot be used to define a method signature, to declare another variable or field, or in any type declaration.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>As a result, anonymous types are not appropriate when you have to share information across methods.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An Anonymous Type Definition</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In response to the declaration of an instance of an anonymous type, the compiler creates a new class definition that contains the specified properties.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If the anonymous type contains at least one key property, the definition overrides three members inherited from <ph id="ph1">&lt;xref:System.Object&gt;</ph>: <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Object.GetHashCode%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Object.ToString%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The code produced for testing equality and determining the hash code value considers only the key properties.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the anonymous type contains no key properties, only <ph id="ph1">&lt;xref:System.Object.ToString%2A&gt;</ph> is overridden.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Explicitly named properties of an anonymous type cannot conflict with these generated methods.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>That is, you cannot use <ph id="ph1">`.Equals`</ph>, <ph id="ph2">`.GetHashCode`</ph>, or <ph id="ph3">`.ToString`</ph> to name a property.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Anonymous type definitions that have at least one key property also implement the <ph id="ph1">&lt;xref:System.IEquatable%601?displayProperty=fullName&gt;</ph> interface, where <ph id="ph2">`T`</ph> is the type of the anonymous type.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information about the code created by the compiler and the functionality of the overridden methods, see <bpt id="p1">[</bpt>Anonymous Type Definition<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Initializers: Named and Anonymous Types<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/object-initializers-named-and-anonymous-types.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Infer Property Names and Types in Anonymous Type Declarations<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Anonymous Type Definition<ept id="p1">](../../../../visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Key<ept id="p1">](../../../../visual-basic/language-reference/modifiers/key.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>