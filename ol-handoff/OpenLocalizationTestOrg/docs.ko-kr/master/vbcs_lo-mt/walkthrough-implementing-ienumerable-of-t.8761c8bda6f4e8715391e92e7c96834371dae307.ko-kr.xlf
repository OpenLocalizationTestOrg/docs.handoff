<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-implementing-ienumerable-of-t.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-3be5d15" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab65cf2cdafa5a4fc8761a495a2ae35a078a1d26</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\control-flow\walkthrough-implementing-ienumerable-of-t.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffe19fcf6bd8cb03fcb3eab905d07dea83ded037</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2d1fa0e9dac65586b4c8cd5ba2c8f7b60c40952</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Implementing IEnumerable in Visual Basic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Implementing IEnumerable(Of T) in Visual Basic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface is implemented by classes that can return a sequence of values one item at a time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The advantage of returning data one item at a time is that you do not have to load the complete set of data into memory to work with it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You only have to use sufficient memory to load a single item from the data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Classes that implement the <ph id="ph1">`IEnumerable(T)`</ph> interface can be used with <ph id="ph2">`For Each`</ph> loops or LINQ queries.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, consider an application that must read a large text file and return each line from the file that matches particular search criteria.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The application uses a LINQ query to return lines from the file that match the specified criteria.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To query the contents of the file by using a LINQ query, the application could load the contents of the file into an array or a collection.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, loading the whole file into an array or collection would consume far more memory than is required.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The LINQ query could instead query the file contents by using an enumerable class, returning only values that match the search criteria.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Queries that return only a few matching values would consume far less memory.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can create a class that implements the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface to expose source data as enumerable data.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Your class that implements the <ph id="ph1">`IEnumerable(T)`</ph> interface will require another class that implements the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> interface to iterate through the source data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These two classes enable you to return items of data sequentially as a specific type.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this walkthrough, you will create a class that implements the <ph id="ph1">`IEnumerable(Of String)`</ph> interface and a class that implements the <ph id="ph2">`IEnumerator(Of String)`</ph> interface to read a text file one line at a time.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Creating the Enumerable Class</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create the enumerable class project</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>1.  In <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph>, on the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, point to <bpt id="p2">**</bpt>New<ept id="p2">**</ept> and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>2.  In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Project Types<ept id="p2">**</ept> pane, make sure that <bpt id="p3">**</bpt>Windows<ept id="p3">**</ept> is selected.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Class Library<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Templates<ept id="p2">**</ept> pane.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <ph id="ph1">`StreamReaderEnumerable`</ph>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The new project is displayed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>3.  In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, right-click the Class1.vb file and click <bpt id="p2">**</bpt>Rename<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Rename the file to <ph id="ph1">`StreamReaderEnumerable.vb`</ph> and press ENTER.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Renaming the file will also rename the class to <ph id="ph1">`StreamReaderEnumerable`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This class will implement the <ph id="ph1">`IEnumerable(Of String)`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>4.  Right-click the StreamReaderEnumerable project, point to <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>New Item<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Class<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <ph id="ph1">`StreamReaderEnumerator.vb`</ph> and click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The first class in this project is the enumerable class and will implement the <ph id="ph1">`IEnumerable(Of String)`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This generic interface implements the <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface and guarantees that consumers of this class can access values typed as <ph id="ph2">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To add the code to implement IEnumerable</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>1.  Open the StreamReaderEnumerable.vb file.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>2.  On the line after <ph id="ph1">`Public Class StreamReaderEnumerable`</ph>, type the following and press ENTER.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically populates the class with the members that are required by the <ph id="ph2">`IEnumerable(Of String)`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>3.  This enumerable class will read lines from a text file one line at a time.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add the following code to the class to expose a public constructor that takes a file path as an input parameter.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>4.  Your implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> method of the <ph id="ph2">`IEnumerable(Of String)`</ph> interface will return a new instance of the <ph id="ph3">`StreamReaderEnumerator`</ph> class.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The implementation of the <ph id="ph1">`GetEnumerator`</ph> method of the <ph id="ph2">`IEnumerable`</ph> interface can be made <ph id="ph3">`Private`</ph>, because you have to expose only members of the <ph id="ph4">`IEnumerable(Of String)`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Replace the code that <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> generated for the <ph id="ph2">`GetEnumerator`</ph> methods with the following code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To add the code to implement IEnumerator</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>1.  Open the StreamReaderEnumerator.vb file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>2.  On the line after <ph id="ph1">`Public Class StreamReaderEnumerator`</ph>, type the following and press ENTER.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> automatically populates the class with the members that are required by the <ph id="ph2">`IEnumerator(Of String)`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>3.  The enumerator class opens the text file and performs the file I/O to read the lines from the file.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add the following code to the class to expose a public constructor that takes a file path as an input parameter and open the text file for reading.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>4.  The <ph id="ph1">`Current`</ph> properties for both the <ph id="ph2">`IEnumerator(Of String)`</ph> and <ph id="ph3">`IEnumerator`</ph> interfaces return the current item from the text file as a <ph id="ph4">`String`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The implementation of the <ph id="ph1">`Current`</ph> property of the <ph id="ph2">`IEnumerator`</ph> interface can be made <ph id="ph3">`Private`</ph>, because you have to expose only members of the <ph id="ph4">`IEnumerator(Of String)`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Replace the code that <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> generated for the <ph id="ph2">`Current`</ph> properties with the following code.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>5.  The <ph id="ph1">`MoveNext`</ph> method of the <ph id="ph2">`IEnumerator`</ph> interface navigates to the next item in the text file and updates the value that is returned by the <ph id="ph3">`Current`</ph> property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If there are no more items to read, the <ph id="ph1">`MoveNext`</ph> method returns <ph id="ph2">`False`</ph>; otherwise the <ph id="ph3">`MoveNext`</ph> method returns <ph id="ph4">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`MoveNext`</ph> method.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>6.  The <ph id="ph1">`Reset`</ph> method of the <ph id="ph2">`IEnumerator`</ph> interface directs the iterator to point to the start of the text file and clears the current item value.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Add the following code to the <ph id="ph1">`Reset`</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>7.  The <ph id="ph1">`Dispose`</ph> method of the <ph id="ph2">`IEnumerator`</ph> interface guarantees that all unmanaged resources are released before the iterator is destroyed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The file handle that is used by the <ph id="ph1">`StreamReader`</ph> object is an unmanaged resource and must be closed before the iterator instance is destroyed.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Replace the code that <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> generated for the <ph id="ph2">`Dispose`</ph> method with the following code.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Using the Sample Iterator</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can use an enumerable class in your code together with control structures that require an object that implements <ph id="ph1">`IEnumerable`</ph>, such as a <ph id="ph2">`For Next`</ph> loop or a LINQ query.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following example shows the <ph id="ph1">`StreamReaderEnumerable`</ph> in a LINQ query.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introduction to LINQ in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/linq/introduction-to-linq.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Control Flow<ept id="p1">](../../../../visual-basic/programming-guide/language-features/control-flow/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Loop Structures<ept id="p1">](../../../../visual-basic/programming-guide/language-features/control-flow/loop-structures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>For Each...Next Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/for-each-next-statement.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>