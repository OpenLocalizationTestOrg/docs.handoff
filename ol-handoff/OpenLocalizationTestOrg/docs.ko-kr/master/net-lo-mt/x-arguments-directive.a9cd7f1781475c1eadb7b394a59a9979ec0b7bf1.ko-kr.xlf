<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7f702c543ac7108c05a1a1a7bf7865c61a33132</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-arguments-directive.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8c809ce17b123bc532eda40ed96017743d6b262</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">903afe89ae1f025620c28e289e6406e92c48859c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>x:Arguments Directive | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:Arguments Directive</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Packages construction arguments for a non-default constructor object element declaration in XAML, or for a factory method object declaration.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML Element Usage (Nondefault constructor)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Element Usage (factory method)</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One or more object elements that specify arguments to be passed to the backing non-default constructor or factory method.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Typical usage is to use initialization text within the object elements to specify the actual argument values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>See Examples section.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The order of the elements is significant.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The XAML types in order must match the types and type order of the backing constructor or factory method overload.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The name of the factory method that should process any <ph id="ph1">`x:Arguments`</ph> arguments.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:FactoryMethod`</ph> can modify the scope and behavior where <ph id="ph2">`x:Arguments`</ph> applies.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If no <ph id="ph1">`x:FactoryMethod`</ph> is specified, <ph id="ph2">`x:Arguments`</ph> applies to alternate (non-default) signatures of the backing constructors.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`x:FactoryMethod`</ph> is specified, <ph id="ph2">`x:Arguments`</ph> applies to an overload of the named method.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>XAML 2006 can support non-default initialization through initialization text.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, the practical application of an initialization text construction technique is limited.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Initialization text is treated as a single text string; therefore, it only adds capability for a single parameter initialization unless a type converter is defined for the construction behavior that can parse custom information items and custom delimiters from the string.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Also, the text string to object logic is potentially a given XAML parser's native default type converter for handling primitives other than a true string.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`x:Arguments`</ph> XAML usage is not property element usage in the typical sense, because the directive markup does not reference the containing object element's type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It is more akin to other directives such as <ph id="ph1">`x:Code`</ph> where the element demarks a range in which the markup should be interpreted as other than the default for child contents.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this case, the XAML type of each object element communicates information about the argument types, which is used by XAML parsers to determine which specific constructor factory method signature an <ph id="ph1">`x:Arguments`</ph> usage is attempting to reference.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:Arguments`</ph> for an object element being constructed must precede any other property elements, content, inner text, or initialization strings of the object element.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The object elements within <ph id="ph1">`x:Arguments`</ph> can include attributes and initialization strings, as permitted by that XAML type and its backing constructor or factory method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For either the object or the arguments, you can specify custom XAML types or XAML types that are otherwise outside the default XAML namespace by referencing established prefix mappings.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>XAML processors use the following guidelines to determine how the arguments specified in <ph id="ph1">`x:Arguments`</ph> should be used to construct an object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`x:FactoryMethod`</ph> is specified, information is compared to the specified <ph id="ph2">`x:FactoryMethod`</ph> (note that the value of <ph id="ph3">`x:FactoryMethod`</ph> is the method name, and the named method can have overloads.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`x:FactoryMethod`</ph> is not specified, information is compared to the set of all public constructor overloads of the object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>XAML processing logic then compares the number of parameters and selects the overload with matching arity.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If there is more than one match, the XAML processor should compare the types of the parameters based on the XAML types of the provided object elements.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If there is still more than one match, the XAML processor behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`x:FactoryMethod`</ph> is specified but the method cannot be resolved, a XAML processor should throw an exception.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A XAML attribute usage <ph id="ph1">`&lt;x:Arguments&gt;string&lt;/x:Arguments&gt;`</ph> is technically possible.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, this provides no capabilities beyond what could be done otherwise through initialization text and type converters, and using this syntax is not the design intention of the XAML 2009 factory method features.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following example shows a non-default constructor signature, then the XAML usage of <ph id="ph1">`x:Arguments`</ph> that accesses that signature.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following example shows a target factory method signature, then the XAML usage of <ph id="ph1">`x:Arguments`</ph> that accesses that signature.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Defining Custom Types for Use with .NET Framework XAML Services<ept id="p1">](../../../docs/framework/xaml-services/defining-custom-types-for-use-with-net-framework-xaml-services.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>