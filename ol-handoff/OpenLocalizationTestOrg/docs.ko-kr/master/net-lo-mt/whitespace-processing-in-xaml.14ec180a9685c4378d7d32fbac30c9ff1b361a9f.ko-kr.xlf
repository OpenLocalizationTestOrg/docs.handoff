<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-401ea83" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e07c406324eca7b5524a60f378c5769775c86ac</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\whitespace-processing-in-xaml.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a00d1a2d86978041d37560f02bd61477d4c83a4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6578db48a0240982bb0adb1005e18c08c3bd8f6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Whitespace Processing in XAML | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Whitespace Processing in XAML</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The language rules for XAML state that significant whitespace must be processed by a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> processor implementation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic documents these XAML language rules.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It also documents additional whitespace handling that is defined by the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../includes/tlasharptla-winclient-md.md)]</ph> implementation of the XAML processor and the XAML writer for serialization.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Whitespace Definition</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Consistent with <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../includes/tla2sharptla-xml-md.md)]</ph>, whitespace characters in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> are space, linefeed, and tab. These correspond to the <ph id="ph3">[!INCLUDE[TLA#tla_unicode](../../../includes/tlasharptla-unicode-md.md)]</ph> values 0020, 000A, and 0009 respectively.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Whitespace Normalization</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By default the following whitespace normalization occurs when a <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> processor processes a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> file:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Linefeed characters between East Asian characters are removed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See the "East Asian Characters" section later in this topic for a definition of this term.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>All whitespace characters (space, linefeed, tab) are converted into spaces.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>All consecutive spaces are deleted and replaced by one space.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A space immediately following the start tag is deleted.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A space immediately before the end tag is deleted.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>"Default" corresponds to the state denoted by the default value of the <bpt id="p1">[</bpt>xml:space<ept id="p1">](../../../docs/framework/xaml-services/xml-space-handling-in-xaml.md)</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Whitespace in Inner Text, and String Primitives</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The previous normalization rules apply to inner text that is found within XAML  elements.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>After normalization, a XAML  processor converts any inner text into an appropriate type as follows:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If the type of the property is not a collection but is not directly an <ph id="ph1">&lt;xref:System.Object&gt;</ph> type, the XAML  processor attempts to convert to that type by using its type converter.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A failed conversion here causes a compile-time error.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the type of the property is a collection and the inner text is contiguous (no intervening element tags), the inner text is parsed as a single <ph id="ph1">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the collection type cannot accept <ph id="ph1">&lt;xref:System.String&gt;</ph>, this also causes a compile-time error.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the type of the property is <ph id="ph1">&lt;xref:System.Object&gt;</ph>, the inner text is parsed as a single <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If there are intervening element tags, this causes a compile-time error because the <ph id="ph1">&lt;xref:System.Object&gt;</ph> type implies a single object (<ph id="ph2">&lt;xref:System.String&gt;</ph> or otherwise).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the type of the property is a collection, and the inner text is not contiguous, the first substring is converted into a <ph id="ph1">&lt;xref:System.String&gt;</ph> and added as a collection item, the intervening element is added as a collection item, and finally the trailing substring (if any) is added to the collection as a third <ph id="ph2">&lt;xref:System.String&gt;</ph> item.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Preserving Whitespace</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>There are several techniques for preserving whitespace in the source <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> for eventual presentation that are not affected by <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> processor whitespace normalization.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>xml:space="preserve"<ept id="p1">**</ept>: Specify this attribute at the level of the element where whitespace preservation is desired.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This preserves all white space, which includes the spaces that might be added by code-editing applications to "pretty-print" align elements as a visually intuitive nesting.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>However, whether those spaces render is determined by the content model for the containing element.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Avoid specifying <ph id="ph1">`xml:space="preserve"`</ph> at the root level because most object models do not consider whitespace as significant regardless of how you set the attribute.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Setting <ph id="ph1">`xml:space`</ph> globally may have performance consequences on XAML processing (particularly serialization) in some implementations.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It is a better practice to only set the attribute specifically at the level of elements that render whitespace within strings, or are whitespace significant collections.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Entities and non breaking spaces<ept id="p1">**</ept>: <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> supports placing any <ph id="ph2">[!INCLUDE[TLA#tla_unicode](../../../includes/tlasharptla-unicode-md.md)]</ph> entity within a text object model.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can use dedicated entities such as nonbreaking space (&amp;<ph id="ph1">\#</ph>160; in UTF-8 encoding).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can also use rich text controls that support nonbreaking space characters.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You should be cautious if you are using entities to simulate layout characteristics such as indention, because the run-time output of the entities will vary based on a greater number of factors than would the capabilities for producing indention results in a typical layout system, such as proper use of panels and margins.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For instance, entities are mapped to fonts and can change size in response to user font selection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>East Asian Characters</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>"East Asian characters" is defined as a set of <ph id="ph1">[!INCLUDE[TLA2#tla_unicode](../../../includes/tla2sharptla-unicode-md.md)]</ph> character ranges U+20000 to U+2FFFD and U+30000 to U+3FFFD.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This subset is also sometimes referred to as "CJK ideographs".</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>http://www.unicode.org<ept id="p1">](http://www.unicode.org/)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Whitespace and Text Content Models</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In practice, preserving whitespace is only of concern for a subset of all possible content models.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>That subset is composed of content models that can take a singleton <ph id="ph1">&lt;xref:System.String&gt;</ph> type in some form, a dedicated <ph id="ph2">&lt;xref:System.String&gt;</ph> collection, or a mixture of <ph id="ph3">&lt;xref:System.String&gt;</ph> and other types in an <ph id="ph4">&lt;xref:System.Collections.IList&gt;</ph> or <ph id="ph5">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Whitespace and Text Content Models in WPF</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For illustration purposes, the remainder of this section references particular types that are defined by WPF.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The whitespace handling features that are described in this topic are generally pertinent to both .NET Framework XAML Services and WPF.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>To see this behavior in action, you might experiment with some WPF XAML markup, view the results in an object graph, and then serialize back to markup again.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Even for content models that can take strings, the default behavior within these content models is that any whitespace that remains is not treated as significant.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> takes an <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph>, but the whitespace (such as linefeeds between each <ph id="ph3">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>) is not preserved and not rendered.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you attempt to use linefeeds as separators between strings for <ph id="ph1">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> items, it does not work at all; the strings that are separated by the linefeeds are treated as one string and one item.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Those collections that do treat whitespace as significant are typically part of the flow document model.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The primary collection that supports whitespace preservation behavior is <ph id="ph1">&lt;xref:System.Windows.Documents.InlineCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This collection class is declared with the <ph id="ph1">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph>; when this attribute is found, the <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> processor will treat whitespace within the collection as significant.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The combination of <ph id="ph1">`xml:space="preserve"`</ph> and whitespace within a <ph id="ph2">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph> denoted collection is that all white space is preserved and rendered.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The combination of <ph id="ph1">`xml:space="default"`</ph> and whitespace within a <ph id="ph2">&lt;xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&gt;</ph> causes the initial whitespace normalization described earlier, which leaves one space in certain positions, and those spaces are preserved and rendered.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Which behavior is desirable is up to you, and you should use <ph id="ph1">`xml:space`</ph> selectively to enable the behavior that you want.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Also, certain inline elements that connote a linebreak in a flow document model should deliberately not introduce an extra space even in a whitespace significant collection.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.Documents.LineBreak&gt;</ph> element has the same purpose as the <ph id="ph2">\&lt;</ph>BR/&gt; tag in <ph id="ph3">[!INCLUDE[TLA2#tla_html](../../../includes/tla2sharptla-html-md.md)]</ph>, and for readability in markup, typically a <ph id="ph4">&lt;xref:System.Windows.Documents.LineBreak&gt;</ph> is separated from any subsequent text by an authored linefeed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>That linefeed should not be normalized to become a leading space in the subsequent line.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>To enable that behavior, the class definition for the <ph id="ph1">&lt;xref:System.Windows.Documents.LineBreak&gt;</ph> element applies the <ph id="ph2">&lt;xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&gt;</ph>, which is then interpreted by the <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](../../../includes/tla2sharptla-xaml-md.md)]</ph> processor to mean that whitespace surrounding <ph id="ph4">&lt;xref:System.Windows.Documents.LineBreak&gt;</ph> is always trimmed.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XAML Overview (WPF)<ept id="p1">](../../../docs/framework/wpf/advanced/xaml-overview-wpf.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XML Character Entities and XAML<ept id="p1">](../../../docs/framework/xaml-services/xml-character-entities-and-xaml.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>xml:space Handling in XAML<ept id="p1">](../../../docs/framework/xaml-services/xml-space-handling-in-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>