<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f40a6e1704552ab17dc6bc644671481e8cdc16b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\concepts\linq\chaining-standard-query-operators-together.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">793deb33be8da403bba52a87b53ff2af3cdd28b5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f102c51873fc443f3ab3189de9292233fb27b059</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Chaining Standard Query Operators Together (C#) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Chaining Standard Query Operators Together (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is the final topic in the <bpt id="p1">[</bpt>Tutorial: Chaining Queries Together (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/tutorial-chaining-queries-together.md)</ept> tutorial.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The standard query operators can also be chained together.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, you can interject the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A?displayProperty=fullName&gt;</ph> operator, and it also operates in a lazy fashion.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>No intermediate results are materialized by it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method is called before calling <ph id="ph2">`ConvertCollectionToUpperCase`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method operates in almost exactly the same way as the lazy methods used in previous examples in this tutorial, <ph id="ph2">`ConvertCollectionToUpperCase`</ph> and <ph id="ph3">`AppendString`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>One difference is that in this case, the <ph id="ph1">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph> method iterates through its source collection, determines that the first item does not pass the predicate, and then gets the next item, which does pass.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It then yields the second item.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, the basic idea is the same: Intermediate collections are not materialized unless they have to be.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When query expressions are used, they are converted to calls to the standard query operators, and the same principles apply.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>All of the examples in this section that are querying Office Open XML documents use the same principle.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Deferred execution and lazy evaluation are some of the fundamental concepts that you must understand  to use LINQ (and LINQ to XML) effectively.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This example produces the following output:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Tutorial: Chaining Queries Together (C#)<ept id="p1">](../../../../csharp/programming-guide/concepts/linq/tutorial-chaining-queries-together.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>