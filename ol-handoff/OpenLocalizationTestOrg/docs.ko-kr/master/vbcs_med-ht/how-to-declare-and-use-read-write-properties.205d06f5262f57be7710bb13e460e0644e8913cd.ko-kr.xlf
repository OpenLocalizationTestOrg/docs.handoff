<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="how-to-declare-and-use-read-write-properties.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22f3d9ab8b47e78147524e029847aea3ab87c842</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\how-to-declare-and-use-read-write-properties.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03eeb5efc6fa03b860c51ead958580314db4e6e7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9fdd8ae3537adca42b6b8f3402aad9abe55d0146</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>How to: Declare and Use Read Write Properties (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Declare and Use Read Write Properties (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Properties provide the convenience of public data members without the risks that come with unprotected, uncontrolled, and unverified access to an object's data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is accomplished through <bpt id="p1">*</bpt>accessors<ept id="p1">*</ept>: special methods that assign and retrieve values from the underlying data member.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>set<ept id="p1">](../../../csharp/language-reference/keywords/set.md)</ept> accessor enables data members to be assigned, and the <bpt id="p2">[</bpt>get<ept id="p2">](../../../csharp/language-reference/keywords/get.md)</ept> accessor retrieves data member values.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This sample shows a <ph id="ph1">`Person`</ph> class that has two properties: <ph id="ph2">`Name`</ph> (string) and <ph id="ph3">`Age`</ph> (int).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Both properties provide <ph id="ph1">`get`</ph> and <ph id="ph2">`set`</ph> accessors, so they are considered read/write properties.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the previous example, the <ph id="ph1">`Name`</ph> and <ph id="ph2">`Age`</ph> properties are <bpt id="p1">[</bpt>public<ept id="p1">](../../../csharp/language-reference/keywords/public.md)</ept> and include both a <ph id="ph3">`get`</ph> and a <ph id="ph4">`set`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This allows any object to read and write these properties.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is sometimes desirable, however, to exclude one of the accessors.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Omitting the <ph id="ph1">`set`</ph> accessor, for example, makes the property read-only:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Alternatively, you can expose one accessor publicly but make the other private or protected.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Asymmetric Accessor Accessibility<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Once the properties are declared, they can be used as if they were fields of the class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This allows for a very natural syntax when both getting and setting the value of a property, as in the following statements:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Note that in a property <ph id="ph1">`set`</ph> method a special <ph id="ph2">`value`</ph> variable is available.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This variable contains the value that the user specified, for example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Notice the clean syntax for incrementing the <ph id="ph1">`Age`</ph> property on a <ph id="ph2">`Person`</ph> object:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If separate <ph id="ph1">`set`</ph> and <ph id="ph2">`get`</ph> methods were used to model properties, the equivalent code might look like this:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ToString`</ph> method is overridden in this example:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`ToString`</ph> is not explicitly used in the program.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It is invoked by default by the <ph id="ph1">`WriteLine`</ph> calls.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>