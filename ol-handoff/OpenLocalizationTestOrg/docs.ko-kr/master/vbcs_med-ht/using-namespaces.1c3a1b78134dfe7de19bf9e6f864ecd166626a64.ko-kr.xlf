<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0ab1adb2103989234e5f44f95a73bf75a66a35dd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\namespaces\using-namespaces.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bb6fcb9c809b24e3872feeb9e19c00d19320cb93</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ae797d8bf0392f0092e55201a3ed0ccaccaff50</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using Namespaces (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using Namespaces (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Namespaces are heavily used within C# programs in two ways.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Firstly, the .NET Framework classes use namespaces to organize its many classes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Secondly, declaring your own namespaces can help control the scope of class and method names in larger programming projects.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Accessing Namespaces</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Most C# applications begin with a section of <ph id="ph1">`using`</ph> directives.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This section lists the namespaces that the application will be using frequently, and saves the programmer from specifying a fully qualified name every time that a method that is contained within is used.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, by including the line:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuide#1<ept id="p2">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At the start of a program, the programmer can use the code:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuide#31<ept id="p2">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuide#30<ept id="p2">](../../../csharp/programming-guide/inside-a-program/codesnippet/CSharp/using-namespaces_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Namespace Aliases</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>using Directive<ept id="p1">](../../../csharp/language-reference/keywords/using-directive.md)</ept> can also be used to create an alias for a <bpt id="p2">[</bpt>namespace<ept id="p2">](../../../csharp/language-reference/keywords/namespace.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example, if you are using a previously written namespace that contains nested namespaces, you might want to declare an alias to provide a shorthand way of referencing one in particular, as in the following example:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#7<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using Namespaces to control scope</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`namespace`</ph> keyword is used to declare a scope.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The ability to create scopes within your project helps organize code and lets you create globally-unique types.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the following example, a class titled <ph id="ph1">`SampleClass`</ph> is defined in two namespaces, one nested inside the other.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>. Operator<ept id="p1">](../../../csharp/language-reference/operators/member-access-operator.md)</ept> is used to differentiate which method gets called.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#8<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Fully Qualified Names</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Namespaces and types have unique titles described by fully qualified names that indicate a logical hierarchy.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the statement <ph id="ph1">`A.B`</ph> implies that <ph id="ph2">`A`</ph> is the name of the namespace or type, and <ph id="ph3">`B`</ph> is nested inside it.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the following example, there are nested classes and namespaces.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The fully qualified name is indicated as a comment following each entity.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#9<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_6.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the previous code segment:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The namespace <ph id="ph1">`N1`</ph> is a member of the global namespace.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Its fully qualified name is <ph id="ph1">`N1`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The namespace <ph id="ph1">`N2`</ph> is a member of <ph id="ph2">`N1`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Its fully qualified name is <ph id="ph1">`N1.N2`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`C1`</ph> is a member of <ph id="ph2">`N1`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Its fully qualified name is <ph id="ph1">`N1.C1`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The class name <ph id="ph1">`C2`</ph> is used two times in this code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, the fully qualified names are unique.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The first instance of <ph id="ph1">`C2`</ph> is declared inside <ph id="ph2">`C1`</ph>; therefore, its fully qualified name is: <ph id="ph3">`N1.C1.C2`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The second instance of <ph id="ph1">`C2`</ph> is declared inside a namespace <ph id="ph2">`N2`</ph>; therefore, its fully qualified name is <ph id="ph3">`N1.N2.C2`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using the previous code segment, you can add a new class member, <ph id="ph1">`C3`</ph>, to the namespace <ph id="ph2">`N1.N2`</ph> as follows:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#10<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_7.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In general, use <ph id="ph1">`::`</ph> to reference a namespace alias or <ph id="ph2">`global::`</ph> to reference the global namespace and <ph id="ph3">`.`</ph> to qualify types or members.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It is an error to use <ph id="ph1">`::`</ph> with an alias that references a type instead of a namespace.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#11<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_8.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#12<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_9.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remember that the word <ph id="ph1">`global`</ph> is not a predefined alias; therefore, <ph id="ph2">`global.X`</ph> does not have any special meaning.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>It acquires a special meaning only when it is used with <ph id="ph1">`::`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Compiler warning CS0440 is generated if you define an alias named global because <ph id="ph1">`global::`</ph> always references the global namespace and not an alias.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, the following line generates the warning:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#13<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_10.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`::`</ph> with aliases is a good idea and protects against the unexpected introduction of additional types.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, consider this example:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#14<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_11.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideNamespaces#15<ept id="p2">](../../../csharp/programming-guide/namespaces/codesnippet/CSharp/using-namespaces_12.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This works, but if a type named <ph id="ph1">`Alias`</ph> were to subsequently be introduced, <ph id="ph2">`Alias.`</ph> would bind to that type instead.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`Alias::Exception`</ph> insures that <ph id="ph2">`Alias`</ph> is treated as a namespace alias and not mistaken for a type.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See the topic <bpt id="p1">[</bpt>How to: Use the Global Namespace Alias<ept id="p1">](../../../csharp/programming-guide/namespaces/how-to-use-the-global-namespace-alias.md)</ept> for more information regarding the <ph id="ph1">`global`</ph> alias.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespaces<ept id="p1">](../../../csharp/programming-guide/namespaces/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Namespace Keywords<ept id="p1">](../../../csharp/language-reference/keywords/namespace-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>. Operator<ept id="p1">](../../../csharp/language-reference/operators/member-access-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>:: Operator<ept id="p1">](../../../csharp/language-reference/operators/namespace-alias-qualifer.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>extern<ept id="p1">](../../../csharp/language-reference/keywords/extern.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>