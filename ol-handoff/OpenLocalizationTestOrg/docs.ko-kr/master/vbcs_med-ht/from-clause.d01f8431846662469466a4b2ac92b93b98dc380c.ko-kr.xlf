<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8634e7bd7f3c3110b42d8fc64e7ebef88b4ad8c7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\from-clause.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">196588aae73074de39988f9f505efa32ffe281c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e73da8a540604d1f24e4e4b1a102169ee92e1b0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>from clause (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>from clause (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A query expression must begin with a <ph id="ph1">`from`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Additionally, a query expression can contain sub-queries, which also begin with a <ph id="ph1">`from`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`from`</ph> clause specifies the following:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The data source on which the query or sub-query will be run.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A local <bpt id="p1">*</bpt>range variable<ept id="p1">*</ept> that represents each element in the source sequence.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Both the range variable and the data source are strongly typed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The data source referenced in the <ph id="ph1">`from`</ph> clause must have a type of <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, or a derived type such as <ph id="ph4">&lt;xref:System.Linq.IQueryable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`numbers`</ph> is the data source and <ph id="ph2">`num`</ph> is the range variable.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Note that both variables are strongly typed even through the <bpt id="p1">[</bpt>var<ept id="p1">](../../../csharp/language-reference/keywords/var.md)</ept> keyword is used.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#1<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/from-clause_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The Range Variable</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The compiler infers the type of the range variable when the data source implements <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, if the source has a type of <ph id="ph1">`IEnumerable&lt;Customer&gt;`</ph>, then the range variable is inferred to be <ph id="ph2">`Customer`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The only time that you must specify the type explicitly is when the source is a non-generic <ph id="ph1">`IEnumerable`</ph> type such as <ph id="ph2">&lt;xref:System.Collections.ArrayList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Query an ArrayList with LINQ<ept id="p1">](http://msdn.microsoft.com/library/c318b79a-fa4d-4de3-b62d-c1162beb267e)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the previous example <ph id="ph1">`num`</ph> is inferred to be of type <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because the range variable is strongly typed, you can call methods on it or use it in other operations.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, instead of writing <ph id="ph1">`select num`</ph>, you could write <ph id="ph2">`select num.ToString()`</ph> to cause the query expression to return a sequence of strings instead of integers.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Or you could write <ph id="ph1">`select n + 10`</ph> to cause the expression to return the sequence 14, 11, 13, 12, 10.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>select clause<ept id="p1">](../../../csharp/language-reference/keywords/select-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The range variable is like an iteration variable in a <bpt id="p1">[</bpt>foreach<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statement except for one very important difference: a range variable never actually stores data from the source.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It just a syntactic convenience that enables the query to describe what will occur when the query is executed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Introduction to LINQ Queries (C#)<ept id="p1">](../../../csharp/programming-guide/concepts/linq/introduction-to-linq-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Compound from Clauses</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In some cases, each element in the source sequence may itself be either a sequence or contain a sequence.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, your data source may be an <ph id="ph1">`IEnumerable&lt;Student&gt;`</ph> where each student object in the sequence contains a list of test scores.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To access the inner list within each <ph id="ph1">`Student`</ph> element, you can use compound <ph id="ph2">`from`</ph> clauses.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The technique is like using nested <bpt id="p1">[</bpt>foreach<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept> statements.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can add <bpt id="p1">[</bpt>where<ept id="p1">](../../../csharp/language-reference/keywords/partial-method.md)</ept> or <bpt id="p2">[</bpt>orderby<ept id="p2">](../../../csharp/language-reference/keywords/orderby-clause.md)</ept> clauses to either <ph id="ph1">`from`</ph> clause to filter the results.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example shows a sequence of <ph id="ph1">`Student`</ph> objects, each of which contains an inner <ph id="ph2">`List`</ph> of integers representing test scores.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To access the inner list, use a compound <ph id="ph1">`from`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can insert clauses between the two <ph id="ph1">`from`</ph> clauses if necessary.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#2<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/from-clause_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Using Multiple from Clauses to Perform Joins</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A compound <ph id="ph1">`from`</ph> clause is used to access inner collections in a single data source.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>However, a query can also contain multiple <ph id="ph1">`from`</ph> clauses that generate supplemental queries from independent data sources.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This technique enables you to perform certain types of join operations that are not possible by using the <bpt id="p1">[</bpt>join clause<ept id="p1">](../../../csharp/language-reference/keywords/join-clause.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following example shows how two <ph id="ph1">`from`</ph> clauses can be used to form a complete cross join of two data sources.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>cscsrefQueryKeywords#3<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/from-clause_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For more information about join operations that use multiple <ph id="ph1">`from`</ph> clauses, see <bpt id="p1">[</bpt>How to: Perform Custom Join Operations<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/how-to-perform-custom-join-operations.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Keywords (LINQ)<ept id="p1">](../../../csharp/language-reference/keywords/query-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ Query Expressions<ept id="p1">](../../../csharp/programming-guide/linq-query-expressions/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>