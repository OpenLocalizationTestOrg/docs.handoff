<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="is.md" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36b71153d2e38f7e2254541e0cc54b0b35bc9962</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\is.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">897eb91324090d41bbe6a554e242f0972d784e63</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dde301a60cfb051c3349c0c049f5d7bc2546b6c9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>is (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>is keyword (C#), is (C#)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>is (C# Reference)</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Checks if an object is compatible with a given type, or (starting with C# 7) tests an expression against a pattern.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Testing for type compatibility</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> keyword evaluates type compatibility at runtime.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It determines whether an object instance or the result of an expression can be converted to a specified type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>It has the syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an expression that evaluates to an instance of some type, and <bpt id="p2">*</bpt>type<ept id="p2">*</ept> is the name of the type to which the result of <bpt id="p3">*</bpt>expr<ept id="p3">*</ept> is to be converted.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> statement is <ph id="ph2">`true`</ph> if <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is non-null and the object that results from evaluating the expression can be converted to <bpt id="p2">*</bpt>type<ept id="p2">*</ept>; otherwise, it returns <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, the following code determines if <ph id="ph1">`obj`</ph> can be cast to an instance of the <ph id="ph2">`Person`</ph> type:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> statement is true if:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of the same type as <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of a type that derives from <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In other words, the result of <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> can be upcast to an instance of <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> has a compile-time type that is a base class of <bpt id="p2">*</bpt>type<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>expr<ept id="p3">*</ept> has a runtime type that is <bpt id="p4">*</bpt>type<ept id="p4">*</ept> or is derived from <bpt id="p5">*</bpt>type<ept id="p5">*</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>compile-time type<ept id="p1">*</ept> of a variable is the variable's type as defined in its declaration.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>runtime type<ept id="p1">*</ept> of a variable is the type of the instance that is assigned to that variable.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of a type that implements the <bpt id="p2">*</bpt>type<ept id="p2">*</ept> interface.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows that the <ph id="ph1">`is`</ph> expression evaluates to <ph id="ph2">`true`</ph> for each of these conversions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> keyword generates a compile-time warning if the expression is known to always be either <ph id="ph2">`true`</ph> or <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It only considers reference conversions, boxing conversions, and unboxing conversions; it does not consider user-defined conversions or conversions defined by a type's <bpt id="p1">[</bpt>implicit<ept id="p1">](implicit.md)</ept> and <bpt id="p2">[</bpt>explicit<ept id="p2">](explicit.md)</ept> operators.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example generates warnings because the result of the conversion is known at compile-time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`is`</ph> expression for conversions from <ph id="ph2">`int`</ph> to <ph id="ph3">`long`</ph> and <ph id="ph4">`double`</ph> return false, since these conversions are handled by the <bpt id="p1">[</bpt>implicit<ept id="p1">](implicit.md)</ept> operator.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`expr`</ph> can be any expression that returns a value, with the exception of anonymous methods and lambda expressions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example uses  <ph id="ph1">`is`</ph> to evaluate the return value of a method call.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, you can use pattern matching with the <bpt id="p1">[</bpt>type pattern<ept id="p1">](#type)</ept> to write more concise code that uses the <ph id="ph1">`is`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Pattern matching with <ph id="ph1">`is`</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, the <ph id="ph1">`is`</ph> and <bpt id="p1">[</bpt>switch<ept id="p1">](../../../csharp/language-reference/keywords/switch.md)</ept> statements support pattern matching.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> keyword supports the following patterns:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Type pattern<ept id="p1">](#type)</ept>,  which tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constant pattern<ept id="p1">](#constant)</ept>, which tests whether an expression evaluates to a specified constant value.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>var pattern<ept id="p1">](#var)</ept>, a match that always succeeds and binds the value of an expression to a new local variable.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="type" /&gt;</ph> Type pattern <ph id="ph2">&lt;/a&gt;</ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When using the type pattern to perform pattern matching, <ph id="ph1">`is`</ph> tests whether an expression can be converted to a specified type and, if it can be, casts it to a variable of that type.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It is a straightforward extension of the <ph id="ph1">`is`</ph> statement that enables concise type evaluation and conversion.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The general form of the <ph id="ph1">`is`</ph> type pattern is:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an expression that evaluates to an instance of some type, <bpt id="p2">*</bpt>type<ept id="p2">*</ept> is the name of the type to which the result of <bpt id="p3">*</bpt>expr<ept id="p3">*</ept> is to be converted, and <bpt id="p4">*</bpt>varname<ept id="p4">*</ept> is the object to which the result of <bpt id="p5">*</bpt>expr<ept id="p5">*</ept> is converted if the <ph id="ph1">`is`</ph> test is <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> expression is <ph id="ph2">`true`</ph> if any of the following is true:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of the same type as <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of a type that derives from <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In other words, the result of <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> can be upcast to an instance of <bpt id="p2">*</bpt>type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> has a compile-time type that is a base class of <bpt id="p2">*</bpt>type<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>expr<ept id="p3">*</ept> has a runtime type that is <bpt id="p4">*</bpt>type<ept id="p4">*</ept> or is derived from <bpt id="p5">*</bpt>type<ept id="p5">*</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>compile-time type<ept id="p1">*</ept> of a variable is the variable's type as defined in its declaration.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>runtime type<ept id="p1">*</ept> of a variable is the type of the instance that is assigned to that variable.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an instance of a type that implements the <bpt id="p2">*</bpt>type<ept id="p2">*</ept> interface.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>exp<ept id="p1">*</ept> is <ph id="ph1">`true`</ph> and <ph id="ph2">`is`</ph> is used with an <ph id="ph3">`if`</ph> statement, <bpt id="p2">*</bpt>varname<ept id="p2">*</ept> is assigned and has local scope within the <ph id="ph4">`if`</ph> statement only.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`is`</ph> type pattern to provide the implementation of a type's <ph id="ph2">&lt;xref:System.IComparable.CompareTo(System.Object)?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Without pattern matching, this code might be written as follows.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The use of type pattern matching produces more compact, readable code by eliminating the need to test whether the result of a conversion is a <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`is`</ph> type pattern also produces more compact code when determining the type of a value type.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`is`</ph> type pattern to determine whether an object is a <ph id="ph2">`Person`</ph> or a <ph id="ph3">`Dog`</ph> instance before displaying the value of an appropriate property.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The equivalent code without pattern matching requires a separate assignment that includes an explicit cast.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="constant" /&gt;</ph> Constant pattern</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When performing pattern matching with the constant pattern, <ph id="ph1">`is`</ph> tests whether an expression equals a specified constant.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In C# 6 and earlier versions, the constant pattern is supported by the <bpt id="p1">[</bpt>switch<ept id="p1">](switch.md)</ept> statement.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Starting with C# 7, it is supported by the <ph id="ph1">`is`</ph> statement as well.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Its syntax is:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>where <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is the expression to evaluate, and <bpt id="p2">*</bpt>constant<ept id="p2">*</ept> is the value to test for.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>constant<ept id="p1">*</ept> can be any of the following constant expressions:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A literal value.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The name of a declared <ph id="ph1">`const`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An enumeration constant.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The constant expression is evaluated as follows:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> and <bpt id="p2">*</bpt>constant<ept id="p2">*</ept> are integral types, the C# equality operator determines whether the expression returns <ph id="ph1">`true`</ph> (that is, whether <ph id="ph2">`expr == constant`</ph>).</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Otherwise, the value of the expression is determined by a call to the static <bpt id="p1">[</bpt>Object.Equals(expr, constant)<ept id="p1">](xref:System.Object.Equals(System.Object,System.Object))</ept> method.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The following example combines the type and constant patterns to test whether an object is a <ph id="ph1">`Dice`</ph> instance and, if it is, to determine whether the value of a dice roll is 6.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="var" /&gt;</ph> var pattern <ph id="ph2">&lt;/a&gt;</ph></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A pattern match with the var pattern always succeeds.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Its syntax is</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>where the value of <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is always assigned to a local variable named <bpt id="p2">*</bpt>varname<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>varname<ept id="p1">*</ept> is a static variable of the same type as <bpt id="p2">*</bpt>expr<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The following example uses the var pattern to assign an expression to a variable named <ph id="ph1">`obj`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It then displays the value and the type of <ph id="ph1">`obj`</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Note that if <bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is <ph id="ph1">`null`</ph>, the <ph id="ph2">`is`</ph> expression still is true and assigns <ph id="ph3">`null`</ph> to <bpt id="p2">*</bpt>varname<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>typeof<ept id="p1">](../../../csharp/language-reference/keywords/typeof.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>as<ept id="p1">](../../../csharp/language-reference/keywords/as.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Operator Keywords<ept id="p1">](../../../csharp/language-reference/keywords/operator-keywords.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>