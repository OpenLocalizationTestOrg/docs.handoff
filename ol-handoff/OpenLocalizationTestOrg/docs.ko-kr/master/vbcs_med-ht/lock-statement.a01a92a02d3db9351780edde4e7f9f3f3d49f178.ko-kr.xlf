<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ko-kr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-ffc129d" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae705e7df4515cd0c7481f64fa63b2e844a7d564</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\language-reference\keywords\lock-statement.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f508301cb6d3e0974fe37955d386e3e45ce6dea4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b295bd13f476b348d181117d4462763bcf6b45a6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>lock Statement (C# Reference) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>lock Statement (C# Reference)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object, executing a statement, and then releasing the lock.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following example includes a <ph id="ph1">`lock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Thread Synchronization<ept id="p1">](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> keyword ensures that one thread does not enter a critical section of code while another thread is in the critical section.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If another thread tries to enter a locked code, it will wait, block, until the object is released.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The section <bpt id="p1">[</bpt>Threading<ept id="p1">](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c)</ept> discusses threading.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`lock`</ph> keyword calls <ph id="ph2">&lt;xref:System.Threading.Monitor.Enter%2A&gt;</ph> at the start of the block and <ph id="ph3">&lt;xref:System.Threading.Monitor.Exit%2A&gt;</ph> at the end of the block.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadInterruptedException&gt;</ph> is thrown if <ph id="ph2">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph> interrupts a thread that is waiting to enter a <ph id="ph3">`lock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In general, avoid locking on a <ph id="ph1">`public`</ph> type, or instances beyond your code's control.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The common constructs <ph id="ph1">`lock (this)`</ph>, <ph id="ph2">`lock (typeof (MyType))`</ph>, and <ph id="ph3">`lock ("myLock")`</ph> violate this guideline:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`lock (this)`</ph> is a problem if the instance can be accessed publicly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`lock (typeof (MyType))`</ph> is a problem if <ph id="ph2">`MyType`</ph> is publicly accessible.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`lock("myLock")`</ph> is a problem because any other code in the process using the same string, will share the same lock.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Best practice is to define a <ph id="ph1">`private`</ph> object to lock on, or a <ph id="ph2">`private static`</ph> object variable to protect data common to all instances.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can't use the <bpt id="p1">[</bpt>await<ept id="p1">](../../../csharp/language-reference/keywords/await.md)</ept> keyword in the body of a <ph id="ph1">`lock`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following sample shows a simple use of threads without locking in C#.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsFixedLock#5<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following sample uses threads and <ph id="ph1">`lock`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As long as the <ph id="ph1">`lock`</ph> statement is present, the statement block is a critical section and <ph id="ph2">`balance`</ph> will never become a negative number.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csrefKeywordsFixedLock#6<ept id="p2">](../../../csharp/language-reference/keywords/codesnippet/CSharp/lock-statement_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>C# Language Specification</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Reflection.MethodImplAttributes&gt;</ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Threading<ept id="p1">](http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Keywords<ept id="p1">](../../../csharp/language-reference/keywords/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Statement Keywords<ept id="p1">](../../../csharp/language-reference/keywords/statement-keywords.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">@System.Threading.Monitor</ph></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Interlocked Operations<ept id="p1">](../../../standard/threading/interlocked-operations.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>AutoResetEvent<ept id="p1">](../../../standard/threading/autoresetevent.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Thread Synchronization<ept id="p1">](http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>