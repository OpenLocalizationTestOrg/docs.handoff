<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">86aee6318eb552490c99300256f1f4191a42e385</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\xaml-services\x-typearguments-directive.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e337e4ae5624e1b684750f0b7e0b6208eaa5e65</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">65dc4bc8377701f2413f81db62256650492d3555</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>x:TypeArguments Directive | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>x:TypeArguments Directive</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Passes constraining type arguments of a generic to the constructor of the generic type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>XAML Attribute Usage</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>XAML Values</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An object element declaration of a XAML type, which is backed by a CLR generic type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`object`</ph> refers to a XAML type that is not from the default XAML namespace, <ph id="ph2">`object`</ph> requires a prefix to indicate the XAML namespace where <ph id="ph3">`object`</ph> exists.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A string that declares one or more XAML type names as strings, which supplies the type arguments for the CLR generic type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>See Remarks for additional syntax notes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In most cases, the XAML types that are used as an information item in a <ph id="ph1">`typeString`</ph> string are prefixed.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Typical types of CLR generic constraints (for example, <ph id="ph1">&lt;xref:System.Int32&gt;</ph> and <ph id="ph2">&lt;xref:System.String&gt;</ph>) come from CLR base class libraries.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Those libraries are not mapped to typical framework-specific default XAML namespaces, and therefore, require a prefix mapping for XAML usage.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can specify more than one XAML type name by using a comma delimiter.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the generic constraints themselves use generic types, the nested constraint type arguments can be contained by parentheses ().</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that this definition of <ph id="ph1">`x:TypeArguments`</ph> is specific to .NET Framework XAML Services and using CLR backing.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A language-level definition can be found in <bpt id="p1">[</bpt><ph id="ph1">\[</ph>MS-XAML<ph id="ph2">\]</ph> Section 5.3.11<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=114525)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For these examples, assume that the following XAML namespace definitions are declared:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>List<ph id="ph1">\&lt;</ph>String&gt;</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;scg:List x:TypeArguments="sys:String" ...&gt;`</ph> instantiates a new <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> with a <ph id="ph3">&lt;xref:System.String&gt;</ph> type argument.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Dictionary<ph id="ph1">\&lt;</ph>String,String&gt;</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;scg:Dictionary x:TypeArguments="sys:String,sys:String" ...&gt;`</ph> instantiates a new <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> with two <ph id="ph3">&lt;xref:System.String&gt;</ph> type arguments.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Queue&lt;KeyValuePair<ph id="ph1">\&lt;</ph>String,String&gt;&gt;</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;scg:Queue x:TypeArguments="scg:KeyValuePair(sys:String,sys:String)" ...&gt;`</ph> instantiates a new <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> that has a constraint of <ph id="ph3">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> with the inner constraint type arguments <ph id="ph4">&lt;xref:System.String&gt;</ph> and <ph id="ph5">&lt;xref:System.String&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>XAML 2006 and WPF Generic XAML Usages</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For XAML 2006 usage, and XAML that is used for WPF applications, the following restrictions exist for <ph id="ph1">`x:TypeArguments`</ph> and generic type usages from XAML in general:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Only the root element of a XAML file can support a generic XAML usage that references a generic type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The root element must map to a generic type with at least one type argument.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>An example is <ph id="ph1">&lt;xref:System.Windows.Navigation.PageFunction%601&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The page functions are the primary scenario for XAML generic usage support in WPF.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The root element XAML object element for the generic must also declare a partial class using <ph id="ph1">`x:Class`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is true even if defining a WPF build action.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`x:TypeArguments`</ph> cannot reference nested generic constraints.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>XAML 2009 or XAML 2006 with No WPF 3.0 or WPF 3.5 Dependency</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In .NET Framework XAML Services for either XAML 2006 or XAML 2009, the WPF-related restrictions on generic XAML usage are relaxed.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can instantiate a generic object element at any position in XAML markup that the backing type system and object model can support.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you use XAML 2009 instead of mapping the CLR base types to obtain XAML types for common language primitives, you can use <bpt id="p1">[</bpt>Built-in Types for Common XAML Language Primitives<ept id="p1">](../../../docs/framework/xaml-services/built-in-types-for-common-xaml-language-primitives.md)</ept> as information items in a <ph id="ph1">`typeString`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, you could declare the following (prefix mappings not shown, but x is the XAML language XAML namespace for XAML 2009):</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In WPF and when targeting <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, you can use XAML 2009 features together with <ph id="ph2">`x:TypeArguments`</ph> but only for loose XAML (XAML that is not markup-compiled).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Markup-compiled XAML for WPF and the BAML form of XAML do not currently support the XAML 2009 keywords and features.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you need to markup compile the XAML, you must operate under the restrictions noted in the "XAML 2006 and WPF Generic XAML Usages" section.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Class Directive<ept id="p1">](../../../docs/framework/xaml-services/x-class-directive.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>x:Type Markup Extension<ept id="p1">](../../../docs/framework/xaml-services/x-type-markup-extension.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Built-in Types for Common XAML Language Primitives<ept id="p1">](../../../docs/framework/xaml-services/built-in-types-for-common-xaml-language-primitives.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Generics in XAML<ept id="p1">](../../../docs/framework/xaml-services/generics-in-xaml.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>