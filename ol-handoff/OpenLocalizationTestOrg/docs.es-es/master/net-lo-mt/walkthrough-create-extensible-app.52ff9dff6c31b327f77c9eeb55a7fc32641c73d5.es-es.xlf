<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="walkthrough-create-extensible-app.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b2a8af3" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4642437e9e113040185ff8af4c41647c83bab81</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\add-ins\walkthrough-create-extensible-app.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dea73a189f0928c5065e96ba202999c1673d2662</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">efcf11ede19c273e7014c0cbd242c89b656d3357</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Walkthrough: Creating an Extensible Application | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating an Extensible Application</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This walkthrough describes how to create a pipeline for an add-in that performs simple calculator functions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It does not demonstrate a real-world scenario; rather, it demonstrates the basic functionality of a pipeline and how an add-in can provide services for a host.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This walkthrough describes the following tasks:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Creating a Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating the pipeline directory structure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creating the contract and views.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating the add-in-side adapter.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Creating the host-side adapter.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creating the host.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creating the add-in.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Deploying the pipeline.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Running the host application.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This pipeline passes only serializable types (<ph id="ph1">&lt;xref:System.Double&gt;</ph> and <ph id="ph2">&lt;xref:System.String&gt;</ph>), between the host and the add-in.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For an example that shows how to pass collections of complex data types, see <bpt id="p1">[</bpt>Walkthrough: Passing Collections Between Hosts and Add-Ins<ept id="p1">](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5)</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The contract for this pipeline defines an object model of four arithmetic operations: add, subtract, multiply, and divide.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The host provides the add-in with an equation to calculate, such as 2 + 2, and the add-in returns the result to the host.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Version 2 of the calculator add-in provides more calculating possibilities and demonstrates versioning.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is described in <bpt id="p1">[</bpt>Walkthrough: Enabling Backward Compatibility as Your Host Changes<ept id="p1">](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can find additional sample code, and customer technology previews of tools for building add-in pipelines, at the <bpt id="p1">[</bpt>Managed Extensibility and Add-In Framework site on CodePlex<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=121190)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You need the following to complete this walkthrough:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creating a Visual Studio Solution</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use a solution in <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> to contain the projects of your pipeline segments.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To create the pipeline solution</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph>, create a new project named <ph id="ph2">`Calc1Contract`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Base it on the <bpt id="p1">**</bpt>Class Library<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Name the solution <ph id="ph1">`CalculatorV1`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creating the Pipeline Directory Structure</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The add-in model requires the pipeline segment assemblies to be placed in a specified directory structure.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For more information about the pipeline structure, see <bpt id="p1">[</bpt>Pipeline Development Requirements<ept id="p1">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To create the pipeline directory structure</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Create an application folder anywhere on your computer.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In that folder, create the following structure:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It is not necessary to put the pipeline folder structure in your application folder; it is done here only for convenience.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>At the appropriate step, the walkthrough explains how to change the code if the pipeline folder structure is in a different location.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>See the discussion of pipeline directory requirements in <bpt id="p1">[</bpt>Pipeline Development Requirements<ept id="p1">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CalcV2`</ph> folder is not used in this walkthrough; it is a placeholder for <bpt id="p1">[</bpt>Walkthrough: Enabling Backward Compatibility as Your Host Changes<ept id="p1">](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Creating the Contract and Views</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The contract segment for this pipeline defines the <ph id="ph1">`ICalc1Contract`</ph> interface, which defines four methods: <ph id="ph2">`add`</ph>, <ph id="ph3">`subtract`</ph>, <ph id="ph4">`multiply`</ph>, and <ph id="ph5">`divide`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To create the contract</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the Visual Studio solution named <ph id="ph1">`CalculatorV1`</ph>, open the <ph id="ph2">`Calc1Contract`</ph> project.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, add references to the following assemblies to the <ph id="ph1">`Calc1Contract`</ph> project:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>System.AddIn.Contract.dll</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>System.AddIn.dll</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, exclude the default class that is added to new <bpt id="p2">**</bpt>Class Library<ept id="p2">**</ept> projects.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, add a new item to the project, using the <bpt id="p2">**</bpt>Interface<ept id="p2">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, name the interface <ph id="ph1">`ICalc1Contract`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the interface file, add namespace references to <ph id="ph1">&lt;xref:System.AddIn.Contract&gt;</ph> and <ph id="ph2">&lt;xref:System.AddIn.Pipeline&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use the following code to complete this contract segment.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Note that this interface must have the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInContractAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AddInP1Contract#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Contract/cs/ICalc1Contract.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>AddInP1Contract#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Contract/vb/ICalc1Contract.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Optionally, build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The solution cannot be run until the final procedure, but building it after each procedure ensures that each project is correct.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Because the add-in view and the host view of the add-in usually have the same code, especially in the first version of an add-in, you can easily create the views at the same time.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>They differ by only one factor: the add-in view requires the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInBaseAttribute&gt;</ph> attribute, while the host view of the add-in does not require any attributes.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To create the add-in view</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Add a new project named <ph id="ph1">`Calc1AddInView`</ph> to the <ph id="ph2">`CalculatorV1`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Base it on the <bpt id="p1">**</bpt>Class Library<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, add a reference to System.AddIn.dll to the <ph id="ph1">`Calc1AddInView`</ph> project.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, exclude the default class that is added to new <bpt id="p2">**</bpt>Class Library<ept id="p2">**</ept> projects, and add a new item to the project, using the <bpt id="p3">**</bpt>Interface<ept id="p3">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, name the interface <ph id="ph1">`ICalculator`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the interface file, add a namespace reference to <ph id="ph1">&lt;xref:System.AddIn.Pipeline&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Use the following code to complete this add-in view.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Note that this interface must have the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInBaseAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AddInP1AddInViews#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInViews/cs/Calc1AddInView.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>AddInP1AddInViews#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInViews/vb/Calc1AddInView.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Optionally, build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To create the host view of the add-in</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Add a new project named <ph id="ph1">`Calc1HVA`</ph> to the <ph id="ph2">`CalculatorV1`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Base it on the <bpt id="p1">**</bpt>Class Library<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, exclude the default class that is added to new <bpt id="p2">**</bpt>Class Library<ept id="p2">**</ept> projects, and add a new item to the project, using the <bpt id="p3">**</bpt>Interface<ept id="p3">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, name the interface <ph id="ph1">`ICalculator`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In the interface file, use the following code to complete the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AddInP1HVA#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HVA/cs/calc1hva.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>AddInP1HVA#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HVA/vb/Calc1HVA.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Optionally, build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Creating the Add-in-side Adapter</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This add-in-side adapter consists of one view-to-contract adapter.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This pipeline segment converts the types from the add-in view to the contract.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this pipeline, the add-in provides a service to the host, and the types flow from the add-in to the host.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Because no types flow from the host to the add-in, you do not have to include a contract-to-view adapter on the add-in side of this pipeline.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To create the add-in-side adapter</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Add a new project named <ph id="ph1">`Calc1AddInSideAdapter`</ph> to the <ph id="ph2">`CalculatorV1`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Base it on the <bpt id="p1">**</bpt>Class Library<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, add references to the following assemblies to the <ph id="ph1">`Calc1AddInSideAdapter`</ph> project:</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>System.AddIn.dll</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>System.AddIn.Contract.dll</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Add project references to the projects for the adjacent pipeline segments:</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Select each project reference, and in <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> set <bpt id="p2">**</bpt>Copy Local<ept id="p2">**</ept> to <bpt id="p3">**</bpt>False<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In Visual Basic, use the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> tab of <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> to set <bpt id="p3">**</bpt>Copy Local<ept id="p3">**</ept> to <bpt id="p4">**</bpt>False<ept id="p4">**</ept> for the two project references.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Rename the project's default class <ph id="ph1">`CalculatorViewToContractAddInSideAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In the class file, add namespace references to <ph id="ph1">&lt;xref:System.AddIn.Pipeline&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In the class file, add namespace references for the adjacent segments: <ph id="ph1">`CalcAddInViews`</ph> and <ph id="ph2">`CalculatorContracts`</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>(In Visual Basic, these namespace references are <ph id="ph1">`Calc1AddInView.CalcAddInViews`</ph> and <ph id="ph2">`Calc1Contract.CalculatorContracts`</ph>, unless you have turned off the default namespaces in your Visual Basic projects.)</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.AddInAdapterAttribute&gt;</ph> attribute to the <ph id="ph2">`CalculatorViewToContractAddInSideAdapter`</ph> class, to identify it as the add-in-side adapter.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Make the <ph id="ph1">`CalculatorViewToContractAddInSideAdapter`</ph> class inherit <ph id="ph2">&lt;xref:System.AddIn.Pipeline.ContractBase&gt;</ph>, which provides a default implementation of the <ph id="ph3">&lt;xref:System.AddIn.Contract.IContract&gt;</ph> interface, and implement the contract interface for the pipeline, <ph id="ph4">`ICalc1Contract`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Add a public constructor that accepts an <ph id="ph1">`ICalculator`</ph>, caches it in a private field, and calls the base class constructor.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To implement the members of <ph id="ph1">`ICalc1Contract`</ph>, simply call the corresponding members of the <ph id="ph2">`ICalculator`</ph> instance that is passed to the constructor, and return the results.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This adapts the view (<ph id="ph1">`ICalculator`</ph>) to the contract (<ph id="ph2">`ICalc1Contract`</ph>).</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The following code shows the completed add-in-side adapter.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AddInP1AddInSideAdapters#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInSideAdapters/cs/Calc1ViewToContractAddInSideAdapter.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>AddInP1AddInSideAdapters#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInSideAdapters/vb/Calc1ViewToContractAddInSideAdapter.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Optionally, build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Creating the Host-side Adapter</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This host-side adapter consists of one contract-to-view adapter.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>This segment adapts the contract to the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In this pipeline, the add-in provides a service to the host and the types flow from the add-in to the host.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Because no types flow from the host to the add-in, you do not have to include a view-to-contract adapter.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>To implement lifetime management, use a <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object to attach a lifetime token to the contract.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You must keep a reference to this handle in order for lifetime management to work.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>After the token is applied, no additional programming is required because the add-in system can dispose of objects when they are no longer being used and make them available for garbage collection.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Lifetime Management<ept id="p1">](http://msdn.microsoft.com/en-us/57a9c87e-394c-4fef-89f2-aa4223a2aeb5)</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To create the host-side adapter</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Add a new project named <ph id="ph1">`Calc1HostSideAdapter`</ph> to the <ph id="ph2">`CalculatorV1`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Base it on the <bpt id="p1">**</bpt>Class Library<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, add references to the following assemblies to the <ph id="ph1">`Calc1HostSideAdapter`</ph> project:</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>System.AddIn.dll</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>System.AddIn.Contract.dll</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Add project references to the projects for the adjacent segments:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Select each project reference, and in <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> set <bpt id="p2">**</bpt>Copy Local<ept id="p2">**</ept> to <bpt id="p3">**</bpt>False<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>In Visual Basic, use the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> tab of <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> to set <bpt id="p3">**</bpt>Copy Local<ept id="p3">**</ept> to <bpt id="p4">**</bpt>False<ept id="p4">**</ept> for the two project references.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Rename the project's default class <ph id="ph1">`CalculatorContractToViewHostSideAdapter`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In the class file, add namespace references to <ph id="ph1">&lt;xref:System.AddIn.Pipeline&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In the class file, add namespace references for the adjacent segments: <ph id="ph1">`CalcHVAs`</ph> and <ph id="ph2">`CalculatorContracts`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>(In Visual Basic, these namespace references are <ph id="ph1">`Calc1HVA.CalcHVAs`</ph> and <ph id="ph2">`Calc1Contract.CalculatorContracts`</ph>, unless you have turned off the default namespaces in your Visual Basic projects.)</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.HostAdapterAttribute&gt;</ph> attribute to the <ph id="ph2">`CalculatorContractToViewHostSideAdapter`</ph> class, to identify it as the host-side adapter segment.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Make the <ph id="ph1">`CalculatorContractToViewHostSideAdapter`</ph> class implement the interface that represents the host view of the add-in: <ph id="ph2">`Calc1HVAs.ICalculator`</ph> (<ph id="ph3">`Calc1HVA.CalcHVAs.ICalculator`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Add a public constructor that accepts the pipeline contract type, <ph id="ph1">`ICalc1Contract`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The constructor must cache the reference to the contract.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>It must also create and cache a new <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> for the contract, to manage the lifetime of the add-in.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> is critical to lifetime management.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If you fail to keep a reference to the <ph id="ph1">&lt;xref:System.AddIn.Pipeline.ContractHandle&gt;</ph> object, garbage collection will reclaim it, and the pipeline will shut down when your program does not expect it.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>This can lead to errors that are difficult to diagnose, such as <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Shutdown is a normal stage in the life of a pipeline, so there is no way for the lifetime management code to detect that this condition is an error.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>To implement the members of <ph id="ph1">`ICalculator`</ph>, simply call the corresponding members of the <ph id="ph2">`ICalc1Contract`</ph> instance that is passed to the constructor, and return the results.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This adapts the contract (<ph id="ph1">`ICalc1Contract`</ph>) to the view (<ph id="ph2">`ICalculator`</ph>).</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The following code shows the completed host-side adapter.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AddInP1HostSideAdapters#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1HostSideAdapters/cs/Calc1ContractToViewHostSideAdapter.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>AddInP1HostSideAdapters#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1HostSideAdapters/vb/Calc1ContractToViewHostSideAdapter.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Optionally, build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Creating the Host</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>A host application interacts with the add-in through the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>It uses add-in discovery and activation methods provided by the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInStore&gt;</ph> and <ph id="ph2">&lt;xref:System.AddIn.Hosting.AddInToken&gt;</ph> classes to do the following:</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Update the cache of pipeline and add-in information.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Find add-ins of the host view type, <ph id="ph1">`ICalculator`</ph>, under the specified pipeline root directory.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Prompt the user to specify which add-in to use.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Activate the selected add-in in a new application domain with a specified security trust level.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Run the custom <ph id="ph1">`RunCalculator`</ph> method, which calls the add-in's methods as specified by the host view of the add-in.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>To create the host</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Add a new project named <ph id="ph1">`Calc1Host`</ph> to the <ph id="ph2">`CalculatorV1`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Base it on the <bpt id="p1">**</bpt>Console Application<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, add a reference to the System.AddIn.dll assembly to the <ph id="ph1">`Calc1Host`</ph> project.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Add a project reference to the <ph id="ph1">`Calc1HVA`</ph> project.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Select the project reference, and in <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept> set <bpt id="p2">**</bpt>Copy Local<ept id="p2">**</ept> to <bpt id="p3">**</bpt>False<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>In Visual Basic, use the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> tab of <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> to set <bpt id="p3">**</bpt>Copy Local<ept id="p3">**</ept> to <bpt id="p4">**</bpt>False<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Rename the class file (module in Visual Basic) <ph id="ph1">`MathHost1`</ph>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>In Visual Basic, use the <bpt id="p1">**</bpt>Application<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> dialog box to set <bpt id="p3">**</bpt>Startup object<ept id="p3">**</ept> to <bpt id="p4">**</bpt>Sub Main<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>In the class or module file, add a namespace reference to <ph id="ph1">&lt;xref:System.AddIn.Hosting&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>In the class or module file, add a namespace reference for the host view of the add-in: <ph id="ph1">`CalcHVAs`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>(In Visual Basic, this namespace reference is <ph id="ph1">`Calc1HVA.CalcHVAs`</ph>, unless you have turned off the default namespaces in your Visual Basic projects.)</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select the solution and from the <bpt id="p2">**</bpt>Project<ept id="p2">**</ept> menu choose <bpt id="p3">**</bpt>Properties<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution Property Pages<ept id="p1">**</ept> dialog box, set the <bpt id="p2">**</bpt>Single Startup Project<ept id="p2">**</ept> to be this host application project.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>In the class or module file, use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInStore.Update%2A?displayProperty=fullName&gt;</ph> method to update the cache.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.AddIn.Hosting.AddInStore.FindAddIn%2A?displayProperty=fullName&gt;</ph> method to get a collection of tokens, and use the <ph id="ph2">&lt;xref:System.AddIn.Hosting.AddInToken.Activate%2A?displayProperty=fullName&gt;</ph> method to activate an add-in.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The following code shows the completed host application.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AddInP1Host#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1Host/cs/MathHost1.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>AddInP1Host#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1Host/vb/MathHost1.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>This code assumes that the pipeline folder structure is located in the application folder.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you located it elsewhere, change the line of code that sets the <ph id="ph1">`addInRoot`</ph> variable, so that the variable contains the path to your pipeline directory structure.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The code uses a <ph id="ph1">`ChooseCalculator`</ph> method to list the tokens and to prompt the user to choose an add-in.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RunCalculator`</ph> method prompts the user for simple math expressions, parses the expressions using the <ph id="ph2">`Parser`</ph> class, and displays the results returned by the add-in.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Optionally, build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Creating the Add-In</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>An add-in implements the methods specified by the add-in view.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This add-in implements the <ph id="ph1">`Add`</ph>, <ph id="ph2">`Subtract`</ph>, <ph id="ph3">`Multiply`</ph>, and <ph id="ph4">`Divide`</ph> operations and returns the results to the host.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>To create the add-in</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Add a new project named <ph id="ph1">`AddInCalcV1`</ph> to the <ph id="ph2">`CalculatorV1`</ph> solution.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Base it on the <bpt id="p1">**</bpt>Class Library<ept id="p1">**</ept> template.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, add a reference to the System.AddIn.dll assembly to the project.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Add a project reference to the <ph id="ph1">`Calc1AddInView`</ph> project.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Select the project reference, and in <bpt id="p1">**</bpt>Properties<ept id="p1">**</ept>, set <bpt id="p2">**</bpt>Copy Local<ept id="p2">**</ept> to <bpt id="p3">**</bpt>False<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In Visual Basic, use the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> tab of <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> to set <bpt id="p3">**</bpt>Copy Local<ept id="p3">**</ept> to <bpt id="p4">**</bpt>False<ept id="p4">**</ept> for the project reference.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Rename the class <ph id="ph1">`AddInCalcV1`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>In the class file, add a namespace reference to <ph id="ph1">&lt;xref:System.AddIn&gt;</ph> and the add-in view segment: <ph id="ph2">`CalcAddInViews`</ph> (<ph id="ph3">`Calc1AddInView.CalcAddInViews`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">&lt;xref:System.AddIn.AddInAttribute&gt;</ph> attribute to the <ph id="ph2">`AddInCalcV1`</ph> class, to identify the class as an add-in.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Make the <ph id="ph1">`AddInCalcV1`</ph> class implement the interface that represents the add-in view: <ph id="ph2">`CalcAddInViews.ICalculator`</ph> (<ph id="ph3">`Calc1AddInView.CalcAddInViews.ICalculator`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Implement the members of <ph id="ph1">`ICalculator`</ph> by returning the results of the appropriate calculations.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The following code shows the completed add-in.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>AddInP1AddInCalcV1#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR/AddInP1AddInCalcV1/cs/AddInCalcV1.cs#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>AddInP1AddInCalcV1#1<ept id="p2">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/AddInP1AddInCalcV1/vb/AddInCalcV1.vb#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Optionally, build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Deploying the Pipeline</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>You are now ready to build and deploy the add-in segments to the required pipeline directory structure.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To deploy the segments to the pipeline</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>For each project in the solution, use the <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> tab of <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> (the <bpt id="p3">**</bpt>Compile<ept id="p3">**</ept> tab in Visual Basic) to set the value of the <bpt id="p4">**</bpt>Output path<ept id="p4">**</ept> (the <bpt id="p5">**</bpt>Build output path<ept id="p5">**</ept> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>If you named your application folder <ph id="ph1">`MyApp`</ph>, for example, your projects would build into the following folders:</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Project</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Path</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>AddInCalcV1</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>MyApp\Pipeline\AddIns\CalcV1</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Calc1AddInSideAdapter</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>MyApp\Pipeline\AddInSideAdapters</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Calc1AddInView</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>MyApp\Pipeline\AddInViews</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Calc1Contract</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>MyApp\Pipeline\Contracts</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Calc1Host</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>MyApp</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Calc1HostSideAdapter</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>MyApp\Pipeline\HostSideAdapters</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Calc1HVA</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>MyApp</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If you decided to put your pipeline folder structure in a location other than your application folder, you must modify the paths shown in the table accordingly.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>See the discussion of pipeline directory requirements in <bpt id="p1">[</bpt>Pipeline Development Requirements<ept id="p1">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Build the Visual Studio solution.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Check the application and pipeline directories to ensure that the assemblies were copied to the correct directories and that no extra copies of assemblies were installed in the wrong folders.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>If you did not change <bpt id="p1">**</bpt>Copy Local<ept id="p1">**</ept> to <bpt id="p2">**</bpt>False<ept id="p2">**</ept> for the <ph id="ph1">`Calc1AddInView`</ph> project reference in the <ph id="ph2">`AddInCalcV1`</ph> project, loader context problems will prevent the add-in from being located.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>For information about deploying to the pipeline, see <bpt id="p1">[</bpt>Pipeline Development Requirements<ept id="p1">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Running the Host Application</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>You are now ready to run the host and interact with the add-in.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>To run the host application</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>At the command prompt, go to the application directory and run the host application, <ph id="ph1">`Calc1Host.exe`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The host finds all available add-ins of its type and prompts you to select an add-in.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Enter <bpt id="p1">**</bpt>1<ept id="p1">**</ept> for the only available add-in.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Enter an equation for the calculator, such as <bpt id="p1">**</bpt>2 + 2<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>There must be spaces between the numbers and the operator.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">**</bpt>exit<ept id="p1">**</ept> and press the <bpt id="p2">**</bpt>Enter<ept id="p2">**</ept> key to close the application.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Enabling Backward Compatibility as Your Host Changes<ept id="p1">](http://msdn.microsoft.com/en-us/6fa15bb5-8f04-407d-bd7d-675dc043c848)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Walkthrough: Passing Collections Between Hosts and Add-Ins<ept id="p1">](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pipeline Development Requirements<ept id="p1">](http://msdn.microsoft.com/en-us/ef9fa986-e80b-43e1-868b-247f4c1d9da5)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Contracts, Views, and Adapters<ept id="p1">](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Pipeline Development<ept id="p1">](../../../docs/framework/add-ins/pipeline-development.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>