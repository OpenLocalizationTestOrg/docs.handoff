<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db906fb8ea4961207169c5b7d1c9f78e166fb0fa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\propertypath-xaml-syntax.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c879cd175c73f8bcbf03a89995ca849d93ea91a4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d5d3eef9d01ac4d9acb1ee892dffa13ee6d228ea</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>PropertyPath XAML Syntax | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>PropertyPath XAML Syntax</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> object supports a complex inline <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> syntax for setting various properties that take the <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph> type as their value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic documents the <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> syntax as applied to binding and animation syntaxes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Where PropertyPath Is Used</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> is a common object that is used in several <ph id="ph2">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> features.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Despite using the common <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> to convey property path information, the usages for each feature area where <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph> is used as a type vary.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Therefore, it is more practical to document the syntaxes on a per-feature basis.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Primarily, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> uses <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph> to describe object-model paths for traversing the properties of an object data source, and to describe the target path for targeted animations.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Some style and template properties such as <ph id="ph1">&lt;xref:System.Windows.Setter.Property%2A?displayProperty=fullName&gt;</ph> take a qualified property name that superficially resembles a <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>But this is not a true <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>; instead it is a qualified <bpt id="p1">*</bpt>owner.property<ept id="p1">*</ept> string format usage that is enabled by the WPF <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor in combination with the type converter for <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>PropertyPath for Objects in Data Binding</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Data binding is a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> feature whereby you can bind to the target value of any dependency property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, the source of such a data binding need not be a dependency property; it can be any property type that is recognized by the applicable data provider.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Property paths are particularly used for the <ph id="ph1">&lt;xref:System.Windows.Data.ObjectDataProvider&gt;</ph>, which is used for obtaining binding sources from <ph id="ph2">[!INCLUDE[TLA#tla_clr](../../../../includes/tlasharptla-clr-md.md)]</ph> objects and their properties.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Note that data binding to <ph id="ph1">[!INCLUDE[TLA#tla_xml](../../../../includes/tlasharptla-xml-md.md)]</ph> does not use <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph>, because it does not use <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> in the <ph id="ph4">&lt;xref:System.Windows.Data.Binding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Instead, you use <ph id="ph1">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> and specify valid XPath syntax into the <ph id="ph2">[!INCLUDE[TLA#tla_xmldom](../../../../includes/tlasharptla-xmldom-md.md)]</ph> of the data.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> is also specified as a string, but is not documented here; see <bpt id="p1">[</bpt>Bind to XML Data Using an XMLDataProvider and XPath Queries<ept id="p1">](../../../../docs/framework/wpf/data/how-to-bind-to-xml-data-using-an-xmldataprovider-and-xpath-queries.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A key to understanding property paths in data binding is that you can target the binding to an individual property value, or you can instead bind to target properties that take lists or collections.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you are binding collections, for instance binding a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> that will expand depending on how many data items are in the collection, then your property path should reference the collection object, not individual collection items.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The data binding engine will match the collection used as the data source to the type of the binding target automatically, resulting in behavior such as populating a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> with an items array.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Single Property on the Immediate Object as Data Context</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>propertyName<ept id="p1">*</ept> must resolve to be the name of a property that is in the current <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> usage.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If your binding updates the source, that property must be read/write and the source object must be mutable.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Single Indexer on the Immediate Object as Data Context</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`key`</ph> must be either the typed index to a dictionary or hash table, or the integer index of an array.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Also, the value of the key must be a type that is directly bindable to the property where it is applied.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For instance, a hash table that contains string keys and string values can be used this way to bind to Text for a <ph id="ph1">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Or, if the key points to a collection or subindex, you could use this syntax to bind to a target collection property.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Otherwise, you need to reference a specific property, through a syntax such as <ph id="ph1">`&lt;Binding Path="[``key``].``propertyName``" .../&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can specify the type of the index if necessary.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For details on this aspect of an indexed property path, see <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Multiple Property (Indirect Property Targeting)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`propertyName`</ph> must resolve to be the name of a property that is the current <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.DataContext%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The path properties <ph id="ph1">`propertyName`</ph> and <ph id="ph2">`propertyName2`</ph> can be any properties that exist in a relationship, where <ph id="ph3">`propertyName2`</ph> is a property that exists on the type that is the value of <ph id="ph4">`propertyName`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Single Property, Attached or Otherwise Type-Qualified</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The parentheses indicate that this property in a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> should be constructed using a partial qualification.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It can use an XML namespace to find the type with an appropriate mapping.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ownerType`</ph> searches types that a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor has access to, through the <ph id="ph3">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> declarations in each assembly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Most applications have the default XML namespace mapped to the <ph id="ph1">[!INCLUDE[TLA#tla_wpfxmlnsv1](../../../../includes/tlasharptla-wpfxmlnsv1-md.md)]</ph> namespace, so a prefix is usually only necessary for custom types or types otherwise outside that namespace.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`propertyName`</ph> must resolve to be the name of a property existing on the <ph id="ph2">`ownerType`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This syntax is generally used for one of the following cases:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The path is specified in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> that is in a style or template that does not have a specified Target Type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A qualified usage is generally not valid for cases other than this, because in non-style, non-template cases, the property exists on an instance, not a type.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The property is an attached property.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You are binding to a static property.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For use as storyboard target, the property specified as <ph id="ph1">`propertyName`</ph> must be a <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Source Traversal (Binding to Hierarchies of Collections)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The / in this syntax is used to navigate within a hierarchical data source object, and multiple steps into the hierarchy with successive / characters are supported.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The source traversal accounts for the current record pointer position, which is determined by synchronizing the data with the UI of its view.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For details on binding with hierarchical data source objects, and the concept of current record pointer in data binding, see <bpt id="p1">[</bpt>Use the Master-Detail Pattern with Hierarchical Data<ept id="p1">](../../../../docs/framework/wpf/data/how-to-use-the-master-detail-pattern-with-hierarchical-data.md)</ept> or <bpt id="p2">[</bpt>Data Binding Overview<ept id="p2">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Superficially, this syntax resembles <ph id="ph1">[!INCLUDE[TLA2#tla_xpath](../../../../includes/tla2sharptla-xpath-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A true <ph id="ph1">[!INCLUDE[TLA2#tla_xpath](../../../../includes/tla2sharptla-xpath-md.md)]</ph> expression for binding to an <ph id="ph2">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data source is not used as a <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> value and should instead be used for the mutually exclusive <ph id="ph4">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Collection Views</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To reference a named collection view, prefix the collection view name with the hash character (<ph id="ph1">`#`</ph>).</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Current Record Pointer</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To reference the current record pointer for a collection view or master detail data binding scenario, start the path string with a forward slash (<ph id="ph1">`/`</ph>).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Any path past the forward slash is traversed starting from the current record pointer.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Multiple Indexers</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If a given object supports multiple indexers, those indexers can be specified in order, similar to an array referencing syntax.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The object in question can be either the current context or the value of a property that contains a multiple index object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>By default, the indexer values are typed by using the characteristics of the underlying object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can specify the type of the index if necessary.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For details on typing the indexers, see <ph id="ph1">&lt;xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Mixing Syntaxes</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Each of the syntaxes shown above can be interspersed.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>For instance, the following is an example that creates a property path to the color at a particular x,y of a <ph id="ph1">`ColorGrid`</ph> property that contains a pixel grid array of <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> objects:</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Escapes for Property Path Strings</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>For certain business objects, you might encounter a case where the property path string requires an escape sequence in order to parse correctly.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The need to escape should be rare, because many of these characters have similar naming-interaction issues in languages that would typically be used to define the business object.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Inside indexers ([ ]), the caret character (^) escapes the next character.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You must escape (using XML entities) certain characters that are special to the XML language definition.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`&amp;`</ph> to escape the character "&amp;".</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`&gt;`</ph> to escape the end tag "&gt;".</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You must escape (using backslash <ph id="ph1">`\`</ph>) characters that are special to the WPF XAML parser behavior for processing a markup extension.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Backslash (<ph id="ph1">`\`</ph>) is the escape character itself.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The equal sign (<ph id="ph1">`=`</ph>) separates property name from property value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Comma (<ph id="ph1">`,`</ph>) separates properties.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The right curly brace (<ph id="ph1">`}`</ph>) is the end of a markup extension.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Technically, these escapes work for a storyboard property path also, but you are usually traversing object models for existing WPF objects, and escaping should be unnecessary.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>PropertyPath for Animation Targets</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The target property of an animation must be a dependency property that takes either a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> or a primitive type.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>However, the targeted property on a type and the eventual animated property can exist on different objects.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For animations, a property path is used to define the connection between the named animation target object's property and the intended target animation property, by traversing object-property relationships in the property values.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>General Object-Property Considerations for Animations</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information on animation concepts in general, see <bpt id="p1">[</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept> and <bpt id="p2">[</bpt>Animation Overview<ept id="p2">](../../../../docs/framework/wpf/graphics-multimedia/animation-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The value type or the property being animated must be either a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> type or a primitive.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The property that starts the path must resolve to be the name of a dependency property that exists on the specified <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In order to support cloning for animating a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> that is already frozen, the object specified by <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> must be a <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> derived class.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Single Property on the Target Object</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`propertyName`</ph> must resolve to be the name of a dependency property that exists on the specified <ph id="ph2">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Indirect Property Targeting</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`propertyName`</ph> must be a property that is either a <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph> value type or a primitive, which exists on the specified <ph id="ph3">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`propertyName2`</ph> must be the name of a dependency property that exists on the object that is the value of <ph id="ph2">`propertyName`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In other words, <ph id="ph1">`propertyName2`</ph> must exist as a dependency property on the type that is the <ph id="ph2">`propertyName`</ph> <ph id="ph3">&lt;xref:System.Windows.DependencyProperty.PropertyType%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Indirect targeting of animations is necessary because of applied styles and templates.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In order to target an animation, you need a <ph id="ph1">&lt;xref:System.Windows.Media.Animation.Storyboard.TargetName%2A&gt;</ph> on a target object, and that name is established by <bpt id="p1">[</bpt>x:Name<ept id="p1">](../../../../docs/framework/xaml-services/x-name-directive.md)</ept> or <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Name%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Although template and style elements also can have names, those names are only valid within the namescope of the style and template.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>(If templates and styles did share namescopes with application markup, names couldn't be unique.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The styles and templates are literally shared between instances and would perpetuate duplicate names.) Thus, if the individual properties of an element that you might wish to animate came from a style or template, you need to start with a named element instance that is not from a style template, and then target into the style or template visual tree to arrive at the property you wish to animate.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For instance, the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Background%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph> is a complete <ph id="ph3">&lt;xref:System.Windows.Media.Brush&gt;</ph> (actually a <ph id="ph4">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph>) that came from a theme template.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>To animate a <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> completely, there would need to be a BrushAnimation (probably one for every <ph id="ph2">&lt;xref:System.Windows.Media.Brush&gt;</ph> type) and there is no such type.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To animate a Brush, you instead animate properties of a particular <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You need to get from <ph id="ph1">&lt;xref:System.Windows.Media.SolidColorBrush&gt;</ph> to its <ph id="ph2">&lt;xref:System.Windows.Media.SolidColorBrush.Color%2A&gt;</ph> to apply a <ph id="ph3">&lt;xref:System.Windows.Media.Animation.ColorAnimation&gt;</ph> there.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The property path for this example would be <ph id="ph1">`Background.Color`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Attached Properties</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The parentheses indicate that this property in a <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> should be constructed using a partial qualification.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>It can use an XML namespace to find the type.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ownerType`</ph> searches types that a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph> processor has access to, through the <ph id="ph3">&lt;xref:System.Windows.Markup.XmlnsDefinitionAttribute&gt;</ph> declarations in each assembly.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Most applications have the default XML namespace mapped to the <ph id="ph1">[!INCLUDE[TLA#tla_wpfxmlnsv1](../../../../includes/tlasharptla-wpfxmlnsv1-md.md)]</ph> namespace, so a prefix is usually only necessary for custom types or types otherwise outside that namespace.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`propertyName`</ph> must resolve to be the name of a property existing on the <ph id="ph2">`ownerType`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The property specified as <ph id="ph1">`propertyName`</ph> must be a <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>(All <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> attached properties are implemented as dependency properties, so this issue is only of concern for custom attached properties.)</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Indexers</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Most dependency properties or <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> types do not support an indexer.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Therefore, the only usage for an indexer in an animation path is at an intermediate position between the property that starts the chain on the named target and the eventual animated property.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In the provided syntax, that is <ph id="ph1">`propertyName2`</ph>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>For instance, an indexer usage might be necessary if the intermediate property is a collection such as <ph id="ph1">&lt;xref:System.Windows.Media.TransformGroup&gt;</ph>, in a property path such as <ph id="ph2">`RenderTransform.Children[1].Angle`</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>PropertyPath in Code</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Code usage for <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph>, including how to construct a <ph id="ph2">&lt;xref:System.Windows.PropertyPath&gt;</ph>, is documented in the reference topic for <ph id="ph3">&lt;xref:System.Windows.PropertyPath&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>In general, <ph id="ph1">&lt;xref:System.Windows.PropertyPath&gt;</ph> is designed to use two different constructors, one for the binding usages and simplest animation usages, and one for the complex animation usages.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.Object%29&gt;</ph> signature for binding usages, where the object is a string.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.Object%29&gt;</ph> signature for one-step animation paths, where the object is a <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29&gt;</ph> signature for complex animations.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This latter constructor uses a token string for the first parameter and an array of objects that fill positions in the token string to define a property path relationship.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Storyboards Overview<ept id="p1">](../../../../docs/framework/wpf/graphics-multimedia/storyboards-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>