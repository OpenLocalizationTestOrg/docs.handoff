<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30ffb0ead3fddaa1b2e8eb3e44dd934a6465d9e7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\examples-of-xml-serialization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad1ca638379db1eac1b08fd62ee90f5a1fc263c7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4a52451d4fcc81b64613d80046cad20525ac523</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Examples of XML Serialization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Examples of XML Serialization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>XML serialization can take more than one form, from simple to complex.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you can serialize a class that simply consists of public fields and properties, as shown in <bpt id="p1">[</bpt>Introducing XML Serialization<ept id="p1">](../../../docs/framework/serialization/introducing-xml-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following code examples address various advanced scenarios, including how to use XML serialization to generate an XML stream that conforms to a specific XML Schema (XSD) document.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Serializing a DataSet</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Besides serializing an instance of a public class, an instance of a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> can also be serialized, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Serializing an XmlElement and XmlNode</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can also serialize instances of a <ph id="ph1">&lt;xref:System.Xml.XmlElement&gt;</ph> or <ph id="ph2">&lt;xref:System.Xml.XmlNode&gt;</ph> class, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Serializing a Class that Contains a Field Returning a Complex Object</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If a property or field returns a complex object (such as an array or a class instance), the <bpt id="p1">[</bpt>XmlSerializer<ept id="p1">](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx)</ept> converts it to an element nested within the main XML document.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, the first class in the following code example returns an instance of the second class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The serialized XML output might resemble the following.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Serializing an Array of Objects</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can also serialize a field that returns an array of objects, as shown in the following code example.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The serialized class instance might resemble the following, if two items are ordered.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Serializing a Class that Implements the ICollection Interface</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can create your own collection classes by implementing the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface, and use the <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> to serialize instances of these classes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that when a class implements the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface, only the collection contained by the class is serialized.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Any public properties or fields added to the class will not be serialized.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The class must include an <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> method and an <bpt id="p2">**</bpt>Item<ept id="p2">**</ept> property (C# indexer) to be serialized.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Purchase Order Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can cut and paste the following example code into a text file renamed with a .cs or .vb file name extension.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the C# or Visual Basic compiler to compile the file.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Then run it using the name of the executable.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This example uses a simple scenario to demonstrate how an instance of an object is created and serialized into a file stream using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Serialize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The XML stream is saved to a file, and the same file is then read back and reconstructed into a copy of the original object using the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In this example, a class named <ph id="ph1">`PurchaseOrder`</ph> is serialized and then deserialized.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A second class named <ph id="ph1">`Address`</ph> is also included because the public field named <ph id="ph2">`ShipTo`</ph> must be set to an <ph id="ph3">`Address`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Similarly, an <ph id="ph1">`OrderedItem`</ph> class is included because an array of <ph id="ph2">`OrderedItem`</ph> objects must be set to the <ph id="ph3">`OrderedItems`</ph> field.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Finally, a class named <ph id="ph1">`Test`</ph> contains the code that serializes and deserializes the classes.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CreatePO`</ph> method creates the <ph id="ph2">`PurchaseOrder`</ph>, <ph id="ph3">`Address`</ph>, and <ph id="ph4">`OrderedItem`</ph> class objects, and sets the public field values.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The method also constructs an instance of the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph> class that is used to serialize and deserialize the <ph id="ph2">`PurchaseOrder`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note that the code passes the type of the class that will be serialized to the constructor.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The code also creates a <ph id="ph1">`FileStream`</ph> that is used to write the XML stream to an XML document.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ReadPo`</ph> method is a little simpler.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It just creates objects to deserialize and reads out their values.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As with the <ph id="ph1">`CreatePo`</ph> method, you must first construct a <ph id="ph2">&lt;xref:System.Xml.Serialization.XmlSerializer&gt;</ph>, passing the type of the class to be deserialized to the constructor.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Also, a <ph id="ph1">&lt;xref:System.IO.FileStream&gt;</ph> is required to read the XML document.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To deserialize the objects, call the <ph id="ph1">&lt;xref:System.Xml.Serialization.XmlSerializer.Deserialize%2A&gt;</ph> method with the <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph> as an argument.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The deserialized object must be cast to an object variable of type <ph id="ph1">`PurchaseOrder`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The code then reads the values of the deserialized <ph id="ph1">`PurchaseOrder`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Note that you can also read the PO.xml file that is created to see the actual XML output.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The XML output might resemble the following.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Introducing XML Serialization<ept id="p1">](../../../docs/framework/serialization/introducing-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Controlling XML Serialization Using Attributes<ept id="p1">](../../../docs/framework/serialization/controlling-xml-serialization-using-attributes.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Attributes That Control XML Serialization<ept id="p1">](../../../docs/framework/serialization/attributes-that-control-xml-serialization.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>XmlSerializer Class<ept id="p1">](https://msdn.microsoft.com/library/system.xml.serialization.xmlserializer.aspx)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Serialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-serialize-an-object.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Deserialize an Object<ept id="p1">](../../../docs/framework/serialization/how-to-deserialize-an-object.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>