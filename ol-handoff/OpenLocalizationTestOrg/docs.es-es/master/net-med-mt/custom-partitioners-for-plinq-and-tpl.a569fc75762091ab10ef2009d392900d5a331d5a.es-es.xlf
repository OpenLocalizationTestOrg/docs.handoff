<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a06cdaad2d1ac0af427e5879ced278f183ee1d9f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\parallel-programming\custom-partitioners-for-plinq-and-tpl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b812e6737faec297fbe3aafd9d5460dd09519f3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2461b2a0f8a91079168b1f08452d3b6bf1053f92</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Custom Partitioners for PLINQ and TPL | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Custom Partitioners for PLINQ and TPL</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To parallelize an operation on a data source, one of the essential steps is to <bpt id="p1">*</bpt>partition<ept id="p1">*</ept> the source into multiple sections that can be accessed concurrently by multiple threads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>PLINQ and the Task Parallel Library (TPL) provide default partitioners that work transparently when you write a parallel query or <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> loop.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more advanced scenarios, you can plug in your own partitioner.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Kinds of Partitioning</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are many ways to partition a data source.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the most efficient approaches, multiple threads cooperate to process the original source sequence, rather than physically separating the source into multiple subsequences.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For arrays and other indexed sources such as <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> collections where the length is known in advance, <bpt id="p1">*</bpt>range partitioning<ept id="p1">*</ept> is the simplest kind of partitioning.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Every thread receives unique beginning and ending indexes, so that it can process its range of the source without overwriting or being overwritten by any other thread.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The only overhead involved in range partitioning is the initial work of creating the ranges; no additional synchronization is required after that.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Therefore, it can provide good performance as long as the workload is divided evenly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A disadvantage of range partitioning is that if one thread finishes early, it cannot help the other threads finish their work.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For linked lists or other collections whose length is not known, you can use <bpt id="p1">*</bpt>chunk partitioning<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In chunk partitioning, every thread or task in a parallel loop or query consumes some number of source elements in one chunk, processes them, and then comes back to retrieve additional elements.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The partitioner ensures that all elements are distributed and that there are no duplicates.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A chunk may be any size.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, the partitioner that is demonstrated in <bpt id="p1">[</bpt>How to: Implement Dynamic Partitions<ept id="p1">](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept> creates chunks that contain just one element.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>As long as the chunks are not too large, this kind of partitioning is inherently load-balancing because the assignment of elements to threads is not pre-determined.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the partitioner does incur the synchronization overhead each time the thread needs to get another chunk.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The amount of synchronization incurred in these cases is inversely proportional to the size of the chunks.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In general, range partitioning is only faster when the execution time of the delegate is small to moderate, and the source has a large number of elements, and the total work of each partition is roughly equivalent.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Chunk partitioning is therefore generally faster in most cases.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>On sources with a small number of elements or longer execution times for the delegate, then the performance of chunk and range partitioning is about equal.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The TPL partitioners also support a dynamic number of partitions.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This means they can create partitions on-the-fly, for example, when the <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> loop spawns a new task.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This feature enables the partitioner to scale together with the loop itself.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Dynamic partitioners are also inherently load-balancing.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When you create a custom partitioner, you must support dynamic partitioning to be consumable from a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> loop.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Configuring Load Balancing Partitioners for PLINQ</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Some overloads of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A?displayProperty=fullName&gt;</ph> method let you create a partitioner for an array or <ph id="ph2">&lt;xref:System.Collections.IList&gt;</ph> source and specify whether it should attempt to balance the workload among the threads.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When the partitioner is configured to load-balance, chunk partitioning is used, and the elements are handed off to each partition in small chunks as they are requested.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This approach helps ensure that all partitions have elements to process until the entire loop or query is completed.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An additional overload can be used to provide load-balancing partitioning of any <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> source.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In general, load balancing requires the partitions to request elements relatively frequently from the partitioner.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>By contrast, a partitioner that does static partitioning can assign the elements to each partitioner all at once by using either range or chunk partitioning.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This requires less overhead than load balancing, but it might take longer to execute if one thread ends up with significantly more work than the others.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>By default when it is passed an IList or an array, PLINQ always uses range partitioning without load balancing.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To enable load balancing for PLINQ, use the <ph id="ph1">`Partitioner.Create`</ph> method, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TPL_Partitioners#02<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioners.cs#02)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TPL_Partitioners#02<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_partitioners/vb/partitionsnippets_vb.vb#02)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The best way to determine whether to use load balancing in any given scenario is to experiment and measure how long it takes operations to complete under representative loads and computer configurations.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, static partitioning might provide significant speedup on a multi-core computer that has only a few cores, but it might result in slowdowns on computers that have relatively many cores.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following table lists the available overloads of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These partitioners are not limited to use only with PLINQ or <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>They can also be used with any custom parallel construct.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Overload</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Uses load balancing</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Always</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When the Boolean argument is specified as true</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the Boolean argument is specified as true</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Never</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Never</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Never</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Never</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Configuring Static Range Partitioners for Parallel.ForEach</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.For%2A&gt;</ph> loop, the body of the loop is provided to the method as a delegate.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The cost of invoking that delegate is about the same as a virtual method call.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In some scenarios, the body of a parallel loop might be small enough that the cost of the delegate invocation on each loop iteration becomes significant.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In such situations, you can use one of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A&gt;</ph> overloads to create an <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> of range partitions over the source elements.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Then, you can pass this collection of ranges to a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> method whose body consists of a regular <ph id="ph2">`for`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The benefit of this approach is that the delegate invocation cost is incurred only once per range, rather than once per element.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the basic pattern.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>TPL_Partitioners#01<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Misc/tpl_partitioners/cs/partitioner01.cs#01)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>TPL_Partitioners#01<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_Misc/tpl_partitioners/vb/partitionercreate01.vb#01)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Every thread in the loop receives its own <ph id="ph1">&lt;xref:System.Tuple%602&gt;</ph> that contains the starting and ending index values in the specified sub-range.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The inner <ph id="ph1">`for`</ph> loop uses the <ph id="ph2">`fromInclusive`</ph> and <ph id="ph3">`toExclusive`</ph> values to loop over the array or the <ph id="ph4">&lt;xref:System.Collections.IList&gt;</ph> directly.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner.Create%2A&gt;</ph> overloads lets you specify the size of the partitions, and the number of partitions.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This overload can be used in scenarios where the work per element is so low that even one virtual method call per element has a noticeable impact on performance.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Custom Partitioners</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In some scenarios, it might be worthwhile or even required to implement your own partitioner.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, you might have a custom collection class that you can partition more efficiently than the default partitioners can, based on your knowledge of the internal structure of the class.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Or, you may want to create range partitions of varying sizes based on your knowledge of how long it will take to process elements at different locations in the source collection.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To create a basic custom partitioner, derive a class from <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner%601?displayProperty=fullName&gt;</ph> and override the virtual methods, as described in the following table.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>This method is called once by the main thread and returns an IList(IEnumerator(TSource)).</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Each worker thread in the loop or query can call <ph id="ph1">`GetEnumerator`</ph> on the list to retrieve a <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> over a distinct partition.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Return <ph id="ph1">`true`</ph> if you implement <ph id="ph2">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A&gt;</ph>, otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A&gt;</ph> is <ph id="ph2">`true`</ph>, this method can optionally be called instead of <ph id="ph3">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetPartitions%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If the results must be sortable or you require indexed access into the elements, then derive from <ph id="ph1">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601?displayProperty=fullName&gt;</ph> and override its virtual methods as described in the following table.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This method is called once by the main thread and returns an <ph id="ph1">`IList(IEnumerator(TSource))`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Each worker thread in the loop or query can call <ph id="ph1">`GetEnumerator`</ph> on the list to retrieve a <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> over a distinct partition.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Return <ph id="ph1">`true`</ph> if you implement <ph id="ph2">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A&gt;</ph>; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Typically, this just calls <ph id="ph1">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A&gt;</ph> is <ph id="ph2">`true`</ph>, this method can optionally be called instead of <ph id="ph3">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetPartitions%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following table provides additional details about how the three kinds of load-balancing partitioners implement the <ph id="ph1">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Method/Property</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>IList / Array without Load Balancing</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>IList / Array with Load Balancing</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Uses range partitioning</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Uses chunk partitioning optimized for Lists for the partitionCount specified</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Uses chunk partitioning by creating a static number of partitions.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Throws not-supported exception</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Uses chunk partitioning optimized for Lists and dynamic partitions</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Uses chunk partitioning by creating a dynamic number of partitions.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`false`</ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`false`</ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`false`</ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Dynamic Partitions</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If you intend the partitioner to be used in a <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> method, you must be able to return a dynamic number of partitions.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This means that the partitioner can supply an enumerator for a new partition on-demand at any time during loop execution.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Basically, whenever the loop adds a new parallel task, it requests a new partition for that task.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>If you require the data to be orderable, then derive from <ph id="ph1">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601?displayProperty=fullName&gt;</ph> so that each item in each partition is assigned a unique index.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>For more information, and an example, see <bpt id="p1">[</bpt>How to: Implement Dynamic Partitions<ept id="p1">](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Contract for Partitioners</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When you implement a custom partitioner, follow these guidelines to help ensure correct interaction with PLINQ and <ph id="ph1">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> in the TPL:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetPartitions%2A&gt;</ph> is called with an argument of zero or less for <ph id="ph2">`partitionsCount`</ph>, throw <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Although PLINQ and TPL will never pass in a <ph id="ph1">`partitionCount`</ph> equal to 0, we nevertheless recommend that you guard against the possibility.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetPartitions%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A&gt;</ph> should always return <ph id="ph3">`partitionsCount`</ph> number of partitions.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If the partitioner runs out of data and cannot create as many partitions as requested, then the method should return an empty enumerator for each of the remaining partitions.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Otherwise, both PLINQ and TPL will throw an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetPartitions%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A&gt;</ph> should never return <ph id="ph5">`null`</ph> (<ph id="ph6">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>If they do, PLINQ / TPL will throw an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Methods that return partitions should always return partitions that can fully and uniquely enumerate the data source.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>There should be no duplication in the data source or skipped items unless specifically required by the design of the partitioner.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If this rule is not followed, then the output order may be scrambled.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following Boolean getters must always accurately return the following values so that the output order is not scrambled:</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`KeysOrderedInEachPartition`</ph>: Each partition returns elements with increasing key indices.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`KeysOrderedAcrossPartitions`</ph>: For all partitions that are returned, the key indices in partition <bpt id="p1">*</bpt>i<ept id="p1">*</ept> are higher than the key indices in partition <bpt id="p2">*</bpt>i<ept id="p2">*</ept>-1.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`KeysNormalized`</ph>: All key indices are monotonically increasing without gaps, starting from zero.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>All indices must be unique.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>There may not be duplicate indices.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>If this rule is not followed, then the output order may be scrambled.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>All indices must be nonnegative.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If this rule is not followed, then PLINQ/TPL may throw exceptions.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Parallel Programming<ept id="p1">](../../../docs/standard/parallel-programming/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Implement Dynamic Partitions<ept id="p1">](../../../docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Implement a Partitioner for Static Partitioning<ept id="p1">](../../../docs/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>