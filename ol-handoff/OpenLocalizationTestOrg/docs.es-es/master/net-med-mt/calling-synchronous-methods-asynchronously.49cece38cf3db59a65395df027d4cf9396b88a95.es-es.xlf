<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="calling-synchronous-methods-asynchronously.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d114c2dcb936f79a235fa0d09b86cb79c2c6d9a8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\calling-synchronous-methods-asynchronously.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6daaf3aeade79514b948524ee571c1fed9516cba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bce6d9f3bc906c49381d568b8e5e829bcc3a8118</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Calling Synchronous Methods Asynchronously | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Calling Synchronous Methods Asynchronously</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework enables you to call any method asynchronously.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>To do this you define a delegate with the same signature as the method you want to call; the common language runtime automatically defines <ph id="ph1">`BeginInvoke`</ph> and <ph id="ph2">`EndInvoke`</ph> methods for this delegate, with the appropriate signatures.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Asynchronous delegate calls, specifically the <ph id="ph1">`BeginInvoke`</ph> and <ph id="ph2">`EndInvoke`</ph> methods, are not supported in the .NET Compact Framework.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`BeginInvoke`</ph> method initiates the asynchronous call.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It has the same parameters as the method that you want to execute asynchronously, plus two additional optional parameters.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The first parameter is an <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate that references a method to be called when the asynchronous call completes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The second parameter is a user-defined object that passes information into the callback method.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BeginInvoke`</ph> returns immediately and does not wait for the asynchronous call to complete.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BeginInvoke`</ph> returns an <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, which can be used to monitor the progress of the asynchronous call.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`EndInvoke`</ph> method retrieves the results of the asynchronous call.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It can be called any time after <ph id="ph1">`BeginInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If the asynchronous call has not completed, <ph id="ph1">`EndInvoke`</ph> blocks the calling thread until it completes.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The parameters of <ph id="ph1">`EndInvoke`</ph> include the <ph id="ph2">`out`</ph> and <ph id="ph3">`ref`</ph> parameters (<ph id="ph4">`&lt;Out&gt;`</ph> <ph id="ph5">`ByRef`</ph> and <ph id="ph6">`ByRef`</ph> in Visual Basic) of the method that you want to execute asynchronously, plus the <ph id="ph7">&lt;xref:System.IAsyncResult&gt;</ph> returned by <ph id="ph8">`BeginInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The IntelliSense feature in <ph id="ph1">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph> displays the parameters of <ph id="ph2">`BeginInvoke`</ph> and <ph id="ph3">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you are not using Visual Studio or a similar tool, or if you are using C# with <ph id="ph1">[!INCLUDE[vsprvslong](../../../includes/vsprvslong-md.md)]</ph>, see <bpt id="p1">[</bpt>Asynchronous Programming Model (APM)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)</ept> for a description of the parameters defined for these methods.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The code examples in this topic demonstrate four common ways to use <ph id="ph1">`BeginInvoke`</ph> and <ph id="ph2">`EndInvoke`</ph> to make asynchronous calls.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>After calling <ph id="ph1">`BeginInvoke`</ph> you can do the following:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Do some work and then call <ph id="ph1">`EndInvoke`</ph> to block until the call completes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Obtain a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> using the <ph id="ph2">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A?displayProperty=fullName&gt;</ph> property, use its <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method to block execution until the <ph id="ph4">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled, and then call <ph id="ph5">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Poll the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned by <ph id="ph2">`BeginInvoke`</ph> to determine when the asynchronous call has completed, and then call <ph id="ph3">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Pass a delegate for a callback method to <ph id="ph1">`BeginInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The method is executed on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread when the asynchronous call completes.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The callback method calls <ph id="ph1">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>No matter which technique you use, always call <ph id="ph1">`EndInvoke`</ph> to complete your asynchronous call.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Defining the Test Method and Asynchronous Delegate</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The code examples that follow demonstrate various ways of calling the same long-running method, <ph id="ph1">`TestMethod`</ph>, asynchronously.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TestMethod`</ph> method displays a console message to show that it has begun processing, sleeps for a few seconds, and then ends.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TestMethod`</ph> has an <ph id="ph2">`out`</ph> parameter to demonstrate the way such parameters are added to the signatures of <ph id="ph3">`BeginInvoke`</ph> and <ph id="ph4">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can handle <ph id="ph1">`ref`</ph> parameters similarly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code example shows the definition of <ph id="ph1">`TestMethod`</ph> and the delegate named <ph id="ph2">`AsyncMethodCaller`</ph> that can be used to call <ph id="ph3">`TestMethod`</ph> asynchronously.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To compile the code examples, you must include the definitions for <ph id="ph1">`TestMethod`</ph> and the <ph id="ph2">`AsyncMethodCaller`</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Waiting for an Asynchronous Call with EndInvoke</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The simplest way to execute a method asynchronously is to start executing the method by calling the delegate's <ph id="ph1">`BeginInvoke`</ph> method, do some work on the main thread, and then call the delegate's <ph id="ph2">`EndInvoke`</ph> method.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EndInvoke`</ph> might block the calling thread because it does not return until the asynchronous call completes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This is a good technique to use with file or network operations.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`EndInvoke`</ph> might block, you should never call it from threads that service the user interface.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Waiting for an Asynchronous Call with WaitHandle</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You can obtain a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> by using the <ph id="ph2">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.IAsyncResult&gt;</ph> returned by <ph id="ph4">`BeginInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> is signaled when the asynchronous call completes, and you can wait for it by calling the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you use a <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph>, you can perform additional processing before or after the asynchronous call completes, but before calling <ph id="ph2">`EndInvoke`</ph> to retrieve the results.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The wait handle is not closed automatically when you call <ph id="ph1">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you release all references to the wait handle, system resources are freed when garbage collection reclaims the wait handle.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To free the system resources as soon as you are finished using the wait handle, dispose of it by calling the <ph id="ph1">&lt;xref:System.Threading.WaitHandle.Close%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Garbage collection works more efficiently when disposable objects are explicitly disposed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Polling for Asynchronous Call Completion</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.IAsyncResult.IsCompleted%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> returned by <ph id="ph3">`BeginInvoke`</ph> to discover when the asynchronous call completes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You might do this when making the asynchronous call from a thread that services the user interface.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Polling for completion allows the calling thread to continue executing while the asynchronous call executes on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Executing a Callback Method When an Asynchronous Call Completes</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the thread that initiates the asynchronous call does not need to be the thread that processes the results, you can execute a callback method when the call completes.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The callback method is executed on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>To use a callback method, you must pass <ph id="ph1">`BeginInvoke`</ph> an <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate that represents the callback method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can also pass an object that contains information to be used by the callback method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the callback method, you can cast the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph>, which is the only parameter of the callback method, to an <ph id="ph2">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncDelegate%2A?displayProperty=fullName&gt;</ph> property to get the delegate that was used to initiate the call so that you can call <ph id="ph2">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Notes on the example:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`threadId`</ph> parameter of <ph id="ph2">`TestMethod`</ph> is an <ph id="ph3">`out`</ph> parameter ([<ph id="ph4">`&lt;Out&gt;`</ph> <ph id="ph5">`ByRef`</ph> in Visual Basic), so its input value is never used by <ph id="ph6">`TestMethod`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A dummy variable is passed to the <ph id="ph1">`BeginInvoke`</ph> call.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`threadId`</ph> parameter were a <ph id="ph2">`ref`</ph> parameter (<ph id="ph3">`ByRef`</ph> in Visual Basic), the variable would have to be a class-level field so that it could be passed to both <ph id="ph4">`BeginInvoke`</ph> and <ph id="ph5">`EndInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The state information that is passed to <ph id="ph1">`BeginInvoke`</ph> is a format string, which the callback method uses to format an output message.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Because it is passed as type <ph id="ph1">&lt;xref:System.Object&gt;</ph>, the state information must be cast to its proper type before it can be used.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The callback is made on a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads are background threads, which do not keep the application running if the main thread ends, so the main thread of the example has to sleep long enough for the callback to finish.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Event-based Asynchronous Pattern (EAP)<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>