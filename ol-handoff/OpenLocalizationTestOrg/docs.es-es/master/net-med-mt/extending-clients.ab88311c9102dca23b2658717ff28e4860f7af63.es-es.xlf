<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="extending-clients.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-92d81eb" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e1f937fe491601b4d320a38adcdf83027b3e877</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\extending\extending-clients.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ea4e5216770820002dcc6039038b1e74df90d405</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">553b25441704e78b90d8e655bf1b064060ee0f19</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Extending Clients | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Extending Clients</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In a calling application, the service model layer is responsible for translating method invocations in application code into outbound messages, pushing them to the underlying channels, translating results back into return values and out parameters in application code, and returning the results back to the caller.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Service model extensions modify or implement execution or communication behavior and features involving client or dispatcher functionality, custom behaviors, message and parameter interception, and other extensibility functionality.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic describes how to use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> classes in a <ph id="ph3">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> client application to modify the default execution behavior of a <ph id="ph4">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client or to intercept or modify messages, parameters, or return values prior to or subsequent to sending or retrieving them from the channel layer.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For more information about extending the service runtime, see <bpt id="p1">[</bpt>Extending Dispatchers<ept id="p1">](../../../../docs/framework/wcf/extending/extending-dispatchers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about the behaviors that modify and insert customization objects into the client runtime, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Clients</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On a client, a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client object or client channel converts method invocations into outgoing messages and incoming messages to operation results that are returned to the calling application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(For more information about client types, see <bpt id="p1">[</bpt>WCF Client Architecture<ept id="p1">](../../../../docs/framework/wcf/feature-details/client-architecture.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client types have runtime types that handle this endpoint- and operation-level functionality.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When an application calls an operation, the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> translates the outbound objects into a message, processes interceptors, confirms that the outbound call conforms to the target contract, and hands the outbound message to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph>, which is responsible for creating and managing outbound channels (and inbound channels in the case of duplex services), handling extra outbound message processing (such as header modification), processing message interceptors in both directions, and routing inbound duplex calls to the appropriate client-side <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> provide similar services when messages (including faults) are returned to the client.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These two runtime classes are the main extension to customize the processing of <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client objects and channels.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> class allows users to intercept and extend client execution across all messages in the contract.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> class allows users to intercept and extend client execution for all messages in a given operation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Modifying the properties or inserting customizations are done by using contract, endpoint, and operation behaviors.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about how to use these types of behaviors to perform client runtime customizations, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Scenarios</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>There a number of reasons to extend the client system, including:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Custom Message Validation.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A user may want to enforce that a message is valid for a certain schema.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This can be done by implementing the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> interface and assigning the implementation to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For examples, see <bpt id="p1">[</bpt>How to: Inspect or Modify Messages on the Client<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-inspect-or-modify-messages-on-the-client.md)</ept> and <bpt id="p2">[</bpt>How to: Inspect or Modify Messages on the Client<ept id="p2">](../../../../docs/framework/wcf/extending/how-to-inspect-or-modify-messages-on-the-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Custom Message Logging.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A user may want to inspect and log some set of application messages that flow through an endpoint.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This can also be accomplished with the message interceptor interfaces.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Custom Message Transformations.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Rather than modifying application code, the user may want to apply certain transformations to the message in the runtime (for example, for versioning).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This can be accomplished, again, with the message interceptor interfaces.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Custom Data Model.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A user may want to have a data or serialization model other than those supported by default in <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> (namely, <ph id="ph2">&lt;xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.Serialization.XmlSerializer?displayProperty=fullName&gt;</ph>, and <ph id="ph4">&lt;xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt;</ph> objects).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This can be done by implementing the message formatter interfaces.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageFormatter?displayProperty=fullName&gt;</ph> and the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.Formatter%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Custom Parameter Validation.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A user may want to enforce that typed parameters are valid (as opposed to XML).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This can be done using the parameter inspector interfaces.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>How to: Inspect or Modify Parameters<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-inspect-or-modify-parameters.md)</ept> or <bpt id="p2">[</bpt>Client Validation<ept id="p2">](../../../../docs/framework/wcf/samples/client-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Using the ClientRuntime Class</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> class is an extensibility point to which you can add extension objects that intercept messages and extend client behavior.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Interception objects can process all messages in a particular contract, process only messages for particular operations, perform custom channel initialization, and implement other custom client application behavior.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A&gt;</ph> property returns the dispatch run-time object for service-initiated callback clients.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector%2A&gt;</ph> property accepts a custom operation selector object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ChannelInitializers%2A&gt;</ph> property enables the addition of a channel initializer that can inspect or modify the client channel.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A&gt;</ph> property gets a collection of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> objects to which you can add custom message interceptors that provide functionality specific to the messages of that operation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing%2A&gt;</ph> property enables an application to turn off some automatic addressing headers to directly control addressing.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Via%2A&gt;</ph> property sets the value of the destination of the message at the transport level to support intermediaries and other scenarios.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A&gt;</ph> property gets a collection of <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageInspector&gt;</ph> objects to which you can add custom message interceptors for all messages traveling through a <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In addition, there are a number of other properties that retrieve the contract information:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client is a duplex <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client, the following properties also retrieve the callback <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client information:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To extend <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client execution across an entire <ph id="ph2">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client, review the properties available on the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> class to see whether modifying a property or implementing an interface and adding it to a property creates the functionality you are seeking.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Once you have chosen a particular extension to build, insert your extension into the appropriate <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> property by implementing a client behavior that provides access to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> class when invoked.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can insert custom extension objects into a collection using an operation behavior (an object that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph>), a contract behavior (an object that implements <ph id="ph2">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>), or an endpoint behavior (an object that implements <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The installing behavior object is added to the appropriate collection of behaviors either programmatically, declaratively (by implementing a custom attribute), or by implementing a custom <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> object to enable the behavior to be inserted using an application configuration file.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For examples that demonstrate interception across a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client, see <bpt id="p1">[</bpt>How to: Inspect or Modify Messages on the Client<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-inspect-or-modify-messages-on-the-client.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Using the ClientOperation Class</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> class is the location for client run-time modifications and insertion point for custom extensions that are scoped to only one service operation.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>(To modify client run-time behavior for all messages in a contract, use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> class.)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A&gt;</ph> property to locate the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> object that represents a particular service operation.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The following properties enable you to insert custom objects into the <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client system:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.Formatter%2A&gt;</ph> property to insert a custom <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IClientMessageFormatter&gt;</ph> implementation for an operation or modify the current formatter.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A&gt;</ph> property to insert a custom <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IParameterInspector&gt;</ph> implementation or to modify the current one.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following properties enable you to modify the system in interaction with the formatter and custom parameter inspectors:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest%2A&gt;</ph> property to control the serialization of an outbound message.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply%2A&gt;</ph> property to control the deserialization of an inbound message.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.Action%2A&gt;</ph> property to control the WS-Addressing action of the request message.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.EndMethod%2A&gt;</ph> to specify which <ph id="ph3">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client methods are associated with an asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.FaultContractInfos%2A&gt;</ph> property to get a collection that contains the types that can appear in SOAP faults as the detail type.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.IsInitiating%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.IsTerminating%2A&gt;</ph> properties to control whether a session is initiated or is torn down, respectively, when the operation is called.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay%2A&gt;</ph> property to control whether the operation is a one-way operation.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.Parent%2A&gt;</ph> property to obtain the containing <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.Name%2A&gt;</ph> property to get the name of the operation.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation.SyncMethod%2A&gt;</ph> property to control which method is mapped to the operation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To extend <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client execution across only one service operation, review the properties available on the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> class to see whether modifying a property or implementing an interface and adding it to a property creates the functionality you are seeking.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Once you have chosen a particular extension to build, insert your extension into the appropriate <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> property by implementing a client behavior that provides access to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.ClientOperation&gt;</ph> class when invoked.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Inside that behavior you can then modify the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.ClientRuntime&gt;</ph> property to fit your requirements.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Typically, implementing an operation behavior (an object that implements the <ph id="ph1">&lt;xref:System.ServiceModel.Description.IOperationBehavior&gt;</ph> interface) suffices, but you can also use endpoint behaviors and contract behaviors to accomplish the same thing by locating the <ph id="ph2">&lt;xref:System.ServiceModel.Description.OperationDescription&gt;</ph> for a particular operation and attaching the behavior there.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For details, see <bpt id="p1">[</bpt>Configuring and Extending the Runtime with Behaviors<ept id="p1">](../../../../docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To use your custom behavior from configuration, install your behavior using a custom behavior configuration section handler.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You can also install your behavior by creating a custom attribute.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For examples that demonstrate interception across a <ph id="ph1">[!INCLUDE[indigo2](../../../../includes/indigo2-md.md)]</ph> client, see <bpt id="p1">[</bpt>How to: Inspect or Modify Parameters<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-inspect-or-modify-parameters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inspect or Modify Messages on the Client<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-inspect-or-modify-messages-on-the-client.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Inspect or Modify Parameters<ept id="p1">](../../../../docs/framework/wcf/extending/how-to-inspect-or-modify-parameters.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>