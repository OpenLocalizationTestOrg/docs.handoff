<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27c81420829bab6a460aad3ad257c4053d976e69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\common-client-technologies\manipulations-and-inertia-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27f92e4e671cb492f0dcd0b253f865753e7b4e00</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35426cb8693bfa8431fa28e960356170714da81b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Manipulations and Inertia Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Manipulations and Inertia Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Manipulations<ept id="p1">*</ept> enable users to move, rotate, and resize user interface (UI) elements by using <bpt id="p2">*</bpt>manipulators<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A manipulator represents a mouse or (in a touch-enabled scenario) a stylus or a finger.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Inertia<ept id="p1">*</ept> emulates real-world behavior for UI elements that are in motion by simulating friction forces on the elements.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This enables elements to gradually slow their movement (both linear and angular) before coming to a stop.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This article provides an introduction to manipulations and inertia for the .NET Framework.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Manipulations</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A manipulation treats a collection of manipulators as a composite object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An application can track the changes to the composite object instead of the individual components.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Consider the image in the following illustration.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A user can use two manipulators to move, rotate, and scale the image.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The changes to each manipulator are interpreted together with the other manipulators.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, if you have two manipulators (1 and 2) on the image, and you move manipulator 1 in a +Y direction (down), the change to the image depends on what happens to manipulator 2.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If manipulator 2 also moves in the +Y direction (down), the image simply moves in the +Y direction.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>But if manipulator 2 does not change, or it moves in a -Y direction (up), the image is made smaller or rotated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A virtual photo that two fingers are manipulating.<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/common-client-technologies/media/manipulation-resize.png "</bpt>Manipulation_Resize<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An image being manipulated by two manipulators</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Manipulation processing provides a framework that monitors a subset of manipulators and interprets them as if they are acting together, instead of independently.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can create several manipulation processor objects simultaneously, one for each UI element to be manipulated in an application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A manipulation processor is informed of which input devices to observe and it reports manipulations through <bpt id="p1">[</bpt>.NET events<ept id="p1">](http://msdn.microsoft.com/library/17sde2xt.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A manipulation processor does not have information about the particular element that is being manipulated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An application separately applies the changes to an application-specific element.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, an application applies transformations to an image or redraws it to display it at its new location or with a new size or orientation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Manipulations are designed for two-dimensional (2-D) <bpt id="p1">[</bpt>affine transformations<ept id="p1">](http://msdn.microsoft.com/library/ms533810\(VS.85\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These transformations include translate, rotate, and scale.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Parts of a Manipulation</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A manipulation is a collection of <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.Manipulator2D&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This aggregate manipulation is represented by an origin point and an ellipse.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The origin point is the average position of all manipulators that are manipulating an element.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The ellipse has a radius that is the average distance from the origin to each of the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.Manipulator2D&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The parts of a manipulation.<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/common-client-technologies/media/manipulation-definition.png "</bpt>Manipulation_Definition<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Two manipulators (1 and 2), an origin, and an ellipse specify a manipulation</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>As manipulators are added, moved, or removed for a UI element, an application updates the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When the manipulation first begins, the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Manipulation processing is more efficient when used in a frame-based update environment.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When using manipulation processing in a Microsoft XNA application, this is not a concern because the XNA framework provides frame-based updates using the <bpt id="p1">[</bpt>Game.Update<ept id="p1">](http://msdn.microsoft.com/library/microsoft.xna.framework.game.update.aspx)</ept> method.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In another environment (such as WinForms), you might need to provide your own frame-based logic to collect manipulations and periodically send them to the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators%2A&gt;</ph> method as a batch.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As the number of manipulators or their position change, the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Properties of the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt;</ph> object that is passed to the <ph id="ph2">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta&gt;</ph> event handler specify changes in origin, scale, rotation, and translation that have occurred since the last event.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The origin of the manipulation changes when manipulators move, and when manipulators are added or removed.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Translation values specify how much X or Y movement the manipulation includes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Using the new values, an application redraws the UI element.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A manipulation after contact A moved to the right.<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/common-client-technologies/media/manipulation-changed.png "</bpt>Manipulation_Changed<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Manipulator 1 moves and causes the origin to change</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the last manipulator that is associated with the manipulation is removed from the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D&gt;</ph> object, the <ph id="ph2">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The Manipulation Processing Model</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A manipulation processor uses a direct-usage model.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>With this simple model, an application must pass any input event details to the manipulation processor.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An input event might be raised by any input primitive, such as a mouse device, a stylus, or a finger.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This process provides a direct filtering mechanism and a simple usage model, so the application can batch input events when it is necessary.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For an application to include an input primitive in the manipulation process, it creates a <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.Manipulator2D&gt;</ph> structure from the details of the input primitive, and passes the structure to the manipulation processor using the <ph id="ph2">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.ProcessManipulators%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The manipulation processor then raises events, which the application must handle to update the visual component in an appropriate way.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The flow of the manipulations direct&amp;#45;usage model.<ept id="p1">]</ept><bpt id="p2">(../../../docs/framework/common-client-technologies/media/manipulation-flow.png "</bpt>Manipulation_Flow<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The manipulation processing model</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Inertia</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The inertia processor enables applications to extrapolate location, orientation, and other properties of a UI element by simulating real-world behavior.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For instance, when a user flicks an element, it can continue moving, decelerate, and then slowly stop.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The inertia processor implements this behavior by causing the affine 2-D values (origin, scale, translation, and rotation) to change over a specified time at a specified deceleration rate.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>As with manipulation processing, an inertia processor does not have information about any particular UI element.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In response to events that are raised on an <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.InertiaProcessor2D&gt;</ph> object, an application separately applies the changes to an application-specific element.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Inertia processing and manipulation processing are often used together.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Their interfaces are similar, and the events that they raise are (in some cases) identical.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Generally, inertia processing begins when the manipulation of the UI element is completed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This is accomplished by listening to the <ph id="ph1">&lt;xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Completed&gt;</ph> event and starting the inertia processing from that event handler.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>