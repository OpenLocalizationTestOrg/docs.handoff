<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">875679fc6201fe1015bc222a842e3e35c5eb3ea9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\winforms\how-to-distinguish-between-clicks-and-double-clicks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f9de68a37f47b626c6d1673c29ca34719f7c6da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b39a47632aae9f54276feaf8aefb33c44e8add4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Distinguish Between Clicks and Double-Clicks | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Distinguish Between Clicks and Double-Clicks</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Typically, a single <bpt id="p1">*</bpt>click<ept id="p1">*</ept> initiates a user interface (UI) action and a <bpt id="p2">*</bpt>double-click<ept id="p2">*</ept> extends the action.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, one click usually selects an item, and a double-click edits the selected item.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, the Windows Forms click events do not easily accommodate a scenario where a click and a double-click perform incompatible actions, because an action tied to the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Click&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.Control.MouseClick&gt;</ph> event is performed before the action tied to the <ph id="ph3">&lt;xref:System.Windows.Forms.Control.DoubleClick&gt;</ph> or <ph id="ph4">&lt;xref:System.Windows.Forms.Control.MouseDoubleClick&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic demonstrates two solutions to this problem.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>One solution is to handle the double-click event and roll back the actions in the handling of the click event.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In rare situations you may need to simulate click and double-click behavior by handling the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event and by using the <ph id="ph2">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You measure the time between clicks and if a second click occurs before the value of <ph id="ph1">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickTime%2A&gt;</ph> is reached and the click is within a rectangle defined by <ph id="ph2">&lt;xref:System.Windows.Forms.SystemInformation.DoubleClickSize%2A&gt;</ph>, perform the double-click action; otherwise, perform the click action.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To roll back a click action</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Ensure that the control you are working with has standard double-click behavior.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If not, enable the control with the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.SetStyle%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Handle the double-click event and roll back the click action as well as the double-click action.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates a how to create a custom button with double-click enabled, as well as how to roll back the click action in the double-click event handling code.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.ButtonDoubleClick#1<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ButtonDoubleClick/CS/Form1.cs#1)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Windows.Forms.ButtonDoubleClick#1<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ButtonDoubleClick/VB/Form1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To distinguish between clicks in the MouseDown event</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Handle the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.MouseDown&gt;</ph> event and determine the location and time span between clicks using the appropriate <ph id="ph2">&lt;xref:System.Windows.Forms.SystemInformation&gt;</ph> properties and a <ph id="ph3">&lt;xref:System.Windows.Forms.Timer&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Perform the appropriate action depending on whether a click or double-click takes place.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates how this can be done.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>System.Windows.Forms.SingleVersusDoubleClick#0<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/cpp/form1.cpp#0)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>System.Windows.Forms.SingleVersusDoubleClick#0<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/CS/form1.cs#0)</ept><ept id="p3">]</ept>  <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>System.Windows.Forms.SingleVersusDoubleClick#0<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SingleVersusDoubleClick/VB/form1.vb#0)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These examples require:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>References to the System, System.Drawing, and System.Windows.Forms assemblies.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For information about building these examples from the command line for <ph id="ph1">[!INCLUDE[vbprvb](../../../includes/vbprvb-md.md)]</ph> or <ph id="ph2">[!INCLUDE[csprcs](../../../includes/csprcs-md.md)]</ph>, see <bpt id="p1">[</bpt>Building from the Command Line<ept id="p1">](~/docs/visual-basic/reference/command-line-compiler/building-from-the-command-line.md)</ept> or <bpt id="p2">[</bpt>Command-line Building With csc.exe<ept id="p2">](~/docs/csharp/language-reference/compiler-options/command-line-building-with-csc-exe.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can also build these examples in <ph id="ph1">[!INCLUDE[vsprvs](../../../includes/vsprvs-md.md)]</ph> by pasting the code into new projects.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Also see <bpt id="p1">[</bpt>How to: Compile and Run a Complete Windows Forms Code Example Using Visual Studio<ept id="p1">](http://msdn.microsoft.com/library/Bb129228\(v=vs.110\))</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mouse Input in a Windows Forms Application<ept id="p1">](../../../docs/framework/winforms/mouse-input-in-a-windows-forms-application.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>