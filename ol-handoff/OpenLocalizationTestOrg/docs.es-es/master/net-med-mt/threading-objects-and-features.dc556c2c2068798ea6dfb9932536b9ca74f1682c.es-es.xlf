<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ec38d7837679b16292389fec2a5ef29946d45413</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\threading-objects-and-features.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19d72434a930268be51a3b6898139aa7575c6e90</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ed86906c073e4f0fe60be0c5f9db30a0b4b50873</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Threading Objects and Features | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Threading Objects and Features</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The .NET Framework provides a number of objects that help you create and manage multithreaded applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Managed threads are represented by the <ph id="ph1">&lt;xref:System.Threading.Thread&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> class provides easy creation and management of multithreaded background tasks.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class does the same for tasks that interact with the user interface.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.Timer&gt;</ph> class executes background tasks at timed intervals.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In addition, there are a number of classes that synchronize activities of threads, including the <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> classes introduced in the .NET Framework version 2.0.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The features of these classes are compared in <bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The Managed Thread Pool<ept id="p1">](../../../docs/standard/threading/the-managed-thread-pool.md)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Explains the <bpt id="p1">**</bpt>ThreadPool<ept id="p1">**</ept> class, which enables you to request a thread to execute a task without having to do any thread management yourself.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Timers<ept id="p1">](../../../docs/standard/threading/timers.md)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Explains how to use a <bpt id="p1">**</bpt>Timer<ept id="p1">**</ept> to specify a delegate to be called at a specified time.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Monitors<ept id="p1">](http://msdn.microsoft.com/library/33fe4aef-b44b-42fd-9e72-c908e39e75db)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Explains how to use the <bpt id="p1">**</bpt>Monitor<ept id="p1">**</ept> class to synchronize access to a member or to build your own thread management types.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Wait Handles<ept id="p1">](http://msdn.microsoft.com/library/48d10b6f-5fd7-407c-86ab-0179aef72489)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Describes the <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> class, the abstract base class for event wait handles, mutexes, and semaphores, which enables waiting for multiple synchronization events.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent<ept id="p1">](../../../docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Describes managed event wait handles, which are used to synchronize thread activities by signaling and waiting for signals.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Mutexes<ept id="p1">](../../../docs/standard/threading/mutexes.md)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Explains how to use a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>to synchronize access to an object or to build your own synchronization mechanisms.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Interlocked Operations<ept id="p1">](../../../docs/standard/threading/interlocked-operations.md)</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Explains how to use the <ph id="ph1">&lt;xref:System.Threading.Interlocked&gt;</ph> class to increment or decrement a value and store the value in a single atomic operation.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Reader-Writer Locks<ept id="p1">](../../../docs/standard/threading/reader-writer-locks.md)</ept></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Defines a lock that implements single-writer/multiple-reader semantics.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Semaphore and SemaphoreSlim<ept id="p1">](../../../docs/standard/threading/semaphore-and-semaphoreslim.md)</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Describes <ph id="ph1">&lt;xref:System.Threading.Semaphore&gt;</ph> objects and explains how to use them to control access to limited resources.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overview of Synchronization Primitives<ept id="p1">](../../../docs/standard/threading/overview-of-synchronization-primitives.md)</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compares the features of the .NET Framework classes provided for locking and synchronizing managed threads.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Barrier<ept id="p1">](../../../docs/standard/threading/barrier.md)</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Describes <ph id="ph1">&lt;xref:System.Threading.Barrier&gt;</ph> objects that implement the barrier pattern for coordination of threads in phased operations.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SpinLock<ept id="p1">](../../../docs/standard/threading/spinlock.md)</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Describes <ph id="ph1">&lt;xref:System.Threading.SpinLock&gt;</ph>, a lightweight alternative to the Monitor class for certain low-level scenarios.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SpinWait<ept id="p1">](../../../docs/standard/threading/spinwait.md)</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Describes <ph id="ph1">&lt;xref:System.Threading.SpinWait&gt;</ph>, a low level synchronization primitive that performs busy spinning prior to initiating a kernel-based wait.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Reference</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Provides reference documentation for the <bpt id="p1">**</bpt>Thread<ept id="p1">**</ept> class, which represents a managed thread, whether it came from unmanaged code or was created in a managed application.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Enables background tasks that interact with the user interface, communicating via events raised on the user-interface thread.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../../../docs/standard/io/asynchronous-file-i-o.md)</ept></source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Describes how I/O asynchronous completion ports use the thread pool to require processing only when an input/output operation completes.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Describes the recommended approach for multithreaded programming in the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph> and later.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>