<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="data-templating-overview.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03a098185a801dab4d743415625a44707bfb4379</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\data\data-templating-overview.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b70af0e6c6115a1b22634deeb4bb1c1a74cc7b4a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3e9a20862298c5c9eb9c5806e5b4f5ed529f6482</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Data Templating Overview | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Data Templating Overview</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The WPF data templating model provides you with great flexibility to define the presentation of your data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>WPF controls have built-in functionality to support the customization of data presentation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic first demonstrates how to define a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> and then introduces other data templating features, such as the selection of templates based on custom logic and the support for the display of hierarchical data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This topic focuses on data templating features and is not an introduction of data binding concepts.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For information about basic data binding concepts, see the <bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> is about the presentation of data and is one of the many features provided by the WPF styling and templating model.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For an introduction of the WPF styling and templating model, such as how to use a <ph id="ph1">&lt;xref:System.Windows.Style&gt;</ph> to set properties on controls, see the <bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition, it is important to understand <ph id="ph1">`Resources`</ph>, which are essentially what enable objects such as <ph id="ph2">&lt;xref:System.Windows.Style&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph> to be reusable.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information on resources, see <bpt id="p1">[</bpt>XAML Resources<ept id="p1">](../../../../docs/framework/wpf/advanced/xaml-resources.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Data Templating Basics</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To demonstrate why <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> is important, let's walk through a data binding example.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this example, we have a <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> that is bound to a list of <ph id="ph2">`Task`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`Task`</ph> object has a <ph id="ph2">`TaskName`</ph> (string), a <ph id="ph3">`Description`</ph> (string), a <ph id="ph4">`Priority`</ph> (int), and a property of type <ph id="ph5">`TaskType`</ph>, which is an <ph id="ph6">`Enum`</ph> with values <ph id="ph7">`Home`</ph> and <ph id="ph8">`Work`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Without a DataTemplate</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Without a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>, our <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> currently looks like this:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data templating sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/datatemplatingintro-fig1.png "</bpt>DataTemplatingIntro_fig1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>What's happening is that without any specific instructions, the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> by default calls <ph id="ph2">`ToString`</ph> when trying to display the objects in the collection.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Therefore, if the <ph id="ph1">`Task`</ph> object overrides the <ph id="ph2">`ToString`</ph> method, then the <ph id="ph3">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> displays the string representation of each source object in the underlying collection.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, if the <ph id="ph1">`Task`</ph> class overrides the <ph id="ph2">`ToString`</ph> method this way, where <ph id="ph3">`name`</ph> is the field for the <ph id="ph4">`TaskName`</ph> property:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Then the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> looks like the following:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data templating sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/datatemplatingintro-fig2.png "</bpt>DataTemplatingIntro_fig2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>However, that is limiting and inflexible.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Also, if you are binding to <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data, you wouldn't be able to override <ph id="ph2">`ToString`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Defining a Simple DataTemplate</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The solution is to define a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>One way to do that is to set the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>What you specify in your <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> becomes the visual structure of your data object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> is fairly simple.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We are giving instructions that each item appears as three <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements within a <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element is bound to a property of the <ph id="ph2">`Task`</ph> class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The underlying data for the examples in this topic is a collection of <ph id="ph1">[!INCLUDE[TLA2#tla_clr](../../../../includes/tla2sharptla-clr-md.md)]</ph> objects.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you are binding to <ph id="ph1">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> data, the fundamental concepts are the same, but there is a slight syntactic difference.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, instead of having <ph id="ph1">`Path=TaskName`</ph>, you would set <ph id="ph2">&lt;xref:System.Windows.Data.Binding.XPath%2A&gt;</ph> to <ph id="ph3">`@TaskName`</ph> (if <ph id="ph4">`TaskName`</ph> is an attribute of your <ph id="ph5">[!INCLUDE[TLA2#tla_xml](../../../../includes/tla2sharptla-xml-md.md)]</ph> node).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Now our <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> looks like the following:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data templating sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/datatemplatingintro-fig3.png "</bpt>DataTemplatingIntro_fig3<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Creating the DataTemplate as a Resource</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the above example, we defined the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> inline.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It is more common to define it in the resources section so it can be a reusable object, as in the following example:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Now you can use <ph id="ph1">`myTaskTemplate`</ph> as a resource, as in the following example:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`myTaskTemplate`</ph> is a resource, you can now use it on other controls that have a property that takes a <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As shown above, for <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> objects, such as the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, it is the <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> objects, it is the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The DataType Property</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> class has a <ph id="ph2">&lt;xref:System.Windows.DataTemplate.DataType%2A&gt;</ph> property that is very similar to the <ph id="ph3">&lt;xref:System.Windows.Style.TargetType%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Style&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Therefore, instead of specifying an <ph id="ph1">`x:Key`</ph> for the <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> in the above example, you can do the following:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> gets applied automatically to all <ph id="ph2">`Task`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Note that in this case the <ph id="ph1">`x:Key`</ph> is set implicitly.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Therefore, if you assign this <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> an <ph id="ph2">`x:Key`</ph> value, you are overriding the implicit <ph id="ph3">`x:Key`</ph> and the <ph id="ph4">&lt;xref:System.Windows.DataTemplate&gt;</ph> would not be applied automatically.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you are binding a <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> to a collection of <ph id="ph2">`Task`</ph> objects, the <ph id="ph3">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> does not use the above <ph id="ph4">&lt;xref:System.Windows.DataTemplate&gt;</ph> automatically.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This is because the binding on a <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> needs more information to distinguish whether you want to bind to an entire collection or the individual objects.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If your <ph id="ph1">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> is tracking the selection of an <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> type, you can set the <ph id="ph3">&lt;xref:System.Windows.Data.Binding.Path%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> binding to "<ph id="ph5">`/`</ph>" to indicate that you are interested in the current item.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Bind to a Collection and Display Information Based on Selection<ept id="p1">](../../../../docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Otherwise, you need to specify the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> explicitly by setting the <ph id="ph2">&lt;xref:System.Windows.Controls.ContentControl.ContentTemplate%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DataTemplate.DataType%2A&gt;</ph> property is particularly useful when you have a <ph id="ph2">&lt;xref:System.Windows.Data.CompositeCollection&gt;</ph> of different types of data objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Implement a CompositeCollection<ept id="p1">](../../../../docs/framework/wpf/data/how-to-implement-a-compositecollection.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Adding More to the DataTemplate</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Currently the data appears with the necessary information, but there's definitely room for improvement.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Let's improve on the presentation by adding a <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph>, a <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, and some <ph id="ph3">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> elements that describe the data that is being displayed.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following screenshot shows the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> with this modified <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph>:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data templating sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/datatemplatingintro-fig4.png "</bpt>DataTemplatingIntro_fig4<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>We can set <ph id="ph1">&lt;xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.Windows.HorizontalAlignment&gt;</ph> on the <ph id="ph3">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> to make sure the width of the items takes up the entire space:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>With the <ph id="ph1">&lt;xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A&gt;</ph> property set to <ph id="ph2">&lt;xref:System.Windows.HorizontalAlignment&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> now looks like this:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data templating sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/datatemplatingintro-fig5.png "</bpt>DataTemplatingIntro_fig5<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Use DataTriggers to Apply Property Values</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The current presentation does not tell us whether a <ph id="ph1">`Task`</ph> is a home task or an office task.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remember that the <ph id="ph1">`Task`</ph> object has a <ph id="ph2">`TaskType`</ph> property of type <ph id="ph3">`TaskType`</ph>, which is an enumeration with values <ph id="ph4">`Home`</ph> and <ph id="ph5">`Work`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Windows.DataTrigger&gt;</ph> sets the <ph id="ph2">&lt;xref:System.Windows.Controls.Border.BorderBrush%2A&gt;</ph> of the element named <ph id="ph3">`border`</ph> to <ph id="ph4">`Yellow`</ph> if the <ph id="ph5">`TaskType`</ph> property is <ph id="ph6">`TaskType.Home`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Our application now looks like the following.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Home tasks appear with a yellow border and office tasks appear with an aqua border:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data templating sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/datatemplatingintro-fig6.png "</bpt>DataTemplatingIntro_fig6<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In this example the <ph id="ph1">&lt;xref:System.Windows.DataTrigger&gt;</ph> uses a <ph id="ph2">&lt;xref:System.Windows.Setter&gt;</ph> to set a property value.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The trigger classes also have the <ph id="ph1">&lt;xref:System.Windows.TriggerBase.EnterActions%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.TriggerBase.ExitActions%2A&gt;</ph> properties that allow you to start a set of actions such as animations.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In addition, there is also a <ph id="ph1">&lt;xref:System.Windows.MultiDataTrigger&gt;</ph> class that allows you to apply changes based on multiple data-bound property values.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An alternative way to achieve the same effect is to bind the <ph id="ph1">&lt;xref:System.Windows.Controls.Border.BorderBrush%2A&gt;</ph> property to the <ph id="ph2">`TaskType`</ph> property and use a value converter to return the color based on the <ph id="ph3">`TaskType`</ph> value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creating the above effect using a converter is slightly more efficient in terms of performance.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Additionally, creating your own converter gives you more flexibility because you are supplying your own logic.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Ultimately, which technique you choose depends on your scenario and your preference.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For information about how to write a converter, see <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>What Belongs in a DataTemplate?</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the previous example, we placed the trigger within the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph>.<ph id="ph3">&lt;xref:System.Windows.DataTemplate.Triggers%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Setter&gt;</ph> of the trigger sets the value of a property of an element (the <ph id="ph2">&lt;xref:System.Windows.Controls.Border&gt;</ph> element) that is within the <ph id="ph3">&lt;xref:System.Windows.DataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>However, if the properties that your <ph id="ph1">`Setters`</ph> are concerned with are not properties of elements that are within the current <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph>, it may be more suitable to set the properties using a <ph id="ph3">&lt;xref:System.Windows.Style&gt;</ph> that is for the <ph id="ph4">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> class (if the control you are binding is a <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>).</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, if you want your <ph id="ph1">&lt;xref:System.Windows.Trigger&gt;</ph> to animate the <ph id="ph2">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> value of the item when a mouse points to an item, you define triggers within a <ph id="ph3">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> style.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>Introduction to Styling and Templating Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160010)</ept>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In general, keep in mind that the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> is being applied to each of the generated <ph id="ph2">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph> (for more information about how and where it is actually applied, see the <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A&gt;</ph> page.).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Your <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> is concerned with only the presentation and appearance of the data objects.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>In most cases, all other aspects of presentation, such as what an item looks like when it is selected or how the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> lays out the items, do not belong in the definition of a <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For an example, see the <bpt id="p1">[</bpt>Styling and Templating an ItemsControl<ept id="p1">](#DataTemplating_ItemsControl)</ept> section.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Choosing a DataTemplate Based on Properties of the Data Object</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">[</bpt>The DataType Property<ept id="p1">](#Styling_DataType)</ept> section, we discussed that you can define different data templates for different data objects.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>That is especially useful when you have a <ph id="ph1">&lt;xref:System.Windows.Data.CompositeCollection&gt;</ph> of different types or collections with items of different types.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Use DataTriggers to Apply Property Values<ept id="p1">](#DataTrigger_to_Apply_Property_Values)</ept> section, we have shown that if you have a collection of the same type of data objects you can create a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> and then use triggers to apply changes based on the property values of each data object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>However, triggers allow you to apply property values or start animations but they don't give you the flexibility to reconstruct the structure of your data objects.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Some scenarios may require you to create a different <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> for data objects that are of the same type but have different properties.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>For example, when a <ph id="ph1">`Task`</ph> object has a <ph id="ph2">`Priority`</ph> value of <ph id="ph3">`1`</ph>, you may want to give it a completely different look to serve as an alert for yourself.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In that case, you create a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> for the display of the high-priority <ph id="ph2">`Task`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Let's add the following <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> to the resources section:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Notice this example uses the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>.<ph id="ph2">&lt;xref:System.Windows.FrameworkTemplate.Resources%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Resources defined in that section are shared by the elements within the <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To supply logic to choose which <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> to use based on the <ph id="ph2">`Priority`</ph> value of the data object, create a subclass of <ph id="ph3">&lt;xref:System.Windows.Controls.DataTemplateSelector&gt;</ph> and override the <ph id="ph4">&lt;xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A&gt;</ph> method provides logic to return the appropriate template based on the value of the <ph id="ph2">`Priority`</ph> property.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The template to return is found in the resources of the enveloping <ph id="ph1">&lt;xref:System.Windows.Window&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>We can then declare the <ph id="ph1">`TaskListDataTemplateSelector`</ph> as a resource:</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To use the template selector resource, assign it to the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> calls the <ph id="ph2">&lt;xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A&gt;</ph> method of the <ph id="ph3">`TaskListDataTemplateSelector`</ph> for each of the items in the underlying collection.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The call passes the data object as the item parameter.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> that is returned by the method is then applied to that data object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>With the template selector in place, the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> now appears as follows:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Data templating sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/datatemplatingintro-fig7.png "</bpt>DataTemplatingIntro_fig7<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>This concludes our discussion of this example.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For the complete sample, see <bpt id="p1">[</bpt>Introduction to Data Templating Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=160009)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Styling and Templating an ItemsControl</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Even though the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> is not the only control type that you can use a <ph id="ph2">&lt;xref:System.Windows.DataTemplate&gt;</ph> with, it is a very common scenario to bind an <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> to a collection.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>What Belongs in a DataTemplate<ept id="p1">](#what_belongs_in_datatemplate)</ept> section we discussed that the definition of your <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> should only be concerned with the presentation of data.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>In order to know when it is not suitable to use a <ph id="ph1">&lt;xref:System.Windows.DataTemplate&gt;</ph> it is important to understand the different style and template properties provided by the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The following example is designed to illustrate the function of each of these properties.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> in this example is bound to the same <ph id="ph2">`Tasks`</ph> collection as in the previous example.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>For demonstration purposes, the styles and templates in this example are all declared inline.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The following is a screenshot of the example when it is rendered:</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>ItemsControl example screenshot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databinding-itemscontrolproperties.png "</bpt>DataBinding_ItemsControlProperties<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Note that instead of using the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A&gt;</ph>, you can use the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Refer to the previous section for an example.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Similarly, instead of using the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A&gt;</ph>, you have the option to use the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.ItemContainerStyleSelector%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Two other style-related properties of the <ph id="ph1">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> that are not shown here are <ph id="ph2">&lt;xref:System.Windows.Controls.ItemsControl.GroupStyle%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl.GroupStyleSelector%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Support for Hierarchical Data</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>So far we have only looked at how to bind to and display a single collection.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Sometimes you have a collection that contains other collections.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.HierarchicalDataTemplate&gt;</ph> class is designed to be used with <ph id="ph2">&lt;xref:System.Windows.Controls.HeaderedItemsControl&gt;</ph> types to display such data.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>In the following example, <ph id="ph1">`ListLeagueList`</ph> is a list of <ph id="ph2">`League`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`League`</ph> object has a <ph id="ph2">`Name`</ph> and a collection of <ph id="ph3">`Division`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`Division`</ph> has a <ph id="ph2">`Name`</ph> and a collection of <ph id="ph3">`Team`</ph> objects, and each <ph id="ph4">`Team`</ph> object has a <ph id="ph5">`Name`</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The example shows that with the use of <ph id="ph1">&lt;xref:System.Windows.HierarchicalDataTemplate&gt;</ph>, you can easily display list data that contains other lists.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The following is a screenshot of the example.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>HierarchicalDataTemplate sample screen shot<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/data/media/databinding-hierarchicaldatatemplate.png "</bpt>DataBinding_HierarchicalDataTemplate<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-data-binding.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Find DataTemplate-Generated Elements<ept id="p1">](../../../../docs/framework/wpf/data/how-to-find-datatemplate-generated-elements.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Styling and Templating<ept id="p1">](../../../../docs/framework/wpf/controls/styling-and-templating.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Binding Overview<ept id="p1">](../../../../docs/framework/wpf/data/data-binding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>GridView Column Header Styles and Templates Overview<ept id="p1">](../../../../docs/framework/wpf/controls/gridview-column-header-styles-and-templates-overview.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>