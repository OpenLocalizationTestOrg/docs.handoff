<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77c0fd62e0a6d959db29bb236992b1366e2c4abd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\asynchronous-programming-patterns\implementing-the-event-based-asynchronous-pattern.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa6e5ed9f35dfe0fe26e3027c420bb2b4dcd9673</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1911c006d69449f4d15ad9cc8e2b062f33d3e13</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementing the Event-based Asynchronous Pattern | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing the Event-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you are writing a class with some operations that may incur noticeable delays, consider giving it asynchronous functionality by implementing <bpt id="p1">[</bpt>Event-based Asynchronous Pattern Overview<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The Event-based Asynchronous Pattern provides a standardized way to package a class that has asynchronous features.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If implemented with helper classes like <ph id="ph1">&lt;xref:System.ComponentModel.AsyncOperationManager&gt;</ph>, your class will work correctly under any application model, including <ph id="ph2">[!INCLUDE[vstecasp](../../../includes/vstecasp-md.md)]</ph>, Console applications, and Windows Forms applications.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an example that implements the Event-based Asynchronous Pattern, see <bpt id="p1">[</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/component-that-supports-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For simple asynchronous operations, you may find the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> component suitable.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph>, see <bpt id="p1">[</bpt>How to: Run an Operation in the Background<ept id="p1">](../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following list describes the features of the Event-based Asynchronous Pattern discussed in this topic.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Opportunities for Implementing the Event-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Naming Asynchronous Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Optionally Support Cancellation</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Optionally Support the IsBusy Property</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Optionally Provide Support for Progress Reporting</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Optionally Provide Support for Returning Incremental Results</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Handling Out and Ref Parameters in Methods</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Opportunities for Implementing the Event-based Asynchronous Pattern</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Consider implementing the Event-based Asynchronous Pattern when:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Clients of your class do not need <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> and <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> objects available for asynchronous operations, meaning that polling and <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> will need to be built up by the client.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You want asynchronous operations to be managed by the client with the familiar event/delegate model.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Any operation is a candidate for an asynchronous implementation, but those you expect to incur long latencies should be considered.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Especially appropriate are operations in which clients call a method and are notified on completion, with no further intervention required.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Also appropriate are operations which run continuously, periodically notifying clients of progress, incremental results, or state changes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information on deciding when to support the Event-based Asynchronous Pattern, see <bpt id="p1">[</bpt>Deciding When to Implement the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/deciding-when-to-implement-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Naming Asynchronous Methods</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For each synchronous method <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> for which you want to provide an asynchronous counterpart:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Define a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph> method that:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Takes the same parameters as the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Accepts multiple invocations.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Optionally define a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph> overload, identical to <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Async`</ph>, but with an additional object-valued parameter called <ph id="ph3">`userState`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Do this if you're prepared to manage multiple concurrent invocations of your method, in which case the <ph id="ph1">`userState`</ph> value will be delivered back to all event handlers to distinguish invocations of the method.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You may also choose to do this simply as a place to store user state for later retrieval.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For each separate <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph> method signature:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Define the following event in the same class as the method:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Define the following delegate and <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>These will likely be defined outside of the class itself, but in the same namespace.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Ensure that the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`CompletedEventArgs`</ph> class exposes its members as read-only properties, and not fields, as fields prevent data binding.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Do not define any <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph>-derived classes for methods that do not produce results.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Simply use an instance of <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> itself.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It is perfectly acceptable, when feasible and appropriate, to reuse delegate and <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> types.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this case, the naming will not be as consistent with the method name, since a given delegate and <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> won't be tied to a single method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Optionally Support Cancellation</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If your class will support canceling asynchronous operations, cancellation should be exposed to the client as described below.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note that there are two decision points that need to be reached before defining your cancellation support:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Does your class, including future anticipated additions to it, have only one asynchronous operation that supports cancellation?</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Can the asynchronous operations that support cancellation support multiple pending operations?</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>That is, does the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph> method take a <ph id="ph2">`userState`</ph> parameter, and does it allow multiple invocations before waiting for any to finish?</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use the answers to these two questions in the table below to determine what the signature for your cancellation method should be.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Visual Basic</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Multiple Simultaneous Operations Supported</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Only One Operation at a Time</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>One Async Operation in entire class</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Multiple Async Operations in class</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>C#</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Multiple Simultaneous Operations Supported</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Only One Operation at a Time</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>One Async Operation in entire class</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Multiple Async Operations in class</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you define the <ph id="ph1">`CancelAsync(object userState)`</ph> method, clients must be careful when choosing their state values to make them capable of distinguishing among all asynchronous methods invoked on the object, and not just between all invocations of a single asynchronous method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The decision to name the single-async-operation version <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`AsyncCancel`</ph> is based on being able to more easily discover the method in a design environment like Visual Studio's IntelliSense.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This groups the related members and distinguishes them from other members that have nothing to do with asynchronous functionality.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you expect that there may be additional asynchronous operations added in subsequent versions, it is better to define <ph id="ph1">`CancelAsync`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Do not define multiple methods from the table above in the same class.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>That will not make sense, or it will clutter the class interface with a proliferation of methods.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>These methods typically will return immediately, and the operation may or may not actually cancel.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the event handler for the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Completed`</ph> event, the <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`CompletedEventArgs`</ph> object contains a <ph id="ph3">`Cancelled`</ph> field, which clients can use to determine whether the cancellation occurred.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Abide by the cancellation semantics described in <bpt id="p1">[</bpt>Best Practices for Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Optionally Support the IsBusy Property</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If your class does not support multiple concurrent invocations, consider exposing an <ph id="ph1">`IsBusy`</ph> property.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This allows developers to determine whether a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`Async`</ph> method is running without catching an exception from the <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Async`</ph> method.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Abide by the <ph id="ph1">`IsBusy`</ph> semantics described in <bpt id="p1">[</bpt>Best Practices for Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Optionally Provide Support for Progress Reporting</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>It is frequently desirable for an asynchronous operation to report progress during its operation.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The Event-based Asynchronous Pattern provides a guideline for doing so.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Optionally define an event to be raised by the asynchronous operation and invoked on the appropriate thread.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> object carries an integer-valued progress indicator that is expected to be between 0 and 100.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Name this event as follows:</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ProgressChanged`</ph> if the class has multiple asynchronous operations (or is expected to grow to include multiple asynchronous operations in future versions);</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> <ph id="ph1">`ProgressChanged`</ph> if the class has a single asynchronous operation.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This naming choice parallels that made for the cancellation method, as described in the Optionally Support Cancellation section.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This event should use the <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventHandler&gt;</ph> delegate signature and the <ph id="ph2">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Alternatively, if a more domain-specific progress indicator can be provided (for instance, bytes read and total bytes for a download operation), then you should define a derived class of <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Note that there is only one <ph id="ph1">`ProgressChanged`</ph> or <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`ProgressChanged`</ph> event for the class, regardless of the number of asynchronous methods it supports.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Clients are expected to use the <ph id="ph1">`userState`</ph> object that is passed to the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`Async`</ph> methods to distinguish among progress updates on multiple concurrent operations.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>There may be situations in which multiple operations support progress and each returns a different indicator for progress.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In this case, a single <ph id="ph1">`ProgressChanged`</ph> event is not appropriate, and you may consider supporting multiple <ph id="ph2">`ProgressChanged`</ph> events.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In this case use a naming pattern of <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`ProgressChanged`</ph> for each <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Async`</ph> method.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Abide by the progress-reporting semantics described <bpt id="p1">[</bpt>Best Practices for Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Optionally Provide Support for Returning Incremental Results</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Sometimes an asynchronous operation can return incremental results prior to completion.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>There are a number of options that can be used to support this scenario.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Some examples follow.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Single-operation Class</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If your class only supports a single asynchronous operation, and that operation is able to return incremental results, then:</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Extend the <ph id="ph1">&lt;xref:System.ComponentModel.ProgressChangedEventArgs&gt;</ph> type to carry the incremental result data, and define a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`ProgressChanged`</ph> event with this extended data.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Raise this <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`ProgressChanged`</ph> event when there is an incremental result to report.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>This solution applies specifically to a single-async-operation class because there is no problem with the same event occurring to return incremental results on "all operations", as the <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`ProgressChanged`</ph> event does.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Multiple-operation Class with Homogeneous Incremental Results</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>In this case, your class supports multiple asynchronous methods, each capable of returning incremental results, and these incremental results all have the same type of data.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Follow the model described above for single-operation classes, as the same <ph id="ph1">&lt;xref:System.EventArgs&gt;</ph> structure will work for all incremental results.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Define a <ph id="ph1">`ProgressChanged`</ph> event instead of a <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph2">`ProgressChanged`</ph> event, since it applies to multiple asynchronous methods.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Multiple-operation Class with Heterogeneous Incremental Results</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If your class supports multiple asynchronous methods, each returning a different type of data, you should:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Separate your incremental result reporting from your progress reporting.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Define a separate <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`ProgressChanged`</ph> event with appropriate <ph id="ph2">&lt;xref:System.EventArgs&gt;</ph> for each asynchronous method to handle that method's incremental result data.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Invoke that event handler on the appropriate thread as described in <bpt id="p1">[</bpt>Best Practices for Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Handling Out and Ref Parameters in Methods</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Although the use of <ph id="ph1">`out`</ph> and <ph id="ph2">`ref`</ph> is, in general, discouraged in the .NET Framework, here are the rules to follow when they are present:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Given a synchronous method <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`out`</ph> parameters to <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> should not be part of <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Async`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Instead, they should be part of <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept><ph id="ph1">`CompletedEventArgs`</ph> with the same name as its parameter equivalent in <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept> (unless there is a more appropriate name).</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ref`</ph> parameters to <bpt id="p1">*</bpt>MethodName<ept id="p1">*</ept> should appear as part of <bpt id="p2">*</bpt>MethodName<ept id="p2">*</ept><ph id="ph2">`Async`</ph>, and as part of <bpt id="p3">*</bpt>MethodName<ept id="p3">*</ept><ph id="ph3">`CompletedEventArgs`</ph> with the same name as its parameter equivalent in <bpt id="p4">*</bpt>MethodName<ept id="p4">*</ept> (unless there is a more appropriate name).</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For example, given:</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Your asynchronous method and its <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs&gt;</ph> class would look like this:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Implement a Component That Supports the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/component-that-supports-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Run an Operation in the Background<ept id="p1">](../../../docs/framework/winforms/controls/how-to-run-an-operation-in-the-background.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Implement a Form That Uses a Background Operation<ept id="p1">](../../../docs/framework/winforms/controls/how-to-implement-a-form-that-uses-a-background-operation.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Deciding When to Implement the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/deciding-when-to-implement-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Multithreaded Programming with the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/multithreaded-programming-with-the-event-based-asynchronous-pattern.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Best Practices for Implementing the Event-based Asynchronous Pattern<ept id="p1">](../../../docs/standard/asynchronous-programming-patterns/best-practices-for-implementing-the-event-based-asynchronous-pattern.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>