<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14b871d220d4a034172a7e52a241491fd1c2368a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wcf\migrating-from-net-remoting-to-wcf.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae64e3bb3e9f8a52567d27a48a2354d1e07c7d79</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dc04487c1e99cf29b1f9c940f4f8742bfb38e89d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Migrating from .NET Remoting to WCF | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Migrating from .NET Remoting to WCF</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes how to migrate an application that uses .NET Remoting to use Windows Communication Foundation (WCF).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It compares similar concepts between these products and then describes how to accomplish several common Remoting scenarios in WCF.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET Remoting is a legacy product that is supported only for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It is not secure across mixed-trust environments because it cannot maintain the separate trust levels between client and server.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, you should never expose a .NET Remoting endpoint to the Internet or to untrusted clients.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We recommend existing Remoting applications be migrated to newer and more secure technologies.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the applicationâ€™s design uses only HTTP and is RESTful, we recommend ASP.NET Web API.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see ASP.NET Web API.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the application is based on SOAP or requires non-Http protocols such as TCP, we recommend WCF.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Comparing .NET Remoting to WCF<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Compare_Top)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Server Implementation Comparison<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Server_Comp)</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Client Implementation Comparison<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Client_Comp)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Serialization Usage<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Serialization_Usage)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Exception Handling Capabilities<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Exception_Handling)</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Considerations<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Security_Considerations)</ept></source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migrating to WCF<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Migrating_Top)</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Why Migrate from Remoting to WCF?<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Why_Migrate)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration Recommendations<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Migration_Recommendations)</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Migration Scenarios<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Migration_Scenarios)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Summary<ept id="p1">](../../../docs/framework/wcf/migrating-from-net-remoting-to-wcf.md#Summary)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Comparing .NET Remoting to WCF</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This section compares the basic building blocks of .NET Remoting with their WCF equivalents.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>We will use these building blocks later to create some common client-server scenarios in WCF.The following chart summarizes the main similarities and differences between .NET Remoting and WCF.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>.NET Remoting</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>WCF</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Server type</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Subclass MarshalByRefObject</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Mark with [ServiceContract] attribute</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Service operations</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Public methods on server type</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Mark with [OperationContract] attribute</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ISerializable or [Serializable]</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DataContractSerializer or XmlSerializer</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Objects passed</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>By-value or by-reference</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>By-value only</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Errors/exceptions</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Any serializable exception</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>FaultContract<ph id="ph1">\&lt;</ph>TDetail&gt;</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Client proxy objects</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Strongly typed transparent proxies are created automatically from MarshalByRefObjects</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Strongly typed proxies are generated on-demand using ChannelFactory<ph id="ph1">\&lt;</ph>TChannel&gt;</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Platform required</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Both client and server must use Microsoft OS and .NET</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Cross-platform</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Message format</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Private</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Industry standards (SOAP, WS-*, etc.)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Server Implementation Comparison</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Creating a Server in .NET Remoting</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>.NET Remoting server types must derive from MarshalByRefObject and define methods the client can call, like the following:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The public methods of this server type become the public contract available to clients.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>There is no separation between the serverâ€™s public interface and its implementation â€“ one type handles both.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Once the server type has been defined, it can be made available to clients, like in the following example:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>There are many ways to make the Remoting type available as a server, including using configuration files.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This is just one example.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creating a Server in WCF</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The equivalent step in WCF involves creating two types -- the public "service contract" and the concrete implementation.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first is declared as an interface marked with [ServiceContract].</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Methods available to clients are marked with [OperationContract]:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The serverâ€™s implementation is defined in a separate concrete class, like in the following example:</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Once these types have been defined, the WCF server can be made available to clients, like in the following example:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>TCP is used in both examples to keep them as similar as possible.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Refer to the scenario walk-throughs later in this topic for examples using HTTP.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>There are many ways to configure and to host WCF services.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This is just one example, known as "self-hosted".</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Define a Service Contract<ept id="p1">](../../../docs/framework/wcf/how-to-define-a-wcf-service-contract.md)</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Configuring Services Using Configuration Files<ept id="p1">](../../../docs/framework/wcf/configuring-services-using-configuration-files.md)</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Hosting Services<ept id="p1">](../../../docs/framework/wcf/hosting-services.md)</ept></source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Client Implementation Comparison</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Creating a Client in .NET Remoting</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Once a .NET Remoting server object has been made available, it can be consumed by clients, like in the following example:</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The RemotingServer instance returned from Activator.GetObject() is known as a "transparent proxy."</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It implements the public API for the RemotingServer type on the client, but all the methods call the server object running in a different process or machine.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Creating a Client in WCF</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The equivalent step in WCF involves using a channel factory to create the proxy explicitly.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Like Remoting, the proxy object can be used to invoke operations on the server, like in the following example:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This example shows programming at the channel level because it is most similar to the Remoting example.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Also available is the <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept> approach in Visual Studio that generates code to simplify client programming.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Client Channel-Level Programming<ept id="p1">](../../../docs/framework/wcf/extending/client-channel-level-programming.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Add, Update, or Remove a Service Reference<ept id="p1">](https://docs.microsoft.com/visualstudio/data-tools/how-to-add-update-or-remove-a-wcf-data-service-reference)</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Serialization Usage</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Both .NET Remoting and WCF use serialization to send objects between client and server, but they differ in these important ways:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>They use different serializers and conventions to indicate what to serialize.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>.NET Remoting supports "by reference" serialization that allows method or property access on one tier to execute code on the other tier, which is across security boundaries.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This capability exposes security vulnerabilities and is one of the main reasons why Remoting endpoints should never be exposed to untrusted clients.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Serialization used by Remoting is opt-out (explicitly exclude what not to serialize) and WCF serialization is opt-in (explicitly mark which members to serialize).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Serialization in .NET Remoting</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>.NET Remoting supports two ways to serialize and deserialize objects between the client and server:</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>By value<ept id="p1">*</ept> â€“ the values of the object are serialized across tier boundaries, and a new instance of that object is created on the other tier.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Any calls to methods or properties of that new instance execute only locally and do not affect the original object or tier.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>By reference<ept id="p1">*</ept> â€“ a special "object reference" is serialized across tier boundaries.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>When one tier interacts with methods or properties of that object, it communicates back to the original object on the original tier.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>By-reference objects can flow in either direction â€“ server to client, or client to server.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>By-value types in Remoting are marked with the [Serializable] attribute or implement ISerializable, like in the following example:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>By-reference types derive from the MarshalByRefObject class, like in the following example:</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>It is extremely important to understand the implications of Remotingâ€™s by-reference objects.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If either tier (client or server) sends a by-reference object to the other tier, all method calls execute back on the tier owning the object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, a client calling methods on a by-reference object returned by the server will execute code on the server.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Similarly, a server calling methods on a by-reference object provided by the client will execute code back on the client.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For this reason, the use of .NET Remoting is recommended only within fully-trusted environments.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Exposing a public .NET Remoting endpoint to untrusted clients will make a Remoting server vulnerable to attack.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Serialization in WCF</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>WCF supports only by-value serialization.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The most common way to define a type to exchange between client and server is like in the following example:</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The [DataContract] attribute identifies this type as one that can be serialized and deserialized between client and server.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The [DataMember] attribute identifies the individual properties or fields to serialize.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When WCF sends an object across tiers, it serializes only the values and creates a new instance of the object on the other tier.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Any interactions with the values of the object occur only locally â€“ they do not communicate with the other tier the way .NET Remoting by-reference objects do.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Serialization and Deserialization<ept id="p1">](../../../docs/framework/wcf/feature-details/serialization-and-deserialization.md)</ept></source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Serialization in Windows Communication Foundation<ept id="p1">](http://msdn.microsoft.com/magazine/cc163569.aspx)</ept></source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Exception Handling Capabilities</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Exceptions in .NET Remoting</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Exceptions thrown by a Remoting server are serialized, sent to the client, and thrown locally on the client like any other exception.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Custom exceptions can be created by sub-classing the Exception type and marking it with [Serializable].</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Most framework exceptions are already marked in this way, allowing most to be thrown by the server, serialized, and re-thrown on the client.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Though this design is convenient during development, server-side information can inadvertently be disclosed to the client.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This is one of many reasons Remoting should be used only in fully-trusted environments.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Exceptions and Faults in WCF</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>WCF does not allow arbitrary exception types to be returned from the server to the client because it could lead to inadvertent information disclosure.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If a service operation throws an unexpected exception, it causes a general purpose FaultException to be thrown on the client.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>This exception does not carry any information why or where the problem occurred, and for some applications this is sufficient.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Applications that need to communicate richer error information to the client do this by defining a fault contract.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To do this, first create a [DataContract] type to carry the fault information.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Specify the fault contract to use for each service operation.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The server reports error conditions by throwing a FaultException.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>And whenever the client makes a request to the server, it can catch faults as normal exceptions.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>For more information about fault contracts, see <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Security in .NET Remoting</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Some .NET Remoting channels support security features such as authentication and encryption at the channel layer (IPC and TCP).</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The HTTP channel relies on Internet Information Services (IIS) for both authentication and encryption.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Despite this support, you should consider .NET Remoting an unsecure communication protocol and use it only within fully-trusted environments.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Never expose a public Remoting endpoint to the Internet or untrusted clients.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Security in WCF</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>WCF was designed with security in mind, in part to address the kinds of vulnerabilities found in .NET Remoting.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>WCF offers security at both the transport and message level, and offers many options for authentication, authorization, encryption, and so on.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>For more information, see the following topics:</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security<ept id="p1">](../../../docs/framework/wcf/feature-details/security.md)</ept></source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WCF Security Guidance<ept id="p1">](http://wcfsecurity.codeplex.com/)</ept></source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Migrating to WCF</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Why Migrate from Remoting to WCF?</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET Remoting is a legacy product.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>As described in <bpt id="p1">[</bpt>.NET Remoting<ept id="p1">](http://msdn.microsoft.com/library/vstudio/72x4h507\(v=vs.100\).aspx)</ept>, it is considered a legacy product and is not recommended for new development.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>WCF or ASP.NET Web API are recommended for new and existing applications.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WCF uses cross-platform standards.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>WCF was designed with cross-platform interoperability in mind and supports many industry standards (SOAP, WS-Security, WS-Trust, etc.).</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>A WCF service can interoperate with clients running on operating systems other than Windows.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remoting was designed primarily for environments where both the server and client applications run using the .NET framework on a Windows operating system.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WCF has built-in security.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>WCF was designed with security in mind and offers many options for authentication, transport level security, message level security, etc. Remoting was designed to make it easy for applications to interoperate but was not designed to be secure in non-trusted environments.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>WCF was designed to work in both trusted and non-trusted environments.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Migration Recommendations</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The following are the recommended steps to migrate from .NET Remoting to WCF:</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create the service contract.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Define your service interface types, and mark them with the [ServiceContract] attribute.Mark all the methods the clients will be allowed to call with [OperationContract].</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create the data contract.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Define the data types that will be exchanged between server and client, and mark them with the [DataContract] attribute.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Mark all the fields and properties the client will be allowed to use with [DataMember].</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Create the fault contract (optional).<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Create the types that will be exchanged between server and client when errors are encountered.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Mark these types with [DataContract] and [DataMember] to make them serializable.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>For all service operations you marked with [OperationContract], also mark them with [FaultContract] to indicate which errors they may return.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Configure and host the service.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Once the service contract has been created, the next step is to configure a binding to expose the service at an endpoint.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Endpoints: Addresses, Bindings, and Contracts<ept id="p1">](../../../docs/framework/wcf/feature-details/endpoints-addresses-bindings-and-contracts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Once a Remoting application has been migrated to WCF, it is still important to remove dependencies on .NET Remoting.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>This ensures that any Remoting vulnerabilities are removed from the application.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>These steps include the following:</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Discontinue use of MarshalByRefObject.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The MarshalByRefObject type exists only for Remoting and is not used by WCF.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Any application types that sub-class MarshalByRefObject should be removed or changed.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The MarshalByRefObject type exists only for Remoting and is not used by WCF.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Any application types that sub-class MarshalByRefObject should be removed or changed.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Discontinue use of [Serializable] and ISerializable.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The [Serializable] attribute and ISerializable interface were originally designed to serialize types within trusted environments, and they are used by Remoting.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>WCF serialization relies on types being marked with [DataContract] and [DataMember].</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Data types used by an application should be modified to use [DataContract] and not to use ISerializable or [Serializable].</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The [Serializable] attribute and ISerializable interface were originally designed to serialize types within trusted environments, and they are used by Remoting.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>WCF serialization relies on types being marked with [DataContract] and [DataMember].</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Data types used by an application should be modified to use [DataContract] and not to use ISerializable or [Serializable].</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Migration Scenarios</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Now letâ€™s see how to accomplish the following common Remoting scenarios in WCF:</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Server returns an object by-value to the client</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Server returns an object by-reference to the client</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Client sends an object by-value to the server</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Sending an object by-reference from the client to the server is not allowed in WCF.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>When reading through these scenarios, assume our baseline interfaces for .NET Remoting look like the following example.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The .NET Remoting implementation is not important here because we want to illustrate only how to use WCF to implement equivalent functionality.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Scenario 1: Service Returns an Object by Value</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>This scenario demonstrates a server returning an object to the client by value.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>WCF always returns objects from the server by value, so the following steps simply describe how to build a normal WCF service.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Start by defining a public interface for the WCF service and mark it with the [ServiceContract] attribute.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>We use [OperationContract] to identify the server-side methods our client will call.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The next step is to create the data contract for this service.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>We do this by creating classes (not interfaces) marked with the [DataContract] attribute.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The individual properties or fields we want visible to both client and server are marked with [DataMember].</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>If we want derived types to be allowed, we must use the [KnownType] attribute to identify them.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The only types WCF will allow to be serialized or deserialized for this service are those in the service interface and these "known types".</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Attempting to exchange any other type not in this list will be rejected.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Next, we provide the implementation for the service interface.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>To run the WCF service, we need to declare an endpoint that exposes that service interface at a specific URL using a specific WCF binding.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>This is typically done by adding the following sections to the server projectâ€™s web.config file.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The WCF service can then be started with the following code:</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>When this ServiceHost is started, it uses the web.config file to establish the proper contract, binding and endpoint.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>For more information about configuration files, see <bpt id="p1">[</bpt>Configuring Services Using Configuration Files<ept id="p1">](../../../docs/framework/wcf/configuring-services-using-configuration-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>This style of starting the server is known as self-hosting.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>To learn more about other choices for hosting WCF services, see <bpt id="p1">[</bpt>Hosting Services<ept id="p1">](../../../docs/framework/wcf/hosting-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The client projectâ€™s app.config must declare matching binding information for the serviceâ€™s endpoint.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The easiest way to do this in Visual Studio is to use <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept>, which will automatically update the app.config file.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Alternatively, these same changes can be added manually.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>For more information about using <bpt id="p1">**</bpt>Add Service Reference<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>How to: Add, Update, or Remove a Service Reference<ept id="p2">](https://docs.microsoft.com/visualstudio/data-tools/how-to-add-update-or-remove-a-wcf-data-service-reference)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Now we can call the WCF service from the client.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>We do this by creating a channel factory for that service, asking it for a channel, and directly calling the method we want on that channel.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>We can do this because the channel implements the serviceâ€™s interface and handles the underlying request/reply logic for us.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The return value from that method call is the deserialized copy of the serverâ€™s response.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Objects returned by WCF from the server to the client are always by value.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The objects are deserialized copies of the data sent by the server.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The client can call methods on these local copies without any danger of invoking server code through callbacks.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Scenario 2: Server Returns an Object By Reference</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>This scenario demonstrates the server providing an object to the client by reference.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>In .NET Remoting, this is handled automatically for any type derived from MarshalByRefObject, which is serialized by-reference.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>An example of this scenario is allowing multiple clients to have independent sessionful server-side objects.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>As previously mentioned, objects returned by a WCF service are always by value, so there is no direct equivalent of a by-reference object, but it is possible to achieve something similar to by-reference semantics using an <ph id="ph1">&lt;xref:System.ServiceModel.EndpointAddress10&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>This is a serializable by-value object that can be used by the client to obtain a sessionful by-reference object on the server.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>This enables the scenario of having multiple clients with independent sessionful server-side objects.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>First, we need to define a WCF service contract that corresponds to the sessionful object itself.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Notice that the sessionful object is marked with [ServiceContract], making it a normal WCF service interface.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Setting the SessionMode property indicates it will be a sessionful service.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>In WCF, a session is a way of correlating multiple messages sent between two endpoints.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>This means that once a client obtains a connection to this service, a session will be established between the client and the server.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The client will use a single unique instance of the server-side object for all its interactions within this single session.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Next, we need to provide the implementation of this service interface.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>By denoting it with [ServiceBehavior] and setting the InstanceContextMode, we tell WCF we want to use a unique instance of this type for an each session.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Now we need a way to obtain an instance of this sessionful object.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>We do this by creating another WCF service interface that returns an EndpointAddress10 object.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>This is a serializable form of an endpoint that the client can use to create the sessionful object.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>And we implement this WCF service:</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>This implementation maintains a singleton channel factory to create sessionful objects.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>When GetInstanceAddress() is called, it creates a channel and creates an EndpointAddress10 object that effectively points to the remote address associated with this channel.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>EndpointAddress10 is simply a data type that can be returned to the client by-value.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>We need to modify the serverâ€™s configuration file by doing the following two things as shown in the example below:</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Declare a <ph id="ph1">\&lt;</ph>client&gt; section that describes the endpoint for the sessionful object.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>This is necessary because the server also acts as a client in this situation.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Declare endpoints for the factory and sessionful object.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>This is necessary to allow the client to communicate with the service endpoints to acquire the EndpointAddress10 and to create the sessionful channel.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>And then we can start these services:</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>We configure the client by declaring these same endpoints in its projectâ€™s app.config file.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>In order to create and use this sessionful object, the client must do the following steps:</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Create a channel to the ISessionBoundFactory service.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Use that channel to invoke that service to obtain an EndpointAddress10.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Use the EndpointAddress10 to create a channel to obtain a sessionful object.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Interact with the sessionful object to demonstrate it remains the same instance across multiple calls.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>WCF always returns objects by value, but it is possible to support the equivalent of by-reference semantics through the use of EndpointAddress10.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>This permits the client to request a sessionful WCF service instance, after which it can interact with it like any other WCF service.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Scenario 3: Client Sends Server a By-Value Instance</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>This scenario demonstrates the client sending a non-primitive object instance to the server by value.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Because WCF only sends objects by value, this scenario demonstrates normal WCF usage.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Use the same WCF Service from Scenario 1.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Use the client to create a new by-value object (Customer), create a channel to communicate with the ICustomerService service, and send the object to it.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The customer object will be serialized, and sent to the server, where it is deserialized into a new copy of that object.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>This code also illustrates sending a derived type (PremiumCustomer).</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The service interface expects a Customer object, but the [KnownType] attribute on the Customer class indicated PremiumCustomer was also allowed.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>WCF will fail any attempt to serialize or deserialize any other type through this service interface.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Normal WCF exchanges of data are by value.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>This guarantees that invoking methods on one of these data objects executes only locally â€“ it will not invoke code on the other tier.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>While it is possible to achieve something like by-reference objects returned <bpt id="p1">*</bpt>from<ept id="p1">*</ept> the server, it is not possible for a client to pass a by-reference object <bpt id="p2">*</bpt>to<ept id="p2">*</ept> the server.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>A scenario that requires a conversation back and forth between client and server can be achieved in WCF using a duplex service.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Duplex Services<ept id="p1">](../../../docs/framework/wcf/feature-details/duplex-services.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>.NET Remoting is a communication framework intended to be used only within fully-trusted environments.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>It is a legacy product and supported only for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>It should not be used to build new applications.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Conversely, WCF was designed with security in mind and is recommended for new and existing applications.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Microsoft recommends that existing Remoting applications be migrated to use WCF or ASP.NET Web API instead.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>