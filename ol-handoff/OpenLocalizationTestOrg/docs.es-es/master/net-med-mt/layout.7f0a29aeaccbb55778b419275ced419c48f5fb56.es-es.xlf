<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44d35f4f745c90c27d58f080ec3af92af93a6d61</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\wpf\advanced\layout.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2dd57b0f6870355252fcf32491ec67e70daf497</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2b254eabe43bb58d6b8168cc072d723189cc4f5e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Layout | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Layout</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes the <ph id="ph1">[!INCLUDE[TLA#tla_winclient](../../../../includes/tlasharptla-winclient-md.md)]</ph> layout system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Understanding how and when layout calculations occur is essential for creating user interfaces in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic contains the following sections:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Element Bounding Boxes<ept id="p1">](#LayoutSystem_BoundingBox)</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The Layout System<ept id="p1">](#LayoutSystem_Overview)</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Measuring and Arranging Children<ept id="p1">](#LayoutSystem_Measure_Arrange)</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Panel Elements and Custom Layout Behaviors<ept id="p1">](#LayoutSystem_PanelsCustom)</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout Performance Considerations<ept id="p1">](#LayoutSystem_Performance)</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Sub-pixel Rendering and Layout Rounding<ept id="p1">](#LayoutSystem_LayoutRounding)</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>What's Next<ept id="p1">](#LayoutSystem_whatsnext)</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Element Bounding Boxes</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When thinking about layout in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph>, it is important to understand the bounding box that surrounds all elements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> consumed by the layout system can be thought of as a rectangle that is slotted into the layout.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Primitives.LayoutInformation&gt;</ph> class returns the boundaries of an element's layout allocation, or slot.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The size of the rectangle is determined by calculating the available screen space, the size of any constraints, layout-specific properties (such as margin and padding), and the individual behavior of the parent <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Processing this data, the layout system is able to calculate the position of all the children of a particular <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is important to remember that sizing characteristics defined on the parent element, such as a <ph id="ph1">&lt;xref:System.Windows.Controls.Border&gt;</ph>, affect its children.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following illustration shows a simple layout.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>A typical Grid, no bounding box superimposed.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/boundingbox1.png "</bpt>boundingbox1<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This layout can be achieved by using the following <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](../../../../includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-xml</bpt><bpt id="p2">[</bpt>LayoutInformation#1<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml#1)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A single <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element is hosted within a <ph id="ph2">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>While the text fills only the upper-left corner of the first column, the allocated space for the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> is actually much larger.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The bounding box of any <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> can be retrieved by using the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following illustration shows the bounding box for the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>The bounding box of the TextBlock is now visible.<ept id="p1">]</ept><bpt id="p2">(../../../../docs/framework/wpf/advanced/media/boundingbox2.png "</bpt>boundingbox2<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As shown by the yellow rectangle, the allocated space for the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> element is actually much larger than it appears.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>As additional elements are added to the <ph id="ph1">&lt;xref:System.Windows.Controls.Grid&gt;</ph>, this allocation could shrink or expand, depending on the type and size of elements that are added.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The layout slot of the <ph id="ph1">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> is translated into a <ph id="ph2">&lt;xref:System.Windows.Shapes.Path&gt;</ph> by using the <ph id="ph3">&lt;xref:System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This technique can be useful for displaying the bounding box of an element.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>LayoutInformation#2<ept id="p2">](../../../../samples/snippets/csharp/VS_Snippets_Wpf/LayoutInformation/CSharp/Window1.xaml.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>LayoutInformation#2<ept id="p4">](../../../../samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutInformation/VisualBasic/Window1.xaml.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Layout System</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>At its simplest, layout is a recursive system that leads to an element being sized, positioned, and drawn.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>More specifically, layout describes the process of measuring and arranging the members of a <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element's <ph id="ph2">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Layout is an intensive process.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The larger the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection, the greater the number of calculations that must be made.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Complexity can also be introduced based on the layout behavior defined by the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element that owns the collection.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A relatively simple <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, such as <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>, can have significantly better performance than a more complex <ph id="ph3">&lt;xref:System.Windows.Controls.Panel&gt;</ph>, such as <ph id="ph4">&lt;xref:System.Windows.Controls.Grid&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Each time that a child <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> changes its position, it has the potential to trigger a new pass by the layout system.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Therefore, it is important to understand the events that can invoke the layout system, as unnecessary invocation can lead to poor application performance.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following describes the process that occurs when the layout system is invoked.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A child <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> begins the layout process by first having its core properties measured.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Sizing properties defined on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> are evaluated, such as <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph>-specific logic is applied, such as <ph id="ph2">&lt;xref:System.Windows.Controls.Dock&gt;</ph> direction or stacking <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel.Orientation%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Content is arranged after all children have been measured.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection is drawn on the screen.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The process is invoked again if additional <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> are added to the collection, a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> is applied, or the <ph id="ph3">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This process and how it is invoked are defined in more detail in the following sections.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Measuring and Arranging Children</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The layout system completes two passes for each member of the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection, a measure pass and an arrange pass.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Each child <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> provides its own <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> methods to achieve its own specific layout behavior.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>During the measure pass, each member of the <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection is evaluated.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The process begins with a call to the <ph id="ph1">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This method is called within the implementation of the parent <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element, and does not have to be called explicitly for layout to occur.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>First, native size properties of the <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph> are evaluated, such as <ph id="ph2">&lt;xref:System.Windows.UIElement.Clip%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This generates a value named <ph id="ph1">`constraintSize`</ph> that is passed to <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureCore%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Secondly, framework properties defined on <ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph> are processed, which affects the value of <ph id="ph2">`constraintSize`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>These properties generally describe the sizing characteristics of the underlying <ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, such as its <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.Margin%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each of these properties can change the space that is necessary to display the element.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> is then called with <ph id="ph2">`constraintSize`</ph> as a parameter.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>There is a difference between the properties of <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> property is a calculated value based on other height inputs and the layout system.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties, such as <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, that are the basis of the input change.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualHeight%2A&gt;</ph> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The ultimate goal of the measure pass is for the child to determine its <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>, which occurs during the <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.MeasureCore%2A&gt;</ph> call.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> value is stored by <ph id="ph2">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> for use during the content arrange pass.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The arrange pass begins with a call to the <ph id="ph1">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>During the arrange pass, the parent <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element generates a rectangle that represents the bounds of the child.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This value is passed to the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> method for processing.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> method evaluates the <ph id="ph2">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> of the child and evaluates any additional margins that may affect the rendered size of the element.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> generates an <ph id="ph2">`arrangeSize`</ph>, which is passed to the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> method of the <ph id="ph4">&lt;xref:System.Windows.Controls.Panel&gt;</ph> as a parameter.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> generates the <ph id="ph2">`finalSize`</ph> of the child.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Finally, the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph> method does a final evaluation of offset properties, such as margin and alignment, and puts the child within its layout slot.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The child does not have to (and frequently does not) fill the entire allocated space.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Control is then returned to the parent <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> and the layout process is complete.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Panel Elements and Custom Layout Behaviors</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> includes a group of elements that derive from <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>These <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements enable many complex layouts.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, stacking elements can easily be achieved by using the <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> element, while more complex and free flowing layouts are possible by using a <ph id="ph2">&lt;xref:System.Windows.Controls.Canvas&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following table summarizes the available layout <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Panel name</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Defines an area within which you can explicitly position child elements by coordinates relative to the <ph id="ph1">&lt;xref:System.Windows.Controls.Canvas&gt;</ph> area.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Defines an area within which you can arrange child elements either horizontally or vertically, relative to each other.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Defines a flexible grid area that consists of columns and rows.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Arranges child elements into a single line that can be oriented horizontally or vertically.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Provides a framework for <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements that virtualize their child data collection.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>This is an abstract class.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Positions child elements in sequential position from left to right, breaking content to the next line at the edge of the containing box.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Subsequent ordering occurs sequentially from top to bottom or right to left, depending on the value of the <ph id="ph1">&lt;xref:System.Windows.Controls.WrapPanel.Orientation%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For applications that require a layout that is not possible by using any of the predefined <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements, custom layout behaviors can be achieved by inheriting from <ph id="ph2">&lt;xref:System.Windows.Controls.Panel&gt;</ph> and overriding the <ph id="ph3">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For an example, see <bpt id="p1">[</bpt>Custom Radial Panel Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159982)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Layout Performance Considerations</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Layout is a recursive process.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Each child element in a <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection gets processed during each invocation of the layout system.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>As a result, triggering the layout system should be avoided when it is not necessary.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The following considerations can help you achieve better performance.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Be aware of which property value changes will force a recursive update by the layout system.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Dependency properties whose values can cause the layout system to be initialized are marked with public flags.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A&gt;</ph> provide useful clues as to which property value changes will force a recursive update by the layout system.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In general, any property that can affect the size of an element's bounding box should have a <ph id="ph1">&lt;xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A&gt;</ph> flag set to true.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Properties Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/dependency-properties-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When possible, use a <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> instead of a <ph id="ph2">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> can be a very useful way to affect the content of a <ph id="ph2">[!INCLUDE[TLA#tla_ui](../../../../includes/tlasharptla-ui-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>However, if the effect of the transform does not have to impact the position of other elements, it is best to use a <ph id="ph1">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> instead, because <ph id="ph2">&lt;xref:System.Windows.UIElement.RenderTransform%2A&gt;</ph> does not invoke the layout system.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement.LayoutTransform%2A&gt;</ph> applies its transformation and forces a recursive layout update to account for the new position of the affected element.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Avoid unnecessary calls to <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method forces a recursive layout update, and is frequently not necessary.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Unless you are sure that a full update is required, rely on the layout system to call this method for you.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>When working with a large <ph id="ph1">&lt;xref:System.Windows.Controls.Panel.Children%2A&gt;</ph> collection, consider using a <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> instead of a regular <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>By virtualizing the child collection, the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> only keeps objects in memory that are currently within the parent's ViewPort.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>As a result, performance is substantially improved in most scenarios.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Sub-pixel Rendering and Layout Rounding</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> graphics system uses device-independent units to enable resolution and device independence.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Each device independent pixel automatically scales with the system's <ph id="ph1">[!INCLUDE[TLA#tla_dpi](../../../../includes/tlasharptla-dpi-md.md)]</ph> setting.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This provides <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](../../../../includes/tla2sharptla-winclient-md.md)]</ph> applications proper scaling for different <ph id="ph2">[!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]</ph> settings and makes the application automatically <ph id="ph3">[!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]</ph>-aware.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>However, this <ph id="ph1">[!INCLUDE[TLA2#tla_dpi](../../../../includes/tla2sharptla-dpi-md.md)]</ph> independence can create irregular edge rendering because of anti-aliasing.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>These artifacts, typically seen as blurry or semi-transparent edges, can occur when the location of an edge falls in the middle of a device pixel instead of between device pixels.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The layout system provides a way to adjust for this with layout rounding.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Layout rounding is where the layout system rounds any non-integral pixel values during the layout pass.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Layout rounding is disabled by default.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>To enable layout rounding, set the <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> property to <ph id="ph2">`true`</ph> on any <ph id="ph3">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Because it is a dependency property, the value will propagate to all the children in the visual tree.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>To enable layout rounding for the entire UI, set <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph> to <ph id="ph2">`true`</ph> on the root container.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For an example, see <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.UseLayoutRounding%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>What's Next</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Understanding how elements are measured and arranged is the first step in understanding layout.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>For more information about the available <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> elements, see <bpt id="p1">[</bpt>Panels Overview<ept id="p1">](../../../../docs/framework/wpf/controls/panels-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>To better understand the various positioning properties that can affect layout, see <bpt id="p1">[</bpt>Alignment, Margins, and Padding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>For an example of a custom <ph id="ph1">&lt;xref:System.Windows.Controls.Panel&gt;</ph> element, see <bpt id="p1">[</bpt>Custom Radial Panel Sample<ept id="p1">](http://go.microsoft.com/fwlink/?LinkID=159982)</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>When you are ready to put it all together in a light-weight application, see <bpt id="p1">[</bpt>Walkthrough: My First WPF Desktop Application<ept id="p1">](../../../../docs/framework/wpf/getting-started/walkthrough-my-first-wpf-desktop-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.FrameworkElement&gt;</ph></source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Panels Overview<ept id="p1">](../../../../docs/framework/wpf/controls/panels-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Alignment, Margins, and Padding Overview<ept id="p1">](../../../../docs/framework/wpf/advanced/alignment-margins-and-padding-overview.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Layout and Design<ept id="p1">](../../../../docs/framework/wpf/advanced/optimizing-performance-layout-and-design.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>