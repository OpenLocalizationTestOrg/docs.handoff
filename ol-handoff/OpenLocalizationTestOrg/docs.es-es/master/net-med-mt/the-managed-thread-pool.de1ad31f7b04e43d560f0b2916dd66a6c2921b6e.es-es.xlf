<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48db604ac290a1a776edead4cd23ff807d8b8c25</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\threading\the-managed-thread-pool.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7ce92639932a3c3171422e80dc54f81e3efec5e1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f09739e6a983402e4113e55ba247f7213186785d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The Managed Thread Pool | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Managed Thread Pool</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> class provides your application with a pool of worker threads that are managed by the system, allowing you to concentrate on application tasks rather than thread management.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you have short tasks that require background processing, the managed thread pool is an easy way to take advantage of multiple threads.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph> you can create <ph id="ph2">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph3">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects, which perform asynchronous tasks on thread pool threads.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20SP1_long](../../../includes/net-v20sp1-long-md.md)]</ph>, the throughput of the thread pool is significantly improved in three key areas that were identified as bottlenecks in previous releases of the <ph id="ph2">[!INCLUDE[dnprdnshort](../../../includes/dnprdnshort-md.md)]</ph>: queuing tasks, dispatching thread pool threads, and dispatching I/O completion threads.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](../../../includes/net-v35-long-md.md)]</ph> or later.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For background tasks that interact with the user interface, the .NET Framework version 2.0 also provides the <ph id="ph1">&lt;xref:System.ComponentModel.BackgroundWorker&gt;</ph> class, which communicates using events raised on the user interface thread.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The .NET Framework uses thread pool threads for many purposes, including asynchronous I/O completion, timer callbacks, registered wait operations, asynchronous method calls using delegates, and <ph id="ph1">&lt;xref:System.Net&gt;</ph> socket connections.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When Not to Use Thread Pool Threads</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>There are several scenarios in which it is appropriate to create and manage your own threads instead of using thread pool threads:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You require a foreground thread.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You require a thread to have a particular priority.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You have tasks that cause the thread to block for long periods of time.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The thread pool has a maximum number of threads, so a large number of blocked thread pool threads might prevent tasks from starting.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You need to place threads into a single-threaded apartment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>All <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads are in the multithreaded apartment.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You need to have a stable identity associated with the thread, or to dedicate a thread to a task.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Thread Pool Characteristics</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Thread pool threads are background threads.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Foreground and Background Threads<ept id="p1">](../../../docs/standard/threading/foreground-and-background-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Each thread uses the default stack size, runs at the default priority, and is in the multithreaded apartment.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There is only one thread pool per process.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Exceptions in Thread Pool Threads</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Unhandled exceptions on thread pool threads terminate the process.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>There are three exceptions to this rule:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> is thrown in a thread pool thread, because <ph id="ph2">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> was called.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref:System.AppDomainUnloadedException&gt;</ph> is thrown in a thread pool thread, because the application domain is being unloaded.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The common language runtime or a host process terminates the thread.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](../../../docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, the common language runtime silently traps unhandled exceptions in thread pool threads.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This might corrupt application state and eventually cause applications to hang, which might be very difficult to debug.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Maximum Number of Thread Pool Threads</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The number of operations that can be queued to the thread pool is limited only by available memory; however, the thread pool limits the number of threads that can be active in the process simultaneously.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](../../../includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A process can call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> method to determine the number of threads.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can control the maximum number of threads by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the .NET Framework versions 1.0 and 1.1, the size of the thread pool cannot be set from managed code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Code that hosts the common language runtime can set the size using <ph id="ph1">`CorSetMaxThreads`</ph>, defined in mscoree.h.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Thread Pool Minimums</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches a specified minimum for each category.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method to obtain these minimum values.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>When a minimum is reached, the thread pool can create additional threads or wait until some tasks complete.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number of idle threads.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Skipping Security Checks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The thread pool also provides the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A?displayProperty=fullName&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A?displayProperty=fullName&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Use these methods only when you are certain that the caller's stack is irrelevant to any security checks performed during the execution of the queued task.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>and <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> both capture the caller's stack, which is merged into the stack of the thread pool thread when the thread begins to execute a task.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If a security check is required, the entire stack must be checked.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Although the check provides safety, it also has a performance cost.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Using the Thread Pool</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](../../../includes/net-v40-short-md.md)]</ph>, the easiest way to use the thread pool is to use the <bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>By default, parallel library types like <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> and <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> use thread pool threads to run tasks.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You can also use the thread pool by calling <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;</ph> from managed code (or <ph id="ph2">`CorQueueUserWorkItem`</ph> from unmanaged code) and passing a <ph id="ph3">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate representing the method that performs the task.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Another way to use the thread pool is to queue work items that are related to a wait operation by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName&gt;</ph> method and passing a <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph> that, when signaled or when timed out, calls the method represented by the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Thread pool threads are used to invoke callback methods.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ThreadPool Examples</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The code examples in this section demonstrate the thread pool by using the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName&gt;</ph> method, and the <ph id="ph3">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Executing Asynchronous Tasks with the Task Parallel Library<ept id="p1">](#TaskParallelLibrary)</ept></source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Executing Code Asynchronously with QueueUserWorkItem<ept id="p1">](#ExecuteCodeWithQUWI)</ept></source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Supplying Task Data for QueueUserWorkItem<ept id="p1">](#TaskDataForQUWI)</ept></source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Using RegisterWaitForSingleObject<ept id="p1">](#RegisterWaitForSingleObject)</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Executing Asynchronous Tasks with the Task Parallel Library</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The following example shows how to create and use a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For an example that uses the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class to return a value from an asynchronous task, see <bpt id="p1">[</bpt>How to: Return a Value from a Task<ept id="p1">](../../../docs/standard/parallel-programming/how-to-return-a-value-from-a-task.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Threading.Tasks.Task#01<ept id="p2">](../../../samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Threading.Tasks.Task#01<ept id="p4">](../../../samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Executing Code Asynchronously with QueueUserWorkItem</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The following example queues a very simple task, represented by the <ph id="ph1">`ThreadProc`</ph> method, using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.ThreadPool#1<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.threadpool/cpp/source1.cpp#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.ThreadPool#1<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.threadpool/cs/source1.cs#1)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.ThreadPool#1<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.threadpool/vb/source1.vb#1)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Supplying Task Data for QueueUserWorkItem</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method to queue a task and supply the data for the task.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.ThreadPool#2<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.threadpool/cpp/source2.cpp#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.ThreadPool#2<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.threadpool/cs/source2.cs#2)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.ThreadPool#2<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.threadpool/vb/source2.vb#2)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Using RegisterWaitForSingleObject</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following example demonstrates several threading features.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Queuing a task for execution by <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> threads, with the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Signaling a task to execute, with <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>EventWaitHandle, AutoResetEvent, CountdownEvent, ManualResetEvent<ept id="p1">](../../../docs/standard/threading/eventwaithandle-autoresetevent-countdownevent-manualresetevent.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Handling both time-outs and signals with a <ph id="ph1">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Canceling a queued task with <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cpp</bpt><bpt id="p2">[</bpt>Conceptual.ThreadPool#3<ept id="p2">](../../../samples/snippets/cpp/VS_Snippets_CLR/conceptual.threadpool/cpp/source3.cpp#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-csharp</bpt><bpt id="p4">[</bpt>Conceptual.ThreadPool#3<ept id="p4">](../../../samples/snippets/csharp/VS_Snippets_CLR/conceptual.threadpool/cs/source3.cs#3)</ept><ept id="p3">]</ept> <bpt id="p5">[!code-vb</bpt><bpt id="p6">[</bpt>Conceptual.ThreadPool#3<ept id="p6">](../../../samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.threadpool/vb/source3.vb#3)</ept><ept id="p5">]</ept></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph></source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph></source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Task Parallel Library (TPL)<ept id="p1">](../../../docs/standard/parallel-programming/task-parallel-library-tpl.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to: Return a Value from a Task<ept id="p1">](../../../docs/standard/parallel-programming/how-to-return-a-value-from-a-task.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threading Objects and Features<ept id="p1">](../../../docs/standard/threading/threading-objects-and-features.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Threads and Threading<ept id="p1">](../../../docs/standard/threading/threads-and-threading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Asynchronous File I/O<ept id="p1">](../../../docs/standard/io/asynchronous-file-i-o.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Timers<ept id="p1">](../../../docs/standard/threading/timers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>