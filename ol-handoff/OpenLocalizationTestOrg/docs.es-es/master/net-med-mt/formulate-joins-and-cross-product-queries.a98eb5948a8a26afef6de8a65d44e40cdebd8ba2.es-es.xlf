<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="formulate-joins-and-cross-product-queries.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe4b7d22b31376185dbc71c598e39340dcb4d57f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\data\adonet\sql\linq\formulate-joins-and-cross-product-queries.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">51f933f32d27137a2800b775b52835c85e2f045c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2cb907a57579c874538895eca14ba882af9e2d02</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Formulate Joins and Cross-Product Queries | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Formulate Joins and Cross-Product Queries</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following examples show how to combine results from multiple tables.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following example uses foreign key navigation in the <ph id="ph1">`From`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`from`</ph> clause in C#) to select all orders for customers in London.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example uses foreign key navigation in the <ph id="ph1">`Where`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`where`</ph> clause in C#) to filter for out-of-stock <ph id="ph4">`Products`</ph> whose <ph id="ph5">`Supplier`</ph> is in the United States.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following example uses foreign key navigation in the <ph id="ph1">`From`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`from`</ph> clause in C#) to filter for employees in Seattle and to list their territories.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example uses foreign key navigation in the <ph id="ph1">`Select`</ph> clause in <ph id="ph2">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> (<ph id="ph3">`select`</ph> clause in C#) to filter for pairs of employees where one employee reports to the other and where both employees are from the same <ph id="ph4">`City`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following <ph id="ph1">[!INCLUDE[vbprvb](../../../../../../includes/vbprvb-md.md)]</ph> example looks for all customers and orders, makes sure that the orders are matched to customers, and guarantees that for every customer in that list, a contact name is provided.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example explicitly joins two tables and projects results from both tables.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example explicitly joins three tables and projects results from each of them.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following example shows how to achieve a <ph id="ph1">`LEFT OUTER JOIN`</ph> by using <ph id="ph2">`DefaultIfEmpty()`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DefaultIfEmpty()`</ph> method returns null when there is no <ph id="ph2">`Order`</ph> for the <ph id="ph3">`Employee`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example projects a <ph id="ph1">`let`</ph> expression resulting from a join.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following example shows a <ph id="ph1">`join`</ph> with a composite key.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to construct a <ph id="ph1">`join`</ph> where one side is nullable and the other is not.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Query Examples<ept id="p1">](../../../../../../docs/framework/data/adonet/sql/linq/query-examples.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>