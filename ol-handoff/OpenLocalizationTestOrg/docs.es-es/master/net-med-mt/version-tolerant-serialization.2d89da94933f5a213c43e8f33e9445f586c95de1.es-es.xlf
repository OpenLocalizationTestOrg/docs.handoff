<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fb2f87870dc6dbd166017c9eb91fa45e304a5fd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\serialization\version-tolerant-serialization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">493b28284e03ea1db8718567b8bd1f617008397c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5f389256289f22c80ffbc81c93b5d2ec6d045b8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Version Tolerant Serialization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Version Tolerant Serialization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In version 1.0 and 1.1 of the .NET Framework, creating serializable types that would be reusable from one version of an application to the next was problematic.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If a type was modified by adding extra fields, the following problems would occur:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Older versions of an application would throw exceptions when asked to deserialize new versions of the old type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Newer versions of an application would throw exceptions when deserializing older versions of a type with missing data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Version Tolerant Serialization (VTS) is a set of features introduced in .NET Framework 2.0 that makes it easier, over time, to modify serializable types.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Specifically, the VTS features are enabled for classes to which the <ph id="ph1">&lt;xref:System.SerializableAttribute&gt;</ph> attribute has been applied, including generic types.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>VTS makes it possible to add new fields to those classes without breaking compatibility with other versions of the type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For a working sample application, see <bpt id="p1">[</bpt>Version Tolerant Serialization Technology Sample<ept id="p1">](../../../docs/framework/serialization/version-tolerant-serialization-technology-sample.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The VTS features are enabled when using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Additionally, all features except extraneous data tolerance are also enabled when using the <ph id="ph1">&lt;xref:System.Runtime.Serialization.Formatters.Soap.SoapFormatter&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about using these classes for serialization, see <bpt id="p1">[</bpt>Binary Serialization<ept id="p1">](../../../docs/framework/serialization/binary-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Feature List</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The set of features includes the following:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Tolerance of extraneous or unexpected data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This enables newer versions of the type to send data to older versions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Tolerance of missing optional data.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This enables older versions to send data to newer versions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Serialization callbacks.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This enables intelligent default value setting in cases where data is missing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In addition, there is a feature for declaring when a new optional field has been added.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is the <ph id="ph1">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>These features are discussed in greater detail below.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Tolerance of Extraneous or Unexpected Data</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the past, during deserialization, any extraneous or unexpected data caused exceptions to be thrown.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>With VTS, in the same situation, any extraneous or unexpected data is ignored instead of causing exceptions to be thrown.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This enables applications that use newer versions of a type (that is, a version that includes more fields) to send information to applications that expect older versions of the same type.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the following example, the extra data contained in the <ph id="ph1">`CountryField`</ph> of version 2.0 of the <ph id="ph2">`Address`</ph> class is ignored when an older application deserializes the newer version.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Tolerance of Missing Data</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Fields can be marked as optional by applying the <ph id="ph1">&lt;xref:System.Runtime.Serialization.OptionalFieldAttribute&gt;</ph> attribute to them.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>During deserialization, if the optional data is missing, the serialization engine ignores the absence and does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Thus, applications that expect older versions of a type can send data to applications that expect newer versions of the same type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example shows version 2.0 of the <ph id="ph1">`Address`</ph> class with the <ph id="ph2">`CountryField`</ph> field marked as optional.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If an older application sends version 1 to a newer application that expects version 2.0, the absence of the data is ignored.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Serialization Callbacks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Serialization callbacks are a mechanism that provides hooks into the serialization/deserialization process at four points.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attribute</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the Associated Method is Called</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Typical Use</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Before deserialization.*</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initialize default values for optional fields.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After deserialization.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Fix optional field values based on contents of other fields.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Before serialization.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Prepare for serialization.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For example, create optional data structures.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>After serialization.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Log serialization events.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">\*</ph> This callback is invoked before the deserialization constructor, if one is present.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Using Callbacks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To use callbacks, apply the appropriate attribute to a method that accepts a <ph id="ph1">&lt;xref:System.Runtime.Serialization.StreamingContext&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Only one method per class can be marked with each of these attributes.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The intended use of these methods is for versioning.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>During deserialization, an optional field may not be correctly initialized if the data for the field is missing.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This can be corrected by creating the method that assigns the correct value, then applying either the <bpt id="p1">**</bpt>OnDeserializingAttribute<ept id="p1">**</ept> or <bpt id="p2">**</bpt>OnDeserializedAttribute<ept id="p2">**</ept> attribute to the method.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following example shows the method in the context of a type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If an earlier version of an application sends an instance of the <ph id="ph1">`Address`</ph> class to a later version of the application, the <ph id="ph2">`CountryField`</ph> field data will be missing.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>But after deserialization, the field will be set to a default value "Japan."</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The VersionAdded Property</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>OptionalFieldAttribute<ept id="p1">**</ept> has the <bpt id="p2">**</bpt>VersionAdded<ept id="p2">**</ept> property.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In version 2.0 of the .NET Framework, this is not used.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>However, it is important to set this property correctly to ensure that the type will be compatible with future serialization engines.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The property indicates which version of a type a given field has been added.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>It should be incremented by exactly one (starting at 2) every time the type is modified, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>SerializationBinder</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Some users may need to control which class to serialize and deserialize because a different version of the class is required on the server and client.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationBinder&gt;</ph> is an abstract class used to control the actual types used during serialization and deserialization.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To use this class, derive a class from <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationBinder&gt;</ph> and override the <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationBinder.BindToName%2A&gt;</ph> System.String, System.String)?qualifyHint=False&amp;autoUpgrade=True and <ph id="ph3">&lt;xref:System.Runtime.Serialization.SerializationBinder.BindToType%2A&gt;</ph> System.String)?qualifyHint=False&amp;autoUpgrade=True methods.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[!INCLUDE[crdefault](../../../includes/crdefault-md.md)]</ph><bpt id="p1">[</bpt>Controlling Serialization and Deserialization with SerializationBinder<ept id="p1">](../../../docs/framework/wcf/feature-details/controlling-serialization-and-deserialization-with-serializationbinder.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Best Practices</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>To ensure proper versioning behavior, follow these rules when modifying a type from version to version:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Never remove a serialized field.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Never apply the <ph id="ph1">&lt;xref:System.NonSerializedAttribute&gt;</ph> attribute to a field if the attribute was not applied to the field in the previous version.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Never change the name or the type of a serialized field.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When adding a new serialized field, apply the <bpt id="p1">**</bpt>OptionalFieldAttribute<ept id="p1">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>When removing a <bpt id="p1">**</bpt>NonSerializedAttribute<ept id="p1">**</ept> attribute from a field (that was not serializable in a previous version), apply the <bpt id="p2">**</bpt>OptionalFieldAttribute<ept id="p2">**</ept> attribute.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For all optional fields, set meaningful defaults using the serialization callbacks unless 0 or <bpt id="p1">**</bpt>null<ept id="p1">**</ept> as defaults are acceptable.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To ensure that a type will be compatible with future serialization engines, follow these guidelines:</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Always set the <bpt id="p1">**</bpt>VersionAdded<ept id="p1">**</ept> property on the <bpt id="p2">**</bpt>OptionalFieldAttribute<ept id="p2">**</ept> attribute correctly.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Avoid branched versioning.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Binary Serialization<ept id="p1">](../../../docs/framework/serialization/binary-serialization.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>