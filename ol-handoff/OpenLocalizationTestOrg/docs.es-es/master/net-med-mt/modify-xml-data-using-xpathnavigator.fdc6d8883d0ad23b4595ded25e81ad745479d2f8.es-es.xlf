<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="modify-xml-data-using-xpathnavigator.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c94046812ed17096ca6ba3c64f582db3b98ebb42</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard\data\xml\modify-xml-data-using-xpathnavigator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">MT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba8eb1efb26ae405aee5be82346af578dee86cbf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30784e5ce0c359c43de748e68c2aa5ba31e23e96</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Modify XML Data using XPathNavigator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Modify XML Data using XPathNavigator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class provides a set of methods used to modify nodes and values in an XML document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In order to use these methods, the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object must be editable, that is, its <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.CanEdit%2A&gt;</ph> property must be <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> objects that can edit an XML document are created by the <ph id="ph2">&lt;xref:System.Xml.XmlDocument.CreateNavigator%2A&gt;</ph> method of the <ph id="ph3">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> objects created by the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> class are read-only and any attempt to use the editing methods of an <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object created by an <ph id="ph4">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph> object result in a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about creating editable <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> objects, see <bpt id="p1">[</bpt>Reading XML Data using XPathDocument and XmlDocument<ept id="p1">](../../../../docs/standard/data/xml/reading-xml-data-using-xpathdocument-and-xmldocument.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Modifying Nodes</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A simple technique for changing the value of a node is to use the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.SetTypedValue%2A&gt;</ph> methods of the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following table lists the effects of these methods on different node types.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Data Changed</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Not supported.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The content of the element.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The value of the attribute.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The text content.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The content, excluding the target.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The content of the comment.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Not Supported.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Editing <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNodeType&gt;</ph> nodes or the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNodeType&gt;</ph> node is not supported.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class also provides a set of methods used to insert and remove nodes.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about inserting and removing nodes from an XML document, see the <bpt id="p1">[</bpt>Insert XML Data using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/insert-xml-data-using-xpathnavigator.md)</ept> and <bpt id="p2">[</bpt>Remove XML Data using XPathNavigator<ept id="p2">](../../../../docs/standard/data/xml/remove-xml-data-using-xpathnavigator.md)</ept> topics.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Modifying Untyped Values</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetValue%2A&gt;</ph> method simply inserts the untyped <ph id="ph2">`string`</ph> value passed as a parameter as the value of the node the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object is currently positioned on.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The value is inserted without any type or without verifying that the new value is valid according to the type of the node if schema information is available.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetValue%2A&gt;</ph> method is used to update all <ph id="ph2">`price`</ph> elements in the <ph id="ph3">`contosoBooks.xml`</ph> file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as an input.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Modifying Typed Values</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When the type of a node is a W3C XML Schema simple type, the new value inserted by the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetTypedValue%2A&gt;</ph> method is checked against the facets of the simple type before the value is set.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the new value is not valid according to the type of the node (for example, setting a value of <ph id="ph1">`-1`</ph> on an element whose type is <ph id="ph2">`xs:positiveInteger`</ph>), it results in an exception.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example attempts to change the value of the <ph id="ph1">`price`</ph> element of the first <ph id="ph2">`book`</ph> element in the <ph id="ph3">`contosoBooks.xml`</ph> file to a <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Because the XML Schema type of the <ph id="ph1">`price`</ph> element is defined as <ph id="ph2">`xs:decimal`</ph> in the <ph id="ph3">`contosoBooks.xsd`</ph> files, this results in an exception.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as an input.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The example also takes the <ph id="ph1">`contosoBooks.xsd`</ph> as an input.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Effects of Editing Strongly Typed XML Data</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class uses the W3C XML Schema as a basis for describing strongly-typed XML.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Elements and attributes can be annotated with type information based on validation against a W3C XML Schema document.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Elements that can contain other elements or attributes are called complex types, while those that can only contain textual content are called simple types.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attributes can only have simple types.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An element or attribute can be considered to be schema-valid if it conforms to all the rules specific to its type definition.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An element that has the simple type <ph id="ph1">`xs:int`</ph> has to contain a numeric value between -2147483648 and 2147483647 to be schema-valid.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For complex types, the schema-validity of the element is dependent on the schema-validity of its child elements and attributes.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Thus if an element is valid against its complex type definition, all its child elements and attributes are valid against their type definitions.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Similarly, if even one of the child elements or attributes of an element is invalid against its type definition, or has an unknown validity, the element is also either invalid or of unknown validity.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Given that the validity of an element is dependent on the validity of its child elements and attributes, modifications to either result in altering the validity of the element if it was previously valid.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Specifically, if the child elements or attributes of an element are inserted, updated, or deleted, then the validity of the element becomes unknown.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is represented by the <ph id="ph1">&lt;xref:System.Xml.Schema.IXmlSchemaInfo.Validity%2A&gt;</ph> property of the element's <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A&gt;</ph> property being set to <ph id="ph3">&lt;xref:System.Xml.Schema.XmlSchemaValidity&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Furthermore, this effect cascades upwards recursively across the XML document, because the validity of the element's parent element (and its parent element, and so on) also becomes unknown.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information about schema validation and the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class, see <bpt id="p1">[</bpt>Schema Validation using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/schema-validation-using-xpathnavigator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Modifying Attributes</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.SetTypedValue%2A&gt;</ph> methods can be used to modify untyped and typed attribute nodes as well as the other node types listed in the "Modifying Nodes" section.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following example changes the value of the <ph id="ph1">`genre`</ph> attribute of the first <ph id="ph2">`book`</ph> element in the <ph id="ph3">`books.xml`</ph> file.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information about the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.SetValue%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.SetTypedValue%2A&gt;</ph> methods, see the "Modifying Untyped Values" and "Modifying Typed Values" sections.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>InnerXml and OuterXml Properties</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.InnerXml%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator.OuterXml%2A&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class change the XML markup of the nodes an <ph id="ph4">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object is currently positioned on.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.InnerXml%2A&gt;</ph> property changes the XML markup of the child nodes an <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object is currently positioned on with the parsed contents of the given XML <ph id="ph3">`string`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Similarly, the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.OuterXml%2A&gt;</ph> property changes the XML markup of the child nodes an <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object is currently positioned on as well as the current node itself.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.OuterXml%2A&gt;</ph> property to modify the value of the <ph id="ph2">`price`</ph> element and insert a new <ph id="ph3">`discount`</ph> attribute on the first <ph id="ph4">`book`</ph> element in the <ph id="ph5">`contosoBooks.xml`</ph> file.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The example takes the <ph id="ph1">`contosoBooks.xml`</ph> file as an input.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Modifying Namespace Nodes</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the Document Object Model (DOM), namespace declarations are treated as if they are regular attributes that can be inserted, updated and deleted.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class does not allow such operations on namespace nodes because altering the value of a namespace node can change the identity of the elements and attributes within the scope of the namespace node as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the XML example above is changed in the following way, this effectively renames every element in the document because the value of each element's namespace URI is changed.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Inserting namespace nodes that do not conflict with namespace declarations at the scope that they are inserted in is allowed by the <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In this case, the namespace declarations are not declared at lower scopes in the XML document and does not result in renaming as illustrated in the following example.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>If the XML example above is changed in the following way, the namespace declarations are correctly propagated across the XML document below the scope of the other namespace declaration.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the XML example above, the attribute <ph id="ph1">`a:parent-id`</ph> is inserted on the <ph id="ph2">`parent`</ph> element in the <ph id="ph3">`http://www.contoso.com/parent-id`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator.CreateAttribute%2A&gt;</ph> method is used to insert the attribute while positioned on the <ph id="ph2">`parent`</ph> element.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`http://www.contoso.com`</ph> namespace declaration is automatically inserted by the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> class to preserve the consistency of the rest of the XML document.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Modifying Entity Reference Nodes</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Entity reference nodes in an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object are read-only and cannot be edited using either the <ph id="ph2">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlNode&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Any attempt to modify an entity reference node results in an <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Modifying xsi:nil Nodes</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The W3C XML Schema recommendation introduces the concept of an element being nillable.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When an element is nillable, it is possible for the element to have no content and still be valid.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The concept of an element being nillable is similar to the concept of an object being <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The main difference is that a <ph id="ph1">`null`</ph> object cannot be accessed in any way, while an <ph id="ph2">`xsi:nil`</ph> element still has properties such as attributes that can be accessed, but has no content (child elements or text).</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The existence of the <ph id="ph1">`xsi:nil`</ph> attribute with a value of <ph id="ph2">`true`</ph> on an element in an XML document is used to indicate that an element has no content.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If an <ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph> object is used to add content to a valid element with an <ph id="ph2">`xsi:nil`</ph> attribute with a value of <ph id="ph3">`true`</ph>, the value of its <ph id="ph4">`xsi:nil`</ph> attribute is set to <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the content of an element with an <ph id="ph1">`xsi:nil`</ph> attribute set to <ph id="ph2">`false`</ph> is deleted, the value of the attribute is not changed to <ph id="ph3">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Saving an XML Document</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Saving changes made to an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object as the result of the editing methods described in this topic is performed using the methods of the <ph id="ph2">&lt;xref:System.Xml.XmlDocument&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For more information about saving changes made to an <ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph> object, see <bpt id="p1">[</bpt>Saving and Writing a Document<ept id="p1">](../../../../docs/standard/data/xml/saving-and-writing-a-document.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XmlDocument&gt;</ph></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XPath.XPathDocument&gt;</ph></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Xml.XPath.XPathNavigator&gt;</ph></source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Process XML Data Using the XPath Data Model<ept id="p1">](../../../../docs/standard/data/xml/process-xml-data-using-the-xpath-data-model.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Insert XML Data using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/insert-xml-data-using-xpathnavigator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Remove XML Data using XPathNavigator<ept id="p1">](../../../../docs/standard/data/xml/remove-xml-data-using-xpathnavigator.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>