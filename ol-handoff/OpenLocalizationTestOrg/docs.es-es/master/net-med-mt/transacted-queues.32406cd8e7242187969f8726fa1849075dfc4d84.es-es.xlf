<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d981db791df4f5260c4781b326f84f9e2988185d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\framework\windows-workflow-foundation\samples\transacted-queues.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net-med-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f91381f2e60e4990aade8c0ca00d6843f7d074d6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b298da6832dbf005a63c058e9f76f439a4057975</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Transacted Queues | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Transacted Queues</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This sample shows how to integrate queues and transactions in <ph id="ph1">[!INCLUDE[wf](../../../../includes/wf-md.md)]</ph> to create reliable and scalable services.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;!--zz &lt;xref:System.Activities.TransactionScope&gt;--&gt;</ph> <ph id="ph2">`System.Activities.TransactionScope`</ph> is used in the client workflow to send message to a queue under a transaction using the <ph id="ph3">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> is used on the server to receive messages from the queue and update the state of the workflow under the same transaction.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Demonstrates</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph>, <ph id="ph3">&lt;xref:System.ServiceModel.NetMsmqBinding&gt;</ph>, <ph id="ph4">&lt;xref:System.ServiceModel.Activities.Receive&gt;</ph>, and content-based correlation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Discussion</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To demonstrate the features covered in this sample, a <ph id="ph1">`RewardsPoints`</ph> workflow service is created, which keeps track of the points earned and used for a given account.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The client uses <ph id="ph1">&lt;xref:System.Activities.WorkflowInvoker&gt;</ph> to simulate posting various requests to the queue.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To post a message to the queue under a transaction, the <ph id="ph1">&lt;xref:System.ServiceModel.Activities.Send&gt;</ph> activity can be placed inside the <ph id="ph2">&lt;xref:System.Activities.Statements.TransactionScope.Body%2A&gt;</ph> of a <ph id="ph3">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this sample, the client runs first, followed by the server, to demonstrate how queued messages can decouple the client and server applications.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Once the client completes, the service is configured and hosted.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As soon as it opens, it starts processing the messages that have already been placed in the queue.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each message is received and processed under the same server transaction.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this sample, the first message received is a <ph id="ph1">`CreateAccount`</ph> request that creates the instance and initializes the content correlation based on the account name passed as part of the request message.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To model the kind of service you might expect in the real world, the following two <ph id="ph1">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> activities that process the <ph id="ph2">`AddPoints`</ph> and <ph id="ph3">`UsePoints`</ph> messages are placed in parallel branches within a <ph id="ph4">`while`</ph> loop so that they can process these messages repeatedly in any order.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.Activities.Statements.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Activities.TransactedReceiveScope&gt;</ph> each have an implicit persistence point at the end of their scopes, so using these activities in <ph id="ph3">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> combined with queues is a reliable way to move your workflow from one consistent state to the next, while ensuring that messages are never lost.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To set up, build, and run the sample</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Install and configure MSMQ.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Installing Message Queuing<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=178526)</ept> for details.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Ensure that MSDTC is running by executing the following command on a command line.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Compile the project and open the executable, or open the project in <ph id="ph1">[!INCLUDE[vs2010](../../../../includes/vs2010-md.md)]</ph> and select a start option from the debug menu.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>First, the queue is created, then the client runs and posts messages to the queue, and finally the service starts and the messages are processed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To exit the program, press ENTER.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The samples may already be installed on your machine.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Check for the following (default) directory before continuing.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If this directory does not exist, go to <bpt id="p1">[</bpt>Windows Communication Foundation (WCF) and Windows Workflow Foundation (WF) Samples for .NET Framework 4<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=150780)</ept> to download all <ph id="ph1">[!INCLUDE[indigo1](../../../../includes/indigo1-md.md)]</ph> and <ph id="ph2">[!INCLUDE[wf1](../../../../includes/wf1-md.md)]</ph> samples.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This sample is located in the following directory.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>