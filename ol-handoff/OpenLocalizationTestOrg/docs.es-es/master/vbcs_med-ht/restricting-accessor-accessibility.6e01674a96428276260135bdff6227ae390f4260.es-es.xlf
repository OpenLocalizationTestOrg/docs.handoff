<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5985c5cbe61d33c62caebce3209579e7b92ecfde</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\restricting-accessor-accessibility.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2e1135132f5d872b8b9cf60a542c3a318c1654c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">91e4f85b1fe22a1b295031f464e0738dea493ead</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Restricting Accessor Accessibility (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Restricting Accessor Accessibility (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>get<ept id="p1">](../../../csharp/language-reference/keywords/get.md)</ept> and <bpt id="p2">[</bpt>set<ept id="p2">](../../../csharp/language-reference/keywords/set.md)</ept> portions of a property or indexer are called <bpt id="p3">*</bpt>accessors<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By default these accessors have the same visibility, or access level: that of the property or indexer to which they belong.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>accessibility levels<ept id="p1">](../../../csharp/language-reference/keywords/accessibility-levels.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, it is sometimes useful to restrict access to one of these accessors.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Typically, this involves restricting the accessibility of the <ph id="ph1">`set`</ph> accessor, while keeping the <ph id="ph2">`get`</ph> accessor publicly accessible.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexers#6<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/restricting-accessor-accessibility_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this example, a property called <ph id="ph1">`Name`</ph> defines a <ph id="ph2">`get`</ph> and <ph id="ph3">`set`</ph> accessor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`get`</ph> accessor receives the accessibility level of the property itself, <ph id="ph2">`public`</ph> in this case, while the <ph id="ph3">`set`</ph> accessor is explicitly restricted by applying the <bpt id="p1">[</bpt>protected<ept id="p1">](../../../csharp/language-reference/keywords/protected.md)</ept> access modifier to the accessor itself.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Restrictions on Access Modifiers on Accessors</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using the accessor modifiers on properties or indexers is subject to these conditions:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You cannot use accessor modifiers on an interface or an explicit <bpt id="p1">[</bpt>interface<ept id="p1">](../../../csharp/language-reference/keywords/interface.md)</ept> member implementation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can use accessor modifiers only if the property or indexer has both <ph id="ph1">`set`</ph> and <ph id="ph2">`get`</ph> accessors.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In this case, the modifier is permitted on one only of the two accessors.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the property or indexer has an <bpt id="p1">[</bpt>override<ept id="p1">](../../../csharp/language-reference/keywords/override.md)</ept> modifier, the accessor modifier must match the accessor of the overridden accessor, if any.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The accessibility level on the accessor must be more restrictive than the accessibility level on the property or indexer itself.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Access Modifiers on Overriding Accessors</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you override a property or indexer, the overridden accessors must be accessible to the overriding code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Also, the accessibility level of both the property/indexer, and that of the accessors must match the corresponding overridden property/indexer and the accessors.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexers#7<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/restricting-accessor-accessibility_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Implementing Interfaces</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When you use an accessor to implement an interface, the accessor may not have an access modifier.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, if you implement the interface using one accessor, such as <ph id="ph1">`get`</ph>, the other accessor can have an access modifier, as in the following example:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexers#8<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/restricting-accessor-accessibility_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Accessor Accessibility Domain</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you use an access modifier on the accessor, the <bpt id="p1">[</bpt>accessibility domain<ept id="p1">](../../../csharp/language-reference/keywords/accessibility-domain.md)</ept> of the accessor is determined by this modifier.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you did not use an access modifier on the accessor, the accessibility domain of the accessor is determined by the accessibility level of the property or indexer.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example contains three classes, <ph id="ph1">`BaseClass`</ph>, <ph id="ph2">`DerivedClass`</ph>, and <ph id="ph3">`MainClass`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>There are two properties on the <ph id="ph1">`BaseClass`</ph>, <ph id="ph2">`Name`</ph> and <ph id="ph3">`Id`</ph> on both classes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The example demonstrates how the property <ph id="ph1">`Id`</ph> on <ph id="ph2">`DerivedClass`</ph> can be hidden by the property <ph id="ph3">`Id`</ph> on <ph id="ph4">`BaseClass`</ph> when you use a restrictive access modifier such as <bpt id="p1">[</bpt>protected<ept id="p1">](../../../csharp/language-reference/keywords/protected.md)</ept> or <bpt id="p2">[</bpt>private<ept id="p2">](../../../csharp/language-reference/keywords/private.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Therefore, when you assign values to this property, the property on the <ph id="ph1">`BaseClass`</ph> class is called instead.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Replacing the access modifier by <bpt id="p1">[</bpt>public<ept id="p1">](../../../csharp/language-reference/keywords/public.md)</ept> will make the property accessible.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The example also demonstrates that a restrictive access modifier, such as <ph id="ph1">`private`</ph> or <ph id="ph2">`protected`</ph>, on the <ph id="ph3">`set`</ph> accessor of the <ph id="ph4">`Name`</ph> property in <ph id="ph5">`DerivedClass`</ph> prevents access to the accessor and generates an error when you assign to it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexers#5<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/restricting-accessor-accessibility_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Comments</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Notice that if you replace the declaration <ph id="ph1">`new private string Id`</ph> by <ph id="ph2">`new public string Id`</ph>, you get the output:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Properties<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/properties.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Indexers<ept id="p1">](../../../csharp/programming-guide/indexers/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Access Modifiers<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/access-modifiers.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>