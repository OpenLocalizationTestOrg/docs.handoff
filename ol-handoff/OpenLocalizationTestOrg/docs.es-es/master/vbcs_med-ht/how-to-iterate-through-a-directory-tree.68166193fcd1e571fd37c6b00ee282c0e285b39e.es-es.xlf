<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0d846cfaaf905e819c3aca64222d8ca34780281</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\file-system\how-to-iterate-through-a-directory-tree.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc641114900ae23678cb19853711985d44305a82</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66825092c2ca68e8bcda7283ded98faa30bbb68f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Iterate Through a Directory Tree (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Iterate Through a Directory Tree (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The phrase "iterate a directory tree" means to access each file in each nested subdirectory under a specified root folder, to any depth.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You do not necessarily have to open each file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can just retrieve the name of the file or subdirectory as a <ph id="ph1">`string`</ph>, or you can retrieve additional information in the form of a <ph id="ph2">&lt;xref:System.IO.FileInfo?displayProperty=fullName&gt;</ph> or <ph id="ph3">&lt;xref:System.IO.DirectoryInfo?displayProperty=fullName&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In Windows, the terms "directory" and "folder" are used interchangeably.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Most documentation and user interface text uses the term "folder," but the <ph id="ph1">[!INCLUDE[dnprdnshort](../../../csharp/getting-started/includes/dnprdnshort_md.md)]</ph> class library uses the term "directory."</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the simplest case, in which you know for certain that you have access permissions for all directories under a specified root, you can use the <ph id="ph1">`System.IO.SearchOption.AllDirectories`</ph> flag.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This flag returns all the nested subdirectories that match the specified pattern.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following example shows how to use this flag.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The weakness in this approach is that if any one of the subdirectories under the specified root causes a <ph id="ph1">&lt;xref:System.IO.DirectoryNotFoundException&gt;</ph> or <ph id="ph2">&lt;xref:System.UnauthorizedAccessException&gt;</ph>, the whole method fails and returns no directories.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The same is true when you use the <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you have to handle these exceptions on specific subfolders, you must manually walk the directory tree, as shown in the following examples.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you manually walk a directory tree, you can handle the subdirectories first (<bpt id="p1">*</bpt>pre-order traversal<ept id="p1">*</ept>), or the files first (<bpt id="p2">*</bpt>post-order traversal<ept id="p2">*</ept>).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you perform a pre-order traversal, you walk the whole tree under the current folder before iterating through the files that are directly in that folder itself.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The examples later in this document perform post-order traversal, but you can easily modify them to perform pre-order traversal.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Another option is whether to use recursion or a stack-based traversal.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The examples later in this document show both approaches.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you have to perform a variety of operations on files and folders, you can modularize these examples by refactoring the operation into separate functions that you can invoke by using a single delegate.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>NTFS file systems can contain <bpt id="p1">*</bpt>reparse points<ept id="p1">*</ept> in the form of <bpt id="p2">*</bpt>junction points<ept id="p2">*</ept>, <bpt id="p3">*</bpt>symbolic links<ept id="p3">*</ept>, and <bpt id="p4">*</bpt>hard links<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The .NET Framework methods such as <ph id="ph1">&lt;xref:System.IO.DirectoryInfo.GetFiles%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.DirectoryInfo.GetDirectories%2A&gt;</ph> will not return any subdirectories under a reparse point.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This behavior guards against the risk of entering into an infinite loop when two reparse points refer to each other.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In general, you should use extreme caution when you deal with reparse points to ensure that you do not unintentionally modify or delete files.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If you require precise control over reparse points, use platform invoke or native code to call the appropriate Win32 file system methods directly.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example shows how to walk a directory tree by using recursion.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The recursive approach is elegant but has the potential to cause a stack overflow exception if the directory tree is large and deeply nested.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The particular exceptions that are handled, and the particular actions that are performed on each file or folder, are provided as examples only.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should modify this code to meet your specific requirements.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See the comments in the code for more information.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csFilesandFolders#1<ept id="p2">](../../../csharp/programming-guide/file-system/codesnippet/CSharp/how-to-iterate-through-a-directory-tree_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example shows how to iterate through files and folders in a directory tree without using recursion.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This technique uses the generic <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> collection type, which is a last in first out (LIFO) stack.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The particular exceptions that are handled, and the particular actions that are performed on each file or folder, are provided as examples only.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You should modify this code to meet your specific requirements.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See the comments in the code for more information.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csFilesandFolders#2<ept id="p2">](../../../csharp/programming-guide/file-system/codesnippet/CSharp/how-to-iterate-through-a-directory-tree_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It is generally too time-consuming to test every folder to determine whether your application has permission to open it.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Therefore, the code example just encloses that part of the operation in a <ph id="ph1">`try/catch`</ph> block.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can modify the <ph id="ph1">`catch`</ph> block so that when you are denied access to a folder, you try to elevate your permissions and then access it again.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As a rule, only catch those exceptions that you can handle without leaving your application in an unknown state.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you must store the contents of a directory tree, either in memory or on disk, the best option is to store only the <ph id="ph1">&lt;xref:System.IO.FileSystemInfo.FullName%2A&gt;</ph> property (of type <ph id="ph2">`string`</ph>) for each file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can then use this string to create a new <ph id="ph1">&lt;xref:System.IO.FileInfo&gt;</ph> or <ph id="ph2">&lt;xref:System.IO.DirectoryInfo&gt;</ph> object as necessary, or open any file that requires additional processing.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Robust file iteration code must take into account many complexities of the file system.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>NTFS Technical Reference<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=79488)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IO&gt;</ph></source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ and File Directories<ept id="p1">](http://msdn.microsoft.com/library/5a5d516c-0279-4a84-ac84-b87f54caa808)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>File System and the Registry (C# Programming Guide)<ept id="p1">](../../../csharp/programming-guide/file-system/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>