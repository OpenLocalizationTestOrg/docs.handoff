<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ae550ba7d3f2767cf7cc64a14bc177d15f426c36</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\interop\how-to-use-indexed-properties-in-com-interop-rogramming.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9bf71bee4635810cf9c7b717bc934c276aba1866</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7c5d4026b00cc220951408882219923def2f1026</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Indexed properties<ept id="p1">*</ept> improve the way in which COM properties that have parameters are consumed in C# programming.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Indexed properties work together with other features in Visual C#, such as <bpt id="p1">[</bpt>named and optional arguments<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept>, a new type (<bpt id="p2">[</bpt>dynamic<ept id="p2">](../../../csharp/language-reference/keywords/dynamic.md)</ept>), and <bpt id="p3">[</bpt>embedded type information<ept id="p3">](../../../csharp/programming-guide/concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio.md)</ept>, to enhance Microsoft Office programming.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In earlier versions of C#, methods are accessible as properties only if the <ph id="ph1">`get`</ph> method has no parameters and the <ph id="ph2">`set`</ph> method has one and only one value parameter.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, not all COM properties meet those restrictions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, the Excel <bpt id="p1">[</bpt>Range<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=166053)</ept> property has a <ph id="ph1">`get`</ph> accessor that requires a parameter for the name of the range.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the past, because you could not access the <ph id="ph1">`Range`</ph> property directly, you had to use the <ph id="ph2">`get_Range`</ph> method instead, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexedProperties#1<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-use-indexed-properties-in-com-interop-rogramming_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Indexed properties enable you to write the following instead:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexedProperties#2<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-use-indexed-properties-in-com-interop-rogramming_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The previous example also uses the <bpt id="p1">[</bpt>optional arguments<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept> feature, which enables you to omit <ph id="ph1">`Type.Missing`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Similarly to set the value of the <ph id="ph1">`Value`</ph> property of a <bpt id="p1">[</bpt>Range<ept id="p1">](https://msdn.microsoft.com/library/microsoft.office.interop.excel.range.aspx)</ept> object in Visual C# 2008 and earlier, two arguments are required.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>One supplies an argument for an optional parameter that specifies the type of the range value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The other supplies the value for the <ph id="ph1">`Value`</ph> property.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following examples illustrate these techniques.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Both set the value of the A1 cell to <ph id="ph1">`Name`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexedProperties#3<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-use-indexed-properties-in-com-interop-rogramming_3.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Indexed properties enable you to write the following code instead.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexedProperties#4<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-use-indexed-properties-in-com-interop-rogramming_4.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You cannot create indexed properties of your own.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The feature only supports consumption of existing indexed properties.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code shows a complete example.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information about how to set up a project that accesses the Office API, see <bpt id="p1">[</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id="p1">](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideIndexedProperties#5<ept id="p2">](../../../csharp/programming-guide/interop/codesnippet/CSharp/how-to-use-indexed-properties-in-com-interop-rogramming_5.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Named and Optional Arguments<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/named-and-optional-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>dynamic<ept id="p1">](../../../csharp/language-reference/keywords/dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Using Type dynamic<ept id="p1">](../../../csharp/programming-guide/types/using-type-dynamic.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Use Named and Optional Arguments in Office Programming<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Access Office Interop Objects by Using Visual C# Features<ept id="p1">](../../../csharp/programming-guide/interop/how-to-access-office-onterop-objects.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Walkthrough: Office Programming<ept id="p1">](../../../csharp/programming-guide/interop/walkthrough-office-programming.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>