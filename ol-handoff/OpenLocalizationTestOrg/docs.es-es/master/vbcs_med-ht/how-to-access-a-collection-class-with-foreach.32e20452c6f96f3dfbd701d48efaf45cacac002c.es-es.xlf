<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">841132b5181c5e17d1eabae11d3550811aa959ec</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\how-to-access-a-collection-class-with-foreach.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3db7b1006d29774f3cd7e0463c8dee5a4fb0314d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">554e5226a0f1d695cfbfe715f4f0a08140694357</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Access a Collection Class with foreach (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Access a Collection Class with foreach (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following code example illustrates how to write a non-generic collection class that can be used with <bpt id="p1">[</bpt>foreach<ept id="p1">](../../../csharp/language-reference/keywords/foreach-in.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The example defines a string tokenizer class.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This example represents recommended practice only when you cannot use a generic collection class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an example of how to implement a type-safe generic collection class that supports <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, see <bpt id="p1">[</bpt>Iterators<ept id="p1">](http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In the example, the following code segment uses the <ph id="ph1">`Tokens`</ph> class to break the sentence "This is a sample sentence."</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>into tokens by using ' ' and '-' as separators.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The code then displays those tokens by using a <ph id="ph1">`foreach`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideCollections#3<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-access-a-collection-class-with-foreach_1.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Internally, the <ph id="ph1">`Tokens`</ph> class uses an array to store the tokens.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Because arrays implement <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>, the code example could have used the array's enumeration methods (<ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>) instead of defining them in the <ph id="ph7">`Tokens`</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The method definitions are included in the example to clarify how they are defined and what each does.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-cs</bpt><bpt id="p2">[</bpt>csProgGuideCollections#2<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/codesnippet/CSharp/how-to-access-a-collection-class-with-foreach_2.cs)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In C#, it is not necessary for a collection class to implement <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> to be compatible with <ph id="ph3">`foreach`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the class has the required <ph id="ph1">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> members, it will work with <ph id="ph5">`foreach`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Omitting the interfaces has the advantage of enabling you to define a return type for <ph id="ph1">`Current`</ph> that is more specific than <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This provides type safety.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, change the following lines in the previous example.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`Current`</ph> returns a string, the compiler can detect when an incompatible type is used in a <ph id="ph2">`foreach`</ph> statement, as shown in the following code.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The disadvantage of omitting <ph id="ph1">&lt;xref:System.Collections.IEnumerable&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> is that the collection class is no longer interoperable with the <ph id="ph3">`foreach`</ph> statements, or equivalent statements, of other common language runtime languages.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Reference<ept id="p1">](../../../csharp/language-reference/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Arrays<ept id="p1">](../../../csharp/programming-guide/arrays/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Collections<ept id="p1">](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>