<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="inheritance.md" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b7d726c" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ad15bc57b3ec3b6b06f671f560dce426af64ccc</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\csharp\programming-guide\classes-and-structs\inheritance.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_med-ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">HT</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5811e1d429373b4cc309dbc58a8d3ae6bf182869</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c8e27be4474db055e362f2a632bdfe98e2c7949c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" restype="x-metadata">
          <source>Inheritance (C# Programming Guide) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Inheritance (C# Programming Guide)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Inheritance, together with encapsulation and polymorphism, is one of the three primary characteristics of object-oriented programming.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Inheritance enables you to create new classes that reuse, extend, and modify the behavior that is defined in other classes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The class whose members are inherited is called the <bpt id="p1">*</bpt>base class<ept id="p1">*</ept>, and the class that inherits those members is called the <bpt id="p2">*</bpt>derived class<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A derived class can have only one direct base class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, inheritance is transitive.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If ClassC is derived from ClassB, and ClassB is derived from ClassA, ClassC inherits the members declared in ClassB and ClassA.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Structs do not support inheritance, but they can implement interfaces.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Interfaces<ept id="p1">](../../../csharp/programming-guide/interfaces/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Conceptually, a derived class is a specialization of the base class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, if you have a base class <ph id="ph1">`Animal`</ph>, you might have one derived class that is named <ph id="ph2">`Mammal`</ph> and another derived class that is named <ph id="ph3">`Reptile`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Mammal`</ph> is an <ph id="ph2">`Animal`</ph>, and a <ph id="ph3">`Reptile`</ph> is an <ph id="ph4">`Animal`</ph>, but each derived class represents different specializations of the base class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When you define a class to derive from another class, the derived class implicitly gains all the members of the base class, except for its constructors and finalizers.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The derived class can thereby reuse the code in the base class without having to re-implement it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the derived class, you can add more members.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this manner, the derived class extends the functionality of the base class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following illustration shows a class <ph id="ph1">`WorkItem`</ph> that represents an item of work in some business process.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Like all classes, it derives from <ph id="ph1">&lt;xref:System.Object?displayProperty=fullName&gt;</ph> and inherits all its methods.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WorkItem`</ph> adds five members of its own.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These include a constructor, because constructors are not inherited.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Class <ph id="ph1">`ChangeRequest`</ph> inherits from <ph id="ph2">`WorkItem`</ph> and represents a particular kind of work item.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ChangeRequest`</ph> adds two more members to the members that it inherits from <ph id="ph2">`WorkItem`</ph> and from <ph id="ph3">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It must add its own constructor, and it also adds <ph id="ph1">`originalItemID`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Property <ph id="ph1">`originalItemID`</ph> enables the <ph id="ph2">`ChangeRequest`</ph> instance to be associated with the original <ph id="ph3">`WorkItem`</ph> to which the change request applies.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">![</bpt>Class Inheritance<ept id="p1">]</ept><bpt id="p2">(../../../csharp/programming-guide/classes-and-structs/media/class_inheritance.png "</bpt>Class_Inheritance<ept id="p2">")</ept></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Class inheritance</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example shows how the class relationships demonstrated in the previous illustration are expressed in C#.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The example also shows how <ph id="ph1">`WorkItem`</ph> overrides the virtual method <ph id="ph2">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph>, and how the <ph id="ph3">`ChangeRequest`</ph> class inherits the <ph id="ph4">`WorkItem`</ph> implementation of the method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Abstract and Virtual Methods</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When a base class declares a method as <bpt id="p1">[</bpt>virtual<ept id="p1">](../../../csharp/language-reference/keywords/virtual.md)</ept>, a derived class can <bpt id="p2">[</bpt>override<ept id="p2">](../../../csharp/language-reference/keywords/override.md)</ept> the method with its own implementation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If a base class declares a member as <bpt id="p1">[</bpt>abstract<ept id="p1">](../../../csharp/language-reference/keywords/abstract.md)</ept>, that method must be overridden in any non-abstract class that directly inherits from that class.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If a derived class is itself abstract, it inherits abstract members without implementing them.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Abstract and virtual members are the basis for polymorphism, which is the second primary characteristic of object-oriented programming.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Polymorphism<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/polymorphism.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Abstract Base Classes</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can declare a class as <bpt id="p1">[</bpt>abstract<ept id="p1">](../../../csharp/language-reference/keywords/abstract.md)</ept> if you want to prevent direct instantiation by using the <bpt id="p2">[</bpt>new<ept id="p2">](../../../csharp/language-reference/keywords/new.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you do this, the class can be used only if a new class is derived from it.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An abstract class can contain one or more method signatures that themselves are declared as abstract.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>These signatures specify the parameters and return value but have no implementation (method body).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An abstract class does not have to contain abstract members; however, if a class does contain an abstract member, the class itself must be declared as abstract.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Derived classes that are not abstract themselves must provide the implementation for any abstract methods from an abstract base class.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Abstract and Sealed Classes and Class Members<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>interface<ept id="p1">*</ept> is a reference type that is somewhat similar to an abstract base class that consists of only abstract members.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When a class implements an interface, it must provide an implementation for all the members of the interface.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A class can implement multiple interfaces even though it can derive from only a single direct base class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Interfaces are used to define specific capabilities for classes that do not necessarily have an "is a" relationship.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">&lt;xref:System.IEquatable%601?displayProperty=fullName&gt;</ph> interface can be implemented by any class or struct that has to enable client code to determine whether two objects of the type are equivalent (however the type defines equivalence).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> does not imply the same kind of "is a" relationship that exists between a base class and a derived class (for example, a <ph id="ph2">`Mammal`</ph> is an <ph id="ph3">`Animal`</ph>).</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Interfaces<ept id="p1">](../../../csharp/programming-guide/interfaces/index.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Preventing Further Derivation</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A class can prevent other classes from inheriting from it, or from any of its members, by declaring itself or the member as <bpt id="p1">[</bpt>sealed<ept id="p1">](../../../csharp/language-reference/keywords/sealed.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Abstract and Sealed Classes and Class Members<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Derived Class Hiding of Base Class Members</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A derived class can hide base class members by declaring members with the same name and signature.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new.md)</ept> modifier can be used to explicitly indicate that the member is not intended to be an override of the base member.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The use of <bpt id="p1">[</bpt>new<ept id="p1">](../../../csharp/language-reference/keywords/new.md)</ept> is not required, but a compiler warning will be generated if <bpt id="p2">[</bpt>new<ept id="p2">](../../../csharp/language-reference/keywords/new.md)</ept> is not used.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Versioning with the Override and New Keywords<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords.md)</ept> and <bpt id="p2">[</bpt>Knowing When to Use Override and New Keywords<ept id="p2">](../../../csharp/programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C# Programming Guide<ept id="p1">](../../../csharp/programming-guide/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../../../csharp/programming-guide/classes-and-structs/index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>class<ept id="p1">](../../../csharp/language-reference/keywords/class.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>struct<ept id="p1">](../../../csharp/language-reference/keywords/struct.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>