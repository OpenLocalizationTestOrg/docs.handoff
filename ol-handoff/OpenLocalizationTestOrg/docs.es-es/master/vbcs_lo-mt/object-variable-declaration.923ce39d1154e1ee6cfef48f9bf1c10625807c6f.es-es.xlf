<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b38b184525ee27da18dc1d0c592e89887c0116c3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\variables\object-variable-declaration.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab14927435a39379ed73bcf11d236cb270536633</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f346ebd0223b14b5aa50b494579aff40d923ce3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Object Variable Declaration (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Object Variable Declaration (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You use a normal declaration statement to declare an object variable.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the data type, you specify either <ph id="ph1">`Object`</ph> (that is, the <bpt id="p1">[</bpt>Object Data Type<ept id="p1">](../../../../visual-basic/language-reference/data-types/object-data-type.md)</ept>) or a more specific class from which the object is to be created.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Declaring a variable as <ph id="ph1">`Object`</ph> is the same as declaring it as <ph id="ph2">&lt;xref:System.Object?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you declare a variable with a specific object class, it can access all the methods and properties exposed by that class and the classes from which it inherits.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you declare the variable with <ph id="ph1">&lt;xref:System.Object&gt;</ph>, it can access only the members of the <ph id="ph2">&lt;xref:System.Object&gt;</ph> class, unless you turn <ph id="ph3">`Option Strict Off`</ph> to allow late binding.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Declaration Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use the following syntax to declare an object variable:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can also specify <bpt id="p1">[</bpt>Public<ept id="p1">](../../../../visual-basic/language-reference/modifiers/public.md)</ept>, <bpt id="p2">[</bpt>Protected<ept id="p2">](../../../../visual-basic/language-reference/modifiers/protected.md)</ept>, <bpt id="p3">[</bpt>Friend<ept id="p3">](../../../../visual-basic/language-reference/modifiers/friend.md)</ept>, <ph id="ph1">`Protected Friend`</ph>, <bpt id="p4">[</bpt>Private<ept id="p4">](../../../../visual-basic/language-reference/modifiers/private.md)</ept>, <bpt id="p5">[</bpt>Shared<ept id="p5">](../../../../visual-basic/language-reference/modifiers/shared.md)</ept>, or <bpt id="p6">[</bpt>Static<ept id="p6">](../../../../visual-basic/language-reference/modifiers/static.md)</ept> in the declaration.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example declarations are valid:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Late Binding and Early Binding</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Sometimes the specific class is unknown until your code runs.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this case, you must declare the object variable with the <ph id="ph1">`Object`</ph> data type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This creates a general reference to any type of object, and the specific class is assigned at run time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>late binding<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Late binding requires additional execution time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It also limits your code to the methods and properties of the class you have most recently assigned to it.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This can cause run-time errors if your code attempts to access members of a different class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you know the specific class at compile time, you should declare the object variable to be of that class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This is called <bpt id="p1">*</bpt>early binding<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Early binding improves performance and guarantees your code access to all the methods and properties of the specific class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the preceding example declarations, if variable <ph id="ph1">`objA`</ph> uses only objects of class <ph id="ph2">&lt;xref:System.Windows.Forms.Label?displayProperty=fullName&gt;</ph>, you should specify <ph id="ph3">`As System.Windows.Forms.Label`</ph> in its declaration.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Advantages of Early Binding</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Declaring an object variable as a specific class gives you several advantages:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Automatic type checking</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Guaranteed access to all members of the specific class</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Microsoft IntelliSense support in the Code Editor</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Improved readability of your code</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Fewer errors in your code</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Errors caught at compile time rather than run time</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Faster code execution</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Access to Object Variable Members</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`Option Strict`</ph> is turned <ph id="ph2">`On`</ph>, an object variable can access only the methods and properties of the class with which you declare it.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The following example illustrates this.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`p`</ph> can use only the members of the <ph id="ph2">&lt;xref:System.Object&gt;</ph> class itself, which do not include the <ph id="ph3">`Left`</ph> property.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>On the other hand, <ph id="ph1">`q`</ph> was declared to be of type <ph id="ph2">&lt;xref:System.Windows.Forms.Label&gt;</ph>, so it can use all the methods and properties of the <ph id="ph3">&lt;xref:System.Windows.Forms.Label&gt;</ph> class in the <ph id="ph4">&lt;xref:System.Windows.Forms&gt;</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Flexibility of Object Variables</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When working with objects in an inheritance hierarchy, you have a choice of which class to use for declaring your object variables.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In making this choice, you must balance flexibility of object assignment against access to members of a class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For example, consider the inheritance hierarchy that leads to the <ph id="ph1">&lt;xref:System.Windows.Forms.Form?displayProperty=fullName&gt;</ph> class:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Suppose your application defines a form class called <ph id="ph1">`specialForm`</ph>, which inherits from class <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can declare an object variable that refers specifically to <ph id="ph1">`specialForm`</ph>, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The declaration in the preceding example limits the variable <ph id="ph1">`nextForm`</ph> to objects of class <ph id="ph2">`specialForm`</ph>, but it also makes all the methods and properties of <ph id="ph3">`specialForm`</ph> available to <ph id="ph4">`nextForm`</ph>, as well as all the members of all the classes from which <ph id="ph5">`specialForm`</ph> inherits.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can make an object variable more general by declaring it to be of type <ph id="ph1">&lt;xref:System.Windows.Forms.Form&gt;</ph>, as the following example shows.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The declaration in the preceding example lets you assign any form in your application to <ph id="ph1">`anyForm`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>However, although <ph id="ph1">`anyForm`</ph> can access all the members of class <ph id="ph2">&lt;xref:System.Windows.Forms.Form&gt;</ph>, it cannot use any of the additional methods or properties defined for specific forms such as <ph id="ph3">`specialForm`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>All the members of a base class are available to derived classes, but the additional members of a derived class are unavailable to the base class.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Object Variables<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/object-variables.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object Variable Assignment<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-assignment.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Object Variable Values<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/object-variable-values.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Declare an Object Variable and Assign an Object to It in Visual Basic<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/how-to-declare-an-object-variable-and-assign-an-object-to-it.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>How to: Access Members of an Object<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/how-to-access-members-of-an-object.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>New Operator<ept id="p1">](../../../../visual-basic/language-reference/operators/new-operator.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Local Type Inference<ept id="p1">](../../../../visual-basic/programming-guide/language-features/variables/local-type-inference.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>