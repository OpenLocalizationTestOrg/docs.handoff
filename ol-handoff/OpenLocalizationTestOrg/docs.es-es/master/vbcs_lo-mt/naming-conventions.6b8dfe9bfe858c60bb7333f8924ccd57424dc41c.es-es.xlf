<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-868c4f2" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">638779fa507ed8e3b0aa0956426365833313b920</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\program-structure\naming-conventions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1659be978b79964707d73c827ff4872bbf408f38</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">be6cf559f2444433de3d2d2290fb0f3867eed655</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual Basic Naming Conventions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visual Basic Naming Conventions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you name an element in your Visual Basic application, the first character of that name must be an alphabetic character or an underscore.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Note, however, that names beginning with an underscore are not compliant with the <bpt id="p1">[</bpt>Language Independence and Language-Independent Components<ept id="p1">](https://msdn.microsoft.com/library/12a7a7h3)</ept> (CLS).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The following suggestions apply to naming.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Begin each separate word in a name with a capital letter, as in <ph id="ph1">`FindLastRecord`</ph> and <ph id="ph2">`RedrawMyForm`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Begin function and method names with a verb, as in <ph id="ph1">`InitNameArray`</ph> or <ph id="ph2">`CloseDialog`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Begin class, structure, module, and property names with a noun, as in <ph id="ph1">`EmployeeName`</ph> or <ph id="ph2">`CarAccessory`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Begin interface names with the prefix "I", followed by a noun or a noun phrase, like <ph id="ph1">`IComponent`</ph>, or with an adjective describing the interface's behavior, like <ph id="ph2">`IPersistable`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Do not use the underscore, and use abbreviations sparingly, because abbreviations can cause confusion.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Begin event handler names with a noun describing the type of event followed by the "<ph id="ph1">`EventHandler`</ph>" suffix, as in "<ph id="ph2">`MouseEventHandler`</ph>".</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In names of event argument classes, include the "<ph id="ph1">`EventArgs`</ph>" suffix.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If an event has a concept of "before" or "after," use a suffix in present or past tense, as in "<ph id="ph1">`ControlAdd`</ph>" or "<ph id="ph2">`ControlAdded`</ph>".</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For long or frequently used terms, use abbreviations to keep name lengths reasonable, for example, "HTML", instead of "Hypertext Markup Language".</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In general, variable names greater than 32 characters are difficult to read on a monitor set to a low resolution.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Also, make sure your abbreviations are consistent throughout the entire application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Randomly switching in a project between "HTML" and "Hypertext Markup Language" can lead to confusion.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Avoid using names in an inner scope that are the same as names in an outer scope.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Errors can result if the wrong variable is accessed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a conflict occurs between a variable and the keyword of the same name, you must identify the keyword by preceding it with the appropriate type library.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, if you have a variable called <ph id="ph1">`Date`</ph>, you can use the intrinsic <ph id="ph2">`Date`</ph> function only by calling <ph id="ph3">&lt;xref:System.DateTime.Date%2A?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Keywords as Element Names in Code<ept id="p1">](../../../visual-basic/programming-guide/program-structure/keywords-as-element-names-in-code.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Me, My, MyBase, and MyClass<ept id="p1">](../../../visual-basic/programming-guide/program-structure/me-my-mybase-and-myclass.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declared Element Names<ept id="p1">](../../../visual-basic/programming-guide/language-features/declared-elements/declared-element-names.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Program Structure and Code Conventions<ept id="p1">](../../../visual-basic/programming-guide/program-structure/program-structure-and-code-conventions.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Visual Basic Language Reference<ept id="p1">](../../../visual-basic/language-reference/index.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>