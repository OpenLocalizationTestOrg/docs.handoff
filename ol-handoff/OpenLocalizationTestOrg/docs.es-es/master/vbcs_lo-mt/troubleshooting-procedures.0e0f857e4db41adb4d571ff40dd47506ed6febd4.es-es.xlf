<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="es-es">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b81d562" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a16a03aa8c12e6696f80eeddb96f4f90c3bb7c68</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\visual-basic\programming-guide\language-features\procedures\troubleshooting-procedures.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">vbcs_lo-mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd977a0bbbccff9f7d5bd46006eda6f3eebe20ae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ee14f34c5f46c120e79c05d5ecc71b5f9b3acfb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Troubleshooting Procedures (Visual Basic) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Troubleshooting Procedures (Visual Basic)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This page lists some common problems that can occur when working with procedures.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Returning an Array Type from a Function Procedure</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`Function`</ph> procedure returns an array data type, you cannot use the <ph id="ph2">`Function`</ph> name to store values in the elements of the array.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you attempt to do this, the compiler interprets it as a call to the <ph id="ph1">`Function`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The following example generates compiler errors.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`' The following statement generates a`</ph>   <ph id="ph2">`COMPILER ERROR`</ph>  <ph id="ph3">`.`</ph></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`' The following statement generates a`</ph>   <ph id="ph2">`COMPILER ERROR`</ph>  <ph id="ph3">`.`</ph></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The statement <ph id="ph1">`allOnes(i) = 1`</ph> generates a compiler error because it appears to call <ph id="ph2">`allOnes`</ph> with an argument of the wrong data type (a singleton <ph id="ph3">`Integer`</ph> instead of an <ph id="ph4">`Integer`</ph> array).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The statement <ph id="ph1">`Return allOnes()`</ph> generates a compiler error because it appears to call <ph id="ph2">`allOnes`</ph> with no argument.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to modify the elements of an array that is to be returned, define an internal array as a local variable.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The following example compiles without error.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#66<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_1.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Argument Not Being Modified by Procedure Call</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you intend to allow a procedure to change a programming element underlying an argument in the calling code, you must pass it by reference.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>But a procedure can access the elements of a reference type argument even if you pass it by value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Underlying Variable<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To allow the procedure to replace the value of the underlying variable element itself, the procedure must declare the parameter <bpt id="p1">[</bpt>ByRef<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byref.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Also, the calling code must not enclose the argument in parentheses, because that would override the <ph id="ph1">`ByRef`</ph> passing mechanism.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Reference Type Elements<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you declare a parameter <bpt id="p1">[</bpt>ByVal<ept id="p1">](../../../../visual-basic/language-reference/modifiers/byval.md)</ept>, the procedure cannot modify the underlying variable element itself.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, if the argument is a reference type, the procedure can modify the members of the object to which it points, even though it cannot replace the variable's value.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, if the argument is an array variable, the procedure cannot assign a new array to it, but it can change one or more of its elements.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The changed elements are reflected in the underlying array variable in the calling code.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following example defines two procedures that take an array variable by value and operate on its elements.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Procedure <ph id="ph1">`increase`</ph> simply adds one to each element.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Procedure <ph id="ph1">`replace`</ph> assigns a new array to the parameter <ph id="ph2">`a()`</ph> and then adds one to each element.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, the reassignment does not affect the underlying array variable in the calling code because <ph id="ph1">`a()`</ph> is declared <ph id="ph2">`ByVal`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#35<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_2.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#38<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_3.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following example makes calls to <ph id="ph1">`increase`</ph> and <ph id="ph2">`replace`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#37<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_4.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`MsgBox`</ph> call displays "After increase(n): 11, 21, 31, 41".</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`n`</ph> is a reference type, <ph id="ph2">`increase`</ph> can change its members, even though it is passed <ph id="ph3">`ByVal`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">`MsgBox`</ph> call displays "After replace(n): 11, 21, 31, 41".</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`n`</ph> is passed <ph id="ph2">`ByVal`</ph>, <ph id="ph3">`replace`</ph> cannot modify the variable <ph id="ph4">`n`</ph> by assigning a new array to it.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`replace`</ph> creates the new array instance <ph id="ph2">`k`</ph> and assigns it to the local variable <ph id="ph3">`a`</ph>, it loses the reference to <ph id="ph4">`n`</ph> passed in by the calling code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When it increments the members of <ph id="ph1">`a`</ph>, only the local array <ph id="ph2">`k`</ph> is affected.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to modify an underlying variable element itself, pass it by reference.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following example shows the change in the declaration of <ph id="ph1">`replace`</ph> that allows it to replace one array with another in the calling code.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#64<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_5.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Unable to Define an Overload</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you want to define an overloaded version of a procedure, you must use the same name but a different signature.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If the compiler cannot differentiate your declaration from an overload with the same signature, it generates an error.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>signature<ept id="p1">*</ept> of a procedure is determined by the procedure name and the parameter list.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each overload must have the same name as all the other overloads but must differ from all of them in at least one of the other components of the signature.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following items, even though they pertain to the parameter list, are not components of a procedure's signature:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Procedure modifier keywords, such as <ph id="ph1">`Public`</ph>, <ph id="ph2">`Shared`</ph>, and <ph id="ph3">`Static`</ph></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Parameter names</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Parameter modifier keywords, such as <ph id="ph1">`ByRef`</ph> and <ph id="ph2">`Optional`</ph></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The data type of the return value (except for a conversion operator)</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You cannot overload a procedure by varying only one or more of the preceding items.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to define a procedure overload, you must vary the signature.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Because you must use the same name, you must vary the number, order, or data types of the parameters.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In a generic procedure, you can vary the number of type parameters.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In a conversion operator (<bpt id="p1">[</bpt>CType Function<ept id="p1">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept>), you can vary the return type.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Overload Resolution with Optional and ParamArray Arguments</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you are overloading a procedure with one or more <bpt id="p1">[</bpt>Optional<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept> parameters or a <bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> parameter, you must avoid duplicating any of the <bpt id="p3">*</bpt>implicit overloads<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For information, see <bpt id="p1">[</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Calling a Wrong Version of an Overloaded Procedure</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If a procedure has several overloaded versions, you should be familiar with all their parameter lists and understand how <ph id="ph1">[!INCLUDE[vbprvb](../../../../csharp/programming-guide/concepts/linq/includes/vbprvb_md.md)]</ph> resolves calls among the overloads.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise you could call an overload other than the intended one.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When you have determined which overload you want to call, be careful to observe the following rules:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Supply the correct number of arguments, and in the correct order.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Ideally, your arguments should have the exact same data types as the corresponding parameters.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In any case, the data type of each argument must widen to that of its corresponding parameter.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This is true even with the <bpt id="p1">[</bpt>Option Strict Statement<ept id="p1">](../../../../visual-basic/language-reference/statements/option-strict-statement.md)</ept> set to <ph id="ph1">`Off`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>If an overload requires any narrowing conversion from your argument list, that overload is not eligible to be called.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you supply arguments that require widening, make their data types as close as possible to the corresponding parameter data types.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If two or more overloads accept your argument data types, the compiler resolves your call to the overload that calls for the least amount of widening.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can reduce the chance of data type mismatches by using the <bpt id="p1">[</bpt>CType Function<ept id="p1">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept> conversion keyword when preparing your arguments.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Overload Resolution Failure</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>When you call an overloaded procedure, the compiler attempts to eliminate all but one of the overloads.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>If it succeeds, it resolves the call to that overload.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If it eliminates all the overloads, or if it cannot reduce the eligible overloads to a single candidate, it generates an error.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The following example illustrates the overload resolution process.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#62<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_6.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#63<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_7.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In the first call, the compiler eliminates the first overload because the type of the first argument (<ph id="ph1">`Short`</ph>) narrows to the type of the corresponding parameter (<ph id="ph2">`Byte`</ph>).</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>It then eliminates the third overload because each argument type in the second overload (<ph id="ph1">`Short`</ph> and <ph id="ph2">`Single`</ph>) widens to the corresponding type in the third overload (<ph id="ph3">`Integer`</ph> and <ph id="ph4">`Single`</ph>).</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The second overload requires less widening, so the compiler uses it for the call.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the second call, the compiler cannot eliminate any of the overloads on the basis of narrowing.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>It eliminates the third overload for the same reason as in the first call, because it can call the second overload with less widening of the argument types.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>However, the compiler cannot resolve between the first and second overloads.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Each has one defined parameter type that widens to the corresponding type in the other (<ph id="ph1">`Byte`</ph> to <ph id="ph2">`Short`</ph>, but <ph id="ph3">`Single`</ph> to <ph id="ph4">`Double`</ph>).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The compiler therefore generates an overload resolution error.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correct Approach:<ept id="p1">**</ept> To be able to call an overloaded procedure without ambiguity, use <bpt id="p2">[</bpt>CType Function<ept id="p2">](../../../../visual-basic/language-reference/functions/ctype-function.md)</ept> to match the argument data types to the parameter types.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following example shows a call to <ph id="ph1">`z`</ph> that forces resolution to the second overload.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[!code-vb</bpt><bpt id="p2">[</bpt>VbVbcnProcedures#65<ept id="p2">](./codesnippet/VisualBasic/troubleshooting-procedures_8.vb)</ept><ept id="p1">]</ept></source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Overload Resolution with Optional and ParamArray Arguments</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If two overloads of a procedure have identical signatures except that the last parameter is declared <bpt id="p1">[</bpt>Optional<ept id="p1">](../../../../visual-basic/language-reference/modifiers/optional.md)</ept> in one and <bpt id="p2">[</bpt>ParamArray<ept id="p2">](../../../../visual-basic/language-reference/modifiers/paramarray.md)</ept> in the other, the compiler resolves a call to that procedure according to the closest match.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Overload Resolution<ept id="p1">](./overload-resolution.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Procedures<ept id="p1">](./index.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Sub Procedures<ept id="p1">](./sub-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Function Procedures<ept id="p1">](./function-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Property Procedures<ept id="p1">](./property-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Operator Procedures<ept id="p1">](./operator-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Parameters and Arguments<ept id="p1">](./procedure-parameters-and-arguments.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Procedure Overloading<ept id="p1">](./procedure-overloading.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Considerations in Overloading Procedures<ept id="p1">](./considerations-in-overloading-procedures.md)</ept><ph id="ph1"> </ph></source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> [</bpt>Overload Resolution<ept id="p1">](./overload-resolution.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>